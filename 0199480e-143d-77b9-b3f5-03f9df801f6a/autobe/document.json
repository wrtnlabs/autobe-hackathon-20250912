{"operations":[{"specification":"This operation enables guest users to register as a guest in the library management system by creating a temporary guest user identity without authentication credentials. It creates an entry in the library_management_guestusers table which records a unique ID and timestamps for creation and updates. No login credentials are involved because the guest user kind is 'guest', allowing unauthenticated access for book additions and searches. The join operation issues any necessary temporary tokens for session continuity. The operation accepts no parameters and returns the authorized guest user identity structure defined as ILibraryManagementGuestUser.IAuthorized, corresponding to the system prefix 'LibraryManagement' and role name 'GuestUser'. This is a public (no authentication) endpoint.\n\nThis creation operation is essential to recognize anonymous usage while enabling the addition, viewing, and searching of books.\n\nNo additional authentication fields exist in the guest user schema, so further authentication operations like login are excluded.","authorizationType":"join","description":"Register a new guest user (unauthenticated) by creating a temporary identity record to support library management guest features like adding/viewing/searching books. This join operation is public and issues temporary authorization tokens. It works against the library_management_guestusers table, which stores guest user IDs and timestamps. No credentials or active login are required for guests.\n\nThe operation provides foundational temporary access for guests consistent with the guest kind role.\n\nThis operation does not require any request body parameters.","summary":"Create a guest user identity record in library_management_guestusers to enable temporary guest access.","parameters":[],"requestBody":null,"responseBody":{"description":"Authorized guest user identity and tokens","typeName":"ILibraryManagementGuestUser.IAuthorized"},"authorizationRole":"guestUser","name":"join","path":"/auth/guestUser/join","method":"post"},{"specification":"This operation refreshes authorization tokens for guest users using a valid refresh token, enabling continued temporary access without traditional login credentials. It acts on the library_management_guestusers context as this role is of kind 'guest'. The refresh operation verifies the validity of the provided refresh token and issues new access and refresh tokens for the guest user.\n\nThis mechanism is necessary to support ongoing guest sessions within system constraints and maintain temporary security.\n\nNo request body required as parameters for token refresh are usually supplied through headers or cookies.\n\nThe response type ILibraryManagementGuestUser.IAuthorized reflects the newly issued tokens and guest identity.","authorizationType":"refresh","description":"Refresh authorization tokens for guest users to maintain temporary session continuity without user credentials. Operates in the context of library_management_guestusers.\n\nAccepts refresh tokens via authentication headers (not in the body).\n\nReturns refreshed token authorization responses.","summary":"Refresh guest user authorization tokens without login credentials.","parameters":[],"requestBody":null,"responseBody":{"description":"Refreshed authorization tokens and guest identity","typeName":"ILibraryManagementGuestUser.IAuthorized"},"authorizationRole":"guestUser","name":"refresh","path":"/auth/guestUser/refresh","method":"post"},{"specification":"This operation retrieves a paginated and filterable list of books stored in the library_management_books table from the Prisma schema. It supports complex querying to allow partial title searches, supporting case-insensitive matching via the PostgreSQL trigram index on the title column. This operation returns a paginated list of book summaries including title, author, and ISBN fields to facilitate browsing and discovery of books.","description":"Retrieve a paginated list of books in the library collection. This operation supports complex filter conditions including partial and case-insensitive matching on the book title. It returns only non-deleted books as the deleted_at column is respected for soft deletion.\n\nThe permissions for this API are open, allowing 'guestUser' roles to access the listing without authentication. Pagination and sorting options are typically provided in the request body to manage large volumes of books.\n\nThis operation corresponds to the library_management_books table in the Prisma schema. The ISBN field has a uniqueness constraint ensuring no duplicates. The title and author fields are mandatory string fields, and the deleted_at timestamp is used to filter out soft deleted records.\n\nErrors may occur if pagination parameters are invalid; these should be handled gracefully by the system. This operation forms the foundation for book discovery features including browsing all books and filtered searches.","summary":"Retrieve a paginated list of books with search and filter capabilities","parameters":[],"requestBody":{"description":"Search and pagination parameters for books list retrieval","typeName":"ILibraryManagementBooks.IRequest"},"responseBody":{"description":"Paginated list of book summaries matching search criteria","typeName":"IPageILibraryManagementBooks.ISummary"},"authorizationType":null,"authorizationRole":"guestUser","name":"index","path":"/libraryManagement/guestUser/books","method":"patch"},{"specification":"This operation retrieves detailed information about a specific book from the library_management_books table by its unique identifier. It requires a single path parameter `bookId` which represents the book's unique UUID. The response includes title, author, ISBN, and timestamps, excluding soft deleted books.\n\nOnly the guestUser role is permitted access to fetch book details, consistent with the public openness of the service allowing unauthenticated access to book information.\n\nIf the specified bookId does not exist or has been soft deleted, the operation returns an appropriate 404 error.\n\nThis enables clients to get full details of a book for display or review purposes.","description":"Retrieve detailed information about a single book identified by its unique ID. The book data includes the title, author, ISBN, and timestamps of creation and last update.\n\nAuthorization is open to guestUsers without authentication. The system ensures that deleted books (soft deleted) are not returned.\n\nThe Prisma schema defines the book entity with uniqueness on ISBN and supports soft deletion by marking deleted_at. This API ensures consistency and data integrity by validating the presence of the bookId and its existence.\n\nErrors result in 404 not found if the book ID is invalid or the book has been deleted.","summary":"Get detailed information for a single book by ID","parameters":[{"name":"bookId","description":"Unique identifier of the target book","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed book information","typeName":"ILibraryManagementBooks"},"authorizationType":null,"authorizationRole":"guestUser","name":"at","path":"/libraryManagement/guestUser/books/{bookId}","method":"get"},{"specification":"This operation allows a guestUser to add a new book to the library_management_books table. The operation requires a JSON payload containing the book's title, author, and a unique ISBN which must conform to ISBN-10 or ISBN-13 formats as per business validation rules.\n\nThe book title and author fields must be non-empty strings, and the ISBN must not duplicate existing entries ensuring data integrity.\n\nSoft deletion is supported in the table but this operation creates fresh new records. The operation returns the newly created book data including timestamps.\n\nValidation errors such as missing fields or duplicate ISBNs result in HTTP 400 or 409 error responses.\n\nThis API is accessible by guestUser without authentication to enable open addition of books.","description":"Add a new book to the library collection by providing title, author, and ISBN. The book is validated to ensure all required fields are present and the ISBN is unique.\n\nGuest users without authentication can perform this operation as part of the open system design.\n\nThe Prisma schema enforces unique ISBN per book. The operation returns the full details of the created book including timestamps.\n\nErrors on invalid input or duplicate ISBNs are returned with appropriate HTTP error codes and messages.","summary":"Add a new book with title, author, and unique ISBN","parameters":[],"requestBody":{"description":"Payload containing book creation data","typeName":"ILibraryManagementBooks.ICreate"},"responseBody":{"description":"Details of the created book","typeName":"ILibraryManagementBooks"},"authorizationType":null,"authorizationRole":"guestUser","name":"create","path":"/libraryManagement/guestUser/books","method":"post"},{"specification":"This operation updates an existing book record in the library_management_books table by its unique identifier (bookId). It allows modification of the book's title, author, and ISBN fields, which are all required to be non-empty strings. The ISBN must remain unique across the table to prevent duplicates. The operation adheres to the business rules that guest users cannot update books; therefore, this operation is restricted to the guestUser role as per system design allowing only viewing and adding books.\n\nThe update process validates the input fields: title and author must be non-empty, and ISBN must conform to standard ISBN-10 or ISBN-13 formats and not conflict with existing records. The system ensures uniqueness constraints are maintained.\n\nThe operation includes a path parameter for the book's UUID and expects a request body conforming to ILibraryManagementBooks.IUpdate. The response returns the updated book entity. It follows the RESTful PUT method semantics.","path":"/libraryManagement/guestUser/books/{bookId}","method":"put","summary":"Update an existing book by its ID","description":"This operation updates an existing book's details in the library's collection by the specified book ID.\n\nThe book ID must be provided as a path parameter. The request body includes updated title, author, and ISBN values, each validated for non-empty content and ISBN format per library rules.\n\nOnly guestUser role access is allowed as per the system role definitions; no other roles are defined. This means that in this system's scope only the guestUser role can perform allowed operations.\n\nThe response contains the updated book entity including timestamps and the soft delete status if applicable.\n\nErrors include HTTP 400 for validation failures, 409 for duplicate ISBN, and 404 if the book is not found.\n\nThis operation directly manipulates the library_management_books table, which enforces ISBN uniqueness and supports soft deletes via the deleted_at field.\n\nPath parameters:\n- bookId: UUID of the book to update.\n\nThis operation requires full update payload; partial updates are not supported.\n\nIt is exposed as a PUT method on /books/{bookId}.","parameters":[{"name":"bookId","description":"UUID of the target book to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated book information","typeName":"ILibraryManagementBooks.IUpdate"},"responseBody":{"description":"Updated book entity","typeName":"ILibraryManagementBooks"},"authorizationType":null,"authorizationRole":"guestUser","name":"update"},{"specification":"This operation permanently deletes a book from the library_management_books table identified by its UUID bookId path parameter. As per system requirements, guestUser role is the only defined role and is authorized to perform deletions in this system context.\n\nThe deletion is a hard delete, completely removing the record with no soft deletion applied.\n\nThe operation expects no request body and returns no response content upon successful deletion. Errors include 404 if the book is not found.\n\nThis deletion operation is essential for accurate management of the library's book collection and compliance with administrative decisions.\n\nIt operates on the library_management_books table containing book metadata including title, author, and ISBN.","path":"/libraryManagement/guestUser/books/{bookId}","method":"delete","summary":"Delete a book by its ID","description":"This operation permanently deletes a book from the library's collection by its unique identifier.\n\nThe book ID must be provided as a path parameter. Access is granted exclusively to the guestUser role.\n\nUpon successful deletion, the operation returns no content.\n\nErrors include 404 if the specified book does not exist.\n\nThis operation performs a hard delete without soft delete behavior.\n\nIt manipulates the library_management_books table which stores book information including title, author, and ISBN.","parameters":[{"name":"bookId","description":"UUID of the target book to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"guestUser","name":"erase"}],"components":{"authorization":[{"name":"guestUser","description":"An unauthenticated user who can add books, view all books, and search by title in the system.","kind":"guest"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageILibraryManagementBooks.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ILibraryManagementBooks.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ILibraryManagementGuestUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of guest user. Unique UUID identifier."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp allowing recovery of guest user records."}},"required":["id","created_at","updated_at"],"description":"Guest user identity representing an unauthenticated temporary user for library system.\n\nThis entity stores unique guest user IDs and timestamps, enabling ephemeral session management without authentication credentials."},"ILibraryManagementGuestUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized guest user."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp of the guest user."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the guest user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if the guest record is soft deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","updated_at","token"],"description":"Authorization response including the guest user's identity and JWT token information.\n\nUsed in guest join and refresh authentication operations."},"ILibraryManagementBooks":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the book.\n\nCorresponds to the database primary key (UUID) for book records in the library_management_books table.\nThis is used as the main reference key to retrieve/update books."},"title":{"type":"string","description":"Title of the book.\n\nRequired field with non-empty string, representing the book's name.\nThis is indexed for search and partial matching."},"author":{"type":"string","description":"Author of the book.\n\nRequired field that stores the book's author name."},"isbn":{"type":"string","description":"Unique ISBN of the book.\n\nString field enforcing uniqueness per book.\nMust follow ISBN-10 or ISBN-13 formats."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of creation.\n\nStored as ISO 8601 date-time string.\nIndicates when the book record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update.\n\nStored as ISO 8601 date-time string.\nIndicates when the book record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp for soft deletion.\n\nIf present, indicates the book has been deleted (soft delete mechanism).\nUsers should treat records with this field as deleted and exclude from views."}},"required":["id","title","author","isbn","created_at","updated_at"],"description":"Books catalog storing title, author, and uniquely validated ISBN\ninformation for the library. Supports guest user addition, viewing, and\npartial title search. Includes timestamps for creation and update with\nsoft delete support. ISBN is unique to prevent duplicates.\n\n@namespace Core\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ILibraryManagementBooks.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search substring for partial title match (case-insensitive)."},"orderBy":{"oneOf":[{"const":"created_at"},{"const":"title"},{"const":"author"},{"type":"null"}],"description":"Field to order the results by."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Direction of sorting: ascending or descending."}},"required":[],"description":"Parameters for paginating and filtering the list of library books."},"ILibraryManagementBooks.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Title of the book. Required non-empty string."},"author":{"type":"string","description":"Author of the book. Required non-empty string."},"isbn":{"type":"string","description":"Unique ISBN string (ISBN-10 or ISBN-13 format). Required."}},"required":["title","author","isbn"],"description":"Request type for creating a new book.\n\nRequires title, author, and unique ISBN.\nTimestamp fields are not accepted from client.\nOwnership or ID fields are excluded since IDs are generated by system."},"ILibraryManagementBooks.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated title"},"author":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated author"},"isbn":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated ISBN, must remain unique"}},"required":[],"description":"Request type for updating an existing book.\n\nAll fields optional to allow partial updates.\nCannot update ID or timestamps.\nISBN must remain unique."},"ILibraryManagementBooks.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of book"},"title":{"type":"string","description":"Book title for display"},"author":{"type":"string","description":"Book author for display"},"isbn":{"type":"string","description":"ISBN string for display"}},"required":["id","title","author","isbn"],"description":"Summary type for listing books.\n\nIncludes primary identifier and fields required for display lists.\nExcludes timestamps and deletion fields.\nContains id, title, author, and ISBN."}}}}