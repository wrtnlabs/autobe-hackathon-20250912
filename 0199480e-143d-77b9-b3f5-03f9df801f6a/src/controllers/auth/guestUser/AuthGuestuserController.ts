import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postauthGuestUserJoin } from "../../../providers/postauthGuestUserJoin";
import { GuestuserAuth } from "../../../decorators/GuestuserAuth";
import { GuestuserPayload } from "../../../decorators/payload/GuestuserPayload";
import { postauthGuestUserRefresh } from "../../../providers/postauthGuestUserRefresh";

import { ILibraryManagementGuestUser } from "../../../api/structures/ILibraryManagementGuestUser";

@Controller("/auth/guestUser")
export class AuthGuestuserController {
  /**
   * Create a guest user identity record in library_management_guestusers to
   * enable temporary guest access.
   *
   * Register a new guest user (unauthenticated) by creating a temporary
   * identity record to support library management guest features like
   * adding/viewing/searching books. This join operation is public and issues
   * temporary authorization tokens. It works against the
   * library_management_guestusers table, which stores guest user IDs and
   * timestamps. No credentials or active login are required for guests.
   *
   * The operation provides foundational temporary access for guests consistent
   * with the guest kind role.
   *
   * This operation does not require any request body parameters.
   *
   * @param connection
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
  ): Promise<ILibraryManagementGuestUser.IAuthorized> {
    try {
      return await postauthGuestUserJoin({
        guestUser,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh guest user authorization tokens without login credentials.
   *
   * Refresh authorization tokens for guest users to maintain temporary session
   * continuity without user credentials. Operates in the context of
   * library_management_guestusers.
   *
   * Accepts refresh tokens via authentication headers (not in the body).
   *
   * Returns refreshed token authorization responses.
   *
   * @param connection
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
  ): Promise<ILibraryManagementGuestUser.IAuthorized> {
    try {
      return await postauthGuestUserRefresh({
        guestUser,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
