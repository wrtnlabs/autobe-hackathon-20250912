import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestions } from "../../../../../providers/patchenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestions";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/getenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestionsQuestionId";

import { IPageIEnterpriseLmsAssessmentQuestion } from "../../../../../api/structures/IPageIEnterpriseLmsAssessmentQuestion";
import { IEnterpriseLmsAssessmentQuestion } from "../../../../../api/structures/IEnterpriseLmsAssessmentQuestion";

@Controller("/enterpriseLms/systemAdmin/assessments/:assessmentId/questions")
export class EnterpriselmsSystemadminAssessmentsQuestionsController {
  /**
   * List questions for a specific assessment.
   *
   * Fetch a filtered and paginated list of questions for the assessment
   * identified by assessmentId.
   *
   * Allows clients to search, sort, and paginate through questions belonging to
   * the specified assessment.
   *
   * Only authorized roles (systemAdmin, organizationAdmin) can access this
   * data.
   *
   * This operation returns paginated question summaries optimized for list
   * display.
   *
   * The filter and pagination criteria are specified in the request body.
   *
   * @param connection
   * @param assessmentId Unique identifier of the parent assessment
   * @param body Search criteria and pagination parameters for filtering
   *   assessment questions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.IRequest,
  ): Promise<IPageIEnterpriseLmsAssessmentQuestion.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestions(
        {
          systemAdmin,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed assessment question information.
   *
   * Get detailed information about a single question identified by questionId
   * in the context of assessment identified by assessmentId.
   *
   * Returns all relevant metadata including question text, type, weight, and
   * timestamps.
   *
   * Access is restricted to users with systemAdmin or organizationAdmin roles.
   *
   * This operation returns a detailed question object.
   *
   * @param connection
   * @param assessmentId Unique identifier of the parent assessment
   * @param questionId Unique identifier of the assessment question
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":questionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await getenterpriseLmsSystemAdminAssessmentsAssessmentIdQuestionsQuestionId(
        {
          systemAdmin,
          assessmentId,
          questionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
