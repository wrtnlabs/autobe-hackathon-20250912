import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminAuditLogs } from "../../../../providers/patchenterpriseLmsSystemAdminAuditLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminAuditLogsId } from "../../../../providers/getenterpriseLmsSystemAdminAuditLogsId";

import { IPageIEnterpriseLmsAuditLog } from "../../../../api/structures/IPageIEnterpriseLmsAuditLog";
import { IEnterpriseLmsAuditLog } from "../../../../api/structures/IEnterpriseLmsAuditLog";

@Controller("/enterpriseLms/systemAdmin/auditLogs")
export class EnterpriselmsSystemadminAuditlogsController {
  /**
   * Search and retrieve paginated audit logs.
   *
   * Retrieves paginated audit logs filtered by criteria such as date range,
   * action, and user. Only systemAdmin role is authorized to access this
   * sensitive data. Supports full-text search and trigram indexing on action
   * and description. Useful for compliance and forensic investigations. Returns
   * paginated response of audit log summaries, with error handling for invalid
   * filters or authorization failures.
   *
   * @param connection
   * @param body Filtering, search, and pagination criteria for audit logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAuditLog.IRequest,
  ): Promise<IPageIEnterpriseLmsAuditLog.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminAuditLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a single audit log entry.
   *
   * Retrieve a specific audit log entry from the Enterprise LMS system using
   * its unique ID. The operation returns all associated metadata such as tenant
   * ID, action details, user responsible, descriptions, and timestamps.
   *
   * Access control ensures that only authorized roles such as system admins can
   * fetch audit logs to maintain security and confidentiality.
   *
   * This operation queries the 'enterprise_lms_audit_logs' table and returns
   * detailed audit log data consistent with the database schema.
   *
   * @param connection
   * @param id Unique identifier of the audit log entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAuditLog> {
    try {
      return await getenterpriseLmsSystemAdminAuditLogsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
