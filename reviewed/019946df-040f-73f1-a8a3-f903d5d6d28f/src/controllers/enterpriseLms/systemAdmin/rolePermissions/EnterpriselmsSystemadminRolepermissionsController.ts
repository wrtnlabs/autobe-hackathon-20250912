import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminRolePermissions } from "../../../../providers/postenterpriseLmsSystemAdminRolePermissions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminRolePermissions } from "../../../../providers/patchenterpriseLmsSystemAdminRolePermissions";
import { getenterpriseLmsSystemAdminRolePermissionsId } from "../../../../providers/getenterpriseLmsSystemAdminRolePermissionsId";
import { putenterpriseLmsSystemAdminRolePermissionsId } from "../../../../providers/putenterpriseLmsSystemAdminRolePermissionsId";
import { deleteenterpriseLmsSystemAdminRolePermissionsId } from "../../../../providers/deleteenterpriseLmsSystemAdminRolePermissionsId";

import { IEnterpriseLmsRolePermission } from "../../../../api/structures/IEnterpriseLmsRolePermission";
import { IPageIEnterpriseLmsRolePermissions } from "../../../../api/structures/IPageIEnterpriseLmsRolePermissions";
import { IEnterpriseLmsRolePermissions } from "../../../../api/structures/IEnterpriseLmsRolePermissions";

@Controller("/enterpriseLms/systemAdmin/rolePermissions")
export class EnterpriselmsSystemadminRolepermissionsController {
  /**
   * Create a role permission.
   *
   * Create a new role permission for a specified role. This operation inserts a
   * record into the enterprise_lms_role_permissions table, specifying the
   * permission key and allowed status. It returns the created permission entry
   * including its unique ID and timestamps. Only users with systemAdmin role
   * are authorized to perform this operation to maintain system security and
   * integrity.
   *
   * @param connection
   * @param body Information needed to create a role permission entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsRolePermission.ICreate,
  ): Promise<IEnterpriseLmsRolePermission> {
    try {
      return await postenterpriseLmsSystemAdminRolePermissions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated list of LMS role permissions.
   *
   * Retrieve a filtered and paginated list of all LMS role permissions assigned
   * to roles. This list supports searching and sorting to find permissions by
   * key or description.
   *
   * Role permissions define access and authorization rights within the LMS
   * system.
   *
   * The request body includes search criteria, page size, and sorting options
   * as per IEnterpriseLmsRolePermissions.IRequest schema.
   *
   * The response includes a page object with summaries of role permissions
   * matching the criteria.
   *
   * Access to this operation requires authentication as an authorized user.
   *
   * @param connection
   * @param body Search and pagination parameters for role permissions filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsRolePermissions.IRequest,
  ): Promise<IPageIEnterpriseLmsRolePermissions.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminRolePermissions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed LMS role permission by ID.
   *
   * Retrieve detailed information for a single LMS role permission by ID.
   *
   * This provides all fields related to a role permission including the
   * permission key, description, and grant status.
   *
   * Requires authentication for access control.
   *
   * Returns 404 if the specified ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the role permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsRolePermissions> {
    try {
      return await getenterpriseLmsSystemAdminRolePermissionsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a role permission by ID.
   *
   * Update an existing role permission entry by ID. This operation accepts
   * updates to permission key, description, and allowed status. Only users with
   * systemAdmin role are authorized to perform this operation to prevent
   * security breaches. Return the updated role permission record on success.
   *
   * @param connection
   * @param id Unique identifier of the target role permission
   * @param body Updated information for the role permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsRolePermission.IUpdate,
  ): Promise<IEnterpriseLmsRolePermission> {
    try {
      return await putenterpriseLmsSystemAdminRolePermissionsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a role permission by ID.
   *
   * Delete a role permission by its unique ID. This action permanently removes
   * the record from the database with no return value. Only systemAdmin role
   * users may execute this operation.
   *
   * @param connection
   * @param id Unique identifier of the role permission to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminRolePermissionsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
