import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminTenants } from "../../../../providers/postenterpriseLmsSystemAdminTenants";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminTenants } from "../../../../providers/patchenterpriseLmsSystemAdminTenants";
import { getenterpriseLmsSystemAdminTenantsId } from "../../../../providers/getenterpriseLmsSystemAdminTenantsId";
import { putenterpriseLmsSystemAdminTenantsId } from "../../../../providers/putenterpriseLmsSystemAdminTenantsId";
import { deleteenterpriseLmsSystemAdminTenantsId } from "../../../../providers/deleteenterpriseLmsSystemAdminTenantsId";

import { IEnterpriseLmsTenant } from "../../../../api/structures/IEnterpriseLmsTenant";
import { IPageIEnterpriseLmsTenant } from "../../../../api/structures/IPageIEnterpriseLmsTenant";

@Controller("/enterpriseLms/systemAdmin/tenants")
export class EnterpriselmsSystemadminTenantsController {
  /**
   * Create a new tenant organization.
   *
   * Create a new enterprise LMS tenant organization. This operation allows
   * administrators to add a new tenant with a unique code and name to the
   * system.
   *
   * Input validation ensures no duplication of tenant codes and required data
   * presence. The created tenant resource is returned to confirm successful
   * creation.
   *
   * Only authorized roles can perform this operation to maintain system
   * integrity and prevent unauthorized tenant creation.
   *
   * @param connection
   * @param body New tenant creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsTenant.ICreate,
  ): Promise<IEnterpriseLmsTenant> {
    try {
      return await postenterpriseLmsSystemAdminTenants({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of tenants.
   *
   * This operation provides clients the ability to search and retrieve a
   * filtered, paginated list of tenants in the Enterprise Learning Management
   * System. It supports complex search capabilities based on tenant code,
   * tenant name, creation date range, and deletion status, enabling efficient
   * management of tenant organizations.
   *
   * The operation ensures multi-tenancy support by returning tenants scoped
   * appropriately and includes index-based filtering for performance. Security
   * considerations include restricting tenant data visibility based on the
   * invoking user's permissions and roles.
   *
   * Integration with the enterprise_lms_tenants Prisma model guarantees
   * consistent data retrieval aligned with the underlying structure. The
   * paginated response includes summary data to reduce payload size and improve
   * response times.
   *
   * Errors in search parameter syntax or unauthorized access are handled
   * gracefully with proper HTTP status codes.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for tenant filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsTenant.IRequest,
  ): Promise<IPageIEnterpriseLmsTenant.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminTenants({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific tenant.
   *
   * Retrieve detailed information of an enterprise LMS tenant by its unique
   * identifier. This operation supports tenant administrators and system
   * administrators in viewing comprehensive tenant data including
   * organizational details, timestamps, and status.
   *
   * Security validation is performed to ensure that only authorized roles can
   * access tenant data. The operation returns a single tenant resource matching
   * the provided ID or errors if not found.
   *
   * The database entity corresponds directly to the enterprise_lms_tenants
   * table, ensuring data integrity and consistent view of tenant records.
   *
   * @param connection
   * @param id Unique identifier of the tenant
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsTenant> {
    try {
      return await getenterpriseLmsSystemAdminTenantsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update tenant information.
   *
   * Update existing information of an enterprise LMS tenant identified by its
   * ID. This operation enables tenant administrators to modify tenant data such
   * as name and other editable properties.
   *
   * Security checks ensure only authorized users can update tenant records. The
   * operation returns the updated tenant resource on success.
   *
   * The underlying data source is the enterprise_lms_tenants table, ensuring a
   * consistent single source of truth for tenant information.
   *
   * @param connection
   * @param id Unique identifier of the tenant
   * @param body Tenant update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsTenant.IUpdate,
  ): Promise<IEnterpriseLmsTenant> {
    try {
      return await putenterpriseLmsSystemAdminTenantsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete tenant organization by ID, permanently removing all tenant data.
   *
   * This API endpoint allows for the permanent removal of a tenant organization
   * identified by its UUID. Operating on the enterprise_lms_tenants table, this
   * operation enforces full deletion including cascade deletes of related
   * entities to maintain data isolation and compliance.
   *
   * Security considerations restrict this operation to users with the
   * 'systemAdmin' role to prevent unauthorized data loss.
   *
   * This operation matches the DELETE method at /tenants/{id}.
   *
   * Error handling includes tenant existence verification and permission
   * checks.
   *
   * Use related operations GET /tenants/{tenantId}/tenantSettings for tenant
   * configuration management.
   *
   * @param connection
   * @param id Unique identifier of the tenant to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminTenantsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
