import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminOrganizationadmins } from "../../../../providers/patchenterpriseLmsSystemAdminOrganizationadmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminOrganizationadminsOrganizationadminId } from "../../../../providers/getenterpriseLmsSystemAdminOrganizationadminsOrganizationadminId";

import { IPageIEnterpriseLmsOrganizationadmin } from "../../../../api/structures/IPageIEnterpriseLmsOrganizationadmin";
import { IEnterpriseLmsOrganizationAdmin } from "../../../../api/structures/IEnterpriseLmsOrganizationAdmin";

@Controller("/enterpriseLms/systemAdmin/organizationadmins")
export class EnterpriselmsSystemadminOrganizationadminsController {
  /**
   * Search and list organization administrators.
   *
   * Search and retrieve a paginated list of organization administrators.
   * Supports filtering, sorting, and pagination.
   *
   * This operation operates on the enterprise_lms_organizationadmin table,
   * returning summaries optimized for list display.
   *
   * Authorization roles include systemAdmin and organizationAdmin to enable
   * management within tenant boundaries.
   *
   * This is used to support user and role management features in the admin UI.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for organization
   *   administrator filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchOrganizationAdmins(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.IRequest,
  ): Promise<IPageIEnterpriseLmsOrganizationadmin.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminOrganizationadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed Organization Administrator user.
   *
   * Retrieve full details of an Organization Administrator user by unique
   * identifier.
   *
   * This operation accesses the enterprise_lms_organizationadmin table,
   * returning all user information including account status and tenant
   * context.
   *
   * It requires the organizationadminId path parameter.
   *
   * Authorization roles include systemAdmin and organizationAdmin.
   *
   * Useful for editing and detail inspection in admin interfaces.
   *
   * @param connection
   * @param organizationadminId Unique identifier of the target organization
   *   admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizationadminId")
  public async atOrganizationAdmin(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationadminId")
    organizationadminId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsOrganizationAdmin> {
    try {
      return await getenterpriseLmsSystemAdminOrganizationadminsOrganizationadminId(
        {
          systemAdmin,
          organizationadminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
