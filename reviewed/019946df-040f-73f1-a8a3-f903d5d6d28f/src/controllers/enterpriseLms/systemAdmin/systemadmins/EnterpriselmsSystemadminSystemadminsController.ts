import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminSystemadmins } from "../../../../providers/postenterpriseLmsSystemAdminSystemadmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminSystemadmins } from "../../../../providers/patchenterpriseLmsSystemAdminSystemadmins";
import { getenterpriseLmsSystemAdminSystemadminsSystemadminId } from "../../../../providers/getenterpriseLmsSystemAdminSystemadminsSystemadminId";
import { putenterpriseLmsSystemAdminSystemadminsSystemadminId } from "../../../../providers/putenterpriseLmsSystemAdminSystemadminsSystemadminId";
import { deleteenterpriseLmsSystemAdminSystemadminsSystemadminId } from "../../../../providers/deleteenterpriseLmsSystemAdminSystemadminsSystemadminId";

import { IEnterpriseLmsSystemAdmin } from "../../../../api/structures/IEnterpriseLmsSystemAdmin";
import { IPageIEnterpriseLmsSystemAdmin } from "../../../../api/structures/IPageIEnterpriseLmsSystemAdmin";

@Controller("/enterpriseLms/systemAdmin/systemadmins")
export class EnterpriselmsSystemadminSystemadminsController {
  /**
   * Create a new system administrator user account.
   *
   * This operation validates input data and inserts a new record into the
   * enterprise_lms_systemadmin table.
   *
   * Creation requires unique email, secure password hash, and initial status.
   *
   * Access is restricted to users with systemAdmin role to prevent unauthorized
   * admin account creation.
   *
   * Response returns the newly created systemadmin details including ID and
   * timestamps.
   *
   * Errors include 400 for validation failures, 409 if email already exists,
   * and 403 if unauthorized.
   *
   * @param connection
   * @param body Details for creating a system administrator account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.ICreate,
  ): Promise<IEnterpriseLmsSystemAdmin> {
    try {
      return await postenterpriseLmsSystemAdminSystemadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of system administrators.
   *
   * Retrieve a filtered, paginated list of system administrator accounts.
   *
   * Provides the ability to search, sort, and filter system admins by various
   * criteria such as email, status, and creation date.
   *
   * Access is restricted to systemAdmin roles to protect sensitive global
   * administrative data.
   *
   * This operation fetches data from the enterprise_lms_systemadmin table
   * including user IDs, emails, names, statuses, and timestamps.
   *
   * Request body includes search and pagination parameters to customize
   * results.
   *
   * Response returns paginated summaries suited for admin management UI.
   *
   * Errors include 403 unauthorized and 400 invalid search parameters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for system
   *   administrators filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.IRequest,
  ): Promise<IPageIEnterpriseLmsSystemAdmin.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminSystemadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve system administrator by ID.
   *
   * Retrieve detailed system administrator information by ID.
   *
   * Access restricted to systemAdmin role due to sensitive nature of the data.
   *
   * Returns full systemadmin entity data from enterprise_lms_systemadmin table
   * including email, status, first and last names, creation and update
   * timestamps.
   *
   * Errors may include 404 if the systemadmin ID does not exist or 403 if
   * unauthorized.
   *
   * Method is GET and no request body is required.
   *
   * @param connection
   * @param systemadminId Unique identifier of the system administrator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemadminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemadminId")
    systemadminId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsSystemAdmin> {
    try {
      return await getenterpriseLmsSystemAdminSystemadminsSystemadminId({
        systemAdmin,
        systemadminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing System Administrator user.
   *
   * Update a System Administrator user's information within the multi-tenant
   * enterprise LMS. This operation allows authorized users with system
   * administrator roles to modify account details such as email, password hash,
   * first and last names, and account status. Permissions and data validation
   * are enforced to maintain system security and data integrity.
   *
   * The underlying database entity is the enterprise_lms_systemadmin table,
   * which ensures the multi-tenant isolation via tenant_id. The operation
   * requires a system admin role and includes concurrency control via timestamp
   * updates.
   *
   * This operation requires the systemadminId parameter as a path parameter and
   * an update request body conforming to IEnterpriseLmsSystemadmin.IUpdate. The
   * response returns the updated System Administrator user record.
   *
   * Access to this operation is restricted to users with the 'systemAdmin' role
   * to preserve security and integrity within the platform.
   *
   * @param connection
   * @param systemadminId Unique identifier of the target system administrator
   *   user
   * @param body Update data for the System Administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemadminId")
  public async updateSystemAdmin(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemadminId")
    systemadminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.IUpdate,
  ): Promise<IEnterpriseLmsSystemAdmin> {
    try {
      return await putenterpriseLmsSystemAdminSystemadminsSystemadminId({
        systemAdmin,
        systemadminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a System Administrator user permanently.
   *
   * Permanently erase a System Administrator user from the system. This
   * operation removes the user record completely and all associated session
   * data. Access is limited to system administrators to prevent accidental or
   * unauthorized deletions.
   *
   * It requires the systemadminId path parameter and does not have a request
   * body or response body.
   *
   * The underlying table is enterprise_lms_systemadmin and deletion is hard
   * without a soft delete flag.
   *
   * Authorization is restricted to the 'systemAdmin' role.
   *
   * @param connection
   * @param systemadminId Unique identifier of the target system administrator
   *   user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemadminId")
  public async eraseSystemAdmin(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemadminId")
    systemadminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminSystemadminsSystemadminId({
        systemAdmin,
        systemadminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
