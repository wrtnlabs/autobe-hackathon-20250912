import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminSystemConfigurations } from "../../../../providers/postenterpriseLmsSystemAdminSystemConfigurations";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminSystemConfigurations } from "../../../../providers/patchenterpriseLmsSystemAdminSystemConfigurations";
import { getenterpriseLmsSystemAdminSystemConfigurationsId } from "../../../../providers/getenterpriseLmsSystemAdminSystemConfigurationsId";
import { putenterpriseLmsSystemAdminSystemConfigurationsId } from "../../../../providers/putenterpriseLmsSystemAdminSystemConfigurationsId";
import { deleteenterpriseLmsSystemAdminSystemConfigurationsId } from "../../../../providers/deleteenterpriseLmsSystemAdminSystemConfigurationsId";

import { IEnterpriseLmsSystemConfiguration } from "../../../../api/structures/IEnterpriseLmsSystemConfiguration";
import { IPageIEnterpriseLmsSystemConfigurations } from "../../../../api/structures/IPageIEnterpriseLmsSystemConfigurations";
import { IEnterpriseLmsSystemConfigurations } from "../../../../api/structures/IEnterpriseLmsSystemConfigurations";

@Controller("/enterpriseLms/systemAdmin/systemConfigurations")
export class EnterpriselmsSystemadminSystemconfigurationsController {
  /**
   * Create a new system configuration setting.
   *
   * Creates a new system configuration record with a unique key and specified
   * value. Only users with systemAdmin role are authorized to create system
   * configurations. The key must be unique to avoid conflicts. The operation
   * returns the created configuration including timestamps for tracking and
   * auditing.
   *
   * @param connection
   * @param body New system configuration details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemConfiguration.ICreate,
  ): Promise<IEnterpriseLmsSystemConfiguration> {
    try {
      return await postenterpriseLmsSystemAdminSystemConfigurations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve filtered system configuration settings.
   *
   * Search and filter system configurations with pagination and sorting
   * options.
   *
   * The operation allows system administrators to find configuration entries
   * based on keys, descriptions, or other criteria, facilitating management of
   * global system behavior.
   *
   * Because configurations are critical to backend operations, access is
   * restricted to system admin roles.
   *
   * The response provides paginated configuration entries including key, value,
   * description, and timestamps.
   *
   * Filtering supports partial matches and sorting supports ascending and
   * descending orders.
   *
   * Unsuccessful search due to invalid parameters will lead to HTTP 400 Bad
   * Request.
   *
   * Refer to related APIs for retrieving and managing individual configuration
   * entries.
   *
   * @param connection
   * @param body System configuration search request with filter criteria and
   *   pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemConfigurations.IRequest,
  ): Promise<IPageIEnterpriseLmsSystemConfigurations.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminSystemConfigurations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get system configuration details by ID.
   *
   * Retrieve detailed information of a specific system configuration setting by
   * its ID.
   *
   * This operation returns comprehensive details including key, value,
   * description, and audit timestamps for the requested configuration.
   *
   * Access is restricted to system administrators to maintain system integrity
   * and security.
   *
   * Invalid or non-existent IDs lead to HTTP 404 Not Found.
   *
   * Use related endpoints to browse or search system configurations.
   *
   * This helps administrative oversight and configuration management for the
   * Enterprise LMS platform.
   *
   * @param connection
   * @param id Unique identifier of the system configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsSystemConfigurations> {
    try {
      return await getenterpriseLmsSystemAdminSystemConfigurationsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing system configuration setting.
   *
   * Update an existing system configuration entry by its ID. Allows changing
   * value and description fields. Requires systemAdmin role authorization.
   * Returns the updated configuration with timestamps. Errors are returned if
   * the ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the system configuration to update
   * @param body Updated system configuration details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsSystemConfiguration.IUpdate,
  ): Promise<IEnterpriseLmsSystemConfiguration> {
    try {
      return await putenterpriseLmsSystemAdminSystemConfigurationsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a system configuration setting permanently.
   *
   * Permanently deletes a system configuration by its unique identifier. This
   * is a hard delete operation with no recovery. Only systemAdmin users may
   * perform this action. No response body is returned upon successful deletion.
   * Errors returned if specified ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the system configuration to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminSystemConfigurationsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
