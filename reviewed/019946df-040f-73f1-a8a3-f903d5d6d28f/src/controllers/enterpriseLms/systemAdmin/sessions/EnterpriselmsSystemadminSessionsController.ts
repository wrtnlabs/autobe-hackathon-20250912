import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminSessions } from "../../../../providers/postenterpriseLmsSystemAdminSessions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminSessions } from "../../../../providers/patchenterpriseLmsSystemAdminSessions";
import { getenterpriseLmsSystemAdminSessionsId } from "../../../../providers/getenterpriseLmsSystemAdminSessionsId";
import { putenterpriseLmsSystemAdminSessionsId } from "../../../../providers/putenterpriseLmsSystemAdminSessionsId";
import { deleteenterpriseLmsSystemAdminSessionsId } from "../../../../providers/deleteenterpriseLmsSystemAdminSessionsId";

import { IEnterpriseLmsSession } from "../../../../api/structures/IEnterpriseLmsSession";
import { IPageIEnterpriseLmsSession } from "../../../../api/structures/IPageIEnterpriseLmsSession";
import { IEnterpriseLmsSessions } from "../../../../api/structures/IEnterpriseLmsSessions";

@Controller("/enterpriseLms/systemAdmin/sessions")
export class EnterpriselmsSystemadminSessionsController {
  /**
   * Create a new user session capturing tenant, user, session token, device
   * information, IP address, and expiration timestamps.
   *
   * Intended for system administrators to manage session lifecycle and support
   * security protocols. The response returns the newly created session record
   * with database timestamps.
   *
   * Validation errors for token conflicts or invalid data formats will result
   * in error responses.
   *
   * @param connection
   * @param body Session creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSession.ICreate,
  ): Promise<IEnterpriseLmsSession> {
    try {
      return await postenterpriseLmsSystemAdminSessions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered and paginated list of user sessions.
   *
   * Search and retrieve a list of user sessions with advanced filtering,
   * pagination, and sorting options. This operation is intended for system or
   * tenant administrators to manage active user sessions, review session
   * details such as device info, IP address, and expiry, and support session
   * administrative tasks.
   *
   * The response includes a paginated list of session summaries aligned with
   * the 'enterprise_lms_sessions' database schema. Access is strictly
   * controlled to authorized administrative roles to ensure security.
   *
   * Invalid requests with malformed filter criteria or pagination parameters
   * will respond with descriptive errors.
   *
   * @param connection
   * @param body Request parameters for session search and pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSession.IRequest,
  ): Promise<IPageIEnterpriseLmsSession.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminSessions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed user session information by session ID.
   *
   * Retrieve detailed information of a user session by its unique ID. This
   * endpoint returns all fields defined in the 'enterprise_lms_sessions' table,
   * including meta information about session validity and client device.
   *
   * Access is limited to users with the 'systemAdmin' role or equivalent tenant
   * administrators due to session data sensitivity.
   *
   * Errors will be returned if session ID is invalid or access is restricted.
   *
   * @param connection
   * @param id Unique identifier of the user session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsSession> {
    try {
      return await getenterpriseLmsSystemAdminSessionsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing LMS user session with new information.
   *
   * Update an active user session in the LMS system. This endpoint modifies
   * session properties like device information, IP address, and expiration
   * timestamp for a specific session ID.
   *
   * This operation requires proper authentication and authorization because it
   * affects user login sessions and security.
   *
   * The enterprise_lms_sessions table tracks session tokens, device metadata,
   * and expiry times. This update ensures continuous session management,
   * enabling session revocation or extension as per business logic.
   *
   * The request body must include fields allowed for update as defined in the
   * IEnterpriseLmsSessions.IUpdate schema. The response body returns the
   * updated session information.
   *
   * Proper error handling includes returning 404 if the session ID is not
   * found, and 403 if unauthorized access occurs.
   *
   * @param connection
   * @param id Unique identifier of the session to update
   * @param body Updated session information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsSessions.IUpdate,
  ): Promise<IEnterpriseLmsSessions> {
    try {
      return await putenterpriseLmsSystemAdminSessionsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a LMS user session permanently.
   *
   * Delete a user session by its unique identifier. This permanently removes
   * the session record from the database, revoking user access.
   *
   * Careful authorization checks must be done before performing this operation.
   *
   * Returns no content upon success. Errors include 404 if session not found
   * and 403 for unauthorized attempts.
   *
   * @param connection
   * @param id Unique identifier of the session to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminSessionsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
