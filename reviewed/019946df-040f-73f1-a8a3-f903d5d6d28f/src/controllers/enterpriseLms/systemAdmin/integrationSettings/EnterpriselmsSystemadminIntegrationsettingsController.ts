import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminIntegrationSettings } from "../../../../providers/postenterpriseLmsSystemAdminIntegrationSettings";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminIntegrationSettings } from "../../../../providers/patchenterpriseLmsSystemAdminIntegrationSettings";
import { getenterpriseLmsSystemAdminIntegrationSettingsId } from "../../../../providers/getenterpriseLmsSystemAdminIntegrationSettingsId";
import { putenterpriseLmsSystemAdminIntegrationSettingsId } from "../../../../providers/putenterpriseLmsSystemAdminIntegrationSettingsId";
import { deleteenterpriseLmsSystemAdminIntegrationSettingsId } from "../../../../providers/deleteenterpriseLmsSystemAdminIntegrationSettingsId";

import { IEnterpriseLmsIntegrationSettings } from "../../../../api/structures/IEnterpriseLmsIntegrationSettings";
import { IPageIEnterpriseLmsIntegrationSetting } from "../../../../api/structures/IPageIEnterpriseLmsIntegrationSetting";
import { IEnterpriseLmsIntegrationSetting } from "../../../../api/structures/IEnterpriseLmsIntegrationSetting";

@Controller("/enterpriseLms/systemAdmin/integrationSettings")
export class EnterpriselmsSystemadminIntegrationsettingsController {
  /**
   * Create a new integration setting record in the system.
   *
   * This operation accepts configuration details for external integrations like
   * payment gateways, notification services, and analytics platforms.
   *
   * Only users with systemAdmin role can perform this operation.
   *
   * The input data is validated against unique constraints and references.
   *
   * Successful creation returns the full integration setting entity.
   *
   * @param connection
   * @param body New integration setting details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsIntegrationSettings.ICreate,
  ): Promise<IEnterpriseLmsIntegrationSettings> {
    try {
      return await postenterpriseLmsSystemAdminIntegrationSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve integration settings.
   *
   * Retrieve a filtered and paginated list of external integration settings
   * within the Enterprise LMS. Supports advanced search, filtering, sorting,
   * and pagination. This operation returns summarized integration setting
   * records optimized for administrative management. Requires systemAdmin role
   * authorization for access control.
   *
   * Corresponds to the enterprise_lms_integration_settings table and its
   * tenant-scoped configurations.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for integration
   *   settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsIntegrationSetting.IRequest,
  ): Promise<IPageIEnterpriseLmsIntegrationSetting.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminIntegrationSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific integration setting by ID.
   *
   * Retrieve detailed information of a specific integration setting by its
   * unique ID.
   *
   * This operation provides access to individual integration configuration
   * settings stored in the system, including API keys, endpoints, feature
   * toggles, and credentials for third-party platforms.
   *
   * Access is restricted to authorized roles to protect sensitive integration
   * details and maintain tenant data isolation.
   *
   * The operation queries the enterprise_lms_integration_settings table and
   * returns the full record.
   *
   * If the specified ID does not exist, an appropriate error response is
   * returned.
   *
   * @param connection
   * @param id The unique identifier of the integration setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsIntegrationSettings> {
    try {
      return await getenterpriseLmsSystemAdminIntegrationSettingsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an integration setting by ID.
   *
   * Update an existing integration setting by ID.
   *
   * Allows modification of integration configuration, including toggles, keys,
   * and credentials.
   *
   * Restricted to systemAdmin users to prevent unauthorized changes.
   *
   * Returns the updated integration setting on success.
   *
   * Returns error if ID not found or validation fails.
   *
   * @param connection
   * @param id The unique identifier of the integration setting to update
   * @param body Updated integration setting details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsIntegrationSettings.IUpdate,
  ): Promise<IEnterpriseLmsIntegrationSettings> {
    try {
      return await putenterpriseLmsSystemAdminIntegrationSettingsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an integration setting by ID.
   *
   * Permanently delete an integration setting by its ID.
   *
   * This operation removes the integration configuration from the system.
   *
   * Only users with systemAdmin role are authorized to perform this action.
   *
   * No request body or response body is involved.
   *
   * Returns no content on successful deletion.
   *
   * @param connection
   * @param id The unique identifier of the integration setting to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminIntegrationSettingsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
