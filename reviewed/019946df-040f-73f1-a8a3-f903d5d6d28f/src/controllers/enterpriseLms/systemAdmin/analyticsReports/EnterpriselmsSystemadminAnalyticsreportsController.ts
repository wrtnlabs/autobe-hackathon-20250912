import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminAnalyticsReports } from "../../../../providers/postenterpriseLmsSystemAdminAnalyticsReports";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminAnalyticsReports } from "../../../../providers/patchenterpriseLmsSystemAdminAnalyticsReports";
import { getenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId } from "../../../../providers/getenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId";
import { putenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId } from "../../../../providers/putenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId";
import { deleteenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId } from "../../../../providers/deleteenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId";

import { IEnterpriseLmsAnalyticsReport } from "../../../../api/structures/IEnterpriseLmsAnalyticsReport";
import { IPageIEnterpriseLmsAnalyticsReport } from "../../../../api/structures/IPageIEnterpriseLmsAnalyticsReport";

@Controller("/enterpriseLms/systemAdmin/analyticsReports")
export class EnterpriselmsSystemadminAnalyticsreportsController {
  /**
   * Create a new analytics report record in the Enterprise LMS.
   *
   * Incoming request body must provide all necessary data as specified by
   * 'IEnterpriseLmsAnalyticsReport.ICreate'.
   *
   * Analytics reports are tenant-scoped and used for dashboard presentation and
   * compliance.
   *
   * Access control limits this operation to appropriate roles.
   *
   * Successfully created reports return the new analytics report entity.
   *
   * Validation errors result in appropriate error responses.
   *
   * @param connection
   * @param body Creation info for the analytics report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAnalyticsReport(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAnalyticsReport.ICreate,
  ): Promise<IEnterpriseLmsAnalyticsReport> {
    try {
      return await postenterpriseLmsSystemAdminAnalyticsReports({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of analytics reports.
   *
   * Retrieve a filtered, paginated list of tenant-specific analytics reports in
   * the Enterprise LMS. This operation utilizes request parameters to search
   * and sort reports efficiently.
   *
   * It interacts with the 'enterprise_lms_analytics_reports' table capturing
   * rich, precomputed analytics for dashboard display and audit compliance.
   *
   * Supports filters such as report type, tenant, and generation date ranges
   * along with pagination.
   *
   * Access is restricted to authorized system roles enabling analytics view.
   *
   * Returns paginated summaries optimized for list retrieval.
   *
   * Handles invalid parameters with appropriate error responses.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for analytics reports
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchAnalyticsReports(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAnalyticsReport.IRequest,
  ): Promise<IPageIEnterpriseLmsAnalyticsReport.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminAnalyticsReports({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed analytics report by ID.
   *
   * Fetch detailed analytics report information identified by
   * 'analyticsReportId'.
   *
   * This report includes full metadata, filter parameters, generation
   * timestamp, and JSON content necessary for dashboard presentation and audit
   * trails.
   *
   * The operation accesses the 'enterprise_lms_analytics_reports' table scoped
   * by tenant.
   *
   * Role-based access controls ensure only permitted users can retrieve the
   * report.
   *
   * Returns a detailed analytics report entity.
   *
   * Errors for missing records or unauthorized requests are handled by the
   * backend.
   *
   * @param connection
   * @param analyticsReportId Unique UUID of the analytics report to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":analyticsReportId")
  public async atAnalyticsReport(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("analyticsReportId")
    analyticsReportId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAnalyticsReport> {
    try {
      return await getenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId(
        {
          systemAdmin,
          analyticsReportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing analytics report identified by its unique
   * `analyticsReportId`. This operation targets the
   * `enterprise_lms_analytics_reports` table, allowing modification of report
   * details including `reportName`, `reportType`, `parametersJson`,
   * `contentJson`, and update timestamps.
   *
   * Security: Restricted to users with the `systemAdmin` role to ensure only
   * authorized personnel can modify analytics data.
   *
   * Parameters:
   *
   * - `analyticsReportId` (UUID): The unique identifier for the analytics report
   *   to update.
   *
   * Request Body: Must conform to `IEnterpriseLmsAnalyticsReport.IUpdate`
   * including all modifiable fields as per the Prisma schema.
   *
   * Response: Returns the updated analytics report object.
   *
   * Errors:
   *
   * - 404 Not Found if the report does not exist.
   * - 403 Forbidden if the user lacks the appropriate permissions.
   *
   * This operation is crucial for maintaining accurate and current analytics
   * data, supporting enterprise decision making and compliance reporting.
   *
   * @param connection
   * @param analyticsReportId Unique identifier of the analytics report to
   *   update
   * @param body Analytics report update details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":analyticsReportId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("analyticsReportId")
    analyticsReportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAnalyticsReport.IUpdate,
  ): Promise<IEnterpriseLmsAnalyticsReport> {
    try {
      return await putenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId(
        {
          systemAdmin,
          analyticsReportId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an analytics report.
   *
   * Delete a specific analytics report permanently using its unique
   * `analyticsReportId`. This operation directly removes the record from the
   * `enterprise_lms_analytics_reports` table.
   *
   * Security: Restricted to the `systemAdmin` role to prevent unauthorized data
   * loss.
   *
   * Parameters:
   *
   * - `analyticsReportId` (UUID): Identifier of the report to delete.
   *
   * Behavior: This is a hard delete; the record will no longer exist in the
   * database after successful execution.
   *
   * Errors:
   *
   * - 404 Not Found if the report does not exist.
   * - 403 Forbidden if the user is not authorized.
   *
   * Use with caution as this operation permanently deletes data relevant for
   * compliance and reporting.
   *
   * @param connection
   * @param analyticsReportId Unique identifier of the analytics report to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":analyticsReportId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("analyticsReportId")
    analyticsReportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminAnalyticsReportsAnalyticsReportId(
        {
          systemAdmin,
          analyticsReportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
