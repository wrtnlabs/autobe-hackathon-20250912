import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminNotificationLogs } from "../../../../providers/patchenterpriseLmsSystemAdminNotificationLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminNotificationLogsId } from "../../../../providers/getenterpriseLmsSystemAdminNotificationLogsId";

import { IPageIEnterpriseLmsNotificationLog } from "../../../../api/structures/IPageIEnterpriseLmsNotificationLog";
import { IEnterpriseLmsNotificationLog } from "../../../../api/structures/IEnterpriseLmsNotificationLog";

@Controller("/enterpriseLms/systemAdmin/notificationLogs")
export class EnterpriselmsSystemadminNotificationlogsController {
  /**
   * Search and retrieve a filtered, paginated list of notification logs.
   *
   * Retrieve a filtered and paginated list of notification logs from the
   * Enterprise LMS system. This allows for detailed querying of notifications
   * sent to users, including email, SMS, and push notifications. The result
   * includes essential metadata such as delivery status and timestamps.
   *
   * Security and data isolation are enforced per tenant. Only authorized
   * system, organization, or department administrators can access this data.
   *
   * This operation corresponds to the enterprise_lms_notification_logs table in
   * the Prisma schema, leveraging all its searchable fields for flexible
   * querying with pagination.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for notification log
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsNotificationLog.IRequest,
  ): Promise<IPageIEnterpriseLmsNotificationLog.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminNotificationLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a notification log by ID.
   *
   * Retrieve detailed information about a specific notification log entry by
   * its ID within Enterprise LMS. Provides full notification details including
   * type, recipient, message body, delivery status, and timestamps.
   *
   * Access control is enforced for tenant data isolation, allowing only
   * authorized administrators.
   *
   * This operation maps directly to the enterprise_lms_notification_logs table
   * in the Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the target notification log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsNotificationLog> {
    try {
      return await getenterpriseLmsSystemAdminNotificationLogsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
