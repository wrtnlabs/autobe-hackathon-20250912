import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchenterpriseLmsContentCreatorInstructorLearningPaths } from "../../../../providers/patchenterpriseLmsContentCreatorInstructorLearningPaths";
import { ContentcreatorinstructorAuth } from "../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../decorators/payload/ContentcreatorinstructorPayload";

import { IPageIEnterpriseLmsLearningPath } from "../../../../api/structures/IPageIEnterpriseLmsLearningPath";
import { IEnterpriseLmsLearningPath } from "../../../../api/structures/IEnterpriseLmsLearningPath";

@Controller("/enterpriseLms/contentCreatorInstructor/learningPaths")
export class EnterpriselmsContentcreatorinstructorLearningpathsController {
  /**
   * Search and retrieve enterprise learning paths.
   *
   * Retrieve a filtered and paginated list of learning paths.
   *
   * Supports comprehensive filtering by code, status, and title. Enables tenant
   * administrators and content managers to efficiently browse and manage active
   * learning sequences.
   *
   * The request body specifies search criteria, pagination, and sorting
   * options.
   *
   * The response returns paginated learning path summaries to optimize display
   * performance.
   *
   * Only authenticated users with the appropriate permissions can access this
   * endpoint.
   *
   * Errors occur for invalid search parameters or lack of authorization.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for learning paths
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchLearningPaths(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsLearningPath.IRequest,
  ): Promise<IPageIEnterpriseLmsLearningPath.ISummary> {
    try {
      return await patchenterpriseLmsContentCreatorInstructorLearningPaths({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
