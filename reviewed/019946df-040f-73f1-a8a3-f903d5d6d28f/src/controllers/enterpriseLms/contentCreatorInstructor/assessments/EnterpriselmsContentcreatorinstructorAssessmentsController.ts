import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorAssessments } from "../../../../providers/postenterpriseLmsContentCreatorInstructorAssessments";
import { ContentcreatorinstructorAuth } from "../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../decorators/payload/ContentcreatorinstructorPayload";
import { patchenterpriseLmsContentCreatorInstructorAssessments } from "../../../../providers/patchenterpriseLmsContentCreatorInstructorAssessments";
import { getenterpriseLmsContentCreatorInstructorAssessmentsAssessmentId } from "../../../../providers/getenterpriseLmsContentCreatorInstructorAssessmentsAssessmentId";

import { IEnterpriseLmsAssessments } from "../../../../api/structures/IEnterpriseLmsAssessments";
import { IPageIEnterpriseLmsAssessments } from "../../../../api/structures/IPageIEnterpriseLmsAssessments";

@Controller("/enterpriseLms/contentCreatorInstructor/assessments")
export class EnterpriselmsContentcreatorinstructorAssessmentsController {
  /**
   * Create a new Enterprise LMS assessment record.
   *
   * Create a new assessment with detailed properties specifying code, title,
   * type, scoring criteria, schedule, and lifecycle status within the
   * Enterprise LMS.
   *
   * Only authorized roles such as systemAdmin, organizationAdmin, and
   * contentCreatorInstructor may perform this operation.
   *
   * This writes into the enterprise_lms_assessments table and returns the
   * created entity with system-generated UUID and timestamps.
   *
   * Clients can use this to add assessments for courses and training
   * management.
   *
   * @param connection
   * @param body Assessment creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsAssessments.ICreate,
  ): Promise<IEnterpriseLmsAssessments> {
    try {
      return await postenterpriseLmsContentCreatorInstructorAssessments({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of Enterprise LMS assessments.
   *
   * Retrieve a filtered and paginated list of assessments from the Enterprise
   * LMS. The operation supports search by code, title, description, and
   * assessment type, as well as filtering by status and scheduled dates.
   * Pagination parameters allow for efficient browsing through the assessment
   * collection.
   *
   * Security considerations restrict access to authenticated users with roles
   * such as systemAdmin, organizationAdmin, or contentCreatorInstructor,
   * ensuring proper permission scopes are enforced.
   *
   * This operation interacts with the enterprise_lms_assessments database
   * table, referencing core fields including assessment codes, titles, types,
   * scoring criteria, schedule, and status. Clients can use this endpoint to
   * implement administrative dashboards or course management views.
   *
   * Related operations include GET /assessments/{assessmentId} for detail
   * retrieval and POST /assessments for assessment creation.
   *
   * Errors for invalid filters or unauthorized access will be returned with
   * suitable HTTP status codes and message bodies.
   *
   * @param connection
   * @param body Search and pagination parameters for filtering assessments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsAssessments.IRequest,
  ): Promise<IPageIEnterpriseLmsAssessments> {
    try {
      return await patchenterpriseLmsContentCreatorInstructorAssessments({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific Enterprise LMS assessment by
   * ID.
   *
   * Retrieve comprehensive details of a specified assessment by its ID within
   * the Enterprise LMS. The response includes all properties such as codes,
   * titles, type, scoring details, schedule, and status.
   *
   * Security restrictions apply to ensure that only authorized roles including
   * systemAdmin, organizationAdmin, and contentCreatorInstructor can access
   * this data.
   *
   * This API operation corresponds to the enterprise_lms_assessments database
   * table.
   *
   * Clients may use this endpoint for detailed assessment views and editing
   * workflows.
   *
   * Error handling includes 404 Not Found for missing resources and 403
   * Forbidden for insufficient permissions.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":assessmentId")
  public async at(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAssessments> {
    try {
      return await getenterpriseLmsContentCreatorInstructorAssessmentsAssessmentId(
        {
          contentCreatorInstructor,
          assessmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
