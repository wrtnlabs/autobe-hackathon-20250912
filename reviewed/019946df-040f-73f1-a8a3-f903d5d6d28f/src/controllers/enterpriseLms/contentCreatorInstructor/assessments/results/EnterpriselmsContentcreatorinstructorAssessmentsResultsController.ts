import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdResults } from "../../../../../providers/patchenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdResults";
import { ContentcreatorinstructorAuth } from "../../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../../decorators/payload/ContentcreatorinstructorPayload";

import { IPageIEnterpriseLmsAssessmentResult } from "../../../../../api/structures/IPageIEnterpriseLmsAssessmentResult";
import { IEnterpriseLmsAssessmentResult } from "../../../../../api/structures/IEnterpriseLmsAssessmentResult";

@Controller(
  "/enterpriseLms/contentCreatorInstructor/assessments/:assessmentId/results",
)
export class EnterpriselmsContentcreatorinstructorAssessmentsResultsController {
  /**
   * Retrieve paginated results for a specified assessment.
   *
   * Fetch a filtered, paginated list of assessment results for the assessment
   * identified by assessmentId.
   *
   * This PATCH endpoint accepts a request body specifying filtering and
   * pagination criteria as per IEnterpriseLmsAssessmentResult.IRequest schema.
   *
   * The response provides a paginated list of assessment results matching the
   * criteria.
   *
   * Roles authorized: contentCreatorInstructor, organizationAdmin.
   *
   * Tenant data isolation and security are enforced.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Search and pagination criteria for assessment results
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentResult.IRequest,
  ): Promise<IPageIEnterpriseLmsAssessmentResult> {
    try {
      return await patchenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdResults(
        {
          contentCreatorInstructor,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
