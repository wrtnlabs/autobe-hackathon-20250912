import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestions } from "../../../../../providers/postenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestions";
import { ContentcreatorinstructorAuth } from "../../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/putenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId";
import { deleteenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/deleteenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId";

import { IEnterpriseLmsAssessmentQuestion } from "../../../../../api/structures/IEnterpriseLmsAssessmentQuestion";

@Controller(
  "/enterpriseLms/contentCreatorInstructor/assessments/:assessmentId/questions",
)
export class EnterpriselmsContentcreatorinstructorAssessmentsQuestionsController {
  /**
   * Create a new question for a given assessment.
   *
   * Create a new assessment question under a specified assessment identified by
   * assessmentId.
   *
   * This POST endpoint expects a request body containing the question_text,
   * question_type, and weight properties as defined in the
   * IEnterpriseLmsAssessmentQuestion.ICreate schema.
   *
   * The response returns the newly created assessment question including its
   * unique id and timestamps.
   *
   * Authorization requires roles 'contentCreatorInstructor' or
   * 'organizationAdmin'.
   *
   * Tenant isolation is enforced ensuring the assessment belongs to the
   * caller's organization.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Information needed to create a question under an assessment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.ICreate,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await postenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestions(
        {
          contentCreatorInstructor,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update question details for a given assessment.
   *
   * Update an existing question details under a specified assessment.
   *
   * This PUT endpoint requires assessmentId and questionId as path parameters.
   *
   * Request body follows the IEnterpriseLmsAssessmentQuestion.IUpdate schema
   * indicating modifiable properties.
   *
   * Response returns the updated assessment question entity.
   *
   * Authorization requires roles 'contentCreatorInstructor' or
   * 'organizationAdmin'.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param questionId Unique identifier of the question to update
   * @param body Properties to update an assessment question
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":questionId")
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.IUpdate,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await putenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId(
        {
          contentCreatorInstructor,
          assessmentId,
          questionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an assessment question.
   *
   * Delete an existing question from an assessment by marking its deleted_at
   * timestamp.
   *
   * This DELETE endpoint targets a question identified by questionId within an
   * assessment identified by assessmentId.
   *
   * Authorization for operation is granted to roles 'contentCreatorInstructor'
   * and 'organizationAdmin'.
   *
   * Tenant isolation is enforced to ensure data security.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param questionId Unique identifier of the question to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":questionId")
  public async erase(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsContentCreatorInstructorAssessmentsAssessmentIdQuestionsQuestionId(
        {
          contentCreatorInstructor,
          assessmentId,
          questionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
