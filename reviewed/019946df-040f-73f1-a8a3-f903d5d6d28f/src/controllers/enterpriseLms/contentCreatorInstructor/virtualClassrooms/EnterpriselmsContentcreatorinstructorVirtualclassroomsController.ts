import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorVirtualClassrooms } from "../../../../providers/postenterpriseLmsContentCreatorInstructorVirtualClassrooms";
import { ContentcreatorinstructorAuth } from "../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId } from "../../../../providers/putenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId";
import { deleteenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId } from "../../../../providers/deleteenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId";

import { IEnterpriseLmsVirtualClassroom } from "../../../../api/structures/IEnterpriseLmsVirtualClassroom";

@Controller("/enterpriseLms/contentCreatorInstructor/virtualClassrooms")
export class EnterpriselmsContentcreatorinstructorVirtualclassroomsController {
  /**
   * Create a new virtual classroom session for live training within the tenant
   * organization. The session is scheduled with title, optional description,
   * start, and end timestamps. Tenant ID and instructor ID ensure correct
   * multi-tenant isolation and user association.
   *
   * Security is enforced to allow only authorized content creator or instructor
   * users to create sessions within their tenant.
   *
   * The virtual classroom session supports later updates and multi-tenancy
   * compliance. The API validates inputs and stores the session in the
   * database, returning the created resource details.
   *
   * This operation directly manipulates the enterprise_lms_virtual_classrooms
   * table, creating a new record with required fields. It provides immediate
   * feedback about the created session entity.
   *
   * @param connection
   * @param body Data required to create a new virtual classroom session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsVirtualClassroom.ICreate,
  ): Promise<IEnterpriseLmsVirtualClassroom> {
    try {
      return await postenterpriseLmsContentCreatorInstructorVirtualClassrooms({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing virtual classroom session by ID within the tenant
   * organization. The update can modify title, optional description, start and
   * end timestamps, ensuring only authorized instructors in the tenant can make
   * changes.
   *
   * Input validation prevents out-of-range or invalid data updates. The
   * operation returns the modified session entity.
   *
   * The operation is associated with the enterprise_lms_virtual_classrooms
   * table and maintains multi-tenancy data isolation through tenant and user
   * context checks.
   *
   * @param connection
   * @param virtualClassroomId Unique identifier of the virtual classroom
   *   session
   * @param body Data fields to update for the virtual classroom session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":virtualClassroomId")
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("virtualClassroomId")
    virtualClassroomId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsVirtualClassroom.IUpdate,
  ): Promise<IEnterpriseLmsVirtualClassroom> {
    try {
      return await putenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId(
        {
          contentCreatorInstructor,
          virtualClassroomId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a virtual classroom session by ID.
   *
   * Soft delete a virtual classroom session by setting the deleted_at
   * timestamp, marking it as removed but preserving the record for auditing and
   * potential restoration.
   *
   * This deletion respects tenant boundaries and authorizes only the content
   * creator/instructor role.
   *
   * This operation targets the enterprise_lms_virtual_classrooms table,
   * maintaining multi-tenant data isolation and compliance requirements.
   *
   * @param connection
   * @param virtualClassroomId Unique identifier of the virtual classroom
   *   session to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":virtualClassroomId")
  public async erase(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("virtualClassroomId")
    virtualClassroomId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsContentCreatorInstructorVirtualClassroomsVirtualClassroomId(
        {
          contentCreatorInstructor,
          virtualClassroomId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
