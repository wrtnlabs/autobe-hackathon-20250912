import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putenterpriseLmsContentCreatorInstructorSessionsId } from "../../../../providers/putenterpriseLmsContentCreatorInstructorSessionsId";
import { ContentcreatorinstructorAuth } from "../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../decorators/payload/ContentcreatorinstructorPayload";
import { deleteenterpriseLmsContentCreatorInstructorSessionsId } from "../../../../providers/deleteenterpriseLmsContentCreatorInstructorSessionsId";

import { IEnterpriseLmsSessions } from "../../../../api/structures/IEnterpriseLmsSessions";

@Controller("/enterpriseLms/contentCreatorInstructor/sessions/:id")
export class EnterpriselmsContentcreatorinstructorSessionsController {
  /**
   * Update an existing LMS user session with new information.
   *
   * Update an active user session in the LMS system. This endpoint modifies
   * session properties like device information, IP address, and expiration
   * timestamp for a specific session ID.
   *
   * This operation requires proper authentication and authorization because it
   * affects user login sessions and security.
   *
   * The enterprise_lms_sessions table tracks session tokens, device metadata,
   * and expiry times. This update ensures continuous session management,
   * enabling session revocation or extension as per business logic.
   *
   * The request body must include fields allowed for update as defined in the
   * IEnterpriseLmsSessions.IUpdate schema. The response body returns the
   * updated session information.
   *
   * Proper error handling includes returning 404 if the session ID is not
   * found, and 403 if unauthorized access occurs.
   *
   * @param connection
   * @param id Unique identifier of the session to update
   * @param body Updated session information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsSessions.IUpdate,
  ): Promise<IEnterpriseLmsSessions> {
    try {
      return await putenterpriseLmsContentCreatorInstructorSessionsId({
        contentCreatorInstructor,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a LMS user session permanently.
   *
   * Delete a user session by its unique identifier. This permanently removes
   * the session record from the database, revoking user access.
   *
   * Careful authorization checks must be done before performing this operation.
   *
   * Returns no content upon success. Errors include 404 if session not found
   * and 403 for unauthorized attempts.
   *
   * @param connection
   * @param id Unique identifier of the session to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsContentCreatorInstructorSessionsId({
        contentCreatorInstructor,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
