import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsForums } from "../../../providers/patchenterpriseLmsForums";
import { getenterpriseLmsForumsForumId } from "../../../providers/getenterpriseLmsForumsForumId";

import { IPageIEnterpriseLmsForum } from "../../../api/structures/IPageIEnterpriseLmsForum";
import { IEnterpriseLmsForum } from "../../../api/structures/IEnterpriseLmsForum";

@Controller("/enterpriseLms/forums")
export class EnterpriselmsForumsController {
  /**
   * Retrieve filtered list of forums.
   *
   * Retrieve a list of discussion forums from the system, supporting advanced
   * search and pagination. The forums are tenant-scoped entities containing
   * attributes such as the forum name, description, owner, and creation
   * timestamps.
   *
   * Security: This operation is public and does not require authentication.
   *
   * Request: Pagination, search, and filter parameters are accepted to
   * customize results.
   *
   * Response: Returns paginated summaries of forums.
   *
   * Errors:
   *
   * - 400 Bad Request if request parameters are invalid.
   *
   * This enables clients to browse forums effectively with dynamic query
   * capabilities.
   *
   * @param connection
   * @param body Pagination and filter parameters for forums
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IEnterpriseLmsForum.IRequest,
  ): Promise<IPageIEnterpriseLmsForum.ISummary> {
    try {
      return await patchenterpriseLmsForums({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed forum information.
   *
   * Fetch detailed information of a particular discussion forum specified by
   * `forumId`. Forums store tenant-specific discussion spaces managed by
   * organization or department administrators.
   *
   * Security: Publicly accessible with no role restrictions.
   *
   * Parameters:
   *
   * - `forumId` (UUID): Unique identifier of the forum to retrieve.
   *
   * Response: Returns the full forum entity including name, description, owner,
   * and timestamps.
   *
   * Errors:
   *
   * - 404 Not Found if the forum does not exist.
   *
   * This enables clients and users to access forum details and facilitate
   * communication and collaboration.
   *
   * @param connection
   * @param forumId Unique identifier of the forum
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":forumId")
  public async at(
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsForum> {
    try {
      return await getenterpriseLmsForumsForumId({
        forumId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
