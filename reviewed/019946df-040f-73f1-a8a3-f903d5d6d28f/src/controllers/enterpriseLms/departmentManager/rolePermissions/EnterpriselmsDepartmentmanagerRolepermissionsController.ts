import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsDepartmentManagerRolePermissions } from "../../../../providers/patchenterpriseLmsDepartmentManagerRolePermissions";
import { DepartmentmanagerAuth } from "../../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../../decorators/payload/DepartmentmanagerPayload";
import { getenterpriseLmsDepartmentManagerRolePermissionsId } from "../../../../providers/getenterpriseLmsDepartmentManagerRolePermissionsId";

import { IPageIEnterpriseLmsRolePermissions } from "../../../../api/structures/IPageIEnterpriseLmsRolePermissions";
import { IEnterpriseLmsRolePermissions } from "../../../../api/structures/IEnterpriseLmsRolePermissions";

@Controller("/enterpriseLms/departmentManager/rolePermissions")
export class EnterpriselmsDepartmentmanagerRolepermissionsController {
  /**
   * Retrieve paginated list of LMS role permissions.
   *
   * Retrieve a filtered and paginated list of all LMS role permissions assigned
   * to roles. This list supports searching and sorting to find permissions by
   * key or description.
   *
   * Role permissions define access and authorization rights within the LMS
   * system.
   *
   * The request body includes search criteria, page size, and sorting options
   * as per IEnterpriseLmsRolePermissions.IRequest schema.
   *
   * The response includes a page object with summaries of role permissions
   * matching the criteria.
   *
   * Access to this operation requires authentication as an authorized user.
   *
   * @param connection
   * @param body Search and pagination parameters for role permissions filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsRolePermissions.IRequest,
  ): Promise<IPageIEnterpriseLmsRolePermissions.ISummary> {
    try {
      return await patchenterpriseLmsDepartmentManagerRolePermissions({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed LMS role permission by ID.
   *
   * Retrieve detailed information for a single LMS role permission by ID.
   *
   * This provides all fields related to a role permission including the
   * permission key, description, and grant status.
   *
   * Requires authentication for access control.
   *
   * Returns 404 if the specified ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the role permission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsRolePermissions> {
    try {
      return await getenterpriseLmsDepartmentManagerRolePermissionsId({
        departmentManager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
