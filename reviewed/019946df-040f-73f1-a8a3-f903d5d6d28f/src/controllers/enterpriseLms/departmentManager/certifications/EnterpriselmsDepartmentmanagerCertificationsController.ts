import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsDepartmentManagerCertifications } from "../../../../providers/patchenterpriseLmsDepartmentManagerCertifications";
import { DepartmentmanagerAuth } from "../../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../../decorators/payload/DepartmentmanagerPayload";
import { getenterpriseLmsDepartmentManagerCertificationsCertificationId } from "../../../../providers/getenterpriseLmsDepartmentManagerCertificationsCertificationId";

import { IPageIEnterpriseLmsCertification } from "../../../../api/structures/IPageIEnterpriseLmsCertification";
import { IEnterpriseLmsCertification } from "../../../../api/structures/IEnterpriseLmsCertification";

@Controller("/enterpriseLms/departmentManager/certifications")
export class EnterpriselmsDepartmentmanagerCertificationsController {
  /**
   * Search and list paginated tenant certifications.
   *
   * This PATCH operation allows clients to search and retrieve certifications
   * for the tenant with advanced filtering, sorting, and pagination options.
   *
   * It supports querying certifications by code, name, status, and lifecycle
   * state.
   *
   * Only authorized users with roles organizationAdmin or departmentManager can
   * perform this operation.
   *
   * The response includes paginated summary certification information to
   * optimize list rendering.
   *
   * Errors may occur due to invalid search filters or insufficient permissions.
   *
   * This operation requires a request body with search parameters.
   *
   * The response body returns a paginated list of certifications matching the
   * search criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for certifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchCertifications(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsCertification.IRequest,
  ): Promise<IPageIEnterpriseLmsCertification.ISummary> {
    try {
      return await patchenterpriseLmsDepartmentManagerCertifications({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve certification detail by ID.
   *
   * This GET operation returns detailed information for the certification
   * identified by certificationId.
   *
   * Only users with organizationAdmin or departmentManager roles have access.
   *
   * The response includes all relevant certification data for use in UI or
   * reporting.
   *
   * If the certification is not found, an error response is returned.
   *
   * No request body is required.
   *
   * The response body contains a complete certification entity.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":certificationId")
  public async atCertification(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCertification> {
    try {
      return await getenterpriseLmsDepartmentManagerCertificationsCertificationId(
        {
          departmentManager,
          certificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
