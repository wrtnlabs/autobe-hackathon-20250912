import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId } from "../../../../providers/getenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId";
import { DepartmentmanagerAuth } from "../../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../../decorators/payload/DepartmentmanagerPayload";
import { putenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId } from "../../../../providers/putenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId";
import { deleteenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId } from "../../../../providers/deleteenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId";
import { postenterpriseLmsDepartmentManagerDepartmentmanagers } from "../../../../providers/postenterpriseLmsDepartmentManagerDepartmentmanagers";

import { IEnterpriseLmsDepartmentManager } from "../../../../api/structures/IEnterpriseLmsDepartmentManager";

@Controller("/enterpriseLms/departmentManager/departmentmanagers")
export class EnterpriselmsDepartmentmanagerDepartmentmanagersController {
  /**
   * Retrieve a specific Department Manager by ID.
   *
   * Retrieve detailed information about a specific Department Manager
   * identified by departmentmanagerId. This operation securely fetches the
   * Department Manager record scoped within the tenant organization. The
   * returned data includes all user properties like email, names, status,
   * timestamps, and soft deletion status.
   *
   * Authorization requires the user to have the 'departmentManager' role to
   * ensure data security and proper multi-tenant isolation.
   *
   * This endpoint corresponds directly to the enterprise_lms_departmentmanager
   * model in the Prisma DB schema.
   *
   * Error handling includes responses for non-existent IDs and access
   * restrictions.
   *
   * @param connection
   * @param departmentmanagerId Unique identifier of the Department Manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":departmentmanagerId")
  public async at(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("departmentmanagerId")
    departmentmanagerId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsDepartmentManager> {
    try {
      return await getenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId(
        {
          departmentManager,
          departmentmanagerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a Department Manager user by ID.
   *
   * Update details of a Department Manager identified by departmentmanagerId.
   * The request body contains updated fields, such as email, password_hash,
   * first_name, last_name, and status, conforming to the
   * enterprise_lms_departmentmanager schema.
   *
   * Authorization is required with the 'departmentManager' role to ensure
   * secure data management within tenant boundaries.
   *
   * The operation returns the updated Department Manager entity reflecting all
   * changes.
   *
   * Sensitive information should be transmitted and stored securely.
   *
   * @param connection
   * @param departmentmanagerId Unique identifier of the Department Manager to
   *   update
   * @param body Payload to update Department Manager user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":departmentmanagerId")
  public async update(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("departmentmanagerId")
    departmentmanagerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsDepartmentManager.IUpdate,
  ): Promise<IEnterpriseLmsDepartmentManager> {
    try {
      return await putenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId(
        {
          departmentManager,
          departmentmanagerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a Department Manager user permanently.
   *
   * Permanently delete a Department Manager by its unique departmentmanagerId.
   * This operation performs a hard delete, removing the record from the
   * database entirely.
   *
   * Soft deletion is possible in the schema but this endpoint does not
   * implement it.
   *
   * Only users with the 'departmentManager' role are authorized to perform this
   * deletion to ensure security and prevent accidental data loss.
   *
   * Clients should handle cases where the record does not exist gracefully.
   *
   * @param connection
   * @param departmentmanagerId Unique identifier of the Department Manager to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":departmentmanagerId")
  public async erase(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("departmentmanagerId")
    departmentmanagerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsDepartmentManagerDepartmentmanagersDepartmentmanagerId(
        {
          departmentManager,
          departmentmanagerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new Department Manager user within the specified tenant
   * organization. The request body must include all required attributes,
   * including tenant_id, email, password_hash, first_name, last_name, and
   * status.
   *
   * The system validates the uniqueness of the email and ensures proper tenant
   * association.
   *
   * This operation corresponds to creating a new entry in the
   * enterprise_lms_departmentmanager table, returning the full created entity
   * including timestamps.
   *
   * All sensitive data, such as passwords, should be handled securely in
   * transit and at rest.
   *
   * Authorization is limited to users with the 'departmentManager' role to
   * maintain security and compliance.
   *
   * @param connection
   * @param body Payload to create a Department Manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsDepartmentManager.ICreate,
  ): Promise<IEnterpriseLmsDepartmentManager> {
    try {
      return await postenterpriseLmsDepartmentManagerDepartmentmanagers({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
