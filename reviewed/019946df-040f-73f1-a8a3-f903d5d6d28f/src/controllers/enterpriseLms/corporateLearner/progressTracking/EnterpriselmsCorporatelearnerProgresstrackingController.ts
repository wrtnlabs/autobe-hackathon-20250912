import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsCorporateLearnerProgressTrackingId } from "../../../../providers/getenterpriseLmsCorporateLearnerProgressTrackingId";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { putenterpriseLmsCorporateLearnerProgressTrackingId } from "../../../../providers/putenterpriseLmsCorporateLearnerProgressTrackingId";
import { deleteenterpriseLmsCorporateLearnerProgressTrackingId } from "../../../../providers/deleteenterpriseLmsCorporateLearnerProgressTrackingId";
import { postenterpriseLmsCorporateLearnerProgressTracking } from "../../../../providers/postenterpriseLmsCorporateLearnerProgressTracking";
import { patchenterpriseLmsCorporateLearnerProgressTracking } from "../../../../providers/patchenterpriseLmsCorporateLearnerProgressTracking";

import { IEnterpriseLmsProgressTracking } from "../../../../api/structures/IEnterpriseLmsProgressTracking";
import { IPageIEnterpriseLmsProgressTracking } from "../../../../api/structures/IPageIEnterpriseLmsProgressTracking";

@Controller("/enterpriseLms/corporateLearner/progressTracking")
export class EnterpriselmsCorporatelearnerProgresstrackingController {
  /**
   * Get progress tracking record by ID.
   *
   * Retrieve detailed information about a learner's progress tracking by its
   * unique ID.
   *
   * This endpoint returns metrics including time spent (seconds), assessment
   * attempts, and engagement score related to the learner's interaction with
   * specific content.
   *
   * Access control ensures only authorized learners or system-level users can
   * retrieve the data.
   *
   * The operation corresponds to the enterprise_lms_progress_tracking Prisma
   * table, critical for monitoring learner engagement and progress analytics.
   *
   * Proper error handling is implemented for cases such as non-existent IDs or
   * insufficient permissions.
   *
   * @param connection
   * @param id Unique identifier of the progress tracking record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atProgressTracking(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsProgressTracking> {
    try {
      return await getenterpriseLmsCorporateLearnerProgressTrackingId({
        corporateLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific progress tracking record by ID.
   *
   * Update an existing learner's progress tracking record by its unique ID.
   * This operation modifies key learning metrics including time spent on
   * content, number of assessment attempts, and engagement score, reflecting
   * the learner's evolving progress.
   *
   * Security and access control require that only authenticated users with the
   * 'corporateLearner' role can perform updates.
   *
   * This method involves the enterprise_lms_progress_tracking table according
   * to the Prisma schema, which links learners with content items and tracks
   * detailed interaction data.
   *
   * Validation rules ensure the ID path parameter is a valid UUID and the
   * update payload conforms to the defined DTO
   * IEnterpriseLmsProgressTracking.IUpdate.
   *
   * On success, the updated progress tracking record is returned with all
   * relevant data fields like learnerId, contentId, and engagement metrics.
   *
   * Error handling includes proper responses for invalid IDs, authorization
   * errors, and validation failures.
   *
   * @param connection
   * @param id Unique identifier of the progress tracking record
   * @param body Data to update progress tracking record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateProgressTracking(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsProgressTracking.IUpdate,
  ): Promise<IEnterpriseLmsProgressTracking> {
    try {
      return await putenterpriseLmsCorporateLearnerProgressTrackingId({
        corporateLearner,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific progress tracking record by ID (soft delete).
   *
   * Permanently or logically delete a learner's progress tracking record by its
   * ID. Since the schema includes a deleted_at field, this operation performs a
   * soft delete by setting the deleted_at timestamp.
   *
   * Only users with role 'corporateLearner' are authorized to perform this
   * action.
   *
   * The record identified by the provided UUID in the path parameter is marked
   * as deleted, preserving data for audit compliance.
   *
   * This operation interfaces with the enterprise_lms_progress_tracking table
   * in the Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the progress tracking record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseProgressTracking(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsCorporateLearnerProgressTrackingId({
        corporateLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create progress tracking entry.
   *
   * Create a new progress tracking record for a learner's content interaction.
   *
   * The endpoint accepts progress metrics including time spent (seconds),
   * number of assessment attempts, and engagement score. The request body must
   * adhere to the IEnterpriseLmsProgressTracking.ICreate schema.
   *
   * Upon successful creation, the full progress tracking record is returned.
   *
   * Authorization ensures only authenticated corporate learners can create
   * records tied to their own data.
   *
   * This operation interfaces directly with the
   * enterprise_lms_progress_tracking table in the database schema.
   *
   * @param connection
   * @param body Progress tracking creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createProgressTracking(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsProgressTracking.ICreate,
  ): Promise<IEnterpriseLmsProgressTracking> {
    try {
      return await postenterpriseLmsCorporateLearnerProgressTracking({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search progress tracking entries with filters and pagination.
   *
   * Search and retrieve a filtered, paginated list of progress tracking
   * entries.
   *
   * This endpoint supports complex queries including filtering by learner,
   * content, time range, and engagement metrics. It returns paginated summaries
   * to optimize frontend performance.
   *
   * Authorization ensures users can only query data within their tenant and
   * permission scope.
   *
   * The operation corresponds to the enterprise_lms_progress_tracking table and
   * supports analytics and reporting features.
   *
   * Errors related to invalid filters or unauthorized access are managed
   * appropriately.
   *
   * @param connection
   * @param body Filter and pagination parameters for progress tracking
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexProgressTracking(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsProgressTracking.IRequest,
  ): Promise<IPageIEnterpriseLmsProgressTracking.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerProgressTracking({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
