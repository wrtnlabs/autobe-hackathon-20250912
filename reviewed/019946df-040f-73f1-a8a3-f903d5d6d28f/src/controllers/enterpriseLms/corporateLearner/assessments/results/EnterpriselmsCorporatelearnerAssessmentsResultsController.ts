import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId } from "../../../../../providers/getenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId";
import { CorporatelearnerAuth } from "../../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../../decorators/payload/CorporatelearnerPayload";
import { putenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId } from "../../../../../providers/putenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId";
import { postenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResults } from "../../../../../providers/postenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResults";

import { IEnterpriseLmsAssessmentResult } from "../../../../../api/structures/IEnterpriseLmsAssessmentResult";

@Controller("/enterpriseLms/corporateLearner/assessments/:assessmentId/results")
export class EnterpriselmsCorporatelearnerAssessmentsResultsController {
  /**
   * Retrieve a specific assessment result by assessmentId and resultId.
   *
   * Retrieve detailed information about a specific assessment result identified
   * by its resultId and associated with the specified assessmentId within the
   * multi-tenant Enterprise LMS system.
   *
   * This operation ensures data retrieval scoped by tenant and enforces access
   * control based on user roles. It interfaces directly with the
   * enterprise_lms_assessment_results table, fetching all recorded fields for
   * the requested assessment attempt.
   *
   * The response includes score, status, completion timestamp, and audit
   * timestamps. Authorization checks verify user permission to view this data,
   * protecting learner privacy and tenant data isolation.
   *
   * Errors include not found if the resultId does not exist or does not belong
   * to the assessmentId provided.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param resultId Unique identifier of the assessment result
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":resultId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("resultId")
    resultId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAssessmentResult> {
    try {
      return await getenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId(
        {
          corporateLearner,
          assessmentId,
          resultId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific assessment result by assessmentId and resultId.
   *
   * Update an existing assessment result identified by resultId for the
   * specified assessmentId.
   *
   * The update request must contain valid fields for score, status, and related
   * audit data. This operation ensures that only authorized users modify
   * allowed fields. It accesses the enterprise_lms_assessment_results table,
   * updating relevant fields and timestamps.
   *
   * Upon success, the updated assessment result is returned. Validation
   * failures or permission issues cause errors.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param resultId Unique identifier of the assessment result
   * @param body Update info for assessment result
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":resultId")
  public async update(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("resultId")
    resultId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentResult.IUpdate,
  ): Promise<IEnterpriseLmsAssessmentResult> {
    try {
      return await putenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResultsResultId(
        {
          corporateLearner,
          assessmentId,
          resultId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new assessment result for a specific assessment.
   *
   * Create a new assessment result entry under the specified assessmentId to
   * record a learner's attempt, score, and completion status.
   *
   * The request must include valid scoring data and learner references as per
   * the schema. Authorization ensures only permitted roles (e.g., systemAdmin,
   * organizationAdmin, corporateLearner) can create results. The newly created
   * assessment result includes all fields to confirm data integrity and audit
   * tracking.
   *
   * Validation errors are returned if data violates schema or business rules.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Creation info for assessment result
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentResult.ICreate,
  ): Promise<IEnterpriseLmsAssessmentResult> {
    try {
      return await postenterpriseLmsCorporateLearnerAssessmentsAssessmentIdResults(
        {
          corporateLearner,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
