import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItems } from "../../../../../providers/patchenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItems";
import { CorporatelearnerAuth } from "../../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../../decorators/payload/CorporatelearnerPayload";
import { getenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItemsLearningPathItemId } from "../../../../../providers/getenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItemsLearningPathItemId";

import { IPageIEnterpriseLmsLearningPathItem } from "../../../../../api/structures/IPageIEnterpriseLmsLearningPathItem";
import { IEnterpriseLmsLearningPathItem } from "../../../../../api/structures/IEnterpriseLmsLearningPathItem";

@Controller(
  "/enterpriseLms/corporateLearner/learningPaths/:learningPathId/learningPathItems",
)
export class EnterpriselmsCorporatelearnerLearningpathsLearningpathitemsController {
  /**
   * Retrieve a paginated list of learning path items for a specific learning
   * path.
   *
   * This API operation fetches a paginated and optionally filtered list of
   * learning path items for a specific learning path identified by its ID.
   *
   * Users can view detailed information about each learning path item,
   * including its type (e.g., course, module), its reference ID, and its order
   * in the learning path.
   *
   * Security considerations include ensuring that only users authorized to
   * access the given learning path can retrieve its items.
   *
   * This operation is crucial for constructing the learner's curriculum and
   * managing the learning path structure within the enterprise LMS system.
   *
   * The response includes pagination information to efficiently load large
   * learning paths and maintain system performance while ensuring data
   * consistency and tenant isolation.
   *
   * @param connection
   * @param learningPathId Unique identifier of the target learning path
   * @param body Search criteria and pagination parameters for learning path
   *   items
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsLearningPathItem.IRequest,
  ): Promise<IPageIEnterpriseLmsLearningPathItem> {
    try {
      return await patchenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItems(
        {
          corporateLearner,
          learningPathId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed learning path item information.
   *
   * Retrieve detailed information about a specific learning path item by its ID
   * within a given learning path.
   *
   * This operation returns all properties associated with the learning path
   * item, such as item type, item ID, and its sequence order.
   *
   * Security checks enforce that only authorized users of the tenant can access
   * this item.
   *
   * The operation is essential for management interfaces where administrators
   * or content managers need to view or edit individual learning path
   * components accurately.
   *
   * This operation interacts with the enterprise_lms_learning_path_items table
   * from the Prisma schema ensuring consistency and tenant data isolation.
   *
   * @param connection
   * @param learningPathId Unique identifier of the target learning path
   * @param learningPathItemId Unique identifier of the learning path item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":learningPathItemId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedParam("learningPathItemId")
    learningPathItemId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsLearningPathItem> {
    try {
      return await getenterpriseLmsCorporateLearnerLearningPathsLearningPathIdLearningPathItemsLearningPathItemId(
        {
          corporateLearner,
          learningPathId,
          learningPathItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
