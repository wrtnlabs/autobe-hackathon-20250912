import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsCorporateLearnerVirtualClassrooms } from "../../../../providers/patchenterpriseLmsCorporateLearnerVirtualClassrooms";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { getenterpriseLmsCorporateLearnerVirtualClassroomsVirtualClassroomId } from "../../../../providers/getenterpriseLmsCorporateLearnerVirtualClassroomsVirtualClassroomId";

import { IPageIEnterpriseLmsVirtualClassroom } from "../../../../api/structures/IPageIEnterpriseLmsVirtualClassroom";
import { IEnterpriseLmsVirtualClassroom } from "../../../../api/structures/IEnterpriseLmsVirtualClassroom";

@Controller("/enterpriseLms/corporateLearner/virtualClassrooms")
export class EnterpriselmsCorporatelearnerVirtualclassroomsController {
  /**
   * Search and retrieve virtual classroom sessions.
   *
   * Search and retrieve a filtered, paginated list of virtual classroom
   * sessions from the system.
   *
   * This operation allows authenticated corporate learners to query virtual
   * classrooms with various filters, pagination, and sorting options.
   *
   * The response provides summary information optimized for display in lists or
   * calendars, scoped within the user's tenant.
   *
   * Security considerations include ensuring users only see sessions they are
   * permitted to access based on their role and organizational scope.
   *
   * Errors may occur if invalid filter criteria are provided or due to
   * authorization failures.
   *
   * @param connection
   * @param body Request parameters for filtering and pagination of virtual
   *   classrooms
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchVirtualClassrooms(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsVirtualClassroom.IRequest,
  ): Promise<IPageIEnterpriseLmsVirtualClassroom.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerVirtualClassrooms({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a virtual classroom by ID.
   *
   * Retrieve detailed information of a specific virtual classroom session by
   * its unique ID.
   *
   * This operation ensures tenant-level data isolation and access control.
   *
   * Returns all fields of the virtual classroom, including title, instructor,
   * schedule details, and status.
   *
   * Errors include 'not found' if the session does not exist or 'forbidden' if
   * the user lacks permission.
   *
   * @param connection
   * @param virtualClassroomId Unique identifier of the virtual classroom
   *   session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":virtualClassroomId")
  public async getVirtualClassroom(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("virtualClassroomId")
    virtualClassroomId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsVirtualClassroom> {
    try {
      return await getenterpriseLmsCorporateLearnerVirtualClassroomsVirtualClassroomId(
        {
          corporateLearner,
          virtualClassroomId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
