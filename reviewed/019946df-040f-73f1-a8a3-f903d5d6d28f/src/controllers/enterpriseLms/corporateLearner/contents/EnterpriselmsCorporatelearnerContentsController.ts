import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsCorporateLearnerContents } from "../../../../providers/patchenterpriseLmsCorporateLearnerContents";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { getenterpriseLmsCorporateLearnerContentsId } from "../../../../providers/getenterpriseLmsCorporateLearnerContentsId";

import { IPageIEnterpriseLmsContents } from "../../../../api/structures/IPageIEnterpriseLmsContents";
import { IEnterpriseLmsContents } from "../../../../api/structures/IEnterpriseLmsContents";

@Controller("/enterpriseLms/corporateLearner/contents")
export class EnterpriselmsCorporatelearnerContentsController {
  /**
   * Search and retrieve a filtered, paginated list of content items.
   *
   * Retrieve a filtered and paginated list of enterprise LMS content entities
   * from the system. This operation supports comprehensive search capabilities
   * including filtering by tenant, approval status, business lifecycle status,
   * content type, and keyword searches in title and description.
   *
   * Clients can specify pagination size, page number, and sorting options to
   * control result sets.
   *
   * Security considerations ensure only users with appropriate authorization
   * see permitted content matching their tenant and role permissions.
   *
   * The operation corresponds to the enterprise_lms_contents database table as
   * defined in the Prisma schema, incorporating fields such as title,
   * description, content_type, status, business_status, created_at, updated_at,
   * and deleted_at.
   *
   * Results return paginated content summaries to optimize data transmission
   * and client rendering.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for content filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsContents.IRequest,
  ): Promise<IPageIEnterpriseLmsContents.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerContents({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific content item by its ID. This includes the
   * full content metadata such as title, description, content type, approval
   * status, business lifecycle status, tenant ownership, and timestamps.
   *
   * The operation corresponds to the enterprise_lms_contents Prisma schema
   * table.
   *
   * Users must be authorized to access the content within their tenant
   * boundaries.
   *
   * This operation returns detailed content object data, excluding any soft
   * deleted records.
   *
   * The {id} path parameter must be a valid UUID identifying the content
   * record.
   *
   * @param connection
   * @param id UUID of the content item to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContents> {
    try {
      return await getenterpriseLmsCorporateLearnerContentsId({
        corporateLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
