import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsCorporateLearnerDirectMessages } from "../../../../providers/postenterpriseLmsCorporateLearnerDirectMessages";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { patchenterpriseLmsCorporateLearnerDirectMessages } from "../../../../providers/patchenterpriseLmsCorporateLearnerDirectMessages";
import { getenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId } from "../../../../providers/getenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId";
import { putenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId } from "../../../../providers/putenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId";
import { deleteenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId } from "../../../../providers/deleteenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId";

import { IEnterpriseLmsDirectMessage } from "../../../../api/structures/IEnterpriseLmsDirectMessage";
import { IPageIEnterpriseLmsDirectMessage } from "../../../../api/structures/IPageIEnterpriseLmsDirectMessage";

@Controller("/enterpriseLms/corporateLearner/directMessages")
export class EnterpriselmsCorporatelearnerDirectmessagesController {
  /**
   * Create and send a new direct message between users.
   *
   * Send a new private direct message within the enterprise LMS platform. The
   * message is stored in the enterprise_lms_direct_messages table with sender
   * and recipient user identifiers, message content, and sent timestamp.
   *
   * The sender and recipient must be valid users with appropriate permissions.
   * The message content should comply with content guidelines.
   *
   * Upon successful creation, the newly saved direct message is returned.
   *
   * Only authenticated users can send direct messages.
   *
   * This operation supports user communication and collaboration.
   *
   * @param connection
   * @param body Direct message creation payload including sender, recipient,
   *   and message content
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsDirectMessage.ICreate,
  ): Promise<IEnterpriseLmsDirectMessage> {
    try {
      return await postenterpriseLmsCorporateLearnerDirectMessages({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a list of direct messages with filters and pagination.
   *
   * Retrieve a filtered and paginated list of direct messages exchanged between
   * users in the enterprise LMS platform. This operation accepts various search
   * parameters such as sender ID, recipient ID, date range, and message content
   * keywords to facilitate detailed querying.
   *
   * Direct messages represent private communications stored in the
   * enterprise_lms_direct_messages table. The system applies tenant isolation
   * and access control to ensure message confidentiality.
   *
   * The filtered data is returned with pagination to support efficient client
   * rendering. This is a read-only, user-level operation accessible to
   * authenticated users.
   *
   * @param connection
   * @param body Search parameters and pagination settings for direct messages
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsDirectMessage.IRequest,
  ): Promise<IPageIEnterpriseLmsDirectMessage.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerDirectMessages({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific direct message.
   *
   * Retrieve detailed information of a single direct message identified by
   * directMessageId. The direct message includes sender, recipient, message
   * content, sent/read timestamps, and metadata.
   *
   * This data is tenant-isolated and access-controlled according to user
   * permissions.
   *
   * Providing a valid UUID parameter for directMessageId is required.
   *
   * Only authorized authenticated users can perform this operation.
   *
   * This operation supports use cases such as message viewing and auditing.
   *
   * @param connection
   * @param directMessageId Unique identifier of the direct message to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":directMessageId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("directMessageId")
    directMessageId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsDirectMessage> {
    try {
      return await getenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId(
        {
          corporateLearner,
          directMessageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a direct message by ID.
   *
   * This API endpoint allows an authenticated corporate learner to update the
   * content and read status of a specific direct message identified by
   * 'directMessageId'.
   *
   * The direct message resource belongs to the multi-tenant Enterprise LMS
   * system, ensuring data isolation by tenant through internal role and
   * ownership validation in the implementation.
   *
   * A direct message records private communications between users. This
   * operation modifies the message body or marks the message read timestamp. It
   * validates that the user has permission to update the message, preserving
   * security.
   *
   * The request requires the full data structure for updatable fields as
   * defined in 'IEnterpriseLmsDirectMessage.IUpdate'. Upon successful update,
   * the API returns the updated direct message record.
   *
   * Errors may include 'not found' if the direct message does not exist, or
   * 'forbidden' if the user lacks update permissions.
   *
   * @param connection
   * @param directMessageId Unique identifier of the target direct message
   * @param body Update information for the direct message
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":directMessageId")
  public async updateDirectMessage(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("directMessageId")
    directMessageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsDirectMessage.IUpdate,
  ): Promise<IEnterpriseLmsDirectMessage> {
    try {
      return await putenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId(
        {
          corporateLearner,
          directMessageId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a direct message by ID (soft delete).
   *
   * This API endpoint allows an authenticated corporate learner to perform a
   * soft deletion of a direct message by specifying its unique ID.
   *
   * Soft deletion marks the message as deleted by setting the 'deleted_at'
   * timestamp without removing the record physically from the database. This
   * preserves audit trails and compliance records.
   *
   * Only authorized users with proper ownership or permissions can delete the
   * message.
   *
   * On success, no content is returned. Errors may include 'not found' or
   * 'forbidden'.
   *
   * @param connection
   * @param directMessageId Unique identifier of the target direct message
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":directMessageId")
  public async eraseDirectMessage(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("directMessageId")
    directMessageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsCorporateLearnerDirectMessagesDirectMessageId(
        {
          corporateLearner,
          directMessageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
