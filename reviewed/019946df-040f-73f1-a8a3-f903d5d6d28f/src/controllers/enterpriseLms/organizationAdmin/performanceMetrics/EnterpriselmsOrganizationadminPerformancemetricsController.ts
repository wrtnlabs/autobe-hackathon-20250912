import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchenterpriseLmsOrganizationAdminPerformanceMetrics } from "../../../../providers/patchenterpriseLmsOrganizationAdminPerformanceMetrics";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";

import { IPageIEnterpriseLmsPerformanceMetric } from "../../../../api/structures/IPageIEnterpriseLmsPerformanceMetric";
import { IEnterpriseLmsPerformanceMetric } from "../../../../api/structures/IEnterpriseLmsPerformanceMetric";

@Controller("/enterpriseLms/organizationAdmin/performanceMetrics")
export class EnterpriselmsOrganizationadminPerformancemetricsController {
  /**
   * Search and retrieve paginated performance metrics.
   *
   * Retrieves paginated performance metrics with filtering and sorting options.
   *
   * Supports querying by tenant, metric name, and recorded timestamp.
   *
   * This operation is for system monitoring and reporting and is accessible
   * only by authorized users with role systemAdmin or organizationAdmin.
   *
   * The operation corresponds to the enterprise_lms_performance_metrics table
   * and supports advanced search with pagination.
   *
   * The response includes detailed metric data records along with pagination
   * info.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for performance
   *   metrics
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsPerformanceMetric.IRequest,
  ): Promise<IPageIEnterpriseLmsPerformanceMetric> {
    try {
      return await patchenterpriseLmsOrganizationAdminPerformanceMetrics({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
