import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminCertificateIssuances } from "../../../../providers/postenterpriseLmsOrganizationAdminCertificateIssuances";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminCertificateIssuances } from "../../../../providers/patchenterpriseLmsOrganizationAdminCertificateIssuances";
import { getenterpriseLmsOrganizationAdminCertificateIssuancesId } from "../../../../providers/getenterpriseLmsOrganizationAdminCertificateIssuancesId";
import { putenterpriseLmsOrganizationAdminCertificateIssuancesId } from "../../../../providers/putenterpriseLmsOrganizationAdminCertificateIssuancesId";
import { deleteenterpriseLmsOrganizationAdminCertificateIssuancesId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminCertificateIssuancesId";

import { IEnterpriseLmsCertificateIssuance } from "../../../../api/structures/IEnterpriseLmsCertificateIssuance";
import { IPageIEnterpriseLmsCertificateIssuance } from "../../../../api/structures/IPageIEnterpriseLmsCertificateIssuance";

@Controller("/enterpriseLms/organizationAdmin/certificateIssuances")
export class EnterpriselmsOrganizationadminCertificateissuancesController {
  /**
   * Create a new certificate issuance record to document that a learner has
   * been awarded a specific certification.
   *
   * This operation accepts data required to record the issuance of a
   * certificate, including learner ID, certification ID, issue date, status,
   * expiration date, and optional business workflow status. The new record
   * links to the learner and certification entities within the Enterprise LMS
   * multi-tenant database.
   *
   * Proper validation ensures referenced learners and certifications exist, and
   * that the combination of learner and certification does not already have an
   * active issuance to prevent duplicates.
   *
   * This endpoint supports operational workflows for certification issuance
   * management and compliance tracking.
   *
   * Authorization requires elevated privileges such as systemAdmin or
   * organizationAdmin roles.
   *
   * On successful creation, the API returns the full certificate issuance
   * record with all details.
   *
   * @param connection
   * @param body Certificate issuance creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCertificateIssuance.ICreate,
  ): Promise<IEnterpriseLmsCertificateIssuance> {
    try {
      return await postenterpriseLmsOrganizationAdminCertificateIssuances({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated certificate issuance summaries.
   *
   * Retrieve a filtered and paginated list of certificate issuance records
   * within the enterprise LMS system. This enables administrators to review
   * certificate status, expiration, and related metadata.
   *
   * Only authorized organizationAdmin and systemAdmin roles can access these
   * records due to sensitive information.
   *
   * Supports filtering by learner, certification, status, and date ranges.
   * Pagination and sorting allow managing large datasets effectively.
   *
   * This operation supports compliance auditing and certification management
   * workflows.
   *
   * This search API complements other CRUD operations for certificate
   * issuances, focusing on read and query capabilities required by
   * administrators.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for certificate
   *   issuances
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchCertificateIssuances(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCertificateIssuance.IRequest,
  ): Promise<IPageIEnterpriseLmsCertificateIssuance.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminCertificateIssuances({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed certificate issuance information by ID.
   *
   * Retrieve a specific certificate issuance record by its unique identifier.
   *
   * This operation allows retrieving detailed information about a certificate
   * issued to a learner upon successful completion of a certification track or
   * course within the Enterprise LMS. The certificate issuance table tracks
   * issue dates, expiration dates, statuses, and business workflow states, and
   * is linked to learners and certifications in a multi-tenant context.
   *
   * Security considerations include enforcing tenant and user access controls
   * to ensure confidentiality of learner certification data. Only authorized
   * roles such as systemAdmin and organizationAdmin should access this
   * endpoint.
   *
   * This operation relates to the enterprise_lms_certificate_issuances table
   * and returns comprehensive certificate issuance data needed for compliance
   * reporting, learner dashboards, or audit trails.
   *
   * If the specified certificate issuance ID does not exist, the API will
   * return a 404 Not Found error.
   *
   * This operation is read-only and does not modify any data.
   *
   * @param connection
   * @param id Unique identifier of the certificate issuance record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCertificateIssuance> {
    try {
      return await getenterpriseLmsOrganizationAdminCertificateIssuancesId({
        organizationAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update certificate issuance record by ID.
   *
   * Update certificate issuance data for a given certificate issuance ID.
   *
   * This operation supports modification of certificate issuance details
   * including issue date, expiration date, status, and any business state
   * information. The update operation requires the certificate issuance ID as a
   * path parameter and the updated data in the request body.
   *
   * It performs validation to ensure the status value is one of the allowed
   * states, and that date fields are in valid ISO 8601 format. Authorization
   * roles such as systemAdmin and organizationAdmin are required for access.
   *
   * Partial updates are supported respecting the schema. Attempts to update
   * non-existent records will return a 404 error.
   *
   * This operation integrates with the enterprise_lms_certificate_issuances
   * table and plays a key role in managing learner certification lifecycle.
   *
   * @param connection
   * @param id Unique identifier of the certificate issuance record
   * @param body Certificate issuance update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCertificateIssuance.IUpdate,
  ): Promise<IEnterpriseLmsCertificateIssuance> {
    try {
      return await putenterpriseLmsOrganizationAdminCertificateIssuancesId({
        organizationAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete certificate issuance record by ID.
   *
   * Delete a specific certificate issuance record by ID.
   *
   * This operation permanently removes a certificate issuance record. It is
   * used for revoking or cleaning up certification data that is no longer valid
   * or required within the Enterprise LMS.
   *
   * Because the enterprise_lms_certificate_issuances table does not implement
   * soft delete fields, this action irreversibly removes the record from the
   * database.
   *
   * Proper authorization is required to prevent unauthorized data loss. System
   * admin and organization admin roles are permitted.
   *
   * If the record does not exist, a 404 Not Found error is returned.
   *
   * Clients should handle this deletion carefully due to its irreversible
   * nature.
   *
   * @param connection
   * @param id Unique identifier of the certificate issuance record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminCertificateIssuancesId({
        organizationAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
