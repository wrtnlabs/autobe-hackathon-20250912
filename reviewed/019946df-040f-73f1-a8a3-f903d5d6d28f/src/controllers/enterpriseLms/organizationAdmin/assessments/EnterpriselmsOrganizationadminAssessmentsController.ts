import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminAssessments } from "../../../../providers/postenterpriseLmsOrganizationAdminAssessments";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminAssessments } from "../../../../providers/patchenterpriseLmsOrganizationAdminAssessments";
import { getenterpriseLmsOrganizationAdminAssessmentsAssessmentId } from "../../../../providers/getenterpriseLmsOrganizationAdminAssessmentsAssessmentId";
import { putenterpriseLmsOrganizationAdminAssessmentsAssessmentId } from "../../../../providers/putenterpriseLmsOrganizationAdminAssessmentsAssessmentId";
import { deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentId";

import { IEnterpriseLmsAssessments } from "../../../../api/structures/IEnterpriseLmsAssessments";
import { IPageIEnterpriseLmsAssessments } from "../../../../api/structures/IPageIEnterpriseLmsAssessments";
import { IEnterpriseLmsAssessment } from "../../../../api/structures/IEnterpriseLmsAssessment";

@Controller("/enterpriseLms/organizationAdmin/assessments")
export class EnterpriselmsOrganizationadminAssessmentsController {
  /**
   * Create a new Enterprise LMS assessment record.
   *
   * Create a new assessment with detailed properties specifying code, title,
   * type, scoring criteria, schedule, and lifecycle status within the
   * Enterprise LMS.
   *
   * Only authorized roles such as systemAdmin, organizationAdmin, and
   * contentCreatorInstructor may perform this operation.
   *
   * This writes into the enterprise_lms_assessments table and returns the
   * created entity with system-generated UUID and timestamps.
   *
   * Clients can use this to add assessments for courses and training
   * management.
   *
   * @param connection
   * @param body Assessment creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAssessments.ICreate,
  ): Promise<IEnterpriseLmsAssessments> {
    try {
      return await postenterpriseLmsOrganizationAdminAssessments({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of Enterprise LMS assessments.
   *
   * Retrieve a filtered and paginated list of assessments from the Enterprise
   * LMS. The operation supports search by code, title, description, and
   * assessment type, as well as filtering by status and scheduled dates.
   * Pagination parameters allow for efficient browsing through the assessment
   * collection.
   *
   * Security considerations restrict access to authenticated users with roles
   * such as systemAdmin, organizationAdmin, or contentCreatorInstructor,
   * ensuring proper permission scopes are enforced.
   *
   * This operation interacts with the enterprise_lms_assessments database
   * table, referencing core fields including assessment codes, titles, types,
   * scoring criteria, schedule, and status. Clients can use this endpoint to
   * implement administrative dashboards or course management views.
   *
   * Related operations include GET /assessments/{assessmentId} for detail
   * retrieval and POST /assessments for assessment creation.
   *
   * Errors for invalid filters or unauthorized access will be returned with
   * suitable HTTP status codes and message bodies.
   *
   * @param connection
   * @param body Search and pagination parameters for filtering assessments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAssessments.IRequest,
  ): Promise<IPageIEnterpriseLmsAssessments> {
    try {
      return await patchenterpriseLmsOrganizationAdminAssessments({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific Enterprise LMS assessment by
   * ID.
   *
   * Retrieve comprehensive details of a specified assessment by its ID within
   * the Enterprise LMS. The response includes all properties such as codes,
   * titles, type, scoring details, schedule, and status.
   *
   * Security restrictions apply to ensure that only authorized roles including
   * systemAdmin, organizationAdmin, and contentCreatorInstructor can access
   * this data.
   *
   * This API operation corresponds to the enterprise_lms_assessments database
   * table.
   *
   * Clients may use this endpoint for detailed assessment views and editing
   * workflows.
   *
   * Error handling includes 404 Not Found for missing resources and 403
   * Forbidden for insufficient permissions.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":assessmentId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAssessments> {
    try {
      return await getenterpriseLmsOrganizationAdminAssessmentsAssessmentId({
        organizationAdmin,
        assessmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing assessment entity.
   *
   * Update an existing assessment identified by assessmentId within the
   * Enterprise LMS system. This operation allows modification of all mutable
   * properties of the assessment such as its code, title, description, type
   * (e.g., quiz, survey), scoring thresholds, scheduled times, and lifecycle
   * status. Tenant isolation ensures the assessment belongs to the tenant
   * context of the requester.
   *
   * Security requires that only authorized users with appropriate roles
   * (systemAdmin, organizationAdmin) can perform this update due to the impact
   * on learner assignments and reporting.
   *
   * The operation interacts with the enterprise_lms_assessments table in the
   * Prisma schema, respecting fields such as `code`, `title`, `status`, and
   * timestamps. Validation rules include ensuring the assessment's scheduled
   * dates are valid and consistent.
   *
   * Related entities like assessment questions and proctored exams need to
   * remain consistent with the updated assessment.
   *
   * If the assessment is soft deleted, the update should not be permitted.
   *
   * This operation does not return a response body; success is indicated by
   * HTTP 200 OK status.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment to update
   * @param body Data for updating the assessment entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":assessmentId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessment.IUpdate,
  ): Promise<void> {
    try {
      return await putenterpriseLmsOrganizationAdminAssessmentsAssessmentId({
        organizationAdmin,
        assessmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing assessment permanently.
   *
   * Permanently delete the specified assessment by its UUID.
   *
   * This operation performs a hard delete removing the assessment and all its
   * dependent data, including questions and results, from the database.
   *
   * Only users with systemAdmin or organizationAdmin roles are authorized to
   * perform this irreversible deletion.
   *
   * The assessment to delete is identified by the path parameter
   * `assessmentId`.
   *
   * No request body or response body is required.
   *
   * Once deleted, the data cannot be recovered.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":assessmentId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentId({
        organizationAdmin,
        assessmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
