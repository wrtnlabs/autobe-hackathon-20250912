import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams } from "../../../../../providers/postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams } from "../../../../../providers/patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams";
import { getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId } from "../../../../../providers/getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId";
import { putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId } from "../../../../../providers/putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId";
import { deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId";

import { IEnterpriseLmsProctoredExam } from "../../../../../api/structures/IEnterpriseLmsProctoredExam";
import { IPageIEnterpriseLmsProctoredExam } from "../../../../../api/structures/IPageIEnterpriseLmsProctoredExam";

@Controller(
  "/enterpriseLms/organizationAdmin/assessments/:assessmentId/proctoredExams",
)
export class EnterpriselmsOrganizationadminAssessmentsProctoredexamsController {
  /**
   * Create a new proctored exam session for a specific assessment.
   *
   * Create a new proctored exam session linked to a specific assessment. It
   * accepts all required details in the request body adhering to the defined
   * creation DTO. Upon success, it returns the created exam entity with
   * complete metadata.
   *
   * Access is restricted to users with authorized roles to ensure controlled
   * scheduling of proctored exam sessions.
   *
   * All relevant business validations and cascade constraints are handled
   * during creation.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Details required for creating a new proctored exam
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsProctoredExam.ICreate,
  ): Promise<IEnterpriseLmsProctoredExam> {
    try {
      return await postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams(
        {
          organizationAdmin,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of proctored exams for a given
   * assessment.
   *
   * This API operation allows clients to search and retrieve a paginated list
   * of proctored exam sessions related to the specified assessment. It supports
   * filtering, sorting, and pagination through a request body conforming to the
   * IRequest DTO. The endpoint ensures that only users with the proper roles
   * such as systemAdmin, organizationAdmin, departmentManager,
   * contentCreatorInstructor, corporateLearner, externalLearner, or guest can
   * access this information.
   *
   * The response includes a paginated collection of proctored exam sessions
   * providing detailed scheduling, proctor assignments, and status information.
   * This facilitates administrative oversight and management of proctored exams
   * within the LMS tenant context.
   *
   * Parameters include the assessmentId path parameter validated as a UUID
   * string. Request and response bodies use the proctored exam-related DTOs
   * prefixed with the service prefix EnterpriseLms for consistent API
   * modeling.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Search and pagination parameters for proctored exams filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsProctoredExam.IRequest,
  ): Promise<IPageIEnterpriseLmsProctoredExam> {
    try {
      return await patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExams(
        {
          organizationAdmin,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info of a proctored exam by ID for a given assessment.
   *
   * Retrieve detailed information about a specific proctored exam tied to a
   * particular assessment. This enables authorized users to view full metadata
   * of the exam session for management and monitoring.
   *
   * Both path parameters are strictly validated UUIDs to maintain data
   * integrity and ensure secure access within the appropriate tenant context.
   *
   * Response conforms to the IEnterpriseLmsProctoredExam DTO reflecting the
   * full entity schema.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param proctoredExamId Unique identifier of the target proctored exam
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":proctoredExamId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("proctoredExamId")
    proctoredExamId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsProctoredExam> {
    try {
      return await getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId(
        {
          organizationAdmin,
          assessmentId,
          proctoredExamId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing proctored exam session by ID for a specific assessment.
   *
   * Update an existing proctored exam session for a specified assessment. This
   * operation allows authorized users to modify scheduling, proctor details,
   * and status fields.
   *
   * Validation ensures that the assessmentId and proctoredExamId are valid
   * UUIDs and that the request body adheres to the update DTO schema.
   *
   * The updated proctored exam entity is returned reflecting all changes after
   * successful persistence.
   *
   * Security context restricts access to roles with appropriate permissions.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param proctoredExamId Unique identifier of the target proctored exam
   * @param body Updated data for the proctored exam session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":proctoredExamId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("proctoredExamId")
    proctoredExamId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsProctoredExam.IUpdate,
  ): Promise<IEnterpriseLmsProctoredExam> {
    try {
      return await putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId(
        {
          organizationAdmin,
          assessmentId,
          proctoredExamId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a proctored exam record by ID under a specific assessment.
   *
   * Deletes a proctored exam in the Enterprise LMS identified by
   * 'proctoredExamId' under the assessment with 'assessmentId'.
   *
   * The operation involves the 'enterprise_lms_proctored_exams' table which
   * stores proctored exam session metadata linked to assessments for monitoring
   * and compliance purposes.
   *
   * This is a hard delete operation which permanently removes the record from
   * the database.
   *
   * Only authorized users with appropriate system roles (e.g., systemAdmin,
   * organizationAdmin, departmentManager, contentCreatorInstructor) can invoke
   * this operation.
   *
   * No request body is required.
   *
   * Successful execution returns no response body.
   *
   * Errors for unauthorized access or non-existent resources should be handled
   * by the API.
   *
   * @param connection
   * @param assessmentId Unique UUID of the target assessment
   * @param proctoredExamId Unique UUID of the target proctored exam session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":proctoredExamId")
  public async eraseProctoredExam(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("proctoredExamId")
    proctoredExamId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdProctoredExamsProctoredExamId(
        {
          organizationAdmin,
          assessmentId,
          proctoredExamId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
