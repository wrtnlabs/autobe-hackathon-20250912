import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminCompetencies } from "../../../../providers/postenterpriseLmsOrganizationAdminCompetencies";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminCompetencies } from "../../../../providers/patchenterpriseLmsOrganizationAdminCompetencies";
import { getenterpriseLmsOrganizationAdminCompetenciesCompetencyId } from "../../../../providers/getenterpriseLmsOrganizationAdminCompetenciesCompetencyId";
import { putenterpriseLmsOrganizationAdminCompetenciesCompetencyId } from "../../../../providers/putenterpriseLmsOrganizationAdminCompetenciesCompetencyId";
import { deleteenterpriseLmsOrganizationAdminCompetenciesCompetencyId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminCompetenciesCompetencyId";

import { IEnterpriseLmsCompetencies } from "../../../../api/structures/IEnterpriseLmsCompetencies";
import { IPageIEnterpriseLmsCompetency } from "../../../../api/structures/IPageIEnterpriseLmsCompetency";
import { IEnterpriseLmsCompetency } from "../../../../api/structures/IEnterpriseLmsCompetency";

@Controller("/enterpriseLms/organizationAdmin/competencies")
export class EnterpriselmsOrganizationadminCompetenciesController {
  /**
   * Create a new competency.
   *
   * Create a new competency record with tenant ID, unique code, name, and
   * optional description.
   *
   * This operation requires authenticated user privileges with permission to
   * manage competencies within the specific tenant organization.
   *
   * The request body contains data validated against the creation DTO.
   *
   * On success, returns the full competency record including all metadata
   * timestamps.
   *
   * Errors are returned for data conflicts or validation failures.
   *
   * @param connection
   * @param body Creation data of the competency
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCompetencies.ICreate,
  ): Promise<IEnterpriseLmsCompetencies> {
    try {
      return await postenterpriseLmsOrganizationAdminCompetencies({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of competencies.
   *
   * Retrieve a filtered and paginated list of competencies defined in the
   * system. Users with organizationAdmin role can search competencies by code
   * or name, filter by status, and sort the results.
   *
   * Pagination parameters allow controlling page size and number.
   *
   * This operation queries the enterprise_lms_competencies table, returning
   * summary details adapted for efficient listing.
   *
   * Security is enforced by role-based access restricting to organizationAdmin
   * users only.
   *
   * @param connection
   * @param body Filter, search, and pagination parameters for competencies
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCompetencies(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCompetency.IRequest,
  ): Promise<IPageIEnterpriseLmsCompetency.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminCompetencies({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a competency by ID.
   *
   * Retrieve a competency by its unique identifier to view all associated
   * details.
   *
   * This read operation is intended for roles authorized to view competency
   * details within the tenant organization, such as organization admins or
   * system-level users.
   *
   * It queries the "enterprise_lms_competencies" table filtering by the primary
   * key "id".
   *
   * The response includes core properties such as tenant ID, code, name,
   * description, creation and update timestamps, and optionally deletion
   * timestamp if the record is soft deleted.
   *
   * The API returns HTTP 404 if the competency ID does not exist or is soft
   * deleted.
   *
   * This operation requires authentication and appropriate authorization that
   * aligns with tenant-level data security and role permissions.
   *
   * No request body is needed as it is a GET operation.
   *
   * @param connection
   * @param competencyId Unique identifier of the competency to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":competencyId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("competencyId")
    competencyId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCompetencies> {
    try {
      return await getenterpriseLmsOrganizationAdminCompetenciesCompetencyId({
        organizationAdmin,
        competencyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a competency by ID.
   *
   * Update a competency's details by its ID.
   *
   * Requires authenticated user with privileges to modify competencies within
   * the tenant.
   *
   * Request body determines the fields to update, validated against the update
   * DTO.
   *
   * Returns the updated competency on success. Errors if the competency does
   * not exist or if validation fails.
   *
   * Soft deletion status is not modifiable here.
   *
   * @param connection
   * @param competencyId Unique identifier of the competency to update.
   * @param body Data to update the competency
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":competencyId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("competencyId")
    competencyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCompetencies.IUpdate,
  ): Promise<IEnterpriseLmsCompetencies> {
    try {
      return await putenterpriseLmsOrganizationAdminCompetenciesCompetencyId({
        organizationAdmin,
        competencyId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a competency by ID.
   *
   * Soft delete a competency by setting its deleted_at timestamp.
   *
   * Requires authenticated user with delete permissions within the tenant.
   *
   * If the competency does not exist or is already deleted, returns appropriate
   * error codes.
   *
   * This operation does not physically remove the data but marks it as deleted.
   *
   * @param connection
   * @param competencyId Unique identifier of the competency to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":competencyId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("competencyId")
    competencyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminCompetenciesCompetencyId(
        {
          organizationAdmin,
          competencyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
