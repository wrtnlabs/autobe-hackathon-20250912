import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminCorporatelearners } from "../../../../providers/postenterpriseLmsOrganizationAdminCorporatelearners";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminCorporatelearners } from "../../../../providers/patchenterpriseLmsOrganizationAdminCorporatelearners";
import { getenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId } from "../../../../providers/getenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId";
import { putenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId } from "../../../../providers/putenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId";

import { IEnterpriseLmsCorporateLearner } from "../../../../api/structures/IEnterpriseLmsCorporateLearner";
import { IPageIEnterpriseLmsCorporatelearner } from "../../../../api/structures/IPageIEnterpriseLmsCorporatelearner";

@Controller("/enterpriseLms/organizationAdmin/corporatelearners")
export class EnterpriselmsOrganizationadminCorporatelearnersController {
  /**
   * Create a new corporate learner user account with necessary details
   * including email, password hash, first name, last name, and status.
   *
   * The operation performs validation on the input data according to the schema
   * and business rules.
   *
   * After successful creation, it returns the full corporate learner info
   * including newly assigned IDs and timestamps.
   *
   * This endpoint is restricted to roles authorized to create users within the
   * tenant.
   *
   * Request body must conform to the corporate learner creation schema.
   *
   * No path parameters are needed for creation.
   *
   * Proper authorization is required to maintain security and data integrity.
   *
   * @param connection
   * @param body Corporate learner user creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCorporatelearners(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.ICreate,
  ): Promise<IEnterpriseLmsCorporateLearner> {
    try {
      return await postenterpriseLmsOrganizationAdminCorporatelearners({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate corporate learner user accounts.
   *
   * Fetch a filtered and paginated list of corporate learners in the system.
   * This enables searching learners by multiple criteria including name, email,
   * status, and registration dates.
   *
   * The operation fully supports pagination parameters like page number and
   * page size, alongside sorting options on several fields.
   *
   * Security filtering ensures that only users with proper roles can view
   * learner details scoped to tenant and organizational permissions.
   *
   * This operation returns summary information optimized for client UI listings
   * and supports large data sets with efficient queries.
   *
   * Filtering and searching are done via the request body criteria defined in
   * the search DTO.
   *
   * No path parameters are required for this operation.
   *
   * Suitable for managing corporate learner accounts in an administrative user
   * interface.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for corporate
   *   learners
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCorporatelearners(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.IRequest,
  ): Promise<IPageIEnterpriseLmsCorporatelearner.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminCorporatelearners({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a corporate learner by ID.
   *
   * Retrieve detailed information for a single corporate learner identified by
   * the unique ID.
   *
   * Security checks ensure the requesting user has rights to view this data
   * within the tenant context.
   *
   * This operation returns a detailed resource representing the corporate
   * learner user.
   *
   * If the specified learner does not exist, a not found error will be raised.
   *
   * Path parameter exactly matches the corporatelearner ID.
   *
   * Authorized roles include organizationAdmin and systemAdmin.
   *
   * @param connection
   * @param corporatelearnerId Unique identifier of the corporate learner user
   *   to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":corporatelearnerId")
  public async atCorporatelearners(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("corporatelearnerId")
    corporatelearnerId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCorporateLearner> {
    try {
      return await getenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId(
        {
          organizationAdmin,
          corporatelearnerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update corporate learner information by ID.
   *
   * Update the detailed information of a corporate learner by their unique
   * identifier. This operation allows modification of all user-specific fields
   * including personal names, login email, hashed password, and account status.
   * It ensures tenant isolation by linking the learner to their organization.
   * All input fields are validated, and sensitive data like password hashes are
   * securely handled. The update preserves audit compliance by timestamping
   * changes.
   *
   * Users performing this operation should have administrative permissions
   * appropriate to modify learner data within tenant scope. Validation ensures
   * email uniqueness per tenant.
   *
   * Response includes the updated corporate learner entity with current
   * attributes. Errors occur if corporate learner ID does not exist or if
   * validation fails (e.g., duplicate email). This API enforces strict tenant
   * access control.
   *
   * @param connection
   * @param corporatelearnerId Unique identifier of the corporate learner
   * @param body Corporate learner update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":corporatelearnerId")
  public async updateCorporatelearner(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("corporatelearnerId")
    corporatelearnerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.IUpdate,
  ): Promise<IEnterpriseLmsCorporateLearner> {
    try {
      return await putenterpriseLmsOrganizationAdminCorporatelearnersCorporatelearnerId(
        {
          organizationAdmin,
          corporatelearnerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
