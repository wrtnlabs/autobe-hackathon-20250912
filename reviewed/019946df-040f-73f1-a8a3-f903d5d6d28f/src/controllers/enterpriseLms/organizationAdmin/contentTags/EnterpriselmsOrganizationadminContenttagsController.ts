import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminContentTags } from "../../../../providers/postenterpriseLmsOrganizationAdminContentTags";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminContentTags } from "../../../../providers/patchenterpriseLmsOrganizationAdminContentTags";
import { getenterpriseLmsOrganizationAdminContentTagsId } from "../../../../providers/getenterpriseLmsOrganizationAdminContentTagsId";

import { IEnterpriseLmsContentTag } from "../../../../api/structures/IEnterpriseLmsContentTag";
import { IPageIEnterpriseLmsContentTag } from "../../../../api/structures/IPageIEnterpriseLmsContentTag";

@Controller("/enterpriseLms/organizationAdmin/contentTags")
export class EnterpriselmsOrganizationadminContenttagsController {
  /**
   * Create a new content tag for content classification within the enterprise
   * LMS.
   *
   * Security: Only users with roles organizationAdmin,
   * contentCreatorInstructor, or systemAdmin can create tags.
   *
   * Relationships: Tags are tenant specific and bound to the organization.
   *
   * Validation: The code and name must be unique and valid within the tenant.
   *
   * Behavior: Persists the new tag and returns the created entity.
   *
   * Related APIs: List tags, get tag details, update tags.
   *
   * Errors: Returns 400 for validation failures or duplicate codes.
   *
   * @param connection
   * @param body Content tag creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createContentTag(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentTag.ICreate,
  ): Promise<IEnterpriseLmsContentTag> {
    try {
      return await postenterpriseLmsOrganizationAdminContentTags({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of content tags.
   *
   * Retrieve a paginated list of content tags used to classify content
   * materials. This list supports search, filtering, and sorting to enable
   * efficient content discovery and management.
   *
   * Security: Only users with roles organizationAdmin,
   * contentCreatorInstructor, or systemAdmin may access.
   *
   * Relationships: Tags are tenant specific, ensuring content classification
   * boundaries.
   *
   * Validation: The request body allows filtering by tag properties such as
   * code, name, and description.
   *
   * Behavior: Supports pagination and returns tag summaries for efficient
   * display.
   *
   * Related APIs: Get details of a specific tag, Create a new tag, Update an
   * existing tag.
   *
   * Errors: Returns 400 for invalid search parameters or pagination values.
   *
   * @param connection
   * @param body Filter and pagination parameters for content tags
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexContentTag(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentTag.IRequest,
  ): Promise<IPageIEnterpriseLmsContentTag.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminContentTags({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific content tag.
   *
   * Retrieve detailed information about a specific content tag by its unique
   * identifier.
   *
   * Security: Restricted to users with roles organizationAdmin,
   * contentCreatorInstructor, or systemAdmin.
   *
   * Relationships: The content tag is tenant isolated to ensure data security
   * and privacy.
   *
   * Validation: The tag ID must be a valid UUID.
   *
   * Behavior: Returns the full content tag entity details for display or
   * editing.
   *
   * Related APIs: List content tags, create new tags, update existing tags.
   *
   * Errors: Returns 404 if tag not found, 403 for unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the content tag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atContentTag(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentTag> {
    try {
      return await getenterpriseLmsOrganizationAdminContentTagsId({
        organizationAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
