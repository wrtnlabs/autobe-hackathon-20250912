import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminAnnouncements } from "../../../../providers/postenterpriseLmsOrganizationAdminAnnouncements";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminAnnouncements } from "../../../../providers/patchenterpriseLmsOrganizationAdminAnnouncements";
import { getenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId } from "../../../../providers/getenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId";
import { putenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId } from "../../../../providers/putenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId";
import { deleteenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId";

import { IEnterpriseLmsAnnouncement } from "../../../../api/structures/IEnterpriseLmsAnnouncement";
import { IPageIEnterpriseLmsAnnouncement } from "../../../../api/structures/IPageIEnterpriseLmsAnnouncement";

@Controller("/enterpriseLms/organizationAdmin/announcements")
export class EnterpriselmsOrganizationadminAnnouncementsController {
  /**
   * Create a new announcement in the tenant context.
   *
   * Create a new announcement record for a tenant organization. The
   * announcement must specify title, body content, target audience, and status.
   * The creator is recorded as the current organization administrator.
   *
   * This operation validates input fields and enforces status constraints such
   * as draft or sent. Tenant association is ensured through security context.
   *
   * Used in administrative portals to create announcement broadcasts to users
   * and departments. Errors are returned if validation fails or tenant context
   * is missing.
   *
   * @param connection
   * @param body Announcement creation payload with title, body, creator, and
   *   status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAnnouncement.ICreate,
  ): Promise<IEnterpriseLmsAnnouncement> {
    try {
      return await postenterpriseLmsOrganizationAdminAnnouncements({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of announcements.
   *
   * Retrieve a filtered and paginated list of announcements within the
   * enterprise LMS. This operation allows clients to query announcements
   * created by organization administrators scoped to their tenant organization.
   * It supports advanced filtering by title, body content, status, and target
   * audience description for precise retrieval.
   *
   * The API responds with paginated announcement summaries including ID, title,
   * status, and creation timestamp. Role-based access control ensures only
   * organization administrators, department managers, or users with appropriate
   * permissions can view announcements.
   *
   * Security includes enforcement of tenant data isolation to prevent
   * cross-tenant data leakage. Search parameters support partial matching and
   * sorting by creation date or title.
   *
   * Use this operation from administrative dashboards or management UIs to
   * display announcements lists and enable management workflows such as review
   * or status updates.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for announcements
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsAnnouncement.IRequest,
  ): Promise<IPageIEnterpriseLmsAnnouncement> {
    try {
      return await patchenterpriseLmsOrganizationAdminAnnouncements({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed announcement information by ID.
   *
   * Retrieve detailed information of a specific announcement identified by its
   * ID. This operation returns full announcement content, creator details
   * (organization administrator), and lifecycle information including status
   * and timestamps.
   *
   * Access is restricted to users within the same tenant organization with
   * appropriate roles such as organization administrator or department manager.
   * Tenant isolation and authorization checks ensure data security.
   *
   * This endpoint is essential for announcement management features such as
   * editing, review, or detailed display in the UI. It handles errors
   * gracefully when announcements are not found or deleted.
   *
   * @param connection
   * @param announcementId Unique identifier of the announcement
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":announcementId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("announcementId")
    announcementId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAnnouncement> {
    try {
      return await getenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId(
        {
          organizationAdmin,
          announcementId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing announcement by ID.
   *
   * Update an existing announcement identified by ID. Allows modifying title,
   * body, audience description, and status fields. Tenant scope enforcement
   * limits update to authorized organization administrators.
   *
   * The API validates input and checks announcement existence and status before
   * updating.
   *
   * Used by administrative tools to manage announcement lifecycle such as
   * sending or archiving announcements.
   *
   * Returns the updated announcement information.
   *
   * @param connection
   * @param announcementId Unique identifier of the announcement to update
   * @param body Announcement update payload with optional modified fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":announcementId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("announcementId")
    announcementId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAnnouncement.IUpdate,
  ): Promise<IEnterpriseLmsAnnouncement> {
    try {
      return await putenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId(
        {
          organizationAdmin,
          announcementId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific announcement by its ID.
   *
   * Deletes an existing announcement identified by its announcementId from the
   * enterprise LMS system.
   *
   * This operation targets the enterprise_lms_announcements table ensuring that
   * the announcement is permanently removed from the database. Any associated
   * data such as delivery receipts or related metadata is also deleted. Soft
   * deletion fields exist but this endpoint performs a full removal.
   *
   * Appropriate authentication and authorization are required to perform this
   * operation, generally limited to organization administrators.
   *
   * If the announcementId does not exist, an error is returned. This operation
   * has no response body for efficiency.
   *
   * @param connection
   * @param announcementId Unique identifier of the announcement to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":announcementId")
  public async eraseAnnouncement(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("announcementId")
    announcementId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminAnnouncementsAnnouncementId(
        {
          organizationAdmin,
          announcementId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
