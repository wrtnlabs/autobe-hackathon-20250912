import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminContentAccessControls } from "../../../../providers/postenterpriseLmsOrganizationAdminContentAccessControls";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminContentAccessControls } from "../../../../providers/patchenterpriseLmsOrganizationAdminContentAccessControls";
import { getenterpriseLmsOrganizationAdminContentAccessControlsId } from "../../../../providers/getenterpriseLmsOrganizationAdminContentAccessControlsId";
import { putenterpriseLmsOrganizationAdminContentAccessControlsId } from "../../../../providers/putenterpriseLmsOrganizationAdminContentAccessControlsId";

import { IEnterpriseLmsContentAccessControl } from "../../../../api/structures/IEnterpriseLmsContentAccessControl";
import { IPageIEnterpriseLmsContentAccessControl } from "../../../../api/structures/IPageIEnterpriseLmsContentAccessControl";

@Controller("/enterpriseLms/organizationAdmin/contentAccessControls")
export class EnterpriselmsOrganizationadminContentaccesscontrolsController {
  /**
   * Create a new content access control entry.
   *
   * This POST endpoint allows creation of a new content access control record,
   * defining specific access permissions at the content item level within a
   * tenant. It supports detailed role and learner assignments to tightly govern
   * content visibility and access in multi-tenant scenarios.
   *
   * The operation enforces validation of input parameters and checks for unique
   * constraints on content and tenant combinations.
   *
   * Proper authorization checks ensure only privileged users can assign access
   * controls.
   *
   * Upon success, the newly created access control record is returned with full
   * detail, enabling client applications to confirm creation and display the
   * configuration.
   *
   * @param connection
   * @param body Creation info of the content access control entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentAccessControl.ICreate,
  ): Promise<IEnterpriseLmsContentAccessControl> {
    try {
      return await postenterpriseLmsOrganizationAdminContentAccessControls({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of content access controls.
   *
   * This API endpoint enables retrieval of content access control entries with
   * sophisticated query capabilities. Clients can filter based on tenant
   * organization, specific content items, or role-based and learner-specific
   * permissions. The content access controls govern which roles or individual
   * learners have access to particular content items across tenant boundaries,
   * crucial for enforcing multi-tenant data security.
   *
   * The endpoint uses a PATCH method to accept complex request parameters
   * encapsulated in a request DTO, allowing for comprehensive search queries
   * including pagination and sorting options. By returning a paginated list of
   * access controls, the operation supports efficient client-side rendering and
   * management of access policies.
   *
   * Security measures ensure that only users with appropriate administrative
   * permissions can query access control entries. This avoids exposing
   * sensitive access rules to unauthorized users.
   *
   * The response contains summarized data optimized for list displays and
   * further exploration.
   *
   * Relationships to the underlying enterprise_lms_content_access_controls
   * table and connected tenant and content entities are honored, ensuring data
   * integrity and consistency.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for content access
   *   control filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentAccessControl.IRequest,
  ): Promise<IPageIEnterpriseLmsContentAccessControl.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminContentAccessControls({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific content access control by ID.
   *
   * This GET endpoint fetches a single content access control by unique
   * identifier. It returns detailed data including allowed roles, allowed
   * learner IDs, and metadata timestamps. This enables authorized users to
   * review or audit specific content access permissions.
   *
   * The operation strictly enforces data isolation and access control by tenant
   * context and user role, preventing unauthorized access to access control
   * configurations.
   *
   * It retrieves information directly from the
   * enterprise_lms_content_access_controls table, maintaining integrity and
   * consistency.
   *
   * @param connection
   * @param id Unique identifier of the content access control
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentAccessControl> {
    try {
      return await getenterpriseLmsOrganizationAdminContentAccessControlsId({
        organizationAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing content access control entry by ID.
   *
   * This PUT endpoint modifies an existing content access control entry
   * identified by ID. It enables updating role and learner permissions related
   * to specific content.
   *
   * The operation ensures strict authorization and validation before applying
   * changes to prevent unauthorized or conflicting updates.
   *
   * It integrates directly with the underlying
   * enterprise_lms_content_access_controls table and tenant context,
   * maintaining consistency.
   *
   * Returns the updated access control record for client verification.
   *
   * @param connection
   * @param id Unique identifier of the content access control to update
   * @param body Update info for the content access control entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentAccessControl.IUpdate,
  ): Promise<IEnterpriseLmsContentAccessControl> {
    try {
      return await putenterpriseLmsOrganizationAdminContentAccessControlsId({
        organizationAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
