import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows } from "../../../../../providers/postenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows } from "../../../../../providers/patchenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows";
import { getenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId } from "../../../../../providers/getenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId";
import { putenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId } from "../../../../../providers/putenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId";
import { deleteenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId";

import { IEnterpriseLmsContentApprovalWorkflow } from "../../../../../api/structures/IEnterpriseLmsContentApprovalWorkflow";
import { IPageIEnterpriseLmsContentApprovalWorkflow } from "../../../../../api/structures/IPageIEnterpriseLmsContentApprovalWorkflow";

@Controller(
  "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows",
)
export class EnterpriselmsOrganizationadminContentsContentapprovalworkflowsController {
  /**
   * Create a new content approval workflow step for specific content.
   *
   * Create a new content approval workflow step for a given content ID.
   *
   * This endpoint allows organization administrators to define new steps in the
   * content approval process, specifying reviewer roles and approval sequence.
   *
   * The operation inserts a new record into the
   * enterprise_lms_content_approval_workflows table with specified step
   * details.
   *
   * Validation of sequence order and reviewer roles should be handled by the
   * backend service layer to ensure workflow consistency.
   *
   * Returns the newly created approval workflow step details upon success.
   *
   * @param connection
   * @param contentId Unique identifier of the content to associate with the new
   *   approval workflow step
   * @param body Details for creating a new content approval workflow step
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentApprovalWorkflow.ICreate,
  ): Promise<IEnterpriseLmsContentApprovalWorkflow> {
    try {
      return await postenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows(
        {
          organizationAdmin,
          contentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve content approval workflow steps for a given content.
   *
   * Provides a paged view of content approval workflow steps linked to a
   * specified content entry. Users can query, filter, and paginate approval
   * steps, viewing step number, reviewer role, status, and comments per step.
   * This supports the content approval and compliance process. Tenant-based
   * access control applies.
   *
   * @param connection
   * @param contentId Unique identifier of the content for approval workflows
   * @param body Parameters for searching and paginating approval workflow steps
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentApprovalWorkflow.IRequest,
  ): Promise<IPageIEnterpriseLmsContentApprovalWorkflow.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflows(
        {
          organizationAdmin,
          contentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a content approval workflow step by content ID and step ID.
   *
   * Retrieve detailed information about a specific content approval workflow
   * step by content ID and approval workflow ID. This operation facilitates
   * tracking of the multi-stage content approval process within the Enterprise
   * LMS, allowing authorized users such as organization administrators to
   * review approval step statuses and comments.
   *
   * Security considerations mandate that only users with proper roles (e.g.,
   * organizationAdmin) associated with the tenant organization can access this
   * data.
   *
   * The operation accesses the enterprise_lms_content_approval_workflows table
   * and returns detailed information about the approval step, supporting audit
   * and content lifecycle management.
   *
   * This endpoint is critical for content governance and compliance within the
   * multi-tenant LMS environment.
   *
   * If the approval workflow step does not exist for the given contentId and
   * id, the endpoint should return a suitable 404 response.
   *
   * @param connection
   * @param contentId Unique identifier of the target content item
   * @param id Unique identifier of the content approval workflow step
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentApprovalWorkflow> {
    try {
      return await getenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId(
        {
          organizationAdmin,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a content approval workflow step by content ID and step ID.
   *
   * Update an existing content approval workflow step by content ID and
   * approval workflow step ID.
   *
   * Allows organization administrators to modify approval step details such as
   * status, comments, and reviewer role.
   *
   * The operation updates records in the
   * enterprise_lms_content_approval_workflows table associated with the
   * specified content and approval step.
   *
   * Proper validation and authorization ensure workflow correctness and
   * security.
   *
   * Returns the updated approval workflow step details.
   *
   * @param connection
   * @param contentId Unique identifier of the content item
   * @param id Unique identifier of the content approval workflow step
   * @param body Updated content approval workflow step details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentApprovalWorkflow.IUpdate,
  ): Promise<IEnterpriseLmsContentApprovalWorkflow> {
    try {
      return await putenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId(
        {
          organizationAdmin,
          contentId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a content approval workflow step (soft delete) by content ID and
   * step ID.
   *
   * Delete a content approval workflow step by content ID and approval workflow
   * step ID.
   *
   * Performs a soft delete by setting deleted_at timestamp rather than hard
   * deletion, enabling audit trail and recovery.
   *
   * Only users with organizationAdmin role can perform this operation.
   *
   * No response body is returned upon successful deletion.
   *
   * This endpoint is essential for maintaining clean and compliant content
   * approval workflows in the LMS.
   *
   * @param connection
   * @param contentId Unique identifier of the content item
   * @param id Unique identifier of the content approval workflow step to be
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminContentsContentIdContentApprovalWorkflowsId(
        {
          organizationAdmin,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
