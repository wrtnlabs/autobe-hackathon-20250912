import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchenterpriseLmsOrganizationAdminComplianceRecords } from "../../../../providers/patchenterpriseLmsOrganizationAdminComplianceRecords";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";

import { IPageIEnterpriseLmsComplianceRecords } from "../../../../api/structures/IPageIEnterpriseLmsComplianceRecords";
import { IEnterpriseLmsComplianceRecords } from "../../../../api/structures/IEnterpriseLmsComplianceRecords";

@Controller("/enterpriseLms/organizationAdmin/complianceRecords")
export class EnterpriselmsOrganizationadminCompliancerecordsController {
  /**
   * Search and retrieve compliance records with filtering and pagination.
   *
   * Retrieve a filtered, sorted, and paginated list of learner compliance
   * records. This operation supports querying by compliance type, status,
   * learner identifiers, and date ranges.
   *
   * Access is restricted to users with administrative privileges
   * ('organizationAdmin' role).
   *
   * The data source is the enterprise_lms_compliance_records table, which
   * tracks regulatory compliance status and audit records for learners.
   *
   * The request body parameters define search filters and pagination options,
   * while the response body includes a paginated summary list of compliance
   * records.
   *
   * Proper validation is enforced to ensure valid query criteria and consistent
   * pagination.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for compliance
   *   records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchComplianceRecords(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsComplianceRecords.IRequest,
  ): Promise<IPageIEnterpriseLmsComplianceRecords.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminComplianceRecords({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
