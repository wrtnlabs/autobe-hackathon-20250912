import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsOrganizationAdminExternallearners } from "../../../../providers/patchenterpriseLmsOrganizationAdminExternallearners";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { getenterpriseLmsOrganizationAdminExternallearnersExternallearnerId } from "../../../../providers/getenterpriseLmsOrganizationAdminExternallearnersExternallearnerId";

import { IPageIEnterpriseLmsExternallearner } from "../../../../api/structures/IPageIEnterpriseLmsExternallearner";
import { IEnterpriseLmsExternalLearner } from "../../../../api/structures/IEnterpriseLmsExternalLearner";

@Controller("/enterpriseLms/organizationAdmin/externallearners")
export class EnterpriselmsOrganizationadminExternallearnersController {
  /**
   * Search and retrieve external learner list.
   *
   * Retrieve filtered, paginated listing of external learners for tenant.
   * Supports filtering by email, status, tenant membership, and supports
   * sorting and pagination.
   *
   * Requires roles with administrative privileges. Returns summary info
   * optimized for list display.
   *
   * Validation errors occur on invalid pagination or malformed filters.
   *
   * Tenant boundaries always enforced.
   *
   * @param connection
   * @param body Search criteria and pagination for external learners
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexExternallearners(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsExternalLearner.IRequest,
  ): Promise<IPageIEnterpriseLmsExternallearner.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminExternallearners({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve external learner details by ID.
   *
   * Retrieve detailed external learner information by unique ID. Provides
   * profile attributes and status.
   *
   * Role-based access control ensures only authorized users may access tenant
   * data.
   *
   * Errors returned on non-existent ID or unauthorized access.
   *
   * @param connection
   * @param externallearnerId Unique identifier of the external learner
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externallearnerId")
  public async atExternallearner(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("externallearnerId")
    externallearnerId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsExternalLearner> {
    try {
      return await getenterpriseLmsOrganizationAdminExternallearnersExternallearnerId(
        {
          organizationAdmin,
          externallearnerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
