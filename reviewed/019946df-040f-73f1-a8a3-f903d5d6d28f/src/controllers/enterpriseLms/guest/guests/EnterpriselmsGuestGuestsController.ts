import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsGuestGuestsGuestId } from "../../../../providers/getenterpriseLmsGuestGuestsGuestId";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";
import { putenterpriseLmsGuestGuestsGuestId } from "../../../../providers/putenterpriseLmsGuestGuestsGuestId";
import { deleteenterpriseLmsGuestGuestsGuestId } from "../../../../providers/deleteenterpriseLmsGuestGuestsGuestId";
import { postenterpriseLmsGuestGuests } from "../../../../providers/postenterpriseLmsGuestGuests";

import { IEnterpriseLmsGuest } from "../../../../api/structures/IEnterpriseLmsGuest";

@Controller("/enterpriseLms/guest/guests")
export class EnterpriselmsGuestGuestsController {
  /**
   * Get a single guest user by ID.
   *
   * Retrieve detailed information about a specific guest user by their unique
   * identifier.
   *
   * This operation allows authorized users to fetch a single guest user record,
   * including email, first and last name, status, and associated tenant
   * organization. It adheres strictly to the tenant data isolation rules
   * defined in the Enterprise LMS multi-tenant architecture.
   *
   * Security restrictions apply to roles with appropriate permissions to access
   * guest user details.
   *
   * Path parameter guestId must be a valid UUID matching the target guest.
   *
   * If the guest user does not exist or is soft deleted, the operation returns
   * an appropriate error.
   *
   * No request body is required for this operation.
   *
   * The response returns the full guest user entity conforming to the
   * IEnterpriseLmsGuest interface.
   *
   * @param connection
   * @param guestId Unique identifier of the guest user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":guestId")
  public async at(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsGuest> {
    try {
      return await getenterpriseLmsGuestGuestsGuestId({
        guest,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update guest user by ID.
   *
   * Update an existing guest user identified by guestId with the provided data.
   *
   * Changes to email, name, password_hash, and status are permitted subject to
   * validation and authorization.
   *
   * The operation respects tenant data isolation and will fail if the guest
   * does not belong to the authorized tenant.
   *
   * Returns the updated guest user information upon success.
   *
   * @param connection
   * @param guestId Unique identifier of the guest user
   * @param body Updated guest user information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":guestId")
  public async update(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsGuest.IUpdate,
  ): Promise<IEnterpriseLmsGuest> {
    try {
      return await putenterpriseLmsGuestGuestsGuestId({
        guest,
        guestId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete guest user by ID.
   *
   * Delete a guest user by ID.
   *
   * This performs a soft delete, marking the guest record as deleted with a
   * timestamp.
   *
   * Only authorized users may perform this operation.
   *
   * The guestId must be a valid UUID of an existing guest user.
   *
   * No content is returned in the response.
   *
   * @param connection
   * @param guestId Unique identifier of the guest user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":guestId")
  public async erase(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsGuestGuestsGuestId({
        guest,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new guest user in the system.
   *
   * The request must include valid tenant_id, unique email, hashed password,
   * first and last names, and initial status.
   *
   * If any uniqueness or data integrity constraint fails, the operation will
   * return an error.
   *
   * The response includes the full guest user entity with system fields
   * populated such as id and timestamps.
   *
   * @param connection
   * @param body Information needed to create a guest user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IEnterpriseLmsGuest.ICreate,
  ): Promise<IEnterpriseLmsGuest> {
    try {
      return await postenterpriseLmsGuestGuests({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
