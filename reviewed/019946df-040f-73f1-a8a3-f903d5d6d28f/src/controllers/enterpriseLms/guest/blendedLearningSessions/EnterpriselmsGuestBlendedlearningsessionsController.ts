import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsGuestBlendedLearningSessions } from "../../../../providers/postenterpriseLmsGuestBlendedLearningSessions";
import { GuestAuth } from "../../../../decorators/GuestAuth";
import { GuestPayload } from "../../../../decorators/payload/GuestPayload";
import { patchenterpriseLmsGuestBlendedLearningSessions } from "../../../../providers/patchenterpriseLmsGuestBlendedLearningSessions";
import { getenterpriseLmsGuestBlendedLearningSessionsSessionId } from "../../../../providers/getenterpriseLmsGuestBlendedLearningSessionsSessionId";
import { putenterpriseLmsGuestBlendedLearningSessionsSessionId } from "../../../../providers/putenterpriseLmsGuestBlendedLearningSessionsSessionId";

import { IEnterpriseLmsBlendedLearningSession } from "../../../../api/structures/IEnterpriseLmsBlendedLearningSession";
import { IPageIEnterpriseLmsBlendedLearningSession } from "../../../../api/structures/IPageIEnterpriseLmsBlendedLearningSession";

@Controller("/enterpriseLms/guest/blendedLearningSessions")
export class EnterpriselmsGuestBlendedlearningsessionsController {
  /**
   * Create a new blended learning session specifying all required details such
   * as session type (online, offline, hybrid), title, description, status, and
   * schedule timestamps within tenant boundaries.
   *
   * The operation validates input data with strong schema and business rules
   * compliance, ensuring session uniqueness and proper status assignment.
   *
   * Authorization control restricts creation to authorized user roles.
   *
   * Created sessions may be updated or queried via associated operations for
   * full management lifecycle.
   *
   * @param connection
   * @param body Creation data for a new blended learning session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IEnterpriseLmsBlendedLearningSession.ICreate,
  ): Promise<IEnterpriseLmsBlendedLearningSession> {
    try {
      return await postenterpriseLmsGuestBlendedLearningSessions({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of blended learning
   * sessions.
   *
   * Retrieve a filtered and paginated list of blended learning sessions within
   * the tenant organizations. This operation provides advanced search
   * capabilities to find sessions based on criteria such as session type
   * (online, offline, hybrid), status (scheduled, completed, cancelled), and
   * scheduled time ranges.
   *
   * Security enforcement guarantees tenant data isolation so that users only
   * see sessions associated with their tenant. Access is granted only to users
   * authorized under roles such as systemAdmin, organizationAdmin,
   * departmentManager, contentCreatorInstructor, corporateLearner,
   * externalLearner, or guest.
   *
   * This operation operates on the 'enterprise_lms_blended_learning_sessions'
   * table from the Prisma schema, considering all tenant-relevant fields. The
   * response contains summarized session information optimized for listing
   * views, including session type, title, status, and schedule.
   *
   * Validation rules ensure proper format and adherence to business logic.
   * Related operations allow retrieval of session details, creation of new
   * sessions, and updating existing sessions for full lifecycle management.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for blended learning
   *   sessions filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IEnterpriseLmsBlendedLearningSession.IRequest,
  ): Promise<IPageIEnterpriseLmsBlendedLearningSession.ISummary> {
    try {
      return await patchenterpriseLmsGuestBlendedLearningSessions({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a blended learning session by its ID.
   *
   * Retrieve detailed information of a single blended learning session within
   * the tenant organization by specifying the session's unique identifier.
   *
   * This operation accesses the 'enterprise_lms_blended_learning_sessions'
   * table with enforced tenant data isolation and role-based authorization.
   *
   * The response includes fields such as session type (online, offline,
   * hybrid), title, description, scheduled start and end times, actual start
   * and end times, and current status.
   *
   * Input validation requires 'sessionId' path parameter to be a valid UUID.
   * Access restrictions apply according to user roles.
   *
   * Related operations include listing sessions, creating new sessions, and
   * updating existing sessions for comprehensive management.
   *
   * @param connection
   * @param sessionId Unique identifier of the blended learning session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsBlendedLearningSession> {
    try {
      return await getenterpriseLmsGuestBlendedLearningSessionsSessionId({
        guest,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing blended learning session by its ID.
   *
   * Update details of an existing blended learning session by specifying its
   * unique session ID and providing updated fields in the request body.
   *
   * This operation enforces strict tenant isolation and comprehensive
   * role-based access control for security.
   *
   * Validation ensures sessionId is a valid UUID and requested changes respect
   * lifecycle and scheduling rules.
   *
   * Related API operations enable session creation, detailed retrieval, and
   * listing for full session management.
   *
   * @param connection
   * @param sessionId Unique identifier of the blended learning session to
   *   update
   * @param body Update data for the blended learning session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sessionId")
  public async update(
    @GuestAuth()
    guest: GuestPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsBlendedLearningSession.IUpdate,
  ): Promise<IEnterpriseLmsBlendedLearningSession> {
    try {
      return await putenterpriseLmsGuestBlendedLearningSessionsSessionId({
        guest,
        sessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
