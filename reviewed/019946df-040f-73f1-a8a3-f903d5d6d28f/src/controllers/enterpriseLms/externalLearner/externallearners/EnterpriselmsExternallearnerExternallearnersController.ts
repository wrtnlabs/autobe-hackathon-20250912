import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia from "typia";
import { putenterpriseLmsExternalLearnerExternallearnersExternallearnerId } from "../../../../providers/putenterpriseLmsExternalLearnerExternallearnersExternallearnerId";
import { ExternallearnerAuth } from "../../../../decorators/ExternallearnerAuth";
import { ExternallearnerPayload } from "../../../../decorators/payload/ExternallearnerPayload";
import { deleteenterpriseLmsExternalLearnerExternallearnersExternallearnerId } from "../../../../providers/deleteenterpriseLmsExternalLearnerExternallearnersExternallearnerId";

import { IEnterpriseLmsExternalLearner } from "../../../../api/structures/IEnterpriseLmsExternalLearner";

@Controller(
  "/enterpriseLms/externalLearner/externallearners/:externallearnerId",
)
export class EnterpriselmsExternallearnerExternallearnersController {
  /**
   * Update an existing external learner account.
   *
   * Update details of a specific external learner account by ID. Supports
   * modification of email, password hash, first and last names, and status
   * fields.
   *
   * This operation requires the externallearnerId path parameter to identify
   * the target user. All updates must maintain data validation and integrity.
   *
   * Used for administration or user self-service profile updates within tenant
   * boundaries.
   *
   * @param connection
   * @param externallearnerId Unique identifier of the target external learner
   * @param body External learner update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("externallearnerId")
    externallearnerId: string,
    @TypedBody()
    body: IEnterpriseLmsExternalLearner.IUpdate,
  ): Promise<IEnterpriseLmsExternalLearner> {
    try {
      return await putenterpriseLmsExternalLearnerExternallearnersExternallearnerId(
        {
          externalLearner,
          externallearnerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an external learner account permanently.
   *
   * Permanently delete the external learner account identified by ID. This
   * operation irrevocably removes the user from the system.
   *
   * The path parameter externallearnerId specifies the target external learner.
   *
   * Use with caution as this operation cannot be undone.
   *
   * Requires appropriate authorization and authentication.
   *
   * @param connection
   * @param externallearnerId Unique identifier of the target external learner
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("externallearnerId")
    externallearnerId: string,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsExternalLearnerExternallearnersExternallearnerId(
        {
          externalLearner,
          externallearnerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
