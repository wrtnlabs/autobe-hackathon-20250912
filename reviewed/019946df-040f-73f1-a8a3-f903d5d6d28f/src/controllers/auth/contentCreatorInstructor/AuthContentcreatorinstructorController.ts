import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthContentCreatorInstructorJoin } from "../../../providers/postauthContentCreatorInstructorJoin";
import { ContentcreatorinstructorAuth } from "../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../decorators/payload/ContentcreatorinstructorPayload";
import { postauthContentCreatorInstructorLogin } from "../../../providers/postauthContentCreatorInstructorLogin";
import { postauthContentCreatorInstructorRefresh } from "../../../providers/postauthContentCreatorInstructorRefresh";

import { IEnterpriseLmsContentCreatorInstructor } from "../../../api/structures/IEnterpriseLmsContentCreatorInstructor";

@Controller("/auth/contentCreatorInstructor")
export class AuthContentcreatorinstructorController {
  /**
   * Create a new contentCreatorInstructor account and issue authorization
   * tokens.
   *
   * Registers a new Content Creator/Instructor account for the tenant
   * organization. Requires email, hashed password, and basic personal details
   * as per the enterprise_lms_contentcreatorinstructor schema. Upon success,
   * returns authorized tokens for immediate session start and secure access.
   *
   * The operation directly affects the enterprise_lms_contentcreatorinstructor
   * table in the database, creating a new user record linked to the tenant with
   * the provided details and default active status.
   *
   * Security measures include password hashing, input validation, and checks
   * against existing email to prevent duplicates.
   *
   * This operation is part of the member authentication flow allowing full
   * access to content creation features after registration.
   *
   * Post-registration, the user may use the login endpoint to authenticate in
   * subsequent sessions.
   *
   * @param connection
   * @param body Content Creator/Instructor join request payload
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.ICreate,
  ): Promise<IEnterpriseLmsContentCreatorInstructor.IAuthorized> {
    try {
      return await postauthContentCreatorInstructorJoin({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate contentCreatorInstructor and issue authorization tokens.
   *
   * Authenticate an existing Content Creator/Instructor using email and
   * password. Validates credentials against stored hashed password in
   * enterprise_lms_contentcreatorinstructor table.
   *
   * Upon successful login, returns JWT authorization tokens for session
   * management and secured API access.
   *
   * Security mechanisms involve hashing verification, protection against brute
   * force attacks, and audit logging.
   *
   * This endpoint forms the primary login method for contentCreatorInstructor
   * role users in the system.
   *
   * Users registering via the join endpoint will use this operation for
   * subsequent authentications.
   *
   * @param connection
   * @param body Content Creator/Instructor login request payload
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.ILogin,
  ): Promise<IEnterpriseLmsContentCreatorInstructor.IAuthorized> {
    try {
      return await postauthContentCreatorInstructorLogin({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh authorization token for contentCreatorInstructor.
   *
   * Renew JWT access tokens using a valid refresh token for
   * contentCreatorInstructor role. Keeps the session alive and secure without
   * reauthentication.
   *
   * Validates the refresh token's integrity, expiry, and association with the
   * user in enterprise_lms_contentcreatorinstructor.
   *
   * Returns new access and refresh tokens for continued access.
   *
   * This API is crucial for secure session management in multi-tenant
   * environments.
   *
   * Usage complements join and login endpoints in the complete authentication
   * framework.
   *
   * @param connection
   * @param body Token refresh request payload for contentCreatorInstructor
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.IRefresh,
  ): Promise<IEnterpriseLmsContentCreatorInstructor.IAuthorized> {
    try {
      return await postauthContentCreatorInstructorRefresh({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
