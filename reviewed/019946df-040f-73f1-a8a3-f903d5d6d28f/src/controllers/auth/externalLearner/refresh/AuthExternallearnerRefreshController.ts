import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthExternalLearnerRefresh } from "../../../../providers/postauthExternalLearnerRefresh";
import { ExternallearnerAuth } from "../../../../decorators/ExternallearnerAuth";
import { ExternallearnerPayload } from "../../../../decorators/payload/ExternallearnerPayload";

import { IEnterpriseLmsExternalLearner } from "../../../../api/structures/IEnterpriseLmsExternalLearner";

@Controller("/auth/externalLearner/refresh")
export class AuthExternallearnerRefreshController {
  /**
   * Refresh auth tokens for external learner guest user.
   *
   * Refresh tokens for an existing external learner session with a valid
   * refresh token to maintain seamless guest access.
   *
   * This operation checks the validity of the refresh token, the user's current
   * status, and role constraints before issuing new JWT access and refresh
   * tokens.
   *
   * It aligns with the externalLearner schema for security compliance and
   * ensures tokens reflect guest level access.
   *
   * Session management includes token expiry and revocation policies.
   *
   * It returns tokens compliant with EnterpriseLms external learner role
   * authorization scope.
   *
   * This operation is intended for authorized users only and will reject
   * invalid or expired tokens.
   *
   * @param connection
   * @param body Refresh token request payload with a valid refresh token
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshExternalLearner(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsExternalLearner.IRefresh,
  ): Promise<IEnterpriseLmsExternalLearner.IAuthorized> {
    try {
      return await postauthExternalLearnerRefresh({
        externalLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
