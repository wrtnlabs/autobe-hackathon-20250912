import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthOrganizationAdminJoin } from "../../../providers/postauthOrganizationAdminJoin";
import { postauthOrganizationAdminLogin } from "../../../providers/postauthOrganizationAdminLogin";
import { patchauthOrganizationAdminRefresh } from "../../../providers/patchauthOrganizationAdminRefresh";

import { IEnterpriseLmsOrganizationAdmin } from "../../../api/structures/IEnterpriseLmsOrganizationAdmin";

@Controller("/auth/organizationAdmin")
export class AuthOrganizationadminController {
  /**
   * Create new organizationAdmin user account and issue JWT authorization
   * tokens.
   *
   * This POST /auth/organizationAdmin/join API endpoint enables the creation of
   * a new organization administrator account within the Enterprise LMS tenant
   * organization. The system stores the administrator's unique email, securely
   * hashes their password, and records creation timestamps in the
   * enterprise_lms_organizationadmin table. Upon successful registration, the
   * system issues an authorized JWT token response
   * IEnterpriseLmsOrganizationAdmin.IAuthorized for immediate authenticated
   * access.
   *
   * This operation leverages the tenant_id foreign key for multi-tenant data
   * segregation ensuring the new admin belongs only to their tenant. It
   * validates the uniqueness of the email and enforces password security via
   * the password_hash schema.
   *
   * The operation is publicly accessible allowing new organization admin users
   * to join the system securely.
   *
   * This operation is critical for enabling complete organizational control for
   * admins including user management, role assignments, content approvals, and
   * billing management within their tenant environment.
   *
   * @param connection
   * @param body OrganizationAdmin account creation payload
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.ICreate,
  ): Promise<IEnterpriseLmsOrganizationAdmin.IAuthorized> {
    try {
      return await postauthOrganizationAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an organizationAdmin user and issue JWT tokens.
   *
   * The POST /auth/organizationAdmin/login API endpoint verifies organization
   * administrator user credentials within the Enterprise LMS. The system
   * compares the supplied email and password against the securely hashed
   * password stored in the enterprise_lms_organizationadmin table. Upon
   * successful validation, the system generates and returns JWT tokens
   * encapsulated in the IEnterpriseLmsOrganizationAdmin.IAuthorized response
   * type.
   *
   * This login operation enforces tenant isolation by validating the tenant ID
   * associated with the organization admin user. It denies access if the
   * account status is inactive or suspended.
   *
   * This API endpoint is publicly accessible for all organization admins to log
   * in.
   *
   * Successful execution grants authorized JWT token-based access to
   * organizational management features including user and role administration,
   * content approvals, and billing management.
   *
   * @param connection
   * @param body Credentials for organizationAdmin user login
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.ILogin,
  ): Promise<IEnterpriseLmsOrganizationAdmin.IAuthorized> {
    try {
      return await postauthOrganizationAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for organizationAdmin user.
   *
   * This PATCH /auth/organizationAdmin/refresh API operation renews JWT access
   * and refresh tokens for an authenticated organization administrator user.
   * The system validates the provided refresh token correlated with the
   * enterprise_lms_organizationadmin table, verifying tenant ownership and
   * active user status.
   *
   * Upon successful validation, the system issues new JWT tokens encapsulated
   * in the IEnterpriseLmsOrganizationAdmin.IAuthorized response type to
   * maintain seamless user sessions.
   *
   * This operation is secured and accessible only via valid refresh tokens.
   *
   * It is essential for long session management and secure authentication
   * lifecycle control.
   *
   * @param connection
   * @param body Refresh token payload for token renewal
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch("refresh")
  public async refresh(
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.IRefresh,
  ): Promise<IEnterpriseLmsOrganizationAdmin.IAuthorized> {
    try {
      return await patchauthOrganizationAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
