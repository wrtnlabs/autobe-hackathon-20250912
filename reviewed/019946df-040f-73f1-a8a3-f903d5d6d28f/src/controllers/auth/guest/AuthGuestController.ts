import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestJoin } from "../../../providers/postauthGuestJoin";
import { GuestAuth } from "../../../decorators/GuestAuth";
import { GuestPayload } from "../../../decorators/payload/GuestPayload";
import { postauthGuestRefresh } from "../../../providers/postauthGuestRefresh";

import { IEnterpriseLmsGuest } from "../../../api/structures/IEnterpriseLmsGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Create guest user account and issue temporary authorization tokens linked
   * to the enterprise_lms_guest table.
   *
   * This endpoint enables guest users to create a temporary account for
   * browsing public course catalogs within the LMS. Guest users are restricted
   * from enrollment and have limited permissions as per the 'guest' role type.
   * The system securely stores the email, hashed password, name, and status
   * fields from the 'enterprise_lms_guest' table. This operation issues JWT
   * tokens with restricted scopes appropriate for guest access, aiding in
   * anonymous analytics tracking without exposing sensitive privileges. Related
   * operations include token refresh to extend session validity.
   *
   * @param connection
   * @param body Guest user registration request body. Includes email, password,
   *   first and last name, and initial status.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IEnterpriseLmsGuest.ICreate,
  ): Promise<IEnterpriseLmsGuest.IAuthorized> {
    try {
      return await postauthGuestJoin({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for guest users using a valid refresh token, referencing
   * enterprise_lms_guest table.
   *
   * This endpoint refreshes access tokens for guest users, extending their
   * session with limited permissions as defined by the 'guest' role in the
   * 'enterprise_lms_guest' table. It requires submission of a valid refresh
   * token and returns refreshed JWT tokens encapsulating the guest's temporary
   * session. This supports continuous anonymous browsing and analytics tracking
   * without requiring login credentials. This operation is part of the guest
   * user authentication lifecycle, complementing the join registration.
   *
   * @param connection
   * @param body Guest token refresh request containing the refresh token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: IEnterpriseLmsGuest.IRefresh,
  ): Promise<IEnterpriseLmsGuest.IAuthorized> {
    try {
      return await postauthGuestRefresh({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
