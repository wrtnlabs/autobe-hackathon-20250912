import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDepartmentManagerJoin } from "../../../providers/postauthDepartmentManagerJoin";
import { DepartmentmanagerAuth } from "../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../decorators/payload/DepartmentmanagerPayload";
import { postauthDepartmentManagerRefresh } from "../../../providers/postauthDepartmentManagerRefresh";
import { postauthDepartmentManagerLogin } from "../../../providers/postauthDepartmentManagerLogin";

import { IEnterpriseLmsDepartmentManager } from "../../../api/structures/IEnterpriseLmsDepartmentManager";

@Controller("/auth/departmentManager")
export class AuthDepartmentmanagerController {
  /**
   * Create and authorize a new department manager user account according to
   * enterpriseLms schema.
   *
   * Registers a new department manager account for the tenant organization.
   * This operation stores the email, hashed password, name, and initializes the
   * account status. Upon successful creation, JWT tokens are issued to
   * authorize access. The department manager role represents users who manage
   * users and content within their departments, so this operation is
   * foundational for establishing authenticated department managers within a
   * multi-tenant system. The Prisma table 'enterprise_lms_departmentmanager' is
   * used to store user records including 'email', 'password_hash',
   * 'first_name', 'last_name', and status tracking with 'status'. This endpoint
   * is public and requires no prior authentication.
   *
   * @param connection
   * @param body Department Manager account creation request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsDepartmentManager.ICreate,
  ): Promise<IEnterpriseLmsDepartmentManager.IAuthorized> {
    try {
      return await postauthDepartmentManagerJoin({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh authentication tokens for department manager.
   *
   * Refreshes the authentication tokens for a logged-in department manager to
   * maintain session validity and authorization. Utilizes the
   * 'enterprise_lms_sessions' table to verify and renew the session, issuing
   * new JWT tokens accordingly. Ensures continued secure access without
   * requiring re-login for token expiration. This operation is part of the
   * standard authentication lifecycle for member-kind users and is scoped to
   * the 'departmentManager' role and tenant. It enhances security by enforcing
   * strict session management and token refresh.
   *
   * @param connection
   * @param body Token refresh request with valid refresh token
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsDepartmentManager.IRefresh,
  ): Promise<IEnterpriseLmsDepartmentManager.IAuthorized> {
    try {
      return await postauthDepartmentManagerRefresh({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate department manager user and issue JWT tokens.
   *
   * Authenticates an existing department manager user via email and password.
   * Returns JWT tokens upon successful credential verification. This operation
   * accesses the 'enterprise_lms_departmentmanager' table to validate
   * credentials securely with hashed passwords in 'password_hash'. It is public
   * and intended for users classified as member-kind for the departmentManager
   * role. Ensures secure session creation and authorization token management
   * following successful login.
   *
   * @param connection
   * @param body Login request containing department manager credentials
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsDepartmentManager.ILogin,
  ): Promise<IEnterpriseLmsDepartmentManager.IAuthorized> {
    try {
      return await postauthDepartmentManagerLogin({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
