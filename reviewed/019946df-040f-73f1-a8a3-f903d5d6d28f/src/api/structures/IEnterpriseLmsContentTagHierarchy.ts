import { tags } from "typia";

/**
 * Represents the hierarchical relationship linking parent and child content
 * tags within the enterprise learning management system.
 *
 * Maintains data integrity by capturing explicit foreign key references to the
 * parent and child tags.
 *
 * Supports querying hierarchies for content classification and enables
 * fine-grained content organization.
 *
 * Essential part of complex content taxonomies ensuring data isolation and
 * integrity within multi-tenant environments.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsContentTagHierarchy = {
  /** Unique identifier of the content tag hierarchy relationship */
  id: string & tags.Format<"uuid">;

  /** The identifier of the parent tag in this hierarchical relationship */
  parent_tag_id: string & tags.Format<"uuid">;

  /** The identifier of the child tag in this hierarchical relationship */
  child_tag_id: string & tags.Format<"uuid">;

  /** Timestamp indicating when this parent-child tag relation was created */
  created_at: string & tags.Format<"date-time">;
};
export namespace IEnterpriseLmsContentTagHierarchy {
  /**
   * Input payload for creating a content tag hierarchy relationship.
   *
   * It requires parent and child tag identifiers as UUIDs establishing the
   * hierarchical link between tags.
   *
   * This creation operation is essential for managing content taxonomy
   * relationships and enforces consistency by ensuring referenced tag IDs
   * exist within the tenant scope.
   */
  export type ICreate = {
    /**
     * Unique identifier referencing the parent tag to associate this
     * hierarchy with
     */
    parent_tag_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier referencing the child tag to associate as
     * subordinate to the parent tag
     */
    child_tag_id: string & tags.Format<"uuid">;
  };

  /**
   * Input schema for updating a content tag hierarchy relationship.
   *
   * Allows optional reassignment or removal of parent or child tag references
   * within the hierarchical tag taxonomy.
   *
   * Nullable fields permit flexibility in managing tag hierarchy adjustments
   * without full replacement.
   */
  export type IUpdate = {
    /**
     * Optional update of the parent tag reference; can be null to remove
     * relationship
     */
    parent_tag_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional update of the child tag reference; can be null to remove
     * relationship
     */
    child_tag_id?: (string & tags.Format<"uuid">) | null | undefined;
  };
}
