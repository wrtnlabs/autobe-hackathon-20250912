import { tags } from "typia";

/**
 * Certification entity representing a certification program within a tenant
 * organization.
 *
 * Includes unique identifiers, metadata, lifecycle status, and timestamps.
 *
 * Supports soft deletion through the deleted_at timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsCertification = {
  /** Unique identifier of the certification record */
  id: string & tags.Format<"uuid">;

  /** Tenant organization this certification belongs to. */
  tenant_id: string & tags.Format<"uuid">;

  /**
   * Unique code for this certification within the tenant.
   *
   * This code is used for identification and lookup of certification
   * programs.
   */
  code: string;

  /**
   * Name of the certification program.
   *
   * Human-readable name suitable for display.
   */
  name: string;

  /**
   * Detailed description about the certification program.
   *
   * Optional multi-paragraph text providing the purpose, coverage, and
   * details of the certification program.
   */
  description?: string | null | undefined;

  /**
   * Lifecycle status of the certification (e.g., active, deprecated,
   * retired).
   *
   * Indicates whether the certification is currently valid for enrollment and
   * issuance.
   */
  status: string;

  /**
   * Timestamp this certification record was created.
   *
   * ISO 8601 date-time string with timezone.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp this certification record was last updated.
   *
   * ISO 8601 date-time string with timezone.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp.
   *
   * When set, indicates this certification record is deleted/archived. Null
   * means active record.
   */
  deleted_at?: string | null | undefined;
};
export namespace IEnterpriseLmsCertification {
  /**
   * Request type for searching certifications with filters and pagination.
   *
   * Contains optional fields for filtering by code, name, and status, as well
   * as search keywords, with pagination and sorting support.
   */
  export type IRequest = {
    /**
     * Filter by certification code (exact or partial match).
     *
     * This field can be used to limit results to certifications matching
     * the specified code criteria.
     */
    code?: string | null | undefined;

    /**
     * Filter by certification name (partial or exact match).
     *
     * Allows clients to search certifications by their display names,
     * enabling flexible lookup.
     */
    name?: string | null | undefined;

    /**
     * Status filter (active, deprecated, retired).
     *
     * Filters certifications by their lifecycle status to distinguish
     * available or deprecated programs.
     */
    status?: string | null | undefined;

    /**
     * Search keywords for description or other text fields.
     *
     * Enables fuzzy text searching over certification descriptions or
     * related text properties.
     */
    search?: string | null | undefined;

    /**
     * Pagination: requested page number (positive integer).
     *
     * The numerical request for pagination, typically starting from 1.
     */
    page?: number | null | undefined;

    /**
     * Pagination: number of records per page (positive integer).
     *
     * Controls the maximum number of records returned per page.
     */
    limit?: number | null | undefined;

    /**
     * Sorting fields - comma separated list e.g. "name asc, created_at
     * desc".
     *
     * Determines the sort order of returned certification records.
     */
    orderBy?: string | null | undefined;
  };

  /**
   * Payload for creating a new certification record.
   *
   * Includes essential identification fields and metadata for establishing a
   * certification program within a tenant organization.
   */
  export type ICreate = {
    /**
     * Tenant organization this certification belongs to.
     *
     * Must be a valid UUID identifying the tenant.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Unique code for this certification within the tenant.
     *
     * Must be unique to prevent duplication.
     */
    code: string;

    /**
     * Name of the certification program.
     *
     * Human-readable name used for display.
     */
    name: string;

    /**
     * Optional description providing details about the certification.
     *
     * Multi-paragraph text is supported.
     */
    description?: string | null | undefined;

    /**
     * Lifecycle status (e.g., active, deprecated, retired)
     *
     * Indicates availability and validity.
     */
    status: string;
  };

  /**
   * Payload for updating an existing certification record.
   *
   * Supports partial updates for modifiable fields while maintaining data
   * integrity and business rules.
   */
  export type IUpdate = {
    /**
     * Unique code for this certification within the tenant.
     *
     * May only be updated if allowed by business rules.
     */
    code?: string | undefined;

    /** Name of the certification program. */
    name?: string | undefined;

    /** Optional description of the certification. */
    description?: string | null | undefined;

    /** Lifecycle status. */
    status?: string | undefined;

    /**
     * Soft deletion timestamp.
     *
     * Use explicit null to unset.
     */
    deleted_at?: string | null | undefined;
  };

  /**
   * Summary information representing a certification program with core
   * attributes and status.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /** Unique code for this certification within the tenant. */
    code: string;

    /** Name of the certification program. */
    name: string;

    /**
     * Lifecycle status of the certification (e.g., active, deprecated,
     * retired).
     */
    status: string;
  };
}
