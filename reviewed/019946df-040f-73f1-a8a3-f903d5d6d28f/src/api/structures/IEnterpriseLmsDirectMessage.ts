import { tags } from "typia";

/**
 * Direct message entity representing private messages exchanged between users.
 *
 * Includes sender, recipient, content, timestamps, and soft deletion.
 *
 * Ensures tenant-level data isolation and secure communication.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsDirectMessage = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Tenant owning the message. */
  tenant_id: string & tags.Format<"uuid">;

  /** User who sent the message (any user role). */
  sender_id: string & tags.Format<"uuid">;

  /** Message recipient user. */
  recipient_id: string & tags.Format<"uuid">;

  /** Message content. */
  body: string;

  /** Timestamp when message was sent. */
  sent_at: string & tags.Format<"date-time">;

  /** Timestamp when message was read. */
  read_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsDirectMessage {
  /**
   * Request parameters for searching and filtering direct messages.
   *
   * Supports filtering by sender, recipient, message content, sent time
   * range.
   *
   * Includes pagination parameters to control the size and page of results.
   */
  export type IRequest = {
    /** Tenant owning the message. */
    tenant_id?: (string & tags.Format<"uuid">) | undefined;

    /** User who sent the message (any user role). */
    sender_id?: (string & tags.Format<"uuid">) | undefined;

    /** Message recipient user. */
    recipient_id?: (string & tags.Format<"uuid">) | undefined;

    /** Message content. */
    body?: string | undefined;

    /** Timestamp when message was sent. */
    sent_at_start?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when message was sent. */
    sent_at_end?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination page number. */
    page?: number | null | undefined;

    /** Pagination limit per page. */
    limit?: number | null | undefined;
  };

  /**
   * Payload to create a new direct message entity.
   *
   * Includes tenant, sender, recipient, content, and sent timestamp.
   */
  export type ICreate = {
    /** Tenant owning the message. */
    tenant_id: string & tags.Format<"uuid">;

    /** User who sent the message (any user role). */
    sender_id: string & tags.Format<"uuid">;

    /** Message recipient user. */
    recipient_id: string & tags.Format<"uuid">;

    /** Message content. */
    body: string;

    /** Timestamp when message was sent. */
    sent_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for updating a direct message. Represents modifiable fields
   * including message body and read timestamp.
   */
  export type IUpdate = {
    /**
     * Content body of the message. Allows updating the text of the direct
     * message.
     */
    body: string;

    /**
     * Timestamp when the message was read. Nullable to unset the read
     * status.
     */
    read_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Soft deletion timestamp. Nullable to unset deletion. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * A summarized direct message entity capturing essential communication data
   * in the Enterprise LMS.
   */
  export type ISummary = {
    /** Unique identifier of the direct message summary. */
    id: string & tags.Format<"uuid">;

    /** Tenant organization owning this message, ensuring multi-tenancy. */
    tenant_id: string & tags.Format<"uuid">;

    /** User ID of the message sender. */
    sender_id: string & tags.Format<"uuid">;

    /** User ID of the message recipient. */
    recipient_id: string & tags.Format<"uuid">;

    /** Content of the private direct message. */
    body: string;

    /** Timestamp when the message was sent. */
    sent_at: string & tags.Format<"date-time">;

    /** Optional timestamp when the message was read. */
    read_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
