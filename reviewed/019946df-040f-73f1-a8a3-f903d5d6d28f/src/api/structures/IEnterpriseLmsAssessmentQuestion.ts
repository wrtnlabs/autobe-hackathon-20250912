import { tags } from "typia";

/**
 * Assessment question entity. Represents individual questions belonging to
 * assessments, supporting different question types and text content. It relates
 * to the parent assessment and can support question weighting and scoring.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsAssessmentQuestion = {
  /**
   * Primary Key. Represents the unique identifier for each assessment
   * question within the system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent assessment reference. Reference to the assessment to which this
   * question belongs. This association ensures the question is part of a
   * defined assessment.
   */
  assessment_id: string & tags.Format<"uuid">;

  /**
   * Text content of the question for display to learners. This is the actual
   * question posed to learners during assessments.
   */
  question_text: string;

  /**
   * Type of question such as multiple choice, true/false, essay, practical.
   * Determines the format and response type expected for the question.
   */
  question_type: string;

  /**
   * Weight or points this question contributes to total assessment score.
   * Floating-point number indicating the question's score weight.
   */
  weight: number;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp, null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsAssessmentQuestion {
  /**
   * Request body for searching and filtering assessment questions with
   * pagination.
   */
  export type IRequest = {
    /**
     * Page number. Used for paginating search results, defaults to the
     * first page if omitted.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Limitation of records per a page. Defines how many questions will be
     * returned in a single paginated response. Defaults to 100.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Optional search keyword for question text. Enables filtering
     * questions by matching this keyword within their text content.
     */
    search?: string | null | undefined;

    /**
     * Optional filter by question type. Filters questions that match the
     * specified question type string exactly.
     */
    question_type?: string | null | undefined;

    /**
     * Optional filter by assessment ID. Limits questions to those
     * associated with a specific assessment UUID.
     */
    assessment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional sorting parameters. Defines the ordering of returned
     * questions, e.g., by creation date.
     */
    sort?: string | null | undefined;
  };

  /** Request body for creating a new assessment question. */
  export type ICreate = {
    /** Parent assessment reference. MUST be a valid UUID. */
    assessment_id: string & tags.Format<"uuid">;

    /** Text content of the question. */
    question_text: string;

    /**
     * Question type: e.g., 'multiple choice', 'true/false', 'essay',
     * 'practical'.
     */
    question_type: string;

    /** Weight of the question contributing to the total score. */
    weight: number;
  };

  /**
   * Request body for updating an existing assessment question. All fields
   * optional.
   */
  export type IUpdate = {
    /** Parent assessment reference. UUID. */
    assessment_id?: (string & tags.Format<"uuid">) | undefined;

    /** Text content of the question. */
    question_text?: string | undefined;

    /**
     * Question type: e.g., 'multiple choice', 'true/false', 'essay',
     * 'practical'.
     */
    question_type?: string | undefined;

    /** Weight of the question contributing to the total score. */
    weight?: number | undefined;
  };

  /**
   * Summary of an assessment question entity.
   *
   * Includes essential identifying and question text to show brief views.
   */
  export type ISummary = {
    /** Primary key for assessment question entity. */
    id: string & tags.Format<"uuid">;

    /** The question being asked within the assessment. */
    question_text: string;

    /** Denotes the question format such as multiple choice, true/false. */
    question_type: string;
  };
}
