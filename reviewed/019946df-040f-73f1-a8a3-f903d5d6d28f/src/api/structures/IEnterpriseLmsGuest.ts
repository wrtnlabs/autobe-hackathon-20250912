import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Guest users with browse-only access to public course catalogs. Limited
 * permissions, tenant-aware for data isolation. No enrollment or creation
 * rights.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsGuest = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Tenant organization identifier. */
  tenant_id: string & tags.Format<"uuid">;

  /** Unique email address for identification and communication. */
  email: string;

  /** Hashed password for guest authentication. */
  password_hash: string;

  /** First name of the guest user. */
  first_name: string;

  /** Last name of the guest user. */
  last_name: string;

  /** Current status of the guest account (e.g., active, suspended). */
  status: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Optional soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsGuest {
  /**
   * Create request interface. Represents the information required to create a
   * new guest user account.
   */
  export type ICreate = {
    /**
     * Tenant organization ID the guest is associated with. Must be a UUID
     * string.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Unique email for guest user identification. Must be valid email
     * format.
     */
    email: string & tags.Format<"email">;

    /** Hashed password for guest authentication. Must be stored securely. */
    password_hash: string;

    /** First name of the guest user. */
    first_name: string;

    /** Last name of the guest user. */
    last_name: string;

    /**
     * Status of the guest user account, e.g., 'active', 'suspended'. Should
     * match allowed states in the system.
     */
    status: string;
  };

  /**
   * Authorization response containing JWT access and refresh tokens for an
   * authenticated guest user.
   *
   * This response is used for managing authenticated sessions for guest user
   * roles in the Enterprise LMS platform.
   *
   * It excludes sensitive data like password hashes and includes only public
   * user info and token data.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated guest user */
    id: string & tags.Format<"uuid">;

    /** Tenant organization identifier. */
    tenant_id: string & tags.Format<"uuid">;

    /** Guest user's email address */
    email: string;

    /** Hashed password for guest authentication. */
    password_hash: string;

    /** First name of the guest user */
    first_name: string;

    /** Last name of the guest user */
    last_name: string;

    /** Current status of the guest account */
    status: string;

    /** Timestamp when the guest user account was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the guest user account was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Optional soft delete timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token for authentication */
    access_token?: string | undefined;

    /** JWT refresh token for renewing authentication */
    refresh_token?: string | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for refreshing JWT tokens for guest users in Enterprise
   * LMS.
   */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens */
    refresh_token: string;
  };

  /**
   * Request parameters for paginated filtered search of guest users.
   *
   * Supports optional pagination, filtering by search term, sort order, and
   * status.
   *
   * Allows clients to retrieve guest listings with flexible query options.
   */
  export type IRequest = {
    /** Optional page number for pagination. Positive integer, default is 1. */
    page?: number | null | undefined;

    /** Optional limit of items per page. Positive integer, default is 100. */
    limit?: number | null | undefined;

    /** Optional search string to filter guests by email or name. */
    search?: string | null | undefined;

    /** Optional sort order string. Format: "field ASC" or "field DESC". */
    sort?: string | null | undefined;

    /** Optional filter by status. */
    status?: string | null | undefined;
  };

  /**
   * Update guest user by ID.
   *
   * Allow modification of email address, password hash, first name, last
   * name, account status, and soft deletion timestamp.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace Actors
   */
  export type IUpdate = {
    /** Unique email address for identification and communication. */
    email?: string | undefined;

    /** Hashed password for guest authentication. */
    password_hash?: string | undefined;

    /** First name of the guest user. */
    first_name?: string | undefined;

    /** Last name of the guest user. */
    last_name?: string | undefined;

    /** Current status of the guest account (e.g., active, suspended). */
    status?: string | undefined;

    /** Optional soft delete timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary for Guest user, providing essential identifying information for
   * list views.
   */
  export type ISummary = {
    /** Unique identifier of the guest user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the guest user. */
    email: string;

    /** First name of the guest user. */
    first_name: string;

    /** Last name of the guest user. */
    last_name: string;

    /** Current status of the guest user (e.g., 'active', 'suspended'). */
    status: string;
  };
}
