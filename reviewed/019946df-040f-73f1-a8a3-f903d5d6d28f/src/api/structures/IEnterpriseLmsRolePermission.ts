import { tags } from "typia";

/**
 * Role permission entity defining access rights for system roles in the
 * Enterprise LMS. Specifies permission keys, grant flags, and descriptions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsRolePermission = {
  /** Unique ID of the role permission entry */
  id: string & tags.Format<"uuid">;

  /** ID of the system role this permission belongs to */
  role_id: string & tags.Format<"uuid">;

  /** Permission key string identifying the access right */
  permission_key: string;

  /** Optional human-readable description of the permission */
  description?: string | null | undefined;

  /** True if permission is granted, false if denied */
  is_allowed: boolean;

  /** Record creation timestamp in ISO 8601 format */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp in ISO 8601 format */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEnterpriseLmsRolePermission {
  /**
   * Role permission creation payload. Contains required role ID, permission
   * key, and grant flag. Description is optional.
   */
  export type ICreate = {
    /** ID of the system role this permission belongs to */
    role_id: string & tags.Format<"uuid">;

    /** Permission key string identifying the access right */
    permission_key: string;

    /** Optional human-readable description of the permission */
    description?: string | null | undefined;

    /** True if permission is granted, false if denied */
    is_allowed: boolean;
  };

  /**
   * Role permission update payload. Supports partial updates allowing
   * modification of any property.
   */
  export type IUpdate = {
    /** ID of the system role this permission belongs to */
    role_id?: (string & tags.Format<"uuid">) | undefined;

    /** Permission key string identifying the access right */
    permission_key?: string | undefined;

    /** Optional human-readable description of the permission */
    description?: string | null | undefined;

    /** True if permission is granted, false if denied */
    is_allowed?: boolean | undefined;
  };
}
