import { tags } from "typia";

/**
 * Records of payment processing transactions related to course purchases,
 * subscriptions, and certifications within the Enterprise LMS. This model
 * captures details including transaction amounts, currencies, methods,
 * statuses, timestamps, and relevant references to external payment gateways
 * and users. It supports auditing and financial reconciliation workflows,
 * ensuring traceability and regulatory compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsPaymentTransaction = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Tenant organization owning this transaction. Reference to
   * enterprise_lms_tenants.id.
   */
  tenant_id: string & tags.Format<"uuid">;

  /**
   * User who performed or authorized this transaction. Reference to
   * enterprise_lms_corporatelearner.id.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Unique code identifying this payment transaction for tracking and
   * reconciliation.
   */
  transaction_code: string;

  /** Transaction amount in the specified currency. */
  amount: number;

  /** ISO 4217 currency code for the transaction, e.g., USD, EUR. */
  currency: string;

  /** Method used for payment, such as credit card, PayPal, bank transfer. */
  payment_method: string;

  /** Current status of the transaction, e.g., pending, completed, failed. */
  status: string;

  /** Reference code from the payment gateway or processor. */
  gateway_reference?: string | null | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp indicating logical deletion. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsPaymentTransaction {
  /**
   * Payment transaction request filtering DTO for search pagination and
   * filtering.
   */
  export type IRequest = {
    /** Page number. */
    page?: number | null | undefined;

    /** Limitation of records per a page. */
    limit?: number | null | undefined;

    /** Tenant organization owning this transaction. */
    tenant_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** User who performed or authorized this transaction. */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique code identifying this payment transaction for tracking and
     * reconciliation.
     */
    transaction_code?: string | null | undefined;

    /** Minimum amount filter for transactions. */
    amount_min?: number | null | undefined;

    /** Maximum amount filter for transactions. */
    amount_max?: number | null | undefined;

    /** ISO 4217 currency code for the transaction, e.g., USD, EUR. */
    currency?: string | null | undefined;

    /** Method used for payment, such as credit card, PayPal, bank transfer. */
    payment_method?: string | null | undefined;

    /** Current status of the transaction, e.g., pending, completed, failed. */
    status?: string | null | undefined;

    /** Filter for transactions created at or after this time. */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for transactions created before this time. */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Payment transaction creation DTO describing all required data to record a
   * payment transaction including amount, currency and status.
   */
  export type ICreate = {
    /** Tenant organization owning this transaction. */
    tenant_id: string & tags.Format<"uuid">;

    /** User who performed or authorized this transaction. */
    user_id: string & tags.Format<"uuid">;

    /**
     * Unique code identifying this payment transaction for tracking and
     * reconciliation.
     */
    transaction_code: string;

    /** Transaction amount in the specified currency. */
    amount: number;

    /** ISO 4217 currency code for the transaction, e.g., USD, EUR. */
    currency: string;

    /** Method used for payment, such as credit card, PayPal, bank transfer. */
    payment_method: string;

    /** Current status of the transaction, e.g., pending, completed, failed. */
    status: string;

    /** Reference code from the payment gateway or processor. */
    gateway_reference?: string | null | undefined;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Record last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp indicating logical deletion. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Update data for the payment transaction. */
  export type IUpdate = {
    /**
     * Unique code identifying this payment transaction for tracking and
     * reconciliation.
     */
    transaction_code?: string | undefined;

    /** Transaction amount in the specified currency. */
    amount?: number | undefined;

    /** ISO 4217 currency code for the transaction, e.g., USD, EUR. */
    currency?: string | undefined;

    /** Method used for payment, such as credit card, PayPal, bank transfer. */
    payment_method?: string | undefined;

    /** Current status of the transaction, e.g., pending, completed, failed. */
    status?: string | undefined;

    /** Reference code from the payment gateway or processor. */
    gateway_reference?: string | null | undefined;

    /** Record creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record last update timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Soft delete timestamp indicating logical deletion. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Paginated summary information of payment transactions referencing
   * enterprise_lms_payment_transactions table. Contains the transaction key,
   * amount, currency info, payment method, status, and timestamps.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /**
     * Unique code identifying this payment transaction for tracking and
     * reconciliation.
     */
    transaction_code: string;

    /** Transaction amount in the specified currency. */
    amount: number;

    /** ISO 4217 currency code for the transaction, e.g., USD, EUR. */
    currency: string;

    /** Method used for payment, such as credit card, PayPal, bank transfer. */
    payment_method: string;

    /** Current status of the transaction, e.g., pending, completed, failed. */
    status: string;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Record last update timestamp. */
    updated_at: string & tags.Format<"date-time">;
  };
}
