import { tags } from "typia";

/**
 * Entity representing an item in a learning path such as a course, module, or
 * assessment.
 *
 * This entity includes all details required to track position, associated
 * content, and status within the learning path. Deleted items are soft deleted
 * using a deletion timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsLearningPathItem = {
  /** Unique identifier of the learning path item. */
  id: string & tags.Format<"uuid">;

  /** Identifier of associated learning path. */
  learning_path_id: string & tags.Format<"uuid">;

  /** The type of the item (course, module, assessment, etc.). */
  item_type: string;

  /** Identifier of the actual content or assessment this item references. */
  item_id: string & tags.Format<"uuid">;

  /** The position of this item within the learning path. */
  sequence_order: number & tags.Type<"int32">;

  /** Timestamp when created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of soft deletion. Null means active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsLearningPathItem {
  /** Request parameters for searching and pagination of learning path items. */
  export type IRequest = {
    /** Optional filter by item_type. */
    item_type?: string | undefined;

    /** Optional filter by item_id. */
    item_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional filter by sequence_order. */
    sequence_order?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: page number (starting at 1). */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Pagination: items per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional sorting order. */
    orderBy?: string | null | undefined;
  };

  /**
   * Creation parameters for a new learning path item. Requires
   * learning_path_id, item_type, item_id, and sequence_order.
   */
  export type ICreate = {
    /**
     * Learning path to which this item belongs.
     *
     * Required and must be a UUID.
     */
    learning_path_id: string & tags.Format<"uuid">;

    /** Type of the item (e.g., 'course', 'module', 'assessment'). */
    item_type: string;

    /** Identifier of the content or assessment linked to this item. */
    item_id: string & tags.Format<"uuid">;

    /** Sequence order of the item within the learning path. */
    sequence_order: number & tags.Type<"int32">;
  };

  /**
   * Update parameters for an existing learning path item. All fields are
   * optional.
   */
  export type IUpdate = {
    /** Optional updated learning path ID. */
    learning_path_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional updated item_type. */
    item_type?: string | null | undefined;

    /** Optional updated item_id. */
    item_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional updated sequence_order. */
    sequence_order?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional updated deleted_at timestamp for soft deletion. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
