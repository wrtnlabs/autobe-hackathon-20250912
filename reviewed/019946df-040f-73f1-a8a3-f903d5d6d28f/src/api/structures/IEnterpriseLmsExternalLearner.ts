import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Enterprise LMS external learner user entity.
 *
 * Represents individual external learners with limited access to public and
 * paid courses.
 *
 * Supports multi-tenant isolation and user lifecycle management.
 *
 * Includes authentication credential hashes and status management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsExternalLearner = {
  /**
   * Primary Key.
   *
   * Unique identifier of the external learner user.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Tenant organization identifier.
   *
   * UUID referencing the tenant this external learner belongs to.
   */
  tenant_id: string & tags.Format<"uuid">;

  /**
   * Unique email address for login and communications.
   *
   * Must be unique within the tenant organization.
   */
  email: string;

  /**
   * Hashed password for authentication.
   *
   * Expect hash-compatible string.
   */
  password_hash: string;

  /**
   * First name of the external learner.
   *
   * User's personal given name.
   */
  first_name: string;

  /**
   * Last name of the external learner.
   *
   * User's family name.
   */
  last_name: string;

  /**
   * Current status of the external learner account (e.g., active, suspended).
   *
   * Typically used to enable/disable login or access.
   */
  status: string;

  /**
   * Record creation timestamp.
   *
   * ISO 8601 formatted string in date-time format representing creation time.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * ISO 8601 formatted string representing last modification.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft delete timestamp.
   *
   * Null means active; string in ISO date-time format or null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsExternalLearner {
  /**
   * Join request interface. Represents the information required to register a
   * new external learner user.
   */
  export type IJoin = {
    /**
     * Tenant organization ID to associate the user with. Must be a UUID
     * string. This enforces multi-tenant data isolation.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Unique email address used for login and communication. Must be a
     * valid email format.
     */
    email: string & tags.Format<"email">;

    /**
     * Password hash generated securely from the user's password. This field
     * stores the hashed password and must not be plaintext.
     */
    password_hash: string;

    /** The first name of the external learner. */
    first_name: string;

    /** The last name of the external learner. */
    last_name: string;

    /**
     * Status of the user account, e.g., 'active', 'suspended'. Must be a
     * valid status string from allowed values.
     */
    status: string;
  };

  /**
   * Authorized response interface. Contains JWT authentication tokens and
   * user info returned upon successful authentication or registration.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the external learner user. Must be a UUID
     * string.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Tenant organization identifier.
     *
     * UUID referencing the tenant this external learner belongs to.
     */
    tenant_id: string & tags.Format<"uuid">;

    /** User email for client display and identity confirmation. */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for authentication.
     *
     * Expect hash-compatible string.
     */
    password_hash: string;

    /** User first name for personalization. */
    first_name: string;

    /** User last name for personalization. */
    last_name: string;

    /** The current status of the user account. */
    status: string;

    /**
     * Record creation timestamp.
     *
     * ISO 8601 formatted string in date-time format representing creation
     * time.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Record last update timestamp.
     *
     * ISO 8601 formatted string representing last modification.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional soft delete timestamp.
     *
     * Null means active; string in ISO date-time format or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token for authenticated API requests. */
    access_token?: string | undefined;

    /** JWT refresh token allowing session renewal without re-login. */
    refresh_token?: string | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Refresh token request interface. Contains the refresh_token string to
   * obtain new access tokens.
   */
  export type IRefresh = {
    /** JWT refresh token string issued by the system for session renewal. */
    refresh_token: string;
  };

  /**
   * Request payload for searching or filtering external learners with
   * optional pagination and tenant filtering.
   */
  export type IRequest = {
    /** Page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search string to filter external learners */
    search?: string | null | undefined;

    /** Filter by account status (e.g., active, suspended) */
    status?: string | null | undefined;

    /** Filter by tenant organization ID */
    tenant_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Payload to create a new Enterprise LMS external learner user.
   *
   * Includes all required fields to register a new external learner, ensuring
   * tenant association and initial account status.
   */
  export type ICreate = {
    /**
     * Tenant organization UUID. This is required to associate the new
     * external learner.
     */
    tenant_id: string & tags.Format<"uuid">;

    /** Unique email address for login. Must be unique within this tenant. */
    email: string;

    /**
     * Hashed password for authentication. Expect the hashed string as
     * input.
     */
    password_hash: string;

    /**
     * First name of the external learner. Required for personalization and
     * displays.
     */
    first_name: string;

    /**
     * Last name of the external learner. Required for personalization and
     * displays.
     */
    last_name: string;

    /**
     * Current status of the external learner account. Typical statuses:
     * 'active', 'pending', 'suspended'. Must be one of the enumerated
     * statuses.
     */
    status: string;
  };

  /**
   * Payload for updating an existing Enterprise LMS external learner user.
   *
   * All fields are optional, allowing partial updates. Supports soft deletion
   * control via deleted_at. Must comply with tenant data isolation and
   * validation.
   */
  export type IUpdate = {
    /**
     * Unique email address for login. Should be unique within tenant.
     * Optional during update.
     */
    email?: string | undefined;

    /**
     * Hashed password for authentication. Optional; update if password
     * change is required.
     */
    password_hash?: string | undefined;

    /** First name of the external learner. Optional. */
    first_name?: string | undefined;

    /** Last name of the external learner. Optional. */
    last_name?: string | undefined;

    /**
     * Status of the external learner account. Optional; update for
     * activation/deactivation. Must respect enum constraints if updated.
     */
    status?: string | undefined;

    /**
     * Soft delete timestamp or null. Optional; null means active, ISO 8601
     * string or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary for External Learner user, providing essential identifying
   * information for list views.
   */
  export type ISummary = {
    /** Unique identifier for the external learner. */
    id: string & tags.Format<"uuid">;

    /** Email address of the external learner. */
    email: string;

    /** First name of the external learner. */
    first_name: string;

    /** Last name of the external learner. */
    last_name: string;

    /** Current status of the external learner (e.g., 'active', 'suspended'). */
    status: string;
  };
}
