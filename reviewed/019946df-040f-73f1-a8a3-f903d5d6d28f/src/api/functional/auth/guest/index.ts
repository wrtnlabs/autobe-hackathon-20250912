import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsGuest } from "../../../structures/IEnterpriseLmsGuest";

/**
 * Create guest user account and issue temporary authorization tokens linked to
 * the enterprise_lms_guest table.
 *
 * This endpoint enables guest users to create a temporary account for browsing
 * public course catalogs within the LMS. Guest users are restricted from
 * enrollment and have limited permissions as per the 'guest' role type. The
 * system securely stores the email, hashed password, name, and status fields
 * from the 'enterprise_lms_guest' table. This operation issues JWT tokens with
 * restricted scopes appropriate for guest access, aiding in anonymous analytics
 * tracking without exposing sensitive privileges. Related operations include
 * token refresh to extend session validity.
 *
 * @param props.connection
 * @param props.body Guest user registration request body. Includes email,
 *   password, first and last name, and initial status.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Guest user registration request body. Includes email, password, first
     * and last name, and initial status.
     */
    body: IEnterpriseLmsGuest.ICreate;
  };
  export type Body = IEnterpriseLmsGuest.ICreate;
  export type Response = IEnterpriseLmsGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IEnterpriseLmsGuest.IAuthorized =>
    typia.random<IEnterpriseLmsGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for guest users using a valid refresh token, referencing
 * enterprise_lms_guest table.
 *
 * This endpoint refreshes access tokens for guest users, extending their
 * session with limited permissions as defined by the 'guest' role in the
 * 'enterprise_lms_guest' table. It requires submission of a valid refresh token
 * and returns refreshed JWT tokens encapsulating the guest's temporary session.
 * This supports continuous anonymous browsing and analytics tracking without
 * requiring login credentials. This operation is part of the guest user
 * authentication lifecycle, complementing the join registration.
 *
 * @param props.connection
 * @param props.body Guest token refresh request containing the refresh token.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Guest token refresh request containing the refresh token. */
    body: IEnterpriseLmsGuest.IRefresh;
  };
  export type Body = IEnterpriseLmsGuest.IRefresh;
  export type Response = IEnterpriseLmsGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IEnterpriseLmsGuest.IAuthorized =>
    typia.random<IEnterpriseLmsGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
