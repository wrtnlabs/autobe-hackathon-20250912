import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsExternalLearner } from "../../../../structures/IEnterpriseLmsExternalLearner";

/**
 * Create a new external learner guest account and issue initial tokens.
 *
 * Register a new external learner guest account by providing necessary profile
 * and credential information.
 *
 * This operation creates a new externalLearner record in the
 * enterprise_lms_externallearner table, hashing the password, validating email
 * uniqueness, and issuing initial authentication tokens specific to guest
 * access with limited permissions.
 *
 * The operation uses the provided external learner credentials and profile data
 * to establish a temporary guest session according to the externalLearner
 * role's constraints and schema validation.
 *
 * Security and compliance measures include input validation, password strength
 * checking, and token issuance with scoped claims reflecting the guest role.
 *
 * There is no login operation for guests; only join and refresh are applicable.
 *
 * Token refresh operation follows this for maintaining session continuity.
 *
 * @param props.connection
 * @param props.body New external learner join request containing registration
 *   details
 * @setHeader token.access Authorization
 *
 * @path /auth/externalLearner/join
 * @accessor api.functional.auth.externalLearner.join.joinExternalLearner
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinExternalLearner(
  connection: IConnection,
  props: joinExternalLearner.Props,
): Promise<joinExternalLearner.Response> {
  const output: joinExternalLearner.Response =
    true === connection.simulate
      ? joinExternalLearner.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinExternalLearner.METADATA,
            path: joinExternalLearner.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinExternalLearner {
  export type Props = {
    /** New external learner join request containing registration details */
    body: IEnterpriseLmsExternalLearner.IJoin;
  };
  export type Body = IEnterpriseLmsExternalLearner.IJoin;
  export type Response = IEnterpriseLmsExternalLearner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/externalLearner/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/externalLearner/join";
  export const random = (): IEnterpriseLmsExternalLearner.IAuthorized =>
    typia.random<IEnterpriseLmsExternalLearner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinExternalLearner.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinExternalLearner.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
