import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsCorporateLearner } from "../../../structures/IEnterpriseLmsCorporateLearner";

/**
 * Create a new corporate learner account in enterprise_lms_corporatelearner
 * table and issue JWT token.
 *
 * Register a new corporate learner account for Enterprise LMS system. This
 * operation creates a new user record in enterprise_lms_corporatelearner table
 * with hashed password and sets default active status. The response includes
 * JWT authorization token upon successful creation.
 *
 * It requires uniqueness of email and valid tenant context for multi-tenancy.
 *
 * Related operations: login, refresh.
 *
 * @param props.connection
 * @param props.body Information required to create a corporate learner account.
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateLearner/join
 * @accessor api.functional.auth.corporateLearner.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Information required to create a corporate learner account. */
    body: IEnterpriseLmsCorporateLearner.ICreate;
  };
  export type Body = IEnterpriseLmsCorporateLearner.ICreate;
  export type Response = IEnterpriseLmsCorporateLearner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateLearner/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateLearner/join";
  export const random = (): IEnterpriseLmsCorporateLearner.IAuthorized =>
    typia.random<IEnterpriseLmsCorporateLearner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate corporate learner and provide JWT tokens from
 * enterprise_lms_corporatelearner table.
 *
 * Authenticate corporate learner credentials and issue JWT access and refresh
 * tokens.
 *
 * Requires valid email and password. Account status must be active.
 *
 * Related operations: join, refresh.
 *
 * @param props.connection
 * @param props.body Credentials required for corporate learner login.
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateLearner/login
 * @accessor api.functional.auth.corporateLearner.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Credentials required for corporate learner login. */
    body: IEnterpriseLmsCorporateLearner.ILogin;
  };
  export type Body = IEnterpriseLmsCorporateLearner.ILogin;
  export type Response = IEnterpriseLmsCorporateLearner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateLearner/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateLearner/login";
  export const random = (): IEnterpriseLmsCorporateLearner.IAuthorized =>
    typia.random<IEnterpriseLmsCorporateLearner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Renew JWT access token for corporate learner.
 *
 * Refresh JWT access token for corporate learner using a valid refresh token.
 *
 * Ensures continuous session without login.
 *
 * Related operations: join, login.
 *
 * @param props.connection
 * @param props.body Refresh token request payload.
 * @setHeader token.access Authorization
 *
 * @path /auth/corporateLearner/refresh
 * @accessor api.functional.auth.corporateLearner.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload. */
    body: IEnterpriseLmsCorporateLearner.IRequestRefresh;
  };
  export type Body = IEnterpriseLmsCorporateLearner.IRequestRefresh;
  export type Response = IEnterpriseLmsCorporateLearner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/corporateLearner/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/corporateLearner/refresh";
  export const random = (): IEnterpriseLmsCorporateLearner.IAuthorized =>
    typia.random<IEnterpriseLmsCorporateLearner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
