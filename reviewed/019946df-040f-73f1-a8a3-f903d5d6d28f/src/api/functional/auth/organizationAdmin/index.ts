import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsOrganizationAdmin } from "../../../structures/IEnterpriseLmsOrganizationAdmin";

/**
 * Create new organizationAdmin user account and issue JWT authorization tokens.
 *
 * This POST /auth/organizationAdmin/join API endpoint enables the creation of a
 * new organization administrator account within the Enterprise LMS tenant
 * organization. The system stores the administrator's unique email, securely
 * hashes their password, and records creation timestamps in the
 * enterprise_lms_organizationadmin table. Upon successful registration, the
 * system issues an authorized JWT token response
 * IEnterpriseLmsOrganizationAdmin.IAuthorized for immediate authenticated
 * access.
 *
 * This operation leverages the tenant_id foreign key for multi-tenant data
 * segregation ensuring the new admin belongs only to their tenant. It validates
 * the uniqueness of the email and enforces password security via the
 * password_hash schema.
 *
 * The operation is publicly accessible allowing new organization admin users to
 * join the system securely.
 *
 * This operation is critical for enabling complete organizational control for
 * admins including user management, role assignments, content approvals, and
 * billing management within their tenant environment.
 *
 * @param props.connection
 * @param props.body OrganizationAdmin account creation payload
 * @setHeader token.access Authorization
 *
 * @path /auth/organizationAdmin/join
 * @accessor api.functional.auth.organizationAdmin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** OrganizationAdmin account creation payload */
    body: IEnterpriseLmsOrganizationAdmin.ICreate;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.ICreate;
  export type Response = IEnterpriseLmsOrganizationAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/organizationAdmin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/organizationAdmin/join";
  export const random = (): IEnterpriseLmsOrganizationAdmin.IAuthorized =>
    typia.random<IEnterpriseLmsOrganizationAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an organizationAdmin user and issue JWT tokens.
 *
 * The POST /auth/organizationAdmin/login API endpoint verifies organization
 * administrator user credentials within the Enterprise LMS. The system compares
 * the supplied email and password against the securely hashed password stored
 * in the enterprise_lms_organizationadmin table. Upon successful validation,
 * the system generates and returns JWT tokens encapsulated in the
 * IEnterpriseLmsOrganizationAdmin.IAuthorized response type.
 *
 * This login operation enforces tenant isolation by validating the tenant ID
 * associated with the organization admin user. It denies access if the account
 * status is inactive or suspended.
 *
 * This API endpoint is publicly accessible for all organization admins to log
 * in.
 *
 * Successful execution grants authorized JWT token-based access to
 * organizational management features including user and role administration,
 * content approvals, and billing management.
 *
 * @param props.connection
 * @param props.body Credentials for organizationAdmin user login
 * @setHeader token.access Authorization
 *
 * @path /auth/organizationAdmin/login
 * @accessor api.functional.auth.organizationAdmin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Credentials for organizationAdmin user login */
    body: IEnterpriseLmsOrganizationAdmin.ILogin;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.ILogin;
  export type Response = IEnterpriseLmsOrganizationAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/organizationAdmin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/organizationAdmin/login";
  export const random = (): IEnterpriseLmsOrganizationAdmin.IAuthorized =>
    typia.random<IEnterpriseLmsOrganizationAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for organizationAdmin user.
 *
 * This PATCH /auth/organizationAdmin/refresh API operation renews JWT access
 * and refresh tokens for an authenticated organization administrator user. The
 * system validates the provided refresh token correlated with the
 * enterprise_lms_organizationadmin table, verifying tenant ownership and active
 * user status.
 *
 * Upon successful validation, the system issues new JWT tokens encapsulated in
 * the IEnterpriseLmsOrganizationAdmin.IAuthorized response type to maintain
 * seamless user sessions.
 *
 * This operation is secured and accessible only via valid refresh tokens.
 *
 * It is essential for long session management and secure authentication
 * lifecycle control.
 *
 * @param props.connection
 * @param props.body Refresh token payload for token renewal
 * @setHeader token.access Authorization
 *
 * @path /auth/organizationAdmin/refresh
 * @accessor api.functional.auth.organizationAdmin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload for token renewal */
    body: IEnterpriseLmsOrganizationAdmin.IRefresh;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.IRefresh;
  export type Response = IEnterpriseLmsOrganizationAdmin.IAuthorized;

  export const METADATA = {
    method: "PATCH",
    path: "/auth/organizationAdmin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/organizationAdmin/refresh";
  export const random = (): IEnterpriseLmsOrganizationAdmin.IAuthorized =>
    typia.random<IEnterpriseLmsOrganizationAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
