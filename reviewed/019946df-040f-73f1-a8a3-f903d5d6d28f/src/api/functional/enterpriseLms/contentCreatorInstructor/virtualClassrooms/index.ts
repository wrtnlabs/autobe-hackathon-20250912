import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsVirtualClassroom } from "../../../../structures/IEnterpriseLmsVirtualClassroom";

/**
 * Create a new virtual classroom session for live training within the tenant
 * organization. The session is scheduled with title, optional description,
 * start, and end timestamps. Tenant ID and instructor ID ensure correct
 * multi-tenant isolation and user association.
 *
 * Security is enforced to allow only authorized content creator or instructor
 * users to create sessions within their tenant.
 *
 * The virtual classroom session supports later updates and multi-tenancy
 * compliance. The API validates inputs and stores the session in the database,
 * returning the created resource details.
 *
 * This operation directly manipulates the enterprise_lms_virtual_classrooms
 * table, creating a new record with required fields. It provides immediate
 * feedback about the created session entity.
 *
 * @param props.connection
 * @param props.body Data required to create a new virtual classroom session
 * @path /enterpriseLms/contentCreatorInstructor/virtualClassrooms
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.virtualClassrooms.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new virtual classroom session */
    body: IEnterpriseLmsVirtualClassroom.ICreate;
  };
  export type Body = IEnterpriseLmsVirtualClassroom.ICreate;
  export type Response = IEnterpriseLmsVirtualClassroom;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/contentCreatorInstructor/virtualClassrooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/contentCreatorInstructor/virtualClassrooms";
  export const random = (): IEnterpriseLmsVirtualClassroom =>
    typia.random<IEnterpriseLmsVirtualClassroom>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing virtual classroom session by ID within the tenant
 * organization. The update can modify title, optional description, start and
 * end timestamps, ensuring only authorized instructors in the tenant can make
 * changes.
 *
 * Input validation prevents out-of-range or invalid data updates. The operation
 * returns the modified session entity.
 *
 * The operation is associated with the enterprise_lms_virtual_classrooms table
 * and maintains multi-tenancy data isolation through tenant and user context
 * checks.
 *
 * @param props.connection
 * @param props.virtualClassroomId Unique identifier of the virtual classroom
 *   session
 * @param props.body Data fields to update for the virtual classroom session
 * @path /enterpriseLms/contentCreatorInstructor/virtualClassrooms/:virtualClassroomId
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.virtualClassrooms.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the virtual classroom session */
    virtualClassroomId: string & tags.Format<"uuid">;

    /** Data fields to update for the virtual classroom session */
    body: IEnterpriseLmsVirtualClassroom.IUpdate;
  };
  export type Body = IEnterpriseLmsVirtualClassroom.IUpdate;
  export type Response = IEnterpriseLmsVirtualClassroom;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/contentCreatorInstructor/virtualClassrooms/:virtualClassroomId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/virtualClassrooms/${encodeURIComponent(props.virtualClassroomId ?? "null")}`;
  export const random = (): IEnterpriseLmsVirtualClassroom =>
    typia.random<IEnterpriseLmsVirtualClassroom>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("virtualClassroomId")(() =>
        typia.assert(props.virtualClassroomId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a virtual classroom session by ID.
 *
 * Soft delete a virtual classroom session by setting the deleted_at timestamp,
 * marking it as removed but preserving the record for auditing and potential
 * restoration.
 *
 * This deletion respects tenant boundaries and authorizes only the content
 * creator/instructor role.
 *
 * This operation targets the enterprise_lms_virtual_classrooms table,
 * maintaining multi-tenant data isolation and compliance requirements.
 *
 * @param props.connection
 * @param props.virtualClassroomId Unique identifier of the virtual classroom
 *   session to delete
 * @path /enterpriseLms/contentCreatorInstructor/virtualClassrooms/:virtualClassroomId
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.virtualClassrooms.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the virtual classroom session to delete */
    virtualClassroomId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/contentCreatorInstructor/virtualClassrooms/:virtualClassroomId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/contentCreatorInstructor/virtualClassrooms/${encodeURIComponent(props.virtualClassroomId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("virtualClassroomId")(() =>
        typia.assert(props.virtualClassroomId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
