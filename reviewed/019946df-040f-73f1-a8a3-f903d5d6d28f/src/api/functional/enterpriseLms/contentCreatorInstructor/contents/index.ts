import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContents } from "../../../../structures/IEnterpriseLmsContents";
export * as contentLocalizations from "./contentLocalizations/index";

/**
 * Create a new content item in the enterprise LMS system with provided
 * metadata. The content item must specify tenant affiliation, title, content
 * type, description, status, and lifecycle business status.
 *
 * The operation corresponds to the enterprise_lms_contents table in the Prisma
 * schema.
 *
 * Validations ensure uniqueness of title within tenant, valid content types,
 * and workflow statuses.
 *
 * Successful creation returns the full content record including created and
 * updated timestamps.
 *
 * @param props.connection
 * @param props.body Content item creation data
 * @path /enterpriseLms/contentCreatorInstructor/contents
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.contents.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Content item creation data */
    body: IEnterpriseLmsContents.ICreate;
  };
  export type Body = IEnterpriseLmsContents.ICreate;
  export type Response = IEnterpriseLmsContents;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/contentCreatorInstructor/contents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/contentCreatorInstructor/contents";
  export const random = (): IEnterpriseLmsContents =>
    typia.random<IEnterpriseLmsContents>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing content item metadata.
 *
 * Update an existing content item's metadata by its ID. Fields like title,
 * description, content_type, status, and business_status can be modified.
 *
 * This operation corresponds to the enterprise_lms_contents Prisma schema
 * table.
 *
 * It requires tenant and role-based authorization. The content must belong to
 * the user's tenant.
 *
 * The title uniqueness within tenant is validated on update.
 *
 * The operation excludes modifying soft deletion timestamps.
 *
 * Returns the updated content entity upon success.
 *
 * @param props.connection
 * @param props.id UUID of the content item to update
 * @param props.body Content item update data
 * @path /enterpriseLms/contentCreatorInstructor/contents/:id
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.contents.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the content item to update */
    id: string & tags.Format<"uuid">;

    /** Content item update data */
    body: IEnterpriseLmsContents.IUpdate;
  };
  export type Body = IEnterpriseLmsContents.IUpdate;
  export type Response = IEnterpriseLmsContents;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/contentCreatorInstructor/contents/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/contents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContents =>
    typia.random<IEnterpriseLmsContents>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
