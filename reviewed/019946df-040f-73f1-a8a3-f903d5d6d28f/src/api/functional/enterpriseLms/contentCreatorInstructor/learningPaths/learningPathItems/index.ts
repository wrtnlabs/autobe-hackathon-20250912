import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsLearningPathItem } from "../../../../../structures/IEnterpriseLmsLearningPathItem";

/**
 * Create a new learning path item for a learning path.
 *
 * Create a new learning path item under the specified learning path.
 *
 * The request must specify details such as the item type (e.g., course, module,
 * assessment), the item reference ID, and its sequence order within the
 * learning path.
 *
 * Authorization ensures that only users with appropriate permissions can add
 * components to learning paths.
 *
 * Upon successful creation, the operation returns the full representation of
 * the new learning path item.
 *
 * This operation interfaces directly with the
 * enterprise_lms_learning_path_items table documented in the Prisma schema,
 * respecting tenant isolation and data integrity constraints.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier of the target learning path
 * @param props.body Information needed to create a new learning path item
 * @path /enterpriseLms/contentCreatorInstructor/learningPaths/:learningPathId/learningPathItems
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.learningPaths.learningPathItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target learning path */
    learningPathId: string & tags.Format<"uuid">;

    /** Information needed to create a new learning path item */
    body: IEnterpriseLmsLearningPathItem.ICreate;
  };
  export type Body = IEnterpriseLmsLearningPathItem.ICreate;
  export type Response = IEnterpriseLmsLearningPathItem;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/contentCreatorInstructor/learningPaths/:learningPathId/learningPathItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}/learningPathItems`;
  export const random = (): IEnterpriseLmsLearningPathItem =>
    typia.random<IEnterpriseLmsLearningPathItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update learning path item details.
 *
 * Update an existing learning path item by its ID within a learning path.
 *
 * The request should include the fields to be updated such as item type, item
 * ID, or sequence order.
 *
 * Authorization is required to ensure that only permitted users can modify
 * learning path items.
 *
 * The operation returns the fully updated learning path item upon success.
 *
 * This operation directly updates the enterprise_lms_learning_path_items table,
 * maintaining accuracy of the learning path structure within the enterprise LMS
 * system.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier of the target learning path
 * @param props.learningPathItemId Unique identifier of the learning path item
 * @param props.body Updated information for the learning path item
 * @path /enterpriseLms/contentCreatorInstructor/learningPaths/:learningPathId/learningPathItems/:learningPathItemId
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.learningPaths.learningPathItems.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target learning path */
    learningPathId: string & tags.Format<"uuid">;

    /** Unique identifier of the learning path item */
    learningPathItemId: string & tags.Format<"uuid">;

    /** Updated information for the learning path item */
    body: IEnterpriseLmsLearningPathItem.IUpdate;
  };
  export type Body = IEnterpriseLmsLearningPathItem.IUpdate;
  export type Response = IEnterpriseLmsLearningPathItem;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/contentCreatorInstructor/learningPaths/:learningPathId/learningPathItems/:learningPathItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}/learningPathItems/${encodeURIComponent(props.learningPathItemId ?? "null")}`;
  export const random = (): IEnterpriseLmsLearningPathItem =>
    typia.random<IEnterpriseLmsLearningPathItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.param("learningPathItemId")(() =>
        typia.assert(props.learningPathItemId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
