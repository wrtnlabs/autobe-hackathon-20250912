import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsGuest } from "../../../../structures/IEnterpriseLmsGuest";

/**
 * Get a single guest user by ID.
 *
 * Retrieve detailed information about a specific guest user by their unique
 * identifier.
 *
 * This operation allows authorized users to fetch a single guest user record,
 * including email, first and last name, status, and associated tenant
 * organization. It adheres strictly to the tenant data isolation rules defined
 * in the Enterprise LMS multi-tenant architecture.
 *
 * Security restrictions apply to roles with appropriate permissions to access
 * guest user details.
 *
 * Path parameter guestId must be a valid UUID matching the target guest.
 *
 * If the guest user does not exist or is soft deleted, the operation returns an
 * appropriate error.
 *
 * No request body is required for this operation.
 *
 * The response returns the full guest user entity conforming to the
 * IEnterpriseLmsGuest interface.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the guest user
 * @path /enterpriseLms/guest/guests/:guestId
 * @accessor api.functional.enterpriseLms.guest.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the guest user */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsGuest;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/guest/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/guest/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IEnterpriseLmsGuest =>
    typia.random<IEnterpriseLmsGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update guest user by ID.
 *
 * Update an existing guest user identified by guestId with the provided data.
 *
 * Changes to email, name, password_hash, and status are permitted subject to
 * validation and authorization.
 *
 * The operation respects tenant data isolation and will fail if the guest does
 * not belong to the authorized tenant.
 *
 * Returns the updated guest user information upon success.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the guest user
 * @param props.body Updated guest user information
 * @path /enterpriseLms/guest/guests/:guestId
 * @accessor api.functional.enterpriseLms.guest.guests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the guest user */
    guestId: string & tags.Format<"uuid">;

    /** Updated guest user information */
    body: IEnterpriseLmsGuest.IUpdate;
  };
  export type Body = IEnterpriseLmsGuest.IUpdate;
  export type Response = IEnterpriseLmsGuest;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/guest/guests/:guestId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/guest/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): IEnterpriseLmsGuest =>
    typia.random<IEnterpriseLmsGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete guest user by ID.
 *
 * Delete a guest user by ID.
 *
 * This performs a soft delete, marking the guest record as deleted with a
 * timestamp.
 *
 * Only authorized users may perform this operation.
 *
 * The guestId must be a valid UUID of an existing guest user.
 *
 * No content is returned in the response.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the guest user
 * @path /enterpriseLms/guest/guests/:guestId
 * @accessor api.functional.enterpriseLms.guest.guests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the guest user */
    guestId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/guest/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/guest/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new guest user in the system.
 *
 * The request must include valid tenant_id, unique email, hashed password,
 * first and last names, and initial status.
 *
 * If any uniqueness or data integrity constraint fails, the operation will
 * return an error.
 *
 * The response includes the full guest user entity with system fields populated
 * such as id and timestamps.
 *
 * @param props.connection
 * @param props.body Information needed to create a guest user
 * @path /enterpriseLms/guest/guests
 * @accessor api.functional.enterpriseLms.guest.guests.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a guest user */
    body: IEnterpriseLmsGuest.ICreate;
  };
  export type Body = IEnterpriseLmsGuest.ICreate;
  export type Response = IEnterpriseLmsGuest;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/guest/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/guest/guests";
  export const random = (): IEnterpriseLmsGuest =>
    typia.random<IEnterpriseLmsGuest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
