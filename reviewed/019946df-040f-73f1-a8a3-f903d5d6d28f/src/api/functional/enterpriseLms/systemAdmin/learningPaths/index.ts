import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsLearningPath } from "../../../../structures/IEnterpriseLmsLearningPath";
import { IPageIEnterpriseLmsLearningPath } from "../../../../structures/IPageIEnterpriseLmsLearningPath";

/**
 * Search and retrieve enterprise learning paths.
 *
 * Retrieve a filtered and paginated list of learning paths.
 *
 * Supports comprehensive filtering by code, status, and title. Enables tenant
 * administrators and content managers to efficiently browse and manage active
 * learning sequences.
 *
 * The request body specifies search criteria, pagination, and sorting options.
 *
 * The response returns paginated learning path summaries to optimize display
 * performance.
 *
 * Only authenticated users with the appropriate permissions can access this
 * endpoint.
 *
 * Errors occur for invalid search parameters or lack of authorization.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for learning
 *   paths
 * @path /enterpriseLms/systemAdmin/learningPaths
 * @accessor api.functional.enterpriseLms.systemAdmin.learningPaths.searchLearningPaths
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchLearningPaths(
  connection: IConnection,
  props: searchLearningPaths.Props,
): Promise<searchLearningPaths.Response> {
  return true === connection.simulate
    ? searchLearningPaths.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchLearningPaths.METADATA,
          path: searchLearningPaths.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchLearningPaths {
  export type Props = {
    /** Search criteria and pagination parameters for learning paths */
    body: IEnterpriseLmsLearningPath.IRequest;
  };
  export type Body = IEnterpriseLmsLearningPath.IRequest;
  export type Response = IPageIEnterpriseLmsLearningPath.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/learningPaths",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/learningPaths";
  export const random = (): IPageIEnterpriseLmsLearningPath.ISummary =>
    typia.random<IPageIEnterpriseLmsLearningPath.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchLearningPaths.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchLearningPaths.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
