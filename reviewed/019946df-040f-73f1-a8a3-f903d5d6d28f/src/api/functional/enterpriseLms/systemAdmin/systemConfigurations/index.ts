import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsSystemConfiguration } from "../../../../structures/IEnterpriseLmsSystemConfiguration";
import { IEnterpriseLmsSystemConfigurations } from "../../../../structures/IEnterpriseLmsSystemConfigurations";
import { IPageIEnterpriseLmsSystemConfigurations } from "../../../../structures/IPageIEnterpriseLmsSystemConfigurations";

/**
 * Create a new system configuration setting.
 *
 * Creates a new system configuration record with a unique key and specified
 * value. Only users with systemAdmin role are authorized to create system
 * configurations. The key must be unique to avoid conflicts. The operation
 * returns the created configuration including timestamps for tracking and
 * auditing.
 *
 * @param props.connection
 * @param props.body New system configuration details
 * @path /enterpriseLms/systemAdmin/systemConfigurations
 * @accessor api.functional.enterpriseLms.systemAdmin.systemConfigurations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New system configuration details */
    body: IEnterpriseLmsSystemConfiguration.ICreate;
  };
  export type Body = IEnterpriseLmsSystemConfiguration.ICreate;
  export type Response = IEnterpriseLmsSystemConfiguration;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/systemConfigurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/systemConfigurations";
  export const random = (): IEnterpriseLmsSystemConfiguration =>
    typia.random<IEnterpriseLmsSystemConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve filtered system configuration settings.
 *
 * Search and filter system configurations with pagination and sorting options.
 *
 * The operation allows system administrators to find configuration entries
 * based on keys, descriptions, or other criteria, facilitating management of
 * global system behavior.
 *
 * Because configurations are critical to backend operations, access is
 * restricted to system admin roles.
 *
 * The response provides paginated configuration entries including key, value,
 * description, and timestamps.
 *
 * Filtering supports partial matches and sorting supports ascending and
 * descending orders.
 *
 * Unsuccessful search due to invalid parameters will lead to HTTP 400 Bad
 * Request.
 *
 * Refer to related APIs for retrieving and managing individual configuration
 * entries.
 *
 * @param props.connection
 * @param props.body System configuration search request with filter criteria
 *   and pagination
 * @path /enterpriseLms/systemAdmin/systemConfigurations
 * @accessor api.functional.enterpriseLms.systemAdmin.systemConfigurations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * System configuration search request with filter criteria and
     * pagination
     */
    body: IEnterpriseLmsSystemConfigurations.IRequest;
  };
  export type Body = IEnterpriseLmsSystemConfigurations.IRequest;
  export type Response = IPageIEnterpriseLmsSystemConfigurations.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/systemConfigurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/systemConfigurations";
  export const random = (): IPageIEnterpriseLmsSystemConfigurations.ISummary =>
    typia.random<IPageIEnterpriseLmsSystemConfigurations.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get system configuration details by ID.
 *
 * Retrieve detailed information of a specific system configuration setting by
 * its ID.
 *
 * This operation returns comprehensive details including key, value,
 * description, and audit timestamps for the requested configuration.
 *
 * Access is restricted to system administrators to maintain system integrity
 * and security.
 *
 * Invalid or non-existent IDs lead to HTTP 404 Not Found.
 *
 * Use related endpoints to browse or search system configurations.
 *
 * This helps administrative oversight and configuration management for the
 * Enterprise LMS platform.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system configuration
 * @path /enterpriseLms/systemAdmin/systemConfigurations/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.systemConfigurations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system configuration */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsSystemConfigurations;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/systemConfigurations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/systemConfigurations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSystemConfigurations =>
    typia.random<IEnterpriseLmsSystemConfigurations>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing system configuration setting.
 *
 * Update an existing system configuration entry by its ID. Allows changing
 * value and description fields. Requires systemAdmin role authorization.
 * Returns the updated configuration with timestamps. Errors are returned if the
 * ID does not exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system configuration to update
 * @param props.body Updated system configuration details
 * @path /enterpriseLms/systemAdmin/systemConfigurations/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.systemConfigurations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system configuration to update */
    id: string & tags.Format<"uuid">;

    /** Updated system configuration details */
    body: IEnterpriseLmsSystemConfiguration.IUpdate;
  };
  export type Body = IEnterpriseLmsSystemConfiguration.IUpdate;
  export type Response = IEnterpriseLmsSystemConfiguration;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/systemConfigurations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/systemConfigurations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSystemConfiguration =>
    typia.random<IEnterpriseLmsSystemConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a system configuration setting permanently.
 *
 * Permanently deletes a system configuration by its unique identifier. This is
 * a hard delete operation with no recovery. Only systemAdmin users may perform
 * this action. No response body is returned upon successful deletion. Errors
 * returned if specified ID does not exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system configuration to delete
 * @path /enterpriseLms/systemAdmin/systemConfigurations/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.systemConfigurations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the system configuration to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/systemConfigurations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/systemConfigurations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
