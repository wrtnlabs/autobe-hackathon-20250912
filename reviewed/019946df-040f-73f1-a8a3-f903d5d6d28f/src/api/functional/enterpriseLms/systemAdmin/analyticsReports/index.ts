import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAnalyticsReport } from "../../../../structures/IEnterpriseLmsAnalyticsReport";
import { IPageIEnterpriseLmsAnalyticsReport } from "../../../../structures/IPageIEnterpriseLmsAnalyticsReport";

/**
 * Create a new analytics report record in the Enterprise LMS.
 *
 * Incoming request body must provide all necessary data as specified by
 * 'IEnterpriseLmsAnalyticsReport.ICreate'.
 *
 * Analytics reports are tenant-scoped and used for dashboard presentation and
 * compliance.
 *
 * Access control limits this operation to appropriate roles.
 *
 * Successfully created reports return the new analytics report entity.
 *
 * Validation errors result in appropriate error responses.
 *
 * @param props.connection
 * @param props.body Creation info for the analytics report
 * @path /enterpriseLms/systemAdmin/analyticsReports
 * @accessor api.functional.enterpriseLms.systemAdmin.analyticsReports.createAnalyticsReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createAnalyticsReport(
  connection: IConnection,
  props: createAnalyticsReport.Props,
): Promise<createAnalyticsReport.Response> {
  return true === connection.simulate
    ? createAnalyticsReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createAnalyticsReport.METADATA,
          path: createAnalyticsReport.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createAnalyticsReport {
  export type Props = {
    /** Creation info for the analytics report */
    body: IEnterpriseLmsAnalyticsReport.ICreate;
  };
  export type Body = IEnterpriseLmsAnalyticsReport.ICreate;
  export type Response = IEnterpriseLmsAnalyticsReport;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/analyticsReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/analyticsReports";
  export const random = (): IEnterpriseLmsAnalyticsReport =>
    typia.random<IEnterpriseLmsAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: createAnalyticsReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createAnalyticsReport.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of analytics reports.
 *
 * Retrieve a filtered, paginated list of tenant-specific analytics reports in
 * the Enterprise LMS. This operation utilizes request parameters to search and
 * sort reports efficiently.
 *
 * It interacts with the 'enterprise_lms_analytics_reports' table capturing
 * rich, precomputed analytics for dashboard display and audit compliance.
 *
 * Supports filters such as report type, tenant, and generation date ranges
 * along with pagination.
 *
 * Access is restricted to authorized system roles enabling analytics view.
 *
 * Returns paginated summaries optimized for list retrieval.
 *
 * Handles invalid parameters with appropriate error responses.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for analytics
 *   reports filtering
 * @path /enterpriseLms/systemAdmin/analyticsReports
 * @accessor api.functional.enterpriseLms.systemAdmin.analyticsReports.searchAnalyticsReports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchAnalyticsReports(
  connection: IConnection,
  props: searchAnalyticsReports.Props,
): Promise<searchAnalyticsReports.Response> {
  return true === connection.simulate
    ? searchAnalyticsReports.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchAnalyticsReports.METADATA,
          path: searchAnalyticsReports.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchAnalyticsReports {
  export type Props = {
    /**
     * Search criteria and pagination parameters for analytics reports
     * filtering
     */
    body: IEnterpriseLmsAnalyticsReport.IRequest;
  };
  export type Body = IEnterpriseLmsAnalyticsReport.IRequest;
  export type Response = IPageIEnterpriseLmsAnalyticsReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/analyticsReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/analyticsReports";
  export const random = (): IPageIEnterpriseLmsAnalyticsReport.ISummary =>
    typia.random<IPageIEnterpriseLmsAnalyticsReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchAnalyticsReports.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchAnalyticsReports.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed analytics report by ID.
 *
 * Fetch detailed analytics report information identified by
 * 'analyticsReportId'.
 *
 * This report includes full metadata, filter parameters, generation timestamp,
 * and JSON content necessary for dashboard presentation and audit trails.
 *
 * The operation accesses the 'enterprise_lms_analytics_reports' table scoped by
 * tenant.
 *
 * Role-based access controls ensure only permitted users can retrieve the
 * report.
 *
 * Returns a detailed analytics report entity.
 *
 * Errors for missing records or unauthorized requests are handled by the
 * backend.
 *
 * @param props.connection
 * @param props.analyticsReportId Unique UUID of the analytics report to
 *   retrieve
 * @path /enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId
 * @accessor api.functional.enterpriseLms.systemAdmin.analyticsReports.atAnalyticsReport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atAnalyticsReport(
  connection: IConnection,
  props: atAnalyticsReport.Props,
): Promise<atAnalyticsReport.Response> {
  return true === connection.simulate
    ? atAnalyticsReport.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atAnalyticsReport.METADATA,
          path: atAnalyticsReport.path(props),
          status: null,
        },
      );
}
export namespace atAnalyticsReport {
  export type Props = {
    /** Unique UUID of the analytics report to retrieve */
    analyticsReportId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsAnalyticsReport;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/analyticsReports/${encodeURIComponent(props.analyticsReportId ?? "null")}`;
  export const random = (): IEnterpriseLmsAnalyticsReport =>
    typia.random<IEnterpriseLmsAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: atAnalyticsReport.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atAnalyticsReport.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsReportId")(() =>
        typia.assert(props.analyticsReportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing analytics report identified by its unique
 * `analyticsReportId`. This operation targets the
 * `enterprise_lms_analytics_reports` table, allowing modification of report
 * details including `reportName`, `reportType`, `parametersJson`,
 * `contentJson`, and update timestamps.
 *
 * Security: Restricted to users with the `systemAdmin` role to ensure only
 * authorized personnel can modify analytics data.
 *
 * Parameters:
 *
 * - `analyticsReportId` (UUID): The unique identifier for the analytics report to
 *   update.
 *
 * Request Body: Must conform to `IEnterpriseLmsAnalyticsReport.IUpdate`
 * including all modifiable fields as per the Prisma schema.
 *
 * Response: Returns the updated analytics report object.
 *
 * Errors:
 *
 * - 404 Not Found if the report does not exist.
 * - 403 Forbidden if the user lacks the appropriate permissions.
 *
 * This operation is crucial for maintaining accurate and current analytics
 * data, supporting enterprise decision making and compliance reporting.
 *
 * @param props.connection
 * @param props.analyticsReportId Unique identifier of the analytics report to
 *   update
 * @param props.body Analytics report update details
 * @path /enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId
 * @accessor api.functional.enterpriseLms.systemAdmin.analyticsReports.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the analytics report to update */
    analyticsReportId: string & tags.Format<"uuid">;

    /** Analytics report update details */
    body: IEnterpriseLmsAnalyticsReport.IUpdate;
  };
  export type Body = IEnterpriseLmsAnalyticsReport.IUpdate;
  export type Response = IEnterpriseLmsAnalyticsReport;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/analyticsReports/${encodeURIComponent(props.analyticsReportId ?? "null")}`;
  export const random = (): IEnterpriseLmsAnalyticsReport =>
    typia.random<IEnterpriseLmsAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsReportId")(() =>
        typia.assert(props.analyticsReportId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an analytics report.
 *
 * Delete a specific analytics report permanently using its unique
 * `analyticsReportId`. This operation directly removes the record from the
 * `enterprise_lms_analytics_reports` table.
 *
 * Security: Restricted to the `systemAdmin` role to prevent unauthorized data
 * loss.
 *
 * Parameters:
 *
 * - `analyticsReportId` (UUID): Identifier of the report to delete.
 *
 * Behavior: This is a hard delete; the record will no longer exist in the
 * database after successful execution.
 *
 * Errors:
 *
 * - 404 Not Found if the report does not exist.
 * - 403 Forbidden if the user is not authorized.
 *
 * Use with caution as this operation permanently deletes data relevant for
 * compliance and reporting.
 *
 * @param props.connection
 * @param props.analyticsReportId Unique identifier of the analytics report to
 *   delete
 * @path /enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId
 * @accessor api.functional.enterpriseLms.systemAdmin.analyticsReports.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the analytics report to delete */
    analyticsReportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/analyticsReports/:analyticsReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/analyticsReports/${encodeURIComponent(props.analyticsReportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("analyticsReportId")(() =>
        typia.assert(props.analyticsReportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
