import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsOrganizationAdmin } from "../../../../structures/IEnterpriseLmsOrganizationAdmin";
import { IPageIEnterpriseLmsOrganizationadmin } from "../../../../structures/IPageIEnterpriseLmsOrganizationadmin";

/**
 * Search and list organization administrators.
 *
 * Search and retrieve a paginated list of organization administrators. Supports
 * filtering, sorting, and pagination.
 *
 * This operation operates on the enterprise_lms_organizationadmin table,
 * returning summaries optimized for list display.
 *
 * Authorization roles include systemAdmin and organizationAdmin to enable
 * management within tenant boundaries.
 *
 * This is used to support user and role management features in the admin UI.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for organization
 *   administrator filtering
 * @path /enterpriseLms/systemAdmin/organizationadmins
 * @accessor api.functional.enterpriseLms.systemAdmin.organizationadmins.searchOrganizationAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchOrganizationAdmins(
  connection: IConnection,
  props: searchOrganizationAdmins.Props,
): Promise<searchOrganizationAdmins.Response> {
  return true === connection.simulate
    ? searchOrganizationAdmins.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchOrganizationAdmins.METADATA,
          path: searchOrganizationAdmins.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchOrganizationAdmins {
  export type Props = {
    /**
     * Search criteria and pagination parameters for organization
     * administrator filtering
     */
    body: IEnterpriseLmsOrganizationAdmin.IRequest;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.IRequest;
  export type Response = IPageIEnterpriseLmsOrganizationadmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/organizationadmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/organizationadmins";
  export const random = (): IPageIEnterpriseLmsOrganizationadmin.ISummary =>
    typia.random<IPageIEnterpriseLmsOrganizationadmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchOrganizationAdmins.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchOrganizationAdmins.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed Organization Administrator user.
 *
 * Retrieve full details of an Organization Administrator user by unique
 * identifier.
 *
 * This operation accesses the enterprise_lms_organizationadmin table, returning
 * all user information including account status and tenant context.
 *
 * It requires the organizationadminId path parameter.
 *
 * Authorization roles include systemAdmin and organizationAdmin.
 *
 * Useful for editing and detail inspection in admin interfaces.
 *
 * @param props.connection
 * @param props.organizationadminId Unique identifier of the target organization
 *   admin user
 * @path /enterpriseLms/systemAdmin/organizationadmins/:organizationadminId
 * @accessor api.functional.enterpriseLms.systemAdmin.organizationadmins.atOrganizationAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atOrganizationAdmin(
  connection: IConnection,
  props: atOrganizationAdmin.Props,
): Promise<atOrganizationAdmin.Response> {
  return true === connection.simulate
    ? atOrganizationAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atOrganizationAdmin.METADATA,
          path: atOrganizationAdmin.path(props),
          status: null,
        },
      );
}
export namespace atOrganizationAdmin {
  export type Props = {
    /** Unique identifier of the target organization admin user */
    organizationadminId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsOrganizationAdmin;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/organizationadmins/:organizationadminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/organizationadmins/${encodeURIComponent(props.organizationadminId ?? "null")}`;
  export const random = (): IEnterpriseLmsOrganizationAdmin =>
    typia.random<IEnterpriseLmsOrganizationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: atOrganizationAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atOrganizationAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationadminId")(() =>
        typia.assert(props.organizationadminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
