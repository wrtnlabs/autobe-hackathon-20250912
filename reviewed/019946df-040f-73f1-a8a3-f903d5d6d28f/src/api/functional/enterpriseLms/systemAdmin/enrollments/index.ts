import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsEnrollment } from "../../../../structures/IEnterpriseLmsEnrollment";
export * as enrollmentPrerequisites from "./enrollmentPrerequisites/index";

/**
 * Update an enrollment by ID.
 *
 * Update an existing enrollment by ID in the Enterprise LMS system. This
 * operation allows modification of enrollment fields such as the enrollment
 * status, business status, and timestamps under tenant control.
 *
 * Updates are validated against business rules ensuring that only active
 * enrollments are modified and proper statuses are used. This operation is key
 * for managing learner progression in training programs including enrollment
 * cancellations or completions.
 *
 * Tenant isolation is strictly enforced: only enrollments belonging to the
 * authorized tenant context can be updated.
 *
 * The underlying database table is enterprise_lms_enrollments, which stores
 * learner enrollment information linking learners to learning paths. The update
 * input must comply with the IEnterpriseLmsEnrollment.IUpdate interface.
 *
 * Authorization roles are systemAdmin, organizationAdmin, and departmentManager
 * with sufficient permissions to update enrollment data.
 *
 * No response body is returned as the operation confirms update via HTTP status
 * codes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the enrollment to update
 * @param props.body Enrollment update data
 * @path /enterpriseLms/systemAdmin/enrollments/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the enrollment to update */
    id: string & tags.Format<"uuid">;

    /** Enrollment update data */
    body: IEnterpriseLmsEnrollment.IUpdate;
  };
  export type Body = IEnterpriseLmsEnrollment.IUpdate;
  export type Response = IEnterpriseLmsEnrollment;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/enrollments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsEnrollment =>
    typia.random<IEnterpriseLmsEnrollment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an enrollment by ID in the Enterprise LMS. The deleted_at
 * timestamp is set to indicate logical deletion and exclude the enrollment from
 * active records.
 *
 * This protects data integrity and complies with retention policies by
 * preserving historic enrollment data while marking it inactive.
 *
 * Tenant context and authorization roles systemAdmin, organizationAdmin, and
 * departmentManager are enforced.
 *
 * No response body is returned; success is indicated by HTTP status codes only.
 *
 * @param props.connection
 * @param props.id Unique identifier of the enrollment to delete (soft delete)
 * @path /enterpriseLms/systemAdmin/enrollments/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the enrollment to delete (soft delete) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/enrollments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
