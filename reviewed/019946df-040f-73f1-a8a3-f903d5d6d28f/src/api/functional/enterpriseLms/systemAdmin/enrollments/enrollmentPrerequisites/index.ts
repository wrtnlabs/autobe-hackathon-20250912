import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsEnrollmentPrerequisite } from "../../../../../structures/IEnterpriseLmsEnrollmentPrerequisite";
import { IPageIEnterpriseLmsEnrollmentPrerequisite } from "../../../../../structures/IPageIEnterpriseLmsEnrollmentPrerequisite";

/**
 * Create a new enrollment prerequisite for a specific enrollment.
 *
 * This operation creates a new Enrollment Prerequisite associated with a
 * specific enrollment entity identified by enrollmentId. It adds a prerequisite
 * course requirement that the learner must satisfy before completing or
 * progressing in the enrollment.
 *
 * Security considerations restrict creation of prerequisites to authorized
 * roles such as organization or system administrators. The prerequisite course
 * is referenced by its UUID and must exist within the tenant's content
 * catalog.
 *
 * The API enforces data integrity by validating that the referenced enrollment
 * and prerequisite course are valid and belong to the same tenant. Failure
 * scenarios include attempts to add duplicate prerequisites or reference
 * invalid courses.
 *
 * This operation complements updating and deleting enrollment prerequisites,
 * forming the complete management of prerequisite course requirements within
 * the enrollment lifecycle.
 *
 * @param props.connection
 * @param props.enrollmentId Unique identifier of the target enrollment
 * @param props.body Information for the new enrollment prerequisite
 * @path /enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.enrollmentPrerequisites.createEnrollmentPrerequisite
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createEnrollmentPrerequisite(
  connection: IConnection,
  props: createEnrollmentPrerequisite.Props,
): Promise<createEnrollmentPrerequisite.Response> {
  return true === connection.simulate
    ? createEnrollmentPrerequisite.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEnrollmentPrerequisite.METADATA,
          path: createEnrollmentPrerequisite.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createEnrollmentPrerequisite {
  export type Props = {
    /** Unique identifier of the target enrollment */
    enrollmentId: string;

    /** Information for the new enrollment prerequisite */
    body: IEnterpriseLmsEnrollmentPrerequisite.ICreate;
  };
  export type Body = IEnterpriseLmsEnrollmentPrerequisite.ICreate;
  export type Response = IEnterpriseLmsEnrollmentPrerequisite;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.enrollmentId ?? "null")}/enrollmentPrerequisites`;
  export const random = (): IEnterpriseLmsEnrollmentPrerequisite =>
    typia.random<IEnterpriseLmsEnrollmentPrerequisite>();
  export const simulate = (
    connection: IConnection,
    props: createEnrollmentPrerequisite.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createEnrollmentPrerequisite.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enrollmentId")(() => typia.assert(props.enrollmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List enrollment prerequisites for an enrollment.
 *
 * Retrieve a filtered and paginated list of enrollment prerequisites associated
 * with a specific enrollment. This list shows courses that the learner must
 * complete before proceeding.
 *
 * Supports pagination, sorting, and filtering enabling efficient frontend data
 * loading and UI interactions.
 *
 * Tenant isolation and security roles systemAdmin, organizationAdmin, and
 * departmentManager ensure data protection.
 *
 * Response includes enrollment prerequisite summaries optimized for display in
 * overview dashboards or detailed prerequisite views.
 *
 * Underlying table is enterprise_lms_enrollment_prerequisites.
 *
 * @param props.connection
 * @param props.enrollmentId Unique identifier of the enrollment to list
 *   prerequisites for
 * @param props.body Search and pagination parameters for enrollment
 *   prerequisites
 * @path /enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.enrollmentPrerequisites.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the enrollment to list prerequisites for */
    enrollmentId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for enrollment prerequisites */
    body: IEnterpriseLmsEnrollmentPrerequisite.IRequest;
  };
  export type Body = IEnterpriseLmsEnrollmentPrerequisite.IRequest;
  export type Response = IPageIEnterpriseLmsEnrollmentPrerequisite.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.enrollmentId ?? "null")}/enrollmentPrerequisites`;
  export const random =
    (): IPageIEnterpriseLmsEnrollmentPrerequisite.ISummary =>
      typia.random<IPageIEnterpriseLmsEnrollmentPrerequisite.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enrollmentId")(() => typia.assert(props.enrollmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get specific enrollment prerequisite details.
 *
 * Retrieve detailed information about a specific enrollment prerequisite linked
 * to an enrollment.
 *
 * Provides comprehensive data on prerequisite course and linkage to enrollment,
 * supporting detailed audit, UI display, and validation features.
 *
 * Tenant access restrictions and role-based security apply.
 *
 * Database table is enterprise_lms_enrollment_prerequisites.
 *
 * @param props.connection
 * @param props.enrollmentId Unique identifier of the enrollment owning the
 *   prerequisite
 * @param props.enrollmentPrerequisiteId Unique identifier of the enrollment
 *   prerequisite record
 * @path /enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.enrollmentPrerequisites.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the enrollment owning the prerequisite */
    enrollmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the enrollment prerequisite record */
    enrollmentPrerequisiteId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsEnrollmentPrerequisite;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.enrollmentId ?? "null")}/enrollmentPrerequisites/${encodeURIComponent(props.enrollmentPrerequisiteId ?? "null")}`;
  export const random = (): IEnterpriseLmsEnrollmentPrerequisite =>
    typia.random<IEnterpriseLmsEnrollmentPrerequisite>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enrollmentId")(() => typia.assert(props.enrollmentId));
      assert.param("enrollmentPrerequisiteId")(() =>
        typia.assert(props.enrollmentPrerequisiteId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an enrollment prerequisite by its ID for a specific enrollment.
 *
 * This operation updates an existing Enrollment Prerequisite linked to a
 * specific enrollment and identified by enrollmentPrerequisiteId. It allows
 * modification of prerequisite course references or other mutable attributes.
 *
 * Security restrictions ensure only authorized roles such as organization or
 * system administrators may perform updates.
 *
 * All updated data must remain consistent within the tenant scope, avoiding
 * cross-tenant conflicts. Validation prevents illegal prerequisite associations
 * and duplicate entries.
 *
 * This update operation is part of the complete CRUD lifecycle for enrollment
 * prerequisites managed under enrollment entities.
 *
 * @param props.connection
 * @param props.enrollmentId Unique identifier of the target enrollment
 * @param props.enrollmentPrerequisiteId Unique identifier of the enrollment
 *   prerequisite to update
 * @param props.body Updated information for the enrollment prerequisite
 * @path /enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.enrollmentPrerequisites.updateEnrollmentPrerequisite
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateEnrollmentPrerequisite(
  connection: IConnection,
  props: updateEnrollmentPrerequisite.Props,
): Promise<updateEnrollmentPrerequisite.Response> {
  return true === connection.simulate
    ? updateEnrollmentPrerequisite.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateEnrollmentPrerequisite.METADATA,
          path: updateEnrollmentPrerequisite.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateEnrollmentPrerequisite {
  export type Props = {
    /** Unique identifier of the target enrollment */
    enrollmentId: string;

    /** Unique identifier of the enrollment prerequisite to update */
    enrollmentPrerequisiteId: string;

    /** Updated information for the enrollment prerequisite */
    body: IEnterpriseLmsEnrollmentPrerequisite.IUpdate;
  };
  export type Body = IEnterpriseLmsEnrollmentPrerequisite.IUpdate;
  export type Response = IEnterpriseLmsEnrollmentPrerequisite;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.enrollmentId ?? "null")}/enrollmentPrerequisites/${encodeURIComponent(props.enrollmentPrerequisiteId ?? "null")}`;
  export const random = (): IEnterpriseLmsEnrollmentPrerequisite =>
    typia.random<IEnterpriseLmsEnrollmentPrerequisite>();
  export const simulate = (
    connection: IConnection,
    props: updateEnrollmentPrerequisite.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateEnrollmentPrerequisite.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enrollmentId")(() => typia.assert(props.enrollmentId));
      assert.param("enrollmentPrerequisiteId")(() =>
        typia.assert(props.enrollmentPrerequisiteId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an enrollment prerequisite by ID for a specific enrollment.
 *
 * This operation deletes a specific Enrollment Prerequisite associated with a
 * given enrollment. The prerequisite is identified by
 * enrollmentPrerequisiteId.
 *
 * Security requirements specify this can only be performed by high privilege
 * roles such as systemAdmin or organizationAdmin to maintain enrollment
 * integrity.
 *
 * This operation performs a hard delete, permanently removing the record from
 * the database. Deleted prerequisites cannot be recovered.
 *
 * This complements the create and update operations for managing course
 * prerequisite requirements within learner enrollments.
 *
 * @param props.connection
 * @param props.enrollmentId Unique identifier of the target enrollment
 * @param props.enrollmentPrerequisiteId Unique identifier of the enrollment
 *   prerequisite to delete
 * @path /enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId
 * @accessor api.functional.enterpriseLms.systemAdmin.enrollments.enrollmentPrerequisites.eraseEnrollmentPrerequisite
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseEnrollmentPrerequisite(
  connection: IConnection,
  props: eraseEnrollmentPrerequisite.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseEnrollmentPrerequisite.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseEnrollmentPrerequisite.METADATA,
          path: eraseEnrollmentPrerequisite.path(props),
          status: null,
        },
      );
}
export namespace eraseEnrollmentPrerequisite {
  export type Props = {
    /** Unique identifier of the target enrollment */
    enrollmentId: string;

    /** Unique identifier of the enrollment prerequisite to delete */
    enrollmentPrerequisiteId: string;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites/:enrollmentPrerequisiteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/enrollments/${encodeURIComponent(props.enrollmentId ?? "null")}/enrollmentPrerequisites/${encodeURIComponent(props.enrollmentPrerequisiteId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseEnrollmentPrerequisite.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseEnrollmentPrerequisite.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enrollmentId")(() => typia.assert(props.enrollmentId));
      assert.param("enrollmentPrerequisiteId")(() =>
        typia.assert(props.enrollmentPrerequisiteId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
