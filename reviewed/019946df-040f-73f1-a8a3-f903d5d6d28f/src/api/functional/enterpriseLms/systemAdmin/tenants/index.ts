import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsTenant } from "../../../../structures/IEnterpriseLmsTenant";
import { IPageIEnterpriseLmsTenant } from "../../../../structures/IPageIEnterpriseLmsTenant";
export * as tenantSettings from "./tenantSettings/index";

/**
 * Create a new tenant organization.
 *
 * Create a new enterprise LMS tenant organization. This operation allows
 * administrators to add a new tenant with a unique code and name to the
 * system.
 *
 * Input validation ensures no duplication of tenant codes and required data
 * presence. The created tenant resource is returned to confirm successful
 * creation.
 *
 * Only authorized roles can perform this operation to maintain system integrity
 * and prevent unauthorized tenant creation.
 *
 * @param props.connection
 * @param props.body New tenant creation data
 * @path /enterpriseLms/systemAdmin/tenants
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New tenant creation data */
    body: IEnterpriseLmsTenant.ICreate;
  };
  export type Body = IEnterpriseLmsTenant.ICreate;
  export type Response = IEnterpriseLmsTenant;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/tenants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/tenants";
  export const random = (): IEnterpriseLmsTenant =>
    typia.random<IEnterpriseLmsTenant>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of tenants.
 *
 * This operation provides clients the ability to search and retrieve a
 * filtered, paginated list of tenants in the Enterprise Learning Management
 * System. It supports complex search capabilities based on tenant code, tenant
 * name, creation date range, and deletion status, enabling efficient management
 * of tenant organizations.
 *
 * The operation ensures multi-tenancy support by returning tenants scoped
 * appropriately and includes index-based filtering for performance. Security
 * considerations include restricting tenant data visibility based on the
 * invoking user's permissions and roles.
 *
 * Integration with the enterprise_lms_tenants Prisma model guarantees
 * consistent data retrieval aligned with the underlying structure. The
 * paginated response includes summary data to reduce payload size and improve
 * response times.
 *
 * Errors in search parameter syntax or unauthorized access are handled
 * gracefully with proper HTTP status codes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for tenant
 *   filtering
 * @path /enterpriseLms/systemAdmin/tenants
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for tenant filtering */
    body: IEnterpriseLmsTenant.IRequest;
  };
  export type Body = IEnterpriseLmsTenant.IRequest;
  export type Response = IPageIEnterpriseLmsTenant.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/tenants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/tenants";
  export const random = (): IPageIEnterpriseLmsTenant.ISummary =>
    typia.random<IPageIEnterpriseLmsTenant.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific tenant.
 *
 * Retrieve detailed information of an enterprise LMS tenant by its unique
 * identifier. This operation supports tenant administrators and system
 * administrators in viewing comprehensive tenant data including organizational
 * details, timestamps, and status.
 *
 * Security validation is performed to ensure that only authorized roles can
 * access tenant data. The operation returns a single tenant resource matching
 * the provided ID or errors if not found.
 *
 * The database entity corresponds directly to the enterprise_lms_tenants table,
 * ensuring data integrity and consistent view of tenant records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the tenant
 * @path /enterpriseLms/systemAdmin/tenants/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the tenant */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsTenant;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/tenants/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/tenants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsTenant =>
    typia.random<IEnterpriseLmsTenant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update tenant information.
 *
 * Update existing information of an enterprise LMS tenant identified by its ID.
 * This operation enables tenant administrators to modify tenant data such as
 * name and other editable properties.
 *
 * Security checks ensure only authorized users can update tenant records. The
 * operation returns the updated tenant resource on success.
 *
 * The underlying data source is the enterprise_lms_tenants table, ensuring a
 * consistent single source of truth for tenant information.
 *
 * @param props.connection
 * @param props.id Unique identifier of the tenant
 * @param props.body Tenant update data
 * @path /enterpriseLms/systemAdmin/tenants/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the tenant */
    id: string & tags.Format<"uuid">;

    /** Tenant update data */
    body: IEnterpriseLmsTenant.IUpdate;
  };
  export type Body = IEnterpriseLmsTenant.IUpdate;
  export type Response = IEnterpriseLmsTenant;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/tenants/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/tenants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsTenant =>
    typia.random<IEnterpriseLmsTenant>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete tenant organization by ID, permanently removing all tenant data.
 *
 * This API endpoint allows for the permanent removal of a tenant organization
 * identified by its UUID. Operating on the enterprise_lms_tenants table, this
 * operation enforces full deletion including cascade deletes of related
 * entities to maintain data isolation and compliance.
 *
 * Security considerations restrict this operation to users with the
 * 'systemAdmin' role to prevent unauthorized data loss.
 *
 * This operation matches the DELETE method at /tenants/{id}.
 *
 * Error handling includes tenant existence verification and permission checks.
 *
 * Use related operations GET /tenants/{tenantId}/tenantSettings for tenant
 * configuration management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the tenant to be deleted
 * @path /enterpriseLms/systemAdmin/tenants/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the tenant to be deleted */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/tenants/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/tenants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
