import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsTenantSettings } from "../../../../../structures/IEnterpriseLmsTenantSettings";

/**
 * Update a tenant setting for a specific tenant organization.
 *
 * Update an existing tenant setting for a given tenant organization by the
 * tenantSetting ID.
 *
 * This operation enables modification of branding elements such as logo URIs,
 * primary and secondary colors, custom domain, and CSS overrides tailored for
 * each tenant. The system strictly maintains tenant scoping and integrity
 * during update operations.
 *
 * Security considerations include limiting this API to authorized tenant
 * administrators and system administrators with appropriate permissions.
 * Invalid tenant IDs or setting IDs result in HTTP 404 Not Found.
 *
 * The underlying database entity is enterprise_lms_tenant_settings in the
 * Prisma schema, ensuring all updated data conforms to expected types,
 * validation rules, and business constraints.
 *
 * Clients must supply the full updated tenant settings payload, except for
 * timestamps which are managed automatically by the system.
 *
 * Errors during update (e.g., conflicts, validation failures) will return
 * appropriate HTTP error codes with descriptive messages.
 *
 * Related API operations include fetching tenant settings by ID and creating
 * new tenant settings records.
 *
 * This operation validates uniqueness for tenant-specific custom domain names
 * and branding configurations.
 *
 * @param props.connection
 * @param props.tenantId Unique identifier of the target tenant organization
 * @param props.id Unique identifier of the tenant setting to update.
 * @param props.body Updated tenant settings information
 * @path /enterpriseLms/systemAdmin/tenants/:tenantId/tenantSettings/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.tenantSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target tenant organization */
    tenantId: string & tags.Format<"uuid">;

    /** Unique identifier of the tenant setting to update. */
    id: string & tags.Format<"uuid">;

    /** Updated tenant settings information */
    body: IEnterpriseLmsTenantSettings.IUpdate;
  };
  export type Body = IEnterpriseLmsTenantSettings.IUpdate;
  export type Response = IEnterpriseLmsTenantSettings;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/tenants/:tenantId/tenantSettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/tenants/${encodeURIComponent(props.tenantId ?? "null")}/tenantSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsTenantSettings =>
    typia.random<IEnterpriseLmsTenantSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tenantId")(() => typia.assert(props.tenantId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a tenant setting for a specific tenant organization.
 *
 * Delete a tenant setting by ID for a specific tenant organization.
 *
 * This operation performs a hard delete, completely removing the tenant setting
 * record from the database. It is irreversible and will cause all associated
 * branding and customization data for this setting to be lost.
 *
 * Access is strictly limited to system administrators and tenants' organization
 * administrators with permissions to manage tenant settings.
 *
 * Failed deletion attempts for non-existent IDs will return HTTP 404 Not Found.
 *
 * Consider other related API operations to manage tenant settings lifecycle.
 *
 * @param props.connection
 * @param props.tenantId Unique identifier of the target tenant organization
 * @param props.id Unique identifier of the tenant setting to delete.
 * @path /enterpriseLms/systemAdmin/tenants/:tenantId/tenantSettings/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.tenants.tenantSettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target tenant organization */
    tenantId: string & tags.Format<"uuid">;

    /** Unique identifier of the tenant setting to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/tenants/:tenantId/tenantSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/tenants/${encodeURIComponent(props.tenantId ?? "null")}/tenantSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tenantId")(() => typia.assert(props.tenantId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
