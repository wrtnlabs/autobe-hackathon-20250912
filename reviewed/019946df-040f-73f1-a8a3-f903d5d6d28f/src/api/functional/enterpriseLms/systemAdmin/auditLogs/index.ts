import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAuditLog } from "../../../../structures/IEnterpriseLmsAuditLog";
import { IPageIEnterpriseLmsAuditLog } from "../../../../structures/IPageIEnterpriseLmsAuditLog";

/**
 * Search and retrieve paginated audit logs.
 *
 * Retrieves paginated audit logs filtered by criteria such as date range,
 * action, and user. Only systemAdmin role is authorized to access this
 * sensitive data. Supports full-text search and trigram indexing on action and
 * description. Useful for compliance and forensic investigations. Returns
 * paginated response of audit log summaries, with error handling for invalid
 * filters or authorization failures.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination criteria for audit logs
 * @path /enterpriseLms/systemAdmin/auditLogs
 * @accessor api.functional.enterpriseLms.systemAdmin.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, search, and pagination criteria for audit logs */
    body: IEnterpriseLmsAuditLog.IRequest;
  };
  export type Body = IEnterpriseLmsAuditLog.IRequest;
  export type Response = IPageIEnterpriseLmsAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/auditLogs";
  export const random = (): IPageIEnterpriseLmsAuditLog.ISummary =>
    typia.random<IPageIEnterpriseLmsAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a single audit log entry.
 *
 * Retrieve a specific audit log entry from the Enterprise LMS system using its
 * unique ID. The operation returns all associated metadata such as tenant ID,
 * action details, user responsible, descriptions, and timestamps.
 *
 * Access control ensures that only authorized roles such as system admins can
 * fetch audit logs to maintain security and confidentiality.
 *
 * This operation queries the 'enterprise_lms_audit_logs' table and returns
 * detailed audit log data consistent with the database schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry to retrieve
 * @path /enterpriseLms/systemAdmin/auditLogs/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsAuditLog =>
    typia.random<IEnterpriseLmsAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
