import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsNotificationLog } from "../../../../structures/IEnterpriseLmsNotificationLog";
import { IPageIEnterpriseLmsNotificationLog } from "../../../../structures/IPageIEnterpriseLmsNotificationLog";

/**
 * Search and retrieve a filtered, paginated list of notification logs.
 *
 * Retrieve a filtered and paginated list of notification logs from the
 * Enterprise LMS system. This allows for detailed querying of notifications
 * sent to users, including email, SMS, and push notifications. The result
 * includes essential metadata such as delivery status and timestamps.
 *
 * Security and data isolation are enforced per tenant. Only authorized system,
 * organization, or department administrators can access this data.
 *
 * This operation corresponds to the enterprise_lms_notification_logs table in
 * the Prisma schema, leveraging all its searchable fields for flexible querying
 * with pagination.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for notification
 *   log filtering
 * @path /enterpriseLms/systemAdmin/notificationLogs
 * @accessor api.functional.enterpriseLms.systemAdmin.notificationLogs.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for notification log
     * filtering
     */
    body: IEnterpriseLmsNotificationLog.IRequest;
  };
  export type Body = IEnterpriseLmsNotificationLog.IRequest;
  export type Response = IPageIEnterpriseLmsNotificationLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/notificationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/notificationLogs";
  export const random = (): IPageIEnterpriseLmsNotificationLog.ISummary =>
    typia.random<IPageIEnterpriseLmsNotificationLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a notification log by ID.
 *
 * Retrieve detailed information about a specific notification log entry by its
 * ID within Enterprise LMS. Provides full notification details including type,
 * recipient, message body, delivery status, and timestamps.
 *
 * Access control is enforced for tenant data isolation, allowing only
 * authorized administrators.
 *
 * This operation maps directly to the enterprise_lms_notification_logs table in
 * the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target notification log
 * @path /enterpriseLms/systemAdmin/notificationLogs/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.notificationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification log */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsNotificationLog;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/notificationLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/notificationLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsNotificationLog =>
    typia.random<IEnterpriseLmsNotificationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
