import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentVersion } from "../../../../../structures/IEnterpriseLmsContentVersion";
import { IPageIEnterpriseLmsContentVersion } from "../../../../../structures/IPageIEnterpriseLmsContentVersion";

/**
 * Retrieve a paginated list of content versions for a specific content.
 *
 * Fetches historical versions of a specific content item, allowing users to
 * browse, filter, and paginate through previous states. This facilitates
 * content auditing and rollback functions. The request body allows specifying
 * search parameters such as version numbers and timestamps.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content
 * @param props.body Search parameters and pagination options for content
 *   versions
 * @path /enterpriseLms/systemAdmin/contents/:contentId/contentVersions
 * @accessor api.functional.enterpriseLms.systemAdmin.contents.contentVersions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target content */
    contentId: string & tags.Format<"uuid">;

    /** Search parameters and pagination options for content versions */
    body: IEnterpriseLmsContentVersion.IRequest;
  };
  export type Body = IEnterpriseLmsContentVersion.IRequest;
  export type Response = IPageIEnterpriseLmsContentVersion.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/contents/:contentId/contentVersions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentVersions`;
  export const random = (): IPageIEnterpriseLmsContentVersion.ISummary =>
    typia.random<IPageIEnterpriseLmsContentVersion.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a content version by ID.
 *
 * Retrieve detailed information for a single historical content version
 * identified by content UUID and version UUID. This is used for audit,
 * compliance, and content rollback functionality within the Enterprise LMS. No
 * request body is needed, and the full version detail is returned.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the parent content
 * @param props.id Unique identifier of the content version
 * @path /enterpriseLms/systemAdmin/contents/:contentId/contentVersions/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.contents.contentVersions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent content */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content version */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentVersion;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/contents/:contentId/contentVersions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentVersions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentVersion =>
    typia.random<IEnterpriseLmsContentVersion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
