import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentApprovalWorkflow } from "../../../../../structures/IEnterpriseLmsContentApprovalWorkflow";
import { IPageIEnterpriseLmsContentApprovalWorkflow } from "../../../../../structures/IPageIEnterpriseLmsContentApprovalWorkflow";

/**
 * Retrieve content approval workflow steps for a given content.
 *
 * Provides a paged view of content approval workflow steps linked to a
 * specified content entry. Users can query, filter, and paginate approval
 * steps, viewing step number, reviewer role, status, and comments per step.
 * This supports the content approval and compliance process. Tenant-based
 * access control applies.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content for approval
 *   workflows
 * @param props.body Parameters for searching and paginating approval workflow
 *   steps
 * @path /enterpriseLms/systemAdmin/contents/:contentId/contentApprovalWorkflows
 * @accessor api.functional.enterpriseLms.systemAdmin.contents.contentApprovalWorkflows.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the content for approval workflows */
    contentId: string & tags.Format<"uuid">;

    /** Parameters for searching and paginating approval workflow steps */
    body: IEnterpriseLmsContentApprovalWorkflow.IRequest;
  };
  export type Body = IEnterpriseLmsContentApprovalWorkflow.IRequest;
  export type Response = IPageIEnterpriseLmsContentApprovalWorkflow.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/contents/:contentId/contentApprovalWorkflows",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows`;
  export const random =
    (): IPageIEnterpriseLmsContentApprovalWorkflow.ISummary =>
      typia.random<IPageIEnterpriseLmsContentApprovalWorkflow.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
