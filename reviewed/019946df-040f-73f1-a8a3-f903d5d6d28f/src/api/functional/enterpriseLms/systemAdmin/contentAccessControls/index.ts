import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a content access control entry by ID.
 *
 * Permanently delete a content access control record identified by its unique
 * ID.
 *
 * This operation removes the access control rule from the system immediately.
 * Since the table supports soft deletion with a deleted_at column, this
 * endpoint implements a hard delete, fully erasing the record.
 *
 * Only system administrators are authorized to perform this action to ensure
 * secure management of access control policies within the LMS.
 *
 * The endpoint integrates directly with enterprise_lms_content_access_controls
 * Prisma entity, ensuring tenant-scoped access control management aligns with
 * system security policies.
 *
 * Use caution as this deletion cannot be undone and affects content access
 * behavior system-wide.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access control record to be
 *   deleted
 * @path /enterpriseLms/systemAdmin/contentAccessControls/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.contentAccessControls.eraseContentAccessControl
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseContentAccessControl(
  connection: IConnection,
  props: eraseContentAccessControl.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseContentAccessControl.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseContentAccessControl.METADATA,
          path: eraseContentAccessControl.path(props),
          status: null,
        },
      );
}
export namespace eraseContentAccessControl {
  export type Props = {
    /** Unique identifier of the content access control record to be deleted */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/contentAccessControls/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/contentAccessControls/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseContentAccessControl.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseContentAccessControl.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
