import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsIntegrationSettings } from "../../../../structures/IEnterpriseLmsIntegrationSettings";
import { IEnterpriseLmsIntegrationSetting } from "../../../../structures/IEnterpriseLmsIntegrationSetting";
import { IPageIEnterpriseLmsIntegrationSetting } from "../../../../structures/IPageIEnterpriseLmsIntegrationSetting";

/**
 * Create a new integration setting record in the system.
 *
 * This operation accepts configuration details for external integrations like
 * payment gateways, notification services, and analytics platforms.
 *
 * Only users with systemAdmin role can perform this operation.
 *
 * The input data is validated against unique constraints and references.
 *
 * Successful creation returns the full integration setting entity.
 *
 * @param props.connection
 * @param props.body New integration setting details
 * @path /enterpriseLms/systemAdmin/integrationSettings
 * @accessor api.functional.enterpriseLms.systemAdmin.integrationSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New integration setting details */
    body: IEnterpriseLmsIntegrationSettings.ICreate;
  };
  export type Body = IEnterpriseLmsIntegrationSettings.ICreate;
  export type Response = IEnterpriseLmsIntegrationSettings;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/integrationSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/integrationSettings";
  export const random = (): IEnterpriseLmsIntegrationSettings =>
    typia.random<IEnterpriseLmsIntegrationSettings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve integration settings.
 *
 * Retrieve a filtered and paginated list of external integration settings
 * within the Enterprise LMS. Supports advanced search, filtering, sorting, and
 * pagination. This operation returns summarized integration setting records
 * optimized for administrative management. Requires systemAdmin role
 * authorization for access control.
 *
 * Corresponds to the enterprise_lms_integration_settings table and its
 * tenant-scoped configurations.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for integration
 *   settings
 * @path /enterpriseLms/systemAdmin/integrationSettings
 * @accessor api.functional.enterpriseLms.systemAdmin.integrationSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for integration settings */
    body: IEnterpriseLmsIntegrationSetting.IRequest;
  };
  export type Body = IEnterpriseLmsIntegrationSetting.IRequest;
  export type Response = IPageIEnterpriseLmsIntegrationSetting.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/integrationSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/integrationSettings";
  export const random = (): IPageIEnterpriseLmsIntegrationSetting.ISummary =>
    typia.random<IPageIEnterpriseLmsIntegrationSetting.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific integration setting by ID.
 *
 * Retrieve detailed information of a specific integration setting by its unique
 * ID.
 *
 * This operation provides access to individual integration configuration
 * settings stored in the system, including API keys, endpoints, feature
 * toggles, and credentials for third-party platforms.
 *
 * Access is restricted to authorized roles to protect sensitive integration
 * details and maintain tenant data isolation.
 *
 * The operation queries the enterprise_lms_integration_settings table and
 * returns the full record.
 *
 * If the specified ID does not exist, an appropriate error response is
 * returned.
 *
 * @param props.connection
 * @param props.id The unique identifier of the integration setting
 * @path /enterpriseLms/systemAdmin/integrationSettings/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.integrationSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the integration setting */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsIntegrationSettings;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/integrationSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/integrationSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsIntegrationSettings =>
    typia.random<IEnterpriseLmsIntegrationSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an integration setting by ID.
 *
 * Update an existing integration setting by ID.
 *
 * Allows modification of integration configuration, including toggles, keys,
 * and credentials.
 *
 * Restricted to systemAdmin users to prevent unauthorized changes.
 *
 * Returns the updated integration setting on success.
 *
 * Returns error if ID not found or validation fails.
 *
 * @param props.connection
 * @param props.id The unique identifier of the integration setting to update
 * @param props.body Updated integration setting details
 * @path /enterpriseLms/systemAdmin/integrationSettings/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.integrationSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the integration setting to update */
    id: string & tags.Format<"uuid">;

    /** Updated integration setting details */
    body: IEnterpriseLmsIntegrationSettings.IUpdate;
  };
  export type Body = IEnterpriseLmsIntegrationSettings.IUpdate;
  export type Response = IEnterpriseLmsIntegrationSettings;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/integrationSettings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/integrationSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsIntegrationSettings =>
    typia.random<IEnterpriseLmsIntegrationSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an integration setting by ID.
 *
 * Permanently delete an integration setting by its ID.
 *
 * This operation removes the integration configuration from the system.
 *
 * Only users with systemAdmin role are authorized to perform this action.
 *
 * No request body or response body is involved.
 *
 * Returns no content on successful deletion.
 *
 * @param props.connection
 * @param props.id The unique identifier of the integration setting to delete
 * @path /enterpriseLms/systemAdmin/integrationSettings/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.integrationSettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the integration setting to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/integrationSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/integrationSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
