import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsExternalLearner } from "../../../../structures/IEnterpriseLmsExternalLearner";

/**
 * Update an existing external learner account.
 *
 * Update details of a specific external learner account by ID. Supports
 * modification of email, password hash, first and last names, and status
 * fields.
 *
 * This operation requires the externallearnerId path parameter to identify the
 * target user. All updates must maintain data validation and integrity.
 *
 * Used for administration or user self-service profile updates within tenant
 * boundaries.
 *
 * @param props.connection
 * @param props.externallearnerId Unique identifier of the target external
 *   learner
 * @param props.body External learner update data
 * @path /enterpriseLms/externalLearner/externallearners/:externallearnerId
 * @accessor api.functional.enterpriseLms.externalLearner.externallearners.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target external learner */
    externallearnerId: string;

    /** External learner update data */
    body: IEnterpriseLmsExternalLearner.IUpdate;
  };
  export type Body = IEnterpriseLmsExternalLearner.IUpdate;
  export type Response = IEnterpriseLmsExternalLearner;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/externalLearner/externallearners/:externallearnerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/externalLearner/externallearners/${encodeURIComponent(props.externallearnerId ?? "null")}`;
  export const random = (): IEnterpriseLmsExternalLearner =>
    typia.random<IEnterpriseLmsExternalLearner>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externallearnerId")(() =>
        typia.assert(props.externallearnerId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an external learner account permanently.
 *
 * Permanently delete the external learner account identified by ID. This
 * operation irrevocably removes the user from the system.
 *
 * The path parameter externallearnerId specifies the target external learner.
 *
 * Use with caution as this operation cannot be undone.
 *
 * Requires appropriate authorization and authentication.
 *
 * @param props.connection
 * @param props.externallearnerId Unique identifier of the target external
 *   learner
 * @path /enterpriseLms/externalLearner/externallearners/:externallearnerId
 * @accessor api.functional.enterpriseLms.externalLearner.externallearners.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target external learner */
    externallearnerId: string;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/externalLearner/externallearners/:externallearnerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/externalLearner/externallearners/${encodeURIComponent(props.externallearnerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externallearnerId")(() =>
        typia.assert(props.externallearnerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
