import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsCertification } from "../../../../structures/IEnterpriseLmsCertification";
import { IPageIEnterpriseLmsCertification } from "../../../../structures/IPageIEnterpriseLmsCertification";

/**
 * Search and list paginated tenant certifications.
 *
 * This PATCH operation allows clients to search and retrieve certifications for
 * the tenant with advanced filtering, sorting, and pagination options.
 *
 * It supports querying certifications by code, name, status, and lifecycle
 * state.
 *
 * Only authorized users with roles organizationAdmin or departmentManager can
 * perform this operation.
 *
 * The response includes paginated summary certification information to optimize
 * list rendering.
 *
 * Errors may occur due to invalid search filters or insufficient permissions.
 *
 * This operation requires a request body with search parameters.
 *
 * The response body returns a paginated list of certifications matching the
 * search criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for
 *   certifications
 * @path /enterpriseLms/departmentManager/certifications
 * @accessor api.functional.enterpriseLms.departmentManager.certifications.searchCertifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchCertifications(
  connection: IConnection,
  props: searchCertifications.Props,
): Promise<searchCertifications.Response> {
  return true === connection.simulate
    ? searchCertifications.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchCertifications.METADATA,
          path: searchCertifications.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchCertifications {
  export type Props = {
    /** Search criteria and pagination parameters for certifications */
    body: IEnterpriseLmsCertification.IRequest;
  };
  export type Body = IEnterpriseLmsCertification.IRequest;
  export type Response = IPageIEnterpriseLmsCertification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/departmentManager/certifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/departmentManager/certifications";
  export const random = (): IPageIEnterpriseLmsCertification.ISummary =>
    typia.random<IPageIEnterpriseLmsCertification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchCertifications.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchCertifications.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve certification detail by ID.
 *
 * This GET operation returns detailed information for the certification
 * identified by certificationId.
 *
 * Only users with organizationAdmin or departmentManager roles have access.
 *
 * The response includes all relevant certification data for use in UI or
 * reporting.
 *
 * If the certification is not found, an error response is returned.
 *
 * No request body is required.
 *
 * The response body contains a complete certification entity.
 *
 * @param props.connection
 * @param props.certificationId Unique identifier of the certification
 * @path /enterpriseLms/departmentManager/certifications/:certificationId
 * @accessor api.functional.enterpriseLms.departmentManager.certifications.atCertification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atCertification(
  connection: IConnection,
  props: atCertification.Props,
): Promise<atCertification.Response> {
  return true === connection.simulate
    ? atCertification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atCertification.METADATA,
          path: atCertification.path(props),
          status: null,
        },
      );
}
export namespace atCertification {
  export type Props = {
    /** Unique identifier of the certification */
    certificationId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsCertification;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/departmentManager/certifications/:certificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/departmentManager/certifications/${encodeURIComponent(props.certificationId ?? "null")}`;
  export const random = (): IEnterpriseLmsCertification =>
    typia.random<IEnterpriseLmsCertification>();
  export const simulate = (
    connection: IConnection,
    props: atCertification.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atCertification.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("certificationId")(() =>
        typia.assert(props.certificationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
