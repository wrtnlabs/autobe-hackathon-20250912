import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsForum } from "../../../structures/IEnterpriseLmsForum";
import { IPageIEnterpriseLmsForum } from "../../../structures/IPageIEnterpriseLmsForum";

/**
 * Retrieve filtered list of forums.
 *
 * Retrieve a list of discussion forums from the system, supporting advanced
 * search and pagination. The forums are tenant-scoped entities containing
 * attributes such as the forum name, description, owner, and creation
 * timestamps.
 *
 * Security: This operation is public and does not require authentication.
 *
 * Request: Pagination, search, and filter parameters are accepted to customize
 * results.
 *
 * Response: Returns paginated summaries of forums.
 *
 * Errors:
 *
 * - 400 Bad Request if request parameters are invalid.
 *
 * This enables clients to browse forums effectively with dynamic query
 * capabilities.
 *
 * @param props.connection
 * @param props.body Pagination and filter parameters for forums
 * @path /enterpriseLms/forums
 * @accessor api.functional.enterpriseLms.forums.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination and filter parameters for forums */
    body: IEnterpriseLmsForum.IRequest;
  };
  export type Body = IEnterpriseLmsForum.IRequest;
  export type Response = IPageIEnterpriseLmsForum.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/forums",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/forums";
  export const random = (): IPageIEnterpriseLmsForum.ISummary =>
    typia.random<IPageIEnterpriseLmsForum.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed forum information.
 *
 * Fetch detailed information of a particular discussion forum specified by
 * `forumId`. Forums store tenant-specific discussion spaces managed by
 * organization or department administrators.
 *
 * Security: Publicly accessible with no role restrictions.
 *
 * Parameters:
 *
 * - `forumId` (UUID): Unique identifier of the forum to retrieve.
 *
 * Response: Returns the full forum entity including name, description, owner,
 * and timestamps.
 *
 * Errors:
 *
 * - 404 Not Found if the forum does not exist.
 *
 * This enables clients and users to access forum details and facilitate
 * communication and collaboration.
 *
 * @param props.connection
 * @param props.forumId Unique identifier of the forum
 * @path /enterpriseLms/forums/:forumId
 * @accessor api.functional.enterpriseLms.forums.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the forum */
    forumId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsForum;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/forums/:forumId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/forums/${encodeURIComponent(props.forumId ?? "null")}`;
  export const random = (): IEnterpriseLmsForum =>
    typia.random<IEnterpriseLmsForum>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("forumId")(() => typia.assert(props.forumId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
