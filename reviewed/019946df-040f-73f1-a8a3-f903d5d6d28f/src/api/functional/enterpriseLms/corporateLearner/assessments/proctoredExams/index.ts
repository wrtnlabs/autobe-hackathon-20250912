import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsProctoredExam } from "../../../../../structures/IEnterpriseLmsProctoredExam";
import { IPageIEnterpriseLmsProctoredExam } from "../../../../../structures/IPageIEnterpriseLmsProctoredExam";

/**
 * Create a new proctored exam session for a specific assessment.
 *
 * Create a new proctored exam session linked to a specific assessment. It
 * accepts all required details in the request body adhering to the defined
 * creation DTO. Upon success, it returns the created exam entity with complete
 * metadata.
 *
 * Access is restricted to users with authorized roles to ensure controlled
 * scheduling of proctored exam sessions.
 *
 * All relevant business validations and cascade constraints are handled during
 * creation.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.body Details required for creating a new proctored exam
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.proctoredExams.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Details required for creating a new proctored exam */
    body: IEnterpriseLmsProctoredExam.ICreate;
  };
  export type Body = IEnterpriseLmsProctoredExam.ICreate;
  export type Response = IEnterpriseLmsProctoredExam;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/proctoredExams`;
  export const random = (): IEnterpriseLmsProctoredExam =>
    typia.random<IEnterpriseLmsProctoredExam>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of proctored exams for a given
 * assessment.
 *
 * This API operation allows clients to search and retrieve a paginated list of
 * proctored exam sessions related to the specified assessment. It supports
 * filtering, sorting, and pagination through a request body conforming to the
 * IRequest DTO. The endpoint ensures that only users with the proper roles such
 * as systemAdmin, organizationAdmin, departmentManager,
 * contentCreatorInstructor, corporateLearner, externalLearner, or guest can
 * access this information.
 *
 * The response includes a paginated collection of proctored exam sessions
 * providing detailed scheduling, proctor assignments, and status information.
 * This facilitates administrative oversight and management of proctored exams
 * within the LMS tenant context.
 *
 * Parameters include the assessmentId path parameter validated as a UUID
 * string. Request and response bodies use the proctored exam-related DTOs
 * prefixed with the service prefix EnterpriseLms for consistent API modeling.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.body Search and pagination parameters for proctored exams
 *   filtering
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.proctoredExams.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for proctored exams filtering */
    body: IEnterpriseLmsProctoredExam.IRequest;
  };
  export type Body = IEnterpriseLmsProctoredExam.IRequest;
  export type Response = IPageIEnterpriseLmsProctoredExam;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/proctoredExams`;
  export const random = (): IPageIEnterpriseLmsProctoredExam =>
    typia.random<IPageIEnterpriseLmsProctoredExam>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info of a proctored exam by ID for a given assessment.
 *
 * Retrieve detailed information about a specific proctored exam tied to a
 * particular assessment. This enables authorized users to view full metadata of
 * the exam session for management and monitoring.
 *
 * Both path parameters are strictly validated UUIDs to maintain data integrity
 * and ensure secure access within the appropriate tenant context.
 *
 * Response conforms to the IEnterpriseLmsProctoredExam DTO reflecting the full
 * entity schema.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.proctoredExamId Unique identifier of the target proctored exam
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams/:proctoredExamId
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.proctoredExams.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the target proctored exam */
    proctoredExamId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsProctoredExam;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams/:proctoredExamId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/proctoredExams/${encodeURIComponent(props.proctoredExamId ?? "null")}`;
  export const random = (): IEnterpriseLmsProctoredExam =>
    typia.random<IEnterpriseLmsProctoredExam>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("proctoredExamId")(() =>
        typia.assert(props.proctoredExamId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing proctored exam session by ID for a specific assessment.
 *
 * Update an existing proctored exam session for a specified assessment. This
 * operation allows authorized users to modify scheduling, proctor details, and
 * status fields.
 *
 * Validation ensures that the assessmentId and proctoredExamId are valid UUIDs
 * and that the request body adheres to the update DTO schema.
 *
 * The updated proctored exam entity is returned reflecting all changes after
 * successful persistence.
 *
 * Security context restricts access to roles with appropriate permissions.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.proctoredExamId Unique identifier of the target proctored exam
 * @param props.body Updated data for the proctored exam session
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams/:proctoredExamId
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.proctoredExams.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the target proctored exam */
    proctoredExamId: string & tags.Format<"uuid">;

    /** Updated data for the proctored exam session */
    body: IEnterpriseLmsProctoredExam.IUpdate;
  };
  export type Body = IEnterpriseLmsProctoredExam.IUpdate;
  export type Response = IEnterpriseLmsProctoredExam;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/proctoredExams/:proctoredExamId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/proctoredExams/${encodeURIComponent(props.proctoredExamId ?? "null")}`;
  export const random = (): IEnterpriseLmsProctoredExam =>
    typia.random<IEnterpriseLmsProctoredExam>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("proctoredExamId")(() =>
        typia.assert(props.proctoredExamId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
