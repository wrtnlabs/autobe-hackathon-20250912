import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAssessmentResult } from "../../../../../structures/IEnterpriseLmsAssessmentResult";

/**
 * Retrieve a specific assessment result by assessmentId and resultId.
 *
 * Retrieve detailed information about a specific assessment result identified
 * by its resultId and associated with the specified assessmentId within the
 * multi-tenant Enterprise LMS system.
 *
 * This operation ensures data retrieval scoped by tenant and enforces access
 * control based on user roles. It interfaces directly with the
 * enterprise_lms_assessment_results table, fetching all recorded fields for the
 * requested assessment attempt.
 *
 * The response includes score, status, completion timestamp, and audit
 * timestamps. Authorization checks verify user permission to view this data,
 * protecting learner privacy and tenant data isolation.
 *
 * Errors include not found if the resultId does not exist or does not belong to
 * the assessmentId provided.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.resultId Unique identifier of the assessment result
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/results/:resultId
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.results.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the assessment result */
    resultId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsAssessmentResult;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/results/:resultId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/results/${encodeURIComponent(props.resultId ?? "null")}`;
  export const random = (): IEnterpriseLmsAssessmentResult =>
    typia.random<IEnterpriseLmsAssessmentResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("resultId")(() => typia.assert(props.resultId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific assessment result by assessmentId and resultId.
 *
 * Update an existing assessment result identified by resultId for the specified
 * assessmentId.
 *
 * The update request must contain valid fields for score, status, and related
 * audit data. This operation ensures that only authorized users modify allowed
 * fields. It accesses the enterprise_lms_assessment_results table, updating
 * relevant fields and timestamps.
 *
 * Upon success, the updated assessment result is returned. Validation failures
 * or permission issues cause errors.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.resultId Unique identifier of the assessment result
 * @param props.body Update info for assessment result
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/results/:resultId
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.results.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the assessment result */
    resultId: string & tags.Format<"uuid">;

    /** Update info for assessment result */
    body: IEnterpriseLmsAssessmentResult.IUpdate;
  };
  export type Body = IEnterpriseLmsAssessmentResult.IUpdate;
  export type Response = IEnterpriseLmsAssessmentResult;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/results/:resultId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/results/${encodeURIComponent(props.resultId ?? "null")}`;
  export const random = (): IEnterpriseLmsAssessmentResult =>
    typia.random<IEnterpriseLmsAssessmentResult>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("resultId")(() => typia.assert(props.resultId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new assessment result for a specific assessment.
 *
 * Create a new assessment result entry under the specified assessmentId to
 * record a learner's attempt, score, and completion status.
 *
 * The request must include valid scoring data and learner references as per the
 * schema. Authorization ensures only permitted roles (e.g., systemAdmin,
 * organizationAdmin, corporateLearner) can create results. The newly created
 * assessment result includes all fields to confirm data integrity and audit
 * tracking.
 *
 * Validation errors are returned if data violates schema or business rules.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.body Creation info for assessment result
 * @path /enterpriseLms/corporateLearner/assessments/:assessmentId/results
 * @accessor api.functional.enterpriseLms.corporateLearner.assessments.results.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Creation info for assessment result */
    body: IEnterpriseLmsAssessmentResult.ICreate;
  };
  export type Body = IEnterpriseLmsAssessmentResult.ICreate;
  export type Response = IEnterpriseLmsAssessmentResult;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/assessments/:assessmentId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/results`;
  export const random = (): IEnterpriseLmsAssessmentResult =>
    typia.random<IEnterpriseLmsAssessmentResult>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
