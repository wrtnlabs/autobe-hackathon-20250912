import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsEnrollment } from "../../../../structures/IEnterpriseLmsEnrollment";
import { IPageIEnterpriseLmsEnrollment } from "../../../../structures/IPageIEnterpriseLmsEnrollment";

/**
 * Create a new learner enrollment in a learning path.
 *
 * Creates a new enrollment of a learner in a learning path.
 *
 * This operation accepts enrollment details such as learner ID and target
 * learning path. It applies business rules including prerequisite checks before
 * enrollment.
 *
 * Only authorized users can perform this operation.
 *
 * Returns the created enrollment entity with full details including creation
 * timestamp.
 *
 * @param props.connection
 * @param props.body Enrollment creation data including learner and learning
 *   path identifiers
 * @path /enterpriseLms/corporateLearner/enrollments
 * @accessor api.functional.enterpriseLms.corporateLearner.enrollments.createEnrollment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createEnrollment(
  connection: IConnection,
  props: createEnrollment.Props,
): Promise<createEnrollment.Response> {
  return true === connection.simulate
    ? createEnrollment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEnrollment.METADATA,
          path: createEnrollment.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createEnrollment {
  export type Props = {
    /**
     * Enrollment creation data including learner and learning path
     * identifiers
     */
    body: IEnterpriseLmsEnrollment.ICreate;
  };
  export type Body = IEnterpriseLmsEnrollment.ICreate;
  export type Response = IEnterpriseLmsEnrollment;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/enrollments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/enrollments";
  export const random = (): IEnterpriseLmsEnrollment =>
    typia.random<IEnterpriseLmsEnrollment>();
  export const simulate = (
    connection: IConnection,
    props: createEnrollment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createEnrollment.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of learner enrollments with filtering and
 * pagination.
 *
 * Retrieves a filtered, sorted, and paginated list of learner enrollments for
 * learning paths.
 *
 * The operation accepts extensive search criteria in the request body such as
 * learner identification, learning path filters, enrollment status, date range
 * filtering, and paging options.
 *
 * Security controls ensure that returned data is scoped to the requesting
 * user's permissions, preventing exposure of enrollments from other tenants.
 *
 * The response includes a paginated list of enrollments summarized with
 * essential properties for display in management UIs or reporting tools.
 *
 * This API supports efficient querying of enrollment data to facilitate
 * administrative actions and learner progress monitoring.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for enrollment
 *   filtering
 * @path /enterpriseLms/corporateLearner/enrollments
 * @accessor api.functional.enterpriseLms.corporateLearner.enrollments.indexEnrollments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexEnrollments(
  connection: IConnection,
  props: indexEnrollments.Props,
): Promise<indexEnrollments.Response> {
  return true === connection.simulate
    ? indexEnrollments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexEnrollments.METADATA,
          path: indexEnrollments.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexEnrollments {
  export type Props = {
    /** Search criteria and pagination parameters for enrollment filtering */
    body: IEnterpriseLmsEnrollment.IRequest;
  };
  export type Body = IEnterpriseLmsEnrollment.IRequest;
  export type Response = IPageIEnterpriseLmsEnrollment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/enrollments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/enrollments";
  export const random = (): IPageIEnterpriseLmsEnrollment.ISummary =>
    typia.random<IPageIEnterpriseLmsEnrollment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexEnrollments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexEnrollments.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific enrollment.
 *
 * Fetches detailed enrollment information for the specified enrollment ID.
 *
 * This operation returns a single enrollment entity with comprehensive details
 * including status, associated learner and learning path references, and
 * timestamps.
 *
 * Access control ensures that only authorized users can view enrollment details
 * within their organization or tenant.
 *
 * If no enrollment matches the provided ID, an appropriate error is returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the enrollment to retrieve
 * @path /enterpriseLms/corporateLearner/enrollments/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.enrollments.atEnrollment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atEnrollment(
  connection: IConnection,
  props: atEnrollment.Props,
): Promise<atEnrollment.Response> {
  return true === connection.simulate
    ? atEnrollment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atEnrollment.METADATA,
          path: atEnrollment.path(props),
          status: null,
        },
      );
}
export namespace atEnrollment {
  export type Props = {
    /** Unique identifier of the enrollment to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsEnrollment;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/enrollments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/enrollments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsEnrollment =>
    typia.random<IEnterpriseLmsEnrollment>();
  export const simulate = (
    connection: IConnection,
    props: atEnrollment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atEnrollment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
