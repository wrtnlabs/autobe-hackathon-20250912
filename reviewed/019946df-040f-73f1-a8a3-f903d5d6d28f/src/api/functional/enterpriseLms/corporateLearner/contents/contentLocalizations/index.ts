import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentLocalization } from "../../../../../structures/IEnterpriseLmsContentLocalization";
import { IPageIEnterpriseLmsContentLocalization } from "../../../../../structures/IPageIEnterpriseLmsContentLocalization";

/**
 * Search and retrieve paginated list of content localizations for a content
 * item.
 *
 * Retrieve a filtered and paginated list of localized content versions
 * associated with a specific content item. Each localization record contains
 * language-specific title and description fields.
 *
 * This endpoint enables multi-language support by returning localizations such
 * as English, French, or other ISO 639-1 coded languages linked to the main
 * content.
 *
 * Security is enforced via tenant isolation and permissions restricting access
 * to authorized users with roles capable of viewing content details.
 *
 * The response includes localized titles and descriptions optimized for display
 * in user interfaces requesting specific language versions.
 *
 * This operation is related to content management and should be used in
 * conjunction with content retrieval APIs.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content item
 * @param props.body Search criteria and pagination parameters for content
 *   localization filtering
 * @path /enterpriseLms/corporateLearner/contents/:contentId/contentLocalizations
 * @accessor api.functional.enterpriseLms.corporateLearner.contents.contentLocalizations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target content item */
    contentId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for content localization
     * filtering
     */
    body: IEnterpriseLmsContentLocalization.IRequest;
  };
  export type Body = IEnterpriseLmsContentLocalization.IRequest;
  export type Response = IPageIEnterpriseLmsContentLocalization;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/contents/:contentId/contentLocalizations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/contents/${encodeURIComponent(props.contentId ?? "null")}/contentLocalizations`;
  export const random = (): IPageIEnterpriseLmsContentLocalization =>
    typia.random<IPageIEnterpriseLmsContentLocalization>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info about a specific content localization.
 *
 * Retrieve detailed information of a content localization record by its ID and
 * associated content item ID.
 *
 * This operation is part of the content localization management under the
 * content management module, facilitating fine-grained multi-language support.
 *
 * Only users with proper authorization within the tenant can access this data.
 *
 * The response includes all details necessary for display or editing of the
 * localization.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content item
 * @param props.id Unique identifier of the content localization record
 * @path /enterpriseLms/corporateLearner/contents/:contentId/contentLocalizations/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.contents.contentLocalizations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content item */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content localization record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentLocalization;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/contents/:contentId/contentLocalizations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/contents/${encodeURIComponent(props.contentId ?? "null")}/contentLocalizations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentLocalization =>
    typia.random<IEnterpriseLmsContentLocalization>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
