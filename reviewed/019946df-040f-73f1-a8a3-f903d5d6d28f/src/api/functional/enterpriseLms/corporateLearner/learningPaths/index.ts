import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsLearningPaths } from "../../../../structures/IEnterpriseLmsLearningPaths";
export * as learningPathItems from "./learningPathItems/index";

/**
 * Retrieve a specific learning path by ID from the Enterprise LMS.
 *
 * Retrieve the full details of a specific learning path by its unique
 * identifier within the Enterprise LMS system. This includes all relevant
 * metadata such as the code, title, current status, descriptions, and
 * timestamps marking creation and updates.
 *
 * Authorized users with suitable roles and permissions can access the learning
 * path details. Strict tenant data isolation is enforced to ensure data privacy
 * and security.
 *
 * The underlying database table is `enterprise_lms_learning_paths` which
 * contains all learning path entities, supporting soft deletion semantics where
 * applicable.
 *
 * The operation returns the learning path entity or an error if the learning
 * path ID does not exist or access is denied.
 *
 * Errors include 404 Not Found if the learning path ID is invalid, or 403
 * Forbidden if authorization fails.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier (UUID) of the target learning
 *   path
 * @path /enterpriseLms/corporateLearner/learningPaths/:learningPathId
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target learning path */
    learningPathId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsLearningPaths;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/learningPaths/:learningPathId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}`;
  export const random = (): IEnterpriseLmsLearningPaths =>
    typia.random<IEnterpriseLmsLearningPaths>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific learning path by ID in the Enterprise LMS.
 *
 * Update an existing learning path identified by its ID in the Enterprise LMS.
 * Input data allows modification of properties such as title, status, and
 * description.
 *
 * The system validates the update payload including enforcing uniqueness of
 * code when applicable.
 *
 * Tenant data isolation safeguards keep changes scoped to the correct tenant.
 * Only authorized users with the 'corporateLearner' role may perform updates.
 *
 * If the learning path does not exist or the user is unauthorized, appropriate
 * errors are returned.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier (UUID) of the target learning
 *   path to update
 * @param props.body Update data for the learning path
 * @path /enterpriseLms/corporateLearner/learningPaths/:learningPathId
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the target learning path to update */
    learningPathId: string & tags.Format<"uuid">;

    /** Update data for the learning path */
    body: IEnterpriseLmsLearningPaths.IUpdate;
  };
  export type Body = IEnterpriseLmsLearningPaths.IUpdate;
  export type Response = IEnterpriseLmsLearningPaths;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/learningPaths/:learningPathId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}`;
  export const random = (): IEnterpriseLmsLearningPaths =>
    typia.random<IEnterpriseLmsLearningPaths>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific learning path by ID in the Enterprise LMS.
 *
 * Delete a specific learning path by its unique ID. This is a hard delete
 * operation that removes all records permanently from the database.
 *
 * Tenant isolation and role-based permissions limit deletion to authorized
 * users.
 *
 * If the learning path does not exist, a 404 error is returned. If the user
 * lacks permissions, a 403 error is returned.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier (UUID) of the learning path to
 *   delete
 * @path /enterpriseLms/corporateLearner/learningPaths/:learningPathId
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the learning path to delete */
    learningPathId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/corporateLearner/learningPaths/:learningPathId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new learning path in the Enterprise LMS.
 *
 * Create a new learning path within the Enterprise LMS. The creation data must
 * include unique code, title, and initial status. Optional detailed
 * descriptions can be provided.
 *
 * The system performs validation for code uniqueness within the tenant and
 * enforces required fields. Upon successful creation, the learning path entity
 * including timestamps is returned.
 *
 * Tenant-based data isolation is maintained, and only authorized users with the
 * 'corporateLearner' role scope can perform this operation.
 *
 * Errors may occur if required fields are missing, code is not unique, or if
 * authorization fails.
 *
 * @param props.connection
 * @param props.body Creation data for a learning path
 * @path /enterpriseLms/corporateLearner/learningPaths
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a learning path */
    body: IEnterpriseLmsLearningPaths.ICreate;
  };
  export type Body = IEnterpriseLmsLearningPaths.ICreate;
  export type Response = IEnterpriseLmsLearningPaths;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/learningPaths",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/learningPaths";
  export const random = (): IEnterpriseLmsLearningPaths =>
    typia.random<IEnterpriseLmsLearningPaths>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
