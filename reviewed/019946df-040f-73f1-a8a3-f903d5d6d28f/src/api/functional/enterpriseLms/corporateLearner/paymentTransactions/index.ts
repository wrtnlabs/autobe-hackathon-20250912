import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsPaymentTransaction } from "../../../../structures/IEnterpriseLmsPaymentTransaction";

/**
 * Create a new payment transaction record.
 *
 * Creates a new payment transaction record linked to a tenant and user within
 * the Enterprise LMS system. The transaction details include amount, currency,
 * payment method, and current status.
 *
 * Security and authorization require that the caller must be an authenticated
 * user with permissions to create payment records such as corporateLearner,
 * externalLearner, or guest.
 *
 * The operation corresponds to the enterprise_lms_payment_transactions table in
 * the Prisma schema. The created record will be stored with a unique
 * transaction code for future reconciliation and auditing.
 *
 * Error handling includes validation of amount positivity, currency format, and
 * status correctness. Transactions must not duplicate existing transaction
 * codes.
 *
 * No response body is required as the operation returns the created transaction
 * details.
 *
 * @param props.connection
 * @param props.body Information required to create a payment transaction
 * @path /enterpriseLms/corporateLearner/paymentTransactions
 * @accessor api.functional.enterpriseLms.corporateLearner.paymentTransactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a payment transaction */
    body: IEnterpriseLmsPaymentTransaction.ICreate;
  };
  export type Body = IEnterpriseLmsPaymentTransaction.ICreate;
  export type Response = IEnterpriseLmsPaymentTransaction;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/paymentTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/corporateLearner/paymentTransactions";
  export const random = (): IEnterpriseLmsPaymentTransaction =>
    typia.random<IEnterpriseLmsPaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment transaction by ID.
 *
 * Updates a payment transaction identified by ID with new details such as
 * amount, payment method, or status.
 *
 * Security requires the user to have proper authorization (corporateLearner,
 * externalLearner, or guest) to modify transaction data.
 *
 * The operation acts on the enterprise_lms_payment_transactions table, updating
 * the record fields while respecting immutability of tenant and user
 * associations.
 *
 * Validation ensures that updates do not violate unique constraints or business
 * rules regarding payment processing status.
 *
 * Response returns the updated payment transaction record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the payment transaction to update
 * @param props.body Payment transaction update data
 * @path /enterpriseLms/corporateLearner/paymentTransactions/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.paymentTransactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the payment transaction to update */
    id: string & tags.Format<"uuid">;

    /** Payment transaction update data */
    body: IEnterpriseLmsPaymentTransaction.IUpdate;
  };
  export type Body = IEnterpriseLmsPaymentTransaction.IUpdate;
  export type Response = IEnterpriseLmsPaymentTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/paymentTransactions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/paymentTransactions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsPaymentTransaction =>
    typia.random<IEnterpriseLmsPaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a payment transaction by ID.
 *
 * Soft deletes the payment transaction identified by ID by setting the
 * deleted_at timestamp.
 *
 * This preserves the record for audit and compliance purposes while making it
 * inactive.
 *
 * Authorization requires appropriate user permissions. Roles allowed:
 * corporateLearner, externalLearner, guest.
 *
 * No request body is necessary.
 *
 * There is no response body as the outcome is implied by HTTP status codes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the payment transaction to delete
 * @path /enterpriseLms/corporateLearner/paymentTransactions/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.paymentTransactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the payment transaction to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/corporateLearner/paymentTransactions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/paymentTransactions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
