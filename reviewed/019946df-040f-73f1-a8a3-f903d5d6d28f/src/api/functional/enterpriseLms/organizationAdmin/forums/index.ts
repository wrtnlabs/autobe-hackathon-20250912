import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsForums } from "../../../../structures/IEnterpriseLmsForums";
export * as forumThreads from "./forumThreads/index";

/**
 * Create a new forum for tenant organization.
 *
 * Create a new discussion forum under the tenant's administration. The forum
 * represents a container for multiple discussion threads allowing users to
 * participate in structured conversations relevant to learning topics. The
 * forum has a unique name within the tenant, an optional description, and is
 * assigned an owner who manages it. The creating user needs appropriate
 * authorization (organizationAdmin role) to ensure data integrity and tenant
 * security. The operation populates the enterprise_lms_forums table including
 * necessary tenant ID linkage and creation metadata. Errors may arise if
 * duplicate forum names exist within the same tenant.
 *
 * This operation relates directly to the management of forums in the LMS and
 * supports subsequent thread and post creations within the forum structure.
 *
 * Security considerations restrict this operation to authorized roles such as
 * organization administrators. It prevents cross-tenant data access ensuring
 * strict data isolation.
 *
 * Business rules ensure uniqueness of forum names and integrity of
 * tenant-specific data.
 *
 * @param props.connection
 * @param props.body New forum creation data
 * @path /enterpriseLms/organizationAdmin/forums
 * @accessor api.functional.enterpriseLms.organizationAdmin.forums.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New forum creation data */
    body: IEnterpriseLmsForums.ICreate;
  };
  export type Body = IEnterpriseLmsForums.ICreate;
  export type Response = IEnterpriseLmsForums;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/forums",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/forums";
  export const random = (): IEnterpriseLmsForums =>
    typia.random<IEnterpriseLmsForums>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update forum details by forumId.
 *
 * Update the metadata and properties of a forum identified by forumId. The
 * update includes changing attributes like the forum name and description. The
 * operation ensures that the forum ID is valid within the tenant context and
 * that the new forum name does not conflict with existing forums to preserve
 * uniqueness.
 *
 * Authorization is required for organization administrators to ensure only
 * privileged users can change forum configuration. This operation interacts
 * directly with the enterprise_lms_forums table for data persistence and
 * logging.
 *
 * This endpoint is crucial for maintaining an up-to-date, well-structured forum
 * system that supports effective discussions across tenants while ensuring
 * tenant data security and compliance.
 *
 * @param props.connection
 * @param props.forumId Unique identifier of the target forum
 * @param props.body Updated forum data
 * @path /enterpriseLms/organizationAdmin/forums/:forumId
 * @accessor api.functional.enterpriseLms.organizationAdmin.forums.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target forum */
    forumId: string & tags.Format<"uuid">;

    /** Updated forum data */
    body: IEnterpriseLmsForums.IUpdate;
  };
  export type Body = IEnterpriseLmsForums.IUpdate;
  export type Response = IEnterpriseLmsForums;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/forums/:forumId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/forums/${encodeURIComponent(props.forumId ?? "null")}`;
  export const random = (): IEnterpriseLmsForums =>
    typia.random<IEnterpriseLmsForums>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("forumId")(() => typia.assert(props.forumId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete forum by forumId.
 *
 * Delete a forum by forumId, permanently removing it from the tenant's data
 * store. This operation executes a hard delete on the enterprise_lms_forums
 * table and cascades deletion to associated forum threads and posts. The user
 * must have organization administrator authorization to perform this
 * destructive action.
 *
 * Data integrity and tenant isolation are preserved by restricting deletion
 * scope to the specified forum within the tenant. Deleted data is not
 * recoverable, hence caution and appropriate user confirmations are expected
 * before execution.
 *
 * Security policies restrict this operation to authorized personnel only,
 * preventing accidental or unauthorized data loss.
 *
 * @param props.connection
 * @param props.forumId Unique identifier of the target forum
 * @path /enterpriseLms/organizationAdmin/forums/:forumId
 * @accessor api.functional.enterpriseLms.organizationAdmin.forums.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target forum */
    forumId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/forums/:forumId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/forums/${encodeURIComponent(props.forumId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("forumId")(() => typia.assert(props.forumId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
