import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a specific forum post in a forum thread for content moderation.
 *
 * This API endpoint allows authorized users to permanently delete a forum post
 * identified by the forumId, forumThreadId, and forumPostId path parameters.
 *
 * The forum post resource corresponds to the enterprise_lms_forum_posts table,
 * which holds message content, author information, and timestamps.
 *
 * Deletion is permanent; once removed, the post cannot be recovered. This
 * operation is restricted to roles responsible for content moderation such as
 * organization administrators and department managers.
 *
 * Users must provide valid UUIDs for the forum, thread, and post identifiers.
 *
 * Unauthorized attempts or invalid identifiers will result in error responses.
 *
 * This operation is crucial for maintaining the quality and relevance of
 * discussions within enterprise tenant forums.
 *
 * @param props.connection
 * @param props.forumId Unique identifier of the target forum
 * @param props.forumThreadId Unique identifier of the target forum thread
 * @param props.forumPostId Unique identifier of the forum post to delete
 * @path /enterpriseLms/organizationAdmin/forums/:forumId/forumThreads/:forumThreadId/forumPosts/:forumPostId
 * @accessor api.functional.enterpriseLms.organizationAdmin.forums.forumThreads.forumPosts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target forum */
    forumId: string & tags.Format<"uuid">;

    /** Unique identifier of the target forum thread */
    forumThreadId: string & tags.Format<"uuid">;

    /** Unique identifier of the forum post to delete */
    forumPostId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/forums/:forumId/forumThreads/:forumThreadId/forumPosts/:forumPostId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/forums/${encodeURIComponent(props.forumId ?? "null")}/forumThreads/${encodeURIComponent(props.forumThreadId ?? "null")}/forumPosts/${encodeURIComponent(props.forumPostId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("forumId")(() => typia.assert(props.forumId));
      assert.param("forumThreadId")(() => typia.assert(props.forumThreadId));
      assert.param("forumPostId")(() => typia.assert(props.forumPostId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
