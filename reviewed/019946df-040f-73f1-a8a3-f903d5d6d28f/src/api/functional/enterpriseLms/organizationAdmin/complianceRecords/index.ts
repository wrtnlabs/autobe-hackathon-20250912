import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsComplianceRecords } from "../../../../structures/IEnterpriseLmsComplianceRecords";
import { IPageIEnterpriseLmsComplianceRecords } from "../../../../structures/IPageIEnterpriseLmsComplianceRecords";

/**
 * Search and retrieve compliance records with filtering and pagination.
 *
 * Retrieve a filtered, sorted, and paginated list of learner compliance
 * records. This operation supports querying by compliance type, status, learner
 * identifiers, and date ranges.
 *
 * Access is restricted to users with administrative privileges
 * ('organizationAdmin' role).
 *
 * The data source is the enterprise_lms_compliance_records table, which tracks
 * regulatory compliance status and audit records for learners.
 *
 * The request body parameters define search filters and pagination options,
 * while the response body includes a paginated summary list of compliance
 * records.
 *
 * Proper validation is enforced to ensure valid query criteria and consistent
 * pagination.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for compliance
 *   records
 * @path /enterpriseLms/organizationAdmin/complianceRecords
 * @accessor api.functional.enterpriseLms.organizationAdmin.complianceRecords.searchComplianceRecords
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchComplianceRecords(
  connection: IConnection,
  props: searchComplianceRecords.Props,
): Promise<searchComplianceRecords.Response> {
  return true === connection.simulate
    ? searchComplianceRecords.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchComplianceRecords.METADATA,
          path: searchComplianceRecords.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchComplianceRecords {
  export type Props = {
    /** Search criteria and pagination parameters for compliance records */
    body: IEnterpriseLmsComplianceRecords.IRequest;
  };
  export type Body = IEnterpriseLmsComplianceRecords.IRequest;
  export type Response = IPageIEnterpriseLmsComplianceRecords.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/complianceRecords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/complianceRecords";
  export const random = (): IPageIEnterpriseLmsComplianceRecords.ISummary =>
    typia.random<IPageIEnterpriseLmsComplianceRecords.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchComplianceRecords.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchComplianceRecords.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
