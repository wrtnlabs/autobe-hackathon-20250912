import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsCompetencies } from "../../../../structures/IEnterpriseLmsCompetencies";
import { IEnterpriseLmsCompetency } from "../../../../structures/IEnterpriseLmsCompetency";
import { IPageIEnterpriseLmsCompetency } from "../../../../structures/IPageIEnterpriseLmsCompetency";

/**
 * Create a new competency.
 *
 * Create a new competency record with tenant ID, unique code, name, and
 * optional description.
 *
 * This operation requires authenticated user privileges with permission to
 * manage competencies within the specific tenant organization.
 *
 * The request body contains data validated against the creation DTO.
 *
 * On success, returns the full competency record including all metadata
 * timestamps.
 *
 * Errors are returned for data conflicts or validation failures.
 *
 * @param props.connection
 * @param props.body Creation data of the competency
 * @path /enterpriseLms/organizationAdmin/competencies
 * @accessor api.functional.enterpriseLms.organizationAdmin.competencies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data of the competency */
    body: IEnterpriseLmsCompetencies.ICreate;
  };
  export type Body = IEnterpriseLmsCompetencies.ICreate;
  export type Response = IEnterpriseLmsCompetencies;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/competencies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/competencies";
  export const random = (): IEnterpriseLmsCompetencies =>
    typia.random<IEnterpriseLmsCompetencies>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of competencies.
 *
 * Retrieve a filtered and paginated list of competencies defined in the system.
 * Users with organizationAdmin role can search competencies by code or name,
 * filter by status, and sort the results.
 *
 * Pagination parameters allow controlling page size and number.
 *
 * This operation queries the enterprise_lms_competencies table, returning
 * summary details adapted for efficient listing.
 *
 * Security is enforced by role-based access restricting to organizationAdmin
 * users only.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination parameters for competencies
 * @path /enterpriseLms/organizationAdmin/competencies
 * @accessor api.functional.enterpriseLms.organizationAdmin.competencies.indexCompetencies
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCompetencies(
  connection: IConnection,
  props: indexCompetencies.Props,
): Promise<indexCompetencies.Response> {
  return true === connection.simulate
    ? indexCompetencies.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCompetencies.METADATA,
          path: indexCompetencies.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexCompetencies {
  export type Props = {
    /** Filter, search, and pagination parameters for competencies */
    body: IEnterpriseLmsCompetency.IRequest;
  };
  export type Body = IEnterpriseLmsCompetency.IRequest;
  export type Response = IPageIEnterpriseLmsCompetency.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/competencies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/competencies";
  export const random = (): IPageIEnterpriseLmsCompetency.ISummary =>
    typia.random<IPageIEnterpriseLmsCompetency.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexCompetencies.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCompetencies.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a competency by ID.
 *
 * Retrieve a competency by its unique identifier to view all associated
 * details.
 *
 * This read operation is intended for roles authorized to view competency
 * details within the tenant organization, such as organization admins or
 * system-level users.
 *
 * It queries the "enterprise_lms_competencies" table filtering by the primary
 * key "id".
 *
 * The response includes core properties such as tenant ID, code, name,
 * description, creation and update timestamps, and optionally deletion
 * timestamp if the record is soft deleted.
 *
 * The API returns HTTP 404 if the competency ID does not exist or is soft
 * deleted.
 *
 * This operation requires authentication and appropriate authorization that
 * aligns with tenant-level data security and role permissions.
 *
 * No request body is needed as it is a GET operation.
 *
 * @param props.connection
 * @param props.competencyId Unique identifier of the competency to retrieve.
 * @path /enterpriseLms/organizationAdmin/competencies/:competencyId
 * @accessor api.functional.enterpriseLms.organizationAdmin.competencies.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the competency to retrieve. */
    competencyId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsCompetencies;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/competencies/:competencyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/competencies/${encodeURIComponent(props.competencyId ?? "null")}`;
  export const random = (): IEnterpriseLmsCompetencies =>
    typia.random<IEnterpriseLmsCompetencies>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("competencyId")(() => typia.assert(props.competencyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a competency by ID.
 *
 * Update a competency's details by its ID.
 *
 * Requires authenticated user with privileges to modify competencies within the
 * tenant.
 *
 * Request body determines the fields to update, validated against the update
 * DTO.
 *
 * Returns the updated competency on success. Errors if the competency does not
 * exist or if validation fails.
 *
 * Soft deletion status is not modifiable here.
 *
 * @param props.connection
 * @param props.competencyId Unique identifier of the competency to update.
 * @param props.body Data to update the competency
 * @path /enterpriseLms/organizationAdmin/competencies/:competencyId
 * @accessor api.functional.enterpriseLms.organizationAdmin.competencies.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the competency to update. */
    competencyId: string & tags.Format<"uuid">;

    /** Data to update the competency */
    body: IEnterpriseLmsCompetencies.IUpdate;
  };
  export type Body = IEnterpriseLmsCompetencies.IUpdate;
  export type Response = IEnterpriseLmsCompetencies;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/competencies/:competencyId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/competencies/${encodeURIComponent(props.competencyId ?? "null")}`;
  export const random = (): IEnterpriseLmsCompetencies =>
    typia.random<IEnterpriseLmsCompetencies>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("competencyId")(() => typia.assert(props.competencyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a competency by ID.
 *
 * Soft delete a competency by setting its deleted_at timestamp.
 *
 * Requires authenticated user with delete permissions within the tenant.
 *
 * If the competency does not exist or is already deleted, returns appropriate
 * error codes.
 *
 * This operation does not physically remove the data but marks it as deleted.
 *
 * @param props.connection
 * @param props.competencyId Unique identifier of the competency to delete.
 * @path /enterpriseLms/organizationAdmin/competencies/:competencyId
 * @accessor api.functional.enterpriseLms.organizationAdmin.competencies.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the competency to delete. */
    competencyId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/competencies/:competencyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/competencies/${encodeURIComponent(props.competencyId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("competencyId")(() => typia.assert(props.competencyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
