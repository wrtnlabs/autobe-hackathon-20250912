import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsExternalLearner } from "../../../../structures/IEnterpriseLmsExternalLearner";
import { IPageIEnterpriseLmsExternallearner } from "../../../../structures/IPageIEnterpriseLmsExternallearner";

/**
 * Search and retrieve external learner list.
 *
 * Retrieve filtered, paginated listing of external learners for tenant.
 * Supports filtering by email, status, tenant membership, and supports sorting
 * and pagination.
 *
 * Requires roles with administrative privileges. Returns summary info optimized
 * for list display.
 *
 * Validation errors occur on invalid pagination or malformed filters.
 *
 * Tenant boundaries always enforced.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination for external learners
 * @path /enterpriseLms/organizationAdmin/externallearners
 * @accessor api.functional.enterpriseLms.organizationAdmin.externallearners.indexExternallearners
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexExternallearners(
  connection: IConnection,
  props: indexExternallearners.Props,
): Promise<indexExternallearners.Response> {
  return true === connection.simulate
    ? indexExternallearners.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexExternallearners.METADATA,
          path: indexExternallearners.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexExternallearners {
  export type Props = {
    /** Search criteria and pagination for external learners */
    body: IEnterpriseLmsExternalLearner.IRequest;
  };
  export type Body = IEnterpriseLmsExternalLearner.IRequest;
  export type Response = IPageIEnterpriseLmsExternallearner.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/externallearners",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/externallearners";
  export const random = (): IPageIEnterpriseLmsExternallearner.ISummary =>
    typia.random<IPageIEnterpriseLmsExternallearner.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexExternallearners.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexExternallearners.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve external learner details by ID.
 *
 * Retrieve detailed external learner information by unique ID. Provides profile
 * attributes and status.
 *
 * Role-based access control ensures only authorized users may access tenant
 * data.
 *
 * Errors returned on non-existent ID or unauthorized access.
 *
 * @param props.connection
 * @param props.externallearnerId Unique identifier of the external learner
 * @path /enterpriseLms/organizationAdmin/externallearners/:externallearnerId
 * @accessor api.functional.enterpriseLms.organizationAdmin.externallearners.atExternallearner
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atExternallearner(
  connection: IConnection,
  props: atExternallearner.Props,
): Promise<atExternallearner.Response> {
  return true === connection.simulate
    ? atExternallearner.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atExternallearner.METADATA,
          path: atExternallearner.path(props),
          status: null,
        },
      );
}
export namespace atExternallearner {
  export type Props = {
    /** Unique identifier of the external learner */
    externallearnerId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsExternalLearner;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/externallearners/:externallearnerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/externallearners/${encodeURIComponent(props.externallearnerId ?? "null")}`;
  export const random = (): IEnterpriseLmsExternalLearner =>
    typia.random<IEnterpriseLmsExternalLearner>();
  export const simulate = (
    connection: IConnection,
    props: atExternallearner.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atExternallearner.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externallearnerId")(() =>
        typia.assert(props.externallearnerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
