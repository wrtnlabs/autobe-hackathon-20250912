import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsRolePermissions } from "../../../../structures/IEnterpriseLmsRolePermissions";
import { IPageIEnterpriseLmsRolePermissions } from "../../../../structures/IPageIEnterpriseLmsRolePermissions";

/**
 * Retrieve paginated list of LMS role permissions.
 *
 * Retrieve a filtered and paginated list of all LMS role permissions assigned
 * to roles. This list supports searching and sorting to find permissions by key
 * or description.
 *
 * Role permissions define access and authorization rights within the LMS
 * system.
 *
 * The request body includes search criteria, page size, and sorting options as
 * per IEnterpriseLmsRolePermissions.IRequest schema.
 *
 * The response includes a page object with summaries of role permissions
 * matching the criteria.
 *
 * Access to this operation requires authentication as an authorized user.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for role permissions
 *   filtering
 * @path /enterpriseLms/organizationAdmin/rolePermissions
 * @accessor api.functional.enterpriseLms.organizationAdmin.rolePermissions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for role permissions filtering */
    body: IEnterpriseLmsRolePermissions.IRequest;
  };
  export type Body = IEnterpriseLmsRolePermissions.IRequest;
  export type Response = IPageIEnterpriseLmsRolePermissions.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/rolePermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/rolePermissions";
  export const random = (): IPageIEnterpriseLmsRolePermissions.ISummary =>
    typia.random<IPageIEnterpriseLmsRolePermissions.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed LMS role permission by ID.
 *
 * Retrieve detailed information for a single LMS role permission by ID.
 *
 * This provides all fields related to a role permission including the
 * permission key, description, and grant status.
 *
 * Requires authentication for access control.
 *
 * Returns 404 if the specified ID does not exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the role permission
 * @path /enterpriseLms/organizationAdmin/rolePermissions/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.rolePermissions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the role permission */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsRolePermissions;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/rolePermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/rolePermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsRolePermissions =>
    typia.random<IEnterpriseLmsRolePermissions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
