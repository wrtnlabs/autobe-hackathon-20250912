import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentAccessControl } from "../../../../structures/IEnterpriseLmsContentAccessControl";
import { IPageIEnterpriseLmsContentAccessControl } from "../../../../structures/IPageIEnterpriseLmsContentAccessControl";

/**
 * Create a new content access control entry.
 *
 * This POST endpoint allows creation of a new content access control record,
 * defining specific access permissions at the content item level within a
 * tenant. It supports detailed role and learner assignments to tightly govern
 * content visibility and access in multi-tenant scenarios.
 *
 * The operation enforces validation of input parameters and checks for unique
 * constraints on content and tenant combinations.
 *
 * Proper authorization checks ensure only privileged users can assign access
 * controls.
 *
 * Upon success, the newly created access control record is returned with full
 * detail, enabling client applications to confirm creation and display the
 * configuration.
 *
 * @param props.connection
 * @param props.body Creation info of the content access control entry
 * @path /enterpriseLms/organizationAdmin/contentAccessControls
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentAccessControls.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the content access control entry */
    body: IEnterpriseLmsContentAccessControl.ICreate;
  };
  export type Body = IEnterpriseLmsContentAccessControl.ICreate;
  export type Response = IEnterpriseLmsContentAccessControl;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/contentAccessControls",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/contentAccessControls";
  export const random = (): IEnterpriseLmsContentAccessControl =>
    typia.random<IEnterpriseLmsContentAccessControl>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of content access controls.
 *
 * This API endpoint enables retrieval of content access control entries with
 * sophisticated query capabilities. Clients can filter based on tenant
 * organization, specific content items, or role-based and learner-specific
 * permissions. The content access controls govern which roles or individual
 * learners have access to particular content items across tenant boundaries,
 * crucial for enforcing multi-tenant data security.
 *
 * The endpoint uses a PATCH method to accept complex request parameters
 * encapsulated in a request DTO, allowing for comprehensive search queries
 * including pagination and sorting options. By returning a paginated list of
 * access controls, the operation supports efficient client-side rendering and
 * management of access policies.
 *
 * Security measures ensure that only users with appropriate administrative
 * permissions can query access control entries. This avoids exposing sensitive
 * access rules to unauthorized users.
 *
 * The response contains summarized data optimized for list displays and further
 * exploration.
 *
 * Relationships to the underlying enterprise_lms_content_access_controls table
 * and connected tenant and content entities are honored, ensuring data
 * integrity and consistency.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for content
 *   access control filtering
 * @path /enterpriseLms/organizationAdmin/contentAccessControls
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentAccessControls.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for content access control
     * filtering
     */
    body: IEnterpriseLmsContentAccessControl.IRequest;
  };
  export type Body = IEnterpriseLmsContentAccessControl.IRequest;
  export type Response = IPageIEnterpriseLmsContentAccessControl.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/contentAccessControls",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/contentAccessControls";
  export const random = (): IPageIEnterpriseLmsContentAccessControl.ISummary =>
    typia.random<IPageIEnterpriseLmsContentAccessControl.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific content access control by ID.
 *
 * This GET endpoint fetches a single content access control by unique
 * identifier. It returns detailed data including allowed roles, allowed learner
 * IDs, and metadata timestamps. This enables authorized users to review or
 * audit specific content access permissions.
 *
 * The operation strictly enforces data isolation and access control by tenant
 * context and user role, preventing unauthorized access to access control
 * configurations.
 *
 * It retrieves information directly from the
 * enterprise_lms_content_access_controls table, maintaining integrity and
 * consistency.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access control
 * @path /enterpriseLms/organizationAdmin/contentAccessControls/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentAccessControls.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the content access control */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentAccessControl;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/contentAccessControls/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/contentAccessControls/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentAccessControl =>
    typia.random<IEnterpriseLmsContentAccessControl>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing content access control entry by ID.
 *
 * This PUT endpoint modifies an existing content access control entry
 * identified by ID. It enables updating role and learner permissions related to
 * specific content.
 *
 * The operation ensures strict authorization and validation before applying
 * changes to prevent unauthorized or conflicting updates.
 *
 * It integrates directly with the underlying
 * enterprise_lms_content_access_controls table and tenant context, maintaining
 * consistency.
 *
 * Returns the updated access control record for client verification.
 *
 * @param props.connection
 * @param props.id Unique identifier of the content access control to update
 * @param props.body Update info for the content access control entry
 * @path /enterpriseLms/organizationAdmin/contentAccessControls/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentAccessControls.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the content access control to update */
    id: string & tags.Format<"uuid">;

    /** Update info for the content access control entry */
    body: IEnterpriseLmsContentAccessControl.IUpdate;
  };
  export type Body = IEnterpriseLmsContentAccessControl.IUpdate;
  export type Response = IEnterpriseLmsContentAccessControl;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/contentAccessControls/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/contentAccessControls/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentAccessControl =>
    typia.random<IEnterpriseLmsContentAccessControl>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
