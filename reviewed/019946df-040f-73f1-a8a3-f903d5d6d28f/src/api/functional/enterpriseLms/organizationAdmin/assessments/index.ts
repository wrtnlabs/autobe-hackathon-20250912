import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAssessments } from "../../../../structures/IEnterpriseLmsAssessments";
import { IPageIEnterpriseLmsAssessments } from "../../../../structures/IPageIEnterpriseLmsAssessments";
import { IEnterpriseLmsAssessment } from "../../../../structures/IEnterpriseLmsAssessment";
export * as questions from "./questions/index";
export * as results from "./results/index";
export * as proctoredExams from "./proctoredExams/index";

/**
 * Create a new Enterprise LMS assessment record.
 *
 * Create a new assessment with detailed properties specifying code, title,
 * type, scoring criteria, schedule, and lifecycle status within the Enterprise
 * LMS.
 *
 * Only authorized roles such as systemAdmin, organizationAdmin, and
 * contentCreatorInstructor may perform this operation.
 *
 * This writes into the enterprise_lms_assessments table and returns the created
 * entity with system-generated UUID and timestamps.
 *
 * Clients can use this to add assessments for courses and training management.
 *
 * @param props.connection
 * @param props.body Assessment creation data
 * @path /enterpriseLms/organizationAdmin/assessments
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Assessment creation data */
    body: IEnterpriseLmsAssessments.ICreate;
  };
  export type Body = IEnterpriseLmsAssessments.ICreate;
  export type Response = IEnterpriseLmsAssessments;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/assessments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/assessments";
  export const random = (): IEnterpriseLmsAssessments =>
    typia.random<IEnterpriseLmsAssessments>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of Enterprise LMS assessments.
 *
 * Retrieve a filtered and paginated list of assessments from the Enterprise
 * LMS. The operation supports search by code, title, description, and
 * assessment type, as well as filtering by status and scheduled dates.
 * Pagination parameters allow for efficient browsing through the assessment
 * collection.
 *
 * Security considerations restrict access to authenticated users with roles
 * such as systemAdmin, organizationAdmin, or contentCreatorInstructor, ensuring
 * proper permission scopes are enforced.
 *
 * This operation interacts with the enterprise_lms_assessments database table,
 * referencing core fields including assessment codes, titles, types, scoring
 * criteria, schedule, and status. Clients can use this endpoint to implement
 * administrative dashboards or course management views.
 *
 * Related operations include GET /assessments/{assessmentId} for detail
 * retrieval and POST /assessments for assessment creation.
 *
 * Errors for invalid filters or unauthorized access will be returned with
 * suitable HTTP status codes and message bodies.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for filtering assessments
 * @path /enterpriseLms/organizationAdmin/assessments
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for filtering assessments */
    body: IEnterpriseLmsAssessments.IRequest;
  };
  export type Body = IEnterpriseLmsAssessments.IRequest;
  export type Response = IPageIEnterpriseLmsAssessments;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/assessments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/organizationAdmin/assessments";
  export const random = (): IPageIEnterpriseLmsAssessments =>
    typia.random<IPageIEnterpriseLmsAssessments>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific Enterprise LMS assessment by ID.
 *
 * Retrieve comprehensive details of a specified assessment by its ID within the
 * Enterprise LMS. The response includes all properties such as codes, titles,
 * type, scoring details, schedule, and status.
 *
 * Security restrictions apply to ensure that only authorized roles including
 * systemAdmin, organizationAdmin, and contentCreatorInstructor can access this
 * data.
 *
 * This API operation corresponds to the enterprise_lms_assessments database
 * table.
 *
 * Clients may use this endpoint for detailed assessment views and editing
 * workflows.
 *
 * Error handling includes 404 Not Found for missing resources and 403 Forbidden
 * for insufficient permissions.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsAssessments;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}`;
  export const random = (): IEnterpriseLmsAssessments =>
    typia.random<IEnterpriseLmsAssessments>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing assessment entity.
 *
 * Update an existing assessment identified by assessmentId within the
 * Enterprise LMS system. This operation allows modification of all mutable
 * properties of the assessment such as its code, title, description, type
 * (e.g., quiz, survey), scoring thresholds, scheduled times, and lifecycle
 * status. Tenant isolation ensures the assessment belongs to the tenant context
 * of the requester.
 *
 * Security requires that only authorized users with appropriate roles
 * (systemAdmin, organizationAdmin) can perform this update due to the impact on
 * learner assignments and reporting.
 *
 * The operation interacts with the enterprise_lms_assessments table in the
 * Prisma schema, respecting fields such as `code`, `title`, `status`, and
 * timestamps. Validation rules include ensuring the assessment's scheduled
 * dates are valid and consistent.
 *
 * Related entities like assessment questions and proctored exams need to remain
 * consistent with the updated assessment.
 *
 * If the assessment is soft deleted, the update should not be permitted.
 *
 * This operation does not return a response body; success is indicated by HTTP
 * 200 OK status.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment to
 *   update
 * @param props.body Data for updating the assessment entity
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<void> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target assessment to update */
    assessmentId: string & tags.Format<"uuid">;

    /** Data for updating the assessment entity */
    body: IEnterpriseLmsAssessment.IUpdate;
  };
  export type Body = IEnterpriseLmsAssessment.IUpdate;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing assessment permanently.
 *
 * Permanently delete the specified assessment by its UUID.
 *
 * This operation performs a hard delete removing the assessment and all its
 * dependent data, including questions and results, from the database.
 *
 * Only users with systemAdmin or organizationAdmin roles are authorized to
 * perform this irreversible deletion.
 *
 * The assessment to delete is identified by the path parameter `assessmentId`.
 *
 * No request body or response body is required.
 *
 * Once deleted, the data cannot be recovered.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment to
 *   delete
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target assessment to delete */
    assessmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
