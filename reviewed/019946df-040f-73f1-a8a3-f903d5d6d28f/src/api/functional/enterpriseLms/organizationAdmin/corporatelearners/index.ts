import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsCorporateLearner } from "../../../../structures/IEnterpriseLmsCorporateLearner";
import { IPageIEnterpriseLmsCorporatelearner } from "../../../../structures/IPageIEnterpriseLmsCorporatelearner";

/**
 * Create a new corporate learner user account with necessary details including
 * email, password hash, first name, last name, and status.
 *
 * The operation performs validation on the input data according to the schema
 * and business rules.
 *
 * After successful creation, it returns the full corporate learner info
 * including newly assigned IDs and timestamps.
 *
 * This endpoint is restricted to roles authorized to create users within the
 * tenant.
 *
 * Request body must conform to the corporate learner creation schema.
 *
 * No path parameters are needed for creation.
 *
 * Proper authorization is required to maintain security and data integrity.
 *
 * @param props.connection
 * @param props.body Corporate learner user creation data
 * @path /enterpriseLms/organizationAdmin/corporatelearners
 * @accessor api.functional.enterpriseLms.organizationAdmin.corporatelearners.createCorporatelearners
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCorporatelearners(
  connection: IConnection,
  props: createCorporatelearners.Props,
): Promise<createCorporatelearners.Response> {
  return true === connection.simulate
    ? createCorporatelearners.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCorporatelearners.METADATA,
          path: createCorporatelearners.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createCorporatelearners {
  export type Props = {
    /** Corporate learner user creation data */
    body: IEnterpriseLmsCorporateLearner.ICreate;
  };
  export type Body = IEnterpriseLmsCorporateLearner.ICreate;
  export type Response = IEnterpriseLmsCorporateLearner;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/corporatelearners",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/corporatelearners";
  export const random = (): IEnterpriseLmsCorporateLearner =>
    typia.random<IEnterpriseLmsCorporateLearner>();
  export const simulate = (
    connection: IConnection,
    props: createCorporatelearners.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCorporatelearners.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate corporate learner user accounts.
 *
 * Fetch a filtered and paginated list of corporate learners in the system. This
 * enables searching learners by multiple criteria including name, email,
 * status, and registration dates.
 *
 * The operation fully supports pagination parameters like page number and page
 * size, alongside sorting options on several fields.
 *
 * Security filtering ensures that only users with proper roles can view learner
 * details scoped to tenant and organizational permissions.
 *
 * This operation returns summary information optimized for client UI listings
 * and supports large data sets with efficient queries.
 *
 * Filtering and searching are done via the request body criteria defined in the
 * search DTO.
 *
 * No path parameters are required for this operation.
 *
 * Suitable for managing corporate learner accounts in an administrative user
 * interface.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for corporate
 *   learners
 * @path /enterpriseLms/organizationAdmin/corporatelearners
 * @accessor api.functional.enterpriseLms.organizationAdmin.corporatelearners.indexCorporatelearners
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCorporatelearners(
  connection: IConnection,
  props: indexCorporatelearners.Props,
): Promise<indexCorporatelearners.Response> {
  return true === connection.simulate
    ? indexCorporatelearners.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCorporatelearners.METADATA,
          path: indexCorporatelearners.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexCorporatelearners {
  export type Props = {
    /** Search criteria and pagination parameters for corporate learners */
    body: IEnterpriseLmsCorporateLearner.IRequest;
  };
  export type Body = IEnterpriseLmsCorporateLearner.IRequest;
  export type Response = IPageIEnterpriseLmsCorporatelearner.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/corporatelearners",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/corporatelearners";
  export const random = (): IPageIEnterpriseLmsCorporatelearner.ISummary =>
    typia.random<IPageIEnterpriseLmsCorporatelearner.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexCorporatelearners.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCorporatelearners.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a corporate learner by ID.
 *
 * Retrieve detailed information for a single corporate learner identified by
 * the unique ID.
 *
 * Security checks ensure the requesting user has rights to view this data
 * within the tenant context.
 *
 * This operation returns a detailed resource representing the corporate learner
 * user.
 *
 * If the specified learner does not exist, a not found error will be raised.
 *
 * Path parameter exactly matches the corporatelearner ID.
 *
 * Authorized roles include organizationAdmin and systemAdmin.
 *
 * @param props.connection
 * @param props.corporatelearnerId Unique identifier of the corporate learner
 *   user to retrieve
 * @path /enterpriseLms/organizationAdmin/corporatelearners/:corporatelearnerId
 * @accessor api.functional.enterpriseLms.organizationAdmin.corporatelearners.atCorporatelearners
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atCorporatelearners(
  connection: IConnection,
  props: atCorporatelearners.Props,
): Promise<atCorporatelearners.Response> {
  return true === connection.simulate
    ? atCorporatelearners.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atCorporatelearners.METADATA,
          path: atCorporatelearners.path(props),
          status: null,
        },
      );
}
export namespace atCorporatelearners {
  export type Props = {
    /** Unique identifier of the corporate learner user to retrieve */
    corporatelearnerId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsCorporateLearner;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/corporatelearners/:corporatelearnerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/corporatelearners/${encodeURIComponent(props.corporatelearnerId ?? "null")}`;
  export const random = (): IEnterpriseLmsCorporateLearner =>
    typia.random<IEnterpriseLmsCorporateLearner>();
  export const simulate = (
    connection: IConnection,
    props: atCorporatelearners.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atCorporatelearners.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("corporatelearnerId")(() =>
        typia.assert(props.corporatelearnerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update corporate learner information by ID.
 *
 * Update the detailed information of a corporate learner by their unique
 * identifier. This operation allows modification of all user-specific fields
 * including personal names, login email, hashed password, and account status.
 * It ensures tenant isolation by linking the learner to their organization. All
 * input fields are validated, and sensitive data like password hashes are
 * securely handled. The update preserves audit compliance by timestamping
 * changes.
 *
 * Users performing this operation should have administrative permissions
 * appropriate to modify learner data within tenant scope. Validation ensures
 * email uniqueness per tenant.
 *
 * Response includes the updated corporate learner entity with current
 * attributes. Errors occur if corporate learner ID does not exist or if
 * validation fails (e.g., duplicate email). This API enforces strict tenant
 * access control.
 *
 * @param props.connection
 * @param props.corporatelearnerId Unique identifier of the corporate learner
 * @param props.body Corporate learner update payload
 * @path /enterpriseLms/organizationAdmin/corporatelearners/:corporatelearnerId
 * @accessor api.functional.enterpriseLms.organizationAdmin.corporatelearners.updateCorporatelearner
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCorporatelearner(
  connection: IConnection,
  props: updateCorporatelearner.Props,
): Promise<updateCorporatelearner.Response> {
  return true === connection.simulate
    ? updateCorporatelearner.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCorporatelearner.METADATA,
          path: updateCorporatelearner.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCorporatelearner {
  export type Props = {
    /** Unique identifier of the corporate learner */
    corporatelearnerId: string & tags.Format<"uuid">;

    /** Corporate learner update payload */
    body: IEnterpriseLmsCorporateLearner.IUpdate;
  };
  export type Body = IEnterpriseLmsCorporateLearner.IUpdate;
  export type Response = IEnterpriseLmsCorporateLearner;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/corporatelearners/:corporatelearnerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/corporatelearners/${encodeURIComponent(props.corporatelearnerId ?? "null")}`;
  export const random = (): IEnterpriseLmsCorporateLearner =>
    typia.random<IEnterpriseLmsCorporateLearner>();
  export const simulate = (
    connection: IConnection,
    props: updateCorporatelearner.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCorporatelearner.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("corporatelearnerId")(() =>
        typia.assert(props.corporatelearnerId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
