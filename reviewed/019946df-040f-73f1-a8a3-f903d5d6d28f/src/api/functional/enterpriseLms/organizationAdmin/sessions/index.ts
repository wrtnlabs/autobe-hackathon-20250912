import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsSessions } from "../../../../structures/IEnterpriseLmsSessions";

/**
 * Update an existing LMS user session with new information.
 *
 * Update an active user session in the LMS system. This endpoint modifies
 * session properties like device information, IP address, and expiration
 * timestamp for a specific session ID.
 *
 * This operation requires proper authentication and authorization because it
 * affects user login sessions and security.
 *
 * The enterprise_lms_sessions table tracks session tokens, device metadata, and
 * expiry times. This update ensures continuous session management, enabling
 * session revocation or extension as per business logic.
 *
 * The request body must include fields allowed for update as defined in the
 * IEnterpriseLmsSessions.IUpdate schema. The response body returns the updated
 * session information.
 *
 * Proper error handling includes returning 404 if the session ID is not found,
 * and 403 if unauthorized access occurs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the session to update
 * @param props.body Updated session information
 * @path /enterpriseLms/organizationAdmin/sessions/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.sessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the session to update */
    id: string & tags.Format<"uuid">;

    /** Updated session information */
    body: IEnterpriseLmsSessions.IUpdate;
  };
  export type Body = IEnterpriseLmsSessions.IUpdate;
  export type Response = IEnterpriseLmsSessions;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/sessions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/sessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSessions =>
    typia.random<IEnterpriseLmsSessions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a LMS user session permanently.
 *
 * Delete a user session by its unique identifier. This permanently removes the
 * session record from the database, revoking user access.
 *
 * Careful authorization checks must be done before performing this operation.
 *
 * Returns no content upon success. Errors include 404 if session not found and
 * 403 for unauthorized attempts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the session to delete
 * @path /enterpriseLms/organizationAdmin/sessions/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.sessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the session to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/sessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
