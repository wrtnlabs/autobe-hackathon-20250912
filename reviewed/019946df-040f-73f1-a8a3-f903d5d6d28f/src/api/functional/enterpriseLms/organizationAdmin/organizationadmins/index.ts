import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsOrganizationAdmin } from "../../../../structures/IEnterpriseLmsOrganizationAdmin";
import { IPageIEnterpriseLmsOrganizationadmin } from "../../../../structures/IPageIEnterpriseLmsOrganizationadmin";

/**
 * Create a new organization administrator user.
 *
 * This API operation allows the creation of a new organization administrator
 * user. Organization Administrators manage users, roles, content approvals,
 * configurations, and billing within their own organization, scoped by tenant.
 *
 * Security considerations require authentication and authorization to ensure
 * only system or existing administrators can create new org admins.
 *
 * The operation maps directly to the 'enterprise_lms_organizationadmin' table
 * in the database. It enforces uniqueness on the email field within the
 * tenant.
 *
 * Request must include tenant_id to associate the new admin with the correct
 * organization. All fields must be validated for format and constraints.
 *
 * On success, the newly created organization administrator record is returned
 * excluding the password hash.
 *
 * Errors occur if the email is already taken within the tenant or if tenant_id
 * is invalid.
 *
 * This operation is typically used by system administrators or via backend
 * management tools.
 *
 * @param props.connection
 * @param props.body Information required to create an organization
 *   administrator account
 * @path /enterpriseLms/organizationAdmin/organizationadmins
 * @accessor api.functional.enterpriseLms.organizationAdmin.organizationadmins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create an organization administrator account */
    body: IEnterpriseLmsOrganizationAdmin.ICreate;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.ICreate;
  export type Response = IEnterpriseLmsOrganizationAdmin;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/organizationadmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/organizationadmins";
  export const random = (): IEnterpriseLmsOrganizationAdmin =>
    typia.random<IEnterpriseLmsOrganizationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list organization administrators.
 *
 * Search and retrieve a paginated list of organization administrators. Supports
 * filtering, sorting, and pagination.
 *
 * This operation operates on the enterprise_lms_organizationadmin table,
 * returning summaries optimized for list display.
 *
 * Authorization roles include systemAdmin and organizationAdmin to enable
 * management within tenant boundaries.
 *
 * This is used to support user and role management features in the admin UI.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for organization
 *   administrator filtering
 * @path /enterpriseLms/organizationAdmin/organizationadmins
 * @accessor api.functional.enterpriseLms.organizationAdmin.organizationadmins.searchOrganizationAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchOrganizationAdmins(
  connection: IConnection,
  props: searchOrganizationAdmins.Props,
): Promise<searchOrganizationAdmins.Response> {
  return true === connection.simulate
    ? searchOrganizationAdmins.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchOrganizationAdmins.METADATA,
          path: searchOrganizationAdmins.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchOrganizationAdmins {
  export type Props = {
    /**
     * Search criteria and pagination parameters for organization
     * administrator filtering
     */
    body: IEnterpriseLmsOrganizationAdmin.IRequest;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.IRequest;
  export type Response = IPageIEnterpriseLmsOrganizationadmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/organizationadmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/organizationadmins";
  export const random = (): IPageIEnterpriseLmsOrganizationadmin.ISummary =>
    typia.random<IPageIEnterpriseLmsOrganizationadmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchOrganizationAdmins.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchOrganizationAdmins.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed Organization Administrator user.
 *
 * Retrieve full details of an Organization Administrator user by unique
 * identifier.
 *
 * This operation accesses the enterprise_lms_organizationadmin table, returning
 * all user information including account status and tenant context.
 *
 * It requires the organizationadminId path parameter.
 *
 * Authorization roles include systemAdmin and organizationAdmin.
 *
 * Useful for editing and detail inspection in admin interfaces.
 *
 * @param props.connection
 * @param props.organizationadminId Unique identifier of the target organization
 *   admin user
 * @path /enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId
 * @accessor api.functional.enterpriseLms.organizationAdmin.organizationadmins.atOrganizationAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atOrganizationAdmin(
  connection: IConnection,
  props: atOrganizationAdmin.Props,
): Promise<atOrganizationAdmin.Response> {
  return true === connection.simulate
    ? atOrganizationAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atOrganizationAdmin.METADATA,
          path: atOrganizationAdmin.path(props),
          status: null,
        },
      );
}
export namespace atOrganizationAdmin {
  export type Props = {
    /** Unique identifier of the target organization admin user */
    organizationadminId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsOrganizationAdmin;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/organizationadmins/${encodeURIComponent(props.organizationadminId ?? "null")}`;
  export const random = (): IEnterpriseLmsOrganizationAdmin =>
    typia.random<IEnterpriseLmsOrganizationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: atOrganizationAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atOrganizationAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationadminId")(() =>
        typia.assert(props.organizationadminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing organization administrator user.
 *
 * Update details of an existing organization administrator user by ID.
 *
 * Organization Administrators manage organization settings, users, roles, and
 * billing. Only authorized users with admin roles can perform this operation.
 *
 * The operation updates database fields except for tenant association which is
 * immutable.
 *
 * Input parameters include the organizationadminId to identify the user and a
 * payload containing any updatable user fields.
 *
 * The response returns the updated organization administrator record.
 *
 * Errors are returned if the record does not exist or if email conflicts occur.
 *
 * This operation is essential for maintaining organization admin user
 * information and roles.
 *
 * @param props.connection
 * @param props.organizationadminId Unique identifier of the target organization
 *   administrator user
 * @param props.body Data fields to update an organization administrator user
 * @path /enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId
 * @accessor api.functional.enterpriseLms.organizationAdmin.organizationadmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target organization administrator user */
    organizationadminId: string & tags.Format<"uuid">;

    /** Data fields to update an organization administrator user */
    body: IEnterpriseLmsOrganizationAdmin.IUpdate;
  };
  export type Body = IEnterpriseLmsOrganizationAdmin.IUpdate;
  export type Response = IEnterpriseLmsOrganizationAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/organizationadmins/${encodeURIComponent(props.organizationadminId ?? "null")}`;
  export const random = (): IEnterpriseLmsOrganizationAdmin =>
    typia.random<IEnterpriseLmsOrganizationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationadminId")(() =>
        typia.assert(props.organizationadminId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an organization administrator user by ID.
 *
 * Delete an organization administrator user by their unique ID.
 *
 * This operation permanently removes the user record from the database.
 *
 * Only users with admin privileges are authorized to perform this deletion.
 *
 * Any dependent data or references must be handled appropriately by the
 * database or external logic.
 *
 * Errors are returned if the user ID does not exist.
 *
 * Deletion is irreversible and must be done with caution.
 *
 * Typically used for user cleanup or removing inactive administrators.
 *
 * @param props.connection
 * @param props.organizationadminId Unique identifier of the target organization
 *   administrator user
 * @path /enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId
 * @accessor api.functional.enterpriseLms.organizationAdmin.organizationadmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target organization administrator user */
    organizationadminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/organizationadmins/:organizationadminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/organizationadmins/${encodeURIComponent(props.organizationadminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationadminId")(() =>
        typia.assert(props.organizationadminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
