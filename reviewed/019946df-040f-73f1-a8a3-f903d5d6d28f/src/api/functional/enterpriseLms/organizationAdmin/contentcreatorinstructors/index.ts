import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentCreatorInstructor } from "../../../../structures/IEnterpriseLmsContentCreatorInstructor";
import { IPageIEnterpriseLmsContentcreatorinstructor } from "../../../../structures/IPageIEnterpriseLmsContentcreatorinstructor";

/**
 * Create a new content creator/instructor account with provided details. The
 * new user is assigned to the specified tenant organization. The operation
 * requires organization administrator privileges.
 *
 * Input must include valid email, hashed password, first name, last name, and
 * initial account status.
 *
 * The operation verifies uniqueness of the email within the tenant context and
 * returns the created profile upon success.
 *
 * Errors include validation failures for missing or invalid data, duplication
 * errors, and authorization failures.
 *
 * @param props.connection
 * @param props.body Creation info for new content creator/instructor user
 * @path /enterpriseLms/organizationAdmin/contentcreatorinstructors
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentcreatorinstructors.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info for new content creator/instructor user */
    body: IEnterpriseLmsContentCreatorInstructor.ICreate;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.ICreate;
  export type Response = IEnterpriseLmsContentCreatorInstructor;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/contentcreatorinstructors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/contentcreatorinstructors";
  export const random = (): IEnterpriseLmsContentCreatorInstructor =>
    typia.random<IEnterpriseLmsContentCreatorInstructor>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of content
 * creators/instructors.
 *
 * Retrieve a filtered and paginated list of content creator/instructor accounts
 * within the enterprise LMS. This operation allows clients to query for users
 * with specific attributes such as active status or email patterns and supports
 * sorting and pagination to handle large datasets efficiently.
 *
 * Security considerations restrict access to organization administrators with
 * appropriate roles, ensuring tenant data isolation and protecting sensitive
 * personal information.
 *
 * This operation directly corresponds to the
 * enterprise_lms_contentcreatorinstructor table as defined in the Prisma
 * schema. The results include summary representations for performance and
 * usability.
 *
 * Typical usage involves administrative dashboards controlling user management
 * for content creators and instructors.
 *
 * The operation returns only active users unless specified otherwise and
 * supports the exclusion of soft-deleted records.
 *
 * Errors returned include validation errors for incorrect filter criteria and
 * authorization failures when role requirements are not met.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for content
 *   creator/instructor filtering
 * @path /enterpriseLms/organizationAdmin/contentcreatorinstructors
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentcreatorinstructors.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for content
     * creator/instructor filtering
     */
    body: IEnterpriseLmsContentCreatorInstructor.IRequest;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.IRequest;
  export type Response = IPageIEnterpriseLmsContentcreatorinstructor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/contentcreatorinstructors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/contentcreatorinstructors";
  export const random =
    (): IPageIEnterpriseLmsContentcreatorinstructor.ISummary =>
      typia.random<IPageIEnterpriseLmsContentcreatorinstructor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve content creator/instructor details by ID.
 *
 * Retrieve detailed information of a content creator/instructor user by their
 * unique identifier. This operation fetches complete user profile data as
 * stored in the enterprise_lms_contentcreatorinstructor table, including email,
 * names, status, and tenant association.
 *
 * Only organization administrators have permission to access this sensitive
 * information. The operation enforces multi-tenant data isolation by requiring
 * the correct tenant context.
 *
 * If the user ID does not exist, an error indicating a missing resource is
 * returned.
 *
 * This endpoint supports administrative user management workflows such as
 * account review and status changes.
 *
 * @param props.connection
 * @param props.contentcreatorinstructorId Unique identifier of the target
 *   content creator/instructor user
 * @path /enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentcreatorinstructors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content creator/instructor user */
    contentcreatorinstructorId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentCreatorInstructor;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/contentcreatorinstructors/${encodeURIComponent(props.contentcreatorinstructorId ?? "null")}`;
  export const random = (): IEnterpriseLmsContentCreatorInstructor =>
    typia.random<IEnterpriseLmsContentCreatorInstructor>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentcreatorinstructorId")(() =>
        typia.assert(props.contentcreatorinstructorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update content creator/instructor details by ID.
 *
 * Update an existing content creator/instructor user’s details by their unique
 * identifier. Supports modification of user attributes including email, names,
 * password hash, and account status.
 *
 * Restricted to organization administrators to ensure proper data governance
 * and tenant isolation.
 *
 * If the specified user ID does not exist, a not found error is returned.
 *
 * This endpoint is commonly used for administrative user management including
 * status changes and profile updates.
 *
 * @param props.connection
 * @param props.contentcreatorinstructorId Unique identifier of the target
 *   content creator/instructor user
 * @param props.body Update information for content creator/instructor user
 * @path /enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentcreatorinstructors.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target content creator/instructor user */
    contentcreatorinstructorId: string & tags.Format<"uuid">;

    /** Update information for content creator/instructor user */
    body: IEnterpriseLmsContentCreatorInstructor.IUpdate;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.IUpdate;
  export type Response = IEnterpriseLmsContentCreatorInstructor;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/contentcreatorinstructors/${encodeURIComponent(props.contentcreatorinstructorId ?? "null")}`;
  export const random = (): IEnterpriseLmsContentCreatorInstructor =>
    typia.random<IEnterpriseLmsContentCreatorInstructor>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentcreatorinstructorId")(() =>
        typia.assert(props.contentcreatorinstructorId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a content creator/instructor user account by ID.
 *
 * Delete one content creator or instructor user account by the unique
 * identifier. This operation permanently removes the user record from the
 * system.
 *
 * Security considerations include verifying caller has sufficient permissions,
 * and ensuring that deletion respects multi-tenant data isolation to prevent
 * data leakage across organizations.
 *
 * This operation directly manipulates the
 * enterprise_lms_contentcreatorinstructor table where the user data resides.
 *
 * This hard delete action will remove the data completely and cannot be undone.
 * Related data updates or cascading effects will depend on the underlying DB
 * constraints.
 *
 * If the user does not exist or access is denied, an error response will be
 * returned.
 *
 * No request body is needed, only the path parameter specifying the
 * contentcreatorinstructor ID.
 *
 * Authorized roles can access this endpoint to maintain system integrity and
 * user management.
 *
 * @param props.connection
 * @param props.contentcreatorinstructorId Unique identifier of the content
 *   creator or instructor user to delete
 * @path /enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId
 * @accessor api.functional.enterpriseLms.organizationAdmin.contentcreatorinstructors.eraseContentcreatorinstructors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseContentcreatorinstructors(
  connection: IConnection,
  props: eraseContentcreatorinstructors.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseContentcreatorinstructors.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseContentcreatorinstructors.METADATA,
          path: eraseContentcreatorinstructors.path(props),
          status: null,
        },
      );
}
export namespace eraseContentcreatorinstructors {
  export type Props = {
    /** Unique identifier of the content creator or instructor user to delete */
    contentcreatorinstructorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/contentcreatorinstructors/:contentcreatorinstructorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/contentcreatorinstructors/${encodeURIComponent(props.contentcreatorinstructorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseContentcreatorinstructors.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseContentcreatorinstructors.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentcreatorinstructorId")(() =>
        typia.assert(props.contentcreatorinstructorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
