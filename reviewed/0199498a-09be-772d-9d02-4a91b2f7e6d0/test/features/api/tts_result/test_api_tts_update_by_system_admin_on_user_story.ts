import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IStoryfieldAiAuthenticatedUser } from "@ORGANIZATION/PROJECT-api/lib/structures/IStoryfieldAiAuthenticatedUser";
import type { IStoryfieldAiStory } from "@ORGANIZATION/PROJECT-api/lib/structures/IStoryfieldAiStory";
import type { IStoryfieldAiStoryPage } from "@ORGANIZATION/PROJECT-api/lib/structures/IStoryfieldAiStoryPage";
import type { IStoryfieldAiSystemAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/IStoryfieldAiSystemAdmin";
import type { IStoryfieldAiTtsResult } from "@ORGANIZATION/PROJECT-api/lib/structures/IStoryfieldAiTtsResult";

/**
 * Validate that a system administrator can update a TTS result generated by/for
 * a user story (cross-role privilege) and changes are effective.
 *
 * 1. Register and login as an authenticated user
 * 2. Create a story, story page, and a TTS result as that user
 * 3. Register and login as system admin
 * 4. Update the TTS result as system admin (change dialect/source_text)
 * 5. Confirm update is effective (fields changed, updated_at changes)
 * 6. Negative: Try update with invalid TTS result id and expect business error.
 */
export async function test_api_tts_update_by_system_admin_on_user_story(
  connection: api.IConnection,
) {
  // Register as Authenticated User
  const userExternalId = RandomGenerator.alphaNumeric(10);
  const userEmail = `user_${RandomGenerator.alphaNumeric(8)}@company.com`;
  const userCreate = {
    external_user_id: userExternalId,
    email: userEmail,
    actor_type: "authenticatedUser",
  } satisfies IStoryfieldAiAuthenticatedUser.ICreate;

  const userAuth = await api.functional.auth.authenticatedUser.join(
    connection,
    { body: userCreate },
  );
  typia.assert(userAuth);

  // Login as user (refresh session, simulate real flow)
  const userLogin = await api.functional.auth.authenticatedUser.login(
    connection,
    {
      body: {
        external_user_id: userExternalId,
        email: userEmail,
      } satisfies IStoryfieldAiAuthenticatedUser.ILogin,
    },
  );
  typia.assert(userLogin);

  // Create story as user
  const storyCreate = {
    title: RandomGenerator.paragraph({ sentences: 4 }),
    main_plot: RandomGenerator.paragraph({ sentences: 8 }),
    language: RandomGenerator.pick(["ko-KR", "en", "gyeongsang", "jeolla"]), // simulating dialect choice
  } satisfies IStoryfieldAiStory.ICreate;
  const story =
    await api.functional.storyfieldAi.authenticatedUser.stories.create(
      connection,
      { body: storyCreate },
    );
  typia.assert(story);

  // Create a story page as user
  const pageCreate = {
    page_number: 1,
    text: RandomGenerator.content({
      paragraphs: 1,
      sentenceMin: 3,
      sentenceMax: 5,
    }),
  } satisfies IStoryfieldAiStoryPage.ICreate;
  const storyPage =
    await api.functional.storyfieldAi.authenticatedUser.stories.pages.create(
      connection,
      {
        storyId: story.id,
        body: pageCreate,
      },
    );
  typia.assert(storyPage);

  // Create TTS result as user (associate with story + story page)
  const ttsCreate = {
    tts_audio_uri: `https://storage.example.com/tts/${RandomGenerator.alphaNumeric(8)}.mp3`,
    source_text: storyPage.text,
    dialect: story.language,
    storyfield_ai_story_page_id: storyPage.id,
  } satisfies IStoryfieldAiTtsResult.ICreate;
  const ttsResult =
    await api.functional.storyfieldAi.authenticatedUser.stories.ttsResults.create(
      connection,
      {
        storyId: story.id,
        body: ttsCreate,
      },
    );
  typia.assert(ttsResult);

  // Register as system admin
  const adminExternalId = RandomGenerator.alphaNumeric(10);
  const adminEmail = `admin_${RandomGenerator.alphaNumeric(8)}@company.com`;
  const adminCreate = {
    external_admin_id: adminExternalId,
    email: adminEmail,
    actor_type: "systemAdmin",
  } satisfies IStoryfieldAiSystemAdmin.IJoin;

  const sysAdminAuth = await api.functional.auth.systemAdmin.join(connection, {
    body: adminCreate,
  });
  typia.assert(sysAdminAuth);

  // Login as system admin
  const sysAdminLogin = await api.functional.auth.systemAdmin.login(
    connection,
    {
      body: {
        external_admin_id: adminExternalId,
        email: adminEmail,
      } satisfies IStoryfieldAiSystemAdmin.ILogin,
    },
  );
  typia.assert(sysAdminLogin);

  // As system admin, update the user's TTS result (change dialect and source text)
  const updatedDialect = RandomGenerator.pick([
    "jeolla",
    "gyeongsang",
    "en",
    "ko-KR",
  ]);
  const updatedSource = RandomGenerator.paragraph({ sentences: 2 });

  const updateBody = {
    dialect: updatedDialect,
    source_text: updatedSource,
  } satisfies IStoryfieldAiTtsResult.IUpdate;

  const updatedTts =
    await api.functional.storyfieldAi.systemAdmin.stories.ttsResults.update(
      connection,
      {
        storyId: story.id,
        ttsResultId: ttsResult.id,
        body: updateBody,
      },
    );
  typia.assert(updatedTts);
  // Validate that dialect and source_text changed
  TestValidator.equals(
    "TTS dialect is updated",
    updatedTts.dialect,
    updatedDialect,
  );
  TestValidator.equals(
    "TTS source_text is updated",
    updatedTts.source_text,
    updatedSource,
  );
  TestValidator.notEquals(
    "TTS updated_at changed",
    updatedTts.updated_at,
    ttsResult.updated_at,
  );

  // Negative: Try updating non-existent TTS result as admin
  const invalidResultId = typia.random<string & tags.Format<"uuid">>();
  await TestValidator.error(
    "Admin update to non-existent TTS result fails",
    async () => {
      await api.functional.storyfieldAi.systemAdmin.stories.ttsResults.update(
        connection,
        {
          storyId: story.id,
          ttsResultId: invalidResultId,
          body: updateBody,
        },
      );
    },
  );
  // (Placeholder) Optionally: Validate audit/compliance log record exists if API exposes audit endpoints.
}
