{"operations":[{"specification":"Enable a new StoryField AI authenticated user to register with the system using credentials that have already been verified by the external Spring backend (external_user_id, email). This operation is required for all users that wish to generate stories, access their generated content, and utilize other core business features. The Prisma schema's storyfield_ai_authenticatedusers table supports: external_user_id (unique string), email (unique string), actor_type (should always be 'authenticatedUser' for this operation), and audit fields (created_at, updated_at). The registration process does not require password assignment or typical local verification since all onboarding and credentialing is managed by the Spring backend. The join operation is the only way for a new authenticatedUser to onboard to this system and is foundational to linking external identity to internal authorization. There are no soft delete or recovery credentials for registration; deactivation uses deleted_at timestamp managed elsewhere.\n\nSecurity: Registration is a public operation; however, all submitted identities must reference credentials validated by the Spring backend (external_user_id).\n\nThis operation has no dependency on other business APIs for onboarding. Post-registration, the user may proceed to login (token issuance) and refresh operations.\n\nSchema fields referenced: external_user_id, email, actor_type, created_at, updated_at.","authorizationType":"join","description":"Allows a new user, already authenticated and verified externally via Spring, to register as an authenticatedUser in the StoryField AI platform. This operation creates an entry in the storyfield_ai_authenticatedusers table, recording essential onboarding information including a unique external_user_id mapped to the Spring user, a business-unique email, and a fixed actor_type ('authenticatedUser'). Registration is required for all subsequent story generation, TTS, and personalized result retrieval.\n\nUnlike traditional local account systems, registration does not involve password collection or credential assignment. All authentication happens prior, managed solely by the Spring backend. This ensures the system never directly handles user passwords or local account secrets, simplifying compliance and reducing exposure.\n\nRole-specific integration is guaranteed by actor_type, which is always set to 'authenticatedUser' for this API and validated by downstream business logic. The registration step strictly binds a verified Spring identity to the StoryField AI business context, creating the foundational link needed for resource ownership, TTS association, and audit trails.\n\nSecurity is preserved by requiring the external_user_id obtained from Spring, ensuring that no unauthenticated or spoofed identities can join. There is no local validation of passwords, nor password reset or change supported at registration--token management is fully delegated.\n\nThis operation is always the first step of the onboarding workflow for authenticatedUser and is not used for guest or admin actors. Related operations include token login (for access), token refresh, and account soft-deletion managed via deleted_at.","summary":"Register a new StoryField AI authenticatedUser (storyfield_ai_authenticatedusers) given a verified external_user_id and email.","parameters":[],"requestBody":{"description":"Registration payload including external_user_id, unique email, with actor_type fixed as 'authenticatedUser'.","typeName":"IStoryfieldAiAuthenticatedUser.ICreate"},"responseBody":{"description":"Authorized session and claims in standard business contract (including user info and issued tokens).","typeName":"IStoryfieldAiAuthenticatedUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/authenticatedUser/join","method":"post"},{"specification":"Authenticate an existing StoryField AI authenticatedUser using credentials/identifiers mapped to a verified Spring external_user_id and email. This triggers session token (JWT) issuance for the given user and supports login tracking, business session establishment, and internal audit. Prisma schema stores only mapped fields and does not manage local password or challenge-response; authentication depends on validation against Spring backend records, not local secrets. Token issuance/event creation is recorded via storyfield_ai_token_sessions, enabling session revocation and secure trace.\n\nSecurity: Login is always public but enforces external identity proof. No soft delete or local disabled state for credentials; disabled state must be effected via deleted_at field by management operations or soft delete lifecycle elsewhere.\n\nThere are no other dependencies. Post-login, users may access core features, issue refresh tokens, and initiate business operations. Token sessions and claims are managed per data model storyfield_ai_token_sessions mapping.\n\nSchema fields referenced: external_user_id, email, storyfield_ai_authenticatedusers.primaryKey, no password required.","authorizationType":"login","description":"Allows an externally verified user (mapped from Spring backend; by external_user_id and unique email) to ‘login’ into the StoryField AI platform, resulting in the issuance of a JWT or similar session token. This login is the only way for an authenticatedUser to retrieve active access tokens and establish business session state. The storyfield_ai_authenticatedusers Table ensures mapping of external_user_id/email for all identity proof; no password or local secret is required or accepted.\n\nThe business logic never sees user passwords or performs any challenge-response—authentication depends entirely on successful proof with Spring. The result is a session issuance, claims construction, and audit log for compliance. Role integration is via actor_type: 'authenticatedUser', as recorded in the table. Security is ensured by using only the externally-verified external_user_id and email as credential base; login is not available for soft-deleted accounts, as indicated by deleted_at being set.\n\nNo multi-factor or credential reset is supported locally; token/session lifecycle is managed via token table and downstream audit hooks. Related operations include registration/join, token refresh, and soft delete via deleted_at field, as well as token revocation if an abuse case arises.","summary":"Authenticate an existing authenticatedUser (storyfield_ai_authenticatedusers), issuing session tokens linked to external_user_id/email only.","parameters":[],"requestBody":{"description":"Login payload with external_user_id and email, mapped to a verified Spring user; no password.","typeName":"IStoryfieldAiAuthenticatedUser.ILogin"},"responseBody":{"description":"Authorized session and claims in standard business contract (including user info and issued tokens).","typeName":"IStoryfieldAiAuthenticatedUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/authenticatedUser/login","method":"post"},{"specification":"Refreshes an existing authenticatedUser session, replacing an expired or soon-to-expire access token with a new session token. The refresh operation depends on token/session verification against storyfield_ai_token_sessions and revocation/invalid state checks in storyfield_ai_token_revocations. The operation is only allowed for currently valid, non-revoked, non-soft-deleted users (deleted_at is null). Issuance of new token is subject to claims-checking and activity auditing via storyfield_ai_auth_audit_logs.\n\nSecurity: Refresh is only accessible for authenticatedUser who presents a valid current refresh token. This is not a public operation—authorization header with valid credentials is required. No password or local challenge is utilized. Token and user session/claims returned follow IStoryfieldAiAuthenticatedUser.IAuthorized response contract.\n\nDependencies include the prior creation of a valid session (from login/join), presence of token session record, and non-revoked, active status for user (no deleted_at). Related tables include storyfield_ai_token_sessions, storyfield_ai_token_revocations, and auth log for auditing.\n\nSchema fields referenced: session tokens (storyfield_ai_token_sessions), token_hash, authenticated_user_id, deleted_at field for logical inactivity status (user disabled).","authorizationType":"refresh","description":"Enables an authenticatedUser with a valid, non-revoked session to refresh their access token, establishing a new session/claims set. This operation is available only to users whose session is active (deleted_at is null) and whose previous session token has not been explicitly revoked or blacklisted (storyfield_ai_token_revocations). Token refresh does not require password or credential challenge—authorization is purely based on the session token provided in the Authorization header.\n\nUpon successful refresh, a new token/session is issued, replacing the old one and updating lifecycle audit and last activity/issued timestamps. The session lifecycle and claims are always based on external identity mapping, as established at join/login. Soft-deleted or revoked users cannot refresh; session status is strictly enforced.\n\nBusiness use: This operation is crucial for maintaining continuous, uninterrupted access to core business functionality without requiring users to re-login frequently. Related operations include login/session creation, token revocation, and session audit logging for compliance review.","summary":"Refresh session and access tokens for authenticatedUser (storyfield_ai_token_sessions) given existing, valid session/refresh token.","parameters":[],"requestBody":{"description":"No explicit input—uses the currently provided session or refresh token for validation via Authorization header.","typeName":"IStoryfieldAiAuthenticatedUser.IRefresh"},"responseBody":{"description":"Renewed session and claims; standard authorized contract (user info, new tokens).","typeName":"IStoryfieldAiAuthenticatedUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/authenticatedUser/refresh","method":"post"},{"specification":"This operation enables registration of a new systemAdmin account in the Storyfield AI platform. It is implemented as part of the authentication and authorization subsystem, utilizing the 'storyfield_ai_systemadmins' Prisma table to securely onboard new admins. The registration API collects required information such as external_admin_id (unique from the Spring/JWT backend) and email, associates them with the 'systemAdmin' actor_type, and records timestamps for creation and last update. Upon successful registration, a JWT access token is issued, and an initial token session (based on systemadmin privileges) is created in the 'storyfield_ai_token_sessions' table. Security is enforced by requiring proper unique constraints on both external_admin_id and email at the database level. The response body includes a DTO carrying the admin’s privileged authorized session information; sensitive fields like password are never exposed by the system. Soft-deletion is supported via deleted_at for future administrative deactivation. This endpoint is only used for onboarding new system administrators and is completely isolated from user (authenticatedUser) registration flows. It is expected that only pre-authorized operators or elevated business workflows would access this endpoint. For full authentication lifecycle coverage, combine this with the systemAdmin login and refresh endpoints. Error handling strictly follows schema-level and business logic validation for unique constraint breaches, missing fields, or unauthorized registration attempts.","authorizationType":"join","description":"Purpose: This API operation enables secure registration of new system administrators, by inserting a new record into the 'storyfield_ai_systemadmins' table using provided external_admin_id and email—uniquely validated at the database layer. This flow ensures that only authorized operator data is accepted, mapped from an existing Spring/JWT backend entity as 'external_admin_id'.\n\nImplementation: Upon receiving the payload, the service verifies uniqueness of both external_admin_id and email (ensuring no duplicate admins), sets the actor_type as 'systemAdmin', and persists audit-friendly timestamps (created_at/updated_at). No password is stored or managed by this endpoint; credential control is externalized to JWT integration with the Spring backend. The endpoint issues a JWT access token and logs session creation within 'storyfield_ai_token_sessions'.\n\nBusiness Role: 'systemAdmin' entries facilitate platform-level oversight, such as advanced monitoring, user management, abuse mitigation, and compliance operations. Their accounts are tracked and managed separately from general authenticated users, as reflected in completely distinct schema and workflow.\n\nSecurity: Registration is a highly privileged pathway: it is strictly isolated from all user-registration endpoints, accessible only to authorized operators in deployment, and subject to robust audit logging. Attempts to re-register or clone existing admin accounts are denied based on unique constraints. When an admin is later deactivated, soft deletion (deleted_at) ensures regulatory and business compliance.\n\nRelated Operations: To fully manage an admin's lifecycle, pair this registration endpoint with the systemAdmin login and token refresh flows. Registration initiates but does not maintain access; further access must be authenticated using the login route. Error states (duplicate, invalid data, etc.) are handled with detailed, non-sensitive feedback, and all events are audit-logged for traceability.","summary":"Register new systemAdmin account in storyfield_ai_systemadmins table with JWT token return.","parameters":[],"requestBody":{"description":"Registration payload for new systemAdmin, including external_admin_id (from JWT/Spring system) and email (business-unique), forming a new admin actor. No password required since external SSO/JWT handles credentialing.","typeName":"IStoryfieldAiSystemAdmin.IJoin"},"responseBody":{"description":"Authorized session representation for newly onboarded system admin, including JWT, identity, and role scope.","typeName":"IStoryfieldAiSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/systemAdmin/join","method":"post"},{"specification":"This API operation handles authentication for system administrators by verifying credentials mapped from external SSO/JWT via the 'storyfield_ai_systemadmins' table. It accepts external_admin_id (from JWT/Spring backend) and verifies that the admin is active and not soft-deleted (deleted_at is null). Upon successful verification, it issues a fresh JWT access token, records the login event with a new session in 'storyfield_ai_token_sessions' (with linkage to the admin by admin_id), and updates last_login_at for compliance audits. Responses include the fully authorized admin session information, never exposing sensitive or credential fields. The endpoint ensures that only systemAdmin entries with active privileges can sign in. Administrative login events are logged into 'storyfield_ai_auth_audit_logs' for traceability. This endpoint is separate from user (authenticatedUser) login logic. If login fails due to wrong credential or deactivation, error feedback is provided in accordance with audit/compliance requirements. Pair with join and refresh endpoints to complete the admin authentication lifecycle.","authorizationType":"login","description":"Purpose: Enable systemAdmin login by validating external_admin_id (mapped from JWT/Spring) against the 'storyfield_ai_systemadmins' table, ensuring the account is active and not soft-deleted. The operation is exclusive to administrators.\n\nImplementation: On login attempt, service checks for existing admin record (uniqueness required for external_admin_id), verifies that 'deleted_at' is null (active), and updates the last_login_at field upon success. New token session logged in 'storyfield_ai_token_sessions', and the login action is recorded in 'storyfield_ai_auth_audit_logs' for compliance.\n\nBusiness Context: Only systemAdmin actors can access this endpoint, which underpins all further privileged system management, logging, or user control workflows. Distinct from user authentication; only binds to system administrator accounts.\n\nSecurity Considerations: Login endpoint is tightly access-controlled. If an account is deactivated (soft-deleted), login is forbidden. Audit logging enables post-event review. Passwords are never handled here—the operation leverages external SSO/JWT infrastructure.\n\nRelated: Use with join (admin registration) and refresh (token renewal) flows for complete lifecycle. Login events result in JWT issuance and session tracking for active admin oversight. All validation failures or attempts to login with deactivated accounts result in secure error messages, never exposing sensitive system state or account info.","summary":"Authenticate systemAdmin using external_admin_id and issue JWT access token if active (storyfield_ai_systemadmins).","parameters":[],"requestBody":{"description":"Admin authentication payload containing external_admin_id reference and any SSO/JWT mapping needed. Password not used; authentication is handled externally.","typeName":"IStoryfieldAiSystemAdmin.ILogin"},"responseBody":{"description":"Authorized session representation for logged in system admin including JWT and admin identity/roles.","typeName":"IStoryfieldAiSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/systemAdmin/login","method":"post"},{"specification":"This operation renews a system administrator's JWT access token using a refresh token mapped to an active, non-deleted session from the 'storyfield_ai_token_sessions' table. The operation ensures the referenced session is valid, not soft-deleted (deleted_at is null), within its expiration window, and tied to a systemAdmin (system admin id linkage). If valid, a new JWT token is issued and both refreshed_at and last_activity_at fields are updated in 'storyfield_ai_token_sessions'. The new session and refresh action are recorded in 'storyfield_ai_auth_audit_logs' for compliance. Business and security constraints ensure only active administrators may refresh tokens; attempts using deleted, expired, or revoked sessions are denied. Result includes the updated, fully authorized admin DTO, compliant with response type rules for authentication endpoints. This endpoint is required for sustained privileged operations by administrators and must be explicitly used (no automatic silent refresh). Errors are returned in strict accordance with audit/compliance schema logging. Use alongside admin join and login endpoints for the complete authentication lifecycle.","authorizationType":"refresh","description":"Purpose: Allow systemAdmin to refresh their JWT access token by validating a refresh token/session from 'storyfield_ai_token_sessions', so long as the session is not revoked or soft-deleted. Essential for long-lived privileged sessions and secure admin workflows.\n\nImplementation: The endpoint expects a refresh token (mapped to token_hash) and ensures that the underlying session is tied to a systemAdmin, is not soft-deleted (deleted_at is null), has not expired, and is not revoked. If all checks pass, a new JWT (with new expiry) is issued and both refreshed_at and last_activity_at fields are updated in the token_sessions entry. The refresh event is also written to 'storyfield_ai_auth_audit_logs' for audit compliance.\n\nBusiness Integration: Used for secure extension of admin sessions, this operation allows administrators to continue oversight, monitoring, and user control actions without re-authenticating, subject to policy limits (e.g., max session duration). It is mandatory that only systemAdmin-linked sessions are accepted; end-users cannot refresh admin tokens here.\n\nSecurity: Soft deletion, revocation, and expiry are strictly enforced—any failure at these points results in rejection and a detailed, secure error message. Session state changes are fully audit-logged. Refresh tokens must be stored and submitted securely.\n\nRelated: SystemAdmin authentication lifecycle consists of join, login, and this refresh endpoint. Re-authentication is required when sessions expire, are revoked, or admin is soft-deleted. This endpoint only handles session extension for privileged admin roles and must not be re-used by general users or other roles.","summary":"Refresh JWT access token for systemAdmin using valid active refresh token/session (storyfield_ai_token_sessions).","parameters":[],"requestBody":{"description":"Payload containing admin's refresh token reference to validate and renew privilege session. Only sessions mapped to systemAdmin entries are allowed.","typeName":"IStoryfieldAiSystemAdmin.IRefresh"},"responseBody":{"description":"Authorized session object for systemAdmin, with renewed access token and un-revoked session state.","typeName":"IStoryfieldAiSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/systemAdmin/refresh","method":"post"},{"specification":"This operation retrieves a paginated and filterable list of registered authenticated users within the StoryField AI service. It is directly associated with the 'storyfield_ai_authenticatedusers' table, providing access to essential user details, including external user ID, email, account status, creation and update timestamps, and soft-deletion status. The API supports advanced querying capabilities such as filtering by email, registration date, or account status.","description":"Retrieve a filtered and paginated list of authenticated users who are registered with and have passed verification through the Spring backend. This operation enables searching by fields such as email, external user ID, and creation or update date, so that system administrators can audit user on-boarding, monitor activity, and review account statuses for compliance purposes.\n\nUser access is strictly limited to those with system administrator privileges. Sensitive fields like email and external user ID are only visible to admins. The API enforces permission checks before executing any user data searches. Soft-deleted (deactivated) users are included or excluded based on filter options provided in the request body.\n\nThe request structure and available filters are determined by the schema IStoryfieldAiAuthenticatedusers.IRequest. Responses include paginated user summaries via the IPageIStoryfieldAiAuthenticatedusers.ISummary type. The result is suitable for admin dashboards or compliance auditing processes.\n\nRelated list and detail endpoints should use similar authorization and traceability controls for GDPR and audit requirements.","summary":"Retrieve and search a paginated list of authenticated users (storyfield_ai_authenticatedusers).","parameters":[],"requestBody":{"description":"Search filters and pagination details to retrieve relevant users.","typeName":"IStoryfieldAiAuthenticatedusers.IRequest"},"responseBody":{"description":"Paginated list of authenticated user summaries meeting search criteria.","typeName":"IPageIStoryfieldAiAuthenticatedusers.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/authenticatedUsers","method":"patch"},{"specification":"This operation retrieves the full details for a specific authenticated user from the 'storyfield_ai_authenticatedusers' table. It returns all primary fields associated with the given user, using their unique authenticatedUserId as a path parameter. This enables system administrators to review user identity verification, registration info, and audit fields, including creation, last update, and soft deletion status. The endpoint is used for compliance review and admin management of individual accounts.","description":"Fetch all details for one authenticated user, as registered and verified via the Spring backend. The operation provides admin access to the user's external_user_id, email, actor_type, audit timestamps, and soft-deleted status, offering visibility into the lifecycle and compliance state of individual accounts.\n\nOnly system administrators can access this operation, which enforces strict permission checks to ensure privacy and data protection. The 'authenticatedUserId' parameter must reference an existing user record; errors will be returned if the user does not exist or has been fully purged.\n\nThis API utilizes the IStoryfieldAiAuthenticatedusers response schema for detailed user information, supporting admin dashboards, investigation workflows, and user account reviews.","summary":"Retrieve full details for a single authenticated user (storyfield_ai_authenticatedusers).","parameters":[{"name":"authenticatedUserId","description":"Unique identifier of the authenticated user to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Authenticated user entity with all audit and status fields.","typeName":"IStoryfieldAiAuthenticatedusers"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/authenticatedUsers/{authenticatedUserId}","method":"get"},{"specification":"This operation updates an existing authenticated user in the 'storyfield_ai_authenticatedusers' table. System administrators can modify allowed user fields, such as email address or actor_type, using the provided authenticatedUserId as path parameter. The update request must conform to the IStoryfieldAiAuthenticatedusers.IUpdate schema, with validation of all fields and operational audit. After a successful update, the modified user record is returned, reflecting the current state.","description":"Update core fields for a single authenticated user, referenced by the authenticatedUserId. Admins may update email, actor_type, or other permitted attributes, with all modifications validated per business rules and compliance requirements. All change actions are fully audited and timestamped, maintaining traceability for regulatory and operational review.\n\nEdit permissions are exclusive to system administrators, and the endpoint enforces strict access control. Any changes that conflict with uniqueness constraints, such as duplicate email or invalid external_user_id, will result in error responses with descriptive messages.\"Soft delete\" rules apply if relevant fields are involved.\n\nThis operation returns the updated user record via IStoryfieldAiAuthenticatedusers schema. Related audit and compliance logs are generated in parallel but are not exposed via this interface.","summary":"Update an authenticated user's profile or metadata (storyfield_ai_authenticatedusers).","parameters":[{"name":"authenticatedUserId","description":"Unique identifier of the authenticated user to modify.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the target authenticated user.","typeName":"IStoryfieldAiAuthenticatedusers.IUpdate"},"responseBody":{"description":"Updated authenticated user record with new profile data.","typeName":"IStoryfieldAiAuthenticatedusers"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/storyfieldAi/systemAdmin/authenticatedUsers/{authenticatedUserId}","method":"put"},{"specification":"This operation permanently removes (soft deletes) a specific authenticated user account from the 'storyfield_ai_authenticatedusers' table by marking the deleted_at timestamp. Access is restricted to system administrators, and the operation enforces all soft-deletion, audit, and compliance policies. It disables further access for the user but preserves data for recovery or investigation. No user details are returned after deletion.","description":"Administratively deactivate (soft delete) an authenticated user account by marking its deleted_at timestamp. This effectively disables the account without erasing audit data, maintaining compliance and traceability. The operation is strictly available to system administrators and logs all actions for future review.\n\nOn successful execution, the account becomes inaccessible for normal operations. Attempts to delete already soft-deleted or non-existent users will result in error responses. The endpoint enforces permission checks and may provide a confirmation message or status code with no user details included in response.\n\nRelated endpoints support recovery, audit, and listing of deactivated users in compliance with business and legal rules.","summary":"Soft delete (deactivate) an authenticated user account (storyfield_ai_authenticatedusers).","parameters":[{"name":"authenticatedUserId","description":"Unique identifier of the authenticated user to deactivate.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/storyfieldAi/systemAdmin/authenticatedUsers/{authenticatedUserId}","method":"delete"},{"specification":"This operation allows administrative users to search and retrieve a filtered, paginated list of system administrator accounts. It queries the storyfield_ai_systemadmins table in the database, enabling search by properties such as email, external_admin_id, last_login_at, and status fields. The operation supports complex querying for effective system management and auditing. Authorization is strictly enforced for system-level business operations.","path":"/storyfieldAi/systemAdmin/systemAdmins","method":"patch","summary":"Search, filter, and paginate system administrator accounts (storyfield_ai_systemadmins table).","description":"Use this operation to retrieve a list of registered StoryField AI system administrator accounts with advanced filtering and pagination capabilities. Typical use cases include system admin listing for monitoring, audit, and emergency access management purposes.\n\nThe endpoint supports rich query options, including searching by email address, actor type, account creation/update dates, and last login timestamp. Pagination and sorting options are provided for efficient navigation of potentially large admin lists. Input validation ensures only authorized actions and parameters are permitted.\n\nThis endpoint operates on the storyfield_ai_systemadmins entity as defined in the database schema. Role-based authorization ensures that only users with system admin privileges can access the data, thus protecting sensitive operational information. Results include only active and non-soft-deleted admin accounts by default, unless filtering specifies otherwise.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for system administrator account retrieval.","typeName":"IStoryfieldAiSystemAdmin.IRequest"},"responseBody":{"description":"Paginated, filtered list of system administrator accounts with summary details for each matching admin user.","typeName":"IPageIStoryfieldAiSystemAdmin.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"This operation retrieves detailed information for a specific system administrator account identified by its unique systemAdminId (UUID). It is based on the storyfield_ai_systemadmins table and supports secure access for privileged administrative actions, compliance, and audit trails.","path":"/storyfieldAi/systemAdmin/systemAdmins/{systemAdminId}","method":"get","summary":"Fetch detailed info for a single system administrator (storyfield_ai_systemadmins table) by ID.","description":"This operation fetches the full profile and metadata for a specific StoryField AI system administrator account, identified by its systemAdminId parameter (UUID, primary key).\n\nDetailed information includes external_admin_id, admin email, role descriptor, audit timestamps (created_at, updated_at, last_login_at), privilege notes, and soft deletion status. This function is essential for auditing, privilege escalation, emergency lockout, or compliance review.\n\nThe operation enforces strict systemAdmin role authorization. System admin account details are confidential and only accessible to users with elevated system-level privileges. If the account is soft deleted, this is indicated in the response.\n\nRelated operations include admin list/search (PATCH /systemAdmins), admin account modification (PUT), and admin account removal (DELETE).","parameters":[{"name":"systemAdminId","description":"Unique identifier for the target system administrator. Must be a valid UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified system administrator account, including audit and privilege metadata.","typeName":"IStoryfieldAiSystemAdmin"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"This operation updates an existing system administrator account, as defined in the storyfield_ai_systemadmins table. It enables privilege management, metadata updates, or account note modifications. Only users with system-level authorization can perform updates. All updates are securely audited and tracked via database timestamps and audit logs.","path":"/storyfieldAi/systemAdmin/systemAdmins/{systemAdminId}","method":"put","summary":"Update profile or admin notes of a system administrator (storyfield_ai_systemadmins table).","description":"Use this operation to update core properties of a StoryField AI system administrator account, identified by the systemAdminId path parameter (UUID).\n\nAllowed updates may include admin email, privilege/role descriptor (actor_type), administrative notes, and status toggling (where applicable). Timestamp fields are updated automatically. Strict input validation is enforced according to the database schema. Changes are permanently recorded in audit trails for compliance and forensic review.\n\nSystem-level role authorization is required to modify any administrator account. This operation is typically combined with the GET (detail) and PATCH (list/search) endpoints for lifecycle management of admin users.","parameters":[{"name":"systemAdminId","description":"Unique identifier of the administrator to update. Must be a valid UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the targeted system administrator, such as email, role, privilege notes.","typeName":"IStoryfieldAiSystemAdmin.IUpdate"},"responseBody":{"description":"The updated administrator account record, reflecting any changes made by the operation.","typeName":"IStoryfieldAiSystemAdmin"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"This operation performs a soft delete of a system administrator account in the storyfield_ai_systemadmins table by setting the deleted_at timestamp. Soft deletion supports compliance, security, and audit requirements by retaining records for investigation while preventing further authentication or access. Only system administrators are authorized to invoke this endpoint. All actions are audited.","path":"/storyfieldAi/systemAdmin/systemAdmins/{systemAdminId}","method":"delete","summary":"Soft delete (deactivate) a system administrator account (storyfield_ai_systemadmins table).","description":"This operation marks the specified admin account as deleted by updating the deleted_at field (soft delete) in the storyfield_ai_systemadmins table. The account then becomes inaccessible for login or management actions, although data is retained for audit and compliance.\n\nThe operation is restricted to users with systemAdmin privileges. No hard deletion is performed, preserving business history and traceability. Attempts to delete a non-existent or already-deleted account return appropriate error messaging.\n\nThis endpoint is often used together with admin user search, detail, and update operations to support the full lifecycle management of system administrators.","parameters":[{"name":"systemAdminId","description":"UUID of the system administrator account to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"This operation provides a paginated and searchable index of all AI-generated stories created by authenticated users. It operates on the storyfield_ai_stories table, enabling advanced filtering by title, language, owner, creation date, and more. Results include crucial metadata such as story title, language selection, creator information, and soft deletion state for content moderation and compliance. The implementation references Prisma's storyfield_ai_stories model with support for efficient listing via paging and searching. Related child records, such as pages, images, and TTS results, are accessible via related endpoints. Soft-deleted stories (deleted_at not null) are excluded by default unless explicitly requested in the request body.","path":"/storyfieldAi/authenticatedUser/stories","method":"patch","summary":"Retrieve a paginated and filtered index of AI-generated stories (storyfield_ai_stories table).","description":"Fetch a paginated, filterable list of AI-generated fairy tales belonging to authenticated users. This endpoint allows flexible filtering and searching by story title (partial matches), language, owner user ID, creation time range, and soft deletion status. The result set can be sorted by creation or update timestamps.\n\nAuthentication is required; only authenticated users can retrieve their own stories, while system admins may access all with appropriate search parameters. Pagination supports page size and offset parameters. This endpoint references the storyfield_ai_stories Prisma schema, capturing all user stories, their metadata, and compliance fields including created_at, updated_at, and deleted_at.\n\nSensitive fields such as deleted_at are included in admin results for moderation and GDPR compliance, while regular users only see non-deleted stories they own. Common errors include invalid filters, excessive page sizes, and unauthorized access attempts. Related endpoints are available for retrieving story details, updating, and deleting records.","parameters":[],"requestBody":{"description":"Story search, filter, and pagination parameters for index listings.","typeName":"IStoryfieldAiStory.IRequest"},"responseBody":{"description":"Paginated list of matching stories with metadata, ownership, and key fields per page.","typeName":"IPageIStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"index"},{"specification":"This operation provides a paginated and searchable index of all AI-generated stories created by authenticated users. It operates on the storyfield_ai_stories table, enabling advanced filtering by title, language, owner, creation date, and more. Results include crucial metadata such as story title, language selection, creator information, and soft deletion state for content moderation and compliance. The implementation references Prisma's storyfield_ai_stories model with support for efficient listing via paging and searching. Related child records, such as pages, images, and TTS results, are accessible via related endpoints. Soft-deleted stories (deleted_at not null) are excluded by default unless explicitly requested in the request body.","path":"/storyfieldAi/systemAdmin/stories","method":"patch","summary":"Retrieve a paginated and filtered index of AI-generated stories (storyfield_ai_stories table).","description":"Fetch a paginated, filterable list of AI-generated fairy tales belonging to authenticated users. This endpoint allows flexible filtering and searching by story title (partial matches), language, owner user ID, creation time range, and soft deletion status. The result set can be sorted by creation or update timestamps.\n\nAuthentication is required; only authenticated users can retrieve their own stories, while system admins may access all with appropriate search parameters. Pagination supports page size and offset parameters. This endpoint references the storyfield_ai_stories Prisma schema, capturing all user stories, their metadata, and compliance fields including created_at, updated_at, and deleted_at.\n\nSensitive fields such as deleted_at are included in admin results for moderation and GDPR compliance, while regular users only see non-deleted stories they own. Common errors include invalid filters, excessive page sizes, and unauthorized access attempts. Related endpoints are available for retrieving story details, updating, and deleting records.","parameters":[],"requestBody":{"description":"Story search, filter, and pagination parameters for index listings.","typeName":"IStoryfieldAiStory.IRequest"},"responseBody":{"description":"Paginated list of matching stories with metadata, ownership, and key fields per page.","typeName":"IPageIStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"This operation retrieves all detailed information about a single AI-generated story from the storyfield_ai_stories table, including its metadata, language, owner, and compliance fields. Page, image, and TTS records are accessible through related endpoints. Soft-deleted stories cannot be accessed by unauthorized users.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}","method":"get","summary":"Get detail information for a specific story by its ID (storyfield_ai_stories table).","description":"Retrieve the full detail view for a single AI-generated story, including title, plot, language, and audit fields. The endpoint uses the story ID as a path parameter, referencing the storyfield_ai_stories table in the Prisma schema. Only the story owner or a system admin may access the story; unauthorized users are denied access.\n\nThis operation does not directly include child resources like pages or images; use related endpoints to fetch those. Security checks enforce story ownership for authenticated users and full access for system admins for moderation, copyright review, or compliance. Soft-deleted (deleted_at set) stories are only accessible to system admins for audit or recovery operations, not to normal users.\n\nValidation covers invalid UUIDs, unauthorized access, and not found errors. This endpoint is tightly coupled to the storyfield_ai_stories table by story ID.","parameters":[{"name":"storyId","description":"Unique identifier (UUID) for the target story record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested story record.","typeName":"IStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"at"},{"specification":"This operation retrieves all detailed information about a single AI-generated story from the storyfield_ai_stories table, including its metadata, language, owner, and compliance fields. Page, image, and TTS records are accessible through related endpoints. Soft-deleted stories cannot be accessed by unauthorized users.","path":"/storyfieldAi/systemAdmin/stories/{storyId}","method":"get","summary":"Get detail information for a specific story by its ID (storyfield_ai_stories table).","description":"Retrieve the full detail view for a single AI-generated story, including title, plot, language, and audit fields. The endpoint uses the story ID as a path parameter, referencing the storyfield_ai_stories table in the Prisma schema. Only the story owner or a system admin may access the story; unauthorized users are denied access.\n\nThis operation does not directly include child resources like pages or images; use related endpoints to fetch those. Security checks enforce story ownership for authenticated users and full access for system admins for moderation, copyright review, or compliance. Soft-deleted (deleted_at set) stories are only accessible to system admins for audit or recovery operations, not to normal users.\n\nValidation covers invalid UUIDs, unauthorized access, and not found errors. This endpoint is tightly coupled to the storyfield_ai_stories table by story ID.","parameters":[{"name":"storyId","description":"Unique identifier (UUID) for the target story record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested story record.","typeName":"IStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"This operation creates a new AI-generated story record in the storyfield_ai_stories table. It records metadata including title, main plot, language, and creator user reference, initializing all audit and compliance fields. Pages, images, and TTS results are created in subsequent business operations or via related endpoints.","path":"/storyfieldAi/authenticatedUser/stories","method":"post","summary":"Create a new story record associated with an authenticated user (storyfield_ai_stories table).","description":"Create a new story entry for an authenticated user, with initial metadata such as title, main plot, and language selection. The endpoint references the storyfield_ai_stories model from the Prisma schema, capturing all relevant and required schema fields for story creation. \n\nAuthentication is required and the created story is tied by foreign key to the requesting user. Compliance fields such as created_at are set automatically. Ownership is established upon creation, and subsequent content—such as pages, images, and TTS results—are created by following business events or related endpoints.\n\nInput validation includes duplicate title checks for the same user, mandatory language selection, and proper UUID usage for user reference. Errors may result from missing required fields, invalid references, or unauthorized access. The operation is central for story creation in the StoryField AI system.","parameters":[],"requestBody":{"description":"Story creation payload, including title, main plot, language, and user association.","typeName":"IStoryfieldAiStory.ICreate"},"responseBody":{"description":"The newly created story resource, with all main and compliance fields populated.","typeName":"IStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"create"},{"specification":"This operation updates key fields of an existing story record in the storyfield_ai_stories table, including title, main plot, or language. Only the story owner or a system admin may perform updates. Audit fields (updated_at) are automatically set. Soft-deleted records cannot be updated.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}","method":"put","summary":"Update an existing story's metadata by ID (storyfield_ai_stories table).","description":"Modify the details of an existing AI-generated story by specifying its unique storyId in the path. This endpoint allows updates to fields such as story title, main plot, and language option. It directly uses the storyfield_ai_stories Prisma schema table and enforces ownership rules; only the record owner or a system admin can perform updates.\n\nSoft-deleted stories (deleted_at is set) may not be modified and will return an error if update is attempted. The operation is strictly for metadata modification; secondary entities such as pages, images, or TTS results are unaffected by this endpoint. The updated_at audit field is set to the current timestamp on every change.\n\nTypical error cases include unauthorized access, not found, invalid input, or business rule violations such as duplicate titles per owner. The endpoint is central to story lifecycle management.","parameters":[{"name":"storyId","description":"Unique identifier (UUID) of the story to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload including fields to modify in the story record (e.g., title, main_plot, language).","typeName":"IStoryfieldAiStory.IUpdate"},"responseBody":{"description":"The updated story record with revised metadata and audit fields.","typeName":"IStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"update"},{"specification":"This operation updates key fields of an existing story record in the storyfield_ai_stories table, including title, main plot, or language. Only the story owner or a system admin may perform updates. Audit fields (updated_at) are automatically set. Soft-deleted records cannot be updated.","path":"/storyfieldAi/systemAdmin/stories/{storyId}","method":"put","summary":"Update an existing story's metadata by ID (storyfield_ai_stories table).","description":"Modify the details of an existing AI-generated story by specifying its unique storyId in the path. This endpoint allows updates to fields such as story title, main plot, and language option. It directly uses the storyfield_ai_stories Prisma schema table and enforces ownership rules; only the record owner or a system admin can perform updates.\n\nSoft-deleted stories (deleted_at is set) may not be modified and will return an error if update is attempted. The operation is strictly for metadata modification; secondary entities such as pages, images, or TTS results are unaffected by this endpoint. The updated_at audit field is set to the current timestamp on every change.\n\nTypical error cases include unauthorized access, not found, invalid input, or business rule violations such as duplicate titles per owner. The endpoint is central to story lifecycle management.","parameters":[{"name":"storyId","description":"Unique identifier (UUID) of the story to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload including fields to modify in the story record (e.g., title, main_plot, language).","typeName":"IStoryfieldAiStory.IUpdate"},"responseBody":{"description":"The updated story record with revised metadata and audit fields.","typeName":"IStoryfieldAiStory"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"Permanently removes an AI-generated story from the system by hard-deleting the record from the storyfield_ai_stories table. This operation is used when a user decides to erase their own story or a systemAdmin deletes any story as part of administration or content moderation. This operation considers soft deletion support, ensuring the record is not recoverable after execution. Audit and traceability requirements are enforced.","description":"This endpoint enables authenticated users or system administrators to permanently erase a story from the StoryField AI platform. When invoked, the operation performs a hard delete action, removing the story record from the database rather than setting a soft delete timestamp. This ensures compliance with user requests for complete content erasure or administrative content management.\n\nAccess control policies require that a standard authenticated user may delete only their own stories, while a system administrator may delete any story. All delete actions are audited for compliance, and attempts to erase stories not belonging to the requesting user are rejected with an authorization error. This procedure aligns with GDPR and company data deletion policies.\n\nUpon successful deletion, all associated pages, images, and TTS results are cascaded and subsequently purged according to foreign key constraints. Error handling logic provides clear messages for attempts to delete non-existent or already-deleted stories.","summary":"Erase (delete) an AI-generated story from storyfield_ai_stories (hard delete).","parameters":[{"name":"storyId","description":"Unique identifier of the target story to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"erase","path":"/storyfieldAi/authenticatedUser/stories/{storyId}","method":"delete","authorizationRole":"authenticatedUser","authorizationType":null},{"specification":"Permanently removes an AI-generated story from the system by hard-deleting the record from the storyfield_ai_stories table. This operation is used when a user decides to erase their own story or a systemAdmin deletes any story as part of administration or content moderation. This operation considers soft deletion support, ensuring the record is not recoverable after execution. Audit and traceability requirements are enforced.","description":"This endpoint enables authenticated users or system administrators to permanently erase a story from the StoryField AI platform. When invoked, the operation performs a hard delete action, removing the story record from the database rather than setting a soft delete timestamp. This ensures compliance with user requests for complete content erasure or administrative content management.\n\nAccess control policies require that a standard authenticated user may delete only their own stories, while a system administrator may delete any story. All delete actions are audited for compliance, and attempts to erase stories not belonging to the requesting user are rejected with an authorization error. This procedure aligns with GDPR and company data deletion policies.\n\nUpon successful deletion, all associated pages, images, and TTS results are cascaded and subsequently purged according to foreign key constraints. Error handling logic provides clear messages for attempts to delete non-existent or already-deleted stories.","summary":"Erase (delete) an AI-generated story from storyfield_ai_stories (hard delete).","parameters":[{"name":"storyId","description":"Unique identifier of the target story to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"erase","path":"/storyfieldAi/systemAdmin/stories/{storyId}","method":"delete","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"Retrieves a paginated, filterable list of story pages belonging to a particular story using the story's unique identifier. This operation queries the storyfield_ai_story_pages table, returning textual content, page numbers, and audit fields for each page. Search and pagination are supported for efficient client display and navigation through large multi-page stories.","description":"Fetch a filtered and paginated list of pages for a particular AI-generated fairy tale. This endpoint is intended for use by authenticated users seeking to view their own story's content, or by system administrators reviewing any story. It supports advanced pagination, search, and sorting options for navigating long stories efficiently.\n\nAccess controls are enforced so users can only access the pages of stories they own, while administrators have system-wide access. Each result includes page number, generated text, and audit metadata (creation and update timestamps), with support for soft-deleted record filtering if required by compliance workflows.\n\nThe operation integrates the storyfield_ai_story_pages table, applying filtering based on the parent story's ownership. The response returns a paginated set of page summaries, suited for display in story readers or admin review panels. Errors for access violations or invalid story references are returned in a clear, compliant format.","summary":"List and paginate all pages of a story (storyfield_ai_story_pages) for a given storyId.","parameters":[{"name":"storyId","description":"Unique identifier of the story whose pages are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination options for searching story pages within a story.","typeName":"IStoryfieldAiStoryPage.IRequest"},"responseBody":{"description":"Paginated list of story page summaries with necessary audit details.","typeName":"IPageIStoryfieldAiStoryPage.ISummary"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"index","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/pages","method":"patch","authorizationRole":"authenticatedUser","authorizationType":null},{"specification":"Retrieves a paginated, filterable list of story pages belonging to a particular story using the story's unique identifier. This operation queries the storyfield_ai_story_pages table, returning textual content, page numbers, and audit fields for each page. Search and pagination are supported for efficient client display and navigation through large multi-page stories.","description":"Fetch a filtered and paginated list of pages for a particular AI-generated fairy tale. This endpoint is intended for use by authenticated users seeking to view their own story's content, or by system administrators reviewing any story. It supports advanced pagination, search, and sorting options for navigating long stories efficiently.\n\nAccess controls are enforced so users can only access the pages of stories they own, while administrators have system-wide access. Each result includes page number, generated text, and audit metadata (creation and update timestamps), with support for soft-deleted record filtering if required by compliance workflows.\n\nThe operation integrates the storyfield_ai_story_pages table, applying filtering based on the parent story's ownership. The response returns a paginated set of page summaries, suited for display in story readers or admin review panels. Errors for access violations or invalid story references are returned in a clear, compliant format.","summary":"List and paginate all pages of a story (storyfield_ai_story_pages) for a given storyId.","parameters":[{"name":"storyId","description":"Unique identifier of the story whose pages are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination options for searching story pages within a story.","typeName":"IStoryfieldAiStoryPage.IRequest"},"responseBody":{"description":"Paginated list of story page summaries with necessary audit details.","typeName":"IPageIStoryfieldAiStoryPage.ISummary"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"index","path":"/storyfieldAi/systemAdmin/stories/{storyId}/pages","method":"patch","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"Retrieves the details of a specific page within a story by its unique pageId and the parent storyId. The endpoint accesses the storyfield_ai_story_pages table, returning the full text, page order, and relevant audit, compliance, and soft delete metadata. Designed for page-level reading, editing, or moderation within the context of the parent story.","description":"This operation allows an authenticated user to retrieve the complete content and metadata of a single page within their own story, or for a system administrator to access any story page for moderation or review. Authorization checks ensure that users can only fetch pages from stories they own, while system administrators have full access for all stories.\n\nThe response supplies detailed page information, including full AI-generated text, the logical page number, creation and update timestamps, and soft deletion status. This supports context-aware story viewing and targeted page editing or moderation.\n\nIf the specified pageId or storyId does not exist or does not belong to the user, a clear error message is returned, describing the violation. All operations comply with audit and content traceability requirements for compliance and user accountability.","summary":"Retrieve the details of a specific page (storyfield_ai_story_pages) by storyId and pageId.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier of the story page to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page information with full text and audit metadata.","typeName":"IStoryfieldAiStoryPage"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"at","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/pages/{pageId}","method":"get","authorizationRole":"authenticatedUser","authorizationType":null},{"specification":"Retrieves the details of a specific page within a story by its unique pageId and the parent storyId. The endpoint accesses the storyfield_ai_story_pages table, returning the full text, page order, and relevant audit, compliance, and soft delete metadata. Designed for page-level reading, editing, or moderation within the context of the parent story.","description":"This operation allows an authenticated user to retrieve the complete content and metadata of a single page within their own story, or for a system administrator to access any story page for moderation or review. Authorization checks ensure that users can only fetch pages from stories they own, while system administrators have full access for all stories.\n\nThe response supplies detailed page information, including full AI-generated text, the logical page number, creation and update timestamps, and soft deletion status. This supports context-aware story viewing and targeted page editing or moderation.\n\nIf the specified pageId or storyId does not exist or does not belong to the user, a clear error message is returned, describing the violation. All operations comply with audit and content traceability requirements for compliance and user accountability.","summary":"Retrieve the details of a specific page (storyfield_ai_story_pages) by storyId and pageId.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier of the story page to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed page information with full text and audit metadata.","typeName":"IStoryfieldAiStoryPage"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"at","path":"/storyfieldAi/systemAdmin/stories/{storyId}/pages/{pageId}","method":"get","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"Creates a new story page within a specific AI-generated story, allowing users to add additional content or edits. Modifies the storyfield_ai_story_pages table by inserting a new page record, requiring the parent storyId and validated page content data. Soft deletion support and audit trail management are enforced upon creation. Only story owners or system administrators are authorized to use this endpoint.","description":"Insert a new page into an existing AI-generated fairy tale. Authenticated users may add pages to their own stories, while system administrators can modify any story as required for moderation, recovery, or technical editing. Security rules ensure only authorized users can alter story content.\n\nThe API requires structured data specifying the new page's content, such as the textual content, intended page number, and optional metadata. Upon successful creation, the operation returns the completed page entity, including all audit fields (creation/update timestamps, soft deletion support fields).\n\nAny attempt to add a page to a story not owned by the user or to non-existent stories results in error responses. The operation upholds content compliance, auditability, and full traceability.","summary":"Create a new page for a given storyId in storyfield_ai_story_pages (insert).","parameters":[{"name":"storyId","description":"Unique identifier of the story to which the new page will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Page data (text, order, metadata) required to create a new story page.","typeName":"IStoryfieldAiStoryPage.ICreate"},"responseBody":{"description":"Created story page entity with content and audit fields.","typeName":"IStoryfieldAiStoryPage"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"create","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/pages","method":"post","authorizationRole":"authenticatedUser","authorizationType":null},{"specification":"Creates a new story page within a specific AI-generated story, allowing users to add additional content or edits. Modifies the storyfield_ai_story_pages table by inserting a new page record, requiring the parent storyId and validated page content data. Soft deletion support and audit trail management are enforced upon creation. Only story owners or system administrators are authorized to use this endpoint.","description":"Insert a new page into an existing AI-generated fairy tale. Authenticated users may add pages to their own stories, while system administrators can modify any story as required for moderation, recovery, or technical editing. Security rules ensure only authorized users can alter story content.\n\nThe API requires structured data specifying the new page's content, such as the textual content, intended page number, and optional metadata. Upon successful creation, the operation returns the completed page entity, including all audit fields (creation/update timestamps, soft deletion support fields).\n\nAny attempt to add a page to a story not owned by the user or to non-existent stories results in error responses. The operation upholds content compliance, auditability, and full traceability.","summary":"Create a new page for a given storyId in storyfield_ai_story_pages (insert).","parameters":[{"name":"storyId","description":"Unique identifier of the story to which the new page will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Page data (text, order, metadata) required to create a new story page.","typeName":"IStoryfieldAiStoryPage.ICreate"},"responseBody":{"description":"Created story page entity with content and audit fields.","typeName":"IStoryfieldAiStoryPage"},"authorizationRoles":["authenticatedUser","systemAdmin"],"name":"create","path":"/storyfieldAi/systemAdmin/stories/{storyId}/pages","method":"post","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation updates the textual content and ordering metadata for a specific story page within a fairy tale. The page is identified by both the story and page UUIDs, ensuring routing is precise and secure. This directly modifies the underlying record in the storyfield_ai_story_pages table—used for granular user-generated story editing, particularly in page-revision flows. All edits are tracked for compliance, and only the page owner (or system administrator) is authorized to update a page. Business validation includes verification that both the page and its parent story are not soft-deleted and that the user is either the creator or systemAdmin. Changes are tracked in audit logs for traceability.","description":"This operation allows an authenticated user to update the text and page number of a specific page within their own AI-generated story, as defined in the storyfield_ai_story_pages table. The path parameters uniquely identify both the story and the page, providing fine-grained access control for revision scenarios, such as fixing typos or reorganizing story flow.\n\nPermission checks are enforced: only the page's creator (matched to the session's authenticatedUser) or a system administrator can update a page. The endpoint ensures the parent story/page is not soft-deleted (deleted_at is null) before proceeding, and it rejects attempts to modify pages of deleted or unauthorized stories. All updates require explicit verification that the user owns the parent story or holds the admin role.\n\nThis operation is critical for ensuring all edits are logged for compliance and traceability. Business logic includes atomic update of textual content, page number, and updated_at timestamp, while preserving the original creator and audit trail. Error handling returns precise codes for unauthorized access, invalid/soft-deleted resources, and input validation failures. If the page does not exist or is deleted, a not-found error is returned.\n\nRelated operations include get, creation, and deletion of pages, all of which enforce the same role and ownership logic for secure management of user content.","summary":"Update text and ordering for a specific story page belonging to a user-generated fairy tale (storyfield_ai_story_pages table).","parameters":[{"name":"storyId","description":"Unique identifier for the target story (UUID of the parent story in storyfield_ai_stories).","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier for the page to be updated (UUID in storyfield_ai_story_pages).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying the updated text and page number for the story page. All fields are validated for business rules and policy compliance. Uses IStoryfieldAiStoryPage.IUpdate.","typeName":"IStoryfieldAiStoryPage.IUpdate"},"responseBody":{"description":"Returns the updated story page content and metadata as defined in the IStoryfieldAiStoryPage type.","typeName":"IStoryfieldAiStoryPage"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"update","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/pages/{pageId}","method":"put"},{"specification":"This operation updates the textual content and ordering metadata for a specific story page within a fairy tale. The page is identified by both the story and page UUIDs, ensuring routing is precise and secure. This directly modifies the underlying record in the storyfield_ai_story_pages table—used for granular user-generated story editing, particularly in page-revision flows. All edits are tracked for compliance, and only the page owner (or system administrator) is authorized to update a page. Business validation includes verification that both the page and its parent story are not soft-deleted and that the user is either the creator or systemAdmin. Changes are tracked in audit logs for traceability.","description":"This operation allows an authenticated user to update the text and page number of a specific page within their own AI-generated story, as defined in the storyfield_ai_story_pages table. The path parameters uniquely identify both the story and the page, providing fine-grained access control for revision scenarios, such as fixing typos or reorganizing story flow.\n\nPermission checks are enforced: only the page's creator (matched to the session's authenticatedUser) or a system administrator can update a page. The endpoint ensures the parent story/page is not soft-deleted (deleted_at is null) before proceeding, and it rejects attempts to modify pages of deleted or unauthorized stories. All updates require explicit verification that the user owns the parent story or holds the admin role.\n\nThis operation is critical for ensuring all edits are logged for compliance and traceability. Business logic includes atomic update of textual content, page number, and updated_at timestamp, while preserving the original creator and audit trail. Error handling returns precise codes for unauthorized access, invalid/soft-deleted resources, and input validation failures. If the page does not exist or is deleted, a not-found error is returned.\n\nRelated operations include get, creation, and deletion of pages, all of which enforce the same role and ownership logic for secure management of user content.","summary":"Update text and ordering for a specific story page belonging to a user-generated fairy tale (storyfield_ai_story_pages table).","parameters":[{"name":"storyId","description":"Unique identifier for the target story (UUID of the parent story in storyfield_ai_stories).","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier for the page to be updated (UUID in storyfield_ai_story_pages).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload specifying the updated text and page number for the story page. All fields are validated for business rules and policy compliance. Uses IStoryfieldAiStoryPage.IUpdate.","typeName":"IStoryfieldAiStoryPage.IUpdate"},"responseBody":{"description":"Returns the updated story page content and metadata as defined in the IStoryfieldAiStoryPage type.","typeName":"IStoryfieldAiStoryPage"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/storyfieldAi/systemAdmin/stories/{storyId}/pages/{pageId}","method":"put"},{"specification":"This operation performs a soft delete of a specific page within an AI-generated fairy tale. It targets the storyfield_ai_story_pages table, using both the story and page IDs to securely identify the resource. The action sets the page's deleted_at timestamp (not a hard delete), supporting compliance, undo (potentially), and audit trails. Only the page owner or a system administrator may execute this operation. It covers regulatory erasure and user-initiated content removal while maintaining relational integrity to story and images/TTS.","description":"This operation allows an authenticated user or system administrator to delete a specific page of a story they own, as represented in the storyfield_ai_story_pages table. Deletion is performed as a soft delete by setting the deleted_at field, preserving data for audit, recovery, or compliance purposes. The operation enforces that only the original content creator or a systemAdmin may delete the page, and checks that the page and its parent story are not already deleted.\n\nWhen invoked, the operation updates the relevant page's deleted_at timestamp, making it inaccessible in standard queries or list operations. This ensures that users cannot delete or modify content they do not own. The system enforces strict permission checks at the API boundary, and inadequate privileges or attempts to modify deleted/nonexistent pages return clear error messages.\n\nThis endpoint integrates with audit log flows and supports cross-entity cleanup (such as hiding attached images or TTS). It should be used alongside creation and update of pages, always enforcing the same role and ownership rules. All business policies for page-level deletion—including compliance and parental content protection—are respected by this operation.","summary":"Soft-delete (deactivate) a specific story page in storyfield_ai_story_pages for content removal, audit, or compliance.","parameters":[{"name":"storyId","description":"Unique identifier for the parent story (UUID in storyfield_ai_stories).","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier for the page targeted for deletion (UUID in storyfield_ai_story_pages).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"authenticatedUser","name":"erase","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/pages/{pageId}","method":"delete"},{"specification":"This operation performs a soft delete of a specific page within an AI-generated fairy tale. It targets the storyfield_ai_story_pages table, using both the story and page IDs to securely identify the resource. The action sets the page's deleted_at timestamp (not a hard delete), supporting compliance, undo (potentially), and audit trails. Only the page owner or a system administrator may execute this operation. It covers regulatory erasure and user-initiated content removal while maintaining relational integrity to story and images/TTS.","description":"This operation allows an authenticated user or system administrator to delete a specific page of a story they own, as represented in the storyfield_ai_story_pages table. Deletion is performed as a soft delete by setting the deleted_at field, preserving data for audit, recovery, or compliance purposes. The operation enforces that only the original content creator or a systemAdmin may delete the page, and checks that the page and its parent story are not already deleted.\n\nWhen invoked, the operation updates the relevant page's deleted_at timestamp, making it inaccessible in standard queries or list operations. This ensures that users cannot delete or modify content they do not own. The system enforces strict permission checks at the API boundary, and inadequate privileges or attempts to modify deleted/nonexistent pages return clear error messages.\n\nThis endpoint integrates with audit log flows and supports cross-entity cleanup (such as hiding attached images or TTS). It should be used alongside creation and update of pages, always enforcing the same role and ownership rules. All business policies for page-level deletion—including compliance and parental content protection—are respected by this operation.","summary":"Soft-delete (deactivate) a specific story page in storyfield_ai_story_pages for content removal, audit, or compliance.","parameters":[{"name":"storyId","description":"Unique identifier for the parent story (UUID in storyfield_ai_stories).","schema":{"type":"string","format":"uuid"}},{"name":"pageId","description":"Unique identifier for the page targeted for deletion (UUID in storyfield_ai_story_pages).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/storyfieldAi/systemAdmin/stories/{storyId}/pages/{pageId}","method":"delete"},{"specification":"This operation retrieves a paginated list of images (e.g., illustrations or page images) associated with a specific AI-generated story. It queries the storyfield_ai_story_images table, filtered by the parent story's ID, and supports advanced search options, sorting, and pagination. Each image record includes its S3 URI, optional description, and metadata. The response is tailored for user story editing, moderation, or review interfaces. Permissions ensure only the story owner or a system administrator can list associated images.","description":"This operation returns a filtered and paginated view of all images linked to a given AI-generated story. The story is securely identified using the path parameter (UUID), and all results are sourced from the storyfield_ai_story_images table. The response includes image metadata (S3 URI, creation time, description, etc.) for story-authoring or illustration management scenarios.\n\nThe operation supports advanced query features through the request body: search by description, sort by creation/update time, and flexible pagination (page size, index, ordering). Only the owner of the story or a system administrator can access the image list, with ownership checked against the session user or role.\n\nAll non-deleted (deleted_at is null) images attached to the story are returned. Soft-deleted or orphaned images are excluded from results. The endpoint is suitable for both read (list) and manage (moderation, relinking) workflows. Strict validation is enforced; unauthorized or non-existent resources return business-appropriate errors. Related endpoints include image upload/associate, single-image access, and story retrieval.","summary":"Search and retrieve a paginated, filtered list of images for a specific user story (storyfield_ai_story_images table).","parameters":[{"name":"storyId","description":"UUID for the target story whose associated images will be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search, sort, and pagination options for retrieving images attached to the specified story. Uses IStoryfieldAiStoryImage.IRequest.","typeName":"IStoryfieldAiStoryImage.IRequest"},"responseBody":{"description":"Paginated, filtered results of all images associated with the specified story, represented as IPageIStoryfieldAiStoryImage.ISummary.","typeName":"IPageIStoryfieldAiStoryImage.ISummary"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"index","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/images","method":"patch"},{"specification":"This operation retrieves a paginated list of images (e.g., illustrations or page images) associated with a specific AI-generated story. It queries the storyfield_ai_story_images table, filtered by the parent story's ID, and supports advanced search options, sorting, and pagination. Each image record includes its S3 URI, optional description, and metadata. The response is tailored for user story editing, moderation, or review interfaces. Permissions ensure only the story owner or a system administrator can list associated images.","description":"This operation returns a filtered and paginated view of all images linked to a given AI-generated story. The story is securely identified using the path parameter (UUID), and all results are sourced from the storyfield_ai_story_images table. The response includes image metadata (S3 URI, creation time, description, etc.) for story-authoring or illustration management scenarios.\n\nThe operation supports advanced query features through the request body: search by description, sort by creation/update time, and flexible pagination (page size, index, ordering). Only the owner of the story or a system administrator can access the image list, with ownership checked against the session user or role.\n\nAll non-deleted (deleted_at is null) images attached to the story are returned. Soft-deleted or orphaned images are excluded from results. The endpoint is suitable for both read (list) and manage (moderation, relinking) workflows. Strict validation is enforced; unauthorized or non-existent resources return business-appropriate errors. Related endpoints include image upload/associate, single-image access, and story retrieval.","summary":"Search and retrieve a paginated, filtered list of images for a specific user story (storyfield_ai_story_images table).","parameters":[{"name":"storyId","description":"UUID for the target story whose associated images will be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search, sort, and pagination options for retrieving images attached to the specified story. Uses IStoryfieldAiStoryImage.IRequest.","typeName":"IStoryfieldAiStoryImage.IRequest"},"responseBody":{"description":"Paginated, filtered results of all images associated with the specified story, represented as IPageIStoryfieldAiStoryImage.ISummary.","typeName":"IPageIStoryfieldAiStoryImage.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/stories/{storyId}/images","method":"patch"},{"specification":"This operation retrieves a specific image (illustration or page image) by its ID, ensuring the image belongs to the correct story and that access control policies are enforced. It targets the storyfield_ai_story_images table, cross-checking that the image's storyfield_ai_story_id matches the provided story ID. Used for detail views, in-place story editing, auditing, or advanced moderation. Permission checks enforce that only the story owner or a system administrator may access image details.","description":"This operation fetches the full metadata and S3 URI of a specific image attached to a story, referencing the record in the storyfield_ai_story_images table via both the parent story's UUID and the image's UUID. It is designed for situations that require deep review of illustration details, advanced editing workflows, or compliance oversight.\n\nStrict access control is enforced: only the authenticated owner of the story or a user holding the systemAdmin role may request this detailed image information. The system verifies that both the story and the image are not soft-deleted, that the image is genuinely owned by the identified story, and that all referential links are intact.\n\nStandard error handling covers unauthorized access, missing or deleted image/story, and cross-resource mismatches. This endpoint should be used together with the story image list, story retrieval, and image administration operations. Audit logging is integrated for sensitive or administrative data views.","summary":"Retrieve a specific story image by ID, cross-checking against parent story, for detail viewing and edit review (storyfield_ai_story_images table).","parameters":[{"name":"storyId","description":"UUID for the parent story to which the image should belong.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"UUID for the target image to be retrieved in detail (storyfield_ai_story_images.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete story image details including S3 URI, metadata, and description as defined in IStoryfieldAiStoryImage.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"at","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/images/{imageId}","method":"get"},{"specification":"This operation retrieves a specific image (illustration or page image) by its ID, ensuring the image belongs to the correct story and that access control policies are enforced. It targets the storyfield_ai_story_images table, cross-checking that the image's storyfield_ai_story_id matches the provided story ID. Used for detail views, in-place story editing, auditing, or advanced moderation. Permission checks enforce that only the story owner or a system administrator may access image details.","description":"This operation fetches the full metadata and S3 URI of a specific image attached to a story, referencing the record in the storyfield_ai_story_images table via both the parent story's UUID and the image's UUID. It is designed for situations that require deep review of illustration details, advanced editing workflows, or compliance oversight.\n\nStrict access control is enforced: only the authenticated owner of the story or a user holding the systemAdmin role may request this detailed image information. The system verifies that both the story and the image are not soft-deleted, that the image is genuinely owned by the identified story, and that all referential links are intact.\n\nStandard error handling covers unauthorized access, missing or deleted image/story, and cross-resource mismatches. This endpoint should be used together with the story image list, story retrieval, and image administration operations. Audit logging is integrated for sensitive or administrative data views.","summary":"Retrieve a specific story image by ID, cross-checking against parent story, for detail viewing and edit review (storyfield_ai_story_images table).","parameters":[{"name":"storyId","description":"UUID for the parent story to which the image should belong.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"UUID for the target image to be retrieved in detail (storyfield_ai_story_images.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete story image details including S3 URI, metadata, and description as defined in IStoryfieldAiStoryImage.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/stories/{storyId}/images/{imageId}","method":"get"},{"specification":"This operation allows an authenticated user to upload a new illustration image to a specific fairy tale story they own or are authorized to access. It operates on the storyfield_ai_story_images table, requiring the storyId of the parent story. The image data is linked to the given story, and proper authorization is enforced so only the story's owner or a system administrator can add images. This endpoint is required to support user-driven customization and AI-generated illustrations management. The uploaded image URI will be referenced and stored persistently with description and accessibility metadata. All soft deletion and content moderation required by the schema are honored.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/images","method":"post","summary":"Add an image to a specific fairy tale story.","description":"This API endpoint enables authenticated users to upload a new image associated with a particular story. The image is linked to a specific story by UUID and includes properties such as image URI, description, and creation metadata.\n\nSecurity is enforced by ensuring that only the story's owner (authenticated user) or a system administrator has permission to add or manage images, with unauthorized access attempts resulting in immediate denial.\n\nThe operation interacts directly with the storyfield_ai_story_images table, maintaining relationships with storyfield_ai_stories via the provided storyId. Uploaded image URIs should reference externally stored images (such as S3 pre-signed URLs) and comply with accessibility description best practices. All changes are tracked for compliance and traceability, with soft deletion supported.\n\nValidation ensures that the storyId is a valid UUID of an existing story, and uploaded URIs conform to prescribed limits and schema constraints. Any moderation or copyright triggers detected during upload or later review are handled according to compliance and system policy.\n\nIf an error occurs, such as invalid token, missing story, or file management issue, a detailed error code and message are returned in accordance with system error handling requirements.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story to which the image is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The image URI and optional description to associate with the story.","typeName":"IStoryfieldAiStoryImage.ICreate"},"responseBody":{"description":"The newly created story image metadata record, including image URI and timestamp.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"create"},{"specification":"This operation allows an authenticated user to upload a new illustration image to a specific fairy tale story they own or are authorized to access. It operates on the storyfield_ai_story_images table, requiring the storyId of the parent story. The image data is linked to the given story, and proper authorization is enforced so only the story's owner or a system administrator can add images. This endpoint is required to support user-driven customization and AI-generated illustrations management. The uploaded image URI will be referenced and stored persistently with description and accessibility metadata. All soft deletion and content moderation required by the schema are honored.","path":"/storyfieldAi/systemAdmin/stories/{storyId}/images","method":"post","summary":"Add an image to a specific fairy tale story.","description":"This API endpoint enables authenticated users to upload a new image associated with a particular story. The image is linked to a specific story by UUID and includes properties such as image URI, description, and creation metadata.\n\nSecurity is enforced by ensuring that only the story's owner (authenticated user) or a system administrator has permission to add or manage images, with unauthorized access attempts resulting in immediate denial.\n\nThe operation interacts directly with the storyfield_ai_story_images table, maintaining relationships with storyfield_ai_stories via the provided storyId. Uploaded image URIs should reference externally stored images (such as S3 pre-signed URLs) and comply with accessibility description best practices. All changes are tracked for compliance and traceability, with soft deletion supported.\n\nValidation ensures that the storyId is a valid UUID of an existing story, and uploaded URIs conform to prescribed limits and schema constraints. Any moderation or copyright triggers detected during upload or later review are handled according to compliance and system policy.\n\nIf an error occurs, such as invalid token, missing story, or file management issue, a detailed error code and message are returned in accordance with system error handling requirements.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story to which the image is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The image URI and optional description to associate with the story.","typeName":"IStoryfieldAiStoryImage.ICreate"},"responseBody":{"description":"The newly created story image metadata record, including image URI and timestamp.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create"},{"specification":"This operation updates the metadata of a specific story image linked to a fairy tale story, such as its URI, description, or accessibility label. It works on the storyfield_ai_story_images table using both the parent storyId and imageId path parameters. Authorization is required: only the story's owner or a systemAdmin can update images. All updates are tracked for compliance; any attempted change to a non-existent or unauthorized image triggers clear error handling.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/images/{imageId}","method":"put","summary":"Update a specific image's metadata in a story.","description":"This API operation allows the authenticated user (the story owner) or a system administrator to update properties of a specified image belonging to a fairy tale story. Supported updates include setting a new image URI, changing the description for accessibility, or updating other relevant fields as permitted by the schema.\n\nThe endpoint ensures that only authorized users may perform the update—specifically, the owner of the story or a user with systemAdmin role. Attempts to update images not owned by the user or outside their permission scope will be strictly denied, with all actions logged for auditing purposes.\n\nUnderlying, this operation modifies the storyfield_ai_story_images table, requiring both a valid storyId and imageId as path parameters. Only fields allowed by the update DTO are processed, with improper changes resulting in validation errors. Changes are tracked for compliance and audit, and soft deletion field is handled per schema policy.\n\nIf invalid identifiers are provided, permissions are lacking, or the image record is already deleted, the operation will fail gracefully with a contextual error message.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image within the story to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the selected story image (URI, description, etc.).","typeName":"IStoryfieldAiStoryImage.IUpdate"},"responseBody":{"description":"The updated story image object reflecting changes.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"update"},{"specification":"This operation updates the metadata of a specific story image linked to a fairy tale story, such as its URI, description, or accessibility label. It works on the storyfield_ai_story_images table using both the parent storyId and imageId path parameters. Authorization is required: only the story's owner or a systemAdmin can update images. All updates are tracked for compliance; any attempted change to a non-existent or unauthorized image triggers clear error handling.","path":"/storyfieldAi/systemAdmin/stories/{storyId}/images/{imageId}","method":"put","summary":"Update a specific image's metadata in a story.","description":"This API operation allows the authenticated user (the story owner) or a system administrator to update properties of a specified image belonging to a fairy tale story. Supported updates include setting a new image URI, changing the description for accessibility, or updating other relevant fields as permitted by the schema.\n\nThe endpoint ensures that only authorized users may perform the update—specifically, the owner of the story or a user with systemAdmin role. Attempts to update images not owned by the user or outside their permission scope will be strictly denied, with all actions logged for auditing purposes.\n\nUnderlying, this operation modifies the storyfield_ai_story_images table, requiring both a valid storyId and imageId as path parameters. Only fields allowed by the update DTO are processed, with improper changes resulting in validation errors. Changes are tracked for compliance and audit, and soft deletion field is handled per schema policy.\n\nIf invalid identifiers are provided, permissions are lacking, or the image record is already deleted, the operation will fail gracefully with a contextual error message.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image within the story to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the selected story image (URI, description, etc.).","typeName":"IStoryfieldAiStoryImage.IUpdate"},"responseBody":{"description":"The updated story image object reflecting changes.","typeName":"IStoryfieldAiStoryImage"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"This operation removes (soft deletes) an image from a specified story, by marking the record's deleted_at in the storyfield_ai_story_images table. Only the owner of the story or a systemAdmin may perform this action. It requires both the parent storyId and imageId as path parameters, ensuring strict authorization and traceability.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/images/{imageId}","method":"delete","summary":"Remove an image from a story (soft delete).","description":"This endpoint allows an authenticated user (the story's owner) or a system administrator to remove an image from a given fairy tale story. The operation implements a soft delete: the deleted_at field is set to the current timestamp rather than permanently removing the record, in accordance with the schema's compliance policies for recoverability and auditability.\n\nBoth storyId and imageId path parameters identify the exact image to be removed. Authorization is strictly enforced, ensuring that only the image's associated story owner or a user with systemAdmin privileges can perform the deletion. Attempts by unauthorized users or for non-existent/deleted images are gracefully denied with clear error feedback.\n\nThe storyfield_ai_story_images table is updated accordingly, with all actions logged for audit, compliance, and potential content recovery workflows. Errors such as invalid IDs, permission failures, or prior deletion are explicitly handled, following the system's documented error and recovery protocols.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image within the story to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"authenticatedUser","name":"erase"},{"specification":"This operation removes (soft deletes) an image from a specified story, by marking the record's deleted_at in the storyfield_ai_story_images table. Only the owner of the story or a systemAdmin may perform this action. It requires both the parent storyId and imageId as path parameters, ensuring strict authorization and traceability.","path":"/storyfieldAi/systemAdmin/stories/{storyId}/images/{imageId}","method":"delete","summary":"Remove an image from a story (soft delete).","description":"This endpoint allows an authenticated user (the story's owner) or a system administrator to remove an image from a given fairy tale story. The operation implements a soft delete: the deleted_at field is set to the current timestamp rather than permanently removing the record, in accordance with the schema's compliance policies for recoverability and auditability.\n\nBoth storyId and imageId path parameters identify the exact image to be removed. Authorization is strictly enforced, ensuring that only the image's associated story owner or a user with systemAdmin privileges can perform the deletion. Attempts by unauthorized users or for non-existent/deleted images are gracefully denied with clear error feedback.\n\nThe storyfield_ai_story_images table is updated accordingly, with all actions logged for audit, compliance, and potential content recovery workflows. Errors such as invalid IDs, permission failures, or prior deletion are explicitly handled, following the system's documented error and recovery protocols.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story.","schema":{"type":"string","format":"uuid"}},{"name":"imageId","description":"Unique identifier of the image within the story to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"Retrieves a filtered, paginated list of Text-to-Speech (TTS) audio results for a specific story. The client can search, filter, or sort TTS results (such as by dialect, page, or date) using advanced options in the request body. Operates on the storyfield_ai_tts_results table, supporting usage reporting, QA, and story accessibility enhancement.","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/ttsResults","method":"patch","summary":"List and search TTS results for a story (filter/sort/paginate).","description":"This API endpoint allows an authenticated user (the owner of a story) or a system administrator to retrieve a paginated, filtered list of TTS (Text-to-Speech) audio generation results associated with a specific story. Filters can include dialect, associated page number, creation date, or other relevant parameters provided by the schema.\n\nThe operation supports pagination and advanced search features through a structured request body, essential for managing stories with numerous TTS entries, dialect variations, or multi-user scenarios. Only the owner of the story or a system administrator is authorized to access all TTS results for a given story, ensuring security and privacy of generated media.\n\nInternally, this operation queries the storyfield_ai_tts_results table with an enforced storyId foreign-key filter. Additional filters and sorting are passed in the request body and mapped to allowable schema fields. The response is a paginated structure of TTS result summary objects, formatted for efficient frontend consumption; errors (such as unauthorized access or invalid storyId) are reported with appropriate status and detailed messages.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story whose TTS results are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination options for the TTS results search.","typeName":"IStoryfieldAiTtsResult.IRequest"},"responseBody":{"description":"A paginated list of summary objects representing filtered TTS results for the story.","typeName":"IPageIStoryfieldAiTtsResult.ISummary"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"index"},{"specification":"Retrieves a filtered, paginated list of Text-to-Speech (TTS) audio results for a specific story. The client can search, filter, or sort TTS results (such as by dialect, page, or date) using advanced options in the request body. Operates on the storyfield_ai_tts_results table, supporting usage reporting, QA, and story accessibility enhancement.","path":"/storyfieldAi/systemAdmin/stories/{storyId}/ttsResults","method":"patch","summary":"List and search TTS results for a story (filter/sort/paginate).","description":"This API endpoint allows an authenticated user (the owner of a story) or a system administrator to retrieve a paginated, filtered list of TTS (Text-to-Speech) audio generation results associated with a specific story. Filters can include dialect, associated page number, creation date, or other relevant parameters provided by the schema.\n\nThe operation supports pagination and advanced search features through a structured request body, essential for managing stories with numerous TTS entries, dialect variations, or multi-user scenarios. Only the owner of the story or a system administrator is authorized to access all TTS results for a given story, ensuring security and privacy of generated media.\n\nInternally, this operation queries the storyfield_ai_tts_results table with an enforced storyId foreign-key filter. Additional filters and sorting are passed in the request body and mapped to allowable schema fields. The response is a paginated structure of TTS result summary objects, formatted for efficient frontend consumption; errors (such as unauthorized access or invalid storyId) are reported with appropriate status and detailed messages.","parameters":[{"name":"storyId","description":"Unique identifier of the parent story whose TTS results are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination options for the TTS results search.","typeName":"IStoryfieldAiTtsResult.IRequest"},"responseBody":{"description":"A paginated list of summary objects representing filtered TTS results for the story.","typeName":"IPageIStoryfieldAiTtsResult.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"Retrieves the detailed information of a specific TTS (Text-to-Speech) result associated with a generated story. This operation is linked to the storyfield_ai_tts_results table, which stores records of TTS audio files generated for either the whole story or individual story pages. The operation supports fine-grained access for authorized users, allowing them to fetch information such as the audio file URI, the dialect used, the source text, and associations to the parent story and page if applicable.\n\nA valid authenticated session is required. Access is permitted only to the story's owner or to system administrators for moderation, compliance, and support. Soft deletion is in effect: if deleted_at is non-null, the record is considered inaccessible to standard users, but can be reviewed by systemAdmin for compliance auditing or legal requirements.\n\nRelated errors might involve permission denial (access to other users' stories/results), missing or invalid IDs, or requests for records that have been soft-deleted. All events, including denied or successful access, are logged for auditability according to platform policy.","description":"This operation allows clients to retrieve the full details of a single TTS (Text-to-Speech) result attached to a generated story. The TTS result includes fields such as the S3 URI of the audio file, dialect, original source text, and references to the underlying story and story page (if per-page audio).\n\nUsers must be authenticated and only allowed to access their own TTS results, unless elevated to a systemAdmin role for compliance or support purposes. If the ttsResult has a deleted_at timestamp, standard users are forbidden from accessing it, but systemAdmin may review for audits. Permission checks are strict, and attempts to access others' data are logged and denied.\n\nThe underlying storyfield_ai_tts_results table supports links to the broader story via storyfield_ai_story_id and, optionally, a single page via storyfield_ai_story_page_id (supporting both full-story and per-page narration use cases). Soft deletion is enforced by filtering records where deleted_at is null for end-users, with full access only for admin review.\n\nError conditions include attempts to access results not owned by the user, referencing non-existent IDs, or accessing soft-deleted records. Access and error events are fully auditable per compliance policy.","summary":"Retrieve a specific story TTS result by ID (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"The unique ID of the TTS result to retrieve (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed TTS result, including audio URI, dialect, story and page association, and source text.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"at","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/ttsResults/{ttsResultId}","method":"get"},{"specification":"Retrieves the detailed information of a specific TTS (Text-to-Speech) result associated with a generated story. This operation is linked to the storyfield_ai_tts_results table, which stores records of TTS audio files generated for either the whole story or individual story pages. The operation supports fine-grained access for authorized users, allowing them to fetch information such as the audio file URI, the dialect used, the source text, and associations to the parent story and page if applicable.\n\nA valid authenticated session is required. Access is permitted only to the story's owner or to system administrators for moderation, compliance, and support. Soft deletion is in effect: if deleted_at is non-null, the record is considered inaccessible to standard users, but can be reviewed by systemAdmin for compliance auditing or legal requirements.\n\nRelated errors might involve permission denial (access to other users' stories/results), missing or invalid IDs, or requests for records that have been soft-deleted. All events, including denied or successful access, are logged for auditability according to platform policy.","description":"This operation allows clients to retrieve the full details of a single TTS (Text-to-Speech) result attached to a generated story. The TTS result includes fields such as the S3 URI of the audio file, dialect, original source text, and references to the underlying story and story page (if per-page audio).\n\nUsers must be authenticated and only allowed to access their own TTS results, unless elevated to a systemAdmin role for compliance or support purposes. If the ttsResult has a deleted_at timestamp, standard users are forbidden from accessing it, but systemAdmin may review for audits. Permission checks are strict, and attempts to access others' data are logged and denied.\n\nThe underlying storyfield_ai_tts_results table supports links to the broader story via storyfield_ai_story_id and, optionally, a single page via storyfield_ai_story_page_id (supporting both full-story and per-page narration use cases). Soft deletion is enforced by filtering records where deleted_at is null for end-users, with full access only for admin review.\n\nError conditions include attempts to access results not owned by the user, referencing non-existent IDs, or accessing soft-deleted records. Access and error events are fully auditable per compliance policy.","summary":"Retrieve a specific story TTS result by ID (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"The unique ID of the TTS result to retrieve (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed TTS result, including audio URI, dialect, story and page association, and source text.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/stories/{storyId}/ttsResults/{ttsResultId}","method":"get"},{"specification":"Initiates and stores a new TTS (Text-to-Speech) result for a specified story by generating synthesized audio from user-provided text, language/dialect, and target page (optional). This API operates on the storyfield_ai_tts_results table. It inserts a new TTS record tied to a story and potentially a page, storing metadata such as source text, dialect, audio file S3 URI, and relations to the parent story and page.\n\nOn request, the service verifies story ownership (end-user must own the story), validates request parameters (text, dialect), invokes TTS synthesis, and coordinates with Spring backend for S3 upload. Upon success, the new TTS result is stored and returned. Soft deletion applies; all operations are fully auditable.\n\nErrors may occur if the user is not the story owner, the target story/page does not exist or is soft-deleted, text is missing or invalid, or file upload fails. The operation enforces data consistency and compliance policies.","description":"Creates a new TTS (Text-to-Speech) result for a given story. The client specifies the story, text to synthesize, dialect, and may optionally target a specific story page (for per-page narration). The API validates ownership and input fields: only the authenticated owner of the story (or a systemAdmin for administrative scenarios) may invoke this operation. Soft-deleted or non-existent stories cannot have TTS generated.\n\nUpon validation, the system generates audio using the specified dialect, uploads it to S3 (via Spring backend), and saves a new tts_results record containing the audio URI, dialect, and metadata. Output validation ensures full traceability and compliance. If errors arise in synthesis or upload, they are reported and fully logged per compliance policy.\n\nAuthorization strictly enforced; all insertions are auditable. Related operations include updating TTS records for error recovery, retrieval, or administrative review.","summary":"Create a new story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for TTS synthesis, including source text, dialect option, and (optional) page ID.","typeName":"IStoryfieldAiTtsResult.ICreate"},"responseBody":{"description":"The newly generated TTS result, including S3 audio URI, dialect, and associated IDs.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"create","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/ttsResults","method":"post"},{"specification":"Initiates and stores a new TTS (Text-to-Speech) result for a specified story by generating synthesized audio from user-provided text, language/dialect, and target page (optional). This API operates on the storyfield_ai_tts_results table. It inserts a new TTS record tied to a story and potentially a page, storing metadata such as source text, dialect, audio file S3 URI, and relations to the parent story and page.\n\nOn request, the service verifies story ownership (end-user must own the story), validates request parameters (text, dialect), invokes TTS synthesis, and coordinates with Spring backend for S3 upload. Upon success, the new TTS result is stored and returned. Soft deletion applies; all operations are fully auditable.\n\nErrors may occur if the user is not the story owner, the target story/page does not exist or is soft-deleted, text is missing or invalid, or file upload fails. The operation enforces data consistency and compliance policies.","description":"Creates a new TTS (Text-to-Speech) result for a given story. The client specifies the story, text to synthesize, dialect, and may optionally target a specific story page (for per-page narration). The API validates ownership and input fields: only the authenticated owner of the story (or a systemAdmin for administrative scenarios) may invoke this operation. Soft-deleted or non-existent stories cannot have TTS generated.\n\nUpon validation, the system generates audio using the specified dialect, uploads it to S3 (via Spring backend), and saves a new tts_results record containing the audio URI, dialect, and metadata. Output validation ensures full traceability and compliance. If errors arise in synthesis or upload, they are reported and fully logged per compliance policy.\n\nAuthorization strictly enforced; all insertions are auditable. Related operations include updating TTS records for error recovery, retrieval, or administrative review.","summary":"Create a new story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for TTS synthesis, including source text, dialect option, and (optional) page ID.","typeName":"IStoryfieldAiTtsResult.ICreate"},"responseBody":{"description":"The newly generated TTS result, including S3 audio URI, dialect, and associated IDs.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create","path":"/storyfieldAi/systemAdmin/stories/{storyId}/ttsResults","method":"post"},{"specification":"Updates an existing TTS (Text-to-Speech) result's metadata or regeneration target. This operation modifies fields in the storyfield_ai_tts_results table, which holds audio syntheses for stories and story pages. Permitted updates include correction of dialect, updating the associated page, re-generating TTS for new source text, or correcting other metadata as business rules allow. Only the owner of the parent story or systemAdmin can perform updates; changes are fully logged for compliance.\n\nUpdate validation includes verifying the record exists, is not soft-deleted, and is associated with a story the user owns. If TTS regeneration is triggered, new audio is synthesized and re-uploaded. Soft deletion fields are respected: updates are forbidden for records where deleted_at is set. Auditable for compliance and traceability.","description":"Enables modification of a previously generated TTS (Text-to-Speech) result. Possible update scenarios include correcting dialect, updating the page association (if per-page), and regenerating TTS with corrected or new source text. The operation will validate the caller's authorization (story owner or systemAdmin), check record existence, and enforce that the TTS result is not soft-deleted.\n\nIf TTS audio is to be re-generated, the previous audio URI is replaced following a new S3 upload (coordinated via Spring backend). All update actions are logged. Soft delete means updates are only possible for records with null deleted_at field. Error scenarios include attempts to update others' records, soft-deleted results, or unauthorized modifications. The operation enforces consistency between the TTS result and the story/page association.\n\nUsage is limited to authorized, non-deleted TTS result entries. All changes are audit-tracked for forensics and compliance.","summary":"Update an existing story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"ID of the TTS result record to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update, which may include dialect, text, or page association.","typeName":"IStoryfieldAiTtsResult.IUpdate"},"responseBody":{"description":"The updated TTS result, reflecting all changes and regenerated fields as needed.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"authenticatedUser","name":"update","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/ttsResults/{ttsResultId}","method":"put"},{"specification":"Updates an existing TTS (Text-to-Speech) result's metadata or regeneration target. This operation modifies fields in the storyfield_ai_tts_results table, which holds audio syntheses for stories and story pages. Permitted updates include correction of dialect, updating the associated page, re-generating TTS for new source text, or correcting other metadata as business rules allow. Only the owner of the parent story or systemAdmin can perform updates; changes are fully logged for compliance.\n\nUpdate validation includes verifying the record exists, is not soft-deleted, and is associated with a story the user owns. If TTS regeneration is triggered, new audio is synthesized and re-uploaded. Soft deletion fields are respected: updates are forbidden for records where deleted_at is set. Auditable for compliance and traceability.","description":"Enables modification of a previously generated TTS (Text-to-Speech) result. Possible update scenarios include correcting dialect, updating the page association (if per-page), and regenerating TTS with corrected or new source text. The operation will validate the caller's authorization (story owner or systemAdmin), check record existence, and enforce that the TTS result is not soft-deleted.\n\nIf TTS audio is to be re-generated, the previous audio URI is replaced following a new S3 upload (coordinated via Spring backend). All update actions are logged. Soft delete means updates are only possible for records with null deleted_at field. Error scenarios include attempts to update others' records, soft-deleted results, or unauthorized modifications. The operation enforces consistency between the TTS result and the story/page association.\n\nUsage is limited to authorized, non-deleted TTS result entries. All changes are audit-tracked for forensics and compliance.","summary":"Update an existing story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"ID of the TTS result record to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update, which may include dialect, text, or page association.","typeName":"IStoryfieldAiTtsResult.IUpdate"},"responseBody":{"description":"The updated TTS result, reflecting all changes and regenerated fields as needed.","typeName":"IStoryfieldAiTtsResult"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/storyfieldAi/systemAdmin/stories/{storyId}/ttsResults/{ttsResultId}","method":"put"},{"specification":"Permanently and irreversibly deletes a specific TTS (Text-to-Speech) result associated with a generated story. This operation acts on the storyfield_ai_tts_results table, which records generated audio files for stories and pages. Because the table incorporates a soft deletion field (deleted_at), this process sets the deleted_at timestamp rather than removing the record entirely, maintaining auditability and compliance required for user-generated content.\n\nOnly the account owner (who created the parent story) or a systemAdmin may perform erasure. The operation first validates record existence and ownership and checks that it is not already deleted. It then marks the record as deleted; the associated audio file in S3 should also be rendered inaccessible or deleted as per business policy. All actions and outcomes are logged for compliance review and incident forensic tracking.","description":"This API operation performs a soft deletion of a TTS (Text-to-Speech) result generated for a user's story, setting the deleted_at timestamp in the storyfield_ai_tts_results table. Only owners of the parent story or systemAdmin accounts may erase a TTS result; unauthorized access is blocked and fully logged. Deleting the TTS result means it will be excluded from standard list and fetch operations for normal users, but remains in the database for audit and possible legal compliance.\n\nUpon deletion, the service may also coordinate with the storage layer (such as S3 via Spring backend) to restrict access or physically remove the audio file, if the business and compliance rules require it. Soft deleted records are only accessible by systemAdmin users for compliance review. Attempts to delete already deleted or non-existent records will return clear, actionable error responses and incident logs are generated.\n\nEnsures administrative oversight and consistent treatment of all content removal operations, supporting the compliance and traceability requirements of the platform.","summary":"Soft-delete (erase) a story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"ID of the TTS result to erase (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"authenticatedUser","name":"erase","path":"/storyfieldAi/authenticatedUser/stories/{storyId}/ttsResults/{ttsResultId}","method":"delete"},{"specification":"Permanently and irreversibly deletes a specific TTS (Text-to-Speech) result associated with a generated story. This operation acts on the storyfield_ai_tts_results table, which records generated audio files for stories and pages. Because the table incorporates a soft deletion field (deleted_at), this process sets the deleted_at timestamp rather than removing the record entirely, maintaining auditability and compliance required for user-generated content.\n\nOnly the account owner (who created the parent story) or a systemAdmin may perform erasure. The operation first validates record existence and ownership and checks that it is not already deleted. It then marks the record as deleted; the associated audio file in S3 should also be rendered inaccessible or deleted as per business policy. All actions and outcomes are logged for compliance review and incident forensic tracking.","description":"This API operation performs a soft deletion of a TTS (Text-to-Speech) result generated for a user's story, setting the deleted_at timestamp in the storyfield_ai_tts_results table. Only owners of the parent story or systemAdmin accounts may erase a TTS result; unauthorized access is blocked and fully logged. Deleting the TTS result means it will be excluded from standard list and fetch operations for normal users, but remains in the database for audit and possible legal compliance.\n\nUpon deletion, the service may also coordinate with the storage layer (such as S3 via Spring backend) to restrict access or physically remove the audio file, if the business and compliance rules require it. Soft deleted records are only accessible by systemAdmin users for compliance review. Attempts to delete already deleted or non-existent records will return clear, actionable error responses and incident logs are generated.\n\nEnsures administrative oversight and consistent treatment of all content removal operations, supporting the compliance and traceability requirements of the platform.","summary":"Soft-delete (erase) a story TTS result (storyfield_ai_tts_results table)","parameters":[{"name":"storyId","description":"Target story's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"ttsResultId","description":"ID of the TTS result to erase (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/storyfieldAi/systemAdmin/stories/{storyId}/ttsResults/{ttsResultId}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of active authentication token sessions for both authenticated users and system admins. It operates on the storyfield_ai_token_sessions table, supporting search by user/admin, session activity timeframe, fingerprint, or status (active, expired, revoked). It is intended for monitoring active sessions, troubleshooting login problems, and managing overall system authentication health from the administrative UI. The request and response data structures must strictly reflect all actual fields of the storyfield_ai_token_sessions schema, including session identifiers, user/admin linkage, issued/expiry/last-activity timestamps, and soft-deletion info. This endpoint is mainly for systemAdmin use for audit/compliance and operational security.","description":"Retrieve a paginated, filtered list of authentication sessions across all users and system administrators. This operation supports complex queries over the storyfield_ai_token_sessions table from the Prisma schema. Administrators can search by user ID, admin ID, issued_at, expires_at, token hash (fingerprint), and session status (active, expired, revoked). All search criteria must correspond to actual fields documented in the schema specification.\n\nOnly system administrators are permitted to access this endpoint, reflecting the critical role of session monitoring and control for platform security. Returned sessions include both authenticated user- and admin-linked records, as well as session lifecycle details: issued_at, expires_at, last_activity_at, refresh status, deletion (soft), plus fingerprints for device/browser validation.\n\nStrong data governance and privacy rules must be applied: token_hash is shown as hashed only, never the actual token value. All session data presented must be audit-safe and traceable for compliance. This operation should support admin troubleshooting of login problems, forced logout, or abuse detection—never for business-user-level session viewing.","summary":"List and search authentication token sessions (admin only) from storyfield_ai_token_sessions","parameters":[],"requestBody":{"description":"Complex filter, pagination, and search criteria for session records","typeName":"IStoryfieldAiTokenSession.IRequest"},"responseBody":{"description":"Paginated list of token session summary records matching query","typeName":"IPageIStoryfieldAiTokenSession.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/tokenSessions","method":"patch"},{"specification":"This operation retrieves the full detail for a single authentication token session, given its unique session ID. Works directly on the storyfield_ai_token_sessions table and can fetch either user-linked or admin-linked sessions. Enables investigation of session activity, linkage, and compliance review in the security/admin UI. All fields must map directly to those in the schema: including user/admin association, device fingerprint, timestamps (issue, expiry, last activity), and soft-deletion flags.","description":"Retrieve all detailed information for a specified authentication token session. This endpoint fetches the complete storyfield_ai_token_sessions record by tokenSessionId, allowing system administrators to audit session history, troubleshoot security incidents, resolve user access problems, or validate session lifecycle compliance.\n\nThe response includes all session attributes defined in the Prisma schema: session ID, links to the associated authenticated user or system admin, fingerprint, issued_at, expires_at, refreshed_at, last_activity_at, and soft deletion timestamp if applicable. Real token values are never revealed; only the hash stored in the DB is shown. Ensures strong traceability for operational and compliance use.\n\nStrict role restriction: only systemAdmin users may access this operation, and only for operational security or audit. Nonexistent or expired sessions return clear error responses as per platform error handling policy.","summary":"Get detailed information on an authentication token session by ID (admin only)","parameters":[{"name":"tokenSessionId","description":"Unique identifier (UUID) of the target authentication token session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the specified authentication token session","typeName":"IStoryfieldAiTokenSession"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/tokenSessions/{tokenSessionId}","method":"get"},{"specification":"This operation allows system administrators to update specific mutable fields of an authentication token session. Typical use cases include forcing a session refresh, modifying expiry, or correcting fingerprint/device association. The update is performed only on the specified session ID, and only fields defined in the storyfield_ai_token_sessions schema as updatable (e.g., expires_at, refreshed_at, fingerprint) can be changed. Strict validation required: never directly modify actual token values or ownership links.","description":"Update mutable attributes of a given authentication token session by its ID. Only accessible by system administrators, this operation enables operational control over session lifecycle adjustments as required by security policy: forced expiry (logout), fingerprint modification for device corrections, or adjusting refresh timestamps as part of compliance workflows.\n\nThe request body must adhere to the IStoryfieldAiTokenSession.IUpdate schema, which is strictly limited to safe, permissible session fields. This does not allow changing user/admin linkage, actual token value (which should remain only as a hash), or other immutable identifiers. Error handling includes session not found, invalid update attempts, and compliance violation cases.\n\nSuccessful updates return the full, updated token session record for administrative confirmation. Logging of update actions for audit trails is strongly recommended. Only system administrators may use this endpoint, as improper use could impact overall system integrity.","summary":"Update a specific authentication token session's allowed fields by ID (admin only)","parameters":[{"name":"tokenSessionId","description":"UUID of the authentication session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the session (expires_at, fingerprint, etc.)","typeName":"IStoryfieldAiTokenSession.IUpdate"},"responseBody":{"description":"Updated complete token session record","typeName":"IStoryfieldAiTokenSession"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/storyfieldAi/systemAdmin/tokenSessions/{tokenSessionId}","method":"put"},{"specification":"This operation deactivates (soft-deletes) a specific authentication token session by marking it as deleted in the storyfield_ai_token_sessions table. Used to enforce forced logout, revoke access, or respond to security incidents as part of operational policy. The session must be identified by its UUID, and the operation will set the deleted_at timestamp, rendering it invalid for future authentication. Permanent physical removal is not performed; record is retained for audit purposes.","description":"Permanently disables (soft-deletes) a targeted authentication token session by setting its deleted_at timestamp via the storyfield_ai_token_sessions schema. Employed by system administrators to forcibly logout a user or admin, respond to abuse or compromise, or close a session as part of policy enforcement. After this action, the session is invalid for any further authentication attempts but remains in the database for compliance tracking and audit review.\n\nOnly system admins are permitted access to this operation; non-admins cannot forcibly remove session records. If the tokenSessionId does not exist or is already deleted, the result is a compliant error with a detailed message. No request body is used. Audit logs are recommended for all such administrative deactions to ensure traceability of forced logouts and session terminations.","summary":"Soft-delete (force logout) a specified authentication token session (admin only)","parameters":[{"name":"tokenSessionId","description":"UUID of the token session to be deactivated (soft-delete)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/storyfieldAi/systemAdmin/tokenSessions/{tokenSessionId}","method":"delete"},{"specification":"This operation provides a paginated search and filter interface to retrieve system token revocation records, enabling administrators to audit, search, and view revocation events associated with authentication tokens. Operating on the storyfield_ai_token_revocations table, it supports filtering by user, admin, token hash, revocation reason, and event time. This endpoint is essential for security audit, abuse investigation, and compliance reporting processes. It returns a paginated list of summary information about each token revocation, including links to the related session, user, and administrative context; it complies with business requirements for auditability and security transparency.","description":"Retrieve a filtered and paginated list of all authentication token revocation events from the system. This allows system administrators to search for revoked tokens issued to any user or admin, filter by revocation reason or time, and view which administrator acted on each revocation. Each record includes the token hash, revocation rationale, related user or admin, and timestamps for traceability.\n\nThis operation operates on the storyfield_ai_token_revocations table in the database. Security considerations require that only users with the systemAdmin role should have access, since revocation event details may reveal sensitive incident response actions or compromise context.\n\nThe search parameters may include token hash, admin or user identifiers, creation dates, and reason for revocation. Pagination and sorting are supported for efficient auditing of large volumes of records. Results only include summary views (no full session or token detail is returned here).\n\nAppropriate validation prevents exposure of sensitive token values and ensures revocation audit logs remain readonly to admins only. Related operations include viewing a single revocation record in detail and creating a new revocation event (by business flow, not direct user API).\n\nExpected error cases include insufficient authorization (non-admin attempting to access logs) or unmatchable query parameters. All query activity should be tracked for compliance review.","summary":"Search, filter, and retrieve a paginated list of token revocation events (systemAdmin only; storyfield_ai_token_revocations)","parameters":[],"requestBody":{"description":"Query, filtering, and pagination parameters for revocation records, such as token hash, admin/user, date range, and reason.","typeName":"IStoryfieldAiTokenRevocation.IRequest"},"responseBody":{"description":"Paginated list of summary information about matching token revocation events.","typeName":"IPageIStoryfieldAiTokenRevocation.ISummary"},"authorizationRoles":["systemAdmin"],"name":"index","path":"/storyfieldAi/systemAdmin/tokenRevocations","method":"patch","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation provides full detail for a single authentication token revocation event, allowing administrators to inspect why and how a specific token was revoked. It operates on the storyfield_ai_token_revocations table and presents all non-sensitive details of the revocation: the responsible admin, target user/session, reason, associated token hash, and timestamps. This is a critical audit and incident investigation endpoint for the service, essential for compliance and forensic analysis.","description":"Retrieve detailed information about an individual token revocation event from the storyfield_ai_token_revocations table. This is typically used by system administrators when investigating security incidents, abuse reports, or user access control issues. The returned record includes contextual data, such as which session or user was involved, which administrator performed the revocation, the explicit reason recorded for revocation, timestamp, relevant IP address, and the (hashed) token reference.\n\nFor audit integrity, only systemAdmin users can access this information, and full token values are never exposed—only their hashes and related metadata. This endpoint is closely related to the list/search of revocations, and may be used after finding a record of interest via the broader search API.\n\nAccess and usage of this endpoint are logged for compliance. Authorization failure and not-found errors are handled with clear, specific error responses. No editing or deletion of revocation logs is possible.","summary":"View detailed information about a specific token revocation event (systemAdmin only; storyfield_ai_token_revocations)","parameters":[{"name":"tokenRevocationId","description":"Unique identifier (UUID) of the token revocation event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified token revocation event, including admin, user, reason, and metadata.","typeName":"IStoryfieldAiTokenRevocation"},"authorizationRoles":["systemAdmin"],"name":"at","path":"/storyfieldAi/systemAdmin/tokenRevocations/{tokenRevocationId}","method":"get","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation provides a paginated, searchable log of authentication and authorization audit events—such as token issuance, validation attempts, login failures, refreshes, revocations—necessary for compliance, security monitoring, and debugging. It operates on the storyfield_ai_auth_audit_logs table. System administrators can search/audit these logs by user/admin/session ID, event type, outcome, and time period. The endpoint is critical for forensic review of account access, abnormal behaviors, and incident response.","description":"Search and retrieve a paginated list of authentication and authorization audit log events from the storyfield_ai_auth_audit_logs table. Designed for use by system administrators, the endpoint provides query, sort, and filter options on typical event audit fields: event type (e.g., issued, revoked, denied), outcome (success/failure), related user/session/admin IDs, source IP, time window, and textual search in event messages. This is vital for tracking security-relevant events and ensuring policy compliance.\n\nBecause audit logs can reveal sensitive security context, access is restricted to systemAdmin role only, and all audit log access is itself logged. Result summaries are returned for high-volume review: full event information may require a second detail API call.\n\nThis operation is tightly integrated with incident response, system monitoring, and compliance/forensics workflows. Authorization or query parameter errors are handled with clear error messages. Audit records are append-only and cannot be edited or deleted by this or any other endpoint.","summary":"Search and retrieve paginated authentication/authorization audit events (systemAdmin only; storyfield_ai_auth_audit_logs)","parameters":[],"requestBody":{"description":"Query, filtering, and pagination parameters for audit logs, such as event type, user/admin/session, time window, outcome.","typeName":"IStoryfieldAiAuthAuditLog.IRequest"},"responseBody":{"description":"Paginated list of summary information about authentication/audit events matching query.","typeName":"IPageIStoryfieldAiAuthAuditLog.ISummary"},"authorizationRoles":["systemAdmin"],"name":"index","path":"/storyfieldAi/systemAdmin/authAuditLogs","method":"patch","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation provides full detail on a single authentication or authorization audit event from the storyfield_ai_auth_audit_logs table, supporting deep-dive forensic review, compliance checks, and incident investigation. It exposes all non-sensitive metadata for the chosen audit entry—such as event type, outcome, actor identification, source IP, event message, and timestamp—to the system administrator. This enables precise answering to when/how/why key authentication actions occurred and supports comprehensive system oversight.","description":"Retrieve the full set of recorded details for a single authentication/authorization audit event from the storyfield_ai_auth_audit_logs table. System administrators can use this to see exactly when, by whom, and with what outcome an authentication event (e.g., login attempt, token refresh, revocation, validation failure) occurred. The record includes actor/user/admin identification, event type, result, contextual message, timestamps, and environment metadata for precise forensic analysis.\n\nThis operation is restricted to systemAdmin role, and all accesses are themselves tracked for audit purposes. Access control ensures sensitive information is not exposed beyond authorized admins. Typical use cases include incident investigation, suspicious access review, compliance checks, and security audits.\n\nNot found or unauthorized access errors are handled transparently per security requirements. No update or deletion of audit events is allowed by this or any API.","summary":"View full detail for a specific authentication/authorization audit log event (systemAdmin only; storyfield_ai_auth_audit_logs)","parameters":[{"name":"authAuditLogId","description":"Unique identifier (UUID) of the authentication/authorization audit log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified authentication/authorization audit event.","typeName":"IStoryfieldAiAuthAuditLog"},"authorizationRoles":["systemAdmin"],"name":"at","path":"/storyfieldAi/systemAdmin/authAuditLogs/{authAuditLogId}","method":"get","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation retrieves a paginated list of integration event and audit logs from the storyfield_ai_integration_logs table. It supports advanced filtering, sorting, and pagination of integration logs, enabling system administrators to monitor critical cross-system actions, API calls, recovery events, and operational incidents. Each retrieved log details events such as API integrations, S3 uploads, recovery retries, and error outcomes, supporting auditability and troubleshooting of the platform's systemic health.","description":"Retrieve a filtered and paginated list of integration event and audit logs from the system. This allows designated administrators to search, filter, and view integration events based on their type, subsystem, status, and timestamps.\n\nThis operation is restricted to users with 'systemAdmin' role as integration logs may include sensitive details regarding external API failures, connector details, or operational context relevant for compliance and incident management. The search request supports criteria such as event type, subsystem, time range, and free-text search on error and status fields.\n\nIntegration logs are sourced from the storyfield_ai_integration_logs table, which maintains comprehensive records of systemic events tied to other core tables. Results are paginated and may be sorted as needed to facilitate review during monitoring, compliance checks, or troubleshooting sessions. Error handling covers missing/invalid search parameters, excessive result window, or insufficient role permissions.","summary":"Search and retrieve paginated integration event logs (storyfield_ai_integration_logs).","parameters":[],"requestBody":{"description":"Search filters, pagination, and sorting criteria for integration event log retrieval.","typeName":"IStoryfieldAiIntegrationLog.IRequest"},"responseBody":{"description":"Paginated list of integration logs matching search criteria.","typeName":"IPageIStoryfieldAiIntegrationLog"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/integrationLogs","method":"patch"},{"specification":"This operation retrieves the detail of a single integration event log from the storyfield_ai_integration_logs table, identified by its unique integrationLogId. It enables system administrators to view full event, status, message, and traceability details for a specific audit or operational event, which may be used in compliance checks or incident root cause investigations.","description":"Retrieve full details of an individual integration event log by specifying its unique integrationLogId in the path. This provides system administrators access to complete event metadata, including event type, subsystem, status, message, correlation/request id, and timestamp details.\n\nAccess to this operation is limited strictly to users with the 'systemAdmin' role due to the sensitive nature of integration event contents, which may include error stack traces, system status codes, and operational diagnostics. The log is retrieved from the storyfield_ai_integration_logs table and relates to cross-system function boundaries (e.g., API calls with user or story context).\n\nProper validation is enforced to ensure the requested log exists and the user has appropriate authorization. Errors are returned for missing or unauthorized log access or invalid identifier formats.","summary":"Retrieve integration event log detail (storyfield_ai_integration_logs) by ID.","parameters":[{"name":"integrationLogId","description":"Unique identifier of the integration event log to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the specified integration event log.","typeName":"IStoryfieldAiIntegrationLog"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/integrationLogs/{integrationLogId}","method":"get"},{"specification":"This operation retrieves a paginated list of S3 upload history records from the storyfield_ai_s3_upload_histories table, supporting advanced filtering and pagination for upload events. Enables system administrators to review all upload attempts, filename, upload status, file size, resource type, and error messages. The feature is essential for troubleshooting failed uploads, reliability analysis, and compliance reporting.","description":"Search and retrieve a filtered, paginated list of S3 upload history events for the system. System administrators can review recent and historical upload attempts, status outcomes (e.g., SUCCESS, FAILURE), file details, and error diagnostics.\n\nAccess is restricted to the 'systemAdmin' role due to inclusion of sensitive file paths, error messages, and operational diagnostics linked to user-generated content. Search criteria include filename, media type, upload status, creation date, and text-based error search; sorting for audit use cases is also supported.\n\nThis operation references the storyfield_ai_s3_upload_histories table, logging all S3 upload events, traceability details, and error outcomes for compliance and platform health analysis. Standard error handling applies for permission checks, parameter validation, and result set constraints.","summary":"Search and retrieve paginated S3 upload histories (storyfield_ai_s3_upload_histories).","parameters":[],"requestBody":{"description":"Search and pagination filters for S3 upload history retrieval.","typeName":"IStoryfieldAiS3UploadHistory.IRequest"},"responseBody":{"description":"Paginated list of S3 upload history records matching filter criteria.","typeName":"IPageIStoryfieldAiS3UploadHistory"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/s3UploadHistories","method":"patch"},{"specification":"This operation retrieves the detail of a specific S3 upload history record from the storyfield_ai_s3_upload_histories table by its unique s3UploadHistoryId. It allows system administrators to analyze all file upload context, including filename, file size, upload status, resource type, error message, associated story/user, upload URLs, and diagnostic timeline for audit or troubleshooting.","description":"Retrieve detailed S3 upload event information by specifying a unique s3UploadHistoryId in the path. This operation exposes all diagnostic, status, and traceability fields for a single file upload event, which can be critical for postmortem, incident, or compliance review.\n\nAccess to this endpoint is available only to users with the 'systemAdmin' role, as upload event logs may contain user file names, error diagnostics, internal URIs, or sensitive operational timing. The response includes upload parameters, error context (if any), S3 URL returned by Spring, and audit fields for the associated upload.\n\nThis operation references the storyfield_ai_s3_upload_histories table and enforces role and identifier format validation. Errors are returned where access is unauthorized, the upload history record does not exist, or the s3UploadHistoryId is incorrectly formatted.","summary":"Retrieve S3 upload history detail (storyfield_ai_s3_upload_histories) by ID.","parameters":[{"name":"s3UploadHistoryId","description":"Unique identifier of the S3 upload history event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details for the specified S3 upload event history record.","typeName":"IStoryfieldAiS3UploadHistory"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/s3UploadHistories/{s3UploadHistoryId}","method":"get"},{"specification":"This operation retrieves a filtered and paginated list of external API failure records in the Storyfield AI platform. It operates on the storyfield_ai_external_api_failures table, enabling authorized admins to search, filter, and sort error/failure events involving external system integration (OpenAI, ASR, TTS, S3, Spring backend, etc). Search parameters may include API type, error code, endpoint, method, date range, and user. Useful for incident investigation, SLA compliance, and trend analysis.","path":"/storyfieldAi/systemAdmin/externalApiFailures","method":"patch","summary":"Search and retrieve paginated list of external API failure records for admin review (storyfield_ai_external_api_failures table).","description":"This operation allows system administrators to perform advanced filtering and retrieval of all integration failure and external API error records. These records provide insight into system reliability, business process health, and root-cause error attribution for events such as third-party failures, quota overruns, network timeouts, or misconfigurations.\n\nAccess to this endpoint is restricted to systemAdmin users given the sensitive nature of error logs and the potential inclusion of PII or technical details valuable for security monitoring. The response delivers a summary view for each record, with options to expand details for incident triage or forensics.\n\nBusiness logic includes robust filtering—by API type, error code, endpoint, status, affected user, or date range, and supports ordering by newest, error severity, or frequency. This endpoint forms the basis for error dashboards, incident response workflows, and SLA audits. The underlying Prisma table's unique constraints and indices (api_type, created_at, error_code, message) ensure highly efficient query handling. Related endpoints provide detail retrieval and contextual integration log review.","parameters":[],"requestBody":{"description":"List/search criteria for external API failure event filtering and pagination.","typeName":"IStoryfieldAiExternalApiFailure.IRequest"},"responseBody":{"description":"Paginated collection of external API failure summary records matching administrative search conditions.","typeName":"IPageIStoryfieldAiExternalApiFailure.ISummary"},"authorizationRole":"systemAdmin","authorizationType":null,"name":"index"},{"specification":"This operation retrieves detailed information for a specific external API failure record identified by its unique ID (externalApiFailureId) in the storyfield_ai_external_api_failures table. It enables administrators and support engineers to review the full context of a historical API failure, including endpoint, error details, request and response payloads, retry history, and affected users.","path":"/storyfieldAi/systemAdmin/externalApiFailures/{externalApiFailureId}","method":"get","summary":"Retrieve detail of a specific external API failure event from storyfield_ai_external_api_failures.","description":"This endpoint returns all available metadata and error context for a given API failure or integration error event, as tracked in the storyfield_ai_external_api_failures table. Records include the API type (e.g., openai, tts), endpoint, HTTP method, error_code, error_message, request_payload, response_payload, retry_count, timestamps, and foreign keys relating the event to a user or story where available.\n\nOnly users with systemAdmin privileges may access this method, given the inclusion of sensitive operational and potentially personal data. Typical use cases include postmortem investigation, troubleshooting, compliance analysis, and incident remediation workflows.\n\nValidation ensures that the provided externalApiFailureId matches an existing failure event. Attempts to access a non-existent, deleted, or restricted event will result in a clear authorization or not-found error. Other related endpoints should be referenced to cross-analyze API failures in context of user sessions and integration system logs.","parameters":[{"name":"externalApiFailureId","description":"Unique identifier (UUID) for the external API failure event to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the target external API failure log entry.","typeName":"IStoryfieldAiExternalApiFailure"},"authorizationRole":"systemAdmin","authorizationType":null,"name":"at"},{"specification":"This operation enables system administrators to perform a paginated search and listing of all active and historical system policy records within the Storyfield AI platform. It operates on the storyfield_ai_system_policies table, providing search, filter, and sort over policies by code, name, type, state, or business context. Used as the foundation for policy audits, governance, and configuration compliance checks.","path":"/storyfieldAi/systemAdmin/systemPolicies","method":"patch","summary":"Admin search and listing of system policy records in storyfield_ai_system_policies.","description":"System administrators use this endpoint to retrieve a paginated, filterable list of all policy records governing the Storyfield AI service. Policy records define global business, technical, feature toggle, and compliance rules. The results may be filtered by fields such as policy_code, name, type (data type), 'active' state, or creation date. Sorting and pagination options are supported, allowing efficient review and auditing.\n\nStrong access control is enforced; only users with systemAdmin role may access this method, given the high potential business or security impact of policy review and change. This operation directly reflects the business and technical policy definitions stored in storyfield_ai_system_policies, indexed by policy_code, active, created_at, and other key fields. Administrative workflows for policy governance, change approval, and rollout rely on this search function as a core capability.","parameters":[],"requestBody":{"description":"System policy search/filtering and pagination criteria.","typeName":"IStoryfieldAiSystemPolicy.IRequest"},"responseBody":{"description":"Paginated result set of system policy summary records as defined in policy governance and compliance tables.","typeName":"IPageIStoryfieldAiSystemPolicy.ISummary"},"authorizationRole":"systemAdmin","authorizationType":null,"name":"index"},{"specification":"This operation retrieves full detail for a given system policy by its unique policyId from the storyfield_ai_system_policies table. It enables system administrators and configuration auditors to review all business, technical, and compliance attributes of an individual platform-wide policy, including code, state, value, type, and modification history.","path":"/storyfieldAi/systemAdmin/systemPolicies/{policyId}","method":"get","summary":"Retrieve detail of a specific system policy from storyfield_ai_system_policies.","description":"System administrators can use this endpoint to access the complete definition and lifecycle attributes of a particular platform policy, including code, type, descriptive name, current value, type, enforcement (active), and all relevant modification timestamps. The result includes any archival (soft deleted) state for historic records, as well as compliance notes in the description field.\n\nThe endpoint requires systemAdmin privileges due to the highly sensitive and operationally impactful nature of policy data. Typical use cases include compliance audits, configuration troubleshooting, or rollback review. All requests validate that the policyId refers to a real and accessible policy, returning not-found or access-denied errors for missing or restricted records. This forms part of the platform's governance and controls dashboard for senior technical staff.","parameters":[{"name":"policyId","description":"Unique identifier (UUID) for the system policy record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the selected system policy, including all business and configuration attributes.","typeName":"IStoryfieldAiSystemPolicy"},"authorizationRole":"systemAdmin","authorizationType":null,"name":"at"},{"specification":"This operation creates a new system policy record in the 'storyfield_ai_system_policies' table. Each policy defines a business, technical, or compliance setting for StoryField AI and supports runtime feature toggling, enforcement, or documentation of service rules. Policies are administratively managed, versioned, and described for traceability and audit purposes. Creation requires administrative authorization and proper validation of data types, policy code/uniqueness, required value format, and human-readable documentation of business intent. Administrators can use this operation to activate new business or operational constraints in the platform, and any changes become immediately visible to dependent services after creation. This operation is critical for updating and adding new runtime rules, toggling features, or enforcing compliance without code changes.","path":"/storyfieldAi/systemAdmin/systemPolicies","method":"post","summary":"Create a new system policy record (storyfield_ai_system_policies table).","description":"This API operation enables system administrators to define and register a new global system policy within the 'storyfield_ai_system_policies' table. Each system policy holds technical, business, or compliance rules, and serves as a runtime-enforced parameter across StoryField AI platform components.\n\nWhen executed, the operation validates the provided policy code (must be unique across the table), ensures descriptive documentation for traceability, and validates value/type according to runtime enforcement requirements. The policy is immediately active unless further toggling is required post-creation. All active system policies become integral to operational behavior (e.g., feature toggling, timeouts, quotas, or maintenance mode).\n\nOnly users with 'systemAdmin' privileges may create, update, or delete system policies. Required fields include a unique policy_code, name, value, description, active flag, and type. Business validation enforces uniqueness of the policy_code and clarity of the description to avoid misconfiguration or accidental override. Errors are provided for validation failure, policy conflicts, or loss of administrative privilege. Change history is audited for compliance.\n\nTypical use cases: enabling maintenance, deploying a new feature toggle, setting global quota, or changing the operational window for maintenance with compliance obligations.\n\nThis operation should be paired with update and delete endpoints for comprehensive policy lifecycle management and includes error handling for inputs like duplicate policy_code, missing description, or value-type mismatch.","parameters":[],"requestBody":{"description":"Policy creation payload, including policy code, name, description, value, type, active flag, and documentation.","typeName":"IStoryfieldAiSystemPolicy.ICreate"},"responseBody":{"description":"The newly registered system policy, including all properties and audit fields.","typeName":"IStoryfieldAiSystemPolicy"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create"},{"specification":"This operation updates an existing global policy record in the 'storyfield_ai_system_policies' table. Administrators can modify the business, compliance, or technical rule represented by a single policy, allowing immediate update of service behavior or enforcement rules. Relies on policyId as a path parameter, which is the primary key for the policy record. Input must include updated fields (e.g., name, value, active flag, type) with careful validation against current policy code requirements. Targets administrative business controls, where changes propagate immediately to dependent platform components. Change is audited for traceability, and only system admins may perform updates.","path":"/storyfieldAi/systemAdmin/systemPolicies/{policyId}","method":"put","summary":"Update a system policy by ID (storyfield_ai_system_policies table).","description":"This API endpoint enables modification of an existing system policy in the 'storyfield_ai_system_policies' table, identified by its unique primary key policyId. System policies control critical runtime behavior, feature toggling, and compliance constraints, so careful validation is required on input.\n\nAdministrators must provide the desired updates, which may include the policy's human-readable name, value, description, type, or active status. The operation enforces audit logging and will verify that the path parameter policyId matches a known policy. If a record is not found, an error is returned. Uniqueness of policy_code is preserved (policy_code itself is generally immutable after creation), and any changes to operationally sensitive fields (value, type, active flag) are immediately enforced by the platform.\n\nRole authorization is restricted to systemAdmin users. The change history is tracked with timestamps for compliance purposes. The operation supports dynamic change scenarios, such as toggling maintenance mode or adjusting resource quotas, and is typically paired with creation and delete endpoints as part of policy lifecycle management.","parameters":[{"name":"policyId","description":"Unique identifier (UUID) for the system policy to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Policy update input with fields to be changed (excluding immutable policy code).","typeName":"IStoryfieldAiSystemPolicy.IUpdate"},"responseBody":{"description":"The system policy after updates, including all changed properties and audit fields.","typeName":"IStoryfieldAiSystemPolicy"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"This operation deletes (soft deletes) a system policy in the 'storyfield_ai_system_policies' table, making it inactive and no longer enforced at runtime. The operation uses a policyId (UUID) as the path parameter to uniquely select the policy record for removal. Deleted_at field is set for audit, compliance, and possible recovery, ensuring traceability and reversibility. Only systemAdmin users may invoke this endpoint. The effect is immediate: affected business or technical rules are no longer in force. Deletion is audited and does not remove the record from storage, but marks it as logically unavailable for operational use.","path":"/storyfieldAi/systemAdmin/systemPolicies/{policyId}","method":"delete","summary":"Deactivate/soft-delete a system policy by ID (storyfield_ai_system_policies table).","description":"This API operation allows a system administrator to deactivate (soft delete) a system policy in the 'storyfield_ai_system_policies' table, using the unique policyId. When invoked, the operation sets the deleted_at field to the current timestamp, rendering the policy logically inactive but retaining the record for compliance and potential audit review.\n\nNo physical deletion from the database occurs; the policy remains available for historical review or temporary reactivation by privileged users. Business integrity, compliance, and traceability are preserved by audit logs and change history. The operation is strictly limited to systemAdmin role, and deactivated policies become unavailable for runtime enforcement or visibility in active system settings endpoints.\n\nErrors are provided if the record is missing, already deactivated, or if the user lacks appropriate privileges. This operation is typically paired with creation and update endpoints for full policy lifecycle management.","parameters":[{"name":"policyId","description":"Unique identifier (UUID) of the system policy to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"This operation retrieves a paginated, filterable list of environment settings from the 'storyfield_ai_env_settings' table. Each record represents a key-value configuration item for a runtime environment (e.g., production, staging, development, local). Records include environment variable names, values, environment context, change control, and audit fields. The operation provides advanced search, filtering (by environment, changed_by, or key), and pagination; supports operational monitoring and audit reviews by system administrators. Restricted to systemAdmin users for configuration and deployment security.","path":"/storyfieldAi/systemAdmin/envSettings","method":"patch","summary":"Search and retrieve environment settings with filtering and pagination (storyfield_ai_env_settings table).","description":"This API endpoint retrieves a filtered and paginated list of environment settings from the 'storyfield_ai_env_settings' table. Environment settings store key=value pairs representing sensitive or operational configuration items, change control information, and change audit traceability by environment context.\n\nSystem administrators use this endpoint to manage configuration drift, detect unauthorized changes, and perform audit reviews. Supported filters include environment name, key name, and changed_by, and results are paginated for efficient list navigation. Business rules require that only systemAdmin users may access or enumerate environment settings, to avoid accidental exposure of sensitive material.\n\nInput includes filter criteria, sort order, and pagination parameters (e.g., page, page size, sort field/direction). The response returns a paginated dataset of environment setting records, with all relevant audit fields and masking of sensitive values as required for compliance.\n\nErrors are returned for invalid pagination parameters, insufficient privileges, or system errors. This operation is typically paired with administrative creation or update endpoints for full lifecycle environment and configuration management.","parameters":[],"requestBody":{"description":"Request criteria for searching/filtering environment settings including pagination.","typeName":"IStoryfieldAiEnvSetting.IRequest"},"responseBody":{"description":"Paginated list of environment settings matching the query parameters.","typeName":"IPageIStoryfieldAiEnvSetting"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"Retrieves a single environment setting entry from the storyfield_ai_env_settings table using its unique ID. This operation allows system administrators to access complete details of a specific key-value configuration used to manage application environments, including the environment name, configuration key, value, change reason, and auditing metadata. It is essential for reviewing historical or current settings for operational or compliance investigations.","path":"/storyfieldAi/systemAdmin/envSettings/{envSettingId}","method":"get","summary":"Retrieve a specific environment setting by its unique ID (storyfield_ai_env_settings).","description":"This operation allows retrieval of a single environment setting by specifying its unique identifier. It queries the storyfield_ai_env_settings table, which holds per-environment configuration key-value pairs and change metadata.\n\nThis endpoint is intended for use by system administrators when reviewing or troubleshooting deployments, auditing configuration changes, and diagnosing operational issues. The permission is strict—only authorized systemAdmin actors can query these records due to the sensitivity of environment configuration data.\n\nReturned information includes environment key, value (masked if sensitive), the target environment (e.g., production, staging), the user/admin who last changed the value, the reason for the change, and timestamps for creation and updates. This level of access helps ensure traceability of system configuration changes and supports incident investigations or rollbacks when needed.\n\nCareful access control must be enforced, and audit logs should record access to this endpoint for compliance purposes.","parameters":[{"name":"envSettingId","description":"Unique identifier of the environment setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full details of the requested environment setting record.","typeName":"IStoryfieldAiEnvSetting"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"Creates a new environment setting record in the storyfield_ai_env_settings table. Used for adding a specific configuration key-value for a designated environment, with full audit logging of who set it and for what purpose. This is critical for robust configuration management, rapid recovery, and secure handling of secrets/policies in multi-environment SaaS operations.","path":"/storyfieldAi/systemAdmin/envSettings","method":"post","summary":"Create a new environment setting record (storyfield_ai_env_settings).","description":"This operation creates a new entry in the storyfield_ai_env_settings table, representing a configuration setting for a specific runtime environment (development, staging, production, or local). The request requires specifying the environment, key, value, the identity of the admin making the change, and the business reason for the new or changed value.\n\nEnvironment settings are critical for operational correctness, as they govern external API keys, feature toggles, and infrastructure URLs. Proper use of this endpoint supports secure, audited deployments and enables rapid restoration/rollback for incident response.\n\nOnly authorized systemAdmin roles may call this operation. Audit fields, including who created the setting and their change justification, are mandatory. The response provides the complete resulting environment setting object, confirming correct persistence and registration in the configuration audit log.\n\nNote: Sensitive data in env_value should follow masking policies in the system's response payloads, and not all values are suitable for disclosure to UI clients.","parameters":[],"requestBody":{"description":"The full details for the new environment setting to create, including environment name, key, value, administrating user, and reason for the change.","typeName":"IStoryfieldAiEnvSetting.ICreate"},"responseBody":{"description":"The full persisted environment setting record after creation, including audit metadata and assigned ID.","typeName":"IStoryfieldAiEnvSetting"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create"},{"specification":"Updates an existing environment setting record identified by its unique ID in the storyfield_ai_env_settings table. Allows adjustment to environment variables, rotation of API keys, or correction of misconfigurations for a specified environment. All updates require admin identity and a change reason, maintaining a strict audit trail for compliance and troubleshooting.","path":"/storyfieldAi/systemAdmin/envSettings/{envSettingId}","method":"put","summary":"Update an existing environment setting by its unique ID (storyfield_ai_env_settings).","description":"This operation modifies a specific environment setting record given its unique envSettingId, allowing system administrators to change configuration keys or values, or to adjust environment assignments (e.g., switching a feature toggle from 'off' to 'on' for production).\n\nEach update requires complete payload details including the new key, value, which administrator is making the change, and a supporting business reason for the modification. This supports policy and regulatory compliance by ensuring an immutable audit trail of all config/value changes, who performed them, and why.\n\nThe endpoint strictly limits access to systemAdmin role, reflecting the high business risk of improper environment configuration management. Responses include the fully updated env setting object for confirmation. All update actions should also be logged for potential security or incident review.","parameters":[{"name":"envSettingId","description":"Unique identifier of the environment setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full update payload for the target environment setting, including changed key, value, administrator, and audit fields.","typeName":"IStoryfieldAiEnvSetting.IUpdate"},"responseBody":{"description":"The complete updated environment setting record with latest audit metadata.","typeName":"IStoryfieldAiEnvSetting"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"Erases (hard deletes) an environment setting record from the storyfield_ai_env_settings table, removing it from operational configuration for the specified environment. This is a permanent removal and is used for decommissioning obsolete, unsafe, or mistakenly added configuration entries. All deletion actions are audited for compliance and incident response.","path":"/storyfieldAi/systemAdmin/envSettings/{envSettingId}","method":"delete","summary":"Permanently remove a specific environment setting by unique ID (storyfield_ai_env_settings).","description":"This operation irreversibly deletes an environment setting from the configuration registry using its unique envSettingId. Removal is intended only for settings that are no longer required, are unsafe to retain (such as expired API keys), or were added in error. Unlike soft deletes, this operation physically removes the record, making restoration impossible once completed.\n\nStrict access is enforced: only users with systemAdmin role may invoke this endpoint, and every execution must be auditable. Deletion of critical environment variables should be accompanied by additional policy review to prevent accidental or malicious service impact.\n\nAudit logs must record the administrator, time, and contextual justification for each action, ensuring support for post-incident analysis and compliance reviews. This operation does not return a response body on success.","parameters":[{"name":"envSettingId","description":"Unique identifier of the environment setting to permanently remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"This operation retrieves a paginated and filterable list of deployment and rollback event logs from the storyfield_ai_deployment_logs table. It allows system administrators and authorized users to search all deployment, rollback, and hotfix actions, along with status, environment, and summary details, for operational audit and compliance review. Complex filtering, sorting, and pagination parameters enable effective exploration of historical deployments and rapid resolution of operational incidents.","path":"/storyfieldAi/systemAdmin/deploymentLogs","method":"patch","summary":"Search and retrieve deployment/rollback event logs in a paginated, filterable list (storyfield_ai_deployment_logs)","description":"This operation enables system administrators and authorized support staff to retrieve the history of all deploy, rollback, and hotfix events on the StoryField AI server. The storyfield_ai_deployment_logs table is queried with filtering, search, and pagination parameters so that relevant operational events can be rapidly identified by status, environment, or deployment_label.\n\nAll returned records include deployment label, action type (deploy, rollback, hotfix, config-change), environment, initiator, status (success/failed/in-progress/aborted), timestamps, and summary. Sensitive information is redacted as appropriate. Audit logs facilitate compliance, troubleshooting, and accountability.\n\nOnly admins or privileged operations team members should use this API. Access is strictly logged and all usage is monitored for security compliance. Related APIs include GET /deploymentLogs/{deploymentLogId} for detailed viewing, and POST/PUT endpoints for log creation and update.","parameters":[],"requestBody":{"description":"List, search, and pagination filter for deployment/rollback event logs of the StoryField AI service.","typeName":"IStoryfieldAiDeploymentLog.IRequest"},"responseBody":{"description":"Paginated, filtered list of deployment/rollback log summaries matching search criteria.","typeName":"IPageIStoryfieldAiDeploymentLog.ISummary"},"authorizationRoles":["systemAdmin"],"name":"index","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation fetches detailed information for a single deployment, rollback, or hotfix event log from the storyfield_ai_deployment_logs table by unique deploymentLogId. Returns full deployment context, action type, status, timestamps, environment, initiator, outcome, and summary for operational audit.\nPrimarily used by system administrators during compliance review, postmortem analysis, or issue investigation.","path":"/storyfieldAi/systemAdmin/deploymentLogs/{deploymentLogId}","method":"get","summary":"Retrieve detailed record for a specific deployment or rollback event log (storyfield_ai_deployment_logs)","description":"This API operation retrieves all relevant information for a single deployment, rollback, or hotfix log entry identified by deploymentLogId in the storyfield_ai_deployment_logs table. It includes deployment label, action type (deploy, rollback, hotfix), target environment, initiator identity, status, audit summary, timestamps, and deletion status if any, along with supplementary notes.\n\nUsed by system administrators for postmortem investigations, compliance audits, or detailed history review. Only privileged or admin roles should access this API. Requires strict authentication, with all accesses logged for compliance. Returns full record with all available fields for the identified event log.","parameters":[{"name":"deploymentLogId","description":"The unique identifier (UUID) for the target deployment log event.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed deployment/rollback event record matching the provided deploymentLogId.","typeName":"IStoryfieldAiDeploymentLog"},"authorizationRoles":["systemAdmin"],"name":"at","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation allows system administrators to create a new deployment, rollback, hotfix, or environment change log entry in the storyfield_ai_deployment_logs table. The log captures deployment_label, action_type (deploy, rollback, hotfix, config-change), target environment, initiator, status (success/failed/etc.), summary, and timestamps. Required for full operational auditability, compliance, and incident traceability in the service lifecycle.","path":"/storyfieldAi/systemAdmin/deploymentLogs","method":"post","summary":"Create a new deployment/rollback event log entry (storyfield_ai_deployment_logs)","description":"This operation enables system administrators to record every deployment, rollback, hotfix, configuration change, or related system event affecting the StoryField AI server's environment. When invoked, a new log record is created in the storyfield_ai_deployment_logs table, capturing action type, deployment label, environment, initiator, outcome, status, summary, and timestamps.\n\nStrict input validation is enforced: deployment_label must be unique for the environment, action_type is constrained to allowed values (e.g., deploy, rollback, hotfix, config-change), and referential integrity is maintained. The operation is only allowed for system administrators with valid authentication. All operations are recorded for compliance. Other relevant APIs: PATCH /deploymentLogs for log search, GET /deploymentLogs/{deploymentLogId} for record retrieval, PUT /deploymentLogs/{deploymentLogId} for log updates.","parameters":[],"requestBody":{"description":"Full information for the event log entry to be created, such as deployment metadata, action type, environment, status, initiator, and summary.","typeName":"IStoryfieldAiDeploymentLog.ICreate"},"responseBody":{"description":"Created deployment or rollback event log record with all database-generated and submitted fields.","typeName":"IStoryfieldAiDeploymentLog"},"authorizationRoles":["systemAdmin"],"name":"create","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation updates the details, status, or summary of an existing deployment, rollback, hotfix, or configuration change log in the storyfield_ai_deployment_logs table. Identified by deploymentLogId, the API allows modification of fields such as status, summary, or resolution note for improved traceability and operational record-keeping during incident lifecycle management.","path":"/storyfieldAi/systemAdmin/deploymentLogs/{deploymentLogId}","method":"put","summary":"Update an existing deployment/rollback event log entry by deploymentLogId (storyfield_ai_deployment_logs)","description":"This API operation is for system administrators to modify an existing deployment, rollback, or related operational event record in the deployment logs table. By specifying deploymentLogId, admins may update fields such as the operational status (e.g., in-progress, failed, success), deployment summary, or add a resolution note. This supports complete incident lifecycle documentation for compliance and troubleshooting audits.\n\nOnly users with systemAdmin privileges may update log entries. All updates are tracked for audit, change history, and security purposes. Error handling includes protection of required fields, uniqueness of deployment_label within environment, and referential constraints. Use in conjunction with record GET/PATCH endpoints for review.","parameters":[{"name":"deploymentLogId","description":"The unique identifier (UUID) for the deployment or rollback event log to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Patchable fields for the deployment/rollback event log, such as status, summary, or resolution note.","typeName":"IStoryfieldAiDeploymentLog.IUpdate"},"responseBody":{"description":"The updated deployment/rollback event log record with all changes applied.","typeName":"IStoryfieldAiDeploymentLog"},"authorizationRoles":["systemAdmin"],"name":"update","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation performs a hard delete of a deployment log record from the storyfield_ai_deployment_logs table. This is used by system administrators to remove deployment or rollback event traces, such as those introduced by erroneous releases or compliance-mandated purges. The operation completely removes the selected deployment log, as indicated by the deploymentLogId value, from persistent storage. Audit trail and compliance tracking are required for all deletion actions initiated by administrators.","description":"This API endpoint allows system administrators to permanently remove a deployment log record from the database. Its primary purpose is to enforce compliance with data retention policies or correct operational errors related to service deployments. The deployment log identified by deploymentLogId will be deleted entirely, making the information irrecoverable.\n\nOnly administrators with the \"systemAdmin\" role are authorized to execute this operation. All removals must be logged for audit and compliance purposes, guaranteeing traceability of administrative actions. Attempts to delete a nonexistent or unauthorized log will return clear error messages, as determined by business rules.\n\nThis operation relates to the storyfield_ai_deployment_logs Prisma model, which stores deployment, rollback, and hotfix event data with status, initiator, environment, and summary information. There are no soft-deletion semantics: all removed records are hard deleted. Related administrative records should also be reviewed for downstream impacts.","summary":"Permanently delete a deployment log record (storyfield_ai_deployment_logs table).","parameters":[{"name":"deploymentLogId","description":"Unique identifier of the deployment log to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["systemAdmin"],"name":"erase","path":"/storyfieldAi/systemAdmin/deploymentLogs/{deploymentLogId}","method":"delete","authorizationRole":"systemAdmin","authorizationType":null},{"specification":"This operation allows system administrators to perform advanced filtering, search, and pagination over the service-wide alert events recorded in the storyfield_ai_service_alerts table. It enables querying by alert type, status (resolved/unresolved), environment, or alert code. The operation returns a paginated list of service alerts, suitable for monitoring dashboard presentation, compliance review, or incident/health status analysis. Supports complex search criteria via structured request body.","description":"Retrieve a paginated and filterable list of service alerts from the system alert and event notification log. This operation supports complex search parameters including filtering by alert type (error, warning, info, quota, incident, recovery), event environment (production, staging, etc.), resolution status, and time window.\n\nThe response contains summary information for each alert, facilitating rapid triage by platform administrators and allowing detailed drill-down into specific service events. Authorization is strictly limited to users with the \"systemAdmin\" role. Pagination, sorting, and advanced filtering capabilities are supported by the request body schema, ensuring rapid and targeted access to incidents, warnings, or informational events.\n\nThis API is based on the storyfield_ai_service_alerts Prisma model, which tracks all major service system events, including errors, warnings, quota breaches, automated recovery, and incident reports for system reliability.","summary":"List, search, and paginate service alert event records (storyfield_ai_service_alerts table).","parameters":[],"requestBody":{"description":"Filtering, search, and pagination criteria for service alerts index/search.","typeName":"IStoryfieldAiServiceAlert.IRequest"},"responseBody":{"description":"Paginated list of service alert summary records matching search criteria.","typeName":"IPageIStoryfieldAiServiceAlert.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/storyfieldAi/systemAdmin/serviceAlerts","method":"patch"},{"specification":"This operation allows system administrators to retrieve detailed information for a single service alert event from the storyfield_ai_service_alerts table, as identified by the unique serviceAlertId. Used for administrative review, incident response, and resolution tracking. Returns all available attributes of the alert including type, code, environment, resolution status, timestamps, and resolution note when applicable.","description":"Fetch detailed information about a specific service alert event by unique ID for inspection, incident review, or compliance documentation. This API only grants access to users with the \"systemAdmin\" role, supporting full retrieval of all alert metadata including alert type (error, warning, info, incident), alert code, descriptive content, target environment, resolution/closure status, and associated resolution notes.\n\nThis operation enforces strict access control, ensuring no sensitive operational data is exposed to non-authorized users. Internally, it queries the storyfield_ai_service_alerts table, returning all fields specified for alert diagnostics and administrative action tracking. If the requested alert does not exist, a well-defined error message is returned according to business logic.","summary":"Get details for a service alert event record by ID (storyfield_ai_service_alerts table).","parameters":[{"name":"serviceAlertId","description":"Unique identifier of the service alert event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested service alert event record.","typeName":"IStoryfieldAiServiceAlert"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/storyfieldAi/systemAdmin/serviceAlerts/{serviceAlertId}","method":"get"},{"specification":"This operation allows system administrators to create a new service alert record in the storyfield_ai_service_alerts table. Used for manually inserting event notifications, operational warnings, quota limit triggers, or system incident records. All fields required for business context, such as alert type, code, environment, and content, must be provided in the request body and are permanently attached to the record for compliance and auditability.","description":"Create a new service alert or technical/system event record for monitoring, incident response, or compliance tracking. This API endpoint is restricted to system administrators, requiring all mandatory information about the alert (e.g., alertType, alertCode, content, environment) to be supplied in the request body.\n\nAll new alerts are immediately available for search, dashboard display, and operational review. This operation is closely aligned with the storyfield_ai_service_alerts Prisma schema. Required fields include the alert type (such as error, warning, info, incident, quota), a unique business or technical alert code, the human-readable content describing the event, the target environment (production, staging, etc.), and optional resolution notes if the alert represents a closed incident.\n\nInsertions are logged for audit and compliance. Validation is enforced for all mandatory fields, and only users with the \"systemAdmin\" role are permitted to create new alert/event records in the system.","summary":"Create a new service alert or technical event record (storyfield_ai_service_alerts table).","parameters":[],"requestBody":{"description":"Details for the new service alert/event to be created (type, code, content, environment, etc).","typeName":"IStoryfieldAiServiceAlert.ICreate"},"responseBody":{"description":"Full details of the newly created service alert/event record.","typeName":"IStoryfieldAiServiceAlert"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create","path":"/storyfieldAi/systemAdmin/serviceAlerts","method":"post"},{"specification":"This operation updates an existing service alert record in the storyfield_ai_service_alerts table. Service alerts are used for technical event, system health, or incident notification logging that is accessible to system administrators and backend support engineers. The operation allows systemAdmin users to modify an existing alert, updating fields such as alert_type, alert_code, content, environment, resolved status, and resolution_note. All changes are strictly tracked for audit and compliance.\n\nThe service alert entity tracks technical events and status messages, along with resolution state and history. The update operation supports altering the resolved status, resolution note, and other metadata, enabling admin users to document incident handling and resolution outcomes in the system's own alert log.\n\nSecurity is enforced: only systemAdmin users may perform updates. Attempts by non-admins must be denied with an authorization error and logged for review. All update actions must be audit-logged, and failure to provide valid field values returns input validation errors. Related operations include retrieval of specific alerts (GET) and deletion of alerts (DELETE), which may be linked for administrative tasks and monitoring workflows.\n\nIf the target record uses soft deletion, updating a deleted record must return an appropriate error indicating the alert is no longer active.","path":"/storyfieldAi/systemAdmin/serviceAlerts/{serviceAlertId}","method":"put","summary":"Update an existing service alert record in the storyfield_ai_service_alerts table.","description":"This API operation is responsible for updating a specific service alert in the storyfield_ai_service_alerts table, as referenced by the unique serviceAlertId path parameter (UUID).\n\nThe operation enables system administrators to edit various fields of an existing alert: alert_type (e.g., error, warning, info), alert_code (optional), content, environment (such as production or staging), resolved (boolean indicating whether the issue has been addressed), and resolution_note (optional note for closure). Changing the \"resolved\" status is a typical workflow for this endpoint, as resolved alerts can be marked as closed with a note about the resolution steps.\n\nTo maintain system integrity, only users with the \"systemAdmin\" role are authorized to invoke this operation. Requests by unauthorized users must be rejected and logged.\n\nThe operation is tightly coupled to the storyfield_ai_service_alerts entity, following its schema for updatable fields. All changes should be fully validated—e.g., only allowable values for alert_type, sanitized text for content, and corresponding notes where appropriate. Each update must be subject to audit logging as required by compliance policies.\n\nThis operation may be used in conjunction with alert listing (PATCH /serviceAlerts) and deletion (DELETE /serviceAlerts/{serviceAlertId}), forming part of the administrative alert lifecycle management capabilities. If the specified alert does not exist or has been previously deleted (soft delete), the system should return a not-found or conflict error status as appropriate.","parameters":[{"name":"serviceAlertId","description":"Unique identifier of the service alert to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the service alert record. Includes mutable attributes such as alert_type, alert_code, content, environment, resolved, and resolution_note.","typeName":"IStoryfieldAiServiceAlert.IUpdate"},"responseBody":{"description":"The updated service alert record with the latest values.","typeName":"IStoryfieldAiServiceAlert"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"This operation permanently removes (soft delete) a service alert record from the storyfield_ai_service_alerts table. Service alerts track technical event notifications, incidents, or administrative messages pertinent to system operation health. Only system administrators should be authorized for this operation.\n\nSoft deletion is employed for audit/compliance: the deleted_at field is updated with the current timestamp, preserving historical alert records while making them inaccessible to ordinary queries. Deletion actions must be logged for investigation and system audit.\n\nAttempts to delete a non-existent or already deleted alert must return an appropriate error. This operation is related to service alert listing, creation, updating, and is part of the system health management workflow for admins.","path":"/storyfieldAi/systemAdmin/serviceAlerts/{serviceAlertId}","method":"delete","summary":"Soft delete (logical removal) a specific service alert record for system administration.","description":"This API operation implements soft deletion of a specific service alert in the storyfield_ai_service_alerts table, identified by the unique serviceAlertId provided as a path parameter.\n\nOnly system administrators are permitted to delete service alerts. The operation sets the deleted_at timestamp, marking the alert as inactive for business and reporting purposes, but retaining it for compliance and future audit. It does not physically erase the record.\n\nLogic includes verifying the existence and non-deleted status of the target alert. If the alert does not exist or has already been deleted, an appropriate not-found or conflict error is returned, and such attempts are logged for administrative review. This operation is integral to lifecycle management of health/incident alerts for the StoryField AI system.\n\nAll successful and failed deletion attempts must be audit logged, in accordance with policy. Related operations include alert creation, updating, and retrieval, particularly in cases of incident investigation or administrative review.","parameters":[{"name":"serviceAlertId","description":"Unique identifier of the service alert to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"}],"components":{"authorization":[{"name":"authenticatedUser","description":"A registered user who has successfully authenticated via a valid access token issued by the Spring backend. Can generate fairy tales, request TTS/dialect processing, and access their own generated content. Access to all core features is strictly gated by authentication.","kind":"member"},{"name":"systemAdmin","description":"An administrative user responsible for overseeing system health, managing tokens and access control, monitoring abuse, and maintaining integrations with external AI services. Has elevated permissions including user management and viewing audit logs.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIStoryfieldAiAuthenticatedusers.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiAuthenticatedusers.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiSystemAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiSystemAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiStory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiStory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiStoryPage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiStoryPage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiStoryImage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiStoryImage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiTtsResult.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiTtsResult.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiTokenSession.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiTokenSession.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiTokenRevocation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiTokenRevocation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiAuthAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiAuthAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiIntegrationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiIntegrationLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiS3UploadHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiS3UploadHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiExternalApiFailure.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiExternalApiFailure.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiSystemPolicy.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiSystemPolicy.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiEnvSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiEnvSetting"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiDeploymentLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiDeploymentLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIStoryfieldAiServiceAlert.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IStoryfieldAiServiceAlert.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IStoryfieldAiAuthenticatedUser.ICreate":{"type":"object","properties":{"external_user_id":{"type":"string","description":"External user ID issued by the Spring backend for this authenticated user. This is a unique, immutable identifier mapping to the externally-verified identity. Used for onboarding and audit.\n\nReference: storyfield_ai_authenticatedusers.external_user_id (Prisma schema)."},"email":{"type":"string","description":"Unique business email address of the authenticated user. Required to match Spring registration and used as main user notification and session validation field.\n\nReference: storyfield_ai_authenticatedusers.email (Prisma schema)."},"actor_type":{"type":"string","const":"authenticatedUser","description":"Fixed literal value: 'authenticatedUser'. Role token for onboarding, non-configurable. Used for role scoping, joining this platform only as an externally-verified, standard member.\n\nReference: storyfield_ai_authenticatedusers.actor_type (Prisma schema)."}},"required":["external_user_id","email","actor_type"],"description":"Payload for registering a new authenticated user (storyfield_ai_authenticatedusers). All properties must be present and valid according to onboarding policy. No password or local secret accepted. Actor type is enforced as 'authenticatedUser' at onboarding. Email and external_user_id must each be unique. Traceability, compliance and role mapping are business goals."},"IStoryfieldAiAuthenticatedUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this authenticated user. Must be standard UUID v4 string. Used for internal linking and business data ownership.\n\nReference: storyfield_ai_authenticatedusers.id (Prisma schema)."},"external_user_id":{"type":"string","description":"External Spring/backend verified user ID. Used for SSO mapping and external audit trace.\n\nReference: storyfield_ai_authenticatedusers.external_user_id (Prisma schema)."},"email":{"type":"string","description":"User business-unique email address for notifications and session mapping.\n\nReference: storyfield_ai_authenticatedusers.email (Prisma schema)."},"actor_type":{"type":"string","const":"authenticatedUser","description":"Role type, always 'authenticatedUser' here for registration, login, refresh.\n\nReference: storyfield_ai_authenticatedusers.actor_type (Prisma schema)."},"created_at":{"type":"string","format":"date-time","description":"Datetime string (ISO 8601) when registration occurred. Used for compliance audit.\n\nReference: storyfield_ai_authenticatedusers.created_at (Prisma schema)."},"updated_at":{"type":"string","format":"date-time","description":"Datetime string (ISO 8601) for latest profile update. Used for traceability and historical rollback.\n\nReference: storyfield_ai_authenticatedusers.updated_at (Prisma schema)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","external_user_id","email","actor_type","created_at","updated_at","token"],"description":"Standard response envelope for authorized registration/login/refresh actions. Bundles full user identity (as registered), role, onboarding/audit datetimes, and the current authorization JWT token contract as issued by the business authentication service. Never contains password, secret or locally-credentialed data. Always maps to externally-verified, onboarding-compliant user."},"IStoryfieldAiAuthenticatedUser.ILogin":{"type":"object","properties":{"external_user_id":{"type":"string","description":"External user ID (from Spring/backend). Must match previously-registered, externally-verified user identity. Used for session inception, SSO, audit trail, and credential binding. \n\nReference: storyfield_ai_authenticatedusers.external_user_id (Prisma schema)."},"email":{"type":"string","description":"Unique email (as registered in both Spring/backend SSO and local business system). Required to authenticate this user, for session context and compliance mapping. May be rechecked at every login event.\n\nReference: storyfield_ai_authenticatedusers.email (Prisma schema)."}},"required":["external_user_id","email"],"description":"Login Request: contract for login of previously-registered authenticatedUser via externally-issued unique ID and business email. Passwords, OOB secrets, or two-factor codes are never accepted in this API; all authentication is federated and controlled solely by business onboarding workflows with SSO tracing. Uniqueness enforced by registration schema."},"IStoryfieldAiAuthenticatedUser.IRefresh":{"type":"object","properties":{},"required":[],"description":"Refresh Request: contract for requesting an updated session/JWT for an already-authenticatedUser. Body is always empty; token/refresh context always supplied via Authorization header only. No locally credentialed, personally identifiable, or audit-sensitive input required. Only valid for ongoing, unrevoked sessions as recognized by current JWT logic."},"IStoryfieldAiSystemAdmin.IJoin":{"type":"object","properties":{"external_admin_id":{"type":"string","description":"External admin ID as provided by the Spring/JWT backend. Uniquely identifies a system administrator for credential mapping and traceability. This field is required at registration to securely onboard new admin accounts."},"email":{"type":"string","format":"email","description":"Administrative email address, unique per system admin, used for login, audit, and policy notification. Must match the business requirements for admin identification and communication."},"actor_type":{"type":"string","const":"systemAdmin","description":"Role descriptor and discriminator field for the system administrator. Should always be set to 'systemAdmin'. This property may be omitted from request body if system defaults insert it, but should be included for explicitness in API contracts."}},"required":["external_admin_id","email"],"description":"Request schema for onboarding a new system administrator into StoryField AI (storyfield_ai_systemadmins). This payload includes an externally issued admin identifier, a unique business email, and the actor type (always 'systemAdmin'). No password is required. This schema directly corresponds to administrative account registration business logic and database constraints."},"IStoryfieldAiSystemAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique system-wide identifier for the system admin account, matching the primary key in storyfield_ai_systemadmins."},"external_admin_id":{"type":"string","description":"External admin ID, mapped from Spring/JWT backend. Uniquely identifies an administrator for credential mapping and traceability.\n\nCorresponds to the `external_admin_id` column in `storyfield_ai_systemadmins`. Holds the external identity unique across the business ecosystem for SSO and policy linkage."},"email":{"type":"string","format":"email","description":"Business email address for the system admin, unique for operator identification and communication."},"actor_type":{"type":"string","const":"systemAdmin","description":"Discriminator and business role for the administrator actor. Always set to 'systemAdmin'."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO8601 date and time of the last successful system admin login. Null if never logged in."},"admin_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional administrative notes, business context, or compliance history for this account. Null if empty. Provided for transparent privileged account governance."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial record creation. Used for audit trails and compliance timelines.\n\nFrom `created_at` in table, set at admin account inception, immutable and central for investigations or operational metrics."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last information update or privilege change for this account.\n\nTaken from `updated_at` in the table; updated at each modification, used for incremental tracking and compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of logical deletion (soft delete) if admin is removed from current oversight, null if active.\n\nMaps to `deleted_at`. Used for retention, temporary privilege suspension, and GDPR compliance."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","external_admin_id","email","actor_type","created_at","updated_at","token"],"description":"Standard response contract for system administrator authentication and registration. Provides admin identity details along with issued JWT access/refresh tokens. Fulfills compliance, audit, and operator traceability requirements. Used for join, login, and refresh flows for systemAdmin actors."},"IStoryfieldAiSystemAdmin.ILogin":{"type":"object","properties":{"external_admin_id":{"type":"string","description":"External admin ID as issued by Spring/JWT backend. Used to securely identify the system administrator during login. Must map to an existing admin account in the system."},"email":{"type":"string","format":"email","description":"Administrative email address, unique per system admin, for business and communication traceability. Required for login. Must match the registered email for the admin."}},"required":["external_admin_id","email"],"description":"Login request schema for authenticating a system administrator. Requires two-factor identification: external_admin_id (mapped from Spring/JWT backend) and administrative email. Password is managed exclusively by external system/JWT provider, never directly handled by API. Used solely for privileged actor verification."},"IStoryfieldAiSystemAdmin.IRefresh":{"type":"object","properties":{},"required":[],"description":"Refresh request schema for system administrator authentication. This should always be an empty object—the refresh operation uses the Authorization header and session token for validation and does not require any body properties. Schema-compliant clients must send either an empty object or omit the body entirely."},"IStoryfieldAiAuthenticatedusers.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Email of the authenticated user to filter by. Must match a registered email address in the system."},"external_user_id":{"type":"string","description":"External unique user identifier from the Spring backend. Used for filtering by mapped external identity."},"actor_type":{"type":"string","description":"Role marker for filtering (should be always 'authenticatedUser' for this context)."},"created_from":{"type":"string","format":"date-time","description":"Filter for users created at or after this date (ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"Filter for users created at or before this date (ISO 8601)."},"updated_from":{"type":"string","format":"date-time","description":"Filter for users updated at or after this date."},"updated_to":{"type":"string","format":"date-time","description":"Filter for users updated at or before this date."},"deleted":{"type":"boolean","description":"If true, include users marked as soft deleted (deleted_at not null). If false or omitted, only active users returned."},"page":{"type":"integer","description":"Page number for pagination (starts from 1, default is 1)."},"limit":{"type":"integer","description":"Number of records per page (default is 20, max 100)."},"sort":{"type":"string","description":"Field by which to sort results (email, created_at, etc.)."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction (ascending or descending)."},{"const":"desc","description":"Sort order direction (ascending or descending)."}],"description":"Sort order direction (ascending or descending)."}},"description":"Search, filter, and pagination parameters when querying Storyfield AI authenticated users. All fields are optional and used to build flexible query logic for administrative dashboards and audit workflows.","required":[]},"IStoryfieldAiAuthenticatedusers":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"System primary key of the authenticated user (UUID)."},"external_user_id":{"type":"string","description":"The unique external user identifier assigned by the Spring backend. Used to correlate to external identity/auth and for all downstream content ownership and audit."},"email":{"type":"string","description":"Registered email address belonging to the authenticated user. Must be unique across all user accounts and is the canonical channel for business notifications and account-related operations."},"actor_type":{"type":"string","description":"Role descriptor. For standard end-users, always set to 'authenticatedUser'. Defines access rights and context for downstream authorization."},"created_at":{"type":"string","format":"date-time","description":"Datetime the user account was created (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Datetime when the user's record was last updated (ISO 8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (ISO 8601) of soft deletion for the user account. If null, account is active; if set, account is logically disabled according to compliance/audit policy."}},"required":["id","external_user_id","email","actor_type","created_at","updated_at"],"description":"Detailed record for a single Storyfield AI authenticated user as stored in the service's registry. Contains all relevant identity, role, temporal, and compliance fields mapped from both the external Spring identity and internal audit lifecycle. Used by system administrators for account review, trace, and GDPR compliance reporting. Does not include sensitive credentials or password fields."},"IStoryfieldAiAuthenticatedusers.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Change email address for the authenticated user. Must remain unique for all users and match required business format. Only allowed for admin workflows."},"actor_type":{"type":"string","description":"Update the actor_type. Should remain 'authenticatedUser' for identity integrity; changing is only possible with elevated business permissions."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete or restore the user. When set to a date-time, disables login and system functions for the account; when null, account is restored. Only systemAdmin should be allowed to change this field."}},"description":"Mutable fields for updating a Storyfield AI authenticated user profile. Only allows modifiable fields per business and compliance policy. External_user_id, id, created_at, and updated_at are immutable for updates.","required":[]},"IStoryfieldAiSystemAdmin.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the system administrator, for filtering or search."},"external_admin_id":{"type":"string","description":"External system admin identifier from the Spring backend, for filtering mapped identity."},"actor_type":{"type":"string","description":"Role type for filtering (should always be 'systemAdmin' here)."},"created_from":{"type":"string","format":"date-time","description":"Filter for system admins created at or after this date."},"created_to":{"type":"string","format":"date-time","description":"Filter for system admins created at or before this date."},"updated_from":{"type":"string","format":"date-time","description":"Filter for admins with updates on or after this date."},"updated_to":{"type":"string","format":"date-time","description":"Filter for admins with updates on or before this date."},"deleted":{"type":"boolean","description":"If true, include soft-deleted admins; if false or omitted, only active accounts."},"last_login_from":{"type":"string","format":"date-time","description":"Search for system admins whose last login was at or after this time."},"last_login_to":{"type":"string","format":"date-time","description":"Search for admins whose last login was at or before this time."},"page":{"type":"integer","description":"Page number for pagination results (default 1)."},"limit":{"type":"integer","description":"Number of records per page (default 20, max 100)."},"sort":{"type":"string","description":"Field for ordering results (email, created_at, etc.)."},"order":{"oneOf":[{"const":"asc","description":"Sort order (ascending or descending)."},{"const":"desc","description":"Sort order (ascending or descending)."}],"description":"Sort order (ascending or descending)."}},"description":"Structured request body for searching, filtering, and paginating Storyfield AI system administrator records in the admin panel or compliance audit flows. All fields are optional and layered on top of base admin registry logic.","required":[]},"IStoryfieldAiSystemAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the system administrator account.\n\nThis property directly maps to the `id` column in the `storyfield_ai_systemadmins` table. It is a UUID generated by the system and used for entity relationships, traceability, and audit logs."},"external_admin_id":{"type":"string","description":"External admin ID, mapped from Spring/JWT backend. Uniquely identifies an administrator for credential mapping and traceability.\n\nCorresponds to the `external_admin_id` column in `storyfield_ai_systemadmins`. Holds the external identity unique across the business ecosystem for SSO and policy linkage."},"email":{"type":"string","format":"email","description":"Administrative email address, unique per admin. Used for login/audit/policy notification.\n\nReflects the `email` field in `storyfield_ai_systemadmins`. Email must correspond to the external identity and is used for communication and compliance notifications."},"actor_type":{"type":"string","description":"Role descriptor for actor type; always `systemAdmin` for this model.\n\nDirectly sourced from `actor_type` in the table, this value defines the privilege/role context in the system and enforcement policies."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of the admin's last successful login into the system.\n\nCorrelates to `last_login_at` column, updated by the business login controller for privilege and compliance audit."},"admin_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes regarding admin privileges, actions, or incident response logs.\n\nMaps to `admin_notes` for compliance or operational context. Not required but useful for privileged admin history and incident documentation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of initial record creation. Used for audit trails and compliance timelines.\n\nFrom `created_at` in table, set at admin account inception, immutable and central for investigations or operational metrics."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last information update or privilege change for this account.\n\nTaken from `updated_at` in the table; updated at each modification, used for incremental tracking and compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of logical deletion (soft delete) if admin is removed from current oversight, null if active.\n\nMaps to `deleted_at`. Used for retention, temporary privilege suspension, and GDPR compliance."}},"required":["id","external_admin_id","email","actor_type","created_at","updated_at"],"description":"System administrator account entity from the `storyfield_ai_systemadmins` table.\n\nThis schema is a definitive representation of an admin actor within StoryField AI, mapped directly to the underlying database model. It provides compliance, operational visibility, and role management for all business workflows involving administrator privilege. Sensitive fields such as authentication tokens or internal passwords are never exposed. All lifecycle fields are included for traceability and investigation."},"IStoryfieldAiSystemAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrative email address. Unique and changeable under business rules.\n\nModifies the `email` field, subject to uniqueness and format constraints. Audited for change history."},"actor_type":{"type":"string","description":"Update to role/privilege descriptor. In this table, typically remains `systemAdmin` but can future-proof for privilege classes.\n\nUpdates the `actor_type` field for flexible privilege expansion."},"admin_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative or compliance notes for incident tracking, privilege changes, or context marking. Optional in updates.\n\nMaps to the `admin_notes` field; supports operational documentation and organizational context."}},"required":[],"description":"DTO for updating permissible fields of a system administrator record in StoryField AI.\n\nFields are validated against uniqueness rules and compliance policy; only privileged business users (systemAdmin) are permitted to invoke this contract. Audit fields and ownership are immutable here."},"IStoryfieldAiStory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number to consume; for pagination."},"limit":{"type":"integer","description":"Page size (number of records per page) for pagination."},"title":{"type":"string","description":"Partial or exact title of story, for substring search/filter in index view."},"language":{"type":"string","description":"Language/dialect code or label for story search (e.g., 'ko-KR', 'Gyeongsang').\n\nDirectly filters stories by the `language` attribute."},"created_at_from":{"type":"string","format":"date-time","description":"Start of search time window in ISO 8601 for story `created_at` field."},"created_at_to":{"type":"string","format":"date-time","description":"End boundary (inclusive) of time window in ISO 8601 for story `created_at`."},"updated_at_from":{"type":"string","format":"date-time","description":"Start of window for `updated_at` filter, for delta/compliance use cases."},"updated_at_to":{"type":"string","format":"date-time","description":"End boundary for `updated_at` window filter."},"deleted":{"type":"boolean","description":"Whether to return soft-deleted (deleted_at != null) stories or not."}},"required":[],"description":"Filtering, pagination, and search DTO for AI-generated story index endpoints.\n\nDefines search filters for story listing, supporting business dashboard audit and user portals. Maps directly to the Prisma model. Optional; presence of fields modifies the query behavior for flexible business requirements."},"IStoryfieldAiStory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key: unique story identifier, as assigned in `storyfield_ai_stories` table. Used for entity relationships, traceability, and business logic linkage."},"storyfield_ai_authenticateduser_id":{"type":"string","format":"uuid","description":"Foreign key for story owner, referencing authenticated user record in `storyfield_ai_authenticatedusers` table.\n\nEnforces ownership and access control in StoryField AI; required for all authenticated business operations involving user-generated content."},"title":{"type":"string","description":"Title of the story, either user-provided or AI-generated.\n\nDirectly taken from the `title` column; required for content browsing and compliance audit."},"main_plot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The main plot or summary of the story provided/selected by the user. Used as a core input for AI generation.\n\nSourced from `main_plot`, this is nullable for user/AI flow flexibility."},"language":{"type":"string","description":"Primary language or dialect in which the story is written (e.g., 'ko-KR', 'Gyeongsang').\n\nMaps to the `language` column, required for localization, dialect transformation, and moderation."},"created_at":{"type":"string","format":"date-time","description":"Datetime at which the story was created, for audit, compliance, and ordering.\n\nDirectly reflects `created_at` in schema, used for business and regulatory reporting."},"updated_at":{"type":"string","format":"date-time","description":"Datetime of last update for the story, for trace and incremental compliance audits.\n\nFrom `updated_at` in table."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for story soft deletion (if deactivated/removed). Null if the story is active; set otherwise for GDPR/compliance audit.\n\nDirectly maps to `deleted_at` in the Prisma schema."}},"required":["id","storyfield_ai_authenticateduser_id","title","language","created_at","updated_at"],"description":"AI-generated fairy tale entity from the `storyfield_ai_stories` table in StoryField AI.\n\nThis object captures the core business record linking user identity to AI-generated story content, complete with all audit, compliance, and lifecycle fields. Content is always tied to a valid authenticated user and supports full trackability for content moderation, copyright, and operational management."},"IStoryfieldAiStory.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Title of the story as provided or generated by the user. This field must be unique per authenticated user. Cannot be empty, may contain Unicode characters, and should be relevant to the main plot or keywords supplied for story generation. Represents the primary label for each AI-generated story on the platform. Source: storyfield_ai_stories.title (Prisma)."},"main_plot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The main plot or summary for the story. This is the user's input describing the general theme, scenario, moral, or summary of the story to be generated. Optional. Used as the core prompt or inspiration for the AI. May be omitted for auto-generated plot cases. Source: storyfield_ai_stories.main_plot (Prisma)."},"language":{"type":"string","description":"Primary language or dialect option chosen for this story instance (e.g., 'ko', 'en', '경상도'). Must match a supported language/dialect code in the business domain. Required. Source: storyfield_ai_stories.language (Prisma)."}},"required":["title","language"],"description":"DTO for creating a new AI-generated story. Must specify the required business fields except ownership, id, or audit fields (those are set by the system or derived from authentication context). Based on storyfield_ai_stories Prisma schema.\n\n- 'title': Main display name for the story, must be unique per user.\n- 'main_plot': Optional summary or prompt for content generation.\n- 'language': Required; determines the story's language/dialect for text and TTS synthesis.\n\nSecurity Note: User/ownership fields (foreign keys) are not included; story is always owned by the authenticated principal issuing the request."},"IStoryfieldAiStory.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Updated title of the story. If provided, must remain unique for the same user. May be omitted to leave title unchanged. Sourced from storyfield_ai_stories.title (Prisma)."},"main_plot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated main plot or summary for the story. May be cleared by setting to null, or replaced with a new string. Linked to storyfield_ai_stories.main_plot (Prisma)."},"language":{"type":"string","description":"Updated language or dialect for the story. If provided, must match the list of supported language/dialect codes. Tied to storyfield_ai_stories.language (Prisma)."}},"required":[],"description":"Metadata fields permitted for updating a story: only mutable fields allowed. id/ownership is immutable; updated_at is handled by the system.\n\nAll properties are optional for partial update (PATCH semantic). If a property is omitted, its value is retained. Based on storyfield_ai_stories Prisma schema, business rules, and security requirements."},"IStoryfieldAiStoryPage.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination (starts from 1). Optional. If omitted, defaults to first page."},"limit":{"type":"integer","description":"Number of results per page (default: 15). Optional. Used for restricting result size for paging high-page-count stories."},"orderBy":{"oneOf":[{"const":"page_number","description":"Field to order results by. Optional. Must be one of: 'page_number', 'created_at', or 'updated_at'. Defaults to 'page_number'."},{"const":"created_at","description":"Field to order results by. Optional. Must be one of: 'page_number', 'created_at', or 'updated_at'. Defaults to 'page_number'."},{"const":"updated_at","description":"Field to order results by. Optional. Must be one of: 'page_number', 'created_at', or 'updated_at'. Defaults to 'page_number'."}],"description":"Field to order results by. Optional. Must be one of: 'page_number', 'created_at', or 'updated_at'. Defaults to 'page_number'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction. Must be 'asc' or 'desc'. Optional. When absent, defaults to 'asc'."},{"const":"desc","description":"Sort direction. Must be 'asc' or 'desc'. Optional. When absent, defaults to 'asc'."}],"description":"Sort direction. Must be 'asc' or 'desc'. Optional. When absent, defaults to 'asc'."},"search":{"type":"string","description":"Search keyword for fulltext filtering of story page content ('text' field). Optional. Allows users to search for a phrase, word, or thematic match across all pages within the story."},"showDeleted":{"type":"boolean","description":"Optional flag to include soft-deleted pages (deleted_at not null) in result set. Used only for admin/compliance flows."}},"required":[],"description":"Pagination, sorting, and search/filter criteria for listing story pages in the context of a given story. Follows standard business and compliance requirements:\n\n- 'page': number for pagination\n- 'limit': items per result set\n- 'orderBy': field to sort by (must be valid field)\n- 'order': sort direction\n- 'search': fulltext search for page text\n- 'showDeleted': if true, includes soft-deleted pages (admin only)\n\nAll parameters are optional. If omitted, default paging (page 1, limit 15) and ordering are used."},"IStoryfieldAiStoryPage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the story page (UUID). Set by the service on creation. Referenced by storyfield_ai_story_pages.id (Prisma)."},"storyfield_ai_story_id":{"type":"string","format":"uuid","description":"Foreign key to the parent story's ID (UUID). All pages must be associated with a valid story. Used for secure page lookup. Linked to storyfield_ai_story_pages.storyfield_ai_story_id (Prisma)."},"page_number":{"type":"integer","description":"0-based or 1-based sequential position of this page within the parent story. Ensures natural reading order and enables direct navigation. Must be positive and unique within story. From storyfield_ai_story_pages.page_number (Prisma)."},"text":{"type":"string","description":"Textual content of the story page. This field holds the generated or edited page narrative. Required. Maps to storyfield_ai_story_pages.text (Prisma)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the story page was created (ISO 8601 format). Used for audit trail and compliance. Originates from storyfield_ai_story_pages.created_at (Prisma)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to the page (ISO 8601 format). Used for change auditing and revision tracking. Maps to storyfield_ai_story_pages.updated_at (Prisma)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (ISO 8601); null if not soft-deleted. Enables content recovery, audit, and compliance workflows. From storyfield_ai_story_pages.deleted_at (Prisma); optional in output; always omitted or null for active pages."}},"required":["id","storyfield_ai_story_id","page_number","text","created_at","updated_at"],"description":"API-facing DTO for a single story page record, returning all business, audit, and compliance metadata. All fields are mapped directly to the storyfield_ai_story_pages Prisma model, following exact names for traceability and object-relational mapping. Used for both frontend detail and admin review flows.\n\n- id: Unique page record identifier (UUID).\n- storyfield_ai_story_id: Parent story (UUID).\n- page_number: Logical ordering/index (int).\n- text: Narrative content (string).\n- created_at/updated_at: Timestamps (ISO 8601).\n- deleted_at: Optional soft-deletion field for compliance/audit/trash flows."},"IStoryfieldAiStoryPage.ICreate":{"type":"object","properties":{"page_number":{"type":"integer","description":"The sequential page number within the story. Used for natural ordering and to determine the position of this page in the complete story. Must be an integer and positive. Sourced from the storyfield_ai_story_pages table. This property is required to ensure correct sorting and referencing in multi-page stories."},"text":{"type":"string","description":"Textual content for the page. This is the actual AI-generated or user-supplied story content. It must be a string value and adhere to any length limits as set by the application. This property represents the visible story data on the page and is core to the storytelling content."}},"required":["page_number","text"],"description":"Payload to create a new page for a fairy tale story (storyfield_ai_story_pages table). Includes the required page number for ordering and the story content as text. Used during the addition of new pages to an AI-generated story. Sourced from the Prisma model's required fields."},"IStoryfieldAiStoryPage.IUpdate":{"type":"object","properties":{"page_number":{"type":"integer","description":"Optional new page number to update the ordering/position of the story page in the complete story. This value adjusts the location of the page during later edits or reorganizations. It is always an integer (positive)."},"text":{"type":"string","description":"Optional update to the textual content of the page. This allows for corrections, editing, or regeneration of story content for this page. Leave absent if not changing."}},"required":[],"description":"Payload to update a story page (storyfield_ai_story_pages table). Only one or both fields may be supplied to partially update an existing page. Supports editing page order and text content. Sourced from the Prisma schema."},"IStoryfieldAiStoryImage.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Request page number for the paginated result set. This controls which page of results to return, supporting typical paging UI patterns. Optional for queries."},"limit":{"type":"integer","description":"Maximum number of records to return per page of results. Controls result size for paginated queries for story images."},"sort":{"type":"string","description":"Indicates the field on which to sort the story images in the search result (e.g., 'created_at'). Sorting field must refer to schema column."},"direction":{"oneOf":[{"const":"asc","description":"Defines sorting direction for returned results, can be 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort'."},{"const":"desc","description":"Defines sorting direction for returned results, can be 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort'."}],"description":"Defines sorting direction for returned results, can be 'asc' for ascending or 'desc' for descending. Used in conjunction with 'sort'."},"storyfield_ai_story_page_id":{"type":"string","description":"Optional filter to restrict results to images linked to a specific page (by page UUID). Must be a valid UUID string if supplied."},"description_contains":{"type":"string","description":"Filter for image result records where the description contains this substring. Useful for keyword search and accessibility filtering."},"created_at_from":{"type":"string","format":"date-time","description":"Filter for images with created_at timestamp equal to or after this value (inclusive). ISO 8601 date-time string."},"created_at_to":{"type":"string","format":"date-time","description":"Filter for images with created_at timestamp up to and including this value. Used for date range filtering. ISO 8601 format."}},"required":[],"description":"Query, filter, and pagination contract to list/search story images for a specific fairy tale story (storyfield_ai_story_images table). Used in API endpoints that return paginated and filtered lists of images."},"IStoryfieldAiStoryImage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the storyfield_ai_story_images record. Unique identifier for the image entry. Sourced from the Prisma model, this property ensures relational and access accuracy in business flows."},"storyfield_ai_story_id":{"type":"string","format":"uuid","description":"Reference to the parent AI-generated story (storyfield_ai_stories.id). This is a required foreign key, always present, linking the image to its owner story for all list, detail, and business logic operations."},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the child page (storyfield_ai_story_pages.id) if the image is associated with a specific page. Nullable; if omitted or null, the image belongs to the overall story and not to a particular page. Used for positioning images within the correct context inside a story."},"image_uri":{"type":"string","description":"URI to the actual image resource. Should be a complete S3 or storage location. Referenced by readers/editors and accessible as an external resource via pre-signed URL, never as a raw file."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional alt text or accessibility description for the image. Used to facilitate screen-reader usability, search indexing, or accessibility compliance. Nullable field; can be omitted if not available."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the image record was created. Used for ordering, audit, and compliance reporting. Always set on creation and never NULL in valid records."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this image record. Required for update tracking and business audit trails, always present in non-deleted records."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If soft-deleted, this field holds the time at which the image was logically removed or hidden from general listing. Nullable. When not null, indicates the image is soft-deleted and is excluded from standard API/UX flows."}},"required":["id","storyfield_ai_story_id","image_uri","created_at","updated_at"],"description":"Resource schema for a story image linked to an AI-generated story or story page (storyfield_ai_story_images table). Includes metadata such as S3 URI, image description, audit fields, and relational foreign keys, with documentation referencing the relevant Prisma schema columns."},"IStoryfieldAiStoryImage.ICreate":{"type":"object","properties":{"storyfield_ai_story_id":{"type":"string","format":"uuid","description":"Parent story's UUID. Must refer to an existing story record. Used to establish business context and ensure the image is attached to the correct AI fairy tale. Always required and validated upon creation. Value is a canonical UUID string, e.g., \"123e4567-e89b-12d3-a456-426614174000\".\n\nReferenced from original Prisma schema: storyfield_ai_story_images.storyfield_ai_story_id"},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to a story page within the parent story. If the image is associated with a specific page, provide the page's UUID; otherwise, use null for a story-wide illustration. Enables page-level illustration support and navigation. Value is a canonical UUID string or null.\n\nReferenced from original Prisma schema: storyfield_ai_story_images.storyfield_ai_story_page_id"},"image_uri":{"type":"string","maxLength":80000,"description":"URI (generally an S3 pre-signed URL or file location) for the image associated with the story or page. This property governs where the image is retrieved or rendered from—must be a valid URI (HTTPS recommended for S3). Example: \"https://bucket.s3.amazonaws.com/path/to/image.png\". Length restricted per underlying business schema.\n\nReferenced from original Prisma schema: storyfield_ai_story_images.image_uri"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive text, alt tag, or accessibility annotation for the image. Aids in accessibility compliance, search, and non-visual rendering. Freeform text, can be null if unneeded. Max length defined by schema (string type).\n\nReferenced from original Prisma schema: storyfield_ai_story_images.description"}},"required":["storyfield_ai_story_id","image_uri"],"description":"Image upload DTO for attaching an illustration to a fairy tale story. Used to insert a new record in storyfield_ai_story_images. Required fields are story ID and image URI. Optionally include the page ID (for page illustrations) and a description (for accessibility or search). Respects business and compliance requirements for S3 URI handling and page linkage.\n\nMapped from request body of: IStoryfieldAiStoryImage.ICreate"},"IStoryfieldAiStoryImage.IUpdate":{"type":"object","properties":{"image_uri":{"type":"string","maxLength":80000,"description":"(Optional) New URI for the image. Allows replacing the S3 file or re-associating an illustration with a different image file. Must be a valid URI string and conform to business file requirements. Maximum length is 80000 characters as defined in schema.\n\nReferenced from original Prisma schema: storyfield_ai_story_images.image_uri."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) New description, alt text, or annotation for the image. This field can be used to update accessibility labels or provide improved descriptive context for the image. Freeform text compliant with string/biz rules."}},"required":[],"description":"DTO for updating existing story image metadata (image URI, description). Allows patching file association or accessibility text. All properties optional; must provide at least one field per API business rule. Based on business logic and request context.\n\nMapped from request body of: IStoryfieldAiStoryImage.IUpdate"},"IStoryfieldAiTtsResult.IRequest":{"type":"object","properties":{"dialect":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional dialect filter for TTS results—e.g., \"standard\", \"gyeongsang\", \"jeolla\". Used for searching or listing TTS outputs in specific language options. Set to null to query all dialects. Mapped from: IStoryfieldAiTtsResult.IRequest.dialect."},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional page filter for per-page TTS results. Setting this property limits query to a specific story page; use null for story-wide TTS result listing. Ensures precise filtering for user playback/view operations."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full-text search term for filtering TTS results by source text. Allows users/admins to find TTS audio associated with prompts or text matching the specified value. If not provided, no text filtering is performed."},"page":{"type":"integer","description":"Page number for pagination, 1-based index. Ensures efficient retrieval and UI display of TTS results. Default behavior is business-defined."},"limit":{"type":"integer","description":"Maximum number of results per page for pagination. For business and performance tuning, standardize to 10, 20, or other platform default."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort field (e.g., \"created_at\", \"dialect\"). Allows client-side specification of sort key for custom UI or review workflows. Null for default system ordering."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction: \"asc\" for ascending, \"desc\" for descending order. Used with the sort field for user/admin control of listing order. Only permitted values are \"asc\" or \"desc\". System default if not set is implementation-defined."},{"const":"desc","description":"Sort direction: \"asc\" for ascending, \"desc\" for descending order. Used with the sort field for user/admin control of listing order. Only permitted values are \"asc\" or \"desc\". System default if not set is implementation-defined."}],"description":"Sort direction: \"asc\" for ascending, \"desc\" for descending order. Used with the sort field for user/admin control of listing order. Only permitted values are \"asc\" or \"desc\". System default if not set is implementation-defined."}},"required":[],"description":"Search and filter options for retrieving TTS results associated with a story in paginated fashion. Fields allow dialect/page filtering, full-text search, custom sorting, and page/limit control."},"IStoryfieldAiTtsResult":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the TTS result. Unique business identifier for reference and audit. Generated by system upon creation. Example: \"e3fad8bc-9e48-4c0a-91ea-0a07c1fa4e27\"."},"storyfield_ai_story_id":{"type":"string","format":"uuid","description":"Reference to parent AI-generated story (storyfield_ai_stories.id). Establishes business/data relationship for the TTS result and ensures linkage to story ownership and compliance traceability.\n\nMapped from field: storyfield_ai_tts_results.storyfield_ai_story_id"},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to associated page if result is per-page. Can be null for TTS results covering whole story. Business logic uses this to relate narration to individual pages or global story. Canonical UUID or null."},"tts_audio_uri":{"type":"string","maxLength":80000,"description":"URI (generally S3 pre-signed URL) for retrieved/generated TTS audio file. Always required for playback, download, or UI preview. Must be a valid string URI and not exceed defined max length.\n\nLinked to: storyfield_ai_tts_results.tts_audio_uri"},"source_text":{"type":"string","description":"Text input that resulted in TTS synthesis. Used for display, review, and compliance. May be user-supplied or business-generated. Referenced from: storyfield_ai_tts_results.source_text"},"dialect":{"type":"string","description":"Language or dialect string for the generated audio (e.g., \"standard\", \"gyeongsang\", etc.). Used for filtering, search, and replay operations. Maps to: storyfield_ai_tts_results.dialect."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) indicating when the TTS result was generated. Used for sort/order, compliance, audit. Example: \"2025-01-15T15:46:09Z\". Sourced from: storyfield_ai_tts_results.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last modification to this TTS result (ISO 8601). Changes on update/regeneration. Used in business for status/auditing. Sourced from: storyfield_ai_tts_results.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp if the TTS result was logically deleted. Null if active/visible. For business audit/property, system triggers, and compliance review. Mapped from: storyfield_ai_tts_results.deleted_at."}},"required":["id","storyfield_ai_story_id","tts_audio_uri","source_text","dialect","created_at","updated_at"],"description":"Descriptive schema for business representation and retrieval of a single TTS (Text-to-Speech) result for AI-generated fairy tales. All audit/traceability/compliance fields included.\n\nDrawn directly from engine table: storyfield_ai_tts_results and mapped to platform API responses."},"IStoryfieldAiTtsResult.ICreate":{"type":"object","properties":{"tts_audio_uri":{"type":"string","description":"URI of the generated TTS audio file (e.g. S3 pre-signed URL). This must be a valid URI referencing the location of the audio result in persistent storage. Required for audio access and verification."},"source_text":{"type":"string","description":"The text from which TTS was generated. This must match the story or story page content to be spoken."},"dialect":{"type":"string","description":"Dialect or language option used in TTS result. Must represent the language/dialect code as registered for the synthesis operation (e.g., 'ko', 'gyeongsang', 'jeolla')."},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional: The UUID of the specific story page if this TTS result is associated with a particular page. Null if the TTS applies to the whole story."}},"required":["tts_audio_uri","source_text","dialect"],"description":"Payload for creating a new Text-to-Speech (TTS) result record.\n\nThis is used to register a newly generated TTS audio file (for a whole story or single page). The record includes the audio output URI, the source text, dialect, and an optional association with an individual page for per-page narration. No user or story linkage is provided here—they are set by the context of the API operation. Audit fields are managed separately."},"IStoryfieldAiTtsResult.IUpdate":{"type":"object","properties":{"tts_audio_uri":{"type":"string","description":"(Optional) Updated URI for the TTS audio file. If the TTS audio is regenerated or its S3/link location changes, this field should be updated accordingly."},"source_text":{"type":"string","description":"(Optional) Updated source text to reflect new synthesis or text corrections. May be used if TTS result is regenerated due to content edits."},"dialect":{"type":"string","description":"(Optional) New dialect or language selection for this TTS result. Set only if the dialect changes from its initial value."},"storyfield_ai_story_page_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) If this TTS result is reassigned to a different story page or made a global/story-level TTS (null), this field may be updated."}},"required":[],"description":"Payload for updating an existing Text-to-Speech (TTS) result record.\n\nSupports regeneration, metadata correction, or dialect reassignment for TTS results. All fields are optional and will only update if provided in the payload. Audit/ownership are handled by business context. No user or story linkage is set here—they are managed by the endpoint context."},"IStoryfieldAiTokenSession.IRequest":{"type":"object","properties":{"authenticated_user_id":{"type":"string","format":"uuid","description":"(Optional) Filter sessions by the unique authenticated user ID. Applies only to sessions linked to users, not admins."},"system_admin_id":{"type":"string","format":"uuid","description":"(Optional) Filter sessions by the unique ID of the system administrator. Applies to admin sessions only."},"fingerprint":{"type":"string","description":"(Optional) Filter sessions by device or browser fingerprint. Used for device-level session management."},"issued_at_min":{"type":"string","format":"date-time","description":"(Optional) Lower bound (inclusive) filter for issued_at (session creation time). ISO8601 format."},"issued_at_max":{"type":"string","format":"date-time","description":"(Optional) Upper bound (inclusive) filter for issued_at (session creation time). ISO8601 format."},"expires_at_min":{"type":"string","format":"date-time","description":"(Optional) Lower bound (inclusive) filter for expires_at. Only sessions expiring on or after this point are included."},"expires_at_max":{"type":"string","format":"date-time","description":"(Optional) Upper bound (inclusive) filter for expires_at. Only sessions expiring on or before this point are included."},"last_activity_at_min":{"type":"string","format":"date-time","description":"(Optional) Lower bound (inclusive) filter for last_activity_at. Used to find active/inactive sessions within a period."},"last_activity_at_max":{"type":"string","format":"date-time","description":"(Optional) Upper bound (inclusive) filter for last_activity_at. Used to find active/inactive sessions within a period."},"page":{"type":"integer","description":"(Optional) The page number for result pagination (1-based index)."},"limit":{"type":"integer","description":"(Optional) Maximum number of results per page for pagination."}},"required":[],"description":"Request object for filtering, searching, and paginating authentication token sessions.\n\nSupports a rich set of filters for sessions by user ID, admin ID, device fingerprint, issued and expiry times, and activity windows. Also supports pagination through 'page' and 'limit' fields. This enables advanced search and monitoring of authentication sessions for security and compliance purposes. All fields are optional—any combination can be supplied as needed."},"IStoryfieldAiTokenSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique token session ID."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the authenticated user if session is user-associated, null otherwise."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the system administrator if session is admin-associated, null otherwise."},"token_hash":{"type":"string","description":"Hashed authentication token value; used for secure session validation and never contains a plain-text token. This value is write-only and must not be exposed to clients."},"fingerprint":{"type":"string","description":"Device or browser fingerprint to uniquely identify the session by device context."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp when the session token was originally issued. Set in ISO8601 format."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the token session (ISO8601). After this date, the session is invalid."},"refreshed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Time the session was last refreshed (extended). Set to null if not refreshed."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent proof of session activity (API call or usage event). For session lifecycle tracking."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when session record was created (may match issued_at for most records). For audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the token session. Used for record lifecycle audit."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Non-null if session is revoked or forcibly removed. Null if still active."}},"required":["id","token_hash","fingerprint","issued_at","expires_at","last_activity_at","created_at","updated_at"],"description":"Full record type for authentication token session. Used for both user- and admin-linked sessions.\n\nEncapsulates all audit fields and device fingerprint metadata for a session, as well as secure (hashed) token reference. All time fields use ISO8601 format. Soft deletion is handled via deleted_at. Session linkage to a user or admin is determined by the respective optional IDs, which may be null based on the authentication role."},"IStoryfieldAiTokenSession.IUpdate":{"type":"object","properties":{"expires_at":{"type":"string","format":"date-time","description":"The expiry time for this authentication token session.\n\nUpdates the valid until date for the token session. Changes take effect immediately, potentially triggering expiration in clients immediately if the new time is in the past. Required for forced logouts, session duration control, or admin-forced refreshes."},"refreshed_at":{"oneOf":[{"type":"string","format":"date-time","description":"The most recent refresh timestamp for this session.\n\nNull if never refreshed, otherwise the last time a refresh token was used for this session."},{"type":"null"}],"description":"The most recent refresh timestamp for this session.\n\nNull if never refreshed, otherwise the last time a refresh token was used for this session."},"last_activity_at":{"type":"string","format":"date-time","description":"The timestamp of the most recent authentication or usage activity for this session.\n\nHelps admins and security reviews to track session use and distinguish stale or active sessions."},"fingerprint":{"type":"string","description":"Device/browser fingerprint for session uniqueness.\n\nMay be used to correct or update recorded device IDs for this session. Usually a secure hash."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deleted datetime for when this session was administratively deactivated (forced logout or invalidation)."},{"type":"null"}],"description":"Soft-deleted datetime for when this session was administratively deactivated (forced logout or invalidation)."}},"required":[],"description":"Update session properties for a given authentication token session.\n\nAllows adjustment of expiry, last usage, device fingerprint, and soft deletion timestamp for operational security, forced logout, or session management purposes. Used exclusively by system administrators in service admin."},"IStoryfieldAiTokenRevocation.IRequest":{"type":"object","properties":{"token_hash":{"type":"string","description":"Search for token revocation records with this hashed token value. Always hashed, never plaintext."},"revoked_reason":{"type":"string","description":"Filter by the recorded reason for token revocation (e.g., compromise, logout, abuse). Partial matches supported."},"authenticated_user_id":{"type":"string","format":"uuid","description":"Optionally filter to only token revocations for this authenticated user."},"system_admin_id":{"type":"string","format":"uuid","description":"Optionally filter to only revocations performed by this system admin."},"created_from":{"type":"string","format":"date-time","description":"Filter for records created on or after this UTC date/time."},"created_to":{"type":"string","format":"date-time","description":"Filter for records created before or up to this UTC date/time."},"page":{"type":"number","description":"Page number for pagination. Starts at 1."},"limit":{"type":"number","description":"Number of records per page. Maximum reasonable value enforced by implementation."}},"required":[],"description":"Search and filter specifications for token revocation records. Allows system admins to query for events by token hash, reason, actor, or creation period for incident review, audit, and compliance monitoring."},"IStoryfieldAiTokenRevocation":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key universally unique identifier for the token revocation record. Used as a reference in audit logs and relations."},"token_session_id":{"oneOf":[{"type":"string","format":"uuid","description":"The associated token session's UUID, if known at the time of revocation."},{"type":"null"}],"description":"The associated token session's UUID, if known at the time of revocation."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the authenticated user who owned the revoked token/session."},{"type":"null"}],"description":"UUID of the authenticated user who owned the revoked token/session."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the system admin responsible for this revocation, or null for automated events."},{"type":"null"}],"description":"UUID of the system admin responsible for this revocation, or null for automated events."},"token_hash":{"type":"string","description":"The hashed value of the revoked token. Never revealed as a plaintext token. Used for future deny-list checks."},"revoked_reason":{"type":"string","description":"Reason the token/session was revoked: compromise, logout, rotation, abuse, etc. Required for audit and compliance."},"revoked_by_ip":{"oneOf":[{"type":"string","description":"Source IP address from which revocation was initiated, if available."},{"type":"null"}],"description":"Source IP address from which revocation was initiated, if available."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the revocation event was created. Required for audit and legal compliance."}},"required":["id","token_hash","revoked_reason","created_at"],"description":"A single revoked token/session record, used for security incident, audit, and compliance reporting.\n\nDescribes key details of who/what was revoked, why, when, and by whom (if not automated). May reference a token session, authenticated user, or admin based on the event context. Required for all privileged revocation event records."},"IStoryfieldAiAuthAuditLog.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Filter audit logs by the recorded event type (e.g., issued, validated, refreshed, revoked, denied). Partial or exact matches supported."},"event_outcome":{"type":"string","description":"Filter audit log search by event outcome result (e.g., success, failure, partial)."},"authenticated_user_id":{"type":"string","format":"uuid","description":"Optionally filter logs by the UUID of the authenticated user."},"system_admin_id":{"type":"string","format":"uuid","description":"Optionally filter logs by the UUID of the system admin acting or affected."},"token_session_id":{"type":"string","format":"uuid","description":"Optionally filter audit logs to events linked to a specific authentication token session."},"created_from":{"type":"string","format":"date-time","description":"Filter for events created at or after this time (UTC). Used for time-bounded incident or compliance review."},"created_to":{"type":"string","format":"date-time","description":"Filter for events created before or up to this time (UTC)."},"page":{"type":"number","description":"Page number for pagination of audit log results. Starts at 1."},"limit":{"type":"number","description":"Number of records per page for pagination (max determined by implementation/policy)."},"user_agent":{"type":"string","description":"Search for audit log records originating from a given user-agent string (browser/device info). Partial matches supported."},"source_ip":{"type":"string","description":"Search for audit log records coming from, or affecting, a particular source IP address."},"event_message":{"type":"string","description":"Text search within the event_message field, for diagnostic or incident review."}},"required":[],"description":"Search and filter criteria for retrieving authentication/authorization audit logs. Enables targeted review and pagination of key security and compliance events in the system audit log."},"IStoryfieldAiAuthAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the authentication/authorization audit log event. This field corresponds to the primary key in the database schema. It is used in business operations to refer to a single audit log entry and supports audit, compliance, and traceability. This value is a UUID string as per standard across all ID fields."},"token_session_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the session ID associated with this event. A UUID corresponding to storyfield_ai_token_sessions.id, or null if the event is not linked to a session (such as failed logins or system events). Enables session-level tracing for compliance and troubleshooting."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the user involved in the event. UUID referring to storyfield_ai_authenticatedusers.id, or null for events not linked to a user (such as admin/system events). Used for user-focused audit and compliance reporting."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the system administrator involved in the event. UUID for storyfield_ai_systemadmins.id, or null if not applicable. Enables privileged access auditing and system-level compliance reporting."},"event_type":{"type":"string","description":"High-level category or action for the audit event (e.g., 'issued', 'validated', 'refreshed', 'expired', 'revoked', 'denied'). Used for filtering, reporting, and business process auditing."},"event_outcome":{"type":"string","description":"Outcome for the event (e.g., 'success', 'failure', 'partial'). Indicates the result and feeds into compliance, monitoring, and analytics workflows."},"event_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional descriptive and human-readable message for the event. Used to record error details, status explanations, or investigation context for compliance and auditability."},"source_ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IP address from which the auth event was triggered. Used for operational security audit, IP-based access patterns, and anomaly detection. Nullable for privacy and context."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user-agent string or device fingerprint associated with the event. Used in business analytics, security investigation, or device compliance checks."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit event was created. This is an ISO8601 date-time string, providing a precise record of when the event occurred, for audit trail and compliance reporting."}},"required":["id","event_type","event_outcome","created_at"],"description":"Authentication and authorization audit/event log entry.\n\nRepresents a single event in the authentication or authorization lifecycle, including logins, token issuance, revocation, refresh, or denial actions. Each record is uniquely identified, may be associated with a user, system admin, and/or session, and includes event type, outcome, descriptive context, and a precise creation timestamp. Used in compliance, forensics, and security audit workflows."},"IStoryfieldAiIntegrationLog.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Filter for event logs by the type of integration event (e.g., API_CALL, S3_UPLOAD, ERROR, RECOVERY). Enables focused searches for operational, audit, or forensic review."},"subsystem":{"type":"string","description":"Subsystem or integration connector involved in the event log (e.g., s3, spring_backend, openai, tts_engine). Used to limit results to a specific external system or integration point."},"status":{"type":"string","description":"Filter by execution/result status (e.g., SUCCESS, FAILURE, PARTIAL). Supports incident review and operational reliability analysis."},"created_from":{"type":"string","format":"date-time","description":"Earliest creation timestamp to include in results (ISO8601). Enables time-range filtering for business periods, incidents, or compliance reviews."},"created_to":{"type":"string","format":"date-time","description":"Latest creation timestamp to include in results (ISO8601). Useful for narrowing focus to recent events or specific incident windows."},"keyword":{"type":"string","description":"Search filter for matching text in the message context field. Used to find events related to specific errors, operations, user IDs, or external incident codes."},"page":{"type":"integer","description":"Requested page number for pagination. Default is usually 1 if unset. Used for paginated or windowed result sets in client UIs."},"limit":{"type":"integer","description":"Maximum number of results per page (pagination window size). Business or technical policy may dictate maximums for performance."},"sort_by":{"type":"string","description":"Sort field selector, such as created_at or status. Used to control order in which integration events are returned to the client."},"sort_order":{"oneOf":[{"const":"asc","description":"Order of sort, ascending or descending. Accepted values are 'asc' or 'desc', always check for enum."},{"const":"desc","description":"Order of sort, ascending or descending. Accepted values are 'asc' or 'desc', always check for enum."}],"description":"Order of sort, ascending or descending. Accepted values are 'asc' or 'desc', always check for enum."}},"required":[],"description":"Request structure for querying integration event logs with rich filters and pagination.\n\nUsed by system administrators and auditors to search integration logs by type, subsystem, status, time-range, free-text keywords, or sorted order. Enables fast and precise filtering for operational monitoring, troubleshooting, or compliance review. Pagination support is present for scalable result navigation."},"IStoryfieldAiIntegrationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the integration log record. Primary key in database, used for referencing this event in audits or operations. Always a UUID string."},"storyfield_ai_authenticateduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the user involved in the integration event. Null if unrelated to a specific user. Critical for business and compliance review."},"storyfield_ai_story_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the story associated with the event. Null for system-level or userless events. Supports cross-object traceability for compliance and root cause analysis."},"event_type":{"type":"string","description":"Type or category of integration event (API_CALL, CONNECTOR_TRIGGER, S3_UPLOAD, ERROR). Indicates the business process or connector responsible for the event."},"subsystem":{"type":"string","description":"Name of the business or technical subsystem or connector involved (e.g., s3, openai, tts_engine). Used in business process monitoring and audit."},"status":{"type":"string","description":"Business status or result of the integration event (e.g., SUCCESS, FAILURE, PARTIAL). Used by compliance, reliability, and operational dashboards."},"message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-friendly description, diagnostic trace, or error message associated with this integration event. Nullable for events that succeeded with no descriptive message."},"request_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Request or correlation identifier for distributed event mapping. Enables root cause tracing and relationship tracking for external integrations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the integration event occurred or was logged (ISO8601). Used for business, compliance, and operational timelines."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last log entry update (ISO8601). Reflects business event completion, retries, or audit adjustments."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion or logical removal timestamp (ISO8601) for the integration event if applicable. Null if not deleted."}},"required":["id","event_type","subsystem","status","created_at","updated_at"],"description":"Integration event and audit log entry for all cross-system or external connector operations.\n\nTracks events such as API calls to external services, S3 uploads, connector triggers, error or retry events. Includes references to user or story where appropriate, along with full event categorization, subsystem, business status, descriptive messages, request/trace identifiers, and full audit/compliance timestamps. Supports system-wide monitoring, troubleshooting, and operational audit."},"IStoryfieldAiS3UploadHistory.IRequest":{"type":"object","properties":{"storyfield_ai_authenticateduser_id":{"type":"string","description":"Limit S3 upload records to only those initiated by a specific authenticated user. UUID for user. Supports role-based filtering for compliance or incident review."},"storyfield_ai_story_id":{"type":"string","description":"Limit upload records to those associated with a particular story by UUID. Enables incident, recovery, and business report filters."},"filename":{"type":"string","description":"Search for files by name pattern, extension, or prefix. Useful for troubleshooting, file recovery, and compliance review."},"media_type":{"type":"string","description":"Filter records to a particular media type (e.g., story_image, tts_audio, asr_audio). Useful for targeted operational review."},"upload_status":{"type":"string","description":"Filter S3 upload attempts by business/technical status (SUCCESS, FAILURE, RETRY, PARTIAL). Incident and SLA monitoring."},"created_from":{"type":"string","format":"date-time","description":"Lower-bound timestamp for time range filtering (ISO8601). Used to focus audit windows."},"created_to":{"type":"string","format":"date-time","description":"Upper-bound timestamp for filtered window (ISO8601). Used for audit, SLA, or business recovery."},"error_message":{"type":"string","description":"Searches error messages for keywords, codes or patterns. Useful when investigating upload failures."},"page":{"type":"integer","description":"Paginated query request for result navigation. Page number, 1-based."},"limit":{"type":"integer","description":"Number of records per page. Business/technical constraint may impose maximums."},"sort_by":{"type":"string","description":"Sorts results by one of the allowed fields (e.g., created_at, filename, status)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort ordering for the results: 'asc' or 'desc' only."},{"const":"desc","description":"Sort ordering for the results: 'asc' or 'desc' only."}],"description":"Sort ordering for the results: 'asc' or 'desc' only."}},"required":[],"description":"Structured request for retrieving S3 upload history events via advanced filters and pagination.\n\nUsed to search audit logs for S3 upload attempts in support, reliability, or compliance workflows. Filters span by user or story, media type, file, upload result, error keywords, and time window. Pagination and sorting offer efficient access and review of operational file delivery health."},"IStoryfieldAiS3UploadHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the S3 upload history record (UUID). Corresponds to the record's primary key in the database."},"storyfield_ai_authenticateduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the authenticated user who initiated the media upload (UUID). Null if the upload was system-triggered or unauthenticated."},"storyfield_ai_story_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the related story (UUID) for this upload event, if applicable. Null if the upload is not directly tied to a story."},"filename":{"type":"string","description":"Name of the file uploaded, either system-generated or user-supplied. Used for tracking S3 objects and troubleshooting."},"file_size":{"type":"integer","description":"Size of the uploaded file in bytes. Useful for audit trails, policy enforcement, and troubleshooting."},"media_type":{"type":"string","description":"Type/category of media uploaded (e.g., 'story_image', 'tts_audio', 'asr_audio'). Used for operational filtering and compliance reporting."},"upload_status":{"type":"string","description":"Outcome status of the upload (e.g., 'SUCCESS', 'FAILURE', 'RETRY', 'PARTIAL'). Encodes the final result for diagnostic and compliance purposes."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional error or diagnostic message if a failure occurred during upload. Null if upload was successful."},"spring_upload_url":{"type":"string","description":"Spring backend upload endpoint used for this upload (full URI). Used for traceability and troubleshooting."},"s3_object_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the resulting S3 object as returned by Spring, if upload was successful. Null if the upload failed or was not completed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the upload history record was created (ISO 8601 date-time format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this record (ISO 8601 date-time format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp (ISO 8601); set when the record is logically removed. Null if the record is active."}},"required":["id","filename","file_size","media_type","upload_status","spring_upload_url","created_at","updated_at"],"description":"S3 upload history entity. Records details of every file uploaded via Spring backend for tracing, troubleshooting, and compliance. Used for operational forensics, audit trails, and performance tracking. Each record includes filename, size, media type, upload status, upload endpoint, resulting S3 URI, timestamps, and references to the user and story if applicable."},"IStoryfieldAiExternalApiFailure.IRequest":{"type":"object","properties":{"api_type":{"type":"string","description":"Optional filter: Type of external API involved in the failure (e.g., 'openai', 'asr', 'tts', 'spring_backend', 's3', 'payment')."},"endpoint":{"type":"string","description":"Optional filter: Specific API endpoint or resource path that had the failure."},"http_method":{"type":"string","description":"Optional filter: HTTP method (e.g., 'GET', 'POST', 'PUT', 'DELETE')."},"error_code":{"type":"string","description":"Optional filter: API or HTTP error code associated with the failure event."},"created_from":{"type":"string","format":"date-time","description":"Optional filter: earliest creation timestamp for filtering records (ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"Optional filter: latest creation timestamp (ISO 8601)."},"storyfield_ai_authenticateduser_id":{"type":"string","format":"uuid","description":"Optional filter: Restrict results to failures tied to a particular authenticated user (UUID)."},"storyfield_ai_story_id":{"type":"string","format":"uuid","description":"Optional filter: Restrict results to failures tied to a particular story (UUID)."},"page":{"type":"integer","description":"Pagination parameter: page number for result set navigation."},"limit":{"type":"integer","description":"Pagination parameter: Maximum number of records per page."}},"required":[],"description":"Search and filtering request structure for retrieving external API failure logs. All properties are optional; filters and pagination can be combined as needed. Used for advanced troubleshooting, SLA compliance, and incident review by system administrators."},"IStoryfieldAiExternalApiFailure":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this external API failure record (UUID)."},"storyfield_ai_authenticateduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the authenticated user involved in the failed external API request (UUID), if applicable."},"storyfield_ai_story_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the story associated with the failure (UUID), if any."},"api_type":{"type":"string","description":"Type of external API involved in failure (e.g., 'openai', 'asr', 'tts', 'spring_backend', 's3', 'payment')."},"endpoint":{"type":"string","description":"API endpoint or resource path that triggered the failure event."},"http_method":{"type":"string","description":"HTTP method used for the failed request (e.g., 'GET', 'POST', 'PUT', 'DELETE')."},"error_code":{"type":"string","description":"API/system-specific error code or HTTP status associated with this failure event."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable description or diagnostic message for the error. Nullable, especially if the system did not supply a detailed error."},"request_payload":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional: request payload (usually JSON) sent to the API (typically omitted or masked in results for security/privacy)."},"response_payload":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional: response body returned with the error (may be omitted due to security/privacy)."},"retry_count":{"type":"integer","description":"How many retries were attempted for this failed operation (includes the initial attempt)."},"session_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business/session group or distributed trace for linking failures across services."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this failure event was recorded (ISO 8601 date-time format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent update to this record (ISO 8601 date-time format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for the record (ISO 8601). Set when logically deleted, otherwise null."}},"required":["id","api_type","endpoint","http_method","error_code","retry_count","created_at","updated_at"],"description":"External API failure event record. Captures detailed information about failures and errors when communicating with third-party services or integration endpoints (OpenAI, ASR, TTS, Spring backend, S3, etc.). Includes API error code, endpoint, HTTP method, request/response payloads (if allowed), retry counts, timestamps, and optionally links to user or story. Used for troubleshooting, SLA compliance, trend monitoring, and security review."},"IStoryfieldAiSystemPolicy.IRequest":{"type":"object","properties":{"policy_code":{"type":"string","description":"Optional filter: Unique code identifying the system policy (for precise rule search)."},"name":{"type":"string","description":"Optional filter: Human-readable policy name (partial or exact match allowed)."},"type":{"type":"string","description":"Optional filter: Data type or category of the policy (such as 'boolean', 'int', 'duration', 'json', etc.)."},"active":{"type":"boolean","description":"Optional filter: Restrict results to policies that are currently enforced (true) or inactive (false)."},"created_from":{"type":"string","format":"date-time","description":"Optional filter: Return only policies created at or after this timestamp (ISO 8601 format)."},"created_to":{"type":"string","format":"date-time","description":"Optional filter: Return only policies created at or before this timestamp (ISO 8601 format)."},"page":{"type":"integer","description":"Pagination parameter: current page number for list navigation."},"limit":{"type":"integer","description":"Pagination parameter: maximum number of records per page."}},"required":[],"description":"Paginated and advanced filtering request type for system policy records. Used by administrators to search, audit, and review all technical, business, and compliance policies governing the StoryField AI service. All properties are optional; filters can be combined as needed. Pagination is standard."},"IStoryfieldAiSystemPolicy":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this policy record. Maps directly to the primary key in the 'storyfield_ai_system_policies' table. Required for all lookup, update, and deletion operations."},"policy_code":{"type":"string","description":"Unique code representing the policy. Serves as both a business and technical key for runtime policy management in the StoryField AI service. See Prisma schema for naming conventions and validity criteria."},"name":{"type":"string","description":"Human-friendly name of the policy. Used in admin UIs, documentation, and runtime introspection."},"description":{"type":"string","description":"Detailed documentation string for the business or technical meaning of this policy. Must provide multi-paragraph explanations in English, referencing business purpose, lifecycle, and compliance implications. Commonly required for audit, support, or developer reference."},"value":{"type":"string","description":"Current policy value to be enforced in the system. Format varies with policy type; may be stringified JSON or a scalar, according to the property's operational context. See corresponding 'type' property for value expectations."},"type":{"type":"string","description":"Type descriptor for the value property. Should match one of the following: 'boolean', 'int', 'string', 'duration', 'json'. Type enforcement is managed at the application level."},"active":{"type":"boolean","description":"Flag indicating whether this policy is currently enforced at runtime. True = active/applicable, false = temporarily paused (policy is defined but not currently honored)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of policy creation in ISO 8601 UTC format. Set automatically when the record is first inserted. Used for auditing, troubleshooting, chronological sorting."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the policy in ISO 8601 UTC format. Always updated upon modification for change tracking and compliance review."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion marker. Null if active, or ISO 8601 timestamp if the policy is logically removed. Retained for audit and possible future recovery. Never physically deleted except in irreversible hard-purge events."}},"required":["id","policy_code","name","description","value","type","active","created_at","updated_at"],"description":"A system-wide business, technical, feature toggle, or compliance policy for the StoryField AI platform.\n\nRepresents a runtime-enforced operational rule, feature toggle, limit, or business constraint that applies globally across all platform functions. Every entry is uniquely identified by policy_code, with descriptive business intent and traceable value. Versioned and fully auditable; only mutable/pausable via administrative endpoints."},"IStoryfieldAiSystemPolicy.ICreate":{"type":"object","properties":{"policy_code":{"type":"string","description":"Unique policy code for runtime lookup and enforcement. Must be unique within the policy table. Used as the programmatic key in settings and configuration."},"name":{"type":"string","description":"Human-readable name for the policy. Shown in UIs and documentation for clarity and purpose."},"description":{"type":"string","description":"Detailed explanation of the business rule, technical effect, or compliance requirement for this policy. Must be written in English with sufficient clarity for audit and operational investigation."},"value":{"type":"string","description":"Initial policy value. Raw or stringified JSON depending on type. Admins must ensure values match the business and technical enforcement constraints for this code."},"type":{"type":"string","description":"Runtime data type for the value property. Supported types: 'boolean', 'int', 'duration', 'string', 'json'. See application business documentation for enforcement rules."},"active":{"type":"boolean","description":"Whether the policy should be enabled upon creation (true) or created in a paused/draft state (false)."}},"required":["policy_code","name","description","value","type","active"],"description":"Represents the required input contract to register a new system policy in the administrative interface.\n\nAll business and operational rules must be provided and well documented for admin review or runtime enforcement. Creation is only possible with all required metadata fields present."},"IStoryfieldAiSystemPolicy.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Updated human-friendly policy name."},"description":{"type":"string","description":"Detailed updated documentation of the policy's purpose, effect, or compliance rationale."},"value":{"type":"string","description":"New policy value to apply at runtime. Must be validated for correct type and business logic."},"type":{"type":"string","description":"Updated type if changing enforcement (rare). Typically remains unchanged but may be used for clarification or data migration."},"active":{"type":"boolean","description":"Enable (true) or disable (false) this policy at runtime. Toggling only permitted if policy semantics allow pausing."}},"required":[],"description":"Input shape for updating an existing system policy. Includes only those fields that are mutable via administrative endpoints. At least one field must be provided for a successful update. All changes are auditable."},"IStoryfieldAiEnvSetting.IRequest":{"type":"object","properties":{"env_name":{"type":"string","description":"Name of the application environment to filter on (e.g., 'production', 'staging', 'development', 'local'). Matches 'env_name' in env_settings table."},"env_key":{"type":"string","description":"Filter for settings by configuration key name (matches 'env_key' in the env_settings table)."},"changed_by":{"type":"string","description":"Limit results to environment settings last changed by or set by the specified user/admin identity (e.g., email or adminId)."},"page":{"type":"integer","description":"Page number for pagination (1-based index). Used with 'limit' to retrieve result window."},"limit":{"type":"integer","description":"Maximum number of results per page. Used for pagination; should be kept reasonable for performance."}},"required":[],"description":"Search/filter/pagination input for retrieving environment settings from the 'storyfield_ai_env_settings' table. Allows for flexible search by environment, key, changed_by actor, page, and record limits. All parameters are optional; defaults may result in returning the full index or system default window."},"IStoryfieldAiEnvSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this environment setting record as a UUID string.\n\nThis field is generated by the database and is immutable once created. Used for direct referencing and audit logging. Always required for update, retrieval, and audit operations. Sourced directly from the storyfield_ai_env_settings Prisma schema.\n\nExample: \"ba7c8e41-efd7-409e-884d-87a6aefaf0d7\""},"env_key":{"type":"string","description":"Configuration key name. Matches a single environment variable or logical config item (e.g., 'OPENAI_API_KEY').\n\nThis value must be unique per environment and reflects the actual variable name used in runtime configuration. Should be human-intelligible and adhere to naming conventions (uppercase, separated by underscores if needed).\n\nExample: \"SPRING_S3_UPLOAD_URL\""},"env_value":{"type":"string","description":"Configuration value (mask sensitive data in UI).\n\nRepresents the actual value for this setting, such as API tokens, resource URLs, or other system parameters. Sensitive values should be masked in UI or logs.\n\nExample: \"sk-xxx...\" or \"https://.../upload\""},"env_name":{"type":"string","description":"Environment label (e.g., 'local', 'development', 'staging', 'production').\n\nAuthors must assign the correct environment context. This makes it possible to distinguish the configuration scope and apply variable sets accordingly. Must be one of the supported environments and validated to avoid cross-environment confusion.\n\nExample: \"production\""},"changed_by":{"type":"string","description":"Identifier (username, email, or adminId) representing the actor who introduced the change.\n\nThis value enables auditing of which administrator or operator performed the configuration change. Should always reflect a valid authenticated user.\n\nExample: \"admin@yourcompany.com\""},"change_reason":{"type":"string","description":"Human-facing description of why this change was made (e.g., key rotation, urgent bug fix).\n\nThis field is required for operational compliance and incident review. Must include the business or technical motivation for modifying the configuration.\n\nExample: \"API Key rotation for security compliance.\""},"created_at":{"type":"string","format":"date-time","description":"Datetime when this setting entry was created; marks effective date of config.\n\nSet by the system. Follows ISO 8601 date-time string format. Used for audit trails and policy compliance review.\n\nExample: \"2024-08-09T09:31:17.150Z\""},"updated_at":{"type":"string","format":"date-time","description":"Datetime of last update (for correction or rollover).\n\nManaged by the system and updated whenever the record is amended. ISO 8601 date-time string.\n\nExample: \"2025-03-15T15:18:33.500Z\""},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for audit log. Null unless deleted logically.\n\nWhen set to a date-time string, this indicates the setting has been logically removed and is no longer active. If null, the record is active.\n\nExample: null or \"2024-12-01T11:47:23.938Z\""}},"required":["id","env_key","env_value","env_name","changed_by","change_reason","created_at","updated_at"],"description":"An environment variable or configuration setting for a specific runtime environment in the StoryField AI platform. Represents a key-value pair with environment context (development, staging, production, etc.) and audit trail for configuration changes and compliance review.\n\nEach record logs who made the change, when, and why—the essential audit and traceability fields for secure, compliant management of runtime config. All secrets/credentials/values should be assigned according to operational best practices.\n\nExamples include API tokens, storage endpoints, or feature toggles."},"IStoryfieldAiEnvSetting.ICreate":{"type":"object","properties":{"env_key":{"type":"string","description":"The key (name) of the environment setting for runtime configuration.\n\nMust match exact runtime key naming conventions and be unique per environment."},"env_value":{"type":"string","description":"The value to assign to this environment setting (such as API keys, URLs, etc).\n\nSensitive values are to be masked in UI but fully stored in the DB record."},"env_name":{"type":"string","description":"String identifier for the environment associated with this setting (\"development\", \"staging\", \"production\", etc).\n\nDefines the scope of this configuration."},"changed_by":{"type":"string","description":"The unique identifier or business contact (email, admin account) of the person making this change.\n\nRequired for audit trail and operational compliance logging."},"change_reason":{"type":"string","description":"The explicit business/technical reason for this configuration action.\n\nIncluded for traceability, incident investigation, and compliance."}},"required":["env_key","env_value","env_name","changed_by","change_reason"],"description":"The payload for creating a new environment setting or configuration item. Requires explicit assignment of environment context, key, value, author, and motivation for audit purposes. No system-generated fields should be included."},"IStoryfieldAiEnvSetting.IUpdate":{"type":"object","properties":{"env_key":{"type":"string","description":"Updated key/name if the setting needs to be migrated or renamed.\n\nMust preserve logical key structure and adhere to naming rules."},"env_value":{"type":"string","description":"Updated value for the environment configuration (e.g., replaced API key, URL, or feature toggle value).\n\nSensitive values should be masked in UI or logs."},"env_name":{"type":"string","description":"Updated environment label (e.g., switch from 'staging' to 'production') if configuration scope changes.\n\nRarely changed; use only when correcting environment assignment errors."},"changed_by":{"type":"string","description":"Updated admin or user performing the configuration change.\n\nUsed for audit trail. Every update must specify who performed the change."},"change_reason":{"type":"string","description":"Updated business/technical reason for the configuration adjustment.\n\nShould describe the logic for the update (e.g., 'rotating old key', 'updating endpoint', etc)."}},"required":[],"description":"The request body for updating an existing environment setting. Only fields being updated must be supplied (all are optional), but at least one must be set per update. All updates are tracked in audit logs with updated_by and reason for modification."},"IStoryfieldAiDeploymentLog.IRequest":{"type":"object","properties":{"deployment_label":{"type":"string","description":"Label identifying the deployment, rollback, or hotfix event (e.g., version or build tag). String property, used for searching for a specific deployment action."},"action_type":{"type":"string","description":"Type of deployment action. Supports 'deploy', 'rollback', 'hotfix', or 'config-change'. Used as a search/filter criterion."},"environment":{"type":"string","description":"The environment context for the deployment event (e.g., 'production', 'staging', 'development'). Enables filtering by environment."},"initiated_by":{"type":"string","description":"Admin or user identity that performed the deployment/rollback/hotfix/config change event. Used for search."},"status":{"type":"string","description":"Outcome/status of the deployment event (e.g., 'success', 'failed', 'in-progress', 'aborted'). Used to filter for events by result."},"summary":{"type":"string","description":"Free-form summary or notes for deployment/rollback event for flexible searching."},"created_at_from":{"type":"string","format":"date-time","description":"Earliest deployment event creation timestamp for filtering/search window (inclusive). ISO 8601 format."},"created_at_to":{"type":"string","format":"date-time","description":"Latest deployment event creation timestamp for filtering/search window (inclusive). ISO 8601 format."},"page":{"type":"integer","description":"Pagination parameter indicating which page of results to return (1-based). Optional. Default if omitted = 1."},"limit":{"type":"integer","description":"Pagination parameter for number of records per page. Optional. Defaults to system config or 50."}},"required":[],"description":"Request query or body structure for searching and retrieving a paginated list of deployment or rollback events in operational or audit workflows. All properties are optional; supplied parameters are used as search criteria."},"IStoryfieldAiDeploymentLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the deployment event log record. This is system-generated, using a UUID scheme, and is required for all entity traceability, compliance history, and downstream lookup operations.\n\nGenerated and persisted as a primary key per business compliance and platform audit rules."},"deployment_label":{"type":"string","description":"A label identifying this deployment, rollback, or hotfix event. Commonly reflects semantic versioning for releases (e.g., 'v1.10.7'), or unique branch/ticket refs (e.g., 'hotfix-abcdef'). Uniqueness per environment is enforced for both auditing and validation of incident traceability.\n\nThis property is required for all deployment- and rollback-related actions, and is vital for root cause analysis and monitoring dashboards."},"action_type":{"type":"string","description":"Type of deployment action. Must be one of: 'deploy', 'rollback', 'hotfix', or 'config-change'.\n\nControls downstream business logic, operational routing, and compliance categorization for deployment management.\n\nThe value must match system-defined constants for deployment operation style to enable cross-operation analytics and reporting."},"environment":{"type":"string","description":"The name of the environment for which this event log is recorded (e.g., 'production', 'staging', 'development'). \n\nThe environment value is essential for change management, system diagnostics, and separation of incident resolution between business environments."},"initiated_by":{"type":"string","description":"String identifier for who or what triggered the deployment. Typically an administrator email, account name, or CI/CD user, but may also reference system scripts as appropriate. Required for all compliance, incident resolution, and operational review workflows. \n\nDirectly links each deployment to the responsible party or automated system."},"status":{"type":"string","description":"Status of the deployment event. Typical values are: 'success', 'failed', 'in-progress', or 'aborted'. This controls system visibility on dashboards, compliance review, and operational incident tracking. \n\nRequired to enable systematic tracking of ended and unresolved deployment cycles."},"summary":{"type":"string","description":"A textual summary describing the context, purpose, outcome, or impact of this deployment/rollback event. Used for audit, review, and business/technical communication to future administrators and compliance reviewers.\n\nThe summary field should provide sufficient insight into the nature and impact of this system event for traceability."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp indicating when the deployment/rollback event began. Automatically generated by system on creation.\n\nUsed for audit trail, event ordering, and incident timing analysis."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp recording when this log entry was last updated. System-managed for traceability of all changes and lifecycle events."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp. If present, the record has been logically removed (decommissioned, superceded, or redacted for compliance reasons)."},{"type":"null"}],"description":"Soft deletion timestamp. If present, the record has been logically removed (decommissioned, superceded, or redacted for compliance reasons)."}},"required":["id","deployment_label","action_type","environment","initiated_by","status","summary","created_at","updated_at"],"description":"Deployment and rollback event log record, representing all major deployment, rollback, hotfix, or environment configuration changes in the StoryField AI system. This schema rigorously defines all key metadata fields tracked for operational, compliance, and incident root-cause audit tracing.\n\nIncludes full event context for deployment management workflows, CI/CD, changelog review, management dashboards, and long-term compliance reporting. Closely aligned with deployment policy, rollback security, and forensic review requirements. Fully defines relationships to status, outcome, initiator, time, and environment for precise cross-incident correlation.\n\nBased on the storyfield_ai_deployment_logs table in Prisma schema, with required audit and compliance metadata as defined by business and regulatory requirements."},"IStoryfieldAiDeploymentLog.ICreate":{"type":"object","properties":{"deployment_label":{"type":"string","description":"A label, such as semantic version, rollout name, or hotfix branch reference, required for business and deployment review. Must be unique per environment."},"action_type":{"type":"string","description":"Deployment event type. Must be one of: 'deploy', 'rollback', 'hotfix', or 'config-change'. Controls operational routing and analytics."},"environment":{"type":"string","description":"Deployment environment context, such as 'production', 'staging', or 'development'. Business logic and roll-back scope are segregated by environment."},"initiated_by":{"type":"string","description":"Identifier for admin or CI/CD user/process triggering this deployment event. Enables compliance and audit traceability."},"status":{"type":"string","description":"Lifecycle status for the deployment: one of 'success', 'failed', 'in-progress', or 'aborted'. Used for compliance incident and monitoring cycles."},"summary":{"type":"string","description":"Human-readable context for deployment, required for audit, diagnostics, and compliance communications."}},"required":["deployment_label","action_type","environment","initiated_by","status","summary"],"description":"Payload structure for creating a new deployment/rollback/hotfix event log in the StoryField AI platform. This schema strictly enumerates all required deployment metadata, context, and documentation fields for platform traceability, compliance, and incident root-cause triage.\n\nBusiness rules enforce uniqueness of deployment_label within environment, strong typing of action_type and status, and requirement for clear audit trail on all creation events.\n\nThis create payload is mapped to the storyfield_ai_deployment_logs Prisma table, enabling business-technical handoffs, changelog generation, SOX-style compliance, and incident tracking at scale."},"IStoryfieldAiDeploymentLog.IUpdate":{"type":"object","properties":{"action_type":{"type":"string","description":"Update the event's type if there was a misclassification or re-statement of deployment/rollback/hotfix."},"environment":{"type":"string","description":"Change the scope or target environment for the logged event if needed, e.g., correcting staging/production misroutes."},"status":{"type":"string","description":"New status; e.g., to mark previously 'in-progress' events as 'success', 'failed', or 'aborted' as real-world progression occurs."},"summary":{"type":"string","description":"Update log summary to provide or clarify incident details, context, or remediation as they become known."}},"required":[],"description":"Object schema for updates to deployment/rollback event logs. May include status changes, corrections to operational/event classification, and summary clarifications. Only fields provided are patched; all updates are fully logged for audit compliance.\n\nThis update contract covers business correction, operational review, and retroactive log enhancement flows, supporting full lifecycle visibility and control over all deployment/rollback event metadata."},"IStoryfieldAiServiceAlert.IRequest":{"type":"object","properties":{"alert_types":{"type":"array","items":{"type":"string"},"description":"List of alert types to filter by. Common values: 'error', 'warning', 'info', 'incident', 'quota', 'recovery', etc.\n\nAllows targeting of dashboard sections, event class, or workflow in real-time incident management."},"alert_code":{"type":"string","description":"Filter results by a specific alert code. Codes are tied to business-defined events (e.g., 'AUTH_401_012', 'S3_UPLOAD_FAIL').\n\nThis enables rapid review and aggregation of shared failure/incident patterns."},"environment":{"type":"string","description":"Limit search to a particular environment, such as 'production', 'staging', 'development', or 'local'. Business/monitoring perspectives are strongly tied to separation by environment. Matches the environment field in alert record."},"resolved":{"type":"boolean","description":"Only return alerts that are resolved (true), unresolved/active (false), or both (unset/undefined). This is critical for real-time health monitoring dashboards, operational triage, and closure metrics."},"search":{"type":"string","description":"Free-text search across alert content, code, and diagnostic fields. Used for dynamic incident investigation, root cause tracing, or ad-hoc data exploration in dashboards and forensics."},"from":{"type":"string","format":"date-time","description":"Lower bound (ISO 8601 timestamp) for alert creation/incident time. Enables incident window filtering for compliance, root-cause, and operational monitoring."},"to":{"type":"string","format":"date-time","description":"Upper bound (ISO 8601 timestamp) for alert creation/incident time. Enables time-bounded searches and snapshotting for incident response."},"page":{"type":"integer","description":"Pagination page index (0-based or 1-based depending on implementation convention). Default as per service documentation."},"limit":{"type":"integer","description":"Page size—how many alerts per returned result window. Standard business default may range 20-100."},"sort_by":{"type":"string","description":"Field to sort result set by (e.g., 'created_at', 'environment', 'alert_type', etc.). Used for custom ordering by operational criticality."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting direction for result set. Must be either 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Sorting direction for result set. Must be either 'asc' (ascending) or 'desc' (descending)."}],"description":"Sorting direction for result set. Must be either 'asc' (ascending) or 'desc' (descending)."}},"required":[],"description":"Flexible, advanced search/filtering and pagination structure for querying service alert/event records. Enables system administrators and operational monitoring interfaces to dynamically target incidents, routine warnings, SLA quota issues, and service outage/health metrics for review, diagnosis, and dashboard visualization.\n\nSupports filtering by alert type, code, environment, resolution status, free-text content search, time window restriction, pagination, and sorting. All filters and search parameters are strictly mapped to matching fields and semantics in the storyfield_ai_service_alerts schema.\n\nThis interface powers incident response, compliance triage, system health monitoring, and root-cause analysis for the StoryField AI operation team."},"IStoryfieldAiServiceAlert":{"type":"object","description":"Represents a system or service event alert. Used for logging operational events, incidents, system warnings, or technical status updates in the StoryField AI platform. This schema includes all critical business and compliance attributes necessary for service health monitoring and incident tracking. It directly reflects the storyfield_ai_service_alerts table in the database schema and ensures complete audit coverage for every alert occurrence.\n\nProperties include alert type (e.g., error, warning, quota, info), code, content, environment, resolution status, and audit trail timestamps. All UUID and date-time fields use the standard ISO 8601 format. This type is referenced in alert detail retrieval, update, and creation APIs.\n\nData corresponds to system events fundamental for operational transparency, compliance, and administrative review.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the alert event record. Always a valid UUID; generated on record creation. Used as primary key and global reference for all alert operations."},"alert_type":{"type":"string","description":"Categorical type describing the event context: examples include 'error', 'warning', 'info', 'quota', 'incident', or 'recovery'. This field drives alert filtering, monitoring dashboards, and incident workflow categorization."},"alert_code":{"type":"string","description":"Optional domain or technical code assigned to the alert (e.g., 'AUTH_401_012', 'S3_UPLOAD_FAIL'). Enables automated processing, search, or grouping within operational contexts."},"content":{"type":"string","description":"Human-readable description or payload describing the alert, incident message, root cause, or business impact summary. Used for administrator review and compliance tracking."},"environment":{"type":"string","description":"Target environment in which the event occurred. Typically matches deployment environments such as 'production', 'staging', 'development', or 'local'. Drives environment-scoped alert dashboards and compliance filtering."},"resolved":{"type":"boolean","description":"Indicates if the alert event has been addressed and formally closed (true = resolved, false = active/unresolved). Updates to this property reflect incident/alert workflow status for business and audit controls."},"resolution_note":{"oneOf":[{"type":"string","description":"Closure or remediation note provided by the administrator. Explains the actions taken to resolve the event; may be null if unresolved or no note given."},{"type":"null"}],"description":"Closure or remediation note provided by the administrator. Explains actions taken to resolve the event; null if unresolved or not explained."},"created_at":{"type":"string","format":"date-time","description":"Datetime when the alert or event record was first created (ISO 8601 format). Used for incident/audit chronology and operational metrics."},"updated_at":{"type":"string","format":"date-time","description":"Datetime of the most recent update to the record, such as marking resolved or adding resolution note. Used for incident lifecycle tracking and compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of soft deletion / deactivation (if alert is withdrawn). Null if still visible/active for operational use. Used only for audit/compliance history."}},"required":["id","alert_type","alert_code","content","environment","resolved","created_at","updated_at"]},"IStoryfieldAiServiceAlert.ICreate":{"type":"object","description":"Payload format for creating a new service alert event. Used by system administrators to log incidents, technical warnings, quota limit triggered events, or critical system info. Properties include event type, alert code, descriptive content, deployment environment, initial resolution status, and optional closure note.\n\nThis schema mirrors operational business rules for audit/log creation and maps directly to the administrative alert log in the StoryField AI database model. All creation fields are required except resolution_note, which is optional and nullable.","properties":{"alert_type":{"type":"string","description":"Type/category of service alert to record (e.g., 'error', 'incident', 'warning', 'info'). Must match business alert taxonomy for operational dashboards."},"alert_code":{"type":"string","description":"Domain or technical code used for programmatic search, incident correlation, and administrative grouping (e.g., 'AUTH_401_012')."},"content":{"type":"string","description":"Descriptive human-readable text or incident message for reporting and operator insight."},"environment":{"type":"string","description":"Deployment environment targeted by the alert (e.g., 'production', 'staging', 'development'). Drives alert segmentation and compliance audit scope."},"resolved":{"type":"boolean","description":"Indicates if the alert is immediately resolved or remains open for incident workflow."},"resolution_note":{"oneOf":[{"type":"string","description":"Initial closure/remediation note for this alert (optional); null if none provided."},{"type":"null"}],"description":"Optional closure or remediation note detailing corrective actions or incident handling. Null if not applicable."}},"required":["alert_type","alert_code","content","environment","resolved"]},"IStoryfieldAiServiceAlert.IUpdate":{"type":"object","description":"Request payload for updating a service alert record. Fields are all optional; supports editing of any alert attributes including type, code, description, environment, resolution status, and closure notes.\n\nThis schema supports partial (patch-style) or full updates/overwrites for all mutable alert fields. System logs must record updater identity, and all updates are tracked for regulatory compliance.","properties":{"alert_type":{"type":"string","description":"(Optional) Change the categorical alert type for this event (error, incident, info, etc.)."},"alert_code":{"type":"string","description":"(Optional) Edit the domain/technical alert code assigned to the alert for search/grouping refinement."},"content":{"type":"string","description":"(Optional) Administrative update or correction to the human-readable event message/incident note."},"environment":{"type":"string","description":"(Optional) Update the environment context for the event ('production', 'staging', etc.) in case of deployment error or reclassification."},"resolved":{"type":"boolean","description":"(Optional) Set the resolved status, e.g., after incident workflow closure (true) or re-opening (false)."},"resolution_note":{"oneOf":[{"type":"string","description":"Optional closure or resolution note with root cause analysis, response summary, or operator remarks."},{"type":"null"}],"description":"(Optional) Closure or remediation note added or modified as part of incident workflow."}},"required":[]},"IStoryfieldAiAuthenticatedusers.ISummary":{"type":"object","description":"Summary representation for audited/filtered lists of authenticated users. Provides essential identity and onboarding data for dashboards or operational compliance. This type reflects the minimal safe subset for listing users: UUID, external identity linking, contact email, and audit timestamps.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; internal UUID identifying this authenticated user. Generated at onboarding."},"external_user_id":{"type":"string","description":"Externally-verified unique identifier from the Spring backend for mapping/authorization. Immutable and unique per user. Visible only to admins for compliance reasons."},"email":{"type":"string","format":"email","description":"Contact email of the user, uniquely enforced by the system. Used for business/operational notifications. May not be a personal mailbox depending on policy."},"created_at":{"type":"string","format":"date-time","description":"When this user account was registered in the StoryField AI platform (ISO 8601 format)."},"updated_at":{"type":"string","format":"date-time","description":"Most recent modification timestamp of this user's business data, for operational/audit review."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp if the user account has been deactivated. Null if currently active. Used for audit, legal compliance, and incident investigation."}},"required":["id","external_user_id","email","created_at","updated_at"]},"IStoryfieldAiSystemAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the system administrator account. This field corresponds to the primary key of the admin entity and uniquely distinguishes individual administrators for audit, privilege, and compliance purposes. Format is a UUID string."},"email":{"type":"string","format":"email","description":"Business-unique email address mapped to the admin account. Used for authentication (through external SSO/JWT), notification, compliance action logs, and audit. Must be globally unique across all active and soft-deleted admin accounts."},"actor_type":{"type":"string","description":"Business role code for the admin account (always 'systemAdmin'). Used to enforce strict privilege boundaries for API, UI, and audit procedures. Must always match role policy for this table."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime ISO8601 string of the admin's most recent successful authentication to the system. Primarily used for monitoring privileged access and detecting stale or at-risk accounts. Can be null if never logged in."},"created_at":{"type":"string","format":"date-time","description":"Datetime when the admin account was first created. Used for operational, compliance, and historical monitoring."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the account. When set, the account is logically deleted (deactivated), no longer permitted to login or perform actions, and all APIs enforce admin-inactivity for this record. Null if the account is active."}},"required":["id","email","actor_type","created_at"],"description":"System administrator summary record. Provides a concise view of a privileged admin account for use in admin/account listing UIs, compliance audits, and privilege management workflows. All sensitive operational fields and business contract properties are sourced from the storyfield_ai_systemadmins table. Excludes highly confidential notes or historical update context to prevent over-exposure in summary lists."},"IStoryfieldAiStoryPage.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the story page record, mapped to the parent story's multi-page structure. Used for client-side navigation, page referencing, and business traceability."},"page_number":{"type":"integer","description":"Logical sequential order number of the page within the parent story. Must be positive integer, used for accurate page navigation and reading order enforcement."},"text":{"type":"string","description":"AI-generated or user-edited textual content of the story page. May be truncated or summarized if presented in list UIs. Full text available at detail endpoint."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp of the page. Not set (null) for active pages; date-time string when suppressed for compliance, moderation, or user erasure traces."}},"required":["id","page_number","text"],"description":"Story page summary for list/pagination result sets. Encapsulates minimal but essential information for UI navigation, review, or content moderation in the context of a multi-page AI story. Derived from storyfield_ai_story_pages table. Excludes full audit and relational metadata for performance."},"IStoryfieldAiStoryImage.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the illustration or image record attached to a story or individual page. Sourced from the primary key of storyfield_ai_story_images table."},"image_uri":{"type":"string","description":"Canonical URI location of the image file (often an S3 pre-signed URL). Used by the client for direct access, rendering, sharing, or moderation. May be used as story cover, page illustration, or thumbnail."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional alternate text or accessibility annotation for the image. Aids screen readers and fulfills compliance for accessible content. Null or omitted if not provided."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion (suppression) time for the image. Used for logical removal, content moderation, compliance, or restoring audit trace of illustrated artifacts."}},"required":["id","image_uri"],"description":"Summary object for images (including AI-generated illustrations, user-uploaded images, or page-level artwork) in a story. Contains the essentials for image listing, review, moderation, and client rendering. Background data and sensitive operational fields are omitted for efficiency."},"IStoryfieldAiTtsResult.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the TTS result, referencing the audio resource as part of a story's accessibility enhancement. Primary key from storyfield_ai_tts_results table."},"tts_audio_uri":{"type":"string","description":"URI for pre-signed S3 or storage location of the TTS-generated audio file. Enables streaming, download, or integration to story reader experiences. Must be valid, authenticated-accessible URI with appropriate retention guarantee per session or content."},"dialect":{"type":"string","description":"Label for the dialect or language option used in generating this TTS audio result. Reflects user choice or story language (e.g. 'Korean', 'Gyeongsang', or other dialect identifier). Required for disambiguation and accessibility."},"source_text":{"type":"string","description":"Exact text (sentence, paragraph, or page) that was submitted for TTS audio synthesis. Enables audit, QA, and user context restoration for playback."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if the TTS result is currently active and available, date-time string otherwise. Used for compliance, user erasure, or moderation activities."}},"required":["id","tts_audio_uri","dialect","source_text"],"description":"Summary object for Text-to-Speech (TTS) result records. Includes identifying, playback, and context fields for use in client UIs, dashboards, or reporting. Omits full audit, parent story/page links, and system-managed fields for concise list rendering."},"IStoryfieldAiTokenSession.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the authentication token session. Primary key from the storyfield_ai_token_sessions table. Always a UUID string."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authenticated user reference for this session, if the session is associated with an end-user (nullable for admin-only sessions)."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"System administrator reference for this session, if session is associated with an admin (nullable for user sessions)."},"fingerprint":{"type":"string","description":"Device/browser fingerprint, used for session uniqueness and tying to a specific device/browser context."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the token was initially issued. Auditable creation point."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the token is set to expire. Reflects current session expiration policy."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp of the last activity recorded for this session. Used for tracking session lifecycle and abandonment."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (ISO 8601) when this session was soft-deleted (revoked/disabled); null if still active."}},"required":["id","authenticated_user_id","system_admin_id","fingerprint","issued_at","expires_at","last_activity_at","deleted_at"],"description":"Summary view for an authentication token session from storyfield_ai_token_sessions table. Includes PK, user/admin linkage, fingerprint, lifecycle timestamps, and soft deletion status for operational auditing."},"IStoryfieldAiTokenRevocation.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the revocation event (PK, UUID from storyfield_ai_token_revocations)."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the authenticated user whose token was revoked. Nullable if revocation did not target a specific user."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the system administrator who performed the revocation."},"token_hash":{"type":"string","description":"SHA or bcrypt hash of the revoked token value. Not the real token; shown for referential audit."},"revoked_reason":{"type":"string","description":"Human- or system-generated reason for the token revocation event."},"revoked_by_ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"IP address from which the revocation operation originated (nullable if not recorded)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the revocation was recorded."}},"required":["id","authenticated_user_id","system_admin_id","token_hash","revoked_reason","revoked_by_ip","created_at"],"description":"Summary/row view for token revocation event (storyfield_ai_token_revocations). Designed for admin logs and abuse/audit monitoring."},"IStoryfieldAiAuthAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the audit event (PK from storyfield_ai_auth_audit_logs)."},"token_session_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Token session related to authentication event, if applicable."},"authenticated_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authenticated user impacted by the event, if applicable."},"system_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"System admin involved in the event, for admin actions or system ops."},"event_type":{"type":"string","description":"Event type for the audit log. E.g., 'issued', 'refreshed', 'revoked', 'denied', etc."},"event_outcome":{"type":"string","description":"Result/outcome for the event. Typically 'success', 'failure', or a customized granular state."},"event_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional contextual, human-readable information about the event. May include error explanation, debug string, or system hints."},"source_ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Originating IP of the event. Useful for security audit, identifies where request came from."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Device, browser, or script agent string for the event/applicable device context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the audit event was recorded."}},"required":["id","token_session_id","authenticated_user_id","system_admin_id","event_type","event_outcome","event_message","source_ip","user_agent","created_at"],"description":"Summary/row-type object for authentication/authorization audit logs for security compliance and review. Maps to storyfield_ai_auth_audit_logs primary fields."},"IStoryfieldAiExternalApiFailure.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this API failure event (PK, UUID)."},"storyfield_ai_authenticateduser_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the authenticated user involved in this API failure event."},"storyfield_ai_story_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the story impacted by this API failure event."},"api_type":{"type":"string","description":"External API type string for which the failure occurred (e.g., 'openai', 'asr', 'tts', 'spring_backend', 's3', etc)."},"endpoint":{"type":"string","description":"API endpoint or resource path that experienced the failure."},"http_method":{"type":"string","description":"HTTP method of failed request (GET, POST, PUT, etc)."},"error_code":{"type":"string","description":"System-specific code, status, or identifier for this API failure."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-form, developer- or system-generated error description/message."},"retry_count":{"type":"integer","description":"Number of times the failed operation was retried (including original)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the API failure event was created/logged."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for incident response or cleanup (null if still present)."}},"required":["id","storyfield_ai_authenticateduser_id","storyfield_ai_story_id","api_type","endpoint","http_method","error_code","error_message","retry_count","created_at","deleted_at"],"description":"Summary/row display for external API call failures from storyfield_ai_external_api_failures. Useful for incident, reliability, and technical troubleshooting dashboards."},"IStoryfieldAiSystemPolicy.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the system policy summary.\n\nSee storyfield_ai_system_policies.id. Generated automatically at record creation."},"policy_code":{"type":"string","description":"Business-unique code for referencing the system policy.\n\nSee storyfield_ai_system_policies.policy_code. Used programmatically for policy checks throughout the service."},"name":{"type":"string","description":"Human-readable name for the policy.\n\nSee storyfield_ai_system_policies.name."},"value":{"type":"string","description":"Current value for the policy.\n\nSee storyfield_ai_system_policies.value. May reflect quotas, feature toggles, JSON blobs, or configuration primitives."},"type":{"type":"string","description":"Type of the value (e.g., 'boolean', 'int', 'string', 'json', 'duration').\n\nSee storyfield_ai_system_policies.type."},"active":{"type":"boolean","description":"Whether the policy is currently active/enforced.\n\nSee storyfield_ai_system_policies.active."},"description":{"type":"string","description":"Detailed business/technical policy description.\n\nOptional for summary views but available for documentation. See storyfield_ai_system_policies.description."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this policy was last updated.\n\nSee storyfield_ai_system_policies.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp if the policy is no longer active/logically removed. Null if active. See storyfield_ai_system_policies.deleted_at."}},"required":["id","policy_code","name","value","type","active","updated_at"],"description":"Summary view for a global system policy setting controlling business, feature, or technical rules.\n\nBased on storyfield_ai_system_policies. Used for listing/overview scenarios in admin policy management, omitting full description and value history. Contains core metadata (policy_code, name, value, type, activity status, and audit timestamps)."},"IStoryfieldAiDeploymentLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the deployment/rollback event log.\n\nMatches storyfield_ai_deployment_logs.id. For direct reference."},"deployment_label":{"type":"string","description":"Label naming the deployment or rollback event (e.g., version tag, branch, ticket).\n\nFrom storyfield_ai_deployment_logs.deployment_label."},"action_type":{"type":"string","description":"Type of operation: 'deploy', 'rollback', 'hotfix', 'config-change', etc.\n\nFrom storyfield_ai_deployment_logs.action_type."},"environment":{"type":"string","description":"Target runtime environment for this deployment/rollback (e.g., 'production', 'staging', 'development').\n\nFrom storyfield_ai_deployment_logs.environment."},"status":{"type":"string","description":"Current/last status of the deployment event (e.g., 'success', 'failed', 'in-progress', 'aborted').\n\nFrom storyfield_ai_deployment_logs.status."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this deployment/rollback event was initiated.\n\nFrom storyfield_ai_deployment_logs.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this event record was last updated.\n\nFrom storyfield_ai_deployment_logs.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of deletion (if soft-deleted). Null if active. See storyfield_ai_deployment_logs.deleted_at."}},"required":["id","deployment_label","action_type","environment","status","created_at","updated_at"],"description":"Summary of a deployment, rollback, hotfix, or config-change event in platform operations.\n\nBased on storyfield_ai_deployment_logs. Omits full summary text/details; intended for list/search reporting in admin UIs or audit dashboards. Includes minimal identifying context, status, and timeline."},"IStoryfieldAiServiceAlert.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the service alert event record.\n\nMatches storyfield_ai_service_alerts.id."},"alert_type":{"type":"string","description":"Category of the alert: 'error', 'warning', 'info', 'quota', 'incident', 'recovery', etc.\n\nFrom storyfield_ai_service_alerts.alert_type."},"alert_code":{"type":"string","description":"Event-specific alert, technical, or business code (e.g., 'AUTH_401_012', 'DEPLOY_FAILED', 'S3_UPLOAD_ERROR').\n\nFrom storyfield_ai_service_alerts.alert_code."},"environment":{"type":"string","description":"Target operation environment (e.g., 'production', 'staging', 'development').\n\nFrom storyfield_ai_service_alerts.environment."},"resolved":{"type":"boolean","description":"Whether this service alert/event has been administratively resolved.\n\nFrom storyfield_ai_service_alerts.resolved."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of the initial alert/event log creation.\n\nFrom storyfield_ai_service_alerts.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this event record.\n\nFrom storyfield_ai_service_alerts.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if event is logically removed. Null if still active. See storyfield_ai_service_alerts.deleted_at."}},"required":["id","alert_type","alert_code","environment","resolved","created_at","updated_at"],"description":"Summary report for a technical/business system alert event, as logged by the service platform.\n\nSchema based on storyfield_ai_service_alerts—used for monitoring, dashboard, or reporting display. Contains identifying metadata, status, environment, and audit timestamps. Excludes full alert content and resolution note for summary views."}}}}