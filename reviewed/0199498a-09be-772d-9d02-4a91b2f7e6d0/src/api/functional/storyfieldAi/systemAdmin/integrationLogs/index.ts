import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiIntegrationLog } from "../../../../structures/IStoryfieldAiIntegrationLog";
import { IPageIStoryfieldAiIntegrationLog } from "../../../../structures/IPageIStoryfieldAiIntegrationLog";

/**
 * Search and retrieve paginated integration event logs
 * (storyfield_ai_integration_logs).
 *
 * Retrieve a filtered and paginated list of integration event and audit logs
 * from the system. This allows designated administrators to search, filter, and
 * view integration events based on their type, subsystem, status, and
 * timestamps.
 *
 * This operation is restricted to users with 'systemAdmin' role as integration
 * logs may include sensitive details regarding external API failures, connector
 * details, or operational context relevant for compliance and incident
 * management. The search request supports criteria such as event type,
 * subsystem, time range, and free-text search on error and status fields.
 *
 * Integration logs are sourced from the storyfield_ai_integration_logs table,
 * which maintains comprehensive records of systemic events tied to other core
 * tables. Results are paginated and may be sorted as needed to facilitate
 * review during monitoring, compliance checks, or troubleshooting sessions.
 * Error handling covers missing/invalid search parameters, excessive result
 * window, or insufficient role permissions.
 *
 * @param props.connection
 * @param props.body Search filters, pagination, and sorting criteria for
 *   integration event log retrieval.
 * @path /storyfieldAi/systemAdmin/integrationLogs
 * @accessor api.functional.storyfieldAi.systemAdmin.integrationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, pagination, and sorting criteria for integration
     * event log retrieval.
     */
    body: IStoryfieldAiIntegrationLog.IRequest;
  };
  export type Body = IStoryfieldAiIntegrationLog.IRequest;
  export type Response = IPageIStoryfieldAiIntegrationLog;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/integrationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/integrationLogs";
  export const random = (): IPageIStoryfieldAiIntegrationLog =>
    typia.random<IPageIStoryfieldAiIntegrationLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve integration event log detail (storyfield_ai_integration_logs) by ID.
 *
 * Retrieve full details of an individual integration event log by specifying
 * its unique integrationLogId in the path. This provides system administrators
 * access to complete event metadata, including event type, subsystem, status,
 * message, correlation/request id, and timestamp details.
 *
 * Access to this operation is limited strictly to users with the 'systemAdmin'
 * role due to the sensitive nature of integration event contents, which may
 * include error stack traces, system status codes, and operational diagnostics.
 * The log is retrieved from the storyfield_ai_integration_logs table and
 * relates to cross-system function boundaries (e.g., API calls with user or
 * story context).
 *
 * Proper validation is enforced to ensure the requested log exists and the user
 * has appropriate authorization. Errors are returned for missing or
 * unauthorized log access or invalid identifier formats.
 *
 * @param props.connection
 * @param props.integrationLogId Unique identifier of the integration event log
 *   to retrieve.
 * @path /storyfieldAi/systemAdmin/integrationLogs/:integrationLogId
 * @accessor api.functional.storyfieldAi.systemAdmin.integrationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the integration event log to retrieve. */
    integrationLogId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiIntegrationLog;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/integrationLogs/:integrationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/integrationLogs/${encodeURIComponent(props.integrationLogId ?? "null")}`;
  export const random = (): IStoryfieldAiIntegrationLog =>
    typia.random<IStoryfieldAiIntegrationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("integrationLogId")(() =>
        typia.assert(props.integrationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
