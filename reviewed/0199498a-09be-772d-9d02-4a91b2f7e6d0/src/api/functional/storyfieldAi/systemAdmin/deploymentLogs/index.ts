import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiDeploymentLog } from "../../../../structures/IStoryfieldAiDeploymentLog";
import { IPageIStoryfieldAiDeploymentLog } from "../../../../structures/IPageIStoryfieldAiDeploymentLog";

/**
 * Create a new deployment/rollback event log entry
 * (storyfield_ai_deployment_logs).
 *
 * This operation enables system administrators to record every deployment,
 * rollback, hotfix, configuration change, or related system event affecting the
 * StoryField AI server's environment. When invoked, a new log record is created
 * in the storyfield_ai_deployment_logs table, capturing action type, deployment
 * label, environment, initiator, outcome, status, summary, and timestamps.
 *
 * Strict input validation is enforced: deployment_label must be unique for the
 * environment, action_type is constrained to allowed values (e.g., deploy,
 * rollback, hotfix, config-change), and referential integrity is maintained.
 * The operation is only allowed for system administrators with valid
 * authentication. All operations are recorded for compliance. Other relevant
 * APIs: PATCH /deploymentLogs for log search, GET
 * /deploymentLogs/{deploymentLogId} for record retrieval, PUT
 * /deploymentLogs/{deploymentLogId} for log updates.
 *
 * @param props.connection
 * @param props.body Full information for the event log entry to be created,
 *   such as deployment metadata, action type, environment, status, initiator,
 *   and summary.
 * @path /storyfieldAi/systemAdmin/deploymentLogs
 * @accessor api.functional.storyfieldAi.systemAdmin.deploymentLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Full information for the event log entry to be created, such as
     * deployment metadata, action type, environment, status, initiator, and
     * summary.
     */
    body: IStoryfieldAiDeploymentLog.ICreate;
  };
  export type Body = IStoryfieldAiDeploymentLog.ICreate;
  export type Response = IStoryfieldAiDeploymentLog;

  export const METADATA = {
    method: "POST",
    path: "/storyfieldAi/systemAdmin/deploymentLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/deploymentLogs";
  export const random = (): IStoryfieldAiDeploymentLog =>
    typia.random<IStoryfieldAiDeploymentLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve deployment/rollback event logs in a paginated, filterable
 * list (storyfield_ai_deployment_logs).
 *
 * This operation enables system administrators and authorized support staff to
 * retrieve the history of all deploy, rollback, and hotfix events on the
 * StoryField AI server. The storyfield_ai_deployment_logs table is queried with
 * filtering, search, and pagination parameters so that relevant operational
 * events can be rapidly identified by status, environment, or
 * deployment_label.
 *
 * All returned records include deployment label, action type (deploy, rollback,
 * hotfix, config-change), environment, initiator, status
 * (success/failed/in-progress/aborted), timestamps, and summary. Sensitive
 * information is redacted as appropriate. Audit logs facilitate compliance,
 * troubleshooting, and accountability.
 *
 * Only admins or privileged operations team members should use this API. Access
 * is strictly logged and all usage is monitored for security compliance.
 * Related APIs include GET /deploymentLogs/{deploymentLogId} for detailed
 * viewing, and POST/PUT endpoints for log creation and update.
 *
 * @param props.connection
 * @param props.body List, search, and pagination filter for deployment/rollback
 *   event logs of the StoryField AI service.
 * @path /storyfieldAi/systemAdmin/deploymentLogs
 * @accessor api.functional.storyfieldAi.systemAdmin.deploymentLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * List, search, and pagination filter for deployment/rollback event
     * logs of the StoryField AI service.
     */
    body: IStoryfieldAiDeploymentLog.IRequest;
  };
  export type Body = IStoryfieldAiDeploymentLog.IRequest;
  export type Response = IPageIStoryfieldAiDeploymentLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/deploymentLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/deploymentLogs";
  export const random = (): IPageIStoryfieldAiDeploymentLog.ISummary =>
    typia.random<IPageIStoryfieldAiDeploymentLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed record for a specific deployment or rollback event log
 * (storyfield_ai_deployment_logs).
 *
 * This API operation retrieves all relevant information for a single
 * deployment, rollback, or hotfix log entry identified by deploymentLogId in
 * the storyfield_ai_deployment_logs table. It includes deployment label, action
 * type (deploy, rollback, hotfix), target environment, initiator identity,
 * status, audit summary, timestamps, and deletion status if any, along with
 * supplementary notes.
 *
 * Used by system administrators for postmortem investigations, compliance
 * audits, or detailed history review. Only privileged or admin roles should
 * access this API. Requires strict authentication, with all accesses logged for
 * compliance. Returns full record with all available fields for the identified
 * event log.
 *
 * @param props.connection
 * @param props.deploymentLogId The unique identifier (UUID) for the target
 *   deployment log event.
 * @path /storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId
 * @accessor api.functional.storyfieldAi.systemAdmin.deploymentLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) for the target deployment log event. */
    deploymentLogId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiDeploymentLog;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/deploymentLogs/${encodeURIComponent(props.deploymentLogId ?? "null")}`;
  export const random = (): IStoryfieldAiDeploymentLog =>
    typia.random<IStoryfieldAiDeploymentLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deploymentLogId")(() =>
        typia.assert(props.deploymentLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing deployment/rollback event log entry by deploymentLogId
 * (storyfield_ai_deployment_logs).
 *
 * This API operation is for system administrators to modify an existing
 * deployment, rollback, or related operational event record in the deployment
 * logs table. By specifying deploymentLogId, admins may update fields such as
 * the operational status (e.g., in-progress, failed, success), deployment
 * summary, or add a resolution note. This supports complete incident lifecycle
 * documentation for compliance and troubleshooting audits.
 *
 * Only users with systemAdmin privileges may update log entries. All updates
 * are tracked for audit, change history, and security purposes. Error handling
 * includes protection of required fields, uniqueness of deployment_label within
 * environment, and referential constraints. Use in conjunction with record
 * GET/PATCH endpoints for review.
 *
 * @param props.connection
 * @param props.deploymentLogId The unique identifier (UUID) for the deployment
 *   or rollback event log to update.
 * @param props.body Patchable fields for the deployment/rollback event log,
 *   such as status, summary, or resolution note.
 * @path /storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId
 * @accessor api.functional.storyfieldAi.systemAdmin.deploymentLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier (UUID) for the deployment or rollback event log
     * to update.
     */
    deploymentLogId: string & tags.Format<"uuid">;

    /**
     * Patchable fields for the deployment/rollback event log, such as
     * status, summary, or resolution note.
     */
    body: IStoryfieldAiDeploymentLog.IUpdate;
  };
  export type Body = IStoryfieldAiDeploymentLog.IUpdate;
  export type Response = IStoryfieldAiDeploymentLog;

  export const METADATA = {
    method: "PUT",
    path: "/storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/systemAdmin/deploymentLogs/${encodeURIComponent(props.deploymentLogId ?? "null")}`;
  export const random = (): IStoryfieldAiDeploymentLog =>
    typia.random<IStoryfieldAiDeploymentLog>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deploymentLogId")(() =>
        typia.assert(props.deploymentLogId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a deployment log record (storyfield_ai_deployment_logs
 * table).
 *
 * This API endpoint allows system administrators to permanently remove a
 * deployment log record from the database. Its primary purpose is to enforce
 * compliance with data retention policies or correct operational errors related
 * to service deployments. The deployment log identified by deploymentLogId will
 * be deleted entirely, making the information irrecoverable.
 *
 * Only administrators with the "systemAdmin" role are authorized to execute
 * this operation. All removals must be logged for audit and compliance
 * purposes, guaranteeing traceability of administrative actions. Attempts to
 * delete a nonexistent or unauthorized log will return clear error messages, as
 * determined by business rules.
 *
 * This operation relates to the storyfield_ai_deployment_logs Prisma model,
 * which stores deployment, rollback, and hotfix event data with status,
 * initiator, environment, and summary information. There are no soft-deletion
 * semantics: all removed records are hard deleted. Related administrative
 * records should also be reviewed for downstream impacts.
 *
 * @param props.connection
 * @param props.deploymentLogId Unique identifier of the deployment log to
 *   remove.
 * @path /storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId
 * @accessor api.functional.storyfieldAi.systemAdmin.deploymentLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the deployment log to remove. */
    deploymentLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/storyfieldAi/systemAdmin/deploymentLogs/:deploymentLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/deploymentLogs/${encodeURIComponent(props.deploymentLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deploymentLogId")(() =>
        typia.assert(props.deploymentLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
