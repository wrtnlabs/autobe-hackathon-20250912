import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiAuthenticatedusers } from "../../../../structures/IStoryfieldAiAuthenticatedusers";
import { IPageIStoryfieldAiAuthenticatedusers } from "../../../../structures/IPageIStoryfieldAiAuthenticatedusers";

/**
 * Retrieve and search a paginated list of authenticated users
 * (storyfield_ai_authenticatedusers).
 *
 * Retrieve a filtered and paginated list of authenticated users who are
 * registered with and have passed verification through the Spring backend. This
 * operation enables searching by fields such as email, external user ID, and
 * creation or update date, so that system administrators can audit user
 * on-boarding, monitor activity, and review account statuses for compliance
 * purposes.
 *
 * User access is strictly limited to those with system administrator
 * privileges. Sensitive fields like email and external user ID are only visible
 * to admins. The API enforces permission checks before executing any user data
 * searches. Soft-deleted (deactivated) users are included or excluded based on
 * filter options provided in the request body.
 *
 * The request structure and available filters are determined by the schema
 * IStoryfieldAiAuthenticatedusers.IRequest. Responses include paginated user
 * summaries via the IPageIStoryfieldAiAuthenticatedusers.ISummary type. The
 * result is suitable for admin dashboards or compliance auditing processes.
 *
 * Related list and detail endpoints should use similar authorization and
 * traceability controls for GDPR and audit requirements.
 *
 * @param props.connection
 * @param props.body Search filters and pagination details to retrieve relevant
 *   users.
 * @path /storyfieldAi/systemAdmin/authenticatedUsers
 * @accessor api.functional.storyfieldAi.systemAdmin.authenticatedUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination details to retrieve relevant users. */
    body: IStoryfieldAiAuthenticatedusers.IRequest;
  };
  export type Body = IStoryfieldAiAuthenticatedusers.IRequest;
  export type Response = IPageIStoryfieldAiAuthenticatedusers.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/authenticatedUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/authenticatedUsers";
  export const random = (): IPageIStoryfieldAiAuthenticatedusers.ISummary =>
    typia.random<IPageIStoryfieldAiAuthenticatedusers.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details for a single authenticated user
 * (storyfield_ai_authenticatedusers).
 *
 * Fetch all details for one authenticated user, as registered and verified via
 * the Spring backend. The operation provides admin access to the user's
 * external_user_id, email, actor_type, audit timestamps, and soft-deleted
 * status, offering visibility into the lifecycle and compliance state of
 * individual accounts.
 *
 * Only system administrators can access this operation, which enforces strict
 * permission checks to ensure privacy and data protection. The
 * 'authenticatedUserId' parameter must reference an existing user record;
 * errors will be returned if the user does not exist or has been fully purged.
 *
 * This API utilizes the IStoryfieldAiAuthenticatedusers response schema for
 * detailed user information, supporting admin dashboards, investigation
 * workflows, and user account reviews.
 *
 * @param props.connection
 * @param props.authenticatedUserId Unique identifier of the authenticated user
 *   to retrieve.
 * @path /storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId
 * @accessor api.functional.storyfieldAi.systemAdmin.authenticatedUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the authenticated user to retrieve. */
    authenticatedUserId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiAuthenticatedusers;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/authenticatedUsers/${encodeURIComponent(props.authenticatedUserId ?? "null")}`;
  export const random = (): IStoryfieldAiAuthenticatedusers =>
    typia.random<IStoryfieldAiAuthenticatedusers>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticatedUserId")(() =>
        typia.assert(props.authenticatedUserId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an authenticated user's profile or metadata
 * (storyfield_ai_authenticatedusers).
 *
 * Update core fields for a single authenticated user, referenced by the
 * authenticatedUserId. Admins may update email, actor_type, or other permitted
 * attributes, with all modifications validated per business rules and
 * compliance requirements. All change actions are fully audited and
 * timestamped, maintaining traceability for regulatory and operational review.
 *
 * Edit permissions are exclusive to system administrators, and the endpoint
 * enforces strict access control. Any changes that conflict with uniqueness
 * constraints, such as duplicate email or invalid external_user_id, will result
 * in error responses with descriptive messages."Soft delete" rules apply if
 * relevant fields are involved.
 *
 * This operation returns the updated user record via
 * IStoryfieldAiAuthenticatedusers schema. Related audit and compliance logs are
 * generated in parallel but are not exposed via this interface.
 *
 * @param props.connection
 * @param props.authenticatedUserId Unique identifier of the authenticated user
 *   to modify.
 * @param props.body Fields to update for the target authenticated user.
 * @path /storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId
 * @accessor api.functional.storyfieldAi.systemAdmin.authenticatedUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the authenticated user to modify. */
    authenticatedUserId: string & tags.Format<"uuid">;

    /** Fields to update for the target authenticated user. */
    body: IStoryfieldAiAuthenticatedusers.IUpdate;
  };
  export type Body = IStoryfieldAiAuthenticatedusers.IUpdate;
  export type Response = IStoryfieldAiAuthenticatedusers;

  export const METADATA = {
    method: "PUT",
    path: "/storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/systemAdmin/authenticatedUsers/${encodeURIComponent(props.authenticatedUserId ?? "null")}`;
  export const random = (): IStoryfieldAiAuthenticatedusers =>
    typia.random<IStoryfieldAiAuthenticatedusers>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticatedUserId")(() =>
        typia.assert(props.authenticatedUserId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (deactivate) an authenticated user account
 * (storyfield_ai_authenticatedusers).
 *
 * Administratively deactivate (soft delete) an authenticated user account by
 * marking its deleted_at timestamp. This effectively disables the account
 * without erasing audit data, maintaining compliance and traceability. The
 * operation is strictly available to system administrators and logs all actions
 * for future review.
 *
 * On successful execution, the account becomes inaccessible for normal
 * operations. Attempts to delete already soft-deleted or non-existent users
 * will result in error responses. The endpoint enforces permission checks and
 * may provide a confirmation message or status code with no user details
 * included in response.
 *
 * Related endpoints support recovery, audit, and listing of deactivated users
 * in compliance with business and legal rules.
 *
 * @param props.connection
 * @param props.authenticatedUserId Unique identifier of the authenticated user
 *   to deactivate.
 * @path /storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId
 * @accessor api.functional.storyfieldAi.systemAdmin.authenticatedUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the authenticated user to deactivate. */
    authenticatedUserId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/storyfieldAi/systemAdmin/authenticatedUsers/:authenticatedUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/authenticatedUsers/${encodeURIComponent(props.authenticatedUserId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticatedUserId")(() =>
        typia.assert(props.authenticatedUserId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
