import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiS3UploadHistory } from "../../../../structures/IStoryfieldAiS3UploadHistory";
import { IPageIStoryfieldAiS3UploadHistory } from "../../../../structures/IPageIStoryfieldAiS3UploadHistory";

/**
 * Search and retrieve paginated S3 upload histories
 * (storyfield_ai_s3_upload_histories).
 *
 * Search and retrieve a filtered, paginated list of S3 upload history events
 * for the system. System administrators can review recent and historical upload
 * attempts, status outcomes (e.g., SUCCESS, FAILURE), file details, and error
 * diagnostics.
 *
 * Access is restricted to the 'systemAdmin' role due to inclusion of sensitive
 * file paths, error messages, and operational diagnostics linked to
 * user-generated content. Search criteria include filename, media type, upload
 * status, creation date, and text-based error search; sorting for audit use
 * cases is also supported.
 *
 * This operation references the storyfield_ai_s3_upload_histories table,
 * logging all S3 upload events, traceability details, and error outcomes for
 * compliance and platform health analysis. Standard error handling applies for
 * permission checks, parameter validation, and result set constraints.
 *
 * @param props.connection
 * @param props.body Search and pagination filters for S3 upload history
 *   retrieval.
 * @path /storyfieldAi/systemAdmin/s3UploadHistories
 * @accessor api.functional.storyfieldAi.systemAdmin.s3UploadHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination filters for S3 upload history retrieval. */
    body: IStoryfieldAiS3UploadHistory.IRequest;
  };
  export type Body = IStoryfieldAiS3UploadHistory.IRequest;
  export type Response = IPageIStoryfieldAiS3UploadHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/s3UploadHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/s3UploadHistories";
  export const random = (): IPageIStoryfieldAiS3UploadHistory =>
    typia.random<IPageIStoryfieldAiS3UploadHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve S3 upload history detail (storyfield_ai_s3_upload_histories) by ID.
 *
 * Retrieve detailed S3 upload event information by specifying a unique
 * s3UploadHistoryId in the path. This operation exposes all diagnostic, status,
 * and traceability fields for a single file upload event, which can be critical
 * for postmortem, incident, or compliance review.
 *
 * Access to this endpoint is available only to users with the 'systemAdmin'
 * role, as upload event logs may contain user file names, error diagnostics,
 * internal URIs, or sensitive operational timing. The response includes upload
 * parameters, error context (if any), S3 URL returned by Spring, and audit
 * fields for the associated upload.
 *
 * This operation references the storyfield_ai_s3_upload_histories table and
 * enforces role and identifier format validation. Errors are returned where
 * access is unauthorized, the upload history record does not exist, or the
 * s3UploadHistoryId is incorrectly formatted.
 *
 * @param props.connection
 * @param props.s3UploadHistoryId Unique identifier of the S3 upload history
 *   event to retrieve.
 * @path /storyfieldAi/systemAdmin/s3UploadHistories/:s3UploadHistoryId
 * @accessor api.functional.storyfieldAi.systemAdmin.s3UploadHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the S3 upload history event to retrieve. */
    s3UploadHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiS3UploadHistory;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/s3UploadHistories/:s3UploadHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/s3UploadHistories/${encodeURIComponent(props.s3UploadHistoryId ?? "null")}`;
  export const random = (): IStoryfieldAiS3UploadHistory =>
    typia.random<IStoryfieldAiS3UploadHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("s3UploadHistoryId")(() =>
        typia.assert(props.s3UploadHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
