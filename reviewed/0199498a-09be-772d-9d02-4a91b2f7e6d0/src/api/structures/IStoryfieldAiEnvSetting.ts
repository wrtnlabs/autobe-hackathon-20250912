import { tags } from "typia";

/**
 * An environment variable or configuration setting for a specific runtime
 * environment in the StoryField AI platform. Represents a key-value pair with
 * environment context (development, staging, production, etc.) and audit trail
 * for configuration changes and compliance review.
 *
 * Each record logs who made the change, when, and whyâ€”the essential audit and
 * traceability fields for secure, compliant management of runtime config. All
 * secrets/credentials/values should be assigned according to operational best
 * practices.
 *
 * Examples include API tokens, storage endpoints, or feature toggles.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiEnvSetting = {
  /**
   * Primary Key. Unique identifier for this environment setting record as a
   * UUID string.
   *
   * This field is generated by the database and is immutable once created.
   * Used for direct referencing and audit logging. Always required for
   * update, retrieval, and audit operations. Sourced directly from the
   * storyfield_ai_env_settings Prisma schema.
   *
   * Example: "ba7c8e41-efd7-409e-884d-87a6aefaf0d7"
   */
  id: string & tags.Format<"uuid">;

  /**
   * Configuration key name. Matches a single environment variable or logical
   * config item (e.g., 'OPENAI_API_KEY').
   *
   * This value must be unique per environment and reflects the actual
   * variable name used in runtime configuration. Should be human-intelligible
   * and adhere to naming conventions (uppercase, separated by underscores if
   * needed).
   *
   * Example: "SPRING_S3_UPLOAD_URL"
   */
  env_key: string;

  /**
   * Configuration value (mask sensitive data in UI).
   *
   * Represents the actual value for this setting, such as API tokens,
   * resource URLs, or other system parameters. Sensitive values should be
   * masked in UI or logs.
   *
   * Example: "sk-xxx..." or "https://.../upload"
   */
  env_value: string;

  /**
   * Environment label (e.g., 'local', 'development', 'staging',
   * 'production').
   *
   * Authors must assign the correct environment context. This makes it
   * possible to distinguish the configuration scope and apply variable sets
   * accordingly. Must be one of the supported environments and validated to
   * avoid cross-environment confusion.
   *
   * Example: "production"
   */
  env_name: string;

  /**
   * Identifier (username, email, or adminId) representing the actor who
   * introduced the change.
   *
   * This value enables auditing of which administrator or operator performed
   * the configuration change. Should always reflect a valid authenticated
   * user.
   *
   * Example: "admin@yourcompany.com"
   */
  changed_by: string;

  /**
   * Human-facing description of why this change was made (e.g., key rotation,
   * urgent bug fix).
   *
   * This field is required for operational compliance and incident review.
   * Must include the business or technical motivation for modifying the
   * configuration.
   *
   * Example: "API Key rotation for security compliance."
   */
  change_reason: string;

  /**
   * Datetime when this setting entry was created; marks effective date of
   * config.
   *
   * Set by the system. Follows ISO 8601 date-time string format. Used for
   * audit trails and policy compliance review.
   *
   * Example: "2024-08-09T09:31:17.150Z"
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Datetime of last update (for correction or rollover).
   *
   * Managed by the system and updated whenever the record is amended. ISO
   * 8601 date-time string.
   *
   * Example: "2025-03-15T15:18:33.500Z"
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for audit log. Null unless deleted logically.
   *
   * When set to a date-time string, this indicates the setting has been
   * logically removed and is no longer active. If null, the record is
   * active.
   *
   * Example: null or "2024-12-01T11:47:23.938Z"
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiEnvSetting {
  /**
   * Search/filter/pagination input for retrieving environment settings from
   * the 'storyfield_ai_env_settings' table. Allows for flexible search by
   * environment, key, changed_by actor, page, and record limits. All
   * parameters are optional; defaults may result in returning the full index
   * or system default window.
   */
  export type IRequest = {
    /**
     * Name of the application environment to filter on (e.g., 'production',
     * 'staging', 'development', 'local'). Matches 'env_name' in
     * env_settings table.
     */
    env_name?: string | undefined;

    /**
     * Filter for settings by configuration key name (matches 'env_key' in
     * the env_settings table).
     */
    env_key?: string | undefined;

    /**
     * Limit results to environment settings last changed by or set by the
     * specified user/admin identity (e.g., email or adminId).
     */
    changed_by?: string | undefined;

    /**
     * Page number for pagination (1-based index). Used with 'limit' to
     * retrieve result window.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of results per page. Used for pagination; should be
     * kept reasonable for performance.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * The payload for creating a new environment setting or configuration item.
   * Requires explicit assignment of environment context, key, value, author,
   * and motivation for audit purposes. No system-generated fields should be
   * included.
   */
  export type ICreate = {
    /**
     * The key (name) of the environment setting for runtime configuration.
     *
     * Must match exact runtime key naming conventions and be unique per
     * environment.
     */
    env_key: string;

    /**
     * The value to assign to this environment setting (such as API keys,
     * URLs, etc).
     *
     * Sensitive values are to be masked in UI but fully stored in the DB
     * record.
     */
    env_value: string;

    /**
     * String identifier for the environment associated with this setting
     * ("development", "staging", "production", etc).
     *
     * Defines the scope of this configuration.
     */
    env_name: string;

    /**
     * The unique identifier or business contact (email, admin account) of
     * the person making this change.
     *
     * Required for audit trail and operational compliance logging.
     */
    changed_by: string;

    /**
     * The explicit business/technical reason for this configuration action.
     *
     * Included for traceability, incident investigation, and compliance.
     */
    change_reason: string;
  };

  /**
   * The request body for updating an existing environment setting. Only
   * fields being updated must be supplied (all are optional), but at least
   * one must be set per update. All updates are tracked in audit logs with
   * updated_by and reason for modification.
   */
  export type IUpdate = {
    /**
     * Updated key/name if the setting needs to be migrated or renamed.
     *
     * Must preserve logical key structure and adhere to naming rules.
     */
    env_key?: string | undefined;

    /**
     * Updated value for the environment configuration (e.g., replaced API
     * key, URL, or feature toggle value).
     *
     * Sensitive values should be masked in UI or logs.
     */
    env_value?: string | undefined;

    /**
     * Updated environment label (e.g., switch from 'staging' to
     * 'production') if configuration scope changes.
     *
     * Rarely changed; use only when correcting environment assignment
     * errors.
     */
    env_name?: string | undefined;

    /**
     * Updated admin or user performing the configuration change.
     *
     * Used for audit trail. Every update must specify who performed the
     * change.
     */
    changed_by?: string | undefined;

    /**
     * Updated business/technical reason for the configuration adjustment.
     *
     * Should describe the logic for the update (e.g., 'rotating old key',
     * 'updating endpoint', etc).
     */
    change_reason?: string | undefined;
  };
}
