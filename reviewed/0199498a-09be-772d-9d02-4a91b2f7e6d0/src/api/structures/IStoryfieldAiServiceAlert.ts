import { tags } from "typia";

/**
 * Represents a system or service event alert. Used for logging operational
 * events, incidents, system warnings, or technical status updates in the
 * StoryField AI platform. This schema includes all critical business and
 * compliance attributes necessary for service health monitoring and incident
 * tracking. It directly reflects the storyfield_ai_service_alerts table in the
 * database schema and ensures complete audit coverage for every alert
 * occurrence.
 *
 * Properties include alert type (e.g., error, warning, quota, info), code,
 * content, environment, resolution status, and audit trail timestamps. All UUID
 * and date-time fields use the standard ISO 8601 format. This type is
 * referenced in alert detail retrieval, update, and creation APIs.
 *
 * Data corresponds to system events fundamental for operational transparency,
 * compliance, and administrative review.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiServiceAlert = {
  /**
   * Unique identifier of the alert event record. Always a valid UUID;
   * generated on record creation. Used as primary key and global reference
   * for all alert operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Categorical type describing the event context: examples include 'error',
   * 'warning', 'info', 'quota', 'incident', or 'recovery'. This field drives
   * alert filtering, monitoring dashboards, and incident workflow
   * categorization.
   */
  alert_type: string;

  /**
   * Optional domain or technical code assigned to the alert (e.g.,
   * 'AUTH_401_012', 'S3_UPLOAD_FAIL'). Enables automated processing, search,
   * or grouping within operational contexts.
   */
  alert_code: string;

  /**
   * Human-readable description or payload describing the alert, incident
   * message, root cause, or business impact summary. Used for administrator
   * review and compliance tracking.
   */
  content: string;

  /**
   * Target environment in which the event occurred. Typically matches
   * deployment environments such as 'production', 'staging', 'development',
   * or 'local'. Drives environment-scoped alert dashboards and compliance
   * filtering.
   */
  environment: string;

  /**
   * Indicates if the alert event has been addressed and formally closed (true
   * = resolved, false = active/unresolved). Updates to this property reflect
   * incident/alert workflow status for business and audit controls.
   */
  resolved: boolean;

  /**
   * Closure or remediation note provided by the administrator. Explains
   * actions taken to resolve the event; null if unresolved or not explained.
   */
  resolution_note?: string | null | undefined;

  /**
   * Datetime when the alert or event record was first created (ISO 8601
   * format). Used for incident/audit chronology and operational metrics.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Datetime of the most recent update to the record, such as marking
   * resolved or adding resolution note. Used for incident lifecycle tracking
   * and compliance.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Datetime of soft deletion / deactivation (if alert is withdrawn). Null if
   * still visible/active for operational use. Used only for audit/compliance
   * history.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiServiceAlert {
  /**
   * Flexible, advanced search/filtering and pagination structure for querying
   * service alert/event records. Enables system administrators and
   * operational monitoring interfaces to dynamically target incidents,
   * routine warnings, SLA quota issues, and service outage/health metrics for
   * review, diagnosis, and dashboard visualization.
   *
   * Supports filtering by alert type, code, environment, resolution status,
   * free-text content search, time window restriction, pagination, and
   * sorting. All filters and search parameters are strictly mapped to
   * matching fields and semantics in the storyfield_ai_service_alerts
   * schema.
   *
   * This interface powers incident response, compliance triage, system health
   * monitoring, and root-cause analysis for the StoryField AI operation
   * team.
   */
  export type IRequest = {
    /**
     * List of alert types to filter by. Common values: 'error', 'warning',
     * 'info', 'incident', 'quota', 'recovery', etc.
     *
     * Allows targeting of dashboard sections, event class, or workflow in
     * real-time incident management.
     */
    alert_types?: string[] | undefined;

    /**
     * Filter results by a specific alert code. Codes are tied to
     * business-defined events (e.g., 'AUTH_401_012', 'S3_UPLOAD_FAIL').
     *
     * This enables rapid review and aggregation of shared failure/incident
     * patterns.
     */
    alert_code?: string | undefined;

    /**
     * Limit search to a particular environment, such as 'production',
     * 'staging', 'development', or 'local'. Business/monitoring
     * perspectives are strongly tied to separation by environment. Matches
     * the environment field in alert record.
     */
    environment?: string | undefined;

    /**
     * Only return alerts that are resolved (true), unresolved/active
     * (false), or both (unset/undefined). This is critical for real-time
     * health monitoring dashboards, operational triage, and closure
     * metrics.
     */
    resolved?: boolean | undefined;

    /**
     * Free-text search across alert content, code, and diagnostic fields.
     * Used for dynamic incident investigation, root cause tracing, or
     * ad-hoc data exploration in dashboards and forensics.
     */
    search?: string | undefined;

    /**
     * Lower bound (ISO 8601 timestamp) for alert creation/incident time.
     * Enables incident window filtering for compliance, root-cause, and
     * operational monitoring.
     */
    from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound (ISO 8601 timestamp) for alert creation/incident time.
     * Enables time-bounded searches and snapshotting for incident
     * response.
     */
    to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination page index (0-based or 1-based depending on implementation
     * convention). Default as per service documentation.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Page sizeâ€”how many alerts per returned result window. Standard
     * business default may range 20-100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Field to sort result set by (e.g., 'created_at', 'environment',
     * 'alert_type', etc.). Used for custom ordering by operational
     * criticality.
     */
    sort_by?: string | undefined;

    /**
     * Sorting direction for result set. Must be either 'asc' (ascending) or
     * 'desc' (descending).
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Payload format for creating a new service alert event. Used by system
   * administrators to log incidents, technical warnings, quota limit
   * triggered events, or critical system info. Properties include event type,
   * alert code, descriptive content, deployment environment, initial
   * resolution status, and optional closure note.
   *
   * This schema mirrors operational business rules for audit/log creation and
   * maps directly to the administrative alert log in the StoryField AI
   * database model. All creation fields are required except resolution_note,
   * which is optional and nullable.
   */
  export type ICreate = {
    /**
     * Type/category of service alert to record (e.g., 'error', 'incident',
     * 'warning', 'info'). Must match business alert taxonomy for
     * operational dashboards.
     */
    alert_type: string;

    /**
     * Domain or technical code used for programmatic search, incident
     * correlation, and administrative grouping (e.g., 'AUTH_401_012').
     */
    alert_code: string;

    /**
     * Descriptive human-readable text or incident message for reporting and
     * operator insight.
     */
    content: string;

    /**
     * Deployment environment targeted by the alert (e.g., 'production',
     * 'staging', 'development'). Drives alert segmentation and compliance
     * audit scope.
     */
    environment: string;

    /**
     * Indicates if the alert is immediately resolved or remains open for
     * incident workflow.
     */
    resolved: boolean;

    /**
     * Optional closure or remediation note detailing corrective actions or
     * incident handling. Null if not applicable.
     */
    resolution_note?: string | null | undefined;
  };

  /**
   * Request payload for updating a service alert record. Fields are all
   * optional; supports editing of any alert attributes including type, code,
   * description, environment, resolution status, and closure notes.
   *
   * This schema supports partial (patch-style) or full updates/overwrites for
   * all mutable alert fields. System logs must record updater identity, and
   * all updates are tracked for regulatory compliance.
   */
  export type IUpdate = {
    /**
     * (Optional) Change the categorical alert type for this event (error,
     * incident, info, etc.).
     */
    alert_type?: string | undefined;

    /**
     * (Optional) Edit the domain/technical alert code assigned to the alert
     * for search/grouping refinement.
     */
    alert_code?: string | undefined;

    /**
     * (Optional) Administrative update or correction to the human-readable
     * event message/incident note.
     */
    content?: string | undefined;

    /**
     * (Optional) Update the environment context for the event
     * ('production', 'staging', etc.) in case of deployment error or
     * reclassification.
     */
    environment?: string | undefined;

    /**
     * (Optional) Set the resolved status, e.g., after incident workflow
     * closure (true) or re-opening (false).
     */
    resolved?: boolean | undefined;

    /**
     * (Optional) Closure or remediation note added or modified as part of
     * incident workflow.
     */
    resolution_note?: string | null | undefined;
  };

  /**
   * Summary report for a technical/business system alert event, as logged by
   * the service platform.
   *
   * Schema based on storyfield_ai_service_alertsâ€”used for monitoring,
   * dashboard, or reporting display. Contains identifying metadata, status,
   * environment, and audit timestamps. Excludes full alert content and
   * resolution note for summary views.
   */
  export type ISummary = {
    /**
     * Unique identifier for the service alert event record.
     *
     * Matches storyfield_ai_service_alerts.id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Category of the alert: 'error', 'warning', 'info', 'quota',
     * 'incident', 'recovery', etc.
     *
     * From storyfield_ai_service_alerts.alert_type.
     */
    alert_type: string;

    /**
     * Event-specific alert, technical, or business code (e.g.,
     * 'AUTH_401_012', 'DEPLOY_FAILED', 'S3_UPLOAD_ERROR').
     *
     * From storyfield_ai_service_alerts.alert_code.
     */
    alert_code: string;

    /**
     * Target operation environment (e.g., 'production', 'staging',
     * 'development').
     *
     * From storyfield_ai_service_alerts.environment.
     */
    environment: string;

    /**
     * Whether this service alert/event has been administratively resolved.
     *
     * From storyfield_ai_service_alerts.resolved.
     */
    resolved: boolean;

    /**
     * Timestamp of the initial alert/event log creation.
     *
     * From storyfield_ai_service_alerts.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to this event record.
     *
     * From storyfield_ai_service_alerts.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp if event is logically removed. Null if still
     * active. See storyfield_ai_service_alerts.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
