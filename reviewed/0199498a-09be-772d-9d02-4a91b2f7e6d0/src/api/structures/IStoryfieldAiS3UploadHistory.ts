import { tags } from "typia";

/**
 * S3 upload history entity. Records details of every file uploaded via Spring
 * backend for tracing, troubleshooting, and compliance. Used for operational
 * forensics, audit trails, and performance tracking. Each record includes
 * filename, size, media type, upload status, upload endpoint, resulting S3 URI,
 * timestamps, and references to the user and story if applicable.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiS3UploadHistory = {
  /**
   * Unique identifier for the S3 upload history record (UUID). Corresponds to
   * the record's primary key in the database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional reference to the authenticated user who initiated the media
   * upload (UUID). Null if the upload was system-triggered or
   * unauthenticated.
   */
  storyfield_ai_authenticateduser_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Optional reference to the related story (UUID) for this upload event, if
   * applicable. Null if the upload is not directly tied to a story.
   */
  storyfield_ai_story_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Name of the file uploaded, either system-generated or user-supplied. Used
   * for tracking S3 objects and troubleshooting.
   */
  filename: string;

  /**
   * Size of the uploaded file in bytes. Useful for audit trails, policy
   * enforcement, and troubleshooting.
   */
  file_size: number & tags.Type<"int32">;

  /**
   * Type/category of media uploaded (e.g., 'story_image', 'tts_audio',
   * 'asr_audio'). Used for operational filtering and compliance reporting.
   */
  media_type: string;

  /**
   * Outcome status of the upload (e.g., 'SUCCESS', 'FAILURE', 'RETRY',
   * 'PARTIAL'). Encodes the final result for diagnostic and compliance
   * purposes.
   */
  upload_status: string;

  /**
   * Optional error or diagnostic message if a failure occurred during upload.
   * Null if upload was successful.
   */
  error_message?: string | null | undefined;

  /**
   * Spring backend upload endpoint used for this upload (full URI). Used for
   * traceability and troubleshooting.
   */
  spring_upload_url: string;

  /**
   * URL to the resulting S3 object as returned by Spring, if upload was
   * successful. Null if the upload failed or was not completed.
   */
  s3_object_url?: string | null | undefined;

  /**
   * Timestamp when the upload history record was created (ISO 8601 date-time
   * format).
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to this record (ISO 8601 date-time format). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (ISO 8601); set when the record is logically
   * removed. Null if the record is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiS3UploadHistory {
  /**
   * Structured request for retrieving S3 upload history events via advanced
   * filters and pagination.
   *
   * Used to search audit logs for S3 upload attempts in support, reliability,
   * or compliance workflows. Filters span by user or story, media type, file,
   * upload result, error keywords, and time window. Pagination and sorting
   * offer efficient access and review of operational file delivery health.
   */
  export type IRequest = {
    /**
     * Limit S3 upload records to only those initiated by a specific
     * authenticated user. UUID for user. Supports role-based filtering for
     * compliance or incident review.
     */
    storyfield_ai_authenticateduser_id?: string | undefined;

    /**
     * Limit upload records to those associated with a particular story by
     * UUID. Enables incident, recovery, and business report filters.
     */
    storyfield_ai_story_id?: string | undefined;

    /**
     * Search for files by name pattern, extension, or prefix. Useful for
     * troubleshooting, file recovery, and compliance review.
     */
    filename?: string | undefined;

    /**
     * Filter records to a particular media type (e.g., story_image,
     * tts_audio, asr_audio). Useful for targeted operational review.
     */
    media_type?: string | undefined;

    /**
     * Filter S3 upload attempts by business/technical status (SUCCESS,
     * FAILURE, RETRY, PARTIAL). Incident and SLA monitoring.
     */
    upload_status?: string | undefined;

    /**
     * Lower-bound timestamp for time range filtering (ISO8601). Used to
     * focus audit windows.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper-bound timestamp for filtered window (ISO8601). Used for audit,
     * SLA, or business recovery.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Searches error messages for keywords, codes or patterns. Useful when
     * investigating upload failures.
     */
    error_message?: string | undefined;

    /** Paginated query request for result navigation. Page number, 1-based. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of records per page. Business/technical constraint may impose
     * maximums.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sorts results by one of the allowed fields (e.g., created_at,
     * filename, status).
     */
    sort_by?: string | undefined;

    /** Sort ordering for the results: 'asc' or 'desc' only. */
    sort_order?: "asc" | "desc" | undefined;
  };
}
