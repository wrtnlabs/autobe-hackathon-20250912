import { tags } from "typia";

/**
 * A system-wide business, technical, feature toggle, or compliance policy for
 * the StoryField AI platform.
 *
 * Represents a runtime-enforced operational rule, feature toggle, limit, or
 * business constraint that applies globally across all platform functions.
 * Every entry is uniquely identified by policy_code, with descriptive business
 * intent and traceable value. Versioned and fully auditable; only
 * mutable/pausable via administrative endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiSystemPolicy = {
  /**
   * Unique identifier for this policy record. Maps directly to the primary
   * key in the 'storyfield_ai_system_policies' table. Required for all
   * lookup, update, and deletion operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique code representing the policy. Serves as both a business and
   * technical key for runtime policy management in the StoryField AI service.
   * See Prisma schema for naming conventions and validity criteria.
   */
  policy_code: string;

  /**
   * Human-friendly name of the policy. Used in admin UIs, documentation, and
   * runtime introspection.
   */
  name: string;

  /**
   * Detailed documentation string for the business or technical meaning of
   * this policy. Must provide multi-paragraph explanations in English,
   * referencing business purpose, lifecycle, and compliance implications.
   * Commonly required for audit, support, or developer reference.
   */
  description: string;

  /**
   * Current policy value to be enforced in the system. Format varies with
   * policy type; may be stringified JSON or a scalar, according to the
   * property's operational context. See corresponding 'type' property for
   * value expectations.
   */
  value: string;

  /**
   * Type descriptor for the value property. Should match one of the
   * following: 'boolean', 'int', 'string', 'duration', 'json'. Type
   * enforcement is managed at the application level.
   */
  type: string;

  /**
   * Flag indicating whether this policy is currently enforced at runtime.
   * True = active/applicable, false = temporarily paused (policy is defined
   * but not currently honored).
   */
  active: boolean;

  /**
   * Timestamp of policy creation in ISO 8601 UTC format. Set automatically
   * when the record is first inserted. Used for auditing, troubleshooting,
   * chronological sorting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to the policy in ISO 8601 UTC format. Always
   * updated upon modification for change tracking and compliance review.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion marker. Null if active, or ISO 8601 timestamp if the policy
   * is logically removed. Retained for audit and possible future recovery.
   * Never physically deleted except in irreversible hard-purge events.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiSystemPolicy {
  /**
   * Paginated and advanced filtering request type for system policy records.
   * Used by administrators to search, audit, and review all technical,
   * business, and compliance policies governing the StoryField AI service.
   * All properties are optional; filters can be combined as needed.
   * Pagination is standard.
   */
  export type IRequest = {
    /**
     * Optional filter: Unique code identifying the system policy (for
     * precise rule search).
     */
    policy_code?: string | undefined;

    /**
     * Optional filter: Human-readable policy name (partial or exact match
     * allowed).
     */
    name?: string | undefined;

    /**
     * Optional filter: Data type or category of the policy (such as
     * 'boolean', 'int', 'duration', 'json', etc.).
     */
    type?: string | undefined;

    /**
     * Optional filter: Restrict results to policies that are currently
     * enforced (true) or inactive (false).
     */
    active?: boolean | undefined;

    /**
     * Optional filter: Return only policies created at or after this
     * timestamp (ISO 8601 format).
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional filter: Return only policies created at or before this
     * timestamp (ISO 8601 format).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination parameter: current page number for list navigation. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination parameter: maximum number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Represents the required input contract to register a new system policy in
   * the administrative interface.
   *
   * All business and operational rules must be provided and well documented
   * for admin review or runtime enforcement. Creation is only possible with
   * all required metadata fields present.
   */
  export type ICreate = {
    /**
     * Unique policy code for runtime lookup and enforcement. Must be unique
     * within the policy table. Used as the programmatic key in settings and
     * configuration.
     */
    policy_code: string;

    /**
     * Human-readable name for the policy. Shown in UIs and documentation
     * for clarity and purpose.
     */
    name: string;

    /**
     * Detailed explanation of the business rule, technical effect, or
     * compliance requirement for this policy. Must be written in English
     * with sufficient clarity for audit and operational investigation.
     */
    description: string;

    /**
     * Initial policy value. Raw or stringified JSON depending on type.
     * Admins must ensure values match the business and technical
     * enforcement constraints for this code.
     */
    value: string;

    /**
     * Runtime data type for the value property. Supported types: 'boolean',
     * 'int', 'duration', 'string', 'json'. See application business
     * documentation for enforcement rules.
     */
    type: string;

    /**
     * Whether the policy should be enabled upon creation (true) or created
     * in a paused/draft state (false).
     */
    active: boolean;
  };

  /**
   * Input shape for updating an existing system policy. Includes only those
   * fields that are mutable via administrative endpoints. At least one field
   * must be provided for a successful update. All changes are auditable.
   */
  export type IUpdate = {
    /** Updated human-friendly policy name. */
    name?: string | undefined;

    /**
     * Detailed updated documentation of the policy's purpose, effect, or
     * compliance rationale.
     */
    description?: string | undefined;

    /**
     * New policy value to apply at runtime. Must be validated for correct
     * type and business logic.
     */
    value?: string | undefined;

    /**
     * Updated type if changing enforcement (rare). Typically remains
     * unchanged but may be used for clarification or data migration.
     */
    type?: string | undefined;

    /**
     * Enable (true) or disable (false) this policy at runtime. Toggling
     * only permitted if policy semantics allow pausing.
     */
    active?: boolean | undefined;
  };

  /**
   * Summary view for a global system policy setting controlling business,
   * feature, or technical rules.
   *
   * Based on storyfield_ai_system_policies. Used for listing/overview
   * scenarios in admin policy management, omitting full description and value
   * history. Contains core metadata (policy_code, name, value, type, activity
   * status, and audit timestamps).
   */
  export type ISummary = {
    /**
     * Unique identifier for the system policy summary.
     *
     * See storyfield_ai_system_policies.id. Generated automatically at
     * record creation.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Business-unique code for referencing the system policy.
     *
     * See storyfield_ai_system_policies.policy_code. Used programmatically
     * for policy checks throughout the service.
     */
    policy_code: string;

    /**
     * Human-readable name for the policy.
     *
     * See storyfield_ai_system_policies.name.
     */
    name: string;

    /**
     * Current value for the policy.
     *
     * See storyfield_ai_system_policies.value. May reflect quotas, feature
     * toggles, JSON blobs, or configuration primitives.
     */
    value: string;

    /**
     * Type of the value (e.g., 'boolean', 'int', 'string', 'json',
     * 'duration').
     *
     * See storyfield_ai_system_policies.type.
     */
    type: string;

    /**
     * Whether the policy is currently active/enforced.
     *
     * See storyfield_ai_system_policies.active.
     */
    active: boolean;

    /**
     * Detailed business/technical policy description.
     *
     * Optional for summary views but available for documentation. See
     * storyfield_ai_system_policies.description.
     */
    description?: string | undefined;

    /**
     * Timestamp when this policy was last updated.
     *
     * See storyfield_ai_system_policies.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-deletion timestamp if the policy is no longer active/logically
     * removed. Null if active. See
     * storyfield_ai_system_policies.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
