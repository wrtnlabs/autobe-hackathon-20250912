import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminIntegrationLogs } from "../../../../providers/patchstoryfieldAiSystemAdminIntegrationLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminIntegrationLogsIntegrationLogId } from "../../../../providers/getstoryfieldAiSystemAdminIntegrationLogsIntegrationLogId";

import { IPageIStoryfieldAiIntegrationLog } from "../../../../api/structures/IPageIStoryfieldAiIntegrationLog";
import { IStoryfieldAiIntegrationLog } from "../../../../api/structures/IStoryfieldAiIntegrationLog";

@Controller("/storyfieldAi/systemAdmin/integrationLogs")
export class StoryfieldaiSystemadminIntegrationlogsController {
  /**
   * Search and retrieve paginated integration event logs
   * (storyfield_ai_integration_logs).
   *
   * Retrieve a filtered and paginated list of integration event and audit logs
   * from the system. This allows designated administrators to search, filter,
   * and view integration events based on their type, subsystem, status, and
   * timestamps.
   *
   * This operation is restricted to users with 'systemAdmin' role as
   * integration logs may include sensitive details regarding external API
   * failures, connector details, or operational context relevant for compliance
   * and incident management. The search request supports criteria such as event
   * type, subsystem, time range, and free-text search on error and status
   * fields.
   *
   * Integration logs are sourced from the storyfield_ai_integration_logs table,
   * which maintains comprehensive records of systemic events tied to other core
   * tables. Results are paginated and may be sorted as needed to facilitate
   * review during monitoring, compliance checks, or troubleshooting sessions.
   * Error handling covers missing/invalid search parameters, excessive result
   * window, or insufficient role permissions.
   *
   * @param connection
   * @param body Search filters, pagination, and sorting criteria for
   *   integration event log retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiIntegrationLog.IRequest,
  ): Promise<IPageIStoryfieldAiIntegrationLog> {
    try {
      return await patchstoryfieldAiSystemAdminIntegrationLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve integration event log detail (storyfield_ai_integration_logs) by
   * ID.
   *
   * Retrieve full details of an individual integration event log by specifying
   * its unique integrationLogId in the path. This provides system
   * administrators access to complete event metadata, including event type,
   * subsystem, status, message, correlation/request id, and timestamp details.
   *
   * Access to this operation is limited strictly to users with the
   * 'systemAdmin' role due to the sensitive nature of integration event
   * contents, which may include error stack traces, system status codes, and
   * operational diagnostics. The log is retrieved from the
   * storyfield_ai_integration_logs table and relates to cross-system function
   * boundaries (e.g., API calls with user or story context).
   *
   * Proper validation is enforced to ensure the requested log exists and the
   * user has appropriate authorization. Errors are returned for missing or
   * unauthorized log access or invalid identifier formats.
   *
   * @param connection
   * @param integrationLogId Unique identifier of the integration event log to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":integrationLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("integrationLogId")
    integrationLogId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiIntegrationLog> {
    try {
      return await getstoryfieldAiSystemAdminIntegrationLogsIntegrationLogId({
        systemAdmin,
        integrationLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
