import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { poststoryfieldAiSystemAdminSystemPolicies } from "../../../../providers/poststoryfieldAiSystemAdminSystemPolicies";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchstoryfieldAiSystemAdminSystemPolicies } from "../../../../providers/patchstoryfieldAiSystemAdminSystemPolicies";
import { getstoryfieldAiSystemAdminSystemPoliciesPolicyId } from "../../../../providers/getstoryfieldAiSystemAdminSystemPoliciesPolicyId";
import { putstoryfieldAiSystemAdminSystemPoliciesPolicyId } from "../../../../providers/putstoryfieldAiSystemAdminSystemPoliciesPolicyId";
import { deletestoryfieldAiSystemAdminSystemPoliciesPolicyId } from "../../../../providers/deletestoryfieldAiSystemAdminSystemPoliciesPolicyId";

import { IStoryfieldAiSystemPolicy } from "../../../../api/structures/IStoryfieldAiSystemPolicy";
import { IPageIStoryfieldAiSystemPolicy } from "../../../../api/structures/IPageIStoryfieldAiSystemPolicy";

@Controller("/storyfieldAi/systemAdmin/systemPolicies")
export class StoryfieldaiSystemadminSystempoliciesController {
  /**
   * Create a new system policy record (storyfield_ai_system_policies table).
   *
   * This API operation enables system administrators to define and register a
   * new global system policy within the 'storyfield_ai_system_policies' table.
   * Each system policy holds technical, business, or compliance rules, and
   * serves as a runtime-enforced parameter across StoryField AI platform
   * components.
   *
   * When executed, the operation validates the provided policy code (must be
   * unique across the table), ensures descriptive documentation for
   * traceability, and validates value/type according to runtime enforcement
   * requirements. The policy is immediately active unless further toggling is
   * required post-creation. All active system policies become integral to
   * operational behavior (e.g., feature toggling, timeouts, quotas, or
   * maintenance mode).
   *
   * Only users with 'systemAdmin' privileges may create, update, or delete
   * system policies. Required fields include a unique policy_code, name, value,
   * description, active flag, and type. Business validation enforces uniqueness
   * of the policy_code and clarity of the description to avoid misconfiguration
   * or accidental override. Errors are provided for validation failure, policy
   * conflicts, or loss of administrative privilege. Change history is audited
   * for compliance.
   *
   * Typical use cases: enabling maintenance, deploying a new feature toggle,
   * setting global quota, or changing the operational window for maintenance
   * with compliance obligations.
   *
   * This operation should be paired with update and delete endpoints for
   * comprehensive policy lifecycle management and includes error handling for
   * inputs like duplicate policy_code, missing description, or value-type
   * mismatch.
   *
   * @param connection
   * @param body Policy creation payload, including policy code, name,
   *   description, value, type, active flag, and documentation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiSystemPolicy.ICreate,
  ): Promise<IStoryfieldAiSystemPolicy> {
    try {
      return await poststoryfieldAiSystemAdminSystemPolicies({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin search and listing of system policy records in
   * storyfield_ai_system_policies.
   *
   * System administrators use this endpoint to retrieve a paginated, filterable
   * list of all policy records governing the Storyfield AI service. Policy
   * records define global business, technical, feature toggle, and compliance
   * rules. The results may be filtered by fields such as policy_code, name,
   * type (data type), 'active' state, or creation date. Sorting and pagination
   * options are supported, allowing efficient review and auditing.
   *
   * Strong access control is enforced; only users with systemAdmin role may
   * access this method, given the high potential business or security impact of
   * policy review and change. This operation directly reflects the business and
   * technical policy definitions stored in storyfield_ai_system_policies,
   * indexed by policy_code, active, created_at, and other key fields.
   * Administrative workflows for policy governance, change approval, and
   * rollout rely on this search function as a core capability.
   *
   * @param connection
   * @param body System policy search/filtering and pagination criteria.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiSystemPolicy.IRequest,
  ): Promise<IPageIStoryfieldAiSystemPolicy.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminSystemPolicies({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail of a specific system policy from
   * storyfield_ai_system_policies.
   *
   * System administrators can use this endpoint to access the complete
   * definition and lifecycle attributes of a particular platform policy,
   * including code, type, descriptive name, current value, type, enforcement
   * (active), and all relevant modification timestamps. The result includes any
   * archival (soft deleted) state for historic records, as well as compliance
   * notes in the description field.
   *
   * The endpoint requires systemAdmin privileges due to the highly sensitive
   * and operationally impactful nature of policy data. Typical use cases
   * include compliance audits, configuration troubleshooting, or rollback
   * review. All requests validate that the policyId refers to a real and
   * accessible policy, returning not-found or access-denied errors for missing
   * or restricted records. This forms part of the platform's governance and
   * controls dashboard for senior technical staff.
   *
   * @param connection
   * @param policyId Unique identifier (UUID) for the system policy record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":policyId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyId")
    policyId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiSystemPolicy> {
    try {
      return await getstoryfieldAiSystemAdminSystemPoliciesPolicyId({
        systemAdmin,
        policyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a system policy by ID (storyfield_ai_system_policies table).
   *
   * This API endpoint enables modification of an existing system policy in the
   * 'storyfield_ai_system_policies' table, identified by its unique primary key
   * policyId. System policies control critical runtime behavior, feature
   * toggling, and compliance constraints, so careful validation is required on
   * input.
   *
   * Administrators must provide the desired updates, which may include the
   * policy's human-readable name, value, description, type, or active status.
   * The operation enforces audit logging and will verify that the path
   * parameter policyId matches a known policy. If a record is not found, an
   * error is returned. Uniqueness of policy_code is preserved (policy_code
   * itself is generally immutable after creation), and any changes to
   * operationally sensitive fields (value, type, active flag) are immediately
   * enforced by the platform.
   *
   * Role authorization is restricted to systemAdmin users. The change history
   * is tracked with timestamps for compliance purposes. The operation supports
   * dynamic change scenarios, such as toggling maintenance mode or adjusting
   * resource quotas, and is typically paired with creation and delete endpoints
   * as part of policy lifecycle management.
   *
   * @param connection
   * @param policyId Unique identifier (UUID) for the system policy to update.
   * @param body Policy update input with fields to be changed (excluding
   *   immutable policy code).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":policyId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyId")
    policyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiSystemPolicy.IUpdate,
  ): Promise<IStoryfieldAiSystemPolicy> {
    try {
      return await putstoryfieldAiSystemAdminSystemPoliciesPolicyId({
        systemAdmin,
        policyId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Deactivate/soft-delete a system policy by ID (storyfield_ai_system_policies
   * table).
   *
   * This API operation allows a system administrator to deactivate (soft
   * delete) a system policy in the 'storyfield_ai_system_policies' table, using
   * the unique policyId. When invoked, the operation sets the deleted_at field
   * to the current timestamp, rendering the policy logically inactive but
   * retaining the record for compliance and potential audit review.
   *
   * No physical deletion from the database occurs; the policy remains available
   * for historical review or temporary reactivation by privileged users.
   * Business integrity, compliance, and traceability are preserved by audit
   * logs and change history. The operation is strictly limited to systemAdmin
   * role, and deactivated policies become unavailable for runtime enforcement
   * or visibility in active system settings endpoints.
   *
   * Errors are provided if the record is missing, already deactivated, or if
   * the user lacks appropriate privileges. This operation is typically paired
   * with creation and update endpoints for full policy lifecycle management.
   *
   * @param connection
   * @param policyId Unique identifier (UUID) of the system policy to be soft
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":policyId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyId")
    policyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminSystemPoliciesPolicyId({
        systemAdmin,
        policyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
