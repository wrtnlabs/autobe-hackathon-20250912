import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminAuthAuditLogs } from "../../../../providers/patchstoryfieldAiSystemAdminAuthAuditLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminAuthAuditLogsAuthAuditLogId } from "../../../../providers/getstoryfieldAiSystemAdminAuthAuditLogsAuthAuditLogId";

import { IPageIStoryfieldAiAuthAuditLog } from "../../../../api/structures/IPageIStoryfieldAiAuthAuditLog";
import { IStoryfieldAiAuthAuditLog } from "../../../../api/structures/IStoryfieldAiAuthAuditLog";

@Controller("/storyfieldAi/systemAdmin/authAuditLogs")
export class StoryfieldaiSystemadminAuthauditlogsController {
  /**
   * Search and retrieve paginated authentication/authorization audit events
   * (systemAdmin only; storyfield_ai_auth_audit_logs).
   *
   * Search and retrieve a paginated list of authentication and authorization
   * audit log events from the storyfield_ai_auth_audit_logs table. Designed for
   * use by system administrators, the endpoint provides query, sort, and filter
   * options on typical event audit fields: event type (e.g., issued, revoked,
   * denied), outcome (success/failure), related user/session/admin IDs, source
   * IP, time window, and textual search in event messages. This is vital for
   * tracking security-relevant events and ensuring policy compliance.
   *
   * Because audit logs can reveal sensitive security context, access is
   * restricted to systemAdmin role only, and all audit log access is itself
   * logged. Result summaries are returned for high-volume review: full event
   * information may require a second detail API call.
   *
   * This operation is tightly integrated with incident response, system
   * monitoring, and compliance/forensics workflows. Authorization or query
   * parameter errors are handled with clear error messages. Audit records are
   * append-only and cannot be edited or deleted by this or any other endpoint.
   *
   * @param connection
   * @param body Query, filtering, and pagination parameters for audit logs,
   *   such as event type, user/admin/session, time window, outcome.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiAuthAuditLog.IRequest,
  ): Promise<IPageIStoryfieldAiAuthAuditLog.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminAuthAuditLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View full detail for a specific authentication/authorization audit log
   * event (systemAdmin only; storyfield_ai_auth_audit_logs).
   *
   * Retrieve the full set of recorded details for a single
   * authentication/authorization audit event from the
   * storyfield_ai_auth_audit_logs table. System administrators can use this to
   * see exactly when, by whom, and with what outcome an authentication event
   * (e.g., login attempt, token refresh, revocation, validation failure)
   * occurred. The record includes actor/user/admin identification, event type,
   * result, contextual message, timestamps, and environment metadata for
   * precise forensic analysis.
   *
   * This operation is restricted to systemAdmin role, and all accesses are
   * themselves tracked for audit purposes. Access control ensures sensitive
   * information is not exposed beyond authorized admins. Typical use cases
   * include incident investigation, suspicious access review, compliance
   * checks, and security audits.
   *
   * Not found or unauthorized access errors are handled transparently per
   * security requirements. No update or deletion of audit events is allowed by
   * this or any API.
   *
   * @param connection
   * @param authAuditLogId Unique identifier (UUID) of the
   *   authentication/authorization audit log record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":authAuditLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authAuditLogId")
    authAuditLogId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiAuthAuditLog> {
    try {
      return await getstoryfieldAiSystemAdminAuthAuditLogsAuthAuditLogId({
        systemAdmin,
        authAuditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
