import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminExternalApiFailures } from "../../../../providers/patchstoryfieldAiSystemAdminExternalApiFailures";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminExternalApiFailuresExternalApiFailureId } from "../../../../providers/getstoryfieldAiSystemAdminExternalApiFailuresExternalApiFailureId";

import { IPageIStoryfieldAiExternalApiFailure } from "../../../../api/structures/IPageIStoryfieldAiExternalApiFailure";
import { IStoryfieldAiExternalApiFailure } from "../../../../api/structures/IStoryfieldAiExternalApiFailure";

@Controller("/storyfieldAi/systemAdmin/externalApiFailures")
export class StoryfieldaiSystemadminExternalapifailuresController {
  /**
   * Search and retrieve paginated list of external API failure records for
   * admin review (storyfield_ai_external_api_failures table).
   *
   * This operation allows system administrators to perform advanced filtering
   * and retrieval of all integration failure and external API error records.
   * These records provide insight into system reliability, business process
   * health, and root-cause error attribution for events such as third-party
   * failures, quota overruns, network timeouts, or misconfigurations.
   *
   * Access to this endpoint is restricted to systemAdmin users given the
   * sensitive nature of error logs and the potential inclusion of PII or
   * technical details valuable for security monitoring. The response delivers a
   * summary view for each record, with options to expand details for incident
   * triage or forensics.
   *
   * Business logic includes robust filteringâ€”by API type, error code, endpoint,
   * status, affected user, or date range, and supports ordering by newest,
   * error severity, or frequency. This endpoint forms the basis for error
   * dashboards, incident response workflows, and SLA audits. The underlying
   * Prisma table's unique constraints and indices (api_type, created_at,
   * error_code, message) ensure highly efficient query handling. Related
   * endpoints provide detail retrieval and contextual integration log review.
   *
   * @param connection
   * @param body List/search criteria for external API failure event filtering
   *   and pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiExternalApiFailure.IRequest,
  ): Promise<IPageIStoryfieldAiExternalApiFailure.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminExternalApiFailures({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail of a specific external API failure event from
   * storyfield_ai_external_api_failures.
   *
   * This endpoint returns all available metadata and error context for a given
   * API failure or integration error event, as tracked in the
   * storyfield_ai_external_api_failures table. Records include the API type
   * (e.g., openai, tts), endpoint, HTTP method, error_code, error_message,
   * request_payload, response_payload, retry_count, timestamps, and foreign
   * keys relating the event to a user or story where available.
   *
   * Only users with systemAdmin privileges may access this method, given the
   * inclusion of sensitive operational and potentially personal data. Typical
   * use cases include postmortem investigation, troubleshooting, compliance
   * analysis, and incident remediation workflows.
   *
   * Validation ensures that the provided externalApiFailureId matches an
   * existing failure event. Attempts to access a non-existent, deleted, or
   * restricted event will result in a clear authorization or not-found error.
   * Other related endpoints should be referenced to cross-analyze API failures
   * in context of user sessions and integration system logs.
   *
   * @param connection
   * @param externalApiFailureId Unique identifier (UUID) for the external API
   *   failure event to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalApiFailureId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalApiFailureId")
    externalApiFailureId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiExternalApiFailure> {
    try {
      return await getstoryfieldAiSystemAdminExternalApiFailuresExternalApiFailureId(
        {
          systemAdmin,
          externalApiFailureId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
