import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminAuthenticatedUsers } from "../../../../providers/patchstoryfieldAiSystemAdminAuthenticatedUsers";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId } from "../../../../providers/getstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId";
import { putstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId } from "../../../../providers/putstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId";
import { deletestoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId } from "../../../../providers/deletestoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId";

import { IPageIStoryfieldAiAuthenticatedusers } from "../../../../api/structures/IPageIStoryfieldAiAuthenticatedusers";
import { IStoryfieldAiAuthenticatedusers } from "../../../../api/structures/IStoryfieldAiAuthenticatedusers";

@Controller("/storyfieldAi/systemAdmin/authenticatedUsers")
export class StoryfieldaiSystemadminAuthenticatedusersController {
  /**
   * Retrieve and search a paginated list of authenticated users
   * (storyfield_ai_authenticatedusers).
   *
   * Retrieve a filtered and paginated list of authenticated users who are
   * registered with and have passed verification through the Spring backend.
   * This operation enables searching by fields such as email, external user ID,
   * and creation or update date, so that system administrators can audit user
   * on-boarding, monitor activity, and review account statuses for compliance
   * purposes.
   *
   * User access is strictly limited to those with system administrator
   * privileges. Sensitive fields like email and external user ID are only
   * visible to admins. The API enforces permission checks before executing any
   * user data searches. Soft-deleted (deactivated) users are included or
   * excluded based on filter options provided in the request body.
   *
   * The request structure and available filters are determined by the schema
   * IStoryfieldAiAuthenticatedusers.IRequest. Responses include paginated user
   * summaries via the IPageIStoryfieldAiAuthenticatedusers.ISummary type. The
   * result is suitable for admin dashboards or compliance auditing processes.
   *
   * Related list and detail endpoints should use similar authorization and
   * traceability controls for GDPR and audit requirements.
   *
   * @param connection
   * @param body Search filters and pagination details to retrieve relevant
   *   users.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiAuthenticatedusers.IRequest,
  ): Promise<IPageIStoryfieldAiAuthenticatedusers.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminAuthenticatedUsers({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details for a single authenticated user
   * (storyfield_ai_authenticatedusers).
   *
   * Fetch all details for one authenticated user, as registered and verified
   * via the Spring backend. The operation provides admin access to the user's
   * external_user_id, email, actor_type, audit timestamps, and soft-deleted
   * status, offering visibility into the lifecycle and compliance state of
   * individual accounts.
   *
   * Only system administrators can access this operation, which enforces strict
   * permission checks to ensure privacy and data protection. The
   * 'authenticatedUserId' parameter must reference an existing user record;
   * errors will be returned if the user does not exist or has been fully
   * purged.
   *
   * This API utilizes the IStoryfieldAiAuthenticatedusers response schema for
   * detailed user information, supporting admin dashboards, investigation
   * workflows, and user account reviews.
   *
   * @param connection
   * @param authenticatedUserId Unique identifier of the authenticated user to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":authenticatedUserId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authenticatedUserId")
    authenticatedUserId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiAuthenticatedusers> {
    try {
      return await getstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId(
        {
          systemAdmin,
          authenticatedUserId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an authenticated user's profile or metadata
   * (storyfield_ai_authenticatedusers).
   *
   * Update core fields for a single authenticated user, referenced by the
   * authenticatedUserId. Admins may update email, actor_type, or other
   * permitted attributes, with all modifications validated per business rules
   * and compliance requirements. All change actions are fully audited and
   * timestamped, maintaining traceability for regulatory and operational
   * review.
   *
   * Edit permissions are exclusive to system administrators, and the endpoint
   * enforces strict access control. Any changes that conflict with uniqueness
   * constraints, such as duplicate email or invalid external_user_id, will
   * result in error responses with descriptive messages."Soft delete" rules
   * apply if relevant fields are involved.
   *
   * This operation returns the updated user record via
   * IStoryfieldAiAuthenticatedusers schema. Related audit and compliance logs
   * are generated in parallel but are not exposed via this interface.
   *
   * @param connection
   * @param authenticatedUserId Unique identifier of the authenticated user to
   *   modify.
   * @param body Fields to update for the target authenticated user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":authenticatedUserId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authenticatedUserId")
    authenticatedUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiAuthenticatedusers.IUpdate,
  ): Promise<IStoryfieldAiAuthenticatedusers> {
    try {
      return await putstoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId(
        {
          systemAdmin,
          authenticatedUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (deactivate) an authenticated user account
   * (storyfield_ai_authenticatedusers).
   *
   * Administratively deactivate (soft delete) an authenticated user account by
   * marking its deleted_at timestamp. This effectively disables the account
   * without erasing audit data, maintaining compliance and traceability. The
   * operation is strictly available to system administrators and logs all
   * actions for future review.
   *
   * On successful execution, the account becomes inaccessible for normal
   * operations. Attempts to delete already soft-deleted or non-existent users
   * will result in error responses. The endpoint enforces permission checks and
   * may provide a confirmation message or status code with no user details
   * included in response.
   *
   * Related endpoints support recovery, audit, and listing of deactivated users
   * in compliance with business and legal rules.
   *
   * @param connection
   * @param authenticatedUserId Unique identifier of the authenticated user to
   *   deactivate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":authenticatedUserId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authenticatedUserId")
    authenticatedUserId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminAuthenticatedUsersAuthenticatedUserId(
        {
          systemAdmin,
          authenticatedUserId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
