import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowAuditLog } from "../../../../structures/INotificationWorkflowAuditLog";
import { IPageINotificationWorkflowAuditLog } from "../../../../structures/IPageINotificationWorkflowAuditLog";

/**
 * Search and retrieve notification workflow audit logs.
 *
 * Retrieve a filtered, paginated list of notification workflow audit logs.
 *
 * Authorized users (systemAdmin, workflowManager, triggerOperator) can query
 * audit logs capturing immutable recorded events relating to workflows,
 * triggers, and user actions within the Notification Workflow system.
 *
 * The API supports advanced searching and pagination parameters for effective
 * log review and analysis. Returned results include event types, timestamps,
 * actors, and detailed event data.
 *
 * This operation targets the notification_workflow_audit_logs table and is
 * intended to support compliance and troubleshooting.
 *
 * No pre-requisite operations must be called before querying audit logs.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for audit log
 *   filtering
 * @path /notificationWorkflow/systemAdmin/auditLogs
 * @accessor api.functional.notificationWorkflow.systemAdmin.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for audit log filtering */
    body: INotificationWorkflowAuditLog.IRequest;
  };
  export type Body = INotificationWorkflowAuditLog.IRequest;
  export type Response = IPageINotificationWorkflowAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notificationWorkflow/systemAdmin/auditLogs";
  export const random = (): IPageINotificationWorkflowAuditLog.ISummary =>
    typia.random<IPageINotificationWorkflowAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
