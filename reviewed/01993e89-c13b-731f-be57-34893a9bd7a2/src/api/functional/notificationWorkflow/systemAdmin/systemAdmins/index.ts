import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowSystemAdmin } from "../../../../structures/INotificationWorkflowSystemAdmin";
import { IPageINotificationWorkflowSystemAdmin } from "../../../../structures/IPageINotificationWorkflowSystemAdmin";

/**
 * Search and retrieve paginated list of systemAdmin users.
 *
 * Retrieve a filtered and paginated list of system administrator users in the
 * Notification Workflow service. This operation allows clients to query
 * systemAdmin accounts matching criteria such as email substrings and creation
 * date ranges.
 *
 * Security considerations include enforcing 'systemAdmin' role access and
 * limiting exposure of sensitive information. Only authorized system
 * administrators can use this endpoint.
 *
 * The operation references the notification_workflow_systemadmins table,
 * including its core fields: id, email, password_hash (not included in
 * results), and audit timestamps (created_at, updated_at).
 *
 * Response data returns essential summary details for user management and
 * display purposes.
 *
 * This operation should be used to support user interfaces for administrative
 * user listings and audits.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for systemAdmin
 *   filtering
 * @path /notificationWorkflow/systemAdmin/systemAdmins
 * @accessor api.functional.notificationWorkflow.systemAdmin.systemAdmins.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for systemAdmin filtering */
    body: INotificationWorkflowSystemAdmin.IRequest;
  };
  export type Body = INotificationWorkflowSystemAdmin.IRequest;
  export type Response = IPageINotificationWorkflowSystemAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/systemAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notificationWorkflow/systemAdmin/systemAdmins";
  export const random = (): IPageINotificationWorkflowSystemAdmin.ISummary =>
    typia.random<IPageINotificationWorkflowSystemAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a systemAdmin user by ID.
 *
 * Retrieve detailed information of a single system administrator user from the
 * Notification Workflow backend.
 *
 * This endpoint requires 'systemAdmin' role authentication to ensure only
 * authorized users can access sensitive user details.
 *
 * The systemAdmin entity includes id, email, audit timestamps, and optional
 * deleted_at timestamp indicating soft deletion status.
 *
 * Path parameter 'id' must be a valid UUID referencing a systemAdmin record.
 *
 * Typical use cases: viewing or editing an admin user's detailed profile in a
 * secure administration interface.
 *
 * @param props.connection
 * @param props.id Unique identifier of the systemAdmin user
 * @path /notificationWorkflow/systemAdmin/systemAdmins/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.systemAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the systemAdmin user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowSystemAdmin;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/systemAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/systemAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowSystemAdmin =>
    typia.random<INotificationWorkflowSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a systemAdmin user's data.
 *
 * Update the details of an existing system administrator user in the
 * Notification Workflow backend.
 *
 * Authentication requires 'systemAdmin' role to restrict modification
 * privileges.
 *
 * The request body accepts email and password_hash updates, validated according
 * to the Prisma schema fields.
 *
 * The path parameter 'id' identifies which admin user to update.
 *
 * The response returns the updated systemAdmin user record with current data.
 *
 * Use cases include changing admin email addresses or resetting authentication
 * credentials securely.
 *
 * @param props.connection
 * @param props.id Unique identifier of the systemAdmin user to update
 * @param props.body Update data for the systemAdmin user
 * @path /notificationWorkflow/systemAdmin/systemAdmins/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.systemAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the systemAdmin user to update */
    id: string & tags.Format<"uuid">;

    /** Update data for the systemAdmin user */
    body: INotificationWorkflowSystemAdmin.IUpdate;
  };
  export type Body = INotificationWorkflowSystemAdmin.IUpdate;
  export type Response = INotificationWorkflowSystemAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/systemAdmin/systemAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/systemAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowSystemAdmin =>
    typia.random<INotificationWorkflowSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a systemAdmin user by ID.
 *
 * Delete a system administrator user account permanently from the Notification
 * Workflow backend.
 *
 * This action removes the record completely from the database, not just marking
 * it as deleted.
 *
 * Access requires 'systemAdmin' role authentication.
 *
 * The {id} path parameter specifies the UUID of the target systemAdmin user.
 *
 * This operation should be used cautiously as it cannot be undone via the API.
 *
 * @param props.connection
 * @param props.id Unique identifier of the systemAdmin user to delete
 * @path /notificationWorkflow/systemAdmin/systemAdmins/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.systemAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the systemAdmin user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/systemAdmin/systemAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/systemAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
