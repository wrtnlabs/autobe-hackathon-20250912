import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowStepExecutionLog } from "../../../../structures/INotificationWorkflowStepExecutionLog";
import { IPageINotificationWorkflowStepExecutionLog } from "../../../../structures/IPageINotificationWorkflowStepExecutionLog";

/**
 * Search and retrieve a paginated list of step execution logs.
 *
 * Retrieve a paginated and filtered list of workflow step execution logs from
 * the Notification Workflow system. This operation provides comprehensive
 * search and pagination capabilities allowing users to query logs by various
 * criteria including workflow, trigger instance, and node IDs, as well as
 * success status and execution window timeframes.
 *
 * The step execution logs represent immutable records of each node execution
 * attempt and are critical for auditing, debugging, and performance monitoring.
 * Access to this operation is typically granted to workflowManagers,
 * triggerOperators, and systemAdmins who require detailed visibility into
 * workflow executions.
 *
 * Security measures include role-based access control ensuring only authorized
 * roles can access sensitive execution data. The returned paginated response
 * includes summary details optimized for performance and user interface
 * rendering.
 *
 * This operation directly corresponds to the
 * notification_workflow_step_execution_logs table as specified in the Prisma
 * schema. It supports efficient search by indexed fields and includes
 * pagination metadata for client-side consumption.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for step
 *   execution log filtering
 * @path /notificationWorkflow/systemAdmin/stepExecutionLogs
 * @accessor api.functional.notificationWorkflow.systemAdmin.stepExecutionLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for step execution log
     * filtering
     */
    body: INotificationWorkflowStepExecutionLog.IRequest;
  };
  export type Body = INotificationWorkflowStepExecutionLog.IRequest;
  export type Response = IPageINotificationWorkflowStepExecutionLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/stepExecutionLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/notificationWorkflow/systemAdmin/stepExecutionLogs";
  export const random =
    (): IPageINotificationWorkflowStepExecutionLog.ISummary =>
      typia.random<IPageINotificationWorkflowStepExecutionLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve step execution log details by ID.
 *
 * Retrieve detailed information about a specific step execution log by its
 * unique identifier. The log includes crucial execution details such as start
 * and finish timestamps, input and output execution contexts, success status,
 * and any associated message IDs or error messages.
 *
 * This single-record retrieval enables detailed auditing and debugging for
 * individual workflow steps within the Notification Workflow system.
 *
 * Role-based access control ensures that only authorized roles like
 * workflowManagers, triggerOperators, and systemAdmins can view sensitive log
 * data.
 *
 * The operation corresponds with the notification_workflow_step_execution_logs
 * table defined in the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the step execution log
 * @path /notificationWorkflow/systemAdmin/stepExecutionLogs/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.stepExecutionLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the step execution log */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowStepExecutionLog;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/stepExecutionLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/stepExecutionLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowStepExecutionLog =>
    typia.random<INotificationWorkflowStepExecutionLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
