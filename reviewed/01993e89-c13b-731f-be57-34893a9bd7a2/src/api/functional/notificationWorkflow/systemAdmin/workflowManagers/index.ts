import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkflowManager } from "../../../../structures/INotificationWorkflowWorkflowManager";
import { IPageINotificationWorkflowWorkflowManager } from "../../../../structures/IPageINotificationWorkflowWorkflowManager";

/**
 * List and search workflow managers.
 *
 * Retrieve a filtered, paginated list of existing workflow manager users in the
 * Notification Workflow backend system. It serves users who administrate
 * notification workflows by allowing them to view and manage workflow
 * managers.
 *
 * The operation fetches basic details such as email identifiers and status of
 * workflow managers. It supports pagination and sorting to manage large user
 * bases efficiently.
 *
 * This operation requires authorization from systemAdmin and workflowManager
 * roles who have management privileges. It returns summaries appropriate for
 * list views and excludes sensitive information such as password hashes.
 *
 * The underlying table notification_workflow_workflowmanagers captures
 * individual workflow manager users with foundational identity details and
 * audit timestamps.
 *
 * @param props.connection
 * @param props.body Search and pagination filter criteria for workflow managers
 * @path /notificationWorkflow/systemAdmin/workflowManagers
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflowManagers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination filter criteria for workflow managers */
    body: INotificationWorkflowWorkflowManager.IRequest;
  };
  export type Body = INotificationWorkflowWorkflowManager.IRequest;
  export type Response = IPageINotificationWorkflowWorkflowManager.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/workflowManagers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/notificationWorkflow/systemAdmin/workflowManagers";
  export const random =
    (): IPageINotificationWorkflowWorkflowManager.ISummary =>
      typia.random<IPageINotificationWorkflowWorkflowManager.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info on a workflow manager user.
 *
 * Retrieve comprehensive details of a specific workflow manager user by their
 * unique identifier. This operation supports administrators and workflow
 * managers in managing user accounts by providing full visibility into their
 * information except passwords.
 *
 * The response reflects the current state in the database, including creation
 * and update timestamps.
 *
 * Access to this operation is restricted to authorized users with the
 * systemAdmin or workflowManager roles to ensure privacy and compliance.
 *
 * The underlying database model notification_workflow_workflowmanagers stores
 * all identity and management details for workflow managers including soft
 * delete markers.
 *
 * @param props.connection
 * @param props.id Unique UUID of the target workflow manager user
 * @path /notificationWorkflow/systemAdmin/workflowManagers/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflowManagers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID of the target workflow manager user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowWorkflowManager;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/workflowManagers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflowManagers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowManager =>
    typia.random<INotificationWorkflowWorkflowManager>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update workflow manager user information.
 *
 * Update details of an existing workflow manager user using their UUID. This
 * supports administrative workflows for managing user information in the
 * Notification Workflow backend system.
 *
 * Only authorized roles such as systemAdmin and workflowManager can perform
 * this update. Proper validation is required to ensure changes comply with
 * system rules and uniqueness constraints.
 *
 * The operation does not allow password hash changes via this endpoint to
 * maintain security best practices.
 *
 * Updates to the workflow manager are versioned with timestamps for audit and
 * traceability.
 *
 * Underlying Prisma table notification_workflow_workflowmanagers tracks all
 * workflow manager users with authentication data and soft deletion support.
 *
 * @param props.connection
 * @param props.id Unique UUID of the workflow manager user to update
 * @param props.body Updated workflow manager user information
 * @path /notificationWorkflow/systemAdmin/workflowManagers/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflowManagers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique UUID of the workflow manager user to update */
    id: string & tags.Format<"uuid">;

    /** Updated workflow manager user information */
    body: INotificationWorkflowWorkflowManager.IUpdate;
  };
  export type Body = INotificationWorkflowWorkflowManager.IUpdate;
  export type Response = INotificationWorkflowWorkflowManager;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/systemAdmin/workflowManagers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflowManagers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowManager =>
    typia.random<INotificationWorkflowWorkflowManager>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a workflow manager user.
 *
 * Permanently delete a workflow manager user by unique identifier. This
 * operation removes all traces of the user from the system database.
 *
 * Only systemAdmin and workflowManager roles with sufficient privileges may
 * execute this operation.
 *
 * Deletion includes cleaning all references and related data where required to
 * maintain data integrity.
 *
 * The operation performs a hard delete rather than soft deletion as per schema
 * design for this operation.
 *
 * Clients should be aware that deletion is irreversible.
 *
 * @param props.connection
 * @param props.id Unique UUID of the workflow manager user to delete
 * @path /notificationWorkflow/systemAdmin/workflowManagers/:id
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflowManagers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique UUID of the workflow manager user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/systemAdmin/workflowManagers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflowManagers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
