import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkflowNode } from "../../../../../structures/INotificationWorkflowWorkflowNode";
import { IPageINotificationWorkflowWorkflowNode } from "../../../../../structures/IPageINotificationWorkflowWorkflowNode";

/**
 * Create a new workflow node.
 *
 * Create a new node in the notification workflow with provided node type and
 * templates or delay parameters.
 *
 * Authorization limited to workflowManager and systemAdmin roles.
 *
 * Validates templates and delay values as per business rules.
 *
 * Returns detailed information about the created node.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the parent workflow
 * @param props.body Information for creating a workflow node
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowNodes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the parent workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Information for creating a workflow node */
    body: INotificationWorkflowWorkflowNode.ICreate;
  };
  export type Body = INotificationWorkflowWorkflowNode.ICreate;
  export type Response = INotificationWorkflowWorkflowNode;

  export const METADATA = {
    method: "POST",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowNodes`;
  export const random = (): INotificationWorkflowWorkflowNode =>
    typia.random<INotificationWorkflowWorkflowNode>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve workflow nodes for a given workflow.
 *
 * Fetch a filtered, paginated list of workflow nodes for a given workflow ID
 * for display or management.
 *
 * Security requires workflowManager or systemAdmin role.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the parent workflow
 * @param props.body Search and pagination parameters for workflow nodes
 *   filtering
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowNodes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for workflow nodes filtering */
    body: INotificationWorkflowWorkflowNode.IRequest;
  };
  export type Body = INotificationWorkflowWorkflowNode.IRequest;
  export type Response = IPageINotificationWorkflowWorkflowNode.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowNodes`;
  export const random = (): IPageINotificationWorkflowWorkflowNode.ISummary =>
    typia.random<IPageINotificationWorkflowWorkflowNode.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a workflow node.
 *
 * Retrieve detailed properties of a specific workflow node within a workflow,
 * including node type, templates, delay configuration, and timestamps.
 *
 * Authorized roles: workflowManager, systemAdmin.
 *
 * Returns a detailed workflow node object.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the parent workflow
 * @param props.workflowNodeId Unique identifier of the target workflow node
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowNodes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the target workflow node */
    workflowNodeId: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowWorkflowNode;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowNodes/${encodeURIComponent(props.workflowNodeId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowNode =>
    typia.random<INotificationWorkflowWorkflowNode>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowNodeId")(() => typia.assert(props.workflowNodeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific Workflow Node within a Workflow.
 *
 * This API operation enables authorized users (workflowManager, systemAdmin) to
 * update details of a specific Workflow Node within a given Workflow. The
 * operation ensures that the targeted workflowNodeId belongs to the workflow
 * identified by workflowId.
 *
 * Users can update various node properties including nodeType, display name,
 * LiquidJS templates for email (to, subject, body) and SMS (to, body), delay in
 * milliseconds, and ISO8601 delay duration. The operation is critical for
 * maintaining valid and effective notification workflows.
 *
 * Security considerations include authentication and authorization checks
 * ensuring only permitted roles can perform updates. Validation rules require
 * that email and SMS templates parse correctly as LiquidJS strings and delay
 * values are reasonable. Integrity constraints require that the node remains
 * correctly linked to its workflow and that no cycles or other DAG violations
 * are introduced by edge changes outside this scope.
 *
 * This operation relates closely to workflow CRUD operations and workflow edge
 * management APIs that may be used in combination to fully modify the workflow
 * structure.
 *
 * On success, the updated Workflow Node entity is returned reflecting
 * modifications.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.workflowNodeId Unique identifier of the workflow node to update
 * @param props.body Updated details for the Workflow Node
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowNodes.updateWorkflowNode
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateWorkflowNode(
  connection: IConnection,
  props: updateWorkflowNode.Props,
): Promise<updateWorkflowNode.Response> {
  return true === connection.simulate
    ? updateWorkflowNode.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateWorkflowNode.METADATA,
          path: updateWorkflowNode.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateWorkflowNode {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the workflow node to update */
    workflowNodeId: string & tags.Format<"uuid">;

    /** Updated details for the Workflow Node */
    body: INotificationWorkflowWorkflowNode.IUpdate;
  };
  export type Body = INotificationWorkflowWorkflowNode.IUpdate;
  export type Response = INotificationWorkflowWorkflowNode;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowNodes/${encodeURIComponent(props.workflowNodeId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowNode =>
    typia.random<INotificationWorkflowWorkflowNode>();
  export const simulate = (
    connection: IConnection,
    props: updateWorkflowNode.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateWorkflowNode.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowNodeId")(() => typia.assert(props.workflowNodeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific Workflow Node from a Workflow.
 *
 * Delete a Workflow Node by its ID within a specified Workflow. This operation
 * requires validation that the node belongs to the workflow and that deletion
 * does not violate integrity constraints like existing triggers.
 *
 * Only authorized users with roles workflowManager or systemAdmin can perform
 * deletion. Deletion permanently removes the node from the database and affects
 * the workflow's structure.
 *
 * This operation complements node creation and update endpoints, together
 * enabling full lifecycle management of workflow nodes.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.workflowNodeId Unique identifier of the workflow node to delete
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowNodes.eraseWorkflowNode
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseWorkflowNode(
  connection: IConnection,
  props: eraseWorkflowNode.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseWorkflowNode.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseWorkflowNode.METADATA,
          path: eraseWorkflowNode.path(props),
          status: null,
        },
      );
}
export namespace eraseWorkflowNode {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the workflow node to delete */
    workflowNodeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowNodes/:workflowNodeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowNodes/${encodeURIComponent(props.workflowNodeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseWorkflowNode.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseWorkflowNode.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowNodeId")(() => typia.assert(props.workflowNodeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
