import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkflowEdge } from "../../../../../structures/INotificationWorkflowWorkflowEdge";
import { IPageINotificationWorkflowWorkflowEdge } from "../../../../../structures/IPageINotificationWorkflowWorkflowEdge";

/**
 * Create workflow edge connecting two nodes.
 *
 * Create a new workflow edge linking two nodes within the specified workflow.
 *
 * Security considerations: This operation requires authorization and is
 * typically performed by workflowManager or systemAdmin roles with permission
 * to modify workflows.
 *
 * The edge connects a source node ('from_node_id') to a target node
 * ('to_node_id') within the same workflow, enforcing DAG integrity with no
 * cycles.
 *
 * Validation ensures that both nodes belong to the workflow and the edge does
 * not create cycles or self loops.
 *
 * This operation relates to the notification_workflow_workflow_edges table,
 * enforcing referential integrity with foreign keys and supporting audit
 * timestamps.
 *
 * Errors return details if nodes are invalid or edge creation violates DAG
 * constraints.
 *
 * Refer to related APIs for listing edges, updating edges, or deleting edges
 * for full lifecycle management.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.body Information needed to create a workflow edge including
 *   from_node_id and to_node_id
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowEdges.createEdge
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createEdge(
  connection: IConnection,
  props: createEdge.Props,
): Promise<createEdge.Response> {
  return true === connection.simulate
    ? createEdge.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEdge.METADATA,
          path: createEdge.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createEdge {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /**
     * Information needed to create a workflow edge including from_node_id
     * and to_node_id
     */
    body: INotificationWorkflowWorkflowEdge.ICreate;
  };
  export type Body = INotificationWorkflowWorkflowEdge.ICreate;
  export type Response = INotificationWorkflowWorkflowEdge;

  export const METADATA = {
    method: "POST",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowEdges`;
  export const random = (): INotificationWorkflowWorkflowEdge =>
    typia.random<INotificationWorkflowWorkflowEdge>();
  export const simulate = (
    connection: IConnection,
    props: createEdge.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createEdge.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List workflow edges for a given workflow with filtering and pagination.
 *
 * Retrieve a paginated list of Workflow Edges belonging to the specified
 * Workflow. This operation supports search and filtering via the request body
 * parameters.
 *
 * Only authorized users (workflowManager, systemAdmin) can access this
 * endpoint.
 *
 * Response includes paginated edges with details such as fromNodeId and
 * toNodeId, enabling clients to render or manage the workflow DAG structure.
 *
 * This operation complements workflow node and workflow CRUD APIs for
 * comprehensive workflow management.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.body Filtering and pagination criteria for Workflow Edges
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowEdges.indexWorkflowEdges
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexWorkflowEdges(
  connection: IConnection,
  props: indexWorkflowEdges.Props,
): Promise<indexWorkflowEdges.Response> {
  return true === connection.simulate
    ? indexWorkflowEdges.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexWorkflowEdges.METADATA,
          path: indexWorkflowEdges.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexWorkflowEdges {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Filtering and pagination criteria for Workflow Edges */
    body: INotificationWorkflowWorkflowEdge.IRequest;
  };
  export type Body = INotificationWorkflowWorkflowEdge.IRequest;
  export type Response = IPageINotificationWorkflowWorkflowEdge;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowEdges`;
  export const random = (): IPageINotificationWorkflowWorkflowEdge =>
    typia.random<IPageINotificationWorkflowWorkflowEdge>();
  export const simulate = (
    connection: IConnection,
    props: indexWorkflowEdges.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexWorkflowEdges.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a Workflow Edge.
 *
 * Get detailed information about a specific Workflow Edge within a Workflow by
 * its IDs.
 *
 * Access is restricted to roles workflowManager and systemAdmin.
 *
 * Retrieves edge details necessary for display and validation in workflow
 * editors or audit trails.
 *
 * This operation aids clients in understanding and manipulating the workflow
 * structure at the edge level.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.workflowEdgeId Unique identifier of the workflow edge
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowEdges.atWorkflowEdge
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atWorkflowEdge(
  connection: IConnection,
  props: atWorkflowEdge.Props,
): Promise<atWorkflowEdge.Response> {
  return true === connection.simulate
    ? atWorkflowEdge.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atWorkflowEdge.METADATA,
          path: atWorkflowEdge.path(props),
          status: null,
        },
      );
}
export namespace atWorkflowEdge {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the workflow edge */
    workflowEdgeId: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowWorkflowEdge;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowEdges/${encodeURIComponent(props.workflowEdgeId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowEdge =>
    typia.random<INotificationWorkflowWorkflowEdge>();
  export const simulate = (
    connection: IConnection,
    props: atWorkflowEdge.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atWorkflowEdge.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowEdgeId")(() => typia.assert(props.workflowEdgeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update workflow edge connecting nodes.
 *
 * Update an existing workflow edge's from_node_id or to_node_id to modify the
 * DAG structure within the workflow.
 *
 * Security ensures only authorized users with workflow edit permissions can
 * perform this.
 *
 * Validation checks confirm no cycle or self-loop generation.
 *
 * This operation updates the notification_workflow_workflow_edges record and
 * refreshes updated_at timestamp.
 *
 * Errors include invalid node references or conflict with DAG constraints.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.workflowEdgeId Unique identifier of the workflow edge to update
 * @param props.body Fields for updating workflow edge including from_node_id
 *   and to_node_id
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowEdges.updateEdge
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateEdge(
  connection: IConnection,
  props: updateEdge.Props,
): Promise<updateEdge.Response> {
  return true === connection.simulate
    ? updateEdge.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateEdge.METADATA,
          path: updateEdge.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateEdge {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the workflow edge to update */
    workflowEdgeId: string & tags.Format<"uuid">;

    /**
     * Fields for updating workflow edge including from_node_id and
     * to_node_id
     */
    body: INotificationWorkflowWorkflowEdge.IUpdate;
  };
  export type Body = INotificationWorkflowWorkflowEdge.IUpdate;
  export type Response = INotificationWorkflowWorkflowEdge;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowEdges/${encodeURIComponent(props.workflowEdgeId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflowEdge =>
    typia.random<INotificationWorkflowWorkflowEdge>();
  export const simulate = (
    connection: IConnection,
    props: updateEdge.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateEdge.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowEdgeId")(() => typia.assert(props.workflowEdgeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete workflow edge from workflow.
 *
 * Delete a workflow edge identified by workflowEdgeId in the specified
 * workflow.
 *
 * This operation permanently removes the edge record.
 *
 * Security restrictions limit this to workflow managers and system
 * administrators.
 *
 * Deletes are allowed only if business rules permit removing edges without
 * violating DAG integrity.
 *
 * Errors may occur if edge not found or deletion conflicts with workflow
 * constraints.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow
 * @param props.workflowEdgeId Unique identifier of the workflow edge to delete
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.workflowEdges.eraseEdge
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseEdge(
  connection: IConnection,
  props: eraseEdge.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseEdge.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseEdge.METADATA,
          path: eraseEdge.path(props),
          status: null,
        },
      );
}
export namespace eraseEdge {
  export type Props = {
    /** Unique identifier of the target workflow */
    workflowId: string & tags.Format<"uuid">;

    /** Unique identifier of the workflow edge to delete */
    workflowEdgeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges/:workflowEdgeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}/workflowEdges/${encodeURIComponent(props.workflowEdgeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseEdge.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseEdge.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.param("workflowEdgeId")(() => typia.assert(props.workflowEdgeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
