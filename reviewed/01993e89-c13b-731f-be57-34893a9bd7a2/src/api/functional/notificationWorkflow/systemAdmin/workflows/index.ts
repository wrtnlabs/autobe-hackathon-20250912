import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkflow } from "../../../../structures/INotificationWorkflowWorkflow";
import { IPageINotificationWorkflowWorkflow } from "../../../../structures/IPageINotificationWorkflowWorkflow";
export * as workflowNodes from "./workflowNodes/index";
export * as workflowEdges from "./workflowEdges/index";

/**
 * Create a new notification workflow with validation ensuring that the entry
 * node exists, all edges reference valid nodes, the workflow graph is acyclic,
 * all templates are valid LiquidJS template strings, and delay nodes specify
 * valid delays in milliseconds or durations.
 *
 * The new workflow is initialized with version 1 and timestamps for creation
 * and last update. This operation is restricted to authorized workflowManager
 * and systemAdmin roles who manage the notification workflows.
 *
 * The underlying database corresponds to the notification_workflow_workflows
 * Prisma table and related workflow nodes and edges.
 *
 * @param props.connection
 * @param props.body Creation data for a new notification workflow
 * @path /notificationWorkflow/systemAdmin/workflows
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new notification workflow */
    body: INotificationWorkflowWorkflow.ICreate;
  };
  export type Body = INotificationWorkflowWorkflow.ICreate;
  export type Response = INotificationWorkflowWorkflow;

  export const METADATA = {
    method: "POST",
    path: "/notificationWorkflow/systemAdmin/workflows",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notificationWorkflow/systemAdmin/workflows";
  export const random = (): INotificationWorkflowWorkflow =>
    typia.random<INotificationWorkflowWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of notification workflows.
 *
 * This operation retrieves a filtered and paginated list of notification
 * workflows, including all relevant metadata such as workflow code, name,
 * activation status, version, and timestamps.
 *
 * Workflow managers and system administrators can use this endpoint to perform
 * advanced searches based on workflow properties, facilitating efficient
 * management of multiple workflows.
 *
 * The search supports pagination and sorting to enhance performance and
 * usability in UIs for workflow management. Security considerations include
 * role-based access control limiting this operation to authorized user roles
 * only.
 *
 * The underlying data model is the notification_workflow_workflows table in the
 * Prisma schema, representing workflows as DAGs with related details
 * encapsulated by entry nodes and versioning information.
 *
 * This API complements CRUD operations by enabling advanced list querying for
 * workflows suitable for administrative and operational purposes.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for workflow
 *   listing
 * @path /notificationWorkflow/systemAdmin/workflows
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for workflow listing */
    body: INotificationWorkflowWorkflow.IRequest;
  };
  export type Body = INotificationWorkflowWorkflow.IRequest;
  export type Response = IPageINotificationWorkflowWorkflow;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/systemAdmin/workflows",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notificationWorkflow/systemAdmin/workflows";
  export const random = (): IPageINotificationWorkflowWorkflow =>
    typia.random<IPageINotificationWorkflowWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a notification workflow by its ID.
 *
 * Retrieve detailed information for a specified notification workflow,
 * including the workflow's properties like code, name, isActive status, and
 * entry node ID. Also includes the workflow's related nodes and edges
 * collections showing the structure of the workflow DAG.
 *
 * Access is restricted to workflowManager and systemAdmin roles to ensure only
 * authorized users can view workflow details. The result integrates with the
 * Prisma schema's notification_workflow_workflows table and its subordinate
 * workflow_nodes and workflow_edges tables.
 *
 * Errors include 404 if the workflowId does not exist. This endpoint is
 * essential for UI workflows that allow detailed visualization and editing of
 * notification workflows.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target notification workflow
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification workflow */
    workflowId: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowWorkflow;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflow =>
    typia.random<INotificationWorkflowWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing notification workflow by ID.
 *
 * Update the properties and structure of an existing notification workflow by
 * its ID. Validates the workflow graph structure, ensuring compliance with all
 * domain rules and template syntax.
 *
 * The workflow version number is incremented to track changes, and the
 * updatedAt timestamp reflects the time of modification.
 *
 * Prevents unauthorized access by restricting roles to workflowManager and
 * systemAdmin.
 *
 * Use this API to change workflow definitions safely while maintaining data
 * integrity.
 *
 * The underlying Prisma table is notification_workflow_workflows with relations
 * to workflow nodes and edges.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the notification workflow to
 *   update
 * @param props.body Update data for the notification workflow
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification workflow to update */
    workflowId: string & tags.Format<"uuid">;

    /** Update data for the notification workflow */
    body: INotificationWorkflowWorkflow.IUpdate;
  };
  export type Body = INotificationWorkflowWorkflow.IUpdate;
  export type Response = INotificationWorkflowWorkflow;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}`;
  export const random = (): INotificationWorkflowWorkflow =>
    typia.random<INotificationWorkflowWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification workflow by its unique ID.
 *
 * Deletes the specified notification workflow permanently from the system,
 * including all associated nodes and edges due to cascading. Only authorized
 * users with roles workflowManager or systemAdmin can execute this operation.
 *
 * If the workflow is referenced by active triggers, deletion is prevented to
 * maintain data integrity.
 *
 * The operation requires the workflow UUID parameter in the path to identify
 * the workflow to remove.
 *
 * @param props.connection
 * @param props.workflowId Unique identifier of the target workflow to delete
 * @path /notificationWorkflow/systemAdmin/workflows/:workflowId
 * @accessor api.functional.notificationWorkflow.systemAdmin.workflows.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target workflow to delete */
    workflowId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/systemAdmin/workflows/:workflowId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/systemAdmin/workflows/${encodeURIComponent(props.workflowId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("workflowId")(() => typia.assert(props.workflowId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
