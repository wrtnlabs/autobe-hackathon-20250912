import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkerService } from "../../../../structures/INotificationWorkflowWorkerService";

/**
 * Retrieve detailed information of a specific WorkerService user by their
 * unique identifier. This operation allows fetching non-sensitive profile data
 * such as user ID, email, created and updated timestamps.
 *
 * Security considerations require that access is restricted to the
 * WorkerService themselves or system administrators to prevent unauthorized
 * exposure of service account details.
 *
 * This operation queries the notification_workflow_workerservices table based
 * on the provided UUID path parameter and returns the full entity fields
 * excluding password hashes.
 *
 * Error handling manages cases such as resource not found or invalid UUID
 * format.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target WorkerService user
 * @path /notificationWorkflow/workerService/workerServices/:id
 * @accessor api.functional.notificationWorkflow.workerService.workerServices.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target WorkerService user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowWorkerService;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/workerService/workerServices/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/workerService/workerServices/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowWorkerService =>
    typia.random<INotificationWorkflowWorkerService>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing WorkerService user account.
 *
 * Update fields of an existing WorkerService user account specified by unique
 * ID. The request body must include fields allowed for update such as email and
 * password hash.
 *
 * Only authorized WorkerService users themselves or system administrators may
 * perform this update.
 *
 * The operation returns the updated WorkerService user entity excluding
 * sensitive fields not intended for update.
 *
 * Validation of data is performed to ensure correctness and security. Attempts
 * to update non-existent users or insufficient authorization result in errors.
 *
 * This operation modifies data and requires PUT method semantics.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target WorkerService user
 * @param props.body Update data for the WorkerService user account
 * @path /notificationWorkflow/workerService/workerServices/:id
 * @accessor api.functional.notificationWorkflow.workerService.workerServices.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target WorkerService user */
    id: string & tags.Format<"uuid">;

    /** Update data for the WorkerService user account */
    body: INotificationWorkflowWorkerService.IUpdate;
  };
  export type Body = INotificationWorkflowWorkerService.IUpdate;
  export type Response = INotificationWorkflowWorkerService;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/workerService/workerServices/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/workerService/workerServices/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowWorkerService =>
    typia.random<INotificationWorkflowWorkerService>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
