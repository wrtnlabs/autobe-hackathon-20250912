import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowAuditLogs } from "../../../structures/INotificationWorkflowAuditLogs";

/**
 * Retrieve a specific audit log entry by ID.
 *
 * Retrieves a specific audit log record identified by its unique ID from the
 * audit logs table. This audit log captures immutable events related to
 * workflows, triggers, user role assignments, and other system activities in
 * the Notification Workflow backend.
 *
 * The operation requires only the audit log ID as input and returns the
 * complete audit log entry containing event type, event data JSON, timestamp,
 * and the ID of the actor (user or system) responsible for the event whenever
 * applicable.
 *
 * Security considerations include ensuring that the calling user is authorized
 * to view audit logs and that sensitive event data is properly protected. This
 * operation is typically used for troubleshooting, compliance, or forensic
 * audits.
 *
 * If the specified audit log ID does not exist, the system will return an
 * appropriate error response indicating the resource was not found.
 *
 * This API operation corresponds to the notification_workflow_audit_logs table
 * in the Prisma schema, enabling efficient querying of individual audit log
 * entries by primary key.
 *
 * @param props.connection
 * @param props.id Unique identifier of the audit log entry
 * @path /notificationWorkflow/auditLogs/:id
 * @accessor api.functional.notificationWorkflow.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowAuditLogs;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowAuditLogs =>
    typia.random<INotificationWorkflowAuditLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
