import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowTriggerOperator } from "../../../../structures/INotificationWorkflowTriggerOperator";

/**
 * Retrieve a TriggerOperator user by unique ID.
 *
 * This GET operation retrieves a single TriggerOperator user specified by their
 * unique UUID 'id'. It returns detailed user information excluding sensitive
 * password hash data to maintain security. The system ensures that only active
 * users (not soft deleted) can be retrieved, and that the 'id' follows UUID
 * format validation.
 *
 * This endpoint is intended for authenticated TriggerOperator roles or higher
 * as per authorizationRoles. Errors include user not found or invalid UUID
 * format.
 *
 * All returned data respects the data shape described in the Prisma schema for
 * notification_workflow_triggeroperators, excluding password hash for
 * security.
 *
 * The detailed user view supports user management and auditing needs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TriggerOperator user
 * @path /notificationWorkflow/triggerOperator/triggerOperators/:id
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerOperators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the TriggerOperator user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowTriggerOperator;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/triggerOperator/triggerOperators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/triggerOperator/triggerOperators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowTriggerOperator =>
    typia.random<INotificationWorkflowTriggerOperator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a TriggerOperator user by ID.
 *
 * This PUT operation updates details of an existing TriggerOperator user
 * specified by the UUID 'id'. The request body includes fields to update such
 * as email and password hash if password change is intended. Email must remain
 * unique within the system.
 *
 * If the user is soft deleted or does not exist, an error is returned. Password
 * hashes are handled securely and never exposed in responses.
 *
 * Upon successful update, the updated TriggerOperator user details excluding
 * password hash are returned for confirmation.
 *
 * This operation enforces strict validation, authorization, and data integrity
 * consistent with the Prisma schema entity.
 *
 * Roles authorized include 'triggerOperator' to allow trigger management
 * personnel to update user info.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TriggerOperator user
 * @param props.body Request payload to update a TriggerOperator user
 * @path /notificationWorkflow/triggerOperator/triggerOperators/:id
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerOperators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the TriggerOperator user */
    id: string & tags.Format<"uuid">;

    /** Request payload to update a TriggerOperator user */
    body: INotificationWorkflowTriggerOperator.IUpdate;
  };
  export type Body = INotificationWorkflowTriggerOperator.IUpdate;
  export type Response = INotificationWorkflowTriggerOperator;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/triggerOperator/triggerOperators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/triggerOperator/triggerOperators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): INotificationWorkflowTriggerOperator =>
    typia.random<INotificationWorkflowTriggerOperator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a TriggerOperator user by ID.
 *
 * This DELETE operation soft deletes a TriggerOperator user by setting their
 * 'deleted_at' timestamp. The user record remains in the database but is
 * excluded from active queries and logins.
 *
 * Only authorized TriggerOperator roles may perform soft deletion. The
 * operation requires a valid UUID 'id' path parameter identifying the target
 * user.
 *
 * No response payload is returned upon successful soft deletion. Error
 * responses include invalid UUID format or unauthorized access.
 *
 * This operation safeguards audit integrity while supporting user lifecycle
 * management consistent with the Prisma schema for TriggerOperator users.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TriggerOperator user
 * @path /notificationWorkflow/triggerOperator/triggerOperators/:id
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerOperators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the TriggerOperator user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/triggerOperator/triggerOperators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/triggerOperator/triggerOperators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
