import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowTriggerInstance } from "../../../../structures/INotificationWorkflowTriggerInstance";
import { IPageINotificationWorkflowTriggerInstance } from "../../../../structures/IPageINotificationWorkflowTriggerInstance";

/**
 * Create a new TriggerInstance with idempotency enforcement.
 *
 * Create a new TriggerInstance for triggering a notification workflow. This
 * creation enforces idempotency on the combination of workflowId and
 * idempotencyKey. The operation initializes the trigger instance with
 * appropriate defaults to ensure proper processing lifecycle management by
 * workers.
 *
 * Security is restricted to roles authorized to initiate workflow triggers.
 *
 * The function interacts directly with the
 * notification_workflow_trigger_instances table.
 *
 * Upon creation, the trigger is set to 'enqueued' status with cursor pointing
 * to the workflow's entryNodeId, zero attempts, and availability set to current
 * time.
 *
 * If a duplicate request is detected, the existing trigger instance is returned
 * to prevent redundancy.
 *
 * @param props.connection
 * @param props.body Information required to create a TriggerInstance
 * @path /notificationWorkflow/triggerOperator/triggerInstances
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerInstances.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a TriggerInstance */
    body: INotificationWorkflowTriggerInstance.ICreate;
  };
  export type Body = INotificationWorkflowTriggerInstance.ICreate;
  export type Response = INotificationWorkflowTriggerInstance;

  export const METADATA = {
    method: "POST",
    path: "/notificationWorkflow/triggerOperator/triggerInstances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/notificationWorkflow/triggerOperator/triggerInstances";
  export const random = (): INotificationWorkflowTriggerInstance =>
    typia.random<INotificationWorkflowTriggerInstance>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search trigger instances with filters and pagination.
 *
 * Retrieve a filtered, sorted, and paginated list of trigger instances.
 *
 * Allows trigger operators and system administrators to query the lifecycle
 * state, idempotency keys, cursor position, and status of triggers.
 *
 * Supports pagination, filtering by workflow, status, and availability
 * timestamps.
 *
 * The response provides detailed summary information for each trigger instance
 * matching criteria.
 *
 * Related APIs include trigger creation, updating trigger statuses and logs.
 *
 * @param props.connection
 * @param props.body Filter, sort, and pagination options for trigger instances
 * @path /notificationWorkflow/triggerOperator/triggerInstances
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerInstances.searchTriggerInstances
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchTriggerInstances(
  connection: IConnection,
  props: searchTriggerInstances.Props,
): Promise<searchTriggerInstances.Response> {
  return true === connection.simulate
    ? searchTriggerInstances.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchTriggerInstances.METADATA,
          path: searchTriggerInstances.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchTriggerInstances {
  export type Props = {
    /** Filter, sort, and pagination options for trigger instances */
    body: INotificationWorkflowTriggerInstance.IRequest;
  };
  export type Body = INotificationWorkflowTriggerInstance.IRequest;
  export type Response = IPageINotificationWorkflowTriggerInstance.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/triggerOperator/triggerInstances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/notificationWorkflow/triggerOperator/triggerInstances";
  export const random =
    (): IPageINotificationWorkflowTriggerInstance.ISummary =>
      typia.random<IPageINotificationWorkflowTriggerInstance.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchTriggerInstances.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchTriggerInstances.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific TriggerInstance by ID.
 *
 * Retrieve a specific TriggerInstance by its unique identifier from the
 * database. This allows users or systems to obtain all available information
 * including current status, cursor position, retry attempts, and payload data.
 *
 * Security is enforced by requiring authorized roles who have permission to
 * view trigger instance data.
 *
 * The operation accesses the notification_workflow_trigger_instances table,
 * ensuring the returned data reflects the current state including workflow
 * association and execution readiness.
 *
 * This API operation provides a critical read-only function supporting trigger
 * monitoring, reporting, and troubleshooting without allowing any modification
 * of data.
 *
 * @param props.connection
 * @param props.triggerInstanceId Unique identifier of the target trigger
 *   instance
 * @path /notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerInstances.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target trigger instance */
    triggerInstanceId: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowTriggerInstance;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/triggerOperator/triggerInstances/${encodeURIComponent(props.triggerInstanceId ?? "null")}`;
  export const random = (): INotificationWorkflowTriggerInstance =>
    typia.random<INotificationWorkflowTriggerInstance>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("triggerInstanceId")(() =>
        typia.assert(props.triggerInstanceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing TriggerInstance by ID.
 *
 * Update specified fields of a TriggerInstance including status, cursor,
 * attempts, availability timing, and payload data. This enables refined control
 * over the trigger execution lifecycle.
 *
 * Access is restricted to authorized users with roles for trigger operation
 * management.
 *
 * The trigger instance identified by the path parameter is updated atomically
 * ensuring data consistency.
 *
 * This operation directly modifies rows in the
 * notification_workflow_trigger_instances database table.
 *
 * @param props.connection
 * @param props.triggerInstanceId Unique identifier of the target trigger
 *   instance to update
 * @param props.body Fields allowed to update in TriggerInstance
 * @path /notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerInstances.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target trigger instance to update */
    triggerInstanceId: string & tags.Format<"uuid">;

    /** Fields allowed to update in TriggerInstance */
    body: INotificationWorkflowTriggerInstance.IUpdate;
  };
  export type Body = INotificationWorkflowTriggerInstance.IUpdate;
  export type Response = INotificationWorkflowTriggerInstance;

  export const METADATA = {
    method: "PUT",
    path: "/notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notificationWorkflow/triggerOperator/triggerInstances/${encodeURIComponent(props.triggerInstanceId ?? "null")}`;
  export const random = (): INotificationWorkflowTriggerInstance =>
    typia.random<INotificationWorkflowTriggerInstance>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("triggerInstanceId")(() =>
        typia.assert(props.triggerInstanceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a TriggerInstance by ID permanently.
 *
 * Permanently delete a TriggerInstance from the database by its unique
 * identifier.
 *
 * Security is enforced restricting access to authorized roles.
 *
 * Execution is irreversible and removes all associated trigger instance data.
 *
 * The operation acts directly on the notification_workflow_trigger_instances
 * table to remove the record from the system.
 *
 * @param props.connection
 * @param props.triggerInstanceId Unique identifier of the target trigger
 *   instance to delete
 * @path /notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId
 * @accessor api.functional.notificationWorkflow.triggerOperator.triggerInstances.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target trigger instance to delete */
    triggerInstanceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/notificationWorkflow/triggerOperator/triggerInstances/:triggerInstanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/triggerOperator/triggerInstances/${encodeURIComponent(props.triggerInstanceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("triggerInstanceId")(() =>
        typia.assert(props.triggerInstanceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
