import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkerService } from "../../../structures/INotificationWorkflowWorkerService";
import { IPageINotificationWorkflowWorkerservice } from "../../../structures/IPageINotificationWorkflowWorkerservice";

/**
 * Search and retrieve a filtered, paginated list of WorkerService accounts.
 *
 * Retrieve a filtered and paginated list of WorkerService accounts in the
 * system. This operation supports advanced searching by email, sorting by
 * creation date or email, and pagination controls to navigate large sets of
 * worker service records.
 *
 * Security considerations include ensuring only authorized users or services
 * access this resource; however, this specific operation is designed as public
 * with no authorization roles required.
 *
 * The operation directly queries the notification_workflow_workerservices table
 * reflecting all fields relevant to the worker service users as defined by the
 * Prisma schema. Returned data provides a summary view optimized for list
 * display without sensitive hashed password data.
 *
 * This operation does not modify data and therefore follows safe GET semantics
 * with a PATCH method due to complex request body for searching and filtering.
 *
 * Error handling includes returning appropriate HTTP error codes for malformed
 * requests or server issues.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for WorkerService
 *   filtering
 * @path /notificationWorkflow/workerServices
 * @accessor api.functional.notificationWorkflow.workerServices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for WorkerService filtering */
    body: INotificationWorkflowWorkerService.IRequest;
  };
  export type Body = INotificationWorkflowWorkerService.IRequest;
  export type Response = IPageINotificationWorkflowWorkerservice.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/workerServices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notificationWorkflow/workerServices";
  export const random = (): IPageINotificationWorkflowWorkerservice.ISummary =>
    typia.random<IPageINotificationWorkflowWorkerservice.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
