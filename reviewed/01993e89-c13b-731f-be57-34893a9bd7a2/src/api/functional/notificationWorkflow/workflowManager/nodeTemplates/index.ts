import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowNodeTemplate } from "../../../../structures/INotificationWorkflowNodeTemplate";
import { IPageINotificationWorkflowNodeTemplate } from "../../../../structures/IPageINotificationWorkflowNodeTemplate";

/**
 * Search and list notification node templates with filtering and pagination.
 *
 * Retrieve a paginated and searchable list of notification node templates.
 * These templates represent reusable content components such as email, SMS, and
 * delay templates used in constructing notification workflows.
 *
 * The operation supports filtering by template type and code, facilitating
 * efficient management and selection of appropriate templates for workflow
 * nodes.
 *
 * Role-based access control restricts access to authorized users including
 * workflowManagers and systemAdmins.
 *
 * This operation operates on the notification_workflow_node_templates table as
 * defined in the Prisma schema. The response includes summary information
 * suitable for listing templates in UI components.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for node template listing
 * @path /notificationWorkflow/workflowManager/nodeTemplates
 * @accessor api.functional.notificationWorkflow.workflowManager.nodeTemplates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination criteria for node template listing */
    body: INotificationWorkflowNodeTemplate.IRequest;
  };
  export type Body = INotificationWorkflowNodeTemplate.IRequest;
  export type Response = IPageINotificationWorkflowNodeTemplate.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/notificationWorkflow/workflowManager/nodeTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/notificationWorkflow/workflowManager/nodeTemplates";
  export const random = (): IPageINotificationWorkflowNodeTemplate.ISummary =>
    typia.random<IPageINotificationWorkflowNodeTemplate.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve notification node template details by ID.
 *
 * Retrieve full details of a specific notification node template identified by
 * nodeTemplateId.
 *
 * This operation returns all relevant fields including code, type, name, and
 * LiquidJS template body, enabling detailed inspection and editing.
 *
 * Role-based access ensures only authorized workflowManagers and systemAdmins
 * can access detailed template information.
 *
 * The underlying database table for this operation is
 * notification_workflow_node_templates as per Prisma schema.
 *
 * @param props.connection
 * @param props.nodeTemplateId Unique identifier of the node template
 * @path /notificationWorkflow/workflowManager/nodeTemplates/:nodeTemplateId
 * @accessor api.functional.notificationWorkflow.workflowManager.nodeTemplates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the node template */
    nodeTemplateId: string & tags.Format<"uuid">;
  };
  export type Response = INotificationWorkflowNodeTemplate;

  export const METADATA = {
    method: "GET",
    path: "/notificationWorkflow/workflowManager/nodeTemplates/:nodeTemplateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notificationWorkflow/workflowManager/nodeTemplates/${encodeURIComponent(props.nodeTemplateId ?? "null")}`;
  export const random = (): INotificationWorkflowNodeTemplate =>
    typia.random<INotificationWorkflowNodeTemplate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nodeTemplateId")(() => typia.assert(props.nodeTemplateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
