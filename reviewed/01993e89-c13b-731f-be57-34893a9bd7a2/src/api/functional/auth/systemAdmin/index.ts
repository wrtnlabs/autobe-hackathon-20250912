import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowSystemAdmin } from "../../../structures/INotificationWorkflowSystemAdmin";

/**
 * Authenticate system administrator and issue JWT tokens using
 * notification_workflow_systemadmins table.
 *
 * Login endpoint for system administrators enabling secure authentication and
 * JWT issuance. This operation validates credentials against the
 * notification_workflow_systemadmins table, which stores system admin user
 * info, including unique email and hashed password. On success, it issues
 * tokens per the INotificationWorkflowSystemAdmin.IAuthorized pattern used for
 * secure session management. Provides foundation for admin role-based access
 * control to system management features. Ensure password hash validation and
 * secure token handling.
 *
 * @param props.connection
 * @param props.body Login credentials for system administrator including email
 *   and password
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/login
 * @accessor api.functional.auth.systemAdmin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login credentials for system administrator including email and
     * password
     */
    body: INotificationWorkflowSystemAdmin.IRequestLogin;
  };
  export type Body = INotificationWorkflowSystemAdmin.IRequestLogin;
  export type Response = INotificationWorkflowSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/login";
  export const random = (): INotificationWorkflowSystemAdmin.IAuthorized =>
    typia.random<INotificationWorkflowSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Register new system administrator and issue JWT tokens.
 *
 * Join endpoint for system administrators allowing new system admin account
 * creation and issuing JWT tokens for authenticated sessions. This operation
 * stores hashed credentials and unique email in
 * notification_workflow_systemadmins table, supporting system admin onboarding
 * processes. Supports best practices for password hashing and secure token
 * issuance.
 *
 * @param props.connection
 * @param props.body Registration information for new system administrator
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/join
 * @accessor api.functional.auth.systemAdmin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration information for new system administrator */
    body: INotificationWorkflowSystemAdmin.IRequestJoin;
  };
  export type Body = INotificationWorkflowSystemAdmin.IRequestJoin;
  export type Response = INotificationWorkflowSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/join";
  export const random = (): INotificationWorkflowSystemAdmin.IAuthorized =>
    typia.random<INotificationWorkflowSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for system administrator sessions.
 *
 * Refresh authentication tokens for system administrators using valid refresh
 * tokens to issue new JWT tokens. Ensures ongoing secure sessions for the admin
 * user by validating current tokens and session state stored in
 * notification_workflow_systemadmins table. Supports role-based access control
 * continuation while maintaining token expiration security.
 *
 * @param props.connection
 * @param props.body Refresh token request for system administrator session
 *   renewal
 * @setHeader token.access Authorization
 *
 * @path /auth/systemAdmin/refresh
 * @accessor api.functional.auth.systemAdmin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request for system administrator session renewal */
    body: INotificationWorkflowSystemAdmin.IRequestRefresh;
  };
  export type Body = INotificationWorkflowSystemAdmin.IRequestRefresh;
  export type Response = INotificationWorkflowSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/refresh";
  export const random = (): INotificationWorkflowSystemAdmin.IAuthorized =>
    typia.random<INotificationWorkflowSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
