import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkflowManager } from "../../../structures/INotificationWorkflowWorkflowManager";

/**
 * Create a new workflowManager user account in
 * notification_workflow_workflowmanagers and issue authorization tokens.
 *
 * This API operation allows a new workflowManager user to register by providing
 * their email and password. It creates a new user record in
 * notification_workflow_workflowmanagers with the required email and
 * password_hash fields, records creation and update timestamps automatically,
 * and respects the uniqueness constraint on email addresses. Upon successful
 * creation, the system issues JWT tokens conforming to
 * INotificationWorkflowWorkflowManager.IAuthorized granting access to workflow
 * management capabilities. This operation is publicly accessible to enable new
 * user onboarding.
 *
 * @param props.connection
 * @param props.body WorkflowManager user registration data
 * @setHeader token.access Authorization
 *
 * @path /auth/workflowManager/join
 * @accessor api.functional.auth.workflowManager.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** WorkflowManager user registration data */
    body: INotificationWorkflowWorkflowManager.ICreate;
  };
  export type Body = INotificationWorkflowWorkflowManager.ICreate;
  export type Response = INotificationWorkflowWorkflowManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/workflowManager/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/workflowManager/join";
  export const random = (): INotificationWorkflowWorkflowManager.IAuthorized =>
    typia.random<INotificationWorkflowWorkflowManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate workflowManager user and issue JWT tokens.
 *
 * Authenticate a workflowManager user by verifying provided credentials against
 * the notification_workflow_workflowmanagers table. This operation validates
 * the user's email and password, issuing JWT tokens upon successful login. It
 * maintains session security by restricting access tokens to a limited lifetime
 * and issuing refresh tokens for session renewal. Intended for public access as
 * the primary authentication entry point for workflowManager role users.
 *
 * @param props.connection
 * @param props.body WorkflowManager user login credentials
 * @setHeader token.access Authorization
 *
 * @path /auth/workflowManager/login
 * @accessor api.functional.auth.workflowManager.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** WorkflowManager user login credentials */
    body: INotificationWorkflowWorkflowManager.ILogin;
  };
  export type Body = INotificationWorkflowWorkflowManager.ILogin;
  export type Response = INotificationWorkflowWorkflowManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/workflowManager/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/workflowManager/login";
  export const random = (): INotificationWorkflowWorkflowManager.IAuthorized =>
    typia.random<INotificationWorkflowWorkflowManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for workflowManager user session continuity.
 *
 * Refresh JWT tokens for an authenticated workflowManager user by verifying the
 * provided refresh token. On success, new access and refresh tokens are issued
 * to maintain secure and uninterrupted session access. This operation requires
 * a valid refresh token and is restricted to authenticated users only. It is
 * part of the standard authentication token lifecycle operations supporting the
 * workflowManager role.
 *
 * @param props.connection
 * @param props.body Refresh token request data
 * @setHeader token.access Authorization
 *
 * @path /auth/workflowManager/refresh
 * @accessor api.functional.auth.workflowManager.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request data */
    body: INotificationWorkflowWorkflowManager.IRefresh;
  };
  export type Body = INotificationWorkflowWorkflowManager.IRefresh;
  export type Response = INotificationWorkflowWorkflowManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/workflowManager/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/workflowManager/refresh";
  export const random = (): INotificationWorkflowWorkflowManager.IAuthorized =>
    typia.random<INotificationWorkflowWorkflowManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
