import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowWorkerService } from "../../../structures/INotificationWorkflowWorkerService";

/**
 * Create worker service account and issue initial JWT tokens. Relates to
 * 'notification_workflow_workerservices' table.
 *
 * This API operation creates a new worker service account of role
 * 'workerService', issuing JWT tokens for authenticated sessions. It registers
 * the service with a unique email address and hashed password stored securely
 * as 'password_hash' in the Prisma schema
 * 'notification_workflow_workerservices' table. The operation ensures all
 * creation timestamps 'created_at' and 'updated_at' are handled appropriately
 * by the backend upon record creation. This supports automated backend service
 * identification and authentication. The response returns authorized tokens for
 * the newly registered service allowing secure access for processing trigger
 * instances.
 *
 * This operation is restricted to the 'workerService' authorization role and is
 * publicly accessible during account creation.
 *
 * Related operations include /auth/workerService/refresh to renew tokens and
 * manage sessions securely. No interactive login is supported for this
 * automated role.
 *
 * Security considerations include using strong password hashing and protecting
 * the JWT secret key securely.
 *
 * The operation adheres strictly to the Prisma schema fields, including unique
 * email enforcement and soft deletion with 'deleted_at'.
 *
 * @param props.connection
 * @param props.body Request body to create a new worker service account
 *   including unique email and secure password.
 * @setHeader token.access Authorization
 *
 * @path /auth/workerService/join
 * @accessor api.functional.auth.workerService.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Request body to create a new worker service account including unique
     * email and secure password.
     */
    body: INotificationWorkflowWorkerService.ICreate;
  };
  export type Body = INotificationWorkflowWorkerService.ICreate;
  export type Response = INotificationWorkflowWorkerService.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/workerService/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/workerService/join";
  export const random = (): INotificationWorkflowWorkerService.IAuthorized =>
    typia.random<INotificationWorkflowWorkerService.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access tokens for worker service role with a valid refresh token.
 * Based on 'notification_workflow_workerservices' table.
 *
 * This API operation renews JWT access tokens for an existing authenticated
 * worker service session. It validates the provided refresh token, generates
 * new access tokens, and updates session timestamps accordingly. This maintains
 * secure session continuity without re-authentication with credentials.
 *
 * It adheres closely to the 'notification_workflow_workerservices' Prisma
 * schema ensuring the service identity remains consistent and secure.
 *
 * The operation requires the 'workerService' authorization role and builds a
 * secure token refresh workflow integral for automated backend services.
 *
 * Related operations include the join operation to create initial tokens and
 * the login operation, which does not exist for guest kind 'workerService'.
 *
 * Robust security mechanisms prevent refresh token abuse and replay attacks.
 *
 * The endpoint expects a JSON body containing the refresh token information as
 * per the defined schema for secure validation.
 *
 * @param props.connection
 * @param props.body Request body containing refresh token data.
 * @setHeader token.access Authorization
 *
 * @path /auth/workerService/refresh
 * @accessor api.functional.auth.workerService.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Request body containing refresh token data. */
    body: INotificationWorkflowWorkerService.IRefresh;
  };
  export type Body = INotificationWorkflowWorkerService.IRefresh;
  export type Response = INotificationWorkflowWorkerService.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/workerService/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/workerService/refresh";
  export const random = (): INotificationWorkflowWorkerService.IAuthorized =>
    typia.random<INotificationWorkflowWorkerService.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
