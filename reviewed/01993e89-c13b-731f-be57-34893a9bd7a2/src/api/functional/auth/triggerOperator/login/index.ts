import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowTriggerOperator } from "../../../../structures/INotificationWorkflowTriggerOperator";

/**
 * Authenticate trigger operator user and issue JWT tokens
 * (notification_workflow_triggeroperators).
 *
 * Authenticate a trigger operator user using email and password credentials.
 * Validates the hashed password stored in the
 * notification_workflow_triggeroperators table. Issues JWT access and refresh
 * tokens on success.
 *
 * Ensures secure authentication based on Prisma schema fields email and
 * password_hash for triggerOperator.
 *
 * Response includes tokens and user identity encapsulated in
 * INotificationWorkflowTriggerOperator.IAuthorized.
 *
 * This operation provides the primary authentication entry point for
 * triggerOperators and is public.
 *
 * Related operations include /auth/triggerOperator/join for registration and
 * /auth/triggerOperator/refresh for renewing access tokens.
 *
 * Implementation must respect security practices by validating hashed passwords
 * and protecting against unauthorized access.
 *
 * @param props.connection
 * @param props.body Trigger operator login credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/triggerOperator/login
 * @accessor api.functional.auth.triggerOperator.login.loginTriggerOperator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function loginTriggerOperator(
  connection: IConnection,
  props: loginTriggerOperator.Props,
): Promise<loginTriggerOperator.Response> {
  const output: loginTriggerOperator.Response =
    true === connection.simulate
      ? loginTriggerOperator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...loginTriggerOperator.METADATA,
            path: loginTriggerOperator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace loginTriggerOperator {
  export type Props = {
    /** Trigger operator login credentials. */
    body: INotificationWorkflowTriggerOperator.ILogin;
  };
  export type Body = INotificationWorkflowTriggerOperator.ILogin;
  export type Response = INotificationWorkflowTriggerOperator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/triggerOperator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/triggerOperator/login";
  export const random = (): INotificationWorkflowTriggerOperator.IAuthorized =>
    typia.random<INotificationWorkflowTriggerOperator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: loginTriggerOperator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: loginTriggerOperator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
