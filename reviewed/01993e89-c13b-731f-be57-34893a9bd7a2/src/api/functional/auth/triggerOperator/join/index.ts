import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotificationWorkflowTriggerOperator } from "../../../../structures/INotificationWorkflowTriggerOperator";

/**
 * Register a new trigger operator user account and issue authorization tokens
 * (notification_workflow_triggeroperators).
 *
 * Registers a new trigger operator user in the system enabling them to
 * authenticate and access trigger management features. The API accepts user
 * credentials including the unique email and a password that is securely hashed
 * and stored in the notification_workflow_triggeroperators database table. This
 * operation ensures that the email is unique in the system and complies with
 * the schema constraints.
 *
 * The triggerOperator role is defined to create and manage trigger instances,
 * and thus requires authenticated access through JWT tokens issued upon
 * successful registration.
 *
 * This registration endpoint is public and does not require prior
 * authentication. The response returns a standard authorized token response
 * INotificationWorkflowTriggerOperator.IAuthorized upon successful user
 * creation.
 *
 * Related operation includes /auth/triggerOperator/login for authentication and
 * refresh for token renewal.
 *
 * The registration process securely stores the password hash, maintains
 * created_at and updated_at timestamps, and allows soft deletion indicated by
 * deleted_at.
 *
 * All user identity and credential data for triggerOperator role is persisted
 * in notification_workflow_triggeroperators Prisma table with fields email and
 * password_hash being critical for authentication.
 *
 * The unique index on email enforces no duplicate registrations with the same
 * email.
 *
 * @param props.connection
 * @param props.body Trigger operator registration credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/triggerOperator/join
 * @accessor api.functional.auth.triggerOperator.join.joinTriggerOperator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinTriggerOperator(
  connection: IConnection,
  props: joinTriggerOperator.Props,
): Promise<joinTriggerOperator.Response> {
  const output: joinTriggerOperator.Response =
    true === connection.simulate
      ? joinTriggerOperator.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinTriggerOperator.METADATA,
            path: joinTriggerOperator.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinTriggerOperator {
  export type Props = {
    /** Trigger operator registration credentials. */
    body: INotificationWorkflowTriggerOperator.ICreate;
  };
  export type Body = INotificationWorkflowTriggerOperator.ICreate;
  export type Response = INotificationWorkflowTriggerOperator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/triggerOperator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/triggerOperator/join";
  export const random = (): INotificationWorkflowTriggerOperator.IAuthorized =>
    typia.random<INotificationWorkflowTriggerOperator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinTriggerOperator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinTriggerOperator.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
