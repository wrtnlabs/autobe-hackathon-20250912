import { tags } from "typia";

/**
 * The NotificationWorkflow TriggerInstance entity records represent executions
 * of notification workflows with idempotency and lifecycle status tracking.
 *
 * Each instance contains a unique ID, associated workflow ID, idempotency key
 * to prevent duplicated triggers, current execution cursor, status of
 * execution, attempt counts, available processing timestamp, payload for
 * execution context, and audit timestamps.
 *
 * This entity supports the workflow orchestration engine ensuring reliable,
 * idempotent notification dispatch and workflow step progress tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowTriggerInstance = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Referenced workflow's notification_workflow_workflows.id. */
  workflow_id: string & tags.Format<"uuid">;

  /**
   * Idempotency key to ensure uniqueness and prevent duplicate trigger
   * creation per workflow.
   */
  idempotency_key: string;

  /**
   * Current node id cursor indicating the next node to execute in the
   * workflow DAG.
   */
  cursor_current_node_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Status of the trigger instance, enum values: enqueued, processing,
   * completed, failed.
   */
  status: string;

  /** Count of execution attempts for retry logic, starting from zero. */
  attempts: number & tags.Type<"int32">;

  /**
   * Timestamp indicating when the trigger instance becomes available for
   * processing or retry.
   */
  available_at: string & tags.Format<"date-time">;

  /**
   * Input data payload in JSON format for the workflow trigger execution
   * context.
   */
  payload: string;

  /** Timestamp when the TriggerInstance was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the TriggerInstance was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace INotificationWorkflowTriggerInstance {
  /**
   * Request parameters for querying TriggerInstances.
   *
   * Supports pagination and filtering.
   */
  export type IRequest = {
    /**
     * Page number. Optional for pagination of trigger instance list
     * responses.
     */
    page?: number | null | undefined;

    /** Limitation of records per a page. Optional with default limits. */
    limit?: number | null | undefined;

    /** Filter by workflow ID. Optional to restrict results. */
    workflow_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by status. Optional to filter triggers by their current
     * status.
     */
    status?: string | null | undefined;
  };

  /**
   * Create request to instantiate a new NotificationWorkflow TriggerInstance.
   *
   * This operation requires providing the workflow ID, an idempotency key to
   * prevent duplication, and the payload containing the execution context.
   *
   * The TriggerInstance is initialized with default status 'enqueued', zero
   * attempts, and availability timestamp managed internally.
   *
   * Used by trigger operators and other authorized roles to initiate workflow
   * execution safely and idempotently.
   */
  export type ICreate = {
    /** Referenced workflow's notification_workflow_workflows.id. */
    workflow_id: string & tags.Format<"uuid">;

    /**
     * Idempotency key to ensure uniqueness and prevent duplicate trigger
     * creation per workflow.
     */
    idempotency_key: string;

    /**
     * Input data payload in JSON format for the workflow trigger execution
     * context.
     */
    payload: string;
  };

  /**
   * Update request for NotificationWorkflow TriggerInstance entity.
   *
   * Allows modification of the current cursor node, execution status, retry
   * attempts, availability timestamp, and payload.
   *
   * Used internally by worker servers and management APIs for lifecycle and
   * retry management.
   */
  export type IUpdate = {
    /**
     * Current node id cursor indicating the next node to execute in the
     * workflow DAG.
     */
    cursor_current_node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Status of the trigger instance, enum values: enqueued, processing,
     * completed, failed.
     */
    status?: string | undefined;

    /** Count of execution attempts for retry logic, starting from zero. */
    attempts?: (number & tags.Type<"int32">) | undefined;

    /**
     * Timestamp indicating when the trigger instance becomes available for
     * processing or retry.
     */
    available_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Input data payload in JSON format for the workflow trigger execution
     * context.
     */
    payload?: string | undefined;
  };

  /**
   * Summary info of TriggerInstance for list views.
   *
   * Includes key state and position info for quick listing on trigger
   * monitors.
   */
  export type ISummary = {
    /** Unique identifier of the TriggerInstance */
    id: string & tags.Format<"uuid">;

    /** Workflow ID that this trigger instance belongs to */
    workflow_id: string & tags.Format<"uuid">;

    /** Idempotency key to avoid duplicate instances */
    idempotency_key: string;

    /** Current node id cursor. Nullable if finished */
    cursor_current_node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Status of the trigger instance */
    status: string;

    /** Count of execution attempts */
    attempts: number & tags.Type<"int32">;

    /** When this trigger becomes available for processing */
    available_at: string & tags.Format<"date-time">;
  };
}
