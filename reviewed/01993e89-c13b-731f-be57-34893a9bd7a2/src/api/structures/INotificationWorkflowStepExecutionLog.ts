import { tags } from "typia";

/**
 * The NotificationWorkflow StepExecutionLog entity captures detailed execution
 * history for each node step in the notification workflow engine.
 *
 * Records contain execution attempt, timing, input/output contexts, success
 * status, and optional message IDs and error messages for troubleshooting.
 *
 * Logs serve as immutable historical data for audit and debugging purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowStepExecutionLog = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Referenced workflow's notification_workflow_workflows.id. */
  workflow_id: string & tags.Format<"uuid">;

  /** Referenced trigger instance's notification_workflow_trigger_instances.id. */
  trigger_id: string & tags.Format<"uuid">;

  /** Referenced workflow node's notification_workflow_workflow_nodes.id. */
  node_id: string & tags.Format<"uuid">;

  /** Attempt number of this execution step, starting from 1. */
  attempt: number & tags.Type<"int32">;

  /** Timestamp when execution of this step started. */
  started_at: string & tags.Format<"date-time">;

  /** Timestamp when execution of this step finished. */
  finished_at: string & tags.Format<"date-time">;

  /** JSON string capturing the input execution context for this step. */
  input_context: string;

  /** JSON string capturing the output execution context after this step. */
  output_context: string;

  /** Whether this execution step succeeded. */
  success: boolean;

  /**
   * Identifier of the email message if this step sent an email; null
   * otherwise.
   */
  email_message_id?: string | null | undefined;

  /** Identifier of the SMS message if this step sent an SMS; null otherwise. */
  sms_message_id?: string | null | undefined;

  /** Error message if the execution step failed; null otherwise. */
  error_message?: string | null | undefined;
};
export namespace INotificationWorkflowStepExecutionLog {
  /**
   * Request schema for filtering and paginating workflow step execution logs.
   *
   * Supports optional filters for workflow, trigger, node ids, success flag,
   * date range, and pagination information used by UI and API clients.
   */
  export type IRequest = {
    /** Optional filter by workflow ID */
    workflow_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter by trigger ID */
    trigger_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter by node ID */
    node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter whether to include only successful executions */
    success?: boolean | null | undefined;

    /** Pagination page number */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Pagination limit per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional start date for filtering */
    start_date?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional end date for filtering */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary info of step execution log for listing.
   *
   * Captures minimal necessary details for performant log browsing and UI
   * presentation.
   */
  export type ISummary = {
    /** Unique identifier of the execution log */
    id: string & tags.Format<"uuid">;

    /** Referenced workflow ID */
    workflow_id: string & tags.Format<"uuid">;

    /** Trigger instance ID */
    trigger_id: string & tags.Format<"uuid">;

    /** ID of the node in the workflow */
    node_id: string & tags.Format<"uuid">;

    /** Attempt number */
    attempt: number & tags.Type<"int32">;

    /** Start time of execution */
    started_at: string & tags.Format<"date-time">;

    /** Finish time of execution */
    finished_at: string & tags.Format<"date-time">;

    /** Whether the step execution was successful */
    success: boolean;
  };
}
