import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Trigger operator users who create and manage trigger instances for workflows.
 * Stores identity and authentication information with audit timestamps for
 * access control enforcement.
 *
 * @namespace Identity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowTriggerOperator = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address of the trigger operator, used for user
   * identification and login.
   */
  email: string;

  /** Hashed password securely stored for authentication. */
  password_hash: string;

  /** Record creation timestamp for audit trail. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp reflecting modifications. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp marking inactive users; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowTriggerOperator {
  /**
   * Trigger operator user registration data. Requires unique email and
   * password hash for user creation. No id or user_id accepted here.
   */
  export type ICreate = {
    /**
     * Unique email address of the trigger operator, used for identification
     * and login.
     */
    email: string & tags.Format<"email">;

    /** Hashed password securely stored for authentication. */
    password_hash: string;
  };

  /**
   * Trigger operator user login credentials. Used to authenticate and obtain
   * JWT tokens.
   */
  export type ILogin = {
    /** Email address of the trigger operator user for login. */
    email: string & tags.Format<"email">;

    /** Hashed password for authentication. */
    password_hash: string;
  };

  /** Request body containing the refresh token for session continuation. */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens. */
    refresh_token: string;
  };

  /** Authorization response containing JWT token for a trigger operator user. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated trigger operator user. */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address of the trigger operator, used for user
     * identification and login.
     */
    email: string;

    /** Hashed password securely stored for authentication. */
    password_hash: string;

    /** Record creation timestamp for audit trail. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp reflecting modifications. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp marking inactive users; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Update DTO for trigger operator users.
   *
   * @namespace Identity
   */
  export type IUpdate = {
    /**
     * Unique email address of the trigger operator, used for user
     * identification and login.
     */
    email?: string | undefined;

    /** Hashed password securely stored for authentication. */
    password_hash?: string | undefined;

    /** Soft delete timestamp marking inactive users; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
