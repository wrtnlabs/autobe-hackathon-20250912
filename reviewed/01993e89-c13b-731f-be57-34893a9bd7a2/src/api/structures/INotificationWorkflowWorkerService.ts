import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Automated worker service users responsible for processing triggers
 * concurrently. Authentication and audit fields included to track service
 * identity and activity.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Identity
 * @summary WorkerService entity representing automated backend service accounts used for processing notification workflow trigger instances concurrently.
 * @note DO NOT include password in response; handle authentication via tokens.
 * @note Soft deletion supported via deleted_at field. Null means active.
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowWorkerService = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Unique email identifying the worker service account. */
  email: string;

  /** Hashed password for worker service authentication. */
  password_hash: string;

  /** Timestamp when the worker service account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the worker service account was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp; null for active records. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowWorkerService {
  /**
   * Request schema for creating a new worker service account including unique
   * email and secure hashed password.
   */
  export type ICreate = {
    /** Unique email identifying the worker service account. */
    email: string & tags.Format<"email">;

    /** Hashed password for worker service authentication. */
    password_hash: string;
  };

  /**
   * Authorization response containing JWT token and identity for worker
   * service user.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated worker service user. */
    id: string & tags.Format<"uuid">;

    /** Unique email identifying the worker service account. */
    email: string & tags.Format<"email">;

    /** Hashed password for worker service authentication. */
    password_hash: string;

    /** Timestamp when the worker service account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the worker service account was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp; null for active records. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body containing refresh token for renewing JWT tokens for worker
   * service.
   */
  export type IRefresh = {
    /** Refresh token string for renewing access tokens. */
    refresh_token: string;
  };

  /**
   * Request DTO for filtered, paginated list of worker services.
   *
   * Allows optional filters and pagination.
   */
  export type IRequest = {
    /** Optional email filter. */
    email?: string | null | undefined;

    /** Optional page number. */
    page?: number | null | undefined;

    /** Optional limit per page. */
    limit?: number | null | undefined;
  };

  /**
   * Parameters to update in the worker service user account.
   *
   * Only include fields that may be updated.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace Identity
   * @summary Partial update schema for WorkerService
   */
  export type IUpdate = {
    /** Unique email identifying the worker service account. */
    email?: string | undefined;

    /** Hashed password for worker service authentication. */
    password_hash?: string | undefined;
  };

  /**
   * Summary info of worker service for list display.
   *
   * This type provides minimal identification information including unique ID
   * and email address for use in collections and listings.
   */
  export type ISummary = {
    /** Unique identifier of the worker service */
    id: string & tags.Format<"uuid">;

    /** Unique email identifying the worker service account */
    email: string;

    /** Timestamp when the worker service account was created */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the worker service account was last updated */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
