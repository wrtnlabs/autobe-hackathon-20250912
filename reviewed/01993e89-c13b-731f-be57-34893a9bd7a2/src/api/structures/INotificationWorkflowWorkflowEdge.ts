import { tags } from "typia";

/**
 * Notification Workflow graph edge connecting nodes.
 *
 * This schema represents a single directed edge in a notification workflow DAG.
 * It links one node ('from_node_id') to another ('to_node_id') within the same
 * workflow.
 *
 * Edges define the execution order and branching of notification steps.
 *
 * Soft deletion allows marking edges inactive without hard removal.
 *
 * Properties:
 *
 * - `id`: Unique edge identifier.
 * - `workflow_id`: Associated workflow.
 * - `from_node_id`: Start node.
 * - `to_node_id`: End node.
 * - `created_at`: Creation timestamp.
 * - `updated_at`: Last update timestamp.
 * - `deleted_at`: Nullable soft delete timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowWorkflowEdge = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Parent workflow's notification_workflow_workflows.id */
  workflow_id: string & tags.Format<"uuid">;

  /** Source node reference in notification_workflow_workflow_nodes.id */
  from_node_id: string & tags.Format<"uuid">;

  /** Target node reference in notification_workflow_workflow_nodes.id */
  to_node_id: string & tags.Format<"uuid">;

  /** Timestamp when the edge was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the edge was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for the edge. null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowWorkflowEdge {
  /**
   * Request type for filtering and searching Workflow Edges.
   *
   * All properties are optional and nullable to support flexible filtering
   * criteria including by IDs and timestamps.
   */
  export type IRequest = {
    /** Primary key of the workflow edge. */
    id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Foreign key referencing the parent workflow. */
    workflow_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Source node reference in the workflow edge. */
    from_node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Target node reference in the workflow edge. */
    to_node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Timestamp when the edge was created. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp when the edge was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Soft deletion timestamp for the edge. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Create input for notification workflow edge.
   *
   * Includes linking nodes to build workflow DAG edges.
   */
  export type ICreate = {
    /** Parent workflow's notification_workflow_workflows.id */
    workflow_id: string & tags.Format<"uuid">;

    /** Source node reference in notification_workflow_workflow_nodes.id */
    from_node_id: string & tags.Format<"uuid">;

    /** Target node reference in notification_workflow_workflow_nodes.id */
    to_node_id: string & tags.Format<"uuid">;
  };

  /**
   * Update input for notification workflow edge.
   *
   * Allows partial update of connected nodes.
   */
  export type IUpdate = {
    /** Parent workflow's notification_workflow_workflows.id */
    workflow_id?: (string & tags.Format<"uuid">) | undefined;

    /** Source node reference in notification_workflow_workflow_nodes.id */
    from_node_id?: (string & tags.Format<"uuid">) | undefined;

    /** Target node reference in notification_workflow_workflow_nodes.id */
    to_node_id?: (string & tags.Format<"uuid">) | undefined;
  };
}
