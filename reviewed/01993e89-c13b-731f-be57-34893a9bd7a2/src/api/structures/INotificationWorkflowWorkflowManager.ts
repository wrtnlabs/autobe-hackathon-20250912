import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Workflow manager users responsible for creating, updating, activating, and
 * managing notification workflows. Stores identity and authentication data
 * required for access control. Includes standard audit fields for record
 * management.
 *
 * @namespace Identity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowWorkflowManager = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address of the workflow manager used for login and
   * notifications.
   */
  email: string;

  /** Hashed password for authentication; never store plain passwords. */
  password_hash: string;

  /** Timestamp when the user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null if the record is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowWorkflowManager {
  /** WorkflowManager user registration data */
  export type ICreate = {
    /** Unique email address to register a new workflow manager user. */
    email: string;

    /** Hashed password string for user authentication. */
    password_hash: string;
  };

  /** WorkflowManager user login credentials */
  export type ILogin = {
    /** Email address used for login. */
    email: string;

    /** Plain password string submitted for authentication. */
    password: string;
  };

  /** Refresh token request data */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens. */
    refresh_token: string;
  };

  /** Authorized workflowManager user session data */
  export type IAuthorized = {
    /** Unique identifier of the authenticated workflow manager user. */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address of the workflow manager used for login and
     * notifications.
     */
    email: string;

    /** Hashed password for authentication; never store plain passwords. */
    password_hash: string;

    /** Timestamp when the user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp for soft deletion; null if the record is active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request schema for searching and paginating workflow manager users. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Search string to filter workflow managers by email or other fields. */
    search?: string | null | undefined;

    /** Sort criteria field name. */
    sortBy?: string | null | undefined;
  };

  /**
   * Update DTO for workflow manager users.
   *
   * @namespace Identity
   */
  export type IUpdate = {
    /**
     * Unique email address of the workflow manager used for login and
     * notifications.
     */
    email?: string | undefined;

    /** Hashed password for authentication; never store plain passwords. */
    password_hash?: string | undefined;

    /** Timestamp for soft deletion; null if the record is active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for WorkflowManager users.
   *
   * Includes primary identifier and email used for login and notifications.
   * Excludes sensitive fields like password_hash.
   */
  export type ISummary = {
    /** Unique identifier of the workflow manager user. */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the workflow manager user. */
    email: string & tags.Format<"email">;
  };
}
