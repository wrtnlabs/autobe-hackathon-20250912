import { tags } from "typia";

/**
 * A notification workflow represents an orchestrated sequence of notification
 * steps arranged as a Directed Acyclic Graph (DAG). This entity defines the
 * structure, metadata, and active status of a notification workflow, tracking
 * versions and timestamps for lifecycle management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowWorkflow = {
  /** Unique identifier. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique business identifier code for the workflow.
   *
   * This code helps agents and clients reference workflows uniquely.
   */
  code: string;

  /**
   * Name of the workflow.
   *
   * This is the display name used in UI and reports.
   */
  name: string;

  /** Indicates if workflow is active and can be triggered. */
  is_active: boolean;

  /** ID of the entry node of the workflow DAG. */
  entry_node_id: string & tags.Format<"uuid">;

  /** Version number of this workflow, incremented on update. */
  version: number & tags.Type<"int32">;

  /** Creation timestamp of the workflow. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp of the workflow. */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable soft deletion timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowWorkflow {
  /**
   * Search parameters for filtering notification workflows.
   *
   * This interface supports flexible querying with optional filters and
   * pagination.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   * @namespace Workflows
   * @summary Filter and pagination request parameters for workflows
   */
  export type IRequest = {
    /**
     * Unique business identifier code for the workflow.
     *
     * @nullable
     */
    code?: string | null | undefined;

    /**
     * Display name of the workflow.
     *
     * @nullable
     */
    name?: string | null | undefined;

    /**
     * Indicates whether the workflow is active and can be triggered.
     *
     * @nullable
     */
    is_active?: boolean | null | undefined;

    /**
     * Reference to the starting node of the workflow DAG.
     *
     * @nullable
     */
    entry_node_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Version number of the workflow, incremented on updates.
     *
     * @nullable
     */
    version?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Timestamp when the workflow was created.
     *
     * @nullable
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the workflow was last updated.
     *
     * @nullable
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Soft deletion timestamp, null if not deleted.
     *
     * @nullable
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Page number for pagination.
     *
     * @nullable
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limit of records per page.
     *
     * @nullable
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Data required to create a new notification workflow, including the
   * initial version, activation status, and entry node.
   */
  export type ICreate = {
    /**
     * Unique business identifier code for the workflow.
     *
     * Must be unique system-wide.
     */
    code: string;

    /** Name of the workflow. */
    name: string;

    /** Indicates if workflow is active and can be triggered. */
    is_active: boolean;

    /**
     * ID of the entry node of the workflow DAG.
     *
     * Must be a valid node ID in the nodes of workflow.
     */
    entry_node_id: string & tags.Format<"uuid">;

    /** Version number; for creation, typically start at 1. */
    version: number & tags.Type<"int32">;
  };

  /**
   * Data for updating an existing notification workflow, allowing partial
   * modification of properties such as name, active status, and versioning.
   */
  export type IUpdate = {
    /**
     * Unique business identifier code for the workflow.
     *
     * Must be unique system-wide.
     */
    code?: string | undefined;

    /** Name of the workflow. */
    name?: string | undefined;

    /** Indicates if workflow is active and can be triggered. */
    is_active?: boolean | undefined;

    /**
     * ID of the entry node of the workflow DAG.
     *
     * Must be a valid node ID in the nodes of workflow.
     */
    entry_node_id?: (string & tags.Format<"uuid">) | undefined;

    /** Version number; for creation, typically start at 1. */
    version?: (number & tags.Type<"int32">) | undefined;

    /** Nullable soft deletion timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
