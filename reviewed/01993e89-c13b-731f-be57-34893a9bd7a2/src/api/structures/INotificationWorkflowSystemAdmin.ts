import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a system administrator account with authentication credentials and
 * audit timestamps.
 *
 * This entity is stored in the notification_workflow_systemadmins Prisma
 * database table
 *
 * This entity stores unique email and securely hashed password enabling
 * role-based admin access.
 *
 * Audit fields include creation, update, and optional soft deletion timestamps
 * to maintain record lifecycle status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationWorkflowSystemAdmin = {
  /**
   * Unique ID for system administrator user.
   *
   * UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Email address of the system administrator.
   *
   * Must be unique for authentication.
   */
  email: string;

  /**
   * Password hash stored securely.
   *
   * Do not expose in response types.
   */
  password_hash: string;

  /**
   * Timestamp the user was created.
   *
   * ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp the user was last updated.
   *
   * ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft deletion timestamp.
   *
   * ISO 8601 date-time string or null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace INotificationWorkflowSystemAdmin {
  /** Request body schema for system administrator login. */
  export type IRequestLogin = {
    /** Email address used by the system administrator to login. */
    email: string;

    /**
     * Password string in clear text (usually hashed on client before
     * sending).
     */
    password: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as login, join, or token refresh.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated system administrator. */
    id: string;

    /**
     * Email address of the system administrator.
     *
     * Must be unique for authentication.
     */
    email: string;

    /**
     * Password hash stored securely.
     *
     * Do not expose in response types.
     */
    password_hash: string;

    /**
     * Timestamp the user was created.
     *
     * ISO 8601 date-time string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp the user was last updated.
     *
     * ISO 8601 date-time string.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional soft deletion timestamp.
     *
     * ISO 8601 date-time string or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request body schema for system administrator registration. */
  export type IRequestJoin = {
    /** Email address for registering a new system administrator. */
    email: string;

    /** Password string in clear text for registration. */
    password: string;
  };

  /** Request body schema for refreshing JWT tokens. */
  export type IRequestRefresh = {
    /** Refresh token string used to renew authentication tokens. */
    refresh_token: string;
  };

  /**
   * Request DTO for paginated search of system admin users.
   *
   * All fields optional to allow filtering and pagination.
   */
  export type IRequest = {
    /** Optional email filter string. */
    email?: string | null | undefined;

    /** Optional pagination page number. */
    page?: number | null | undefined;

    /** Optional pagination limit. */
    limit?: number | null | undefined;
  };

  /**
   * Request DTO for updating system admin user details.
   *
   * Supports changing email, password hash, and deleted_at timestamps.
   */
  export type IUpdate = {
    /** Optionally update the email. */
    email?: string | null | undefined;

    /** Optionally update the hashed password. */
    password_hash?: string | null | undefined;

    /** Optionally update the soft deletion timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for SystemAdmin users.
   *
   * Includes primary identifier and email used for login and administration.
   * Does not include password hashes or sensitive fields.
   */
  export type ISummary = {
    /** Unique identifier of the system administrator user. */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the system administrator user. */
    email: string & tags.Format<"email">;
  };
}
