import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchnotificationWorkflowSystemAdminSystemAdmins } from "../../../../providers/patchnotificationWorkflowSystemAdminSystemAdmins";
import { SystemAdminAuth } from "../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../decorators/payload/SystemAdminPayload";
import { getnotificationWorkflowSystemAdminSystemAdminsId } from "../../../../providers/getnotificationWorkflowSystemAdminSystemAdminsId";
import { putnotificationWorkflowSystemAdminSystemAdminsId } from "../../../../providers/putnotificationWorkflowSystemAdminSystemAdminsId";
import { deletenotificationWorkflowSystemAdminSystemAdminsId } from "../../../../providers/deletenotificationWorkflowSystemAdminSystemAdminsId";

import { IPageINotificationWorkflowSystemAdmin } from "../../../../api/structures/IPageINotificationWorkflowSystemAdmin";
import { INotificationWorkflowSystemAdmin } from "../../../../api/structures/INotificationWorkflowSystemAdmin";

@Controller("/notificationWorkflow/systemAdmin/systemAdmins")
export class NotificationworkflowSystemadminSystemadminsController {
  /**
   * Search and retrieve paginated list of systemAdmin users.
   *
   * Retrieve a filtered and paginated list of system administrator users in the
   * Notification Workflow service. This operation allows clients to query
   * systemAdmin accounts matching criteria such as email substrings and
   * creation date ranges.
   *
   * Security considerations include enforcing 'systemAdmin' role access and
   * limiting exposure of sensitive information. Only authorized system
   * administrators can use this endpoint.
   *
   * The operation references the notification_workflow_systemadmins table,
   * including its core fields: id, email, password_hash (not included in
   * results), and audit timestamps (created_at, updated_at).
   *
   * Response data returns essential summary details for user management and
   * display purposes.
   *
   * This operation should be used to support user interfaces for administrative
   * user listings and audits.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for systemAdmin
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowSystemAdmin.IRequest,
  ): Promise<IPageINotificationWorkflowSystemAdmin.ISummary> {
    try {
      return await patchnotificationWorkflowSystemAdminSystemAdmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a systemAdmin user by ID.
   *
   * Retrieve detailed information of a single system administrator user from
   * the Notification Workflow backend.
   *
   * This endpoint requires 'systemAdmin' role authentication to ensure only
   * authorized users can access sensitive user details.
   *
   * The systemAdmin entity includes id, email, audit timestamps, and optional
   * deleted_at timestamp indicating soft deletion status.
   *
   * Path parameter 'id' must be a valid UUID referencing a systemAdmin record.
   *
   * Typical use cases: viewing or editing an admin user's detailed profile in a
   * secure administration interface.
   *
   * @param connection
   * @param id Unique identifier of the systemAdmin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowSystemAdmin> {
    try {
      return await getnotificationWorkflowSystemAdminSystemAdminsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a systemAdmin user's data.
   *
   * Update the details of an existing system administrator user in the
   * Notification Workflow backend.
   *
   * Authentication requires 'systemAdmin' role to restrict modification
   * privileges.
   *
   * The request body accepts email and password_hash updates, validated
   * according to the Prisma schema fields.
   *
   * The path parameter 'id' identifies which admin user to update.
   *
   * The response returns the updated systemAdmin user record with current data.
   *
   * Use cases include changing admin email addresses or resetting
   * authentication credentials securely.
   *
   * @param connection
   * @param id Unique identifier of the systemAdmin user to update
   * @param body Update data for the systemAdmin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowSystemAdmin.IUpdate,
  ): Promise<INotificationWorkflowSystemAdmin> {
    try {
      return await putnotificationWorkflowSystemAdminSystemAdminsId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a systemAdmin user by ID.
   *
   * Delete a system administrator user account permanently from the
   * Notification Workflow backend.
   *
   * This action removes the record completely from the database, not just
   * marking it as deleted.
   *
   * Access requires 'systemAdmin' role authentication.
   *
   * The {id} path parameter specifies the UUID of the target systemAdmin user.
   *
   * This operation should be used cautiously as it cannot be undone via the
   * API.
   *
   * @param connection
   * @param id Unique identifier of the systemAdmin user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowSystemAdminSystemAdminsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
