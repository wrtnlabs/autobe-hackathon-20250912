import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postnotificationWorkflowSystemAdminNodeTemplates } from "../../../../providers/postnotificationWorkflowSystemAdminNodeTemplates";
import { SystemAdminAuth } from "../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../decorators/payload/SystemAdminPayload";
import { patchnotificationWorkflowSystemAdminNodeTemplates } from "../../../../providers/patchnotificationWorkflowSystemAdminNodeTemplates";
import { getnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId } from "../../../../providers/getnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId";
import { putnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId } from "../../../../providers/putnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId";
import { deletenotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId } from "../../../../providers/deletenotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId";

import { INotificationWorkflowNodeTemplate } from "../../../../api/structures/INotificationWorkflowNodeTemplate";
import { IPageINotificationWorkflowNodeTemplate } from "../../../../api/structures/IPageINotificationWorkflowNodeTemplate";

@Controller("/notificationWorkflow/systemAdmin/nodeTemplates")
export class NotificationworkflowSystemadminNodetemplatesController {
  /**
   * Create a notification workflow node template.
   *
   * Create a new notification workflow node template.
   *
   * This API allows system administrators to add a reusable node template for
   * notification workflows. Node templates contain LiquidJS template strings
   * defining content for Email, SMS, or Delay nodes. The request validates that
   * the provided code is unique within the system and that the template body
   * fits the node type. On success, the new node template is stored with
   * timestamps.
   *
   * Authorization requires the systemAdmin role.
   *
   * This operation interacts exclusively with the
   * notification_workflow_node_templates table.
   *
   * No direct relationship with other endpoints, but these templates are
   * referenced when creating workflow nodes.
   *
   * @param connection
   * @param body Information required to create a new node template
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowNodeTemplate.ICreate,
  ): Promise<INotificationWorkflowNodeTemplate> {
    try {
      return await postnotificationWorkflowSystemAdminNodeTemplates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list notification node templates with filtering and pagination.
   *
   * Retrieve a paginated and searchable list of notification node templates.
   * These templates represent reusable content components such as email, SMS,
   * and delay templates used in constructing notification workflows.
   *
   * The operation supports filtering by template type and code, facilitating
   * efficient management and selection of appropriate templates for workflow
   * nodes.
   *
   * Role-based access control restricts access to authorized users including
   * workflowManagers and systemAdmins.
   *
   * This operation operates on the notification_workflow_node_templates table
   * as defined in the Prisma schema. The response includes summary information
   * suitable for listing templates in UI components.
   *
   * @param connection
   * @param body Filtering and pagination criteria for node template listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowNodeTemplate.IRequest,
  ): Promise<IPageINotificationWorkflowNodeTemplate.ISummary> {
    try {
      return await patchnotificationWorkflowSystemAdminNodeTemplates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve notification node template details by ID.
   *
   * Retrieve full details of a specific notification node template identified
   * by nodeTemplateId.
   *
   * This operation returns all relevant fields including code, type, name, and
   * LiquidJS template body, enabling detailed inspection and editing.
   *
   * Role-based access ensures only authorized workflowManagers and systemAdmins
   * can access detailed template information.
   *
   * The underlying database table for this operation is
   * notification_workflow_node_templates as per Prisma schema.
   *
   * @param connection
   * @param nodeTemplateId Unique identifier of the node template
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":nodeTemplateId")
  public async at(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("nodeTemplateId")
    nodeTemplateId: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowNodeTemplate> {
    try {
      return await getnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId(
        {
          systemAdmin,
          nodeTemplateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a notification workflow node template by ID.
   *
   * Update an existing notification workflow node template identified by
   * nodeTemplateId.
   *
   * System administrators can modify the properties of node templates used in
   * notification workflows to correct or improve notification content. The
   * update operation validates the existence of the targeted template and the
   * correctness of the provided data.
   *
   * All relevant fields, including name, code, type, and template body, can be
   * updated.
   *
   * Role based access control applies, restricting to systemAdmin only.
   *
   * This operation updates the notification_workflow_node_templates record and
   * maintains auditability via updated_at timestamp.
   *
   * No dependent operations need to be pre-executed but changes may affect
   * workflow executions referencing this node template.
   *
   * @param connection
   * @param nodeTemplateId Unique identifier of the node template to update
   * @param body Updated information for the node template
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":nodeTemplateId")
  public async update(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("nodeTemplateId")
    nodeTemplateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowNodeTemplate.IUpdate,
  ): Promise<INotificationWorkflowNodeTemplate> {
    try {
      return await putnotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId(
        {
          systemAdmin,
          nodeTemplateId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification workflow node template by ID.
   *
   * This hard delete operation permanently removes the template from the
   * database. System administrators must use careful judgment when deleting
   * node templates as workflows referencing deleted templates may fail or
   * malfunction.
   *
   * The operation enforces role-based access control for systemAdmin only.
   *
   * No request body is required. No response content is returned.
   *
   * This operation affects the notification_workflow_node_templates table
   * directly.
   *
   * @param connection
   * @param nodeTemplateId Unique identifier of the node template to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":nodeTemplateId")
  public async erase(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("nodeTemplateId")
    nodeTemplateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowSystemAdminNodeTemplatesNodeTemplateId(
        {
          systemAdmin,
          nodeTemplateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
