import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getnotificationWorkflowSystemAdminWorkerServicesId } from "../../../../providers/getnotificationWorkflowSystemAdminWorkerServicesId";
import { SystemAdminAuth } from "../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../decorators/payload/SystemAdminPayload";
import { putnotificationWorkflowSystemAdminWorkerServicesId } from "../../../../providers/putnotificationWorkflowSystemAdminWorkerServicesId";
import { deletenotificationWorkflowSystemAdminWorkerServicesId } from "../../../../providers/deletenotificationWorkflowSystemAdminWorkerServicesId";

import { INotificationWorkflowWorkerService } from "../../../../api/structures/INotificationWorkflowWorkerService";

@Controller("/notificationWorkflow/systemAdmin/workerServices/:id")
export class NotificationworkflowSystemadminWorkerservicesController {
  /**
   * Retrieve detailed information of a specific WorkerService user by their
   * unique identifier. This operation allows fetching non-sensitive profile
   * data such as user ID, email, created and updated timestamps.
   *
   * Security considerations require that access is restricted to the
   * WorkerService themselves or system administrators to prevent unauthorized
   * exposure of service account details.
   *
   * This operation queries the notification_workflow_workerservices table based
   * on the provided UUID path parameter and returns the full entity fields
   * excluding password hashes.
   *
   * Error handling manages cases such as resource not found or invalid UUID
   * format.
   *
   * @param connection
   * @param id Unique identifier of the target WorkerService user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkerService> {
    try {
      return await getnotificationWorkflowSystemAdminWorkerServicesId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing WorkerService user account.
   *
   * Update fields of an existing WorkerService user account specified by unique
   * ID. The request body must include fields allowed for update such as email
   * and password hash.
   *
   * Only authorized WorkerService users themselves or system administrators may
   * perform this update.
   *
   * The operation returns the updated WorkerService user entity excluding
   * sensitive fields not intended for update.
   *
   * Validation of data is performed to ensure correctness and security.
   * Attempts to update non-existent users or insufficient authorization result
   * in errors.
   *
   * This operation modifies data and requires PUT method semantics.
   *
   * @param connection
   * @param id Unique identifier of the target WorkerService user
   * @param body Update data for the WorkerService user account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkerService.IUpdate,
  ): Promise<INotificationWorkflowWorkerService> {
    try {
      return await putnotificationWorkflowSystemAdminWorkerServicesId({
        systemAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a WorkerService user account.
   *
   * Permanently delete a WorkerService user account by unique ID. This hard
   * delete removes the record from the database irreversibly.
   *
   * Access to this operation is limited to system administrators to protect
   * system integrity.
   *
   * No data is returned upon successful deletion.
   *
   * Errors include resource not found and authorization failure.
   *
   * The operation corresponds to DELETE HTTP method with no request or response
   * body.
   *
   * @param connection
   * @param id Unique identifier of the target WorkerService user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowSystemAdminWorkerServicesId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
