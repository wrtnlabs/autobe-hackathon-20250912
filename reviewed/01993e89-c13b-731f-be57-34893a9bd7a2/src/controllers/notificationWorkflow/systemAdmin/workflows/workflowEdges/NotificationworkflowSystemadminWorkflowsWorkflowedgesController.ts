import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges } from "../../../../../providers/postnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges";
import { SystemAdminAuth } from "../../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../../decorators/payload/SystemAdminPayload";
import { patchnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges } from "../../../../../providers/patchnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges";
import { getnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId } from "../../../../../providers/getnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId";
import { putnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId } from "../../../../../providers/putnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId";
import { deletenotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId } from "../../../../../providers/deletenotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId";

import { INotificationWorkflowWorkflowEdge } from "../../../../../api/structures/INotificationWorkflowWorkflowEdge";
import { IPageINotificationWorkflowWorkflowEdge } from "../../../../../api/structures/IPageINotificationWorkflowWorkflowEdge";

@Controller(
  "/notificationWorkflow/systemAdmin/workflows/:workflowId/workflowEdges",
)
export class NotificationworkflowSystemadminWorkflowsWorkflowedgesController {
  /**
   * Create workflow edge connecting two nodes.
   *
   * Create a new workflow edge linking two nodes within the specified workflow.
   *
   * Security considerations: This operation requires authorization and is
   * typically performed by workflowManager or systemAdmin roles with permission
   * to modify workflows.
   *
   * The edge connects a source node ('from_node_id') to a target node
   * ('to_node_id') within the same workflow, enforcing DAG integrity with no
   * cycles.
   *
   * Validation ensures that both nodes belong to the workflow and the edge does
   * not create cycles or self loops.
   *
   * This operation relates to the notification_workflow_workflow_edges table,
   * enforcing referential integrity with foreign keys and supporting audit
   * timestamps.
   *
   * Errors return details if nodes are invalid or edge creation violates DAG
   * constraints.
   *
   * Refer to related APIs for listing edges, updating edges, or deleting edges
   * for full lifecycle management.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param body Information needed to create a workflow edge including
   *   from_node_id and to_node_id
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createEdge(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowEdge.ICreate,
  ): Promise<INotificationWorkflowWorkflowEdge> {
    try {
      return await postnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges(
        {
          systemAdmin,
          workflowId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List workflow edges for a given workflow with filtering and pagination.
   *
   * Retrieve a paginated list of Workflow Edges belonging to the specified
   * Workflow. This operation supports search and filtering via the request body
   * parameters.
   *
   * Only authorized users (workflowManager, systemAdmin) can access this
   * endpoint.
   *
   * Response includes paginated edges with details such as fromNodeId and
   * toNodeId, enabling clients to render or manage the workflow DAG structure.
   *
   * This operation complements workflow node and workflow CRUD APIs for
   * comprehensive workflow management.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param body Filtering and pagination criteria for Workflow Edges
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexWorkflowEdges(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowEdge.IRequest,
  ): Promise<IPageINotificationWorkflowWorkflowEdge> {
    try {
      return await patchnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdges(
        {
          systemAdmin,
          workflowId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a Workflow Edge.
   *
   * Get detailed information about a specific Workflow Edge within a Workflow
   * by its IDs.
   *
   * Access is restricted to roles workflowManager and systemAdmin.
   *
   * Retrieves edge details necessary for display and validation in workflow
   * editors or audit trails.
   *
   * This operation aids clients in understanding and manipulating the workflow
   * structure at the edge level.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param workflowEdgeId Unique identifier of the workflow edge
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":workflowEdgeId")
  public async atWorkflowEdge(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowEdgeId")
    workflowEdgeId: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkflowEdge> {
    try {
      return await getnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId(
        {
          systemAdmin,
          workflowId,
          workflowEdgeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update workflow edge connecting nodes.
   *
   * Update an existing workflow edge's from_node_id or to_node_id to modify the
   * DAG structure within the workflow.
   *
   * Security ensures only authorized users with workflow edit permissions can
   * perform this.
   *
   * Validation checks confirm no cycle or self-loop generation.
   *
   * This operation updates the notification_workflow_workflow_edges record and
   * refreshes updated_at timestamp.
   *
   * Errors include invalid node references or conflict with DAG constraints.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param workflowEdgeId Unique identifier of the workflow edge to update
   * @param body Fields for updating workflow edge including from_node_id and
   *   to_node_id
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":workflowEdgeId")
  public async updateEdge(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowEdgeId")
    workflowEdgeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowEdge.IUpdate,
  ): Promise<INotificationWorkflowWorkflowEdge> {
    try {
      return await putnotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId(
        {
          systemAdmin,
          workflowId,
          workflowEdgeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete workflow edge from workflow.
   *
   * Delete a workflow edge identified by workflowEdgeId in the specified
   * workflow.
   *
   * This operation permanently removes the edge record.
   *
   * Security restrictions limit this to workflow managers and system
   * administrators.
   *
   * Deletes are allowed only if business rules permit removing edges without
   * violating DAG integrity.
   *
   * Errors may occur if edge not found or deletion conflicts with workflow
   * constraints.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param workflowEdgeId Unique identifier of the workflow edge to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":workflowEdgeId")
  public async eraseEdge(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowEdgeId")
    workflowEdgeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowSystemAdminWorkflowsWorkflowIdWorkflowEdgesWorkflowEdgeId(
        {
          systemAdmin,
          workflowId,
          workflowEdgeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
