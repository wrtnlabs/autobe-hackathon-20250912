import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postnotificationWorkflowSystemAdminWorkflows } from "../../../../providers/postnotificationWorkflowSystemAdminWorkflows";
import { SystemAdminAuth } from "../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../decorators/payload/SystemAdminPayload";
import { patchnotificationWorkflowSystemAdminWorkflows } from "../../../../providers/patchnotificationWorkflowSystemAdminWorkflows";
import { getnotificationWorkflowSystemAdminWorkflowsWorkflowId } from "../../../../providers/getnotificationWorkflowSystemAdminWorkflowsWorkflowId";
import { putnotificationWorkflowSystemAdminWorkflowsWorkflowId } from "../../../../providers/putnotificationWorkflowSystemAdminWorkflowsWorkflowId";
import { deletenotificationWorkflowSystemAdminWorkflowsWorkflowId } from "../../../../providers/deletenotificationWorkflowSystemAdminWorkflowsWorkflowId";

import { INotificationWorkflowWorkflow } from "../../../../api/structures/INotificationWorkflowWorkflow";
import { IPageINotificationWorkflowWorkflow } from "../../../../api/structures/IPageINotificationWorkflowWorkflow";

@Controller("/notificationWorkflow/systemAdmin/workflows")
export class NotificationworkflowSystemadminWorkflowsController {
  /**
   * Create a new notification workflow with validation ensuring that the entry
   * node exists, all edges reference valid nodes, the workflow graph is
   * acyclic, all templates are valid LiquidJS template strings, and delay nodes
   * specify valid delays in milliseconds or durations.
   *
   * The new workflow is initialized with version 1 and timestamps for creation
   * and last update. This operation is restricted to authorized workflowManager
   * and systemAdmin roles who manage the notification workflows.
   *
   * The underlying database corresponds to the notification_workflow_workflows
   * Prisma table and related workflow nodes and edges.
   *
   * @param connection
   * @param body Creation data for a new notification workflow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowWorkflow.ICreate,
  ): Promise<INotificationWorkflowWorkflow> {
    try {
      return await postnotificationWorkflowSystemAdminWorkflows({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of notification workflows.
   *
   * This operation retrieves a filtered and paginated list of notification
   * workflows, including all relevant metadata such as workflow code, name,
   * activation status, version, and timestamps.
   *
   * Workflow managers and system administrators can use this endpoint to
   * perform advanced searches based on workflow properties, facilitating
   * efficient management of multiple workflows.
   *
   * The search supports pagination and sorting to enhance performance and
   * usability in UIs for workflow management. Security considerations include
   * role-based access control limiting this operation to authorized user roles
   * only.
   *
   * The underlying data model is the notification_workflow_workflows table in
   * the Prisma schema, representing workflows as DAGs with related details
   * encapsulated by entry nodes and versioning information.
   *
   * This API complements CRUD operations by enabling advanced list querying for
   * workflows suitable for administrative and operational purposes.
   *
   * @param connection
   * @param body Search filters and pagination parameters for workflow listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowWorkflow.IRequest,
  ): Promise<IPageINotificationWorkflowWorkflow> {
    try {
      return await patchnotificationWorkflowSystemAdminWorkflows({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a notification workflow by its ID.
   *
   * Retrieve detailed information for a specified notification workflow,
   * including the workflow's properties like code, name, isActive status, and
   * entry node ID. Also includes the workflow's related nodes and edges
   * collections showing the structure of the workflow DAG.
   *
   * Access is restricted to workflowManager and systemAdmin roles to ensure
   * only authorized users can view workflow details. The result integrates with
   * the Prisma schema's notification_workflow_workflows table and its
   * subordinate workflow_nodes and workflow_edges tables.
   *
   * Errors include 404 if the workflowId does not exist. This endpoint is
   * essential for UI workflows that allow detailed visualization and editing of
   * notification workflows.
   *
   * @param connection
   * @param workflowId Unique identifier of the target notification workflow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":workflowId")
  public async at(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkflow> {
    try {
      return await getnotificationWorkflowSystemAdminWorkflowsWorkflowId({
        systemAdmin,
        workflowId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing notification workflow by ID.
   *
   * Update the properties and structure of an existing notification workflow by
   * its ID. Validates the workflow graph structure, ensuring compliance with
   * all domain rules and template syntax.
   *
   * The workflow version number is incremented to track changes, and the
   * updatedAt timestamp reflects the time of modification.
   *
   * Prevents unauthorized access by restricting roles to workflowManager and
   * systemAdmin.
   *
   * Use this API to change workflow definitions safely while maintaining data
   * integrity.
   *
   * The underlying Prisma table is notification_workflow_workflows with
   * relations to workflow nodes and edges.
   *
   * @param connection
   * @param workflowId Unique identifier of the notification workflow to update
   * @param body Update data for the notification workflow
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":workflowId")
  public async update(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflow.IUpdate,
  ): Promise<INotificationWorkflowWorkflow> {
    try {
      return await putnotificationWorkflowSystemAdminWorkflowsWorkflowId({
        systemAdmin,
        workflowId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification workflow by its unique ID.
   *
   * Deletes the specified notification workflow permanently from the system,
   * including all associated nodes and edges due to cascading. Only authorized
   * users with roles workflowManager or systemAdmin can execute this
   * operation.
   *
   * If the workflow is referenced by active triggers, deletion is prevented to
   * maintain data integrity.
   *
   * The operation requires the workflow UUID parameter in the path to identify
   * the workflow to remove.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":workflowId")
  public async erase(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowSystemAdminWorkflowsWorkflowId({
        systemAdmin,
        workflowId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
