import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchnotificationWorkflowSystemAdminAuditLogs } from "../../../../providers/patchnotificationWorkflowSystemAdminAuditLogs";
import { SystemAdminAuth } from "../../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../../decorators/payload/SystemAdminPayload";

import { IPageINotificationWorkflowAuditLog } from "../../../../api/structures/IPageINotificationWorkflowAuditLog";
import { INotificationWorkflowAuditLog } from "../../../../api/structures/INotificationWorkflowAuditLog";

@Controller("/notificationWorkflow/systemAdmin/auditLogs")
export class NotificationworkflowSystemadminAuditlogsController {
  /**
   * Search and retrieve notification workflow audit logs.
   *
   * Retrieve a filtered, paginated list of notification workflow audit logs.
   *
   * Authorized users (systemAdmin, workflowManager, triggerOperator) can query
   * audit logs capturing immutable recorded events relating to workflows,
   * triggers, and user actions within the Notification Workflow system.
   *
   * The API supports advanced searching and pagination parameters for effective
   * log review and analysis. Returned results include event types, timestamps,
   * actors, and detailed event data.
   *
   * This operation targets the notification_workflow_audit_logs table and is
   * intended to support compliance and troubleshooting.
   *
   * No pre-requisite operations must be called before querying audit logs.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for audit log
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowAuditLog.IRequest,
  ): Promise<IPageINotificationWorkflowAuditLog.ISummary> {
    try {
      return await patchnotificationWorkflowSystemAdminAuditLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
