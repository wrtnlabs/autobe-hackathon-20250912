import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchnotificationWorkflowWorkerServices } from "../../../providers/patchnotificationWorkflowWorkerServices";

import { IPageINotificationWorkflowWorkerservice } from "../../../api/structures/IPageINotificationWorkflowWorkerservice";
import { INotificationWorkflowWorkerService } from "../../../api/structures/INotificationWorkflowWorkerService";

@Controller("/notificationWorkflow/workerServices")
export class NotificationworkflowWorkerservicesController {
  /**
   * Search and retrieve a filtered, paginated list of WorkerService accounts.
   *
   * Retrieve a filtered and paginated list of WorkerService accounts in the
   * system. This operation supports advanced searching by email, sorting by
   * creation date or email, and pagination controls to navigate large sets of
   * worker service records.
   *
   * Security considerations include ensuring only authorized users or services
   * access this resource; however, this specific operation is designed as
   * public with no authorization roles required.
   *
   * The operation directly queries the notification_workflow_workerservices
   * table reflecting all fields relevant to the worker service users as defined
   * by the Prisma schema. Returned data provides a summary view optimized for
   * list display without sensitive hashed password data.
   *
   * This operation does not modify data and therefore follows safe GET
   * semantics with a PATCH method due to complex request body for searching and
   * filtering.
   *
   * Error handling includes returning appropriate HTTP error codes for
   * malformed requests or server issues.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for WorkerService
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: INotificationWorkflowWorkerService.IRequest,
  ): Promise<IPageINotificationWorkflowWorkerservice.ISummary> {
    try {
      return await patchnotificationWorkflowWorkerServices({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
