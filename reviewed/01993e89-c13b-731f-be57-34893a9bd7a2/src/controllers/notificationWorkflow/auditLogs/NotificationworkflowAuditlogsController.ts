import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getnotificationWorkflowAuditLogsId } from "../../../providers/getnotificationWorkflowAuditLogsId";

import { INotificationWorkflowAuditLogs } from "../../../api/structures/INotificationWorkflowAuditLogs";

@Controller("/notificationWorkflow/auditLogs/:id")
export class NotificationworkflowAuditlogsController {
  /**
   * Retrieve a specific audit log entry by ID.
   *
   * Retrieves a specific audit log record identified by its unique ID from the
   * audit logs table. This audit log captures immutable events related to
   * workflows, triggers, user role assignments, and other system activities in
   * the Notification Workflow backend.
   *
   * The operation requires only the audit log ID as input and returns the
   * complete audit log entry containing event type, event data JSON, timestamp,
   * and the ID of the actor (user or system) responsible for the event whenever
   * applicable.
   *
   * Security considerations include ensuring that the calling user is
   * authorized to view audit logs and that sensitive event data is properly
   * protected. This operation is typically used for troubleshooting,
   * compliance, or forensic audits.
   *
   * If the specified audit log ID does not exist, the system will return an
   * appropriate error response indicating the resource was not found.
   *
   * This API operation corresponds to the notification_workflow_audit_logs
   * table in the Prisma schema, enabling efficient querying of individual audit
   * log entries by primary key.
   *
   * @param connection
   * @param id Unique identifier of the audit log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowAuditLogs> {
    try {
      return await getnotificationWorkflowAuditLogsId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
