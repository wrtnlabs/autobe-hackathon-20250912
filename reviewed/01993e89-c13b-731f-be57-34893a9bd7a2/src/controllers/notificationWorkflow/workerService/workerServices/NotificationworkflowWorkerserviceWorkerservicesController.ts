import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getnotificationWorkflowWorkerServiceWorkerServicesId } from "../../../../providers/getnotificationWorkflowWorkerServiceWorkerServicesId";
import { WorkerServiceAuth } from "../../../../decorators/WorkerServiceAuth";
import { WorkerServicePayload } from "../../../../decorators/payload/WorkerServicePayload";
import { putnotificationWorkflowWorkerServiceWorkerServicesId } from "../../../../providers/putnotificationWorkflowWorkerServiceWorkerServicesId";

import { INotificationWorkflowWorkerService } from "../../../../api/structures/INotificationWorkflowWorkerService";

@Controller("/notificationWorkflow/workerService/workerServices/:id")
export class NotificationworkflowWorkerserviceWorkerservicesController {
  /**
   * Retrieve detailed information of a specific WorkerService user by their
   * unique identifier. This operation allows fetching non-sensitive profile
   * data such as user ID, email, created and updated timestamps.
   *
   * Security considerations require that access is restricted to the
   * WorkerService themselves or system administrators to prevent unauthorized
   * exposure of service account details.
   *
   * This operation queries the notification_workflow_workerservices table based
   * on the provided UUID path parameter and returns the full entity fields
   * excluding password hashes.
   *
   * Error handling manages cases such as resource not found or invalid UUID
   * format.
   *
   * @param connection
   * @param id Unique identifier of the target WorkerService user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @WorkerServiceAuth()
    workerService: WorkerServicePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkerService> {
    try {
      return await getnotificationWorkflowWorkerServiceWorkerServicesId({
        workerService,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing WorkerService user account.
   *
   * Update fields of an existing WorkerService user account specified by unique
   * ID. The request body must include fields allowed for update such as email
   * and password hash.
   *
   * Only authorized WorkerService users themselves or system administrators may
   * perform this update.
   *
   * The operation returns the updated WorkerService user entity excluding
   * sensitive fields not intended for update.
   *
   * Validation of data is performed to ensure correctness and security.
   * Attempts to update non-existent users or insufficient authorization result
   * in errors.
   *
   * This operation modifies data and requires PUT method semantics.
   *
   * @param connection
   * @param id Unique identifier of the target WorkerService user
   * @param body Update data for the WorkerService user account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @WorkerServiceAuth()
    workerService: WorkerServicePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkerService.IUpdate,
  ): Promise<INotificationWorkflowWorkerService> {
    try {
      return await putnotificationWorkflowWorkerServiceWorkerServicesId({
        workerService,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
