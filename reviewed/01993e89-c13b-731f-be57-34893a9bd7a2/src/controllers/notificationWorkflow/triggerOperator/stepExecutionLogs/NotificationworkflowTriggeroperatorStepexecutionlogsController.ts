import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchnotificationWorkflowTriggerOperatorStepExecutionLogs } from "../../../../providers/patchnotificationWorkflowTriggerOperatorStepExecutionLogs";
import { TriggerOperatorAuth } from "../../../../decorators/TriggerOperatorAuth";
import { TriggerOperatorPayload } from "../../../../decorators/payload/TriggerOperatorPayload";
import { getnotificationWorkflowTriggerOperatorStepExecutionLogsId } from "../../../../providers/getnotificationWorkflowTriggerOperatorStepExecutionLogsId";

import { IPageINotificationWorkflowStepExecutionLog } from "../../../../api/structures/IPageINotificationWorkflowStepExecutionLog";
import { INotificationWorkflowStepExecutionLog } from "../../../../api/structures/INotificationWorkflowStepExecutionLog";

@Controller("/notificationWorkflow/triggerOperator/stepExecutionLogs")
export class NotificationworkflowTriggeroperatorStepexecutionlogsController {
  /**
   * Search and retrieve a paginated list of step execution logs.
   *
   * Retrieve a paginated and filtered list of workflow step execution logs from
   * the Notification Workflow system. This operation provides comprehensive
   * search and pagination capabilities allowing users to query logs by various
   * criteria including workflow, trigger instance, and node IDs, as well as
   * success status and execution window timeframes.
   *
   * The step execution logs represent immutable records of each node execution
   * attempt and are critical for auditing, debugging, and performance
   * monitoring. Access to this operation is typically granted to
   * workflowManagers, triggerOperators, and systemAdmins who require detailed
   * visibility into workflow executions.
   *
   * Security measures include role-based access control ensuring only
   * authorized roles can access sensitive execution data. The returned
   * paginated response includes summary details optimized for performance and
   * user interface rendering.
   *
   * This operation directly corresponds to the
   * notification_workflow_step_execution_logs table as specified in the Prisma
   * schema. It supports efficient search by indexed fields and includes
   * pagination metadata for client-side consumption.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for step execution
   *   log filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TriggerOperatorAuth()
    triggerOperator: TriggerOperatorPayload,
    @TypedBody()
    body: INotificationWorkflowStepExecutionLog.IRequest,
  ): Promise<IPageINotificationWorkflowStepExecutionLog.ISummary> {
    try {
      return await patchnotificationWorkflowTriggerOperatorStepExecutionLogs({
        triggerOperator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve step execution log details by ID.
   *
   * Retrieve detailed information about a specific step execution log by its
   * unique identifier. The log includes crucial execution details such as start
   * and finish timestamps, input and output execution contexts, success status,
   * and any associated message IDs or error messages.
   *
   * This single-record retrieval enables detailed auditing and debugging for
   * individual workflow steps within the Notification Workflow system.
   *
   * Role-based access control ensures that only authorized roles like
   * workflowManagers, triggerOperators, and systemAdmins can view sensitive log
   * data.
   *
   * The operation corresponds with the
   * notification_workflow_step_execution_logs table defined in the Prisma
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the step execution log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TriggerOperatorAuth()
    triggerOperator: TriggerOperatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowStepExecutionLog> {
    try {
      return await getnotificationWorkflowTriggerOperatorStepExecutionLogsId({
        triggerOperator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
