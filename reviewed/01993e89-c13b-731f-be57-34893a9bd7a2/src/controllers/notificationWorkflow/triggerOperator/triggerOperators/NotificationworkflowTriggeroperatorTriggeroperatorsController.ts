import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getnotificationWorkflowTriggerOperatorTriggerOperatorsId } from "../../../../providers/getnotificationWorkflowTriggerOperatorTriggerOperatorsId";
import { TriggerOperatorAuth } from "../../../../decorators/TriggerOperatorAuth";
import { TriggerOperatorPayload } from "../../../../decorators/payload/TriggerOperatorPayload";
import { putnotificationWorkflowTriggerOperatorTriggerOperatorsId } from "../../../../providers/putnotificationWorkflowTriggerOperatorTriggerOperatorsId";
import { deletenotificationWorkflowTriggerOperatorTriggerOperatorsId } from "../../../../providers/deletenotificationWorkflowTriggerOperatorTriggerOperatorsId";

import { INotificationWorkflowTriggerOperator } from "../../../../api/structures/INotificationWorkflowTriggerOperator";

@Controller("/notificationWorkflow/triggerOperator/triggerOperators/:id")
export class NotificationworkflowTriggeroperatorTriggeroperatorsController {
  /**
   * Retrieve a TriggerOperator user by unique ID.
   *
   * This GET operation retrieves a single TriggerOperator user specified by
   * their unique UUID 'id'. It returns detailed user information excluding
   * sensitive password hash data to maintain security. The system ensures that
   * only active users (not soft deleted) can be retrieved, and that the 'id'
   * follows UUID format validation.
   *
   * This endpoint is intended for authenticated TriggerOperator roles or higher
   * as per authorizationRoles. Errors include user not found or invalid UUID
   * format.
   *
   * All returned data respects the data shape described in the Prisma schema
   * for notification_workflow_triggeroperators, excluding password hash for
   * security.
   *
   * The detailed user view supports user management and auditing needs.
   *
   * @param connection
   * @param id Unique identifier of the TriggerOperator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TriggerOperatorAuth()
    triggerOperator: TriggerOperatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowTriggerOperator> {
    try {
      return await getnotificationWorkflowTriggerOperatorTriggerOperatorsId({
        triggerOperator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a TriggerOperator user by ID.
   *
   * This PUT operation updates details of an existing TriggerOperator user
   * specified by the UUID 'id'. The request body includes fields to update such
   * as email and password hash if password change is intended. Email must
   * remain unique within the system.
   *
   * If the user is soft deleted or does not exist, an error is returned.
   * Password hashes are handled securely and never exposed in responses.
   *
   * Upon successful update, the updated TriggerOperator user details excluding
   * password hash are returned for confirmation.
   *
   * This operation enforces strict validation, authorization, and data
   * integrity consistent with the Prisma schema entity.
   *
   * Roles authorized include 'triggerOperator' to allow trigger management
   * personnel to update user info.
   *
   * @param connection
   * @param id Unique identifier of the TriggerOperator user
   * @param body Request payload to update a TriggerOperator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @TriggerOperatorAuth()
    triggerOperator: TriggerOperatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowTriggerOperator.IUpdate,
  ): Promise<INotificationWorkflowTriggerOperator> {
    try {
      return await putnotificationWorkflowTriggerOperatorTriggerOperatorsId({
        triggerOperator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a TriggerOperator user by ID.
   *
   * This DELETE operation soft deletes a TriggerOperator user by setting their
   * 'deleted_at' timestamp. The user record remains in the database but is
   * excluded from active queries and logins.
   *
   * Only authorized TriggerOperator roles may perform soft deletion. The
   * operation requires a valid UUID 'id' path parameter identifying the target
   * user.
   *
   * No response payload is returned upon successful soft deletion. Error
   * responses include invalid UUID format or unauthorized access.
   *
   * This operation safeguards audit integrity while supporting user lifecycle
   * management consistent with the Prisma schema for TriggerOperator users.
   *
   * @param connection
   * @param id Unique identifier of the TriggerOperator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @TriggerOperatorAuth()
    triggerOperator: TriggerOperatorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowTriggerOperatorTriggerOperatorsId({
        triggerOperator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
