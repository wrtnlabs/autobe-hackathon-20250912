import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchnotificationWorkflowWorkflowManagerWorkflowManagers } from "../../../../providers/patchnotificationWorkflowWorkflowManagerWorkflowManagers";
import { WorkflowmanagerAuth } from "../../../../decorators/WorkflowmanagerAuth";
import { WorkflowmanagerPayload } from "../../../../decorators/payload/WorkflowmanagerPayload";
import { getnotificationWorkflowWorkflowManagerWorkflowManagersId } from "../../../../providers/getnotificationWorkflowWorkflowManagerWorkflowManagersId";
import { putnotificationWorkflowWorkflowManagerWorkflowManagersId } from "../../../../providers/putnotificationWorkflowWorkflowManagerWorkflowManagersId";
import { deletenotificationWorkflowWorkflowManagerWorkflowManagersId } from "../../../../providers/deletenotificationWorkflowWorkflowManagerWorkflowManagersId";

import { IPageINotificationWorkflowWorkflowManager } from "../../../../api/structures/IPageINotificationWorkflowWorkflowManager";
import { INotificationWorkflowWorkflowManager } from "../../../../api/structures/INotificationWorkflowWorkflowManager";

@Controller("/notificationWorkflow/workflowManager/workflowManagers")
export class NotificationworkflowWorkflowmanagerWorkflowmanagersController {
  /**
   * List and search workflow managers.
   *
   * Retrieve a filtered, paginated list of existing workflow manager users in
   * the Notification Workflow backend system. It serves users who administrate
   * notification workflows by allowing them to view and manage workflow
   * managers.
   *
   * The operation fetches basic details such as email identifiers and status of
   * workflow managers. It supports pagination and sorting to manage large user
   * bases efficiently.
   *
   * This operation requires authorization from systemAdmin and workflowManager
   * roles who have management privileges. It returns summaries appropriate for
   * list views and excludes sensitive information such as password hashes.
   *
   * The underlying table notification_workflow_workflowmanagers captures
   * individual workflow manager users with foundational identity details and
   * audit timestamps.
   *
   * @param connection
   * @param body Search and pagination filter criteria for workflow managers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedBody()
    body: INotificationWorkflowWorkflowManager.IRequest,
  ): Promise<IPageINotificationWorkflowWorkflowManager.ISummary> {
    try {
      return await patchnotificationWorkflowWorkflowManagerWorkflowManagers({
        workflowManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info on a workflow manager user.
   *
   * Retrieve comprehensive details of a specific workflow manager user by their
   * unique identifier. This operation supports administrators and workflow
   * managers in managing user accounts by providing full visibility into their
   * information except passwords.
   *
   * The response reflects the current state in the database, including creation
   * and update timestamps.
   *
   * Access to this operation is restricted to authorized users with the
   * systemAdmin or workflowManager roles to ensure privacy and compliance.
   *
   * The underlying database model notification_workflow_workflowmanagers stores
   * all identity and management details for workflow managers including soft
   * delete markers.
   *
   * @param connection
   * @param id Unique UUID of the target workflow manager user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkflowManager> {
    try {
      return await getnotificationWorkflowWorkflowManagerWorkflowManagersId({
        workflowManager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update workflow manager user information.
   *
   * Update details of an existing workflow manager user using their UUID. This
   * supports administrative workflows for managing user information in the
   * Notification Workflow backend system.
   *
   * Only authorized roles such as systemAdmin and workflowManager can perform
   * this update. Proper validation is required to ensure changes comply with
   * system rules and uniqueness constraints.
   *
   * The operation does not allow password hash changes via this endpoint to
   * maintain security best practices.
   *
   * Updates to the workflow manager are versioned with timestamps for audit and
   * traceability.
   *
   * Underlying Prisma table notification_workflow_workflowmanagers tracks all
   * workflow manager users with authentication data and soft deletion support.
   *
   * @param connection
   * @param id Unique UUID of the workflow manager user to update
   * @param body Updated workflow manager user information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowManager.IUpdate,
  ): Promise<INotificationWorkflowWorkflowManager> {
    try {
      return await putnotificationWorkflowWorkflowManagerWorkflowManagersId({
        workflowManager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a workflow manager user.
   *
   * Permanently delete a workflow manager user by unique identifier. This
   * operation removes all traces of the user from the system database.
   *
   * Only systemAdmin and workflowManager roles with sufficient privileges may
   * execute this operation.
   *
   * Deletion includes cleaning all references and related data where required
   * to maintain data integrity.
   *
   * The operation performs a hard delete rather than soft deletion as per
   * schema design for this operation.
   *
   * Clients should be aware that deletion is irreversible.
   *
   * @param connection
   * @param id Unique UUID of the workflow manager user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowWorkflowManagerWorkflowManagersId({
        workflowManager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
