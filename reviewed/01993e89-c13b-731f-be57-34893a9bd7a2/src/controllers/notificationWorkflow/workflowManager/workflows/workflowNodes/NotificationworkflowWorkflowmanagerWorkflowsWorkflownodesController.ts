import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes } from "../../../../../providers/postnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes";
import { WorkflowmanagerAuth } from "../../../../../decorators/WorkflowmanagerAuth";
import { WorkflowmanagerPayload } from "../../../../../decorators/payload/WorkflowmanagerPayload";
import { patchnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes } from "../../../../../providers/patchnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes";
import { getnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId } from "../../../../../providers/getnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId";
import { putnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId } from "../../../../../providers/putnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId";
import { deletenotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId } from "../../../../../providers/deletenotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId";

import { INotificationWorkflowWorkflowNode } from "../../../../../api/structures/INotificationWorkflowWorkflowNode";
import { IPageINotificationWorkflowWorkflowNode } from "../../../../../api/structures/IPageINotificationWorkflowWorkflowNode";

@Controller(
  "/notificationWorkflow/workflowManager/workflows/:workflowId/workflowNodes",
)
export class NotificationworkflowWorkflowmanagerWorkflowsWorkflownodesController {
  /**
   * Create a new workflow node.
   *
   * Create a new node in the notification workflow with provided node type and
   * templates or delay parameters.
   *
   * Authorization limited to workflowManager and systemAdmin roles.
   *
   * Validates templates and delay values as per business rules.
   *
   * Returns detailed information about the created node.
   *
   * @param connection
   * @param workflowId Unique identifier of the parent workflow
   * @param body Information for creating a workflow node
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowNode.ICreate,
  ): Promise<INotificationWorkflowWorkflowNode> {
    try {
      return await postnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes(
        {
          workflowManager,
          workflowId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve workflow nodes for a given workflow.
   *
   * Fetch a filtered, paginated list of workflow nodes for a given workflow ID
   * for display or management.
   *
   * Security requires workflowManager or systemAdmin role.
   *
   * @param connection
   * @param workflowId Unique identifier of the parent workflow
   * @param body Search and pagination parameters for workflow nodes filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowNode.IRequest,
  ): Promise<IPageINotificationWorkflowWorkflowNode.ISummary> {
    try {
      return await patchnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodes(
        {
          workflowManager,
          workflowId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a workflow node.
   *
   * Retrieve detailed properties of a specific workflow node within a workflow,
   * including node type, templates, delay configuration, and timestamps.
   *
   * Authorized roles: workflowManager, systemAdmin.
   *
   * Returns a detailed workflow node object.
   *
   * @param connection
   * @param workflowId Unique identifier of the parent workflow
   * @param workflowNodeId Unique identifier of the target workflow node
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":workflowNodeId")
  public async at(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowNodeId")
    workflowNodeId: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowWorkflowNode> {
    try {
      return await getnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId(
        {
          workflowManager,
          workflowId,
          workflowNodeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific Workflow Node within a Workflow.
   *
   * This API operation enables authorized users (workflowManager, systemAdmin)
   * to update details of a specific Workflow Node within a given Workflow. The
   * operation ensures that the targeted workflowNodeId belongs to the workflow
   * identified by workflowId.
   *
   * Users can update various node properties including nodeType, display name,
   * LiquidJS templates for email (to, subject, body) and SMS (to, body), delay
   * in milliseconds, and ISO8601 delay duration. The operation is critical for
   * maintaining valid and effective notification workflows.
   *
   * Security considerations include authentication and authorization checks
   * ensuring only permitted roles can perform updates. Validation rules require
   * that email and SMS templates parse correctly as LiquidJS strings and delay
   * values are reasonable. Integrity constraints require that the node remains
   * correctly linked to its workflow and that no cycles or other DAG violations
   * are introduced by edge changes outside this scope.
   *
   * This operation relates closely to workflow CRUD operations and workflow
   * edge management APIs that may be used in combination to fully modify the
   * workflow structure.
   *
   * On success, the updated Workflow Node entity is returned reflecting
   * modifications.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param workflowNodeId Unique identifier of the workflow node to update
   * @param body Updated details for the Workflow Node
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":workflowNodeId")
  public async updateWorkflowNode(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowNodeId")
    workflowNodeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: INotificationWorkflowWorkflowNode.IUpdate,
  ): Promise<INotificationWorkflowWorkflowNode> {
    try {
      return await putnotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId(
        {
          workflowManager,
          workflowId,
          workflowNodeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific Workflow Node from a Workflow.
   *
   * Delete a Workflow Node by its ID within a specified Workflow. This
   * operation requires validation that the node belongs to the workflow and
   * that deletion does not violate integrity constraints like existing
   * triggers.
   *
   * Only authorized users with roles workflowManager or systemAdmin can perform
   * deletion. Deletion permanently removes the node from the database and
   * affects the workflow's structure.
   *
   * This operation complements node creation and update endpoints, together
   * enabling full lifecycle management of workflow nodes.
   *
   * @param connection
   * @param workflowId Unique identifier of the target workflow
   * @param workflowNodeId Unique identifier of the workflow node to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":workflowNodeId")
  public async eraseWorkflowNode(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("workflowId")
    workflowId: string & tags.Format<"uuid">,
    @TypedParam("workflowNodeId")
    workflowNodeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletenotificationWorkflowWorkflowManagerWorkflowsWorkflowIdWorkflowNodesWorkflowNodeId(
        {
          workflowManager,
          workflowId,
          workflowNodeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
