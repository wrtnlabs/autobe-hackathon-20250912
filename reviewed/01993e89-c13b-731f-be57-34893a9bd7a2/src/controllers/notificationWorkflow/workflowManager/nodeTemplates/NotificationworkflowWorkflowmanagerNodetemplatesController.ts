import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchnotificationWorkflowWorkflowManagerNodeTemplates } from "../../../../providers/patchnotificationWorkflowWorkflowManagerNodeTemplates";
import { WorkflowmanagerAuth } from "../../../../decorators/WorkflowmanagerAuth";
import { WorkflowmanagerPayload } from "../../../../decorators/payload/WorkflowmanagerPayload";
import { getnotificationWorkflowWorkflowManagerNodeTemplatesNodeTemplateId } from "../../../../providers/getnotificationWorkflowWorkflowManagerNodeTemplatesNodeTemplateId";

import { IPageINotificationWorkflowNodeTemplate } from "../../../../api/structures/IPageINotificationWorkflowNodeTemplate";
import { INotificationWorkflowNodeTemplate } from "../../../../api/structures/INotificationWorkflowNodeTemplate";

@Controller("/notificationWorkflow/workflowManager/nodeTemplates")
export class NotificationworkflowWorkflowmanagerNodetemplatesController {
  /**
   * Search and list notification node templates with filtering and pagination.
   *
   * Retrieve a paginated and searchable list of notification node templates.
   * These templates represent reusable content components such as email, SMS,
   * and delay templates used in constructing notification workflows.
   *
   * The operation supports filtering by template type and code, facilitating
   * efficient management and selection of appropriate templates for workflow
   * nodes.
   *
   * Role-based access control restricts access to authorized users including
   * workflowManagers and systemAdmins.
   *
   * This operation operates on the notification_workflow_node_templates table
   * as defined in the Prisma schema. The response includes summary information
   * suitable for listing templates in UI components.
   *
   * @param connection
   * @param body Filtering and pagination criteria for node template listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedBody()
    body: INotificationWorkflowNodeTemplate.IRequest,
  ): Promise<IPageINotificationWorkflowNodeTemplate.ISummary> {
    try {
      return await patchnotificationWorkflowWorkflowManagerNodeTemplates({
        workflowManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve notification node template details by ID.
   *
   * Retrieve full details of a specific notification node template identified
   * by nodeTemplateId.
   *
   * This operation returns all relevant fields including code, type, name, and
   * LiquidJS template body, enabling detailed inspection and editing.
   *
   * Role-based access ensures only authorized workflowManagers and systemAdmins
   * can access detailed template information.
   *
   * The underlying database table for this operation is
   * notification_workflow_node_templates as per Prisma schema.
   *
   * @param connection
   * @param nodeTemplateId Unique identifier of the node template
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":nodeTemplateId")
  public async at(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedParam("nodeTemplateId")
    nodeTemplateId: string & tags.Format<"uuid">,
  ): Promise<INotificationWorkflowNodeTemplate> {
    try {
      return await getnotificationWorkflowWorkflowManagerNodeTemplatesNodeTemplateId(
        {
          workflowManager,
          nodeTemplateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
