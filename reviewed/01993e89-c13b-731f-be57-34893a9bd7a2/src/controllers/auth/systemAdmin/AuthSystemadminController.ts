import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminLogin } from "../../../providers/postauthSystemAdminLogin";
import { SystemAdminAuth } from "../../../decorators/SystemAdminAuth";
import { SystemAdminPayload } from "../../../decorators/payload/SystemAdminPayload";
import { postauthSystemAdminJoin } from "../../../providers/postauthSystemAdminJoin";
import { postauthSystemAdminRefresh } from "../../../providers/postauthSystemAdminRefresh";

import { INotificationWorkflowSystemAdmin } from "../../../api/structures/INotificationWorkflowSystemAdmin";

@Controller("/auth/systemAdmin")
export class AuthSystemadminController {
  /**
   * Authenticate system administrator and issue JWT tokens using
   * notification_workflow_systemadmins table.
   *
   * Login endpoint for system administrators enabling secure authentication and
   * JWT issuance. This operation validates credentials against the
   * notification_workflow_systemadmins table, which stores system admin user
   * info, including unique email and hashed password. On success, it issues
   * tokens per the INotificationWorkflowSystemAdmin.IAuthorized pattern used
   * for secure session management. Provides foundation for admin role-based
   * access control to system management features. Ensure password hash
   * validation and secure token handling.
   *
   * @param connection
   * @param body Login credentials for system administrator including email and
   *   password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowSystemAdmin.IRequestLogin,
  ): Promise<INotificationWorkflowSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminLogin({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Register new system administrator and issue JWT tokens.
   *
   * Join endpoint for system administrators allowing new system admin account
   * creation and issuing JWT tokens for authenticated sessions. This operation
   * stores hashed credentials and unique email in
   * notification_workflow_systemadmins table, supporting system admin
   * onboarding processes. Supports best practices for password hashing and
   * secure token issuance.
   *
   * @param connection
   * @param body Registration information for new system administrator
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowSystemAdmin.IRequestJoin,
  ): Promise<INotificationWorkflowSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminJoin({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for system administrator sessions.
   *
   * Refresh authentication tokens for system administrators using valid refresh
   * tokens to issue new JWT tokens. Ensures ongoing secure sessions for the
   * admin user by validating current tokens and session state stored in
   * notification_workflow_systemadmins table. Supports role-based access
   * control continuation while maintaining token expiration security.
   *
   * @param connection
   * @param body Refresh token request for system administrator session renewal
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @SystemAdminAuth()
    systemAdmin: SystemAdminPayload,
    @TypedBody()
    body: INotificationWorkflowSystemAdmin.IRequestRefresh,
  ): Promise<INotificationWorkflowSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminRefresh({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
