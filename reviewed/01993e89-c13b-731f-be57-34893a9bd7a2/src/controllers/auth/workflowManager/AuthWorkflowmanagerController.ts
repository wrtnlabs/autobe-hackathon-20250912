import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthWorkflowManagerJoin } from "../../../providers/postauthWorkflowManagerJoin";
import { postauthWorkflowManagerLogin } from "../../../providers/postauthWorkflowManagerLogin";
import { postauthWorkflowManagerRefresh } from "../../../providers/postauthWorkflowManagerRefresh";
import { WorkflowmanagerAuth } from "../../../decorators/WorkflowmanagerAuth";
import { WorkflowmanagerPayload } from "../../../decorators/payload/WorkflowmanagerPayload";

import { INotificationWorkflowWorkflowManager } from "../../../api/structures/INotificationWorkflowWorkflowManager";

@Controller("/auth/workflowManager")
export class AuthWorkflowmanagerController {
  /**
   * Create a new workflowManager user account in
   * notification_workflow_workflowmanagers and issue authorization tokens.
   *
   * This API operation allows a new workflowManager user to register by
   * providing their email and password. It creates a new user record in
   * notification_workflow_workflowmanagers with the required email and
   * password_hash fields, records creation and update timestamps automatically,
   * and respects the uniqueness constraint on email addresses. Upon successful
   * creation, the system issues JWT tokens conforming to
   * INotificationWorkflowWorkflowManager.IAuthorized granting access to
   * workflow management capabilities. This operation is publicly accessible to
   * enable new user onboarding.
   *
   * @param connection
   * @param body WorkflowManager user registration data
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: INotificationWorkflowWorkflowManager.ICreate,
  ): Promise<INotificationWorkflowWorkflowManager.IAuthorized> {
    try {
      return await postauthWorkflowManagerJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate workflowManager user and issue JWT tokens.
   *
   * Authenticate a workflowManager user by verifying provided credentials
   * against the notification_workflow_workflowmanagers table. This operation
   * validates the user's email and password, issuing JWT tokens upon successful
   * login. It maintains session security by restricting access tokens to a
   * limited lifetime and issuing refresh tokens for session renewal. Intended
   * for public access as the primary authentication entry point for
   * workflowManager role users.
   *
   * @param connection
   * @param body WorkflowManager user login credentials
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: INotificationWorkflowWorkflowManager.ILogin,
  ): Promise<INotificationWorkflowWorkflowManager.IAuthorized> {
    try {
      return await postauthWorkflowManagerLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for workflowManager user session continuity.
   *
   * Refresh JWT tokens for an authenticated workflowManager user by verifying
   * the provided refresh token. On success, new access and refresh tokens are
   * issued to maintain secure and uninterrupted session access. This operation
   * requires a valid refresh token and is restricted to authenticated users
   * only. It is part of the standard authentication token lifecycle operations
   * supporting the workflowManager role.
   *
   * @param connection
   * @param body Refresh token request data
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @WorkflowmanagerAuth()
    workflowManager: WorkflowmanagerPayload,
    @TypedBody()
    body: INotificationWorkflowWorkflowManager.IRefresh,
  ): Promise<INotificationWorkflowWorkflowManager.IAuthorized> {
    try {
      return await postauthWorkflowManagerRefresh({
        workflowManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
