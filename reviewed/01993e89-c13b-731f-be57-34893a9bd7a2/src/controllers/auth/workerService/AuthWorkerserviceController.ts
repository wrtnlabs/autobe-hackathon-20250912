import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthWorkerServiceJoin } from "../../../providers/postauthWorkerServiceJoin";
import { WorkerServiceAuth } from "../../../decorators/WorkerServiceAuth";
import { WorkerServicePayload } from "../../../decorators/payload/WorkerServicePayload";
import { postauthWorkerServiceRefresh } from "../../../providers/postauthWorkerServiceRefresh";

import { INotificationWorkflowWorkerService } from "../../../api/structures/INotificationWorkflowWorkerService";

@Controller("/auth/workerService")
export class AuthWorkerserviceController {
  /**
   * Create worker service account and issue initial JWT tokens. Relates to
   * 'notification_workflow_workerservices' table.
   *
   * This API operation creates a new worker service account of role
   * 'workerService', issuing JWT tokens for authenticated sessions. It
   * registers the service with a unique email address and hashed password
   * stored securely as 'password_hash' in the Prisma schema
   * 'notification_workflow_workerservices' table. The operation ensures all
   * creation timestamps 'created_at' and 'updated_at' are handled appropriately
   * by the backend upon record creation. This supports automated backend
   * service identification and authentication. The response returns authorized
   * tokens for the newly registered service allowing secure access for
   * processing trigger instances.
   *
   * This operation is restricted to the 'workerService' authorization role and
   * is publicly accessible during account creation.
   *
   * Related operations include /auth/workerService/refresh to renew tokens and
   * manage sessions securely. No interactive login is supported for this
   * automated role.
   *
   * Security considerations include using strong password hashing and
   * protecting the JWT secret key securely.
   *
   * The operation adheres strictly to the Prisma schema fields, including
   * unique email enforcement and soft deletion with 'deleted_at'.
   *
   * @param connection
   * @param body Request body to create a new worker service account including
   *   unique email and secure password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @WorkerServiceAuth()
    workerService: WorkerServicePayload,
    @TypedBody()
    body: INotificationWorkflowWorkerService.ICreate,
  ): Promise<INotificationWorkflowWorkerService.IAuthorized> {
    try {
      return await postauthWorkerServiceJoin({
        workerService,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT access tokens for worker service role with a valid refresh
   * token. Based on 'notification_workflow_workerservices' table.
   *
   * This API operation renews JWT access tokens for an existing authenticated
   * worker service session. It validates the provided refresh token, generates
   * new access tokens, and updates session timestamps accordingly. This
   * maintains secure session continuity without re-authentication with
   * credentials.
   *
   * It adheres closely to the 'notification_workflow_workerservices' Prisma
   * schema ensuring the service identity remains consistent and secure.
   *
   * The operation requires the 'workerService' authorization role and builds a
   * secure token refresh workflow integral for automated backend services.
   *
   * Related operations include the join operation to create initial tokens and
   * the login operation, which does not exist for guest kind 'workerService'.
   *
   * Robust security mechanisms prevent refresh token abuse and replay attacks.
   *
   * The endpoint expects a JSON body containing the refresh token information
   * as per the defined schema for secure validation.
   *
   * @param connection
   * @param body Request body containing refresh token data.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @WorkerServiceAuth()
    workerService: WorkerServicePayload,
    @TypedBody()
    body: INotificationWorkflowWorkerService.IRefresh,
  ): Promise<INotificationWorkflowWorkerService.IAuthorized> {
    try {
      return await postauthWorkerServiceRefresh({
        workerService,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
