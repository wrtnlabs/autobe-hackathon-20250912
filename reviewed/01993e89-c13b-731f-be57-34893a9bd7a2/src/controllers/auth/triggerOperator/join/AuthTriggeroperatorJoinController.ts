import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTriggerOperatorJoin } from "../../../../providers/postauthTriggerOperatorJoin";

import { INotificationWorkflowTriggerOperator } from "../../../../api/structures/INotificationWorkflowTriggerOperator";

@Controller("/auth/triggerOperator/join")
export class AuthTriggeroperatorJoinController {
  /**
   * Register a new trigger operator user account and issue authorization tokens
   * (notification_workflow_triggeroperators).
   *
   * Registers a new trigger operator user in the system enabling them to
   * authenticate and access trigger management features. The API accepts user
   * credentials including the unique email and a password that is securely
   * hashed and stored in the notification_workflow_triggeroperators database
   * table. This operation ensures that the email is unique in the system and
   * complies with the schema constraints.
   *
   * The triggerOperator role is defined to create and manage trigger instances,
   * and thus requires authenticated access through JWT tokens issued upon
   * successful registration.
   *
   * This registration endpoint is public and does not require prior
   * authentication. The response returns a standard authorized token response
   * INotificationWorkflowTriggerOperator.IAuthorized upon successful user
   * creation.
   *
   * Related operation includes /auth/triggerOperator/login for authentication
   * and refresh for token renewal.
   *
   * The registration process securely stores the password hash, maintains
   * created_at and updated_at timestamps, and allows soft deletion indicated by
   * deleted_at.
   *
   * All user identity and credential data for triggerOperator role is persisted
   * in notification_workflow_triggeroperators Prisma table with fields email
   * and password_hash being critical for authentication.
   *
   * The unique index on email enforces no duplicate registrations with the same
   * email.
   *
   * @param connection
   * @param body Trigger operator registration credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinTriggerOperator(
    @TypedBody()
    body: INotificationWorkflowTriggerOperator.ICreate,
  ): Promise<INotificationWorkflowTriggerOperator.IAuthorized> {
    try {
      return await postauthTriggerOperatorJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
