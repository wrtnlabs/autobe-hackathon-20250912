import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTriggerOperatorLogin } from "../../../../providers/postauthTriggerOperatorLogin";

import { INotificationWorkflowTriggerOperator } from "../../../../api/structures/INotificationWorkflowTriggerOperator";

@Controller("/auth/triggerOperator/login")
export class AuthTriggeroperatorLoginController {
  /**
   * Authenticate trigger operator user and issue JWT tokens
   * (notification_workflow_triggeroperators).
   *
   * Authenticate a trigger operator user using email and password credentials.
   * Validates the hashed password stored in the
   * notification_workflow_triggeroperators table. Issues JWT access and refresh
   * tokens on success.
   *
   * Ensures secure authentication based on Prisma schema fields email and
   * password_hash for triggerOperator.
   *
   * Response includes tokens and user identity encapsulated in
   * INotificationWorkflowTriggerOperator.IAuthorized.
   *
   * This operation provides the primary authentication entry point for
   * triggerOperators and is public.
   *
   * Related operations include /auth/triggerOperator/join for registration and
   * /auth/triggerOperator/refresh for renewing access tokens.
   *
   * Implementation must respect security practices by validating hashed
   * passwords and protecting against unauthorized access.
   *
   * @param connection
   * @param body Trigger operator login credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginTriggerOperator(
    @TypedBody()
    body: INotificationWorkflowTriggerOperator.ILogin,
  ): Promise<INotificationWorkflowTriggerOperator.IAuthorized> {
    try {
      return await postauthTriggerOperatorLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
