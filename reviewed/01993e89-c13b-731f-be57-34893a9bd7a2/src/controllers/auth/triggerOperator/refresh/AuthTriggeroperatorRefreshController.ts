import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTriggerOperatorRefresh } from "../../../../providers/postauthTriggerOperatorRefresh";

import { INotificationWorkflowTriggerOperator } from "../../../../api/structures/INotificationWorkflowTriggerOperator";

@Controller("/auth/triggerOperator/refresh")
export class AuthTriggeroperatorRefreshController {
  /**
   * Refresh JWT tokens for trigger operator user
   * (notification_workflow_triggeroperators).
   *
   * Renew JWT access tokens for an authenticated trigger operator using a
   * refresh token. Validates token validity and issues new access and refresh
   * tokens in INotificationWorkflowTriggerOperator.IAuthorized response
   * format.
   *
   * Supports seamless authentication lifecycle and enhances security by
   * enforcing token expiry and rotation.
   *
   * Operates on Prisma schema table notification_workflow_triggeroperators with
   * fields critical to authentication state.
   *
   * Accessible publicly but requires a valid refresh token for token renewal.
   *
   * Complements join and login operations for triggerOperator authentication
   * workflow.
   *
   * Controller applies proper security guards to ensure refresh token
   * validation prior to execution.
   *
   * Following RESTful and security best practices with role-specific
   * authorization flows.
   *
   * @param connection
   * @param body Refresh token input for renewing JWT tokens.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshTriggerOperator(
    @TypedBody()
    body: INotificationWorkflowTriggerOperator.IRefresh,
  ): Promise<INotificationWorkflowTriggerOperator.IAuthorized> {
    try {
      return await postauthTriggerOperatorRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
