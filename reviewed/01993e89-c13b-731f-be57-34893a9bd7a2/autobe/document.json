{"operations":[{"specification":"The role \"workflowManager\" relates to the Prisma DB table notification_workflow_workflowmanagers. This API operation enables new workflowManager users to register an account, capturing their email and password hash for authentication. The user is then issued initial JWT tokens for session management. This operation is designed for public access and does not require authentication. It strictly uses fields email and password_hash from the schema and enforces uniqueness of email. This operation complements login and token refresh endpoints to complete the registration and authentication cycle.","authorizationType":"join","description":"This API operation allows a new workflowManager user to register by providing their email and password. It creates a new user record in notification_workflow_workflowmanagers with the required email and password_hash fields, records creation and update timestamps automatically, and respects the uniqueness constraint on email addresses. Upon successful creation, the system issues JWT tokens conforming to INotificationWorkflowWorkflowManager.IAuthorized granting access to workflow management capabilities. This operation is publicly accessible to enable new user onboarding.","summary":"Create a new workflowManager user account in notification_workflow_workflowmanagers and issue authorization tokens.","parameters":[],"requestBody":{"description":"WorkflowManager user registration data","typeName":"INotificationWorkflowWorkflowManager.ICreate"},"responseBody":{"description":"Authorized workflowManager user session data","typeName":"INotificationWorkflowWorkflowManager.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/workflowManager/join","method":"post"},{"specification":"The role \"workflowManager\" relates to the Prisma DB table notification_workflow_workflowmanagers. This API operation allows existing workflowManager users to authenticate by validating email and password credentials. On successful authentication, JWT access and refresh tokens are issued for session management and API security. This endpoint is public to allow login attempts and references the email and password_hash fields from the underlying schema for credential verification.","authorizationType":"login","description":"Authenticate a workflowManager user by verifying provided credentials against the notification_workflow_workflowmanagers table. This operation validates the user's email and password, issuing JWT tokens upon successful login. It maintains session security by restricting access tokens to a limited lifetime and issuing refresh tokens for session renewal. Intended for public access as the primary authentication entry point for workflowManager role users.","summary":"Authenticate workflowManager user and issue JWT tokens.","parameters":[],"requestBody":{"description":"WorkflowManager user login credentials","typeName":"INotificationWorkflowWorkflowManager.ILogin"},"responseBody":{"description":"Authorized workflowManager user session data","typeName":"INotificationWorkflowWorkflowManager.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/workflowManager/login","method":"post"},{"specification":"The role \"workflowManager\" relates to the Prisma DB table notification_workflow_workflowmanagers. This API operation supports refreshing JWT tokens for workflowManager users by validating an existing refresh token and issuing new access tokens. It ensures stateless session renewal with secure token management. Requires the valid refresh token from prior login or join operations. This endpoint supports secure user session continuation for workflowManager users.","authorizationType":"refresh","description":"Refresh JWT tokens for an authenticated workflowManager user by verifying the provided refresh token. On success, new access and refresh tokens are issued to maintain secure and uninterrupted session access. This operation requires a valid refresh token and is restricted to authenticated users only. It is part of the standard authentication token lifecycle operations supporting the workflowManager role.","summary":"Refresh JWT tokens for workflowManager user session continuity.","parameters":[],"requestBody":{"description":"Refresh token request data","typeName":"INotificationWorkflowWorkflowManager.IRefresh"},"responseBody":{"description":"Authorized workflowManager user session data","typeName":"INotificationWorkflowWorkflowManager.IAuthorized"},"authorizationRole":"workflowManager","name":"refresh","path":"/auth/workflowManager/refresh","method":"post"},{"specification":"Authentication API operations for the role \"triggerOperator\" which is of kind \"member\". The role corresponds to the Prisma table \"notification_workflow_triggeroperators\" containing fields: id, email, password_hash, created_at, updated_at, deleted_at.\n\nOperations:\n1. /auth/triggerOperator/join (POST): Registers a new trigger operator user, accepting credentials, storing securely hashed password.\n2. /auth/triggerOperator/login (POST): Authenticates the trigger operator by email and password, issues JWT token with expiration.\n3. /auth/triggerOperator/refresh (POST): Refreshes JWT tokens given valid refresh token.\n\nEach authentication operation's response follows the format INotificationWorkflowTriggerOperator.IAuthorized.\n\nNo additional operations for password reset, email verification, or two-factor auth because schema does not expose respective fields.\n\nSecurity and validation leverage Prisma fields email and password_hash for user credential validations. JWT token payload includes user ID and role name \"triggerOperator\".\n\nEndpoints are public for join and login, refresh requires a valid refresh token.\n\nPaths and function names follow camelCase conventions.\n\nSummary and description are detailed referencing schema fields and roles.\n\nOperations are strictly following RESTful patterns and Prisma schema constraints.","authorizationType":"join","description":"Registers a new trigger operator user in the system enabling them to authenticate and access trigger management features. The API accepts user credentials including the unique email and a password that is securely hashed and stored in the notification_workflow_triggeroperators database table. This operation ensures that the email is unique in the system and complies with the schema constraints.\n\nThe triggerOperator role is defined to create and manage trigger instances, and thus requires authenticated access through JWT tokens issued upon successful registration.\n\nThis registration endpoint is public and does not require prior authentication. The response returns a standard authorized token response INotificationWorkflowTriggerOperator.IAuthorized upon successful user creation.\n\nRelated operation includes /auth/triggerOperator/login for authentication and refresh for token renewal.\n\nThe registration process securely stores the password hash, maintains created_at and updated_at timestamps, and allows soft deletion indicated by deleted_at.\n\nAll user identity and credential data for triggerOperator role is persisted in notification_workflow_triggeroperators Prisma table with fields email and password_hash being critical for authentication.\n\nThe unique index on email enforces no duplicate registrations with the same email.","summary":"Register a new trigger operator user account and issue authorization tokens (notification_workflow_triggeroperators).","parameters":[],"requestBody":{"description":"Trigger operator registration credentials.","typeName":"INotificationWorkflowTriggerOperator.ICreate"},"responseBody":{"description":"Authorization response containing JWT tokens and user info.","typeName":"INotificationWorkflowTriggerOperator.IAuthorized"},"authorizationRole":null,"name":"joinTriggerOperator","path":"/auth/triggerOperator/join","method":"post"},{"specification":"Authentication API operation for trigger operator users to log in to the system. Uses credentials stored securely in notification_workflow_triggeroperators table.\n\nThis endpoint accepts email and password, verifies the credentials against password_hash stored in Prisma table, and issues JWT tokens upon successful authentication.\n\nThe role \"triggerOperator\" corresponds to notification_workflow_triggeroperators and includes fields id, email, password_hash, created_at, updated_at, and deleted_at.\n\nThe login operation issues a response with INotificationWorkflowTriggerOperator.IAuthorized type containing access token, refresh token, user ID, role name, and expiration details.\n\nThe operation is publicly accessible and requires no prior authentication.\n\nSecurity best practices are enforced by hashing passwords and ensuring tokens are only issued upon valid credentials.\n\nThe operation path and function name adhere to camelCase standards.","authorizationType":"login","description":"Authenticate a trigger operator user using email and password credentials. Validates the hashed password stored in the notification_workflow_triggeroperators table. Issues JWT access and refresh tokens on success.\n\nEnsures secure authentication based on Prisma schema fields email and password_hash for triggerOperator.\n\nResponse includes tokens and user identity encapsulated in INotificationWorkflowTriggerOperator.IAuthorized.\n\nThis operation provides the primary authentication entry point for triggerOperators and is public.\n\nRelated operations include /auth/triggerOperator/join for registration and /auth/triggerOperator/refresh for renewing access tokens.\n\nImplementation must respect security practices by validating hashed passwords and protecting against unauthorized access.","summary":"Authenticate trigger operator user and issue JWT tokens (notification_workflow_triggeroperators).","parameters":[],"requestBody":{"description":"Trigger operator login credentials.","typeName":"INotificationWorkflowTriggerOperator.ILogin"},"responseBody":{"description":"Authorization response with access and refresh tokens.","typeName":"INotificationWorkflowTriggerOperator.IAuthorized"},"authorizationRole":null,"name":"loginTriggerOperator","path":"/auth/triggerOperator/login","method":"post"},{"specification":"Refresh JWT access tokens for trigger operator users given a valid refresh token.\n\nThis operation allows renewal of authentication without re-entering credentials. It validates the refresh token and issues new access and refresh tokens following JWT best practices.\n\nThe triggerOperator role references notification_workflow_triggeroperators in Prisma schema.\n\nResponse type is INotificationWorkflowTriggerOperator.IAuthorized containing new tokens and user info.\n\nThe path is publicly accessible but requires a valid refresh token in the request.\n\nThis operation complements the join and login endpoints forming a complete authentication lifecycle.\n\nFunction names and paths follow camelCase conventions.","authorizationType":"refresh","description":"Renew JWT access tokens for an authenticated trigger operator using a refresh token. Validates token validity and issues new access and refresh tokens in INotificationWorkflowTriggerOperator.IAuthorized response format.\n\nSupports seamless authentication lifecycle and enhances security by enforcing token expiry and rotation.\n\nOperates on Prisma schema table notification_workflow_triggeroperators with fields critical to authentication state.\n\nAccessible publicly but requires a valid refresh token for token renewal.\n\nComplements join and login operations for triggerOperator authentication workflow.\n\nController applies proper security guards to ensure refresh token validation prior to execution.\n\nFollowing RESTful and security best practices with role-specific authorization flows.","summary":"Refresh JWT tokens for trigger operator user (notification_workflow_triggeroperators).","parameters":[],"requestBody":{"description":"Refresh token input for renewing JWT tokens.","typeName":"INotificationWorkflowTriggerOperator.IRefresh"},"responseBody":{"description":"New authorization tokens and user information.","typeName":"INotificationWorkflowTriggerOperator.IAuthorized"},"authorizationRole":null,"name":"refreshTriggerOperator","path":"/auth/triggerOperator/refresh","method":"post"},{"specification":"API operation for system administrators role user authentication login. This endpoint accepts admin credentials (email and password), validates them, and issues JWT access and refresh tokens upon successful authentication. The authentication process relies on checking the notification_workflow_systemadmins Prisma table, making sure the user exists and password hashes match. The operation returns an authorization response type INotificationWorkflowSystemAdmin.IAuthorized that includes tokens and user claims. This login is intended for system admins with full permissions to manage users, workflows, triggers, and system settings. Security best practices such as protection of password hashes and token expiration apply. This operation is public, requiring role 'systemAdmin' for access control after authentication.","authorizationType":"login","description":"Login endpoint for system administrators enabling secure authentication and JWT issuance. This operation validates credentials against the notification_workflow_systemadmins table, which stores system admin user info, including unique email and hashed password. On success, it issues tokens per the INotificationWorkflowSystemAdmin.IAuthorized pattern used for secure session management. Provides foundation for admin role-based access control to system management features. Ensure password hash validation and secure token handling.","summary":"Authenticate system administrator and issue JWT tokens using notification_workflow_systemadmins table","parameters":[],"requestBody":{"description":"Login credentials for system administrator including email and password","typeName":"INotificationWorkflowSystemAdmin.IRequestLogin"},"responseBody":{"description":"Authorized session information including access and refresh tokens","typeName":"INotificationWorkflowSystemAdmin.IAuthorized"},"authorizationRole":"systemAdmin","name":"login","path":"/auth/systemAdmin/login","method":"post"},{"specification":"API endpoint for system administrators role user registration (join). Creates a new system administrator account by accepting registration info including email and password, which will be hashed and stored in the notification_workflow_systemadmins table. Upon successful creation, JWT tokens are issued encapsulated by the INotificationWorkflowSystemAdmin.IAuthorized response type, enabling immediate authentication and secured session for system administrators. This operation is public and serves as the registration flow for system admin users.","authorizationType":"join","description":"Join endpoint for system administrators allowing new system admin account creation and issuing JWT tokens for authenticated sessions. This operation stores hashed credentials and unique email in notification_workflow_systemadmins table, supporting system admin onboarding processes. Supports best practices for password hashing and secure token issuance.","summary":"Register new system administrator and issue JWT tokens","parameters":[],"requestBody":{"description":"Registration information for new system administrator","typeName":"INotificationWorkflowSystemAdmin.IRequestJoin"},"responseBody":{"description":"Authorized session information including access and refresh tokens","typeName":"INotificationWorkflowSystemAdmin.IAuthorized"},"authorizationRole":"systemAdmin","name":"join","path":"/auth/systemAdmin/join","method":"post"},{"specification":"API endpoint to refresh JWT tokens for system administrators by accepting a valid refresh token. Generates new access and refresh tokens to maintain secure session continuity. Relies on validation of existing tokens and user session state associated with the notification_workflow_systemadmins table. Issued tokens follow the INotificationWorkflowSystemAdmin.IAuthorized response pattern, ensuring token lifecycle management specific to system administrators. Operation requires a valid refresh token and appropriate role authorization to provide token renewal capabilities.","authorizationType":"refresh","description":"Refresh authentication tokens for system administrators using valid refresh tokens to issue new JWT tokens. Ensures ongoing secure sessions for the admin user by validating current tokens and session state stored in notification_workflow_systemadmins table. Supports role-based access control continuation while maintaining token expiration security.","summary":"Refresh JWT tokens for system administrator sessions","parameters":[],"requestBody":{"description":"Refresh token request for system administrator session renewal","typeName":"INotificationWorkflowSystemAdmin.IRequestRefresh"},"responseBody":{"description":"Authorized session information including new access and refresh tokens","typeName":"INotificationWorkflowSystemAdmin.IAuthorized"},"authorizationRole":"systemAdmin","name":"refresh","path":"/auth/systemAdmin/refresh","method":"post"},{"specification":"Generate JWT-based authorization API operations for the role 'workerService' which is a guest-type automated service processing trigger instances. This role does not authenticate manually and thus only supports token refresh and no login. The operations are based on the Prisma schema for the 'notification_workflow_workerservices' table which contains fields: id (UUID, PK), email (unique), password_hash, created_at, updated_at, deleted_at (nullable). The essential operations to generate according to role kind 'guest' are join and refresh.\n\nDetailed descriptions reflect fields in 'notification_workflow_workerservices' schema. Join allows creating a new worker service account and issuing tokens with security audit timestamps and unique email enforcement. Refresh renews JWT tokens based on valid refresh tokens for session continuation.\n\nNo login operation since workerService is non-interactive guest role.\n\nResponses follow naming convention: INotificationWorkflowWorkerService.IAuthorized.\n\nPaths:\n- POST /auth/workerService/join\n- POST /auth/workerService/refresh\n\nOperations use authorizationType join or refresh respectively.\nAuthorization role is 'workerService'.","authorizationType":"join","description":"This API operation creates a new worker service account of role 'workerService', issuing JWT tokens for authenticated sessions. It registers the service with a unique email address and hashed password stored securely as 'password_hash' in the Prisma schema 'notification_workflow_workerservices' table. The operation ensures all creation timestamps 'created_at' and 'updated_at' are handled appropriately by the backend upon record creation. This supports automated backend service identification and authentication. The response returns authorized tokens for the newly registered service allowing secure access for processing trigger instances.\n\nThis operation is restricted to the 'workerService' authorization role and is publicly accessible during account creation.\n\nRelated operations include /auth/workerService/refresh to renew tokens and manage sessions securely. No interactive login is supported for this automated role.\n\nSecurity considerations include using strong password hashing and protecting the JWT secret key securely.\n\nThe operation adheres strictly to the Prisma schema fields, including unique email enforcement and soft deletion with 'deleted_at'.","summary":"Create worker service account and issue initial JWT tokens. Relates to 'notification_workflow_workerservices' table.","parameters":[],"requestBody":{"description":"Request body to create a new worker service account including unique email and secure password.","typeName":"INotificationWorkflowWorkerService.ICreate"},"responseBody":{"description":"Authorized tokens and session info for worker service account.","typeName":"INotificationWorkflowWorkerService.IAuthorized"},"authorizationRole":"workerService","name":"join","path":"/auth/workerService/join","method":"post"},{"specification":"Generates the API operation for refreshing access tokens for the 'workerService' role. This operation uses the Prisma schema 'notification_workflow_workerservices' for validation and token management. It requires a valid refresh token to obtain new JWT access tokens, thereby enabling session continuation for the automated worker service.\n\nThis refresh API is essential for maintaining JWT session security, allowing renewal without exposing password hashes. The operation is secured by requiring the 'workerService' authorization role.\n\nThe response follows the DTO naming convention 'INotificationWorkflowWorkerService.IAuthorized'.\n\nPath: POST /auth/workerService/refresh\nAuthorization type: refresh\n\nNo request parameters. Request body includes the refresh token object defined as INotificationWorkflowWorkerService.IRefresh.\n\nSecurity considerations highlight careful refresh token management to prevent token replay attacks.","authorizationType":"refresh","description":"This API operation renews JWT access tokens for an existing authenticated worker service session. It validates the provided refresh token, generates new access tokens, and updates session timestamps accordingly. This maintains secure session continuity without re-authentication with credentials.\n\nIt adheres closely to the 'notification_workflow_workerservices' Prisma schema ensuring the service identity remains consistent and secure.\n\nThe operation requires the 'workerService' authorization role and builds a secure token refresh workflow integral for automated backend services.\n\nRelated operations include the join operation to create initial tokens and the login operation, which does not exist for guest kind 'workerService'.\n\nRobust security mechanisms prevent refresh token abuse and replay attacks.\n\nThe endpoint expects a JSON body containing the refresh token information as per the defined schema for secure validation.","summary":"Refresh JWT access tokens for worker service role with a valid refresh token. Based on 'notification_workflow_workerservices' table.","parameters":[],"requestBody":{"description":"Request body containing refresh token data.","typeName":"INotificationWorkflowWorkerService.IRefresh"},"responseBody":{"description":"Newly issued authorized tokens for continued session.","typeName":"INotificationWorkflowWorkerService.IAuthorized"},"authorizationRole":"workerService","name":"refresh","path":"/auth/workerService/refresh","method":"post"},{"specification":"This operation retrieves a list of workflow manager users with filtering, searching, and pagination capabilities. It interacts with the table notification_workflow_workflowmanagers in the Prisma schema, enabling clients to get collections of workflow managers. The operation supports sophisticated search criteria to accommodate efficient user search in the system managing notification workflows.","description":"Retrieve a filtered, paginated list of existing workflow manager users in the Notification Workflow backend system. It serves users who administrate notification workflows by allowing them to view and manage workflow managers.\n\nThe operation fetches basic details such as email identifiers and status of workflow managers. It supports pagination and sorting to manage large user bases efficiently.\n\nThis operation requires authorization from systemAdmin and workflowManager roles who have management privileges. It returns summaries appropriate for list views and excludes sensitive information such as password hashes.\n\nThe underlying table notification_workflow_workflowmanagers captures individual workflow manager users with foundational identity details and audit timestamps.","summary":"List and search workflow managers","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for workflow managers","typeName":"INotificationWorkflowWorkflowManager.IRequest"},"responseBody":{"description":"Paginated list of workflow manager user summaries","typeName":"IPageINotificationWorkflowWorkflowManager.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/notificationWorkflow/systemAdmin/workflowManagers","method":"patch"},{"specification":"This operation retrieves a list of workflow manager users with filtering, searching, and pagination capabilities. It interacts with the table notification_workflow_workflowmanagers in the Prisma schema, enabling clients to get collections of workflow managers. The operation supports sophisticated search criteria to accommodate efficient user search in the system managing notification workflows.","description":"Retrieve a filtered, paginated list of existing workflow manager users in the Notification Workflow backend system. It serves users who administrate notification workflows by allowing them to view and manage workflow managers.\n\nThe operation fetches basic details such as email identifiers and status of workflow managers. It supports pagination and sorting to manage large user bases efficiently.\n\nThis operation requires authorization from systemAdmin and workflowManager roles who have management privileges. It returns summaries appropriate for list views and excludes sensitive information such as password hashes.\n\nThe underlying table notification_workflow_workflowmanagers captures individual workflow manager users with foundational identity details and audit timestamps.","summary":"List and search workflow managers","parameters":[],"requestBody":{"description":"Search and pagination filter criteria for workflow managers","typeName":"INotificationWorkflowWorkflowManager.IRequest"},"responseBody":{"description":"Paginated list of workflow manager user summaries","typeName":"IPageINotificationWorkflowWorkflowManager.ISummary"},"authorizationType":null,"authorizationRole":"workflowManager","name":"index","path":"/notificationWorkflow/workflowManager/workflowManagers","method":"patch"},{"specification":"This operation retrieves detailed information about a single workflow manager user, identified by a unique UUID. It accesses the notification_workflow_workflowmanagers table in the Prisma schema. The returned data includes the user's email and audit information but excludes sensitive data such as password hashes.","description":"Retrieve comprehensive details of a specific workflow manager user by their unique identifier. This operation supports administrators and workflow managers in managing user accounts by providing full visibility into their information except passwords.\n\nThe response reflects the current state in the database, including creation and update timestamps.\n\nAccess to this operation is restricted to authorized users with the systemAdmin or workflowManager roles to ensure privacy and compliance.\n\nThe underlying database model notification_workflow_workflowmanagers stores all identity and management details for workflow managers including soft delete markers.","summary":"Get detailed info on a workflow manager user","parameters":[{"name":"id","description":"Unique UUID of the target workflow manager user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed workflow manager user information","typeName":"INotificationWorkflowWorkflowManager"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/workflowManagers/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a single workflow manager user, identified by a unique UUID. It accesses the notification_workflow_workflowmanagers table in the Prisma schema. The returned data includes the user's email and audit information but excludes sensitive data such as password hashes.","description":"Retrieve comprehensive details of a specific workflow manager user by their unique identifier. This operation supports administrators and workflow managers in managing user accounts by providing full visibility into their information except passwords.\n\nThe response reflects the current state in the database, including creation and update timestamps.\n\nAccess to this operation is restricted to authorized users with the systemAdmin or workflowManager roles to ensure privacy and compliance.\n\nThe underlying database model notification_workflow_workflowmanagers stores all identity and management details for workflow managers including soft delete markers.","summary":"Get detailed info on a workflow manager user","parameters":[{"name":"id","description":"Unique UUID of the target workflow manager user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed workflow manager user information","typeName":"INotificationWorkflowWorkflowManager"},"authorizationType":null,"authorizationRole":"workflowManager","name":"at","path":"/notificationWorkflow/workflowManager/workflowManagers/{id}","method":"get"},{"specification":"This operation updates a workflow manager user's details, referenced by their unique UUID key. It updates modifiable fields like email and timestamps, excluding sensitive password hash changes in this API. It operates on the notification_workflow_workflowmanagers Prisma table, ensuring consistency and audit compliance.","description":"Update details of an existing workflow manager user using their UUID. This supports administrative workflows for managing user information in the Notification Workflow backend system.\n\nOnly authorized roles such as systemAdmin and workflowManager can perform this update. Proper validation is required to ensure changes comply with system rules and uniqueness constraints.\n\nThe operation does not allow password hash changes via this endpoint to maintain security best practices.\n\nUpdates to the workflow manager are versioned with timestamps for audit and traceability.\n\nUnderlying Prisma table notification_workflow_workflowmanagers tracks all workflow manager users with authentication data and soft deletion support.","summary":"Update workflow manager user information","parameters":[{"name":"id","description":"Unique UUID of the workflow manager user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated workflow manager user information","typeName":"INotificationWorkflowWorkflowManager.IUpdate"},"responseBody":{"description":"Updated workflow manager user details","typeName":"INotificationWorkflowWorkflowManager"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/notificationWorkflow/systemAdmin/workflowManagers/{id}","method":"put"},{"specification":"This operation updates a workflow manager user's details, referenced by their unique UUID key. It updates modifiable fields like email and timestamps, excluding sensitive password hash changes in this API. It operates on the notification_workflow_workflowmanagers Prisma table, ensuring consistency and audit compliance.","description":"Update details of an existing workflow manager user using their UUID. This supports administrative workflows for managing user information in the Notification Workflow backend system.\n\nOnly authorized roles such as systemAdmin and workflowManager can perform this update. Proper validation is required to ensure changes comply with system rules and uniqueness constraints.\n\nThe operation does not allow password hash changes via this endpoint to maintain security best practices.\n\nUpdates to the workflow manager are versioned with timestamps for audit and traceability.\n\nUnderlying Prisma table notification_workflow_workflowmanagers tracks all workflow manager users with authentication data and soft deletion support.","summary":"Update workflow manager user information","parameters":[{"name":"id","description":"Unique UUID of the workflow manager user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated workflow manager user information","typeName":"INotificationWorkflowWorkflowManager.IUpdate"},"responseBody":{"description":"Updated workflow manager user details","typeName":"INotificationWorkflowWorkflowManager"},"authorizationType":null,"authorizationRole":"workflowManager","name":"update","path":"/notificationWorkflow/workflowManager/workflowManagers/{id}","method":"put"},{"specification":"This operation permanently removes a workflow manager user specified by UUID from the system database. It performs a hard delete since the Prisma schema includes a nullable deleted_at column but here we perform complete removal from the notification_workflow_workflowmanagers table. Related audit logs and references must be handled appropriately at the business logic layer.\n\nThe operation enforces authorization strictly to systemAdmin and workflowManager roles to prevent unauthorized user deletion.\n\nThis API permanently deletes the record and cannot be undone.","description":"Permanently delete a workflow manager user by unique identifier. This operation removes all traces of the user from the system database.\n\nOnly systemAdmin and workflowManager roles with sufficient privileges may execute this operation.\n\nDeletion includes cleaning all references and related data where required to maintain data integrity.\n\nThe operation performs a hard delete rather than soft deletion as per schema design for this operation.\n\nClients should be aware that deletion is irreversible.","summary":"Delete a workflow manager user","parameters":[{"name":"id","description":"Unique UUID of the workflow manager user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/notificationWorkflow/systemAdmin/workflowManagers/{id}","method":"delete"},{"specification":"This operation permanently removes a workflow manager user specified by UUID from the system database. It performs a hard delete since the Prisma schema includes a nullable deleted_at column but here we perform complete removal from the notification_workflow_workflowmanagers table. Related audit logs and references must be handled appropriately at the business logic layer.\n\nThe operation enforces authorization strictly to systemAdmin and workflowManager roles to prevent unauthorized user deletion.\n\nThis API permanently deletes the record and cannot be undone.","description":"Permanently delete a workflow manager user by unique identifier. This operation removes all traces of the user from the system database.\n\nOnly systemAdmin and workflowManager roles with sufficient privileges may execute this operation.\n\nDeletion includes cleaning all references and related data where required to maintain data integrity.\n\nThe operation performs a hard delete rather than soft deletion as per schema design for this operation.\n\nClients should be aware that deletion is irreversible.","summary":"Delete a workflow manager user","parameters":[{"name":"id","description":"Unique UUID of the workflow manager user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"workflowManager","name":"erase","path":"/notificationWorkflow/workflowManager/workflowManagers/{id}","method":"delete"},{"specification":"API operations for managing TriggerOperator users, who are responsible for creating and managing trigger instances in the notification workflow system. These operations include listing (search/pagination), retrieving details, updating, and deleting TriggerOperator users. The operations strictly work on the 'notification_workflow_triggeroperators' table of the Prisma schema, ensuring that only valid CRUD operations relevant to TriggerOperator users are offered. The database enforces unique email addresses and supports soft deletion via the 'deleted_at' timestamp field. Operations follow secure role-based access control and provide comprehensive data validation including ID format, unique email constraints, and audit timestamps.","description":"This PATCH operation retrieves a filtered and paginated list of TriggerOperator users from the system. It accepts search parameters for filtering by email and other attributes, supports pagination and sorting, and returns the list of matching TriggerOperator users with summary information. Role-based authentication ensures only authorized users can perform this operation.\n\nThe GET operation returns detailed information of a single TriggerOperator user specified by the UUID 'id' path parameter. This operation ensures that only active (non-soft-deleted) users are retrieved. The returned data includes all user fields except the password hash for security.\n\nThe PUT operation updates an existing TriggerOperator user specified by the 'id' path parameter. It accepts the update payload with fields such as email and password hash (secured) if changed. The operation performs validation to ensure the user exists and is not soft deleted, and email uniqueness is maintained. On success, the updated user data is returned excluding the password hash for security.\n\nThe DELETE operation soft deletes the specified TriggerOperator user by setting the 'deleted_at' timestamp. This prevents user from logging in and excludes the user from active listings. It requires successful userid validation and role-based authorization before performing the soft delete. No response body is returned.\n\nAll operations protect sensitive information and enforce strict validation rules as per the Prisma schema for security and data integrity.","summary":"Manage TriggerOperator users: list, get details, update, and soft delete according to the Prisma schema","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TriggerOperator user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request payload to update a TriggerOperator user","typeName":"INotificationWorkflowTriggerOperator.IUpdate"},"responseBody":{"description":"Detailed TriggerOperator user information","typeName":"INotificationWorkflowTriggerOperator"},"authorizationType":null,"authorizationRole":"triggerOperator","method":"patch","name":"index","path":"/notificationWorkflow/triggerOperator/triggerOperators"},{"specification":"Retrieve detailed information of a TriggerOperator user by ID from the notification_workflow_triggeroperators table. This GET operation requires the UUID 'id' path parameter. It returns the full user data excluding sensitive information like password hash, consistent with security best practices. Role-based access control applies.","description":"This GET operation retrieves a single TriggerOperator user specified by their unique UUID 'id'. It returns detailed user information excluding sensitive password hash data to maintain security. The system ensures that only active users (not soft deleted) can be retrieved, and that the 'id' follows UUID format validation.\n\nThis endpoint is intended for authenticated TriggerOperator roles or higher as per authorizationRoles. Errors include user not found or invalid UUID format.\n\nAll returned data respects the data shape described in the Prisma schema for notification_workflow_triggeroperators, excluding password hash for security.\n\nThe detailed user view supports user management and auditing needs.","summary":"Retrieve a TriggerOperator user by unique ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TriggerOperator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed TriggerOperator user information","typeName":"INotificationWorkflowTriggerOperator"},"authorizationType":null,"authorizationRole":"triggerOperator","method":"get","name":"at","path":"/notificationWorkflow/triggerOperator/triggerOperators/{id}"},{"specification":"Update an existing TriggerOperator user identified by the UUID 'id' parameter in the notification_workflow_triggeroperators table. This PUT operation accepts an update payload containing modifiable fields such as email and (optionally) password hash. The operation enforces email uniqueness and valid UUID format for 'id'. Upon successful validation and update, the updated user information is returned excluding the password hash for security.\n\nSoft deleted users cannot be updated. Requests must be authorized for roles with triggerOperator permission.","description":"This PUT operation updates details of an existing TriggerOperator user specified by the UUID 'id'. The request body includes fields to update such as email and password hash if password change is intended. Email must remain unique within the system.\n\nIf the user is soft deleted or does not exist, an error is returned. Password hashes are handled securely and never exposed in responses.\n\nUpon successful update, the updated TriggerOperator user details excluding password hash are returned for confirmation.\n\nThis operation enforces strict validation, authorization, and data integrity consistent with the Prisma schema entity.\n\nRoles authorized include 'triggerOperator' to allow trigger management personnel to update user info.","summary":"Update a TriggerOperator user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TriggerOperator user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request payload to update a TriggerOperator user","typeName":"INotificationWorkflowTriggerOperator.IUpdate"},"responseBody":{"description":"Updated TriggerOperator user information","typeName":"INotificationWorkflowTriggerOperator"},"authorizationType":null,"authorizationRole":"triggerOperator","method":"put","name":"update","path":"/notificationWorkflow/triggerOperator/triggerOperators/{id}"},{"specification":"Soft delete a TriggerOperator user identified by the UUID 'id' from the notification_workflow_triggeroperators table. This DELETE operation sets the 'deleted_at' timestamp to mark the user as deleted without removing the record from the database, preserving audit trails.\n\nThe operation requires the 'id' path parameter, valid UUID format, and appropriate authorization (triggerOperator role) to perform the deletion. No response body data is returned.\n\nSoft deletion prevents the user from authentication and excludes the user from active listings. Data integrity and security are ensured through validation and role-based access checks.","description":"This DELETE operation soft deletes a TriggerOperator user by setting their 'deleted_at' timestamp. The user record remains in the database but is excluded from active queries and logins.\n\nOnly authorized TriggerOperator roles may perform soft deletion. The operation requires a valid UUID 'id' path parameter identifying the target user.\n\nNo response payload is returned upon successful soft deletion. Error responses include invalid UUID format or unauthorized access.\n\nThis operation safeguards audit integrity while supporting user lifecycle management consistent with the Prisma schema for TriggerOperator users.","summary":"Soft delete a TriggerOperator user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TriggerOperator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"triggerOperator","method":"delete","name":"erase","path":"/notificationWorkflow/triggerOperator/triggerOperators/{id}"},{"specification":"This operation retrieves a paginated list of system administrator user accounts from the Notification Workflow backend. It provides filtering, searching, and sorting capabilities over the systemAdmin table in the Prisma schema, encompassing fields such as id, email, and audit timestamps. This endpoint is essential for managing administrative users and viewing overview information. Authentication is required, restricting access to users with the 'systemAdmin' role. The request body supports complex search criteria, and the response contains paged results with summary data optimized for list display.","description":"Retrieve a filtered and paginated list of system administrator users in the Notification Workflow service. This operation allows clients to query systemAdmin accounts matching criteria such as email substrings and creation date ranges.\n\nSecurity considerations include enforcing 'systemAdmin' role access and limiting exposure of sensitive information. Only authorized system administrators can use this endpoint.\n\nThe operation references the notification_workflow_systemadmins table, including its core fields: id, email, password_hash (not included in results), and audit timestamps (created_at, updated_at).\n\nResponse data returns essential summary details for user management and display purposes.\n\nThis operation should be used to support user interfaces for administrative user listings and audits.","summary":"Search and retrieve paginated list of systemAdmin users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for systemAdmin filtering","typeName":"INotificationWorkflowSystemAdmin.IRequest"},"responseBody":{"description":"Paginated list of systemAdmin user summaries matching search criteria","typeName":"IPageINotificationWorkflowSystemAdmin.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"search","path":"/notificationWorkflow/systemAdmin/systemAdmins","method":"patch"},{"specification":"This operation fetches detailed information for a single system administrator user identified by their unique ID. It interacts directly with the notification_workflow_systemadmins table, retrieving all pertinent fields except sensitive data like password hashes. Role-based authentication restricts access to only system administrative users.\n\nThe {id} path parameter specifies the target systemAdmin's UUID. Successful responses include complete user details, enabling management tasks and audits.","description":"Retrieve detailed information of a single system administrator user from the Notification Workflow backend.\n\nThis endpoint requires 'systemAdmin' role authentication to ensure only authorized users can access sensitive user details.\n\nThe systemAdmin entity includes id, email, audit timestamps, and optional deleted_at timestamp indicating soft deletion status.\n\nPath parameter 'id' must be a valid UUID referencing a systemAdmin record.\n\nTypical use cases: viewing or editing an admin user's detailed profile in a secure administration interface.","summary":"Retrieve a systemAdmin user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the systemAdmin user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed systemAdmin user information","typeName":"INotificationWorkflowSystemAdmin"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/systemAdmins/{id}","method":"get"},{"specification":"This operation updates an existing system administrator user record identified by the {id} path parameter. It ensures strict role-based authentication allowing only systemAdmin users to modify administrative accounts.\n\nRequest bodies must adhere to the INotificationWorkflowSystemAdmin.IUpdate schema, permitting updates to modifiable fields such as email and password_hash. The endpoint applies validation, updates audit timestamps, and returns the updated user information on success.\n\nThis operation directly interfaces with the notification_workflow_systemadmins table in the Prisma database, maintaining data integrity and access control.","description":"Update the details of an existing system administrator user in the Notification Workflow backend.\n\nAuthentication requires 'systemAdmin' role to restrict modification privileges.\n\nThe request body accepts email and password_hash updates, validated according to the Prisma schema fields.\n\nThe path parameter 'id' identifies which admin user to update.\n\nThe response returns the updated systemAdmin user record with current data.\n\nUse cases include changing admin email addresses or resetting authentication credentials securely.","summary":"Update a systemAdmin user's data","parameters":[{"name":"id","in":"path","description":"Unique identifier of the systemAdmin user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the systemAdmin user","typeName":"INotificationWorkflowSystemAdmin.IUpdate"},"responseBody":{"description":"Updated systemAdmin user information","typeName":"INotificationWorkflowSystemAdmin"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/notificationWorkflow/systemAdmin/systemAdmins/{id}","method":"put"},{"specification":"This operation permanently deletes a system administrator user account identified by the {id} parameter. It interacts with the notification_workflow_systemadmins table in the Prisma database.\n\nThe systemAdmin entity uses soft deletion with a nullable deleted_at timestamp; however, this delete operation performs hard deletion removing the record entirely from the database.\n\nAccess to this deletion endpoint is restricted to users with the 'systemAdmin' role.\n\nNo request body or response body is included. Successful execution means the record is removed and cannot be recovered via this API.","description":"Delete a system administrator user account permanently from the Notification Workflow backend.\n\nThis action removes the record completely from the database, not just marking it as deleted.\n\nAccess requires 'systemAdmin' role authentication.\n\nThe {id} path parameter specifies the UUID of the target systemAdmin user.\n\nThis operation should be used cautiously as it cannot be undone via the API.","summary":"Permanently delete a systemAdmin user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the systemAdmin user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/notificationWorkflow/systemAdmin/systemAdmins/{id}","method":"delete"},{"specification":"This operation fetches a paginated list of WorkerService user accounts from the Notification Workflow system database. It operates on the notification_workflow_workerservices table as defined in the Prisma schema. The operation supports advanced filtering, sorting, and pagination parameters to allow users to find worker service accounts. The paginated response returns simplified summary information for each worker service including id and email address. This read-only operation does not require authentication, allowing public access.","description":"Retrieve a filtered and paginated list of WorkerService accounts in the system. This operation supports advanced searching by email, sorting by creation date or email, and pagination controls to navigate large sets of worker service records.\n\nSecurity considerations include ensuring only authorized users or services access this resource; however, this specific operation is designed as public with no authorization roles required.\n\nThe operation directly queries the notification_workflow_workerservices table reflecting all fields relevant to the worker service users as defined by the Prisma schema. Returned data provides a summary view optimized for list display without sensitive hashed password data.\n\nThis operation does not modify data and therefore follows safe GET semantics with a PATCH method due to complex request body for searching and filtering.\n\nError handling includes returning appropriate HTTP error codes for malformed requests or server issues.","summary":"Search and retrieve a filtered, paginated list of WorkerService accounts","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for WorkerService filtering","typeName":"INotificationWorkflowWorkerService.IRequest"},"responseBody":{"description":"Paginated list of WorkerService summary information matching search criteria","typeName":"IPageINotificationWorkflowWorkerservice.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/notificationWorkflow/workerServices","method":"patch"},{"specification":"This operation retrieves detailed information of a specific WorkerService user in the Notification Workflow system, based on the unique identifier provided in the path parameter. It operates on the notification_workflow_workerservices table in the Prisma schema and returns sensitive and non-sensitive fields except the hashed password. The operation requires authorization roles to restrict access to only the WorkerService themselves or system administrators.\n\nThe WorkerService user data includes the id, email, creation, and update timestamps. The id parameter refers to the UUID of the target WorkerService user.\n\nThe operation returns a single WorkerService entity and does not modify any data.","description":"Retrieve detailed information of a specific WorkerService user by their unique identifier. This operation allows fetching non-sensitive profile data such as user ID, email, created and updated timestamps.\n\nSecurity considerations require that access is restricted to the WorkerService themselves or system administrators to prevent unauthorized exposure of service account details.\n\nThis operation queries the notification_workflow_workerservices table based on the provided UUID path parameter and returns the full entity fields excluding password hashes.\n\nError handling manages cases such as resource not found or invalid UUID format.","summary":"Retrieve detailed information of a specific WorkerService user","parameters":[{"name":"id","description":"Unique identifier of the target WorkerService user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the WorkerService user","typeName":"INotificationWorkflowWorkerService"},"authorizationType":null,"authorizationRole":"workerService","name":"at","path":"/notificationWorkflow/workerService/workerServices/{id}","method":"get"},{"specification":"This operation retrieves detailed information of a specific WorkerService user in the Notification Workflow system, based on the unique identifier provided in the path parameter. It operates on the notification_workflow_workerservices table in the Prisma schema and returns sensitive and non-sensitive fields except the hashed password. The operation requires authorization roles to restrict access to only the WorkerService themselves or system administrators.\n\nThe WorkerService user data includes the id, email, creation, and update timestamps. The id parameter refers to the UUID of the target WorkerService user.\n\nThe operation returns a single WorkerService entity and does not modify any data.","description":"Retrieve detailed information of a specific WorkerService user by their unique identifier. This operation allows fetching non-sensitive profile data such as user ID, email, created and updated timestamps.\n\nSecurity considerations require that access is restricted to the WorkerService themselves or system administrators to prevent unauthorized exposure of service account details.\n\nThis operation queries the notification_workflow_workerservices table based on the provided UUID path parameter and returns the full entity fields excluding password hashes.\n\nError handling manages cases such as resource not found or invalid UUID format.","summary":"Retrieve detailed information of a specific WorkerService user","parameters":[{"name":"id","description":"Unique identifier of the target WorkerService user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the WorkerService user","typeName":"INotificationWorkflowWorkerService"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/workerServices/{id}","method":"get"},{"specification":"This operation updates an existing WorkerService user account in the Notification Workflow system. It operates on the notification_workflow_workerservices table in the Prisma schema and accepts update requests containing allowable fields such as email and password hash.\n\nThe unique identifier in the path parameter specifies which WorkerService user to update. The request body contains the updated data complying with the INotificationWorkflowWorkerservice.IUpdate schema.\n\nAuthorization restrictions limit this operation to the WorkerService themselves or system administrators. The operation returns the updated entity on success.\n\nValidation of inputs such as email format and password hash security is required. Error handling includes resource not found, validation failures, and authorization errors.","description":"Update fields of an existing WorkerService user account specified by unique ID. The request body must include fields allowed for update such as email and password hash.\n\nOnly authorized WorkerService users themselves or system administrators may perform this update.\n\nThe operation returns the updated WorkerService user entity excluding sensitive fields not intended for update.\n\nValidation of data is performed to ensure correctness and security. Attempts to update non-existent users or insufficient authorization result in errors.\n\nThis operation modifies data and requires PUT method semantics.","summary":"Update an existing WorkerService user account","parameters":[{"name":"id","description":"Unique identifier of the target WorkerService user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the WorkerService user account","typeName":"INotificationWorkflowWorkerService.IUpdate"},"responseBody":{"description":"Updated WorkerService user account information","typeName":"INotificationWorkflowWorkerService"},"authorizationType":null,"authorizationRole":"workerService","name":"update","path":"/notificationWorkflow/workerService/workerServices/{id}","method":"put"},{"specification":"This operation updates an existing WorkerService user account in the Notification Workflow system. It operates on the notification_workflow_workerservices table in the Prisma schema and accepts update requests containing allowable fields such as email and password hash.\n\nThe unique identifier in the path parameter specifies which WorkerService user to update. The request body contains the updated data complying with the INotificationWorkflowWorkerservice.IUpdate schema.\n\nAuthorization restrictions limit this operation to the WorkerService themselves or system administrators. The operation returns the updated entity on success.\n\nValidation of inputs such as email format and password hash security is required. Error handling includes resource not found, validation failures, and authorization errors.","description":"Update fields of an existing WorkerService user account specified by unique ID. The request body must include fields allowed for update such as email and password hash.\n\nOnly authorized WorkerService users themselves or system administrators may perform this update.\n\nThe operation returns the updated WorkerService user entity excluding sensitive fields not intended for update.\n\nValidation of data is performed to ensure correctness and security. Attempts to update non-existent users or insufficient authorization result in errors.\n\nThis operation modifies data and requires PUT method semantics.","summary":"Update an existing WorkerService user account","parameters":[{"name":"id","description":"Unique identifier of the target WorkerService user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the WorkerService user account","typeName":"INotificationWorkflowWorkerService.IUpdate"},"responseBody":{"description":"Updated WorkerService user account information","typeName":"INotificationWorkflowWorkerService"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/notificationWorkflow/systemAdmin/workerServices/{id}","method":"put"},{"specification":"This operation permanently deletes a WorkerService user account from the Notification Workflow system. It operates on the notification_workflow_workerservices table as defined in the Prisma schema. Since the schema includes a nullable deleted_at field, indicating soft deletion support, this operation performs a hard delete removing the record entirely.\n\nThe target account is identified by the UUID provided in the path parameter.\n\nAuthorization constraints restrict deletion to system administrators only. No request body is required, and no response body is returned.\n\nAppropriate error responses are returned if the target resource does not exist or if unauthorized access is attempted.","description":"Permanently delete a WorkerService user account by unique ID. This hard delete removes the record from the database irreversibly.\n\nAccess to this operation is limited to system administrators to protect system integrity.\n\nNo data is returned upon successful deletion.\n\nErrors include resource not found and authorization failure.\n\nThe operation corresponds to DELETE HTTP method with no request or response body.","summary":"Delete a WorkerService user account","parameters":[{"name":"id","description":"Unique identifier of the target WorkerService user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/notificationWorkflow/systemAdmin/workerServices/{id}","method":"delete"},{"specification":"The Workflows table represents notification workflows that define orchestration sequences for email, SMS, and delay nodes arranged as Directed Acyclic Graphs (DAGs). This API operation provides filtered and paginated retrieval of workflows supporting complex search criteria and sorting, respecting the workflow's active state, versioning, and timestamps. It allows workflowManagers and systemAdmins to search active and inactive workflows with various filters.","description":"This operation retrieves a filtered and paginated list of notification workflows, including all relevant metadata such as workflow code, name, activation status, version, and timestamps. \n\nWorkflow managers and system administrators can use this endpoint to perform advanced searches based on workflow properties, facilitating efficient management of multiple workflows. \n\nThe search supports pagination and sorting to enhance performance and usability in UIs for workflow management. Security considerations include role-based access control limiting this operation to authorized user roles only.\n\nThe underlying data model is the notification_workflow_workflows table in the Prisma schema, representing workflows as DAGs with related details encapsulated by entry nodes and versioning information.\n\nThis API complements CRUD operations by enabling advanced list querying for workflows suitable for administrative and operational purposes.","summary":"Search and retrieve a filtered, paginated list of notification workflows","parameters":[],"requestBody":{"description":"Search filters and pagination parameters for workflow listing","typeName":"INotificationWorkflowWorkflow.IRequest"},"responseBody":{"description":"Paginated list of notification workflows matching the search criteria","typeName":"IPageINotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows","method":"patch","name":"index"},{"specification":"The Workflows table represents notification workflows that define orchestration sequences for email, SMS, and delay nodes arranged as Directed Acyclic Graphs (DAGs). This API operation provides filtered and paginated retrieval of workflows supporting complex search criteria and sorting, respecting the workflow's active state, versioning, and timestamps. It allows workflowManagers and systemAdmins to search active and inactive workflows with various filters.","description":"This operation retrieves a filtered and paginated list of notification workflows, including all relevant metadata such as workflow code, name, activation status, version, and timestamps. \n\nWorkflow managers and system administrators can use this endpoint to perform advanced searches based on workflow properties, facilitating efficient management of multiple workflows. \n\nThe search supports pagination and sorting to enhance performance and usability in UIs for workflow management. Security considerations include role-based access control limiting this operation to authorized user roles only.\n\nThe underlying data model is the notification_workflow_workflows table in the Prisma schema, representing workflows as DAGs with related details encapsulated by entry nodes and versioning information.\n\nThis API complements CRUD operations by enabling advanced list querying for workflows suitable for administrative and operational purposes.","summary":"Search and retrieve a filtered, paginated list of notification workflows","parameters":[],"requestBody":{"description":"Search filters and pagination parameters for workflow listing","typeName":"INotificationWorkflowWorkflow.IRequest"},"responseBody":{"description":"Paginated list of notification workflows matching the search criteria","typeName":"IPageINotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows","method":"patch","name":"index"},{"specification":"The Workflows table encapsulates the definition of a notification workflow. This API operation retrieves detailed information about a specific workflow identified by id, returning the full workflow including nodes and edges with metadata such as version, active status, and timestamps. This enables workflow managers and system administrators to view a single workflow's complete configuration for inspection or editing.","description":"Retrieve detailed information for a specified notification workflow, including the workflow's properties like code, name, isActive status, and entry node ID. Also includes the workflow's related nodes and edges collections showing the structure of the workflow DAG.\n\nAccess is restricted to workflowManager and systemAdmin roles to ensure only authorized users can view workflow details. The result integrates with the Prisma schema's notification_workflow_workflows table and its subordinate workflow_nodes and workflow_edges tables.\n\nErrors include 404 if the workflowId does not exist. This endpoint is essential for UI workflows that allow detailed visualization and editing of notification workflows.","summary":"Retrieve detailed information of a notification workflow by its ID","parameters":[{"name":"workflowId","description":"Unique identifier of the target notification workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification workflow entity with nodes and edges","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}","method":"get","name":"at"},{"specification":"The Workflows table encapsulates the definition of a notification workflow. This API operation retrieves detailed information about a specific workflow identified by id, returning the full workflow including nodes and edges with metadata such as version, active status, and timestamps. This enables workflow managers and system administrators to view a single workflow's complete configuration for inspection or editing.","description":"Retrieve detailed information for a specified notification workflow, including the workflow's properties like code, name, isActive status, and entry node ID. Also includes the workflow's related nodes and edges collections showing the structure of the workflow DAG.\n\nAccess is restricted to workflowManager and systemAdmin roles to ensure only authorized users can view workflow details. The result integrates with the Prisma schema's notification_workflow_workflows table and its subordinate workflow_nodes and workflow_edges tables.\n\nErrors include 404 if the workflowId does not exist. This endpoint is essential for UI workflows that allow detailed visualization and editing of notification workflows.","summary":"Retrieve detailed information of a notification workflow by its ID","parameters":[{"name":"workflowId","description":"Unique identifier of the target notification workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification workflow entity with nodes and edges","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}","method":"get","name":"at"},{"specification":"Creates a new notification workflow entry in the database. Validates all input fields including the workflow DAG structure, ensuring acyclic graphs without invalid edges. Validates templates for email and sms nodes using LiquidJS syntax and confirms delay node values. Stores workflow with initial versioning and timestamps. Only workflow managers and system administrators are authorized to perform this operation.","description":"Create a new notification workflow with validation ensuring that the entry node exists, all edges reference valid nodes, the workflow graph is acyclic, all templates are valid LiquidJS template strings, and delay nodes specify valid delays in milliseconds or durations.\n\nThe new workflow is initialized with version 1 and timestamps for creation and last update. This operation is restricted to authorized workflowManager and systemAdmin roles who manage the notification workflows.\n\nThe underlying database corresponds to the notification_workflow_workflows Prisma table and related workflow nodes and edges.","summary":"Create a new notification workflow","parameters":[],"requestBody":{"description":"Creation data for a new notification workflow","typeName":"INotificationWorkflowWorkflow.ICreate"},"responseBody":{"description":"The newly created notification workflow entity","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows","method":"post","name":"create"},{"specification":"Creates a new notification workflow entry in the database. Validates all input fields including the workflow DAG structure, ensuring acyclic graphs without invalid edges. Validates templates for email and sms nodes using LiquidJS syntax and confirms delay node values. Stores workflow with initial versioning and timestamps. Only workflow managers and system administrators are authorized to perform this operation.","description":"Create a new notification workflow with validation ensuring that the entry node exists, all edges reference valid nodes, the workflow graph is acyclic, all templates are valid LiquidJS template strings, and delay nodes specify valid delays in milliseconds or durations.\n\nThe new workflow is initialized with version 1 and timestamps for creation and last update. This operation is restricted to authorized workflowManager and systemAdmin roles who manage the notification workflows.\n\nThe underlying database corresponds to the notification_workflow_workflows Prisma table and related workflow nodes and edges.","summary":"Create a new notification workflow","parameters":[],"requestBody":{"description":"Creation data for a new notification workflow","typeName":"INotificationWorkflowWorkflow.ICreate"},"responseBody":{"description":"The newly created notification workflow entity","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows","method":"post","name":"create"},{"specification":"Updates an existing notification workflow specified by its ID. Performs the same validations as creation, including DAG acyclicity, valid node and edge references, and template validation. Increments workflow version and updates the modification timestamp. Only authorized workflowManager and systemAdmin roles have permissions to update workflows.","description":"Update the properties and structure of an existing notification workflow by its ID. Validates the workflow graph structure, ensuring compliance with all domain rules and template syntax.\n\nThe workflow version number is incremented to track changes, and the updatedAt timestamp reflects the time of modification.\n\nPrevents unauthorized access by restricting roles to workflowManager and systemAdmin.\n\nUse this API to change workflow definitions safely while maintaining data integrity.\n\nThe underlying Prisma table is notification_workflow_workflows with relations to workflow nodes and edges.","summary":"Update an existing notification workflow by ID","parameters":[{"name":"workflowId","description":"Unique identifier of the notification workflow to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the notification workflow","typeName":"INotificationWorkflowWorkflow.IUpdate"},"responseBody":{"description":"The updated notification workflow entity","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}","method":"put","name":"update"},{"specification":"Updates an existing notification workflow specified by its ID. Performs the same validations as creation, including DAG acyclicity, valid node and edge references, and template validation. Increments workflow version and updates the modification timestamp. Only authorized workflowManager and systemAdmin roles have permissions to update workflows.","description":"Update the properties and structure of an existing notification workflow by its ID. Validates the workflow graph structure, ensuring compliance with all domain rules and template syntax.\n\nThe workflow version number is incremented to track changes, and the updatedAt timestamp reflects the time of modification.\n\nPrevents unauthorized access by restricting roles to workflowManager and systemAdmin.\n\nUse this API to change workflow definitions safely while maintaining data integrity.\n\nThe underlying Prisma table is notification_workflow_workflows with relations to workflow nodes and edges.","summary":"Update an existing notification workflow by ID","parameters":[{"name":"workflowId","description":"Unique identifier of the notification workflow to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the notification workflow","typeName":"INotificationWorkflowWorkflow.IUpdate"},"responseBody":{"description":"The updated notification workflow entity","typeName":"INotificationWorkflowWorkflow"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}","method":"put","name":"update"},{"specification":"This operation permanently deletes a notification workflow identified by its unique UUID. It operates on the notification_workflow_workflows table in the Prisma database. Before deletion, it verifies that no active triggers reference the workflow to avoid dangling dependencies. Deletion cascades to related workflow nodes, edges, and trigger instances due to ON DELETE CASCADE relations. This is a hard delete according to the schema, as no soft delete removal is specified for this endpoint. Authorization is limited to workflowManager and systemAdmin roles.","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}","method":"delete","summary":"Delete a notification workflow by its unique ID","description":"Deletes the specified notification workflow permanently from the system, including all associated nodes and edges due to cascading. Only authorized users with roles workflowManager or systemAdmin can execute this operation.\n\nIf the workflow is referenced by active triggers, deletion is prevented to maintain data integrity.\n\nThe operation requires the workflow UUID parameter in the path to identify the workflow to remove.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target workflow to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"workflowManager","name":"erase"},{"specification":"This operation permanently deletes a notification workflow identified by its unique UUID. It operates on the notification_workflow_workflows table in the Prisma database. Before deletion, it verifies that no active triggers reference the workflow to avoid dangling dependencies. Deletion cascades to related workflow nodes, edges, and trigger instances due to ON DELETE CASCADE relations. This is a hard delete according to the schema, as no soft delete removal is specified for this endpoint. Authorization is limited to workflowManager and systemAdmin roles.","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}","method":"delete","summary":"Delete a notification workflow by its unique ID","description":"Deletes the specified notification workflow permanently from the system, including all associated nodes and edges due to cascading. Only authorized users with roles workflowManager or systemAdmin can execute this operation.\n\nIf the workflow is referenced by active triggers, deletion is prevented to maintain data integrity.\n\nThe operation requires the workflow UUID parameter in the path to identify the workflow to remove.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target workflow to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"Retrieves a paginated list of workflow nodes belonging to the specified workflow. This operation queries the notification_workflow_workflow_nodes table filtering by workflowId. It supports filtering, sorting, and pagination parameters defined in INotificationWorkflowWorkflowNode.IRequest.\n\nAccess is restricted to users with workflowManager or systemAdmin roles as these nodes define critical workflow steps.","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowNodes","method":"patch","summary":"Search and retrieve workflow nodes for a given workflow","description":"Fetch a filtered, paginated list of workflow nodes for a given workflow ID for display or management.\n\nSecurity requires workflowManager or systemAdmin role.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"}],"requestBody":{"description":"Search and pagination parameters for workflow nodes filtering","typeName":"INotificationWorkflowWorkflowNode.IRequest"},"responseBody":{"description":"Paginated summary list of workflow nodes matching search criteria","typeName":"IPageINotificationWorkflowWorkflowNode.ISummary"},"authorizationType":null,"authorizationRole":"workflowManager","name":"index"},{"specification":"Retrieves a paginated list of workflow nodes belonging to the specified workflow. This operation queries the notification_workflow_workflow_nodes table filtering by workflowId. It supports filtering, sorting, and pagination parameters defined in INotificationWorkflowWorkflowNode.IRequest.\n\nAccess is restricted to users with workflowManager or systemAdmin roles as these nodes define critical workflow steps.","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowNodes","method":"patch","summary":"Search and retrieve workflow nodes for a given workflow","description":"Fetch a filtered, paginated list of workflow nodes for a given workflow ID for display or management.\n\nSecurity requires workflowManager or systemAdmin role.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"}],"requestBody":{"description":"Search and pagination parameters for workflow nodes filtering","typeName":"INotificationWorkflowWorkflowNode.IRequest"},"responseBody":{"description":"Paginated summary list of workflow nodes matching search criteria","typeName":"IPageINotificationWorkflowWorkflowNode.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"Retrieves detailed information for a single workflow node by its node ID within a specific workflow, from notification_workflow_workflow_nodes table. Both the workflowId and workflowNodeId UUIDs from the path parameters are required to locate the node and validate its association with the workflow.\n\nAuthorization is granted to users with workflowManager or systemAdmin roles to manage or review workflow node details securely.","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"get","summary":"Get detailed information of a workflow node","description":"Retrieve detailed properties of a specific workflow node within a workflow, including node type, templates, delay configuration, and timestamps.\n\nAuthorized roles: workflowManager, systemAdmin.\n\nReturns a detailed workflow node object.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"},{"name":"workflowNodeId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target workflow node"}],"requestBody":null,"responseBody":{"description":"Detailed workflow node information","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"workflowManager","name":"at"},{"specification":"Retrieves detailed information for a single workflow node by its node ID within a specific workflow, from notification_workflow_workflow_nodes table. Both the workflowId and workflowNodeId UUIDs from the path parameters are required to locate the node and validate its association with the workflow.\n\nAuthorization is granted to users with workflowManager or systemAdmin roles to manage or review workflow node details securely.","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"get","summary":"Get detailed information of a workflow node","description":"Retrieve detailed properties of a specific workflow node within a workflow, including node type, templates, delay configuration, and timestamps.\n\nAuthorized roles: workflowManager, systemAdmin.\n\nReturns a detailed workflow node object.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"},{"name":"workflowNodeId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target workflow node"}],"requestBody":null,"responseBody":{"description":"Detailed workflow node information","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"Creates a new notification workflow node under a specified workflow. The request body must specify node type (email, sms, delay), optional LiquidJS templates for email and sms, delay parameters, and timestamps. The operation ensures that the node is correctly linked to the parent workflow by workflowId from the path.\n\nOnly workflowManager and systemAdmin roles are authorized to create workflow nodes.\n\nReturns the detailed created node object after successful insertion.","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowNodes","method":"post","summary":"Create a new workflow node","description":"Create a new node in the notification workflow with provided node type and templates or delay parameters.\n\nAuthorization limited to workflowManager and systemAdmin roles.\n\nValidates templates and delay values as per business rules.\n\nReturns detailed information about the created node.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"}],"requestBody":{"description":"Information for creating a workflow node","typeName":"INotificationWorkflowWorkflowNode.ICreate"},"responseBody":{"description":"Created workflow node detailed information","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"workflowManager","name":"create"},{"specification":"Creates a new notification workflow node under a specified workflow. The request body must specify node type (email, sms, delay), optional LiquidJS templates for email and sms, delay parameters, and timestamps. The operation ensures that the node is correctly linked to the parent workflow by workflowId from the path.\n\nOnly workflowManager and systemAdmin roles are authorized to create workflow nodes.\n\nReturns the detailed created node object after successful insertion.","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowNodes","method":"post","summary":"Create a new workflow node","description":"Create a new node in the notification workflow with provided node type and templates or delay parameters.\n\nAuthorization limited to workflowManager and systemAdmin roles.\n\nValidates templates and delay values as per business rules.\n\nReturns detailed information about the created node.","parameters":[{"name":"workflowId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent workflow"}],"requestBody":{"description":"Information for creating a workflow node","typeName":"INotificationWorkflowWorkflowNode.ICreate"},"responseBody":{"description":"Created workflow node detailed information","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create"},{"specification":"This operation updates an existing Workflow Node in the Notification Workflow system. It operates on the notification_workflow_workflow_nodes table, allowing a workflowManager or systemAdmin to modify node properties such as templates for email or SMS content, delay settings, and node metadata. Validation must ensure the referenced workflow and node exist, and the updated templates and delay values conform to business rules.","description":"This API operation enables authorized users (workflowManager, systemAdmin) to update details of a specific Workflow Node within a given Workflow. The operation ensures that the targeted workflowNodeId belongs to the workflow identified by workflowId.\n\nUsers can update various node properties including nodeType, display name, LiquidJS templates for email (to, subject, body) and SMS (to, body), delay in milliseconds, and ISO8601 delay duration. The operation is critical for maintaining valid and effective notification workflows.\n\nSecurity considerations include authentication and authorization checks ensuring only permitted roles can perform updates. Validation rules require that email and SMS templates parse correctly as LiquidJS strings and delay values are reasonable. Integrity constraints require that the node remains correctly linked to its workflow and that no cycles or other DAG violations are introduced by edge changes outside this scope.\n\nThis operation relates closely to workflow CRUD operations and workflow edge management APIs that may be used in combination to fully modify the workflow structure.\n\nOn success, the updated Workflow Node entity is returned reflecting modifications.","summary":"Update a specific Workflow Node within a Workflow","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowNodeId","description":"Unique identifier of the workflow node to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the Workflow Node","typeName":"INotificationWorkflowWorkflowNode.IUpdate"},"responseBody":{"description":"Updated Workflow Node details","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"put","name":"updateWorkflowNode"},{"specification":"This operation updates an existing Workflow Node in the Notification Workflow system. It operates on the notification_workflow_workflow_nodes table, allowing a workflowManager or systemAdmin to modify node properties such as templates for email or SMS content, delay settings, and node metadata. Validation must ensure the referenced workflow and node exist, and the updated templates and delay values conform to business rules.","description":"This API operation enables authorized users (workflowManager, systemAdmin) to update details of a specific Workflow Node within a given Workflow. The operation ensures that the targeted workflowNodeId belongs to the workflow identified by workflowId.\n\nUsers can update various node properties including nodeType, display name, LiquidJS templates for email (to, subject, body) and SMS (to, body), delay in milliseconds, and ISO8601 delay duration. The operation is critical for maintaining valid and effective notification workflows.\n\nSecurity considerations include authentication and authorization checks ensuring only permitted roles can perform updates. Validation rules require that email and SMS templates parse correctly as LiquidJS strings and delay values are reasonable. Integrity constraints require that the node remains correctly linked to its workflow and that no cycles or other DAG violations are introduced by edge changes outside this scope.\n\nThis operation relates closely to workflow CRUD operations and workflow edge management APIs that may be used in combination to fully modify the workflow structure.\n\nOn success, the updated Workflow Node entity is returned reflecting modifications.","summary":"Update a specific Workflow Node within a Workflow","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowNodeId","description":"Unique identifier of the workflow node to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the Workflow Node","typeName":"INotificationWorkflowWorkflowNode.IUpdate"},"responseBody":{"description":"Updated Workflow Node details","typeName":"INotificationWorkflowWorkflowNode"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"put","name":"updateWorkflowNode"},{"specification":"This operation deletes a specified Workflow Node from the Notification Workflow system database. It targets the notification_workflow_workflow_nodes table and requires both workflowId and workflowNodeId parameters to identify the node to be removed from the workflow. The operation is available to roles workflowManager and systemAdmin, ensuring authorized control.\n\nDeletion removes the node permanently after verifying that no constraints prevent removal (such as active workflow triggers depending on the node). This operation performs a hard delete since the schema includes a soft delete column, but no mention of soft delete behavior is specified here, thus by default, deletion is hard.\n\nThis API is part of workflow structure management involving nodes and edges to maintain workflow integrity.","description":"Delete a Workflow Node by its ID within a specified Workflow. This operation requires validation that the node belongs to the workflow and that deletion does not violate integrity constraints like existing triggers.\n\nOnly authorized users with roles workflowManager or systemAdmin can perform deletion. Deletion permanently removes the node from the database and affects the workflow's structure.\n\nThis operation complements node creation and update endpoints, together enabling full lifecycle management of workflow nodes.","summary":"Delete a specific Workflow Node from a Workflow","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowNodeId","description":"Unique identifier of the workflow node to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"delete","name":"eraseWorkflowNode"},{"specification":"This operation deletes a specified Workflow Node from the Notification Workflow system database. It targets the notification_workflow_workflow_nodes table and requires both workflowId and workflowNodeId parameters to identify the node to be removed from the workflow. The operation is available to roles workflowManager and systemAdmin, ensuring authorized control.\n\nDeletion removes the node permanently after verifying that no constraints prevent removal (such as active workflow triggers depending on the node). This operation performs a hard delete since the schema includes a soft delete column, but no mention of soft delete behavior is specified here, thus by default, deletion is hard.\n\nThis API is part of workflow structure management involving nodes and edges to maintain workflow integrity.","description":"Delete a Workflow Node by its ID within a specified Workflow. This operation requires validation that the node belongs to the workflow and that deletion does not violate integrity constraints like existing triggers.\n\nOnly authorized users with roles workflowManager or systemAdmin can perform deletion. Deletion permanently removes the node from the database and affects the workflow's structure.\n\nThis operation complements node creation and update endpoints, together enabling full lifecycle management of workflow nodes.","summary":"Delete a specific Workflow Node from a Workflow","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowNodeId","description":"Unique identifier of the workflow node to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowNodes/{workflowNodeId}","method":"delete","name":"eraseWorkflowNode"},{"specification":"This operation retrieves a paginated list of Workflow Edges within a specific Workflow in the Notification Workflow system. It operates on the notification_workflow_workflow_edges table and allows searching, filtering, and sorting of edges that define the connections between workflow nodes, thereby outlining the workflow's Directed Acyclic Graph (DAG) structure.\n\nUsers with roles workflowManager or systemAdmin may perform this operation. The search criteria support complex filters to locate edges by attributes such as fromNodeId, toNodeId, and creation dates.\n\nThis API is integral in managing workflow structure by listing existing node connections and is commonly used in conjunction with node CRUD operations.","description":"Retrieve a paginated list of Workflow Edges belonging to the specified Workflow. This operation supports search and filtering via the request body parameters.\n\nOnly authorized users (workflowManager, systemAdmin) can access this endpoint.\n\nResponse includes paginated edges with details such as fromNodeId and toNodeId, enabling clients to render or manage the workflow DAG structure.\n\nThis operation complements workflow node and workflow CRUD APIs for comprehensive workflow management.","summary":"List workflow edges for a given workflow with filtering and pagination","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination criteria for Workflow Edges","typeName":"INotificationWorkflowWorkflowEdge.IRequest"},"responseBody":{"description":"Paginated list of Workflow Edges matching criteria","typeName":"IPageINotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowEdges","method":"patch","name":"indexWorkflowEdges"},{"specification":"This operation retrieves a paginated list of Workflow Edges within a specific Workflow in the Notification Workflow system. It operates on the notification_workflow_workflow_edges table and allows searching, filtering, and sorting of edges that define the connections between workflow nodes, thereby outlining the workflow's Directed Acyclic Graph (DAG) structure.\n\nUsers with roles workflowManager or systemAdmin may perform this operation. The search criteria support complex filters to locate edges by attributes such as fromNodeId, toNodeId, and creation dates.\n\nThis API is integral in managing workflow structure by listing existing node connections and is commonly used in conjunction with node CRUD operations.","description":"Retrieve a paginated list of Workflow Edges belonging to the specified Workflow. This operation supports search and filtering via the request body parameters.\n\nOnly authorized users (workflowManager, systemAdmin) can access this endpoint.\n\nResponse includes paginated edges with details such as fromNodeId and toNodeId, enabling clients to render or manage the workflow DAG structure.\n\nThis operation complements workflow node and workflow CRUD APIs for comprehensive workflow management.","summary":"List workflow edges for a given workflow with filtering and pagination","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination criteria for Workflow Edges","typeName":"INotificationWorkflowWorkflowEdge.IRequest"},"responseBody":{"description":"Paginated list of Workflow Edges matching criteria","typeName":"IPageINotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowEdges","method":"patch","name":"indexWorkflowEdges"},{"specification":"This operation retrieves detailed information of a specific Workflow Edge in the Notification Workflow system. It accesses the notification_workflow_workflow_edges table by workflowId and workflowEdgeId path parameters. This operation is available to roles workflowManager and systemAdmin and is essential for viewing the precise connection details between nodes in a workflow DAG.\n\nIn the response, users receive edge metadata including fromNodeId and toNodeId, creation and update timestamps. This information aids in audit, visualization, and workflow validation operations.\n\nThis API is often used alongside other workflow structure APIs managing nodes and edges for comprehensive workflow orchestration management.","description":"Get detailed information about a specific Workflow Edge within a Workflow by its IDs.\n\nAccess is restricted to roles workflowManager and systemAdmin.\n\nRetrieves edge details necessary for display and validation in workflow editors or audit trails.\n\nThis operation aids clients in understanding and manipulating the workflow structure at the edge level.","summary":"Retrieve detailed information of a Workflow Edge","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","description":"Unique identifier of the workflow edge","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Workflow Edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"workflowManager","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"get","name":"atWorkflowEdge"},{"specification":"This operation retrieves detailed information of a specific Workflow Edge in the Notification Workflow system. It accesses the notification_workflow_workflow_edges table by workflowId and workflowEdgeId path parameters. This operation is available to roles workflowManager and systemAdmin and is essential for viewing the precise connection details between nodes in a workflow DAG.\n\nIn the response, users receive edge metadata including fromNodeId and toNodeId, creation and update timestamps. This information aids in audit, visualization, and workflow validation operations.\n\nThis API is often used alongside other workflow structure APIs managing nodes and edges for comprehensive workflow orchestration management.","description":"Get detailed information about a specific Workflow Edge within a Workflow by its IDs.\n\nAccess is restricted to roles workflowManager and systemAdmin.\n\nRetrieves edge details necessary for display and validation in workflow editors or audit trails.\n\nThis operation aids clients in understanding and manipulating the workflow structure at the edge level.","summary":"Retrieve detailed information of a Workflow Edge","parameters":[{"name":"workflowId","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","description":"Unique identifier of the workflow edge","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed Workflow Edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"systemAdmin","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"get","name":"atWorkflowEdge"},{"specification":"This operation creates a new workflow edge under a specific workflow. It operates on the notification_workflow_workflow_edges table in the Prisma schema, which represents edges connecting nodes within workflows to form the Directed Acyclic Graph (DAG) structure. The API allows adding a connection between two existing nodes in a workflow, linking the 'from' node to the 'to' node. Validation includes verifying that both nodes exist in the specified workflow and that edges do not form cycles or self-loops as per business rules. The created record has created_at and updated_at timestamps and supports soft deletion via deleted_at timestamp.","description":"Create a new workflow edge linking two nodes within the specified workflow.\n\nSecurity considerations: This operation requires authorization and is typically performed by workflowManager or systemAdmin roles with permission to modify workflows.\n\nThe edge connects a source node ('from_node_id') to a target node ('to_node_id') within the same workflow, enforcing DAG integrity with no cycles.\n\nValidation ensures that both nodes belong to the workflow and the edge does not create cycles or self loops.\n\nThis operation relates to the notification_workflow_workflow_edges table, enforcing referential integrity with foreign keys and supporting audit timestamps.\n\nErrors return details if nodes are invalid or edge creation violates DAG constraints.\n\nRefer to related APIs for listing edges, updating edges, or deleting edges for full lifecycle management.","summary":"Create workflow edge connecting two nodes","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a workflow edge including from_node_id and to_node_id","typeName":"INotificationWorkflowWorkflowEdge.ICreate"},"responseBody":{"description":"Newly created workflow edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"workflowManager","name":"createEdge","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowEdges","method":"post"},{"specification":"This operation creates a new workflow edge under a specific workflow. It operates on the notification_workflow_workflow_edges table in the Prisma schema, which represents edges connecting nodes within workflows to form the Directed Acyclic Graph (DAG) structure. The API allows adding a connection between two existing nodes in a workflow, linking the 'from' node to the 'to' node. Validation includes verifying that both nodes exist in the specified workflow and that edges do not form cycles or self-loops as per business rules. The created record has created_at and updated_at timestamps and supports soft deletion via deleted_at timestamp.","description":"Create a new workflow edge linking two nodes within the specified workflow.\n\nSecurity considerations: This operation requires authorization and is typically performed by workflowManager or systemAdmin roles with permission to modify workflows.\n\nThe edge connects a source node ('from_node_id') to a target node ('to_node_id') within the same workflow, enforcing DAG integrity with no cycles.\n\nValidation ensures that both nodes belong to the workflow and the edge does not create cycles or self loops.\n\nThis operation relates to the notification_workflow_workflow_edges table, enforcing referential integrity with foreign keys and supporting audit timestamps.\n\nErrors return details if nodes are invalid or edge creation violates DAG constraints.\n\nRefer to related APIs for listing edges, updating edges, or deleting edges for full lifecycle management.","summary":"Create workflow edge connecting two nodes","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a workflow edge including from_node_id and to_node_id","typeName":"INotificationWorkflowWorkflowEdge.ICreate"},"responseBody":{"description":"Newly created workflow edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"createEdge","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowEdges","method":"post"},{"specification":"This operation updates the properties of an existing workflow edge identified by workflowEdgeId in the specified workflow. It operates on notification_workflow_workflow_edges table. It allows modification of connections between nodes, including changing the 'from' or 'to' node references. The operation enforces validation to prevent cycles and maintain DAG structure. Updated timestamp is refreshed accordingly. Soft deletion fields remain unaffected.\n\nAccess restricted to roles allowed to update workflow definitions.\n\nRelated operations include edge creation and deletion to manage the workflow graph.","description":"Update an existing workflow edge's from_node_id or to_node_id to modify the DAG structure within the workflow.\n\nSecurity ensures only authorized users with workflow edit permissions can perform this.\n\nValidation checks confirm no cycle or self-loop generation.\n\nThis operation updates the notification_workflow_workflow_edges record and refreshes updated_at timestamp.\n\nErrors include invalid node references or conflict with DAG constraints.","summary":"Update workflow edge connecting nodes","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","in":"path","description":"Unique identifier of the workflow edge to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating workflow edge including from_node_id and to_node_id","typeName":"INotificationWorkflowWorkflowEdge.IUpdate"},"responseBody":{"description":"Updated workflow edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"workflowManager","name":"updateEdge","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"put"},{"specification":"This operation updates the properties of an existing workflow edge identified by workflowEdgeId in the specified workflow. It operates on notification_workflow_workflow_edges table. It allows modification of connections between nodes, including changing the 'from' or 'to' node references. The operation enforces validation to prevent cycles and maintain DAG structure. Updated timestamp is refreshed accordingly. Soft deletion fields remain unaffected.\n\nAccess restricted to roles allowed to update workflow definitions.\n\nRelated operations include edge creation and deletion to manage the workflow graph.","description":"Update an existing workflow edge's from_node_id or to_node_id to modify the DAG structure within the workflow.\n\nSecurity ensures only authorized users with workflow edit permissions can perform this.\n\nValidation checks confirm no cycle or self-loop generation.\n\nThis operation updates the notification_workflow_workflow_edges record and refreshes updated_at timestamp.\n\nErrors include invalid node references or conflict with DAG constraints.","summary":"Update workflow edge connecting nodes","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","in":"path","description":"Unique identifier of the workflow edge to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating workflow edge including from_node_id and to_node_id","typeName":"INotificationWorkflowWorkflowEdge.IUpdate"},"responseBody":{"description":"Updated workflow edge information","typeName":"INotificationWorkflowWorkflowEdge"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"updateEdge","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"put"},{"specification":"This operation deletes an existing workflow edge permanently from the database. It targets notification_workflow_workflow_edges table using workflowEdgeId and workflowId path parameters. Deletion removes the edge link between nodes in a workflow DAG. No soft delete flag is mentioned, so this is a hard delete operation. Access is limited to users with workflow edit rights.\n\nRelated operations include creating and updating workflow edges for managing workflow structures.","description":"Delete a workflow edge identified by workflowEdgeId in the specified workflow.\n\nThis operation permanently removes the edge record.\n\nSecurity restrictions limit this to workflow managers and system administrators.\n\nDeletes are allowed only if business rules permit removing edges without violating DAG integrity.\n\nErrors may occur if edge not found or deletion conflicts with workflow constraints.","summary":"Delete workflow edge from workflow","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","in":"path","description":"Unique identifier of the workflow edge to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"workflowManager","name":"eraseEdge","path":"/notificationWorkflow/workflowManager/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"delete"},{"specification":"This operation deletes an existing workflow edge permanently from the database. It targets notification_workflow_workflow_edges table using workflowEdgeId and workflowId path parameters. Deletion removes the edge link between nodes in a workflow DAG. No soft delete flag is mentioned, so this is a hard delete operation. Access is limited to users with workflow edit rights.\n\nRelated operations include creating and updating workflow edges for managing workflow structures.","description":"Delete a workflow edge identified by workflowEdgeId in the specified workflow.\n\nThis operation permanently removes the edge record.\n\nSecurity restrictions limit this to workflow managers and system administrators.\n\nDeletes are allowed only if business rules permit removing edges without violating DAG integrity.\n\nErrors may occur if edge not found or deletion conflicts with workflow constraints.","summary":"Delete workflow edge from workflow","parameters":[{"name":"workflowId","in":"path","description":"Unique identifier of the target workflow","schema":{"type":"string","format":"uuid"}},{"name":"workflowEdgeId","in":"path","description":"Unique identifier of the workflow edge to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"eraseEdge","path":"/notificationWorkflow/systemAdmin/workflows/{workflowId}/workflowEdges/{workflowEdgeId}","method":"delete"},{"specification":"This operation retrieves a paginated list of trigger instances with filtering, sorting, and pagination options to manage and monitor workflow trigger executions. It operates on the notification_workflow_trigger_instances table in the Prisma schema. Users can query the status, cursor positions, attempts, and availability of triggers with an input request body specifying search criteria.\n\nAuthorized users include trigger operators and system administrators who monitor trigger lifecycle status.\n\nThis operation supports business needs to track trigger executions, retry attempts, progress, and failures for workflow management.","description":"Retrieve a filtered, sorted, and paginated list of trigger instances.\n\nAllows trigger operators and system administrators to query the lifecycle state, idempotency keys, cursor position, and status of triggers.\n\nSupports pagination, filtering by workflow, status, and availability timestamps.\n\nThe response provides detailed summary information for each trigger instance matching criteria.\n\nRelated APIs include trigger creation, updating trigger statuses and logs.","summary":"List and search trigger instances with filters and pagination","parameters":[],"requestBody":{"description":"Filter, sort, and pagination options for trigger instances","typeName":"INotificationWorkflowTriggerInstance.IRequest"},"responseBody":{"description":"Paginated list of trigger instance summaries","typeName":"IPageINotificationWorkflowTriggerInstance.ISummary"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"searchTriggerInstances","path":"/notificationWorkflow/triggerOperator/triggerInstances","method":"patch"},{"specification":"This operation retrieves a paginated list of trigger instances with filtering, sorting, and pagination options to manage and monitor workflow trigger executions. It operates on the notification_workflow_trigger_instances table in the Prisma schema. Users can query the status, cursor positions, attempts, and availability of triggers with an input request body specifying search criteria.\n\nAuthorized users include trigger operators and system administrators who monitor trigger lifecycle status.\n\nThis operation supports business needs to track trigger executions, retry attempts, progress, and failures for workflow management.","description":"Retrieve a filtered, sorted, and paginated list of trigger instances.\n\nAllows trigger operators and system administrators to query the lifecycle state, idempotency keys, cursor position, and status of triggers.\n\nSupports pagination, filtering by workflow, status, and availability timestamps.\n\nThe response provides detailed summary information for each trigger instance matching criteria.\n\nRelated APIs include trigger creation, updating trigger statuses and logs.","summary":"List and search trigger instances with filters and pagination","parameters":[],"requestBody":{"description":"Filter, sort, and pagination options for trigger instances","typeName":"INotificationWorkflowTriggerInstance.IRequest"},"responseBody":{"description":"Paginated list of trigger instance summaries","typeName":"IPageINotificationWorkflowTriggerInstance.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"searchTriggerInstances","path":"/notificationWorkflow/systemAdmin/triggerInstances","method":"patch"},{"specification":"This operation retrieves detailed information of a specific TriggerInstance stored in the notification_workflow_trigger_instances table. It is designed to fetch the complete data about a particular trigger instance using its unique UUID identifier. The data includes identifiers, trigger status, current execution cursor, retry attempts, availability timing, and associated payload, along with creation and update timestamps. This API is essential for clients to monitor the state and details of a trigger instance, aiding in execution visibility and debugging.","description":"Retrieve a specific TriggerInstance by its unique identifier from the database. This allows users or systems to obtain all available information including current status, cursor position, retry attempts, and payload data.\n\nSecurity is enforced by requiring authorized roles who have permission to view trigger instance data.\n\nThe operation accesses the notification_workflow_trigger_instances table, ensuring the returned data reflects the current state including workflow association and execution readiness.\n\nThis API operation provides a critical read-only function supporting trigger monitoring, reporting, and troubleshooting without allowing any modification of data.","summary":"Get detailed information of a specific TriggerInstance by ID","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed TriggerInstance data","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"at","path":"/notificationWorkflow/triggerOperator/triggerInstances/{triggerInstanceId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific TriggerInstance stored in the notification_workflow_trigger_instances table. It is designed to fetch the complete data about a particular trigger instance using its unique UUID identifier. The data includes identifiers, trigger status, current execution cursor, retry attempts, availability timing, and associated payload, along with creation and update timestamps. This API is essential for clients to monitor the state and details of a trigger instance, aiding in execution visibility and debugging.","description":"Retrieve a specific TriggerInstance by its unique identifier from the database. This allows users or systems to obtain all available information including current status, cursor position, retry attempts, and payload data.\n\nSecurity is enforced by requiring authorized roles who have permission to view trigger instance data.\n\nThe operation accesses the notification_workflow_trigger_instances table, ensuring the returned data reflects the current state including workflow association and execution readiness.\n\nThis API operation provides a critical read-only function supporting trigger monitoring, reporting, and troubleshooting without allowing any modification of data.","summary":"Get detailed information of a specific TriggerInstance by ID","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed TriggerInstance data","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/triggerInstances/{triggerInstanceId}","method":"get"},{"specification":"This operation creates a new TriggerInstance for a given workflow in the notification_workflow_trigger_instances table. It enforces idempotency by requiring a unique idempotencyKey per workflow. The creation input includes workflowId, idempotencyKey, and payload. On successful creation, a new TriggerInstance is initialized with status 'enqueued', cursor set to the workflow's entryNodeId, attempts at zero, availability timestamp set to current time and stores the input payload.\n\nIf a TriggerInstance with the same workflowId and idempotencyKey already exists, the system will return the existing instance instead of creating a duplicate.\n\nThis operation is designed for trigger operators and system administrators authorized to initiate workflow executions. It is essential to ensure no duplicate triggers are created and to preserve data integrity for concurrent trigger requests.","description":"Create a new TriggerInstance for triggering a notification workflow. This creation enforces idempotency on the combination of workflowId and idempotencyKey. The operation initializes the trigger instance with appropriate defaults to ensure proper processing lifecycle management by workers.\n\nSecurity is restricted to roles authorized to initiate workflow triggers.\n\nThe function interacts directly with the notification_workflow_trigger_instances table.\n\nUpon creation, the trigger is set to 'enqueued' status with cursor pointing to the workflow's entryNodeId, zero attempts, and availability set to current time.\n\nIf a duplicate request is detected, the existing trigger instance is returned to prevent redundancy.","summary":"Create a new TriggerInstance with idempotency enforcement","parameters":[],"requestBody":{"description":"Information required to create a TriggerInstance","typeName":"INotificationWorkflowTriggerInstance.ICreate"},"responseBody":{"description":"The created or existing TriggerInstance detail","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"create","path":"/notificationWorkflow/triggerOperator/triggerInstances","method":"post"},{"specification":"This operation creates a new TriggerInstance for a given workflow in the notification_workflow_trigger_instances table. It enforces idempotency by requiring a unique idempotencyKey per workflow. The creation input includes workflowId, idempotencyKey, and payload. On successful creation, a new TriggerInstance is initialized with status 'enqueued', cursor set to the workflow's entryNodeId, attempts at zero, availability timestamp set to current time and stores the input payload.\n\nIf a TriggerInstance with the same workflowId and idempotencyKey already exists, the system will return the existing instance instead of creating a duplicate.\n\nThis operation is designed for trigger operators and system administrators authorized to initiate workflow executions. It is essential to ensure no duplicate triggers are created and to preserve data integrity for concurrent trigger requests.","description":"Create a new TriggerInstance for triggering a notification workflow. This creation enforces idempotency on the combination of workflowId and idempotencyKey. The operation initializes the trigger instance with appropriate defaults to ensure proper processing lifecycle management by workers.\n\nSecurity is restricted to roles authorized to initiate workflow triggers.\n\nThe function interacts directly with the notification_workflow_trigger_instances table.\n\nUpon creation, the trigger is set to 'enqueued' status with cursor pointing to the workflow's entryNodeId, zero attempts, and availability set to current time.\n\nIf a duplicate request is detected, the existing trigger instance is returned to prevent redundancy.","summary":"Create a new TriggerInstance with idempotency enforcement","parameters":[],"requestBody":{"description":"Information required to create a TriggerInstance","typeName":"INotificationWorkflowTriggerInstance.ICreate"},"responseBody":{"description":"The created or existing TriggerInstance detail","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create","path":"/notificationWorkflow/systemAdmin/triggerInstances","method":"post"},{"specification":"This operation updates an existing TriggerInstance identified by its UUID in the notification_workflow_trigger_instances table. It accepts data to modify the status, cursor position, attempts, availability, and payload. The operation supports managing the lifecycle of a trigger instance including retry counts and scheduling availability timestamps.\n\nUser authentication restricts access to authorized trigger operators and system administrators.\n\nThis API aids in advanced trigger management scenarios such as manual status corrections or availability adjustments for retry backoff or failure situations.","description":"Update specified fields of a TriggerInstance including status, cursor, attempts, availability timing, and payload data. This enables refined control over the trigger execution lifecycle.\n\nAccess is restricted to authorized users with roles for trigger operation management.\n\nThe trigger instance identified by the path parameter is updated atomically ensuring data consistency.\n\nThis operation directly modifies rows in the notification_workflow_trigger_instances database table.","summary":"Update an existing TriggerInstance by ID","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed to update in TriggerInstance","typeName":"INotificationWorkflowTriggerInstance.IUpdate"},"responseBody":{"description":"The updated TriggerInstance details","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"update","path":"/notificationWorkflow/triggerOperator/triggerInstances/{triggerInstanceId}","method":"put"},{"specification":"This operation updates an existing TriggerInstance identified by its UUID in the notification_workflow_trigger_instances table. It accepts data to modify the status, cursor position, attempts, availability, and payload. The operation supports managing the lifecycle of a trigger instance including retry counts and scheduling availability timestamps.\n\nUser authentication restricts access to authorized trigger operators and system administrators.\n\nThis API aids in advanced trigger management scenarios such as manual status corrections or availability adjustments for retry backoff or failure situations.","description":"Update specified fields of a TriggerInstance including status, cursor, attempts, availability timing, and payload data. This enables refined control over the trigger execution lifecycle.\n\nAccess is restricted to authorized users with roles for trigger operation management.\n\nThe trigger instance identified by the path parameter is updated atomically ensuring data consistency.\n\nThis operation directly modifies rows in the notification_workflow_trigger_instances database table.","summary":"Update an existing TriggerInstance by ID","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields allowed to update in TriggerInstance","typeName":"INotificationWorkflowTriggerInstance.IUpdate"},"responseBody":{"description":"The updated TriggerInstance details","typeName":"INotificationWorkflowTriggerInstance"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update","path":"/notificationWorkflow/systemAdmin/triggerInstances/{triggerInstanceId}","method":"put"},{"specification":"This operation deletes a TriggerInstance identified by its UUID from the notification_workflow_trigger_instances table. Since the schema does not explicitly include soft-delete columns, this operation performs a hard delete removing the record permanently.\n\nAccess is restricted to authorized roles for security and data integrity.\n\nDeletion affects all processing of the trigger instance hence should be used with caution especially regarding workflows currently running or relying on the trigger instance state.\n\nThe operation does not return a response body, indicating completion of deletion.\n\nThis is a critical cleanup operation for expired or invalid trigger instances.","description":"Permanently delete a TriggerInstance from the database by its unique identifier.\n\nSecurity is enforced restricting access to authorized roles.\n\nExecution is irreversible and removes all associated trigger instance data.\n\nThe operation acts directly on the notification_workflow_trigger_instances table to remove the record from the system.","summary":"Delete a TriggerInstance by ID permanently","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"triggerOperator","name":"erase","path":"/notificationWorkflow/triggerOperator/triggerInstances/{triggerInstanceId}","method":"delete"},{"specification":"This operation deletes a TriggerInstance identified by its UUID from the notification_workflow_trigger_instances table. Since the schema does not explicitly include soft-delete columns, this operation performs a hard delete removing the record permanently.\n\nAccess is restricted to authorized roles for security and data integrity.\n\nDeletion affects all processing of the trigger instance hence should be used with caution especially regarding workflows currently running or relying on the trigger instance state.\n\nThe operation does not return a response body, indicating completion of deletion.\n\nThis is a critical cleanup operation for expired or invalid trigger instances.","description":"Permanently delete a TriggerInstance from the database by its unique identifier.\n\nSecurity is enforced restricting access to authorized roles.\n\nExecution is irreversible and removes all associated trigger instance data.\n\nThe operation acts directly on the notification_workflow_trigger_instances table to remove the record from the system.","summary":"Delete a TriggerInstance by ID permanently","parameters":[{"name":"triggerInstanceId","description":"Unique identifier of the target trigger instance to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase","path":"/notificationWorkflow/systemAdmin/triggerInstances/{triggerInstanceId}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of step execution logs corresponding to workflow execution steps. It operates on the notification_workflow_step_execution_logs table from the Prisma schema. The API supports advanced search criteria and pagination to allow users, such as workflowManagers, triggerOperators, or systemAdmins, to effectively browse through detailed step execution history. This includes filtering by workflow ID, trigger ID, node ID, success status, and timestamps. The operation facilitates auditing and troubleshooting by exposing the relevant logs matching user-defined search parameters.","description":"Retrieve a paginated and filtered list of workflow step execution logs from the Notification Workflow system. This operation provides comprehensive search and pagination capabilities allowing users to query logs by various criteria including workflow, trigger instance, and node IDs, as well as success status and execution window timeframes.\n\nThe step execution logs represent immutable records of each node execution attempt and are critical for auditing, debugging, and performance monitoring. Access to this operation is typically granted to workflowManagers, triggerOperators, and systemAdmins who require detailed visibility into workflow executions.\n\nSecurity measures include role-based access control ensuring only authorized roles can access sensitive execution data. The returned paginated response includes summary details optimized for performance and user interface rendering.\n\nThis operation directly corresponds to the notification_workflow_step_execution_logs table as specified in the Prisma schema. It supports efficient search by indexed fields and includes pagination metadata for client-side consumption.","summary":"Search and retrieve a paginated list of step execution logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for step execution log filtering","typeName":"INotificationWorkflowStepExecutionLog.IRequest"},"responseBody":{"description":"Paginated list of step execution log summaries matching criteria","typeName":"IPageINotificationWorkflowStepExecutionLog.ISummary"},"authorizationType":null,"authorizationRole":"workflowManager","name":"index","path":"/notificationWorkflow/workflowManager/stepExecutionLogs","method":"patch"},{"specification":"This operation retrieves a filtered and paginated list of step execution logs corresponding to workflow execution steps. It operates on the notification_workflow_step_execution_logs table from the Prisma schema. The API supports advanced search criteria and pagination to allow users, such as workflowManagers, triggerOperators, or systemAdmins, to effectively browse through detailed step execution history. This includes filtering by workflow ID, trigger ID, node ID, success status, and timestamps. The operation facilitates auditing and troubleshooting by exposing the relevant logs matching user-defined search parameters.","description":"Retrieve a paginated and filtered list of workflow step execution logs from the Notification Workflow system. This operation provides comprehensive search and pagination capabilities allowing users to query logs by various criteria including workflow, trigger instance, and node IDs, as well as success status and execution window timeframes.\n\nThe step execution logs represent immutable records of each node execution attempt and are critical for auditing, debugging, and performance monitoring. Access to this operation is typically granted to workflowManagers, triggerOperators, and systemAdmins who require detailed visibility into workflow executions.\n\nSecurity measures include role-based access control ensuring only authorized roles can access sensitive execution data. The returned paginated response includes summary details optimized for performance and user interface rendering.\n\nThis operation directly corresponds to the notification_workflow_step_execution_logs table as specified in the Prisma schema. It supports efficient search by indexed fields and includes pagination metadata for client-side consumption.","summary":"Search and retrieve a paginated list of step execution logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for step execution log filtering","typeName":"INotificationWorkflowStepExecutionLog.IRequest"},"responseBody":{"description":"Paginated list of step execution log summaries matching criteria","typeName":"IPageINotificationWorkflowStepExecutionLog.ISummary"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"index","path":"/notificationWorkflow/triggerOperator/stepExecutionLogs","method":"patch"},{"specification":"This operation retrieves a filtered and paginated list of step execution logs corresponding to workflow execution steps. It operates on the notification_workflow_step_execution_logs table from the Prisma schema. The API supports advanced search criteria and pagination to allow users, such as workflowManagers, triggerOperators, or systemAdmins, to effectively browse through detailed step execution history. This includes filtering by workflow ID, trigger ID, node ID, success status, and timestamps. The operation facilitates auditing and troubleshooting by exposing the relevant logs matching user-defined search parameters.","description":"Retrieve a paginated and filtered list of workflow step execution logs from the Notification Workflow system. This operation provides comprehensive search and pagination capabilities allowing users to query logs by various criteria including workflow, trigger instance, and node IDs, as well as success status and execution window timeframes.\n\nThe step execution logs represent immutable records of each node execution attempt and are critical for auditing, debugging, and performance monitoring. Access to this operation is typically granted to workflowManagers, triggerOperators, and systemAdmins who require detailed visibility into workflow executions.\n\nSecurity measures include role-based access control ensuring only authorized roles can access sensitive execution data. The returned paginated response includes summary details optimized for performance and user interface rendering.\n\nThis operation directly corresponds to the notification_workflow_step_execution_logs table as specified in the Prisma schema. It supports efficient search by indexed fields and includes pagination metadata for client-side consumption.","summary":"Search and retrieve a paginated list of step execution logs","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for step execution log filtering","typeName":"INotificationWorkflowStepExecutionLog.IRequest"},"responseBody":{"description":"Paginated list of step execution log summaries matching criteria","typeName":"IPageINotificationWorkflowStepExecutionLog.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/notificationWorkflow/systemAdmin/stepExecutionLogs","method":"patch"},{"specification":"This operation retrieves detailed information about a specific step execution log identified by its unique ID in the notification_workflow_step_execution_logs table. It returns all fields related to the execution step including timing, input/output context, success flag, message IDs for email or SMS, and error messages if any. This enables users such as workflowManagers, triggerOperators, or systemAdmins to inspect detailed records for troubleshooting or auditing.","description":"Retrieve detailed information about a specific step execution log by its unique identifier. The log includes crucial execution details such as start and finish timestamps, input and output execution contexts, success status, and any associated message IDs or error messages.\n\nThis single-record retrieval enables detailed auditing and debugging for individual workflow steps within the Notification Workflow system.\n\nRole-based access control ensures that only authorized roles like workflowManagers, triggerOperators, and systemAdmins can view sensitive log data.\n\nThe operation corresponds with the notification_workflow_step_execution_logs table defined in the Prisma schema.","summary":"Retrieve step execution log details by ID","parameters":[{"name":"id","description":"Unique identifier of the step execution log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Step execution log details","typeName":"INotificationWorkflowStepExecutionLog"},"authorizationType":null,"authorizationRole":"workflowManager","name":"at","path":"/notificationWorkflow/workflowManager/stepExecutionLogs/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a specific step execution log identified by its unique ID in the notification_workflow_step_execution_logs table. It returns all fields related to the execution step including timing, input/output context, success flag, message IDs for email or SMS, and error messages if any. This enables users such as workflowManagers, triggerOperators, or systemAdmins to inspect detailed records for troubleshooting or auditing.","description":"Retrieve detailed information about a specific step execution log by its unique identifier. The log includes crucial execution details such as start and finish timestamps, input and output execution contexts, success status, and any associated message IDs or error messages.\n\nThis single-record retrieval enables detailed auditing and debugging for individual workflow steps within the Notification Workflow system.\n\nRole-based access control ensures that only authorized roles like workflowManagers, triggerOperators, and systemAdmins can view sensitive log data.\n\nThe operation corresponds with the notification_workflow_step_execution_logs table defined in the Prisma schema.","summary":"Retrieve step execution log details by ID","parameters":[{"name":"id","description":"Unique identifier of the step execution log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Step execution log details","typeName":"INotificationWorkflowStepExecutionLog"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"at","path":"/notificationWorkflow/triggerOperator/stepExecutionLogs/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a specific step execution log identified by its unique ID in the notification_workflow_step_execution_logs table. It returns all fields related to the execution step including timing, input/output context, success flag, message IDs for email or SMS, and error messages if any. This enables users such as workflowManagers, triggerOperators, or systemAdmins to inspect detailed records for troubleshooting or auditing.","description":"Retrieve detailed information about a specific step execution log by its unique identifier. The log includes crucial execution details such as start and finish timestamps, input and output execution contexts, success status, and any associated message IDs or error messages.\n\nThis single-record retrieval enables detailed auditing and debugging for individual workflow steps within the Notification Workflow system.\n\nRole-based access control ensures that only authorized roles like workflowManagers, triggerOperators, and systemAdmins can view sensitive log data.\n\nThe operation corresponds with the notification_workflow_step_execution_logs table defined in the Prisma schema.","summary":"Retrieve step execution log details by ID","parameters":[{"name":"id","description":"Unique identifier of the step execution log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Step execution log details","typeName":"INotificationWorkflowStepExecutionLog"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/stepExecutionLogs/{id}","method":"get"},{"specification":"This operation retrieves a filtered and paginated list of reusable notification node templates from the notification_workflow_node_templates table. Node templates include Email, SMS, and Delay template types identifiable by unique codes. The operation supports searching and filtering by template type and code, aiding users such as workflowManagers and systemAdmins in managing available notification templates for constructing workflows.","description":"Retrieve a paginated and searchable list of notification node templates. These templates represent reusable content components such as email, SMS, and delay templates used in constructing notification workflows.\n\nThe operation supports filtering by template type and code, facilitating efficient management and selection of appropriate templates for workflow nodes.\n\nRole-based access control restricts access to authorized users including workflowManagers and systemAdmins.\n\nThis operation operates on the notification_workflow_node_templates table as defined in the Prisma schema. The response includes summary information suitable for listing templates in UI components.","summary":"Search and list notification node templates with filtering and pagination","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for node template listing","typeName":"INotificationWorkflowNodeTemplate.IRequest"},"responseBody":{"description":"Paginated list of node template summaries","typeName":"IPageINotificationWorkflowNodeTemplate.ISummary"},"authorizationType":null,"authorizationRole":"workflowManager","name":"index","path":"/notificationWorkflow/workflowManager/nodeTemplates","method":"patch"},{"specification":"This operation retrieves a filtered and paginated list of reusable notification node templates from the notification_workflow_node_templates table. Node templates include Email, SMS, and Delay template types identifiable by unique codes. The operation supports searching and filtering by template type and code, aiding users such as workflowManagers and systemAdmins in managing available notification templates for constructing workflows.","description":"Retrieve a paginated and searchable list of notification node templates. These templates represent reusable content components such as email, SMS, and delay templates used in constructing notification workflows.\n\nThe operation supports filtering by template type and code, facilitating efficient management and selection of appropriate templates for workflow nodes.\n\nRole-based access control restricts access to authorized users including workflowManagers and systemAdmins.\n\nThis operation operates on the notification_workflow_node_templates table as defined in the Prisma schema. The response includes summary information suitable for listing templates in UI components.","summary":"Search and list notification node templates with filtering and pagination","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for node template listing","typeName":"INotificationWorkflowNodeTemplate.IRequest"},"responseBody":{"description":"Paginated list of node template summaries","typeName":"IPageINotificationWorkflowNodeTemplate.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/notificationWorkflow/systemAdmin/nodeTemplates","method":"patch"},{"specification":"This operation retrieves detailed information of a single notification node template by its unique identifier from the notification_workflow_node_templates table. It provides all fields including node template code, type (email, sms, delay), and full template body content. Users such as workflowManagers and systemAdmins can use this detailed data to view or edit node template configurations.","description":"Retrieve full details of a specific notification node template identified by nodeTemplateId.\n\nThis operation returns all relevant fields including code, type, name, and LiquidJS template body, enabling detailed inspection and editing.\n\nRole-based access ensures only authorized workflowManagers and systemAdmins can access detailed template information.\n\nThe underlying database table for this operation is notification_workflow_node_templates as per Prisma schema.","summary":"Retrieve notification node template details by ID","parameters":[{"name":"nodeTemplateId","description":"Unique identifier of the node template","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification node template details","typeName":"INotificationWorkflowNodeTemplate"},"authorizationType":null,"authorizationRole":"workflowManager","name":"at","path":"/notificationWorkflow/workflowManager/nodeTemplates/{nodeTemplateId}","method":"get"},{"specification":"This operation retrieves detailed information of a single notification node template by its unique identifier from the notification_workflow_node_templates table. It provides all fields including node template code, type (email, sms, delay), and full template body content. Users such as workflowManagers and systemAdmins can use this detailed data to view or edit node template configurations.","description":"Retrieve full details of a specific notification node template identified by nodeTemplateId.\n\nThis operation returns all relevant fields including code, type, name, and LiquidJS template body, enabling detailed inspection and editing.\n\nRole-based access ensures only authorized workflowManagers and systemAdmins can access detailed template information.\n\nThe underlying database table for this operation is notification_workflow_node_templates as per Prisma schema.","summary":"Retrieve notification node template details by ID","parameters":[{"name":"nodeTemplateId","description":"Unique identifier of the node template","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Notification node template details","typeName":"INotificationWorkflowNodeTemplate"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/notificationWorkflow/systemAdmin/nodeTemplates/{nodeTemplateId}","method":"get"},{"specification":"This operation creates a new node template in the notification workflow system. It handles the creation of notification node templates that specify email, SMS, or delay notification content using LiquidJS templates. The node template is identified by a unique auto-generated UUID (not provided by the client). Clients provide node type, name, code, and the template body text. This is used to standardize notification message formats reused across workflows. The primary database table involved is notification_workflow_node_templates. Business logic includes ensuring unique code for each template, proper content for the type of node, and capturing creation timestamps. The operation is accessible to system administrators for managing notification content templates.","path":"/notificationWorkflow/systemAdmin/nodeTemplates","method":"post","summary":"Create a notification workflow node template","description":"Create a new notification workflow node template.  \n\nThis API allows system administrators to add a reusable node template for notification workflows. Node templates contain LiquidJS template strings defining content for Email, SMS, or Delay nodes. The request validates that the provided code is unique within the system and that the template body fits the node type. On success, the new node template is stored with timestamps.\n\nAuthorization requires the systemAdmin role. \n\nThis operation interacts exclusively with the notification_workflow_node_templates table.\n\nNo direct relationship with other endpoints, but these templates are referenced when creating workflow nodes.","parameters":[],"requestBody":{"description":"Information required to create a new node template","typeName":"INotificationWorkflowNodeTemplate.ICreate"},"responseBody":{"description":"Created node template information","typeName":"INotificationWorkflowNodeTemplate"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"create"},{"specification":"This operation updates an existing notification workflow node template by its unique identifier. The client provides the nodeTemplateId path parameter and updates fields like name, code, type, and template body. The underlying Prisma DB table is notification_workflow_node_templates. Validation includes verifying the existence of the target template, ensuring code uniqueness, and validating the template body content. This operation is restricted to system administrators due to its potential system impact on notification content consistency.","path":"/notificationWorkflow/systemAdmin/nodeTemplates/{nodeTemplateId}","method":"put","summary":"Update a notification workflow node template by ID","description":"Update an existing notification workflow node template identified by nodeTemplateId.  \n\nSystem administrators can modify the properties of node templates used in notification workflows to correct or improve notification content. The update operation validates the existence of the targeted template and the correctness of the provided data. \n\nAll relevant fields, including name, code, type, and template body, can be updated.  \n\nRole based access control applies, restricting to systemAdmin only.\n\nThis operation updates the notification_workflow_node_templates record and maintains auditability via updated_at timestamp.\n\nNo dependent operations need to be pre-executed but changes may affect workflow executions referencing this node template.","parameters":[{"name":"nodeTemplateId","in":"path","description":"Unique identifier of the node template to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the node template","typeName":"INotificationWorkflowNodeTemplate.IUpdate"},"responseBody":{"description":"Updated node template information","typeName":"INotificationWorkflowNodeTemplate"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"update"},{"specification":"This operation deletes a notification workflow node template identified by nodeTemplateId. It permanently removes the template from the database if no longer needed. Since the notification_workflow_node_templates table does not include soft delete columns, this operation performs a hard delete. The deletion is restricted to system administrators to prevent accidental content loss. No request body is needed. No response body is returned as the operation returns no content. Validation includes ensuring the nodeTemplateId exists before deletion.","path":"/notificationWorkflow/systemAdmin/nodeTemplates/{nodeTemplateId}","method":"delete","summary":"Delete a notification workflow node template by ID","description":"Delete a notification workflow node template by ID.  \n\nThis hard delete operation permanently removes the template from the database. System administrators must use careful judgment when deleting node templates as workflows referencing deleted templates may fail or malfunction.\n\nThe operation enforces role-based access control for systemAdmin only.\n\nNo request body is required. No response content is returned.\n\nThis operation affects the notification_workflow_node_templates table directly.","parameters":[{"name":"nodeTemplateId","in":"path","description":"Unique identifier of the node template to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"systemAdmin","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of notification workflow audit log records. It enables querying audit trail entries capturing system actions and events related to workflows, triggers, and users. The operation uses PATCH method to support complex search criteria and pagination. The audit logs are stored in the notification_workflow_audit_logs table. User roles authorized to retrieve logs include system administrators, workflow managers, and trigger operators. Logs are immutable and can be filtered by event type, actor, or time ranges.","path":"/notificationWorkflow/systemAdmin/auditLogs","method":"patch","summary":"Search and retrieve notification workflow audit logs","description":"Retrieve a filtered, paginated list of notification workflow audit logs.  \n\nAuthorized users (systemAdmin, workflowManager, triggerOperator) can query audit logs capturing immutable recorded events relating to workflows, triggers, and user actions within the Notification Workflow system.\n\nThe API supports advanced searching and pagination parameters for effective log review and analysis. Returned results include event types, timestamps, actors, and detailed event data.\n\nThis operation targets the notification_workflow_audit_logs table and is intended to support compliance and troubleshooting.\n\nNo pre-requisite operations must be called before querying audit logs.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit log filtering","typeName":"INotificationWorkflowAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageINotificationWorkflowAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"This operation retrieves a filtered and paginated list of notification workflow audit log records. It enables querying audit trail entries capturing system actions and events related to workflows, triggers, and users. The operation uses PATCH method to support complex search criteria and pagination. The audit logs are stored in the notification_workflow_audit_logs table. User roles authorized to retrieve logs include system administrators, workflow managers, and trigger operators. Logs are immutable and can be filtered by event type, actor, or time ranges.","path":"/notificationWorkflow/workflowManager/auditLogs","method":"patch","summary":"Search and retrieve notification workflow audit logs","description":"Retrieve a filtered, paginated list of notification workflow audit logs.  \n\nAuthorized users (systemAdmin, workflowManager, triggerOperator) can query audit logs capturing immutable recorded events relating to workflows, triggers, and user actions within the Notification Workflow system.\n\nThe API supports advanced searching and pagination parameters for effective log review and analysis. Returned results include event types, timestamps, actors, and detailed event data.\n\nThis operation targets the notification_workflow_audit_logs table and is intended to support compliance and troubleshooting.\n\nNo pre-requisite operations must be called before querying audit logs.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit log filtering","typeName":"INotificationWorkflowAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageINotificationWorkflowAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"workflowManager","name":"index"},{"specification":"This operation retrieves a filtered and paginated list of notification workflow audit log records. It enables querying audit trail entries capturing system actions and events related to workflows, triggers, and users. The operation uses PATCH method to support complex search criteria and pagination. The audit logs are stored in the notification_workflow_audit_logs table. User roles authorized to retrieve logs include system administrators, workflow managers, and trigger operators. Logs are immutable and can be filtered by event type, actor, or time ranges.","path":"/notificationWorkflow/triggerOperator/auditLogs","method":"patch","summary":"Search and retrieve notification workflow audit logs","description":"Retrieve a filtered, paginated list of notification workflow audit logs.  \n\nAuthorized users (systemAdmin, workflowManager, triggerOperator) can query audit logs capturing immutable recorded events relating to workflows, triggers, and user actions within the Notification Workflow system.\n\nThe API supports advanced searching and pagination parameters for effective log review and analysis. Returned results include event types, timestamps, actors, and detailed event data.\n\nThis operation targets the notification_workflow_audit_logs table and is intended to support compliance and troubleshooting.\n\nNo pre-requisite operations must be called before querying audit logs.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for audit log filtering","typeName":"INotificationWorkflowAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log entries matching search criteria","typeName":"IPageINotificationWorkflowAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"triggerOperator","name":"index"},{"specification":"This operation retrieves detailed information of a specific audit log entry by its unique identifier from the notification_workflow_audit_logs table. It supports immutable audit records for compliance and forensic analysis. Authorization is public as the operation returns audit log details accessible with proper authentication. The audit log entity includes event type, event data as JSON, and timestamps, along with optional actor ID referencing the user who performed the event.","description":"Retrieves a specific audit log record identified by its unique ID from the audit logs table. This audit log captures immutable events related to workflows, triggers, user role assignments, and other system activities in the Notification Workflow backend. \n\nThe operation requires only the audit log ID as input and returns the complete audit log entry containing event type, event data JSON, timestamp, and the ID of the actor (user or system) responsible for the event whenever applicable.\n\nSecurity considerations include ensuring that the calling user is authorized to view audit logs and that sensitive event data is properly protected. This operation is typically used for troubleshooting, compliance, or forensic audits.\n\nIf the specified audit log ID does not exist, the system will return an appropriate error response indicating the resource was not found.\n\nThis API operation corresponds to the notification_workflow_audit_logs table in the Prisma schema, enabling efficient querying of individual audit log entries by primary key.","summary":"Retrieve a specific audit log entry by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed audit log entry data","typeName":"INotificationWorkflowAuditLogs"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/notificationWorkflow/auditLogs/{id}","method":"get"}],"components":{"authorization":[{"name":"workflowManager","description":"Users responsible for creating, updating, activating, and deactivating workflows. They can perform CRUD operations on workflows and view execution logs.","kind":"member"},{"name":"triggerOperator","description":"Users who can create trigger instances, monitor trigger statuses, and manage trigger lifecycle. They handle the idempotent triggering of workflows.","kind":"member"},{"name":"systemAdmin","description":"Administrators with full control over the system, including managing users, roles, workflows, triggers, and overall system health.","kind":"admin"},{"name":"workerService","description":"Automated service role representing the worker server processing pending trigger instances and executing workflow steps concurrently.","kind":"guest"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageINotificationWorkflowWorkflowManager.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowWorkflowManager.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowSystemAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowSystemAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowWorkerservice.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowWorkerService.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowWorkflow":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowWorkflow"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowWorkflowNode.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowWorkflowNode.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowWorkflowEdge":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowWorkflowEdge"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowTriggerInstance.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowTriggerInstance.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowStepExecutionLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowStepExecutionLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowNodeTemplate.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowNodeTemplate.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageINotificationWorkflowAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/INotificationWorkflowAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"INotificationWorkflowWorkflowManager":{"type":"object","description":"Workflow manager users responsible for creating, updating, activating, and managing notification workflows. Stores identity and authentication data required for access control. Includes standard audit fields for record management.\n\n@namespace Identity","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique email address of the workflow manager used for login and notifications."},"password_hash":{"type":"string","description":"Hashed password for authentication; never store plain passwords."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if the record is active."}},"required":["id","email","password_hash","created_at","updated_at"]},"INotificationWorkflowWorkflowManager.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address to register a new workflow manager user."},"password_hash":{"type":"string","description":"Hashed password string for user authentication."}},"required":["email","password_hash"],"description":"WorkflowManager user registration data"},"INotificationWorkflowWorkflowManager.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login."},"password":{"type":"string","description":"Plain password string submitted for authentication."}},"required":["email","password"],"description":"WorkflowManager user login credentials"},"INotificationWorkflowWorkflowManager.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new access tokens."}},"required":["refresh_token"],"description":"Refresh token request data"},"INotificationWorkflowWorkflowManager.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated workflow manager user."},"email":{"type":"string","description":"Unique email address of the workflow manager used for login and notifications."},"password_hash":{"type":"string","description":"Hashed password for authentication; never store plain passwords."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if the record is active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorized workflowManager user session data"},"INotificationWorkflowTriggerOperator.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address of the trigger operator, used for identification and login."},"password_hash":{"type":"string","description":"Hashed password securely stored for authentication."}},"required":["email","password_hash"],"description":"Trigger operator user registration data. Requires unique email and password hash for user creation. No id or user_id accepted here."},"INotificationWorkflowTriggerOperator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the trigger operator user for login."},"password_hash":{"type":"string","description":"Hashed password for authentication."}},"required":["email","password_hash"],"description":"Trigger operator user login credentials. Used to authenticate and obtain JWT tokens."},"INotificationWorkflowTriggerOperator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new access tokens."}},"required":["refresh_token"],"description":"Request body containing the refresh token for session continuation."},"INotificationWorkflowTriggerOperator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated trigger operator user."},"email":{"type":"string","description":"Unique email address of the trigger operator, used for user identification and login."},"password_hash":{"type":"string","description":"Hashed password securely stored for authentication."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for audit trail."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp reflecting modifications."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp marking inactive users; null if active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token for a trigger operator user."},"INotificationWorkflowSystemAdmin.IRequestLogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address used by the system administrator to login."},"password":{"type":"string","description":"Password string in clear text (usually hashed on client before sending)."}},"required":["email","password"],"description":"Request body schema for system administrator login."},"INotificationWorkflowSystemAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the authenticated system administrator."},"email":{"type":"string","description":"Email address of the system administrator.\n\nMust be unique for authentication."},"password_hash":{"type":"string","description":"Password hash stored securely.\n\nDo not expose in response types."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the user was created.\n\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp the user was last updated.\n\nISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp.\n\nISO 8601 date-time string or null."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as login, join, or token refresh."},"INotificationWorkflowSystemAdmin.IRequestJoin":{"type":"object","properties":{"email":{"type":"string","description":"Email address for registering a new system administrator."},"password":{"type":"string","description":"Password string in clear text for registration."}},"required":["email","password"],"description":"Request body schema for system administrator registration."},"INotificationWorkflowSystemAdmin.IRequestRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to renew authentication tokens."}},"required":["refresh_token"],"description":"Request body schema for refreshing JWT tokens."},"INotificationWorkflowWorkerService.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email identifying the worker service account."},"password_hash":{"type":"string","description":"Hashed password for worker service authentication."}},"required":["email","password_hash"],"description":"Request schema for creating a new worker service account including unique email and secure hashed password."},"INotificationWorkflowWorkerService.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated worker service user."},"email":{"type":"string","format":"email","description":"Unique email identifying the worker service account."},"password_hash":{"type":"string","description":"Hashed password for worker service authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null for active records."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token and identity for worker service user."},"INotificationWorkflowWorkerService.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string for renewing access tokens."}},"required":["refresh_token"],"description":"Request body containing refresh token for renewing JWT tokens for worker service."},"INotificationWorkflowWorkflowManager.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to filter workflow managers by email or other fields."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort criteria field name."}},"description":"Request schema for searching and paginating workflow manager users.","required":[]},"INotificationWorkflowWorkflowManager.IUpdate":{"type":"object","description":"Update DTO for workflow manager users.\n\n@namespace Identity","properties":{"email":{"type":"string","description":"Unique email address of the workflow manager used for login and notifications."},"password_hash":{"type":"string","description":"Hashed password for authentication; never store plain passwords."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if the record is active."}},"required":[]},"INotificationWorkflowTriggerOperator":{"type":"object","description":"Trigger operator users who create and manage trigger instances for workflows. Stores identity and authentication information with audit timestamps for access control enforcement.\n\n@namespace Identity","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique email address of the trigger operator, used for user identification and login."},"password_hash":{"type":"string","description":"Hashed password securely stored for authentication."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for audit trail."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp reflecting modifications."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp marking inactive users; null if active."}},"required":["id","email","password_hash","created_at","updated_at"]},"INotificationWorkflowTriggerOperator.IUpdate":{"type":"object","description":"Update DTO for trigger operator users.\n\n@namespace Identity","properties":{"email":{"type":"string","description":"Unique email address of the trigger operator, used for user identification and login."},"password_hash":{"type":"string","description":"Hashed password securely stored for authentication."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp marking inactive users; null if active."}},"required":[]},"INotificationWorkflowSystemAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for system administrator user.\n\nUUID string."},"email":{"type":"string","description":"Email address of the system administrator.\n\nMust be unique for authentication."},"password_hash":{"type":"string","description":"Password hash stored securely.\n\nDo not expose in response types."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the user was created.\n\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp the user was last updated.\n\nISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp.\n\nISO 8601 date-time string or null."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Represents a system administrator account with authentication credentials and audit timestamps.\n\nThis entity is stored in the notification_workflow_systemadmins Prisma database table\n\nThis entity stores unique email and securely hashed password enabling role-based admin access.\n\nAudit fields include creation, update, and optional soft deletion timestamps to maintain record lifecycle status."},"INotificationWorkflowSystemAdmin.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional email filter string."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination limit."}},"required":[],"description":"Request DTO for paginated search of system admin users.\n\nAll fields optional to allow filtering and pagination."},"INotificationWorkflowSystemAdmin.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optionally update the email."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optionally update the hashed password."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optionally update the soft deletion timestamp."}},"required":[],"description":"Request DTO for updating system admin user details.\n\nSupports changing email, password hash, and deleted_at timestamps."},"INotificationWorkflowWorkerService":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Unique email identifying the worker service account."},"password_hash":{"type":"string","description":"Hashed password for worker service authentication."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null for active records."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Automated worker service users responsible for processing triggers concurrently. Authentication and audit fields included to track service identity and activity.\n\n@namespace Identity\n@summary WorkerService entity representing automated backend service accounts used for processing notification workflow trigger instances concurrently.\n@note DO NOT include password in response; handle authentication via tokens.\n@note Soft deletion supported via deleted_at field. Null means active.\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"INotificationWorkflowWorkerService.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional email filter."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional limit per page."}},"required":[],"description":"Request DTO for filtered, paginated list of worker services.\n\nAllows optional filters and pagination."},"INotificationWorkflowWorkerService.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email identifying the worker service account."},"password_hash":{"type":"string","description":"Hashed password for worker service authentication."}},"required":[],"description":"Parameters to update in the worker service user account.\n\nOnly include fields that may be updated.\n\n@namespace Identity\n@summary Partial update schema for WorkerService\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"INotificationWorkflowWorkflow.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique business identifier code for the workflow.\n\n@nullable"},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name of the workflow.\n\n@nullable"},"is_active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Indicates whether the workflow is active and can be triggered.\n\n@nullable"},"entry_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the starting node of the workflow DAG.\n\n@nullable"},"version":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Version number of the workflow, incremented on updates.\n\n@nullable"},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the workflow was created.\n\n@nullable"},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the workflow was last updated.\n\n@nullable"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, null if not deleted.\n\n@nullable"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination.\n\n@nullable"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of records per page.\n\n@nullable"}},"required":[],"description":"Search parameters for filtering notification workflows.\n\nThis interface supports flexible querying with optional filters and pagination.\n\n@namespace Workflows\n@summary Filter and pagination request parameters for workflows\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"INotificationWorkflowWorkflow":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier."},"code":{"type":"string","description":"Unique business identifier code for the workflow.\n\nThis code helps agents and clients reference workflows uniquely."},"name":{"type":"string","description":"Name of the workflow.\n\nThis is the display name used in UI and reports."},"is_active":{"type":"boolean","description":"Indicates if workflow is active and can be triggered."},"entry_node_id":{"type":"string","format":"uuid","description":"ID of the entry node of the workflow DAG."},"version":{"type":"integer","format":"int32","description":"Version number of this workflow, incremented on update."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the workflow."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the workflow."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft deletion timestamp."}},"required":["id","code","name","is_active","entry_node_id","version","created_at","updated_at"],"description":"A notification workflow represents an orchestrated sequence of notification steps arranged as a Directed Acyclic Graph (DAG). This entity defines the structure, metadata, and active status of a notification workflow, tracking versions and timestamps for lifecycle management."},"INotificationWorkflowWorkflow.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique business identifier code for the workflow.\n\nMust be unique system-wide."},"name":{"type":"string","description":"Name of the workflow."},"is_active":{"type":"boolean","description":"Indicates if workflow is active and can be triggered."},"entry_node_id":{"type":"string","format":"uuid","description":"ID of the entry node of the workflow DAG.\n\nMust be a valid node ID in the nodes of workflow."},"version":{"type":"integer","format":"int32","description":"Version number; for creation, typically start at 1."}},"required":["code","name","is_active","entry_node_id","version"],"description":"Data required to create a new notification workflow, including the initial version, activation status, and entry node."},"INotificationWorkflowWorkflow.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique business identifier code for the workflow.\n\nMust be unique system-wide."},"name":{"type":"string","description":"Name of the workflow."},"is_active":{"type":"boolean","description":"Indicates if workflow is active and can be triggered."},"entry_node_id":{"type":"string","format":"uuid","description":"ID of the entry node of the workflow DAG.\n\nMust be a valid node ID in the nodes of workflow."},"version":{"type":"integer","format":"int32","description":"Version number; for creation, typically start at 1."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft deletion timestamp."}},"required":[],"description":"Data for updating an existing notification workflow, allowing partial modification of properties such as name, active status, and versioning."},"INotificationWorkflowWorkflowNode.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the workflow node to filter on."},"workflow_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the parent workflow to filter workflow nodes."},"node_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of the workflow node, e.g. email, sms, delay."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the workflow node for filtering and search."},"email_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email recipient address, nullable."},"email_subject_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email subject line, nullable."},"email_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email body content, nullable."},"sms_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS recipient, nullable."},"sms_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS body, nullable."},"delay_ms":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Delay in milliseconds for DelayNode nodes, nullable."},"delay_duration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"ISO 8601 duration string for delay, nullable."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by node creation timestamp from (start)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by node creation timestamp to (end)."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by node update timestamp from (start)."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by node update timestamp to (end)."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of items per page for pagination."}},"required":[],"description":"Request parameters for filtering, searching, and paginating workflow nodes within a workflow."},"INotificationWorkflowWorkflowNode":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the workflow node."},"workflow_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent workflow."},"node_type":{"type":"string","description":"Type of node indicating Email, SMS, or Delay."},"name":{"type":"string","description":"Display name of the node."},"email_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email recipient address."},"email_subject_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email subject."},"email_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email body content."},"sms_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS recipient number."},"sms_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS content."},"delay_ms":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Delay in milliseconds for DelayNode steps."},"delay_duration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"ISO 8601 duration string representing delay."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the node was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the node was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the node."}},"required":["id","workflow_id","node_type","name","created_at","updated_at"],"description":"Notification workflow node entity representing a single step in a notification workflow DAG.\n\nThis entity contains fields such as node type, templates for email and SMS messages, delay configurations, and audit timestamps.\n\nThe node is linked to its parent workflow by workflow_id."},"INotificationWorkflowWorkflowNode.ICreate":{"type":"object","properties":{"workflow_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent workflow."},"node_type":{"type":"string","description":"Type of node indicating Email, SMS, or Delay."},"name":{"type":"string","description":"Display name of the node."},"email_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email recipient address."},"email_subject_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email subject."},"email_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email body content."},"sms_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS recipient number."},"sms_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS content."},"delay_ms":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Delay in milliseconds for DelayNode steps."},"delay_duration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"ISO 8601 duration string representing delay."}},"required":["workflow_id","node_type","name"],"description":"Request body schema for creating a new Workflow Node.\n\nIncludes required references to workflow, node type discriminator, name, and optional LiquidJS templates or delay fields."},"INotificationWorkflowWorkflowNode.IUpdate":{"type":"object","properties":{"workflow_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent workflow."},"node_type":{"type":"string","description":"Type of node indicating Email, SMS, or Delay."},"name":{"type":"string","description":"Display name of the node."},"email_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email recipient address."},"email_subject_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email subject."},"email_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for email body content."},"sms_to_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS recipient number."},"sms_body_template":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template string for SMS content."},"delay_ms":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Delay in milliseconds for DelayNode steps."},"delay_duration":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"ISO 8601 duration string representing delay."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the node."}},"required":[],"description":"Request body schema for updating a Workflow Node.\n\nAll properties are optional allowing partial updates to any combination of workflow ID, node type, templates, delay values, and deletion timestamp."},"INotificationWorkflowWorkflowEdge.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary key of the workflow edge."},"workflow_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key referencing the parent workflow."},"from_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Source node reference in the workflow edge."},"to_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target node reference in the workflow edge."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the edge was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the edge was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the edge."}},"required":[],"description":"Request type for filtering and searching Workflow Edges.\n\nAll properties are optional and nullable to support flexible filtering criteria including by IDs and timestamps."},"INotificationWorkflowWorkflowEdge":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"workflow_id":{"type":"string","format":"uuid","description":"Parent workflow's notification_workflow_workflows.id"},"from_node_id":{"type":"string","format":"uuid","description":"Source node reference in notification_workflow_workflow_nodes.id"},"to_node_id":{"type":"string","format":"uuid","description":"Target node reference in notification_workflow_workflow_nodes.id"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the edge was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the edge was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the edge. null if not deleted."}},"required":["id","workflow_id","from_node_id","to_node_id","created_at","updated_at"],"description":"Notification Workflow graph edge connecting nodes.\n\nThis schema represents a single directed edge in a notification workflow DAG.\nIt links one node ('from_node_id') to another ('to_node_id') within the same workflow.\n\nEdges define the execution order and branching of notification steps.\n\nSoft deletion allows marking edges inactive without hard removal.\n\nProperties:\n- `id`: Unique edge identifier.\n- `workflow_id`: Associated workflow.\n- `from_node_id`: Start node.\n- `to_node_id`: End node.\n- `created_at`: Creation timestamp.\n- `updated_at`: Last update timestamp.\n- `deleted_at`: Nullable soft delete timestamp."},"INotificationWorkflowWorkflowEdge.ICreate":{"type":"object","properties":{"workflow_id":{"type":"string","format":"uuid","description":"Parent workflow's notification_workflow_workflows.id"},"from_node_id":{"type":"string","format":"uuid","description":"Source node reference in notification_workflow_workflow_nodes.id"},"to_node_id":{"type":"string","format":"uuid","description":"Target node reference in notification_workflow_workflow_nodes.id"}},"required":["workflow_id","from_node_id","to_node_id"],"description":"Create input for notification workflow edge.\n\nIncludes linking nodes to build workflow DAG edges."},"INotificationWorkflowWorkflowEdge.IUpdate":{"type":"object","properties":{"workflow_id":{"type":"string","format":"uuid","description":"Parent workflow's notification_workflow_workflows.id"},"from_node_id":{"type":"string","format":"uuid","description":"Source node reference in notification_workflow_workflow_nodes.id"},"to_node_id":{"type":"string","format":"uuid","description":"Target node reference in notification_workflow_workflow_nodes.id"}},"required":[],"description":"Update input for notification workflow edge.\n\nAllows partial update of connected nodes."},"INotificationWorkflowTriggerInstance.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number. Optional for pagination of trigger instance list responses."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page. Optional with default limits."},"workflow_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by workflow ID. Optional to restrict results."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by status. Optional to filter triggers by their current status."}},"required":[],"description":"Request parameters for querying TriggerInstances.\n\nSupports pagination and filtering."},"INotificationWorkflowTriggerInstance":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"workflow_id":{"type":"string","format":"uuid","description":"Referenced workflow's notification_workflow_workflows.id."},"idempotency_key":{"type":"string","description":"Idempotency key to ensure uniqueness and prevent duplicate trigger creation per workflow."},"cursor_current_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Current node id cursor indicating the next node to execute in the workflow DAG."},"status":{"type":"string","description":"Status of the trigger instance, enum values: enqueued, processing, completed, failed."},"attempts":{"type":"integer","format":"int32","description":"Count of execution attempts for retry logic, starting from zero."},"available_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the trigger instance becomes available for processing or retry."},"payload":{"type":"string","description":"Input data payload in JSON format for the workflow trigger execution context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the TriggerInstance was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the TriggerInstance was last updated."}},"required":["id","workflow_id","idempotency_key","status","attempts","available_at","payload","created_at","updated_at"],"description":"The NotificationWorkflow TriggerInstance entity records represent executions of notification workflows with idempotency and lifecycle status tracking.\n\nEach instance contains a unique ID, associated workflow ID, idempotency key to prevent duplicated triggers, current execution cursor, status of execution, attempt counts, available processing timestamp, payload for execution context, and audit timestamps.\n\nThis entity supports the workflow orchestration engine ensuring reliable, idempotent notification dispatch and workflow step progress tracking."},"INotificationWorkflowTriggerInstance.ICreate":{"type":"object","properties":{"workflow_id":{"type":"string","format":"uuid","description":"Referenced workflow's notification_workflow_workflows.id."},"idempotency_key":{"type":"string","description":"Idempotency key to ensure uniqueness and prevent duplicate trigger creation per workflow."},"payload":{"type":"string","description":"Input data payload in JSON format for the workflow trigger execution context."}},"required":["workflow_id","idempotency_key","payload"],"description":"Create request to instantiate a new NotificationWorkflow TriggerInstance.\n\nThis operation requires providing the workflow ID, an idempotency key to prevent duplication, and the payload containing the execution context.\n\nThe TriggerInstance is initialized with default status 'enqueued', zero attempts, and availability timestamp managed internally.\n\nUsed by trigger operators and other authorized roles to initiate workflow execution safely and idempotently."},"INotificationWorkflowTriggerInstance.IUpdate":{"type":"object","properties":{"cursor_current_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Current node id cursor indicating the next node to execute in the workflow DAG."},"status":{"type":"string","description":"Status of the trigger instance, enum values: enqueued, processing, completed, failed."},"attempts":{"type":"integer","format":"int32","description":"Count of execution attempts for retry logic, starting from zero."},"available_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the trigger instance becomes available for processing or retry."},"payload":{"type":"string","description":"Input data payload in JSON format for the workflow trigger execution context."}},"required":[],"description":"Update request for NotificationWorkflow TriggerInstance entity.\n\nAllows modification of the current cursor node, execution status, retry attempts, availability timestamp, and payload.\n\nUsed internally by worker servers and management APIs for lifecycle and retry management."},"INotificationWorkflowStepExecutionLog.IRequest":{"type":"object","properties":{"workflow_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by workflow ID"},"trigger_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by trigger ID"},"node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by node ID"},"success":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter whether to include only successful executions"},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Pagination page number"},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Pagination limit per page"},"start_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional start date for filtering"},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date for filtering"}},"required":[],"description":"Request schema for filtering and paginating workflow step execution logs.\n\nSupports optional filters for workflow, trigger, node ids, success flag, date range, and pagination information used by UI and API clients."},"INotificationWorkflowStepExecutionLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"workflow_id":{"type":"string","format":"uuid","description":"Referenced workflow's notification_workflow_workflows.id."},"trigger_id":{"type":"string","format":"uuid","description":"Referenced trigger instance's notification_workflow_trigger_instances.id."},"node_id":{"type":"string","format":"uuid","description":"Referenced workflow node's notification_workflow_workflow_nodes.id."},"attempt":{"type":"integer","format":"int32","description":"Attempt number of this execution step, starting from 1."},"started_at":{"type":"string","format":"date-time","description":"Timestamp when execution of this step started."},"finished_at":{"type":"string","format":"date-time","description":"Timestamp when execution of this step finished."},"input_context":{"type":"string","description":"JSON string capturing the input execution context for this step."},"output_context":{"type":"string","description":"JSON string capturing the output execution context after this step."},"success":{"type":"boolean","description":"Whether this execution step succeeded."},"email_message_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Identifier of the email message if this step sent an email; null otherwise."},"sms_message_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Identifier of the SMS message if this step sent an SMS; null otherwise."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Error message if the execution step failed; null otherwise."}},"required":["id","workflow_id","trigger_id","node_id","attempt","started_at","finished_at","input_context","output_context","success"],"description":"The NotificationWorkflow StepExecutionLog entity captures detailed execution history for each node step in the notification workflow engine.\n\nRecords contain execution attempt, timing, input/output contexts, success status, and optional message IDs and error messages for troubleshooting.\n\nLogs serve as immutable historical data for audit and debugging purposes."},"INotificationWorkflowNodeTemplate.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limitation of records per a page. @default 100"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"General purpose search string for template code, name, or content."},"type":{"oneOf":[{"const":"email"},{"const":"sms"},{"const":"delay"},{"type":"null"}],"description":"Filter node templates by type: email, sms, delay."}},"required":[],"description":"Request parameters for searching and filtering notification node templates. Supports pagination and optional filtering by type and search query."},"INotificationWorkflowNodeTemplate":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the node template entity."},"code":{"type":"string","description":"Unique business identifier code for the node template."},"name":{"type":"string","description":"Human-readable name of the node template."},"type":{"oneOf":[{"const":"email","description":"Type of the node template: email, sms, or delay."},{"const":"sms","description":"Type of the node template: email, sms, or delay."},{"const":"delay","description":"Type of the node template: email, sms, or delay."}],"description":"Type of the node template: email, sms, or delay."},"template_body":{"type":"string","description":"LiquidJS template content of the node template."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the template was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the template was last updated."}},"required":["id","code","name","type","template_body","created_at","updated_at"],"description":"Represents reusable node templates for notification workflows including email, sms, and delay templates."},"INotificationWorkflowNodeTemplate.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique business identifier code for the node template."},"name":{"type":"string","description":"Human-readable name of the node template."},"type":{"oneOf":[{"const":"email","description":"Type of the node template: email, sms, or delay."},{"const":"sms","description":"Type of the node template: email, sms, or delay."},{"const":"delay","description":"Type of the node template: email, sms, or delay."}],"description":"Type of the node template: email, sms, or delay."},"template_body":{"type":"string","description":"LiquidJS template content of the node template."}},"required":["code","name","type","template_body"],"description":"Request payload for creating a new notification node template."},"INotificationWorkflowNodeTemplate.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique business identifier code for the node template."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable name of the node template."},"type":{"oneOf":[{"const":"email"},{"const":"sms"},{"const":"delay"},{"type":"null"}],"description":"Type of the node template: email, sms, or delay."},"template_body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"LiquidJS template content of the node template."}},"required":[],"description":"Request payload for updating an existing notification node template."},"INotificationWorkflowAuditLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based index)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Actor ID to filter logs by actor (nullable)."},"event_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Event type filter (nullable)."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date start filter (ISO 8601)."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date end filter (ISO 8601)."}},"required":[],"description":"Page request parameters for audit log filtering.\n\nSupports filtering by actor ID, event type, and timestamps.\n\nUsed to search audit logs recorded for the notification workflow system."},"INotificationWorkflowAuditLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the user or system actor responsible for the event, nullable."},"event_type":{"type":"string","description":"Type of event recorded (e.g., workflow_created, trigger_fired)."},"event_data":{"type":"string","description":"JSON string containing detailed event data and context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the event was recorded."}},"required":["id","event_type","event_data","created_at"],"description":"Audit log entry capturing immutable events related to notification workflows.\n\nIncludes event type, event data (JSON string), timestamps, and optional actor reference."},"INotificationWorkflowWorkflowManager.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the workflow manager user."},"email":{"type":"string","format":"email","description":"Unique email address of the workflow manager user."}},"required":["id","email"],"description":"Summary information for WorkflowManager users.\n\nIncludes primary identifier and email used for login and notifications.\nExcludes sensitive fields like password_hash."},"INotificationWorkflowSystemAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the system administrator user."},"email":{"type":"string","format":"email","description":"Unique email address of the system administrator user."}},"required":["id","email"],"description":"Summary information for SystemAdmin users.\n\nIncludes primary identifier and email used for login and administration.\nDoes not include password hashes or sensitive fields."},"INotificationWorkflowWorkflowNode.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the workflow node"},"node_type":{"type":"string","description":"Type of node indicating Email, SMS, or Delay."},"name":{"type":"string","description":"Display name of the node"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the node was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the node was last updated"}},"required":["id","node_type","name"],"description":"Summary info of workflow node suitable for list display.\n\nIncludes basic identifiers and classification fields needed to show a list of workflow nodes."},"INotificationWorkflowTriggerInstance.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the TriggerInstance"},"workflow_id":{"type":"string","format":"uuid","description":"Workflow ID that this trigger instance belongs to"},"idempotency_key":{"type":"string","description":"Idempotency key to avoid duplicate instances"},"cursor_current_node_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Current node id cursor. Nullable if finished"},"status":{"type":"string","description":"Status of the trigger instance"},"attempts":{"type":"integer","description":"Count of execution attempts"},"available_at":{"type":"string","format":"date-time","description":"When this trigger becomes available for processing"}},"required":["id","workflow_id","idempotency_key","status","attempts","available_at"],"description":"Summary info of TriggerInstance for list views.\n\nIncludes key state and position info for quick listing on trigger monitors."},"INotificationWorkflowStepExecutionLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the execution log"},"workflow_id":{"type":"string","format":"uuid","description":"Referenced workflow ID"},"trigger_id":{"type":"string","format":"uuid","description":"Trigger instance ID"},"node_id":{"type":"string","format":"uuid","description":"ID of the node in the workflow"},"attempt":{"type":"integer","description":"Attempt number"},"started_at":{"type":"string","format":"date-time","description":"Start time of execution"},"finished_at":{"type":"string","format":"date-time","description":"Finish time of execution"},"success":{"type":"boolean","description":"Whether the step execution was successful"}},"required":["id","workflow_id","trigger_id","node_id","attempt","started_at","finished_at","success"],"description":"Summary info of step execution log for listing.\n\nCaptures minimal necessary details for performant log browsing and UI presentation."},"INotificationWorkflowWorkerService.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the worker service"},"email":{"type":"string","description":"Unique email identifying the worker service account"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the worker service account was last updated"}},"required":["id","email"],"description":"Summary info of worker service for list display.\n\nThis type provides minimal identification information including unique ID and email address for use in collections and listings."},"INotificationWorkflowNodeTemplate.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the node template."},"code":{"type":"string","description":"Unique business identifier code for the node template."},"name":{"type":"string","description":"Human-readable name of the node template."},"type":{"type":"string","description":"Type of the node template: \"email\", \"sms\", or \"delay\"."}},"required":["id","code","name","type"],"description":"Summary view for notification workflow node template.\n\nContains the minimal identifying and descriptive properties for list views."},"INotificationWorkflowAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the user or system actor responsible for the event, nullable for system events."},"event_type":{"type":"string","description":"Type of event recorded (e.g., workflow_created, trigger_fired, user_role_assigned)."},"event_data":{"type":"string","description":"JSON string containing detailed event data and context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the event was recorded."}},"required":["id","event_type","event_data","created_at"],"description":"Summary view for notification workflow audit logs.\n\nContains the essential properties for list views and filtering."}}}}