import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postlibraryManagementGuestUserBooks } from "../../../../providers/postlibraryManagementGuestUserBooks";
import { GuestuserAuth } from "../../../../decorators/GuestuserAuth";
import { GuestuserPayload } from "../../../../decorators/payload/GuestuserPayload";
import { patchlibraryManagementGuestUserBooks } from "../../../../providers/patchlibraryManagementGuestUserBooks";
import { getlibraryManagementGuestUserBooksBookId } from "../../../../providers/getlibraryManagementGuestUserBooksBookId";
import { putlibraryManagementGuestUserBooksBookId } from "../../../../providers/putlibraryManagementGuestUserBooksBookId";
import { deletelibraryManagementGuestUserBooksBookId } from "../../../../providers/deletelibraryManagementGuestUserBooksBookId";

import { ILibraryManagementBooks } from "../../../../api/structures/ILibraryManagementBooks";
import { IPageILibraryManagementBooks } from "../../../../api/structures/IPageILibraryManagementBooks";

@Controller("/libraryManagement/guestUser/books")
export class LibrarymanagementGuestuserBooksController {
  /**
   * Add a new book with title, author, and unique ISBN.
   *
   * Add a new book to the library collection by providing title, author, and
   * ISBN. The book is validated to ensure all required fields are present and
   * the ISBN is unique.
   *
   * Guest users without authentication can perform this operation as part of
   * the open system design.
   *
   * The Prisma schema enforces unique ISBN per book. The operation returns the
   * full details of the created book including timestamps.
   *
   * Errors on invalid input or duplicate ISBNs are returned with appropriate
   * HTTP error codes and messages.
   *
   * @param connection
   * @param body Payload containing book creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedBody()
    body: ILibraryManagementBooks.ICreate,
  ): Promise<ILibraryManagementBooks> {
    try {
      return await postlibraryManagementGuestUserBooks({
        guestUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of books with search and filter capabilities.
   *
   * Retrieve a paginated list of books in the library collection. This
   * operation supports complex filter conditions including partial and
   * case-insensitive matching on the book title. It returns only non-deleted
   * books as the deleted_at column is respected for soft deletion.
   *
   * The permissions for this API are open, allowing 'guestUser' roles to access
   * the listing without authentication. Pagination and sorting options are
   * typically provided in the request body to manage large volumes of books.
   *
   * This operation corresponds to the library_management_books table in the
   * Prisma schema. The ISBN field has a uniqueness constraint ensuring no
   * duplicates. The title and author fields are mandatory string fields, and
   * the deleted_at timestamp is used to filter out soft deleted records.
   *
   * Errors may occur if pagination parameters are invalid; these should be
   * handled gracefully by the system. This operation forms the foundation for
   * book discovery features including browsing all books and filtered
   * searches.
   *
   * @param connection
   * @param body Search and pagination parameters for books list retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedBody()
    body: ILibraryManagementBooks.IRequest,
  ): Promise<IPageILibraryManagementBooks.ISummary> {
    try {
      return await patchlibraryManagementGuestUserBooks({
        guestUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single book by ID.
   *
   * Retrieve detailed information about a single book identified by its unique
   * ID. The book data includes the title, author, ISBN, and timestamps of
   * creation and last update.
   *
   * Authorization is open to guestUsers without authentication. The system
   * ensures that deleted books (soft deleted) are not returned.
   *
   * The Prisma schema defines the book entity with uniqueness on ISBN and
   * supports soft deletion by marking deleted_at. This API ensures consistency
   * and data integrity by validating the presence of the bookId and its
   * existence.
   *
   * Errors result in 404 not found if the book ID is invalid or the book has
   * been deleted.
   *
   * @param connection
   * @param bookId Unique identifier of the target book
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bookId")
  public async at(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("bookId")
    bookId: string & tags.Format<"uuid">,
  ): Promise<ILibraryManagementBooks> {
    try {
      return await getlibraryManagementGuestUserBooksBookId({
        guestUser,
        bookId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing book by its ID.
   *
   * This operation updates an existing book's details in the library's
   * collection by the specified book ID.
   *
   * The book ID must be provided as a path parameter. The request body includes
   * updated title, author, and ISBN values, each validated for non-empty
   * content and ISBN format per library rules.
   *
   * Only guestUser role access is allowed as per the system role definitions;
   * no other roles are defined. This means that in this system's scope only the
   * guestUser role can perform allowed operations.
   *
   * The response contains the updated book entity including timestamps and the
   * soft delete status if applicable.
   *
   * Errors include HTTP 400 for validation failures, 409 for duplicate ISBN,
   * and 404 if the book is not found.
   *
   * This operation directly manipulates the library_management_books table,
   * which enforces ISBN uniqueness and supports soft deletes via the deleted_at
   * field.
   *
   * Path parameters:
   *
   * - BookId: UUID of the book to update.
   *
   * This operation requires full update payload; partial updates are not
   * supported.
   *
   * It is exposed as a PUT method on /books/{bookId}.
   *
   * @param connection
   * @param bookId UUID of the target book to update
   * @param body Updated book information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bookId")
  public async update(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("bookId")
    bookId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ILibraryManagementBooks.IUpdate,
  ): Promise<ILibraryManagementBooks> {
    try {
      return await putlibraryManagementGuestUserBooksBookId({
        guestUser,
        bookId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a book by its ID.
   *
   * This operation permanently deletes a book from the library's collection by
   * its unique identifier.
   *
   * The book ID must be provided as a path parameter. Access is granted
   * exclusively to the guestUser role.
   *
   * Upon successful deletion, the operation returns no content.
   *
   * Errors include 404 if the specified book does not exist.
   *
   * This operation performs a hard delete without soft delete behavior.
   *
   * It manipulates the library_management_books table which stores book
   * information including title, author, and ISBN.
   *
   * @param connection
   * @param bookId UUID of the target book to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bookId")
  public async erase(
    @GuestuserAuth()
    guestUser: GuestuserPayload,
    @TypedParam("bookId")
    bookId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletelibraryManagementGuestUserBooksBookId({
        guestUser,
        bookId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
