import { tags } from "typia";

/**
 * Books catalog storing title, author, and uniquely validated ISBN information
 * for the library. Supports guest user addition, viewing, and partial title
 * search. Includes timestamps for creation and update with soft delete support.
 * ISBN is unique to prevent duplicates.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Core
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ILibraryManagementBooks = {
  /**
   * Unique identifier for the book.
   *
   * Corresponds to the database primary key (UUID) for book records in the
   * library_management_books table. This is used as the main reference key to
   * retrieve/update books.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Title of the book.
   *
   * Required field with non-empty string, representing the book's name. This
   * is indexed for search and partial matching.
   */
  title: string;

  /**
   * Author of the book.
   *
   * Required field that stores the book's author name.
   */
  author: string;

  /**
   * Unique ISBN of the book.
   *
   * String field enforcing uniqueness per book. Must follow ISBN-10 or
   * ISBN-13 formats.
   */
  isbn: string;

  /**
   * Timestamp of creation.
   *
   * Stored as ISO 8601 date-time string. Indicates when the book record was
   * created.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update.
   *
   * Stored as ISO 8601 date-time string. Indicates when the book record was
   * last updated.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional timestamp for soft deletion.
   *
   * If present, indicates the book has been deleted (soft delete mechanism).
   * Users should treat records with this field as deleted and exclude from
   * views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ILibraryManagementBooks {
  /** Parameters for paginating and filtering the list of library books. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: number | null | undefined;

    /** Number of records per page. */
    limit?: number | null | undefined;

    /** Search substring for partial title match (case-insensitive). */
    search?: string | null | undefined;

    /** Field to order the results by. */
    orderBy?: "created_at" | "title" | "author" | null | undefined;

    /** Direction of sorting: ascending or descending. */
    orderDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request type for creating a new book.
   *
   * Requires title, author, and unique ISBN. Timestamp fields are not
   * accepted from client. Ownership or ID fields are excluded since IDs are
   * generated by system.
   */
  export type ICreate = {
    /** Title of the book. Required non-empty string. */
    title: string;

    /** Author of the book. Required non-empty string. */
    author: string;

    /** Unique ISBN string (ISBN-10 or ISBN-13 format). Required. */
    isbn: string;
  };

  /**
   * Request type for updating an existing book.
   *
   * All fields optional to allow partial updates. Cannot update ID or
   * timestamps. ISBN must remain unique.
   */
  export type IUpdate = {
    /** Optional updated title */
    title?: string | null | undefined;

    /** Optional updated author */
    author?: string | null | undefined;

    /** Optional updated ISBN, must remain unique */
    isbn?: string | null | undefined;
  };

  /**
   * Summary type for listing books.
   *
   * Includes primary identifier and fields required for display lists.
   * Excludes timestamps and deletion fields. Contains id, title, author, and
   * ISBN.
   */
  export type ISummary = {
    /** Primary key UUID of book */
    id: string & tags.Format<"uuid">;

    /** Book title for display */
    title: string;

    /** Book author for display */
    author: string;

    /** ISBN string for display */
    isbn: string;
  };
}
