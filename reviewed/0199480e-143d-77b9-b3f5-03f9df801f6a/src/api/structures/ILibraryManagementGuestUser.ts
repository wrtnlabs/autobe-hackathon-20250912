import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Guest user identity representing an unauthenticated temporary user for
 * library system.
 *
 * This entity stores unique guest user IDs and timestamps, enabling ephemeral
 * session management without authentication credentials.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ILibraryManagementGuestUser = {
  /** Primary Key of guest user. Unique UUID identifier. */
  id: string & tags.Format<"uuid">;

  /** Timestamp when the guest user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the guest user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp allowing recovery of guest user records. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ILibraryManagementGuestUser {
  /**
   * Authorization response including the guest user's identity and JWT token
   * information.
   *
   * Used in guest join and refresh authentication operations.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized guest user. */
    id: string & tags.Format<"uuid">;

    /** Record creation timestamp of the guest user. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp of the guest user. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp if the guest record is soft deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };
}
