import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ILibraryManagementBooks } from "../../../../structures/ILibraryManagementBooks";
import { IPageILibraryManagementBooks } from "../../../../structures/IPageILibraryManagementBooks";

/**
 * Add a new book with title, author, and unique ISBN.
 *
 * Add a new book to the library collection by providing title, author, and
 * ISBN. The book is validated to ensure all required fields are present and the
 * ISBN is unique.
 *
 * Guest users without authentication can perform this operation as part of the
 * open system design.
 *
 * The Prisma schema enforces unique ISBN per book. The operation returns the
 * full details of the created book including timestamps.
 *
 * Errors on invalid input or duplicate ISBNs are returned with appropriate HTTP
 * error codes and messages.
 *
 * @param props.connection
 * @param props.body Payload containing book creation data
 * @path /libraryManagement/guestUser/books
 * @accessor api.functional.libraryManagement.guestUser.books.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload containing book creation data */
    body: ILibraryManagementBooks.ICreate;
  };
  export type Body = ILibraryManagementBooks.ICreate;
  export type Response = ILibraryManagementBooks;

  export const METADATA = {
    method: "POST",
    path: "/libraryManagement/guestUser/books",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/libraryManagement/guestUser/books";
  export const random = (): ILibraryManagementBooks =>
    typia.random<ILibraryManagementBooks>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of books with search and filter capabilities.
 *
 * Retrieve a paginated list of books in the library collection. This operation
 * supports complex filter conditions including partial and case-insensitive
 * matching on the book title. It returns only non-deleted books as the
 * deleted_at column is respected for soft deletion.
 *
 * The permissions for this API are open, allowing 'guestUser' roles to access
 * the listing without authentication. Pagination and sorting options are
 * typically provided in the request body to manage large volumes of books.
 *
 * This operation corresponds to the library_management_books table in the
 * Prisma schema. The ISBN field has a uniqueness constraint ensuring no
 * duplicates. The title and author fields are mandatory string fields, and the
 * deleted_at timestamp is used to filter out soft deleted records.
 *
 * Errors may occur if pagination parameters are invalid; these should be
 * handled gracefully by the system. This operation forms the foundation for
 * book discovery features including browsing all books and filtered searches.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for books list retrieval
 * @path /libraryManagement/guestUser/books
 * @accessor api.functional.libraryManagement.guestUser.books.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for books list retrieval */
    body: ILibraryManagementBooks.IRequest;
  };
  export type Body = ILibraryManagementBooks.IRequest;
  export type Response = IPageILibraryManagementBooks.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/libraryManagement/guestUser/books",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/libraryManagement/guestUser/books";
  export const random = (): IPageILibraryManagementBooks.ISummary =>
    typia.random<IPageILibraryManagementBooks.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single book by ID.
 *
 * Retrieve detailed information about a single book identified by its unique
 * ID. The book data includes the title, author, ISBN, and timestamps of
 * creation and last update.
 *
 * Authorization is open to guestUsers without authentication. The system
 * ensures that deleted books (soft deleted) are not returned.
 *
 * The Prisma schema defines the book entity with uniqueness on ISBN and
 * supports soft deletion by marking deleted_at. This API ensures consistency
 * and data integrity by validating the presence of the bookId and its
 * existence.
 *
 * Errors result in 404 not found if the book ID is invalid or the book has been
 * deleted.
 *
 * @param props.connection
 * @param props.bookId Unique identifier of the target book
 * @path /libraryManagement/guestUser/books/:bookId
 * @accessor api.functional.libraryManagement.guestUser.books.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target book */
    bookId: string & tags.Format<"uuid">;
  };
  export type Response = ILibraryManagementBooks;

  export const METADATA = {
    method: "GET",
    path: "/libraryManagement/guestUser/books/:bookId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/libraryManagement/guestUser/books/${encodeURIComponent(props.bookId ?? "null")}`;
  export const random = (): ILibraryManagementBooks =>
    typia.random<ILibraryManagementBooks>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bookId")(() => typia.assert(props.bookId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing book by its ID.
 *
 * This operation updates an existing book's details in the library's collection
 * by the specified book ID.
 *
 * The book ID must be provided as a path parameter. The request body includes
 * updated title, author, and ISBN values, each validated for non-empty content
 * and ISBN format per library rules.
 *
 * Only guestUser role access is allowed as per the system role definitions; no
 * other roles are defined. This means that in this system's scope only the
 * guestUser role can perform allowed operations.
 *
 * The response contains the updated book entity including timestamps and the
 * soft delete status if applicable.
 *
 * Errors include HTTP 400 for validation failures, 409 for duplicate ISBN, and
 * 404 if the book is not found.
 *
 * This operation directly manipulates the library_management_books table, which
 * enforces ISBN uniqueness and supports soft deletes via the deleted_at field.
 *
 * Path parameters:
 *
 * - BookId: UUID of the book to update.
 *
 * This operation requires full update payload; partial updates are not
 * supported.
 *
 * It is exposed as a PUT method on /books/{bookId}.
 *
 * @param props.connection
 * @param props.bookId UUID of the target book to update
 * @param props.body Updated book information
 * @path /libraryManagement/guestUser/books/:bookId
 * @accessor api.functional.libraryManagement.guestUser.books.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target book to update */
    bookId: string & tags.Format<"uuid">;

    /** Updated book information */
    body: ILibraryManagementBooks.IUpdate;
  };
  export type Body = ILibraryManagementBooks.IUpdate;
  export type Response = ILibraryManagementBooks;

  export const METADATA = {
    method: "PUT",
    path: "/libraryManagement/guestUser/books/:bookId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/libraryManagement/guestUser/books/${encodeURIComponent(props.bookId ?? "null")}`;
  export const random = (): ILibraryManagementBooks =>
    typia.random<ILibraryManagementBooks>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bookId")(() => typia.assert(props.bookId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a book by its ID.
 *
 * This operation permanently deletes a book from the library's collection by
 * its unique identifier.
 *
 * The book ID must be provided as a path parameter. Access is granted
 * exclusively to the guestUser role.
 *
 * Upon successful deletion, the operation returns no content.
 *
 * Errors include 404 if the specified book does not exist.
 *
 * This operation performs a hard delete without soft delete behavior.
 *
 * It manipulates the library_management_books table which stores book
 * information including title, author, and ISBN.
 *
 * @param props.connection
 * @param props.bookId UUID of the target book to delete
 * @path /libraryManagement/guestUser/books/:bookId
 * @accessor api.functional.libraryManagement.guestUser.books.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target book to delete */
    bookId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/libraryManagement/guestUser/books/:bookId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/libraryManagement/guestUser/books/${encodeURIComponent(props.bookId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bookId")(() => typia.assert(props.bookId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
