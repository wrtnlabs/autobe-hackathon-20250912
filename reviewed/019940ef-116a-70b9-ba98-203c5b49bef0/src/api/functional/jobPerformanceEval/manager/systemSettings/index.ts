import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalSystemSettings } from "../../../../structures/IJobPerformanceEvalSystemSettings";
import { IPageIJobPerformanceEvalSystemSettings } from "../../../../structures/IPageIJobPerformanceEvalSystemSettings";

/**
 * Search and retrieve paginated list of system settings.
 *
 * Search and retrieve paginated list of job performance evaluation system
 * settings. Supports filtering by setting key, value, and description with
 * pagination parameters in the request.
 *
 * Access is typically restricted to users with administrative privileges such
 * as managers.
 *
 * This is a PATCH request with a structured request body that defines search
 * filters. Response includes paginated system settings data.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   system settings
 * @path /jobPerformanceEval/manager/systemSettings
 * @accessor api.functional.jobPerformanceEval.manager.systemSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering system
     * settings
     */
    body: IJobPerformanceEvalSystemSettings.IRequest;
  };
  export type Body = IJobPerformanceEvalSystemSettings.IRequest;
  export type Response = IPageIJobPerformanceEvalSystemSettings;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/systemSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/systemSettings";
  export const random = (): IPageIJobPerformanceEvalSystemSettings =>
    typia.random<IPageIJobPerformanceEvalSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get system setting details by ID.
 *
 * Retrieve the full details of a job performance evaluation system setting via
 * its unique identifier.
 *
 * Security access is usually granted to manager roles or equivalent
 * administrators.
 *
 * The response contains all properties of the system setting record.
 *
 * @param props.connection
 * @param props.id Unique UUID of the system setting
 * @path /jobPerformanceEval/manager/systemSettings/:id
 * @accessor api.functional.jobPerformanceEval.manager.systemSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID of the system setting */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalSystemSettings;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/systemSettings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/systemSettings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalSystemSettings =>
    typia.random<IJobPerformanceEvalSystemSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
