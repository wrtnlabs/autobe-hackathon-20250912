import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalKnowledgeArea } from "../../../../structures/IJobPerformanceEvalKnowledgeArea";

/**
 * Update a knowledge area by ID in the job_performance_eval_knowledge_areas
 * table.
 *
 * This API endpoint allows authorized users to update a specific knowledge area
 * identified by its unique ID. The knowledge area represents domains of
 * expertise within the organizational job evaluation context. The update
 * operation accepts new values for code, name, and an optional description to
 * reflect current knowledge area attributes.
 *
 * Users must provide the knowledge area's unique identifier as a path parameter
 * in UUID format. The request body must include the new code and name for the
 * knowledge area, optionally updating the description if needed. The system
 * records update timestamps automatically.
 *
 * Security checks ensure only users with appropriate roles can modify knowledge
 * areas. This operation corresponds to the job_performance_eval_knowledge_areas
 * table in the database.
 *
 * The response returns the updated knowledge area entity reflecting the
 * changes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target knowledge area
 * @param props.body Updated information for the knowledge area
 * @path /jobPerformanceEval/manager/knowledgeAreas/:id
 * @accessor api.functional.jobPerformanceEval.manager.knowledgeAreas.updateKnowledgeArea
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateKnowledgeArea(
  connection: IConnection,
  props: updateKnowledgeArea.Props,
): Promise<updateKnowledgeArea.Response> {
  return true === connection.simulate
    ? updateKnowledgeArea.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateKnowledgeArea.METADATA,
          path: updateKnowledgeArea.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateKnowledgeArea {
  export type Props = {
    /** Unique identifier of the target knowledge area */
    id: string & tags.Format<"uuid">;

    /** Updated information for the knowledge area */
    body: IJobPerformanceEvalKnowledgeArea.IUpdate;
  };
  export type Body = IJobPerformanceEvalKnowledgeArea.IUpdate;
  export type Response = IJobPerformanceEvalKnowledgeArea;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/knowledgeAreas/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/knowledgeAreas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalKnowledgeArea =>
    typia.random<IJobPerformanceEvalKnowledgeArea>();
  export const simulate = (
    connection: IConnection,
    props: updateKnowledgeArea.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateKnowledgeArea.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a knowledge area by ID from the job_performance_eval_knowledge_areas
 * table.
 *
 * This API endpoint performs a hard delete of a knowledge area specified by its
 * unique ID. The knowledge area corresponds to a domain of expertise within the
 * job evaluation framework. Deleting this entity removes it permanently from
 * the database.
 *
 * The knowledge area ID must be provided as a path parameter in UUID format.
 * Only users with the manager role can execute this deletion. Upon success, no
 * content is returned.
 *
 * This operation maps to the job_performance_eval_knowledge_areas table in
 * Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the knowledge area to delete
 * @path /jobPerformanceEval/manager/knowledgeAreas/:id
 * @accessor api.functional.jobPerformanceEval.manager.knowledgeAreas.eraseKnowledgeArea
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseKnowledgeArea(
  connection: IConnection,
  props: eraseKnowledgeArea.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseKnowledgeArea.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseKnowledgeArea.METADATA,
          path: eraseKnowledgeArea.path(props),
          status: null,
        },
      );
}
export namespace eraseKnowledgeArea {
  export type Props = {
    /** Unique identifier of the knowledge area to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/knowledgeAreas/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/knowledgeAreas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseKnowledgeArea.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseKnowledgeArea.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
