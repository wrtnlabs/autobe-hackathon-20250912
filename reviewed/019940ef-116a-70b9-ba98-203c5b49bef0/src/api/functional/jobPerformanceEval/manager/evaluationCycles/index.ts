import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalEvaluationCycle } from "../../../../structures/IJobPerformanceEvalEvaluationCycle";
import { IPageIJobPerformanceEvalEvaluationCycle } from "../../../../structures/IPageIJobPerformanceEvalEvaluationCycle";

/**
 * Create a new evaluation cycle.
 *
 * Create a new job performance evaluation cycle with specified code, name,
 * dates, and active status.
 *
 * Authorized users can define new evaluation periods to manage cycles of
 * employee and manager assessments.
 *
 * Validation of unique cycle code and proper date intervals is enforced to
 * maintain data integrity.
 *
 * The operation inserts a new record into the
 * 'job_performance_eval_evaluation_cycles' table and returns the created
 * entity.
 *
 * Only authorized users may perform this operation.
 *
 * @param props.connection
 * @param props.body Details required to create an evaluation cycle
 * @path /jobPerformanceEval/manager/evaluationCycles
 * @accessor api.functional.jobPerformanceEval.manager.evaluationCycles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details required to create an evaluation cycle */
    body: IJobPerformanceEvalEvaluationCycle.ICreate;
  };
  export type Body = IJobPerformanceEvalEvaluationCycle.ICreate;
  export type Response = IJobPerformanceEvalEvaluationCycle;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/evaluationCycles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/evaluationCycles";
  export const random = (): IJobPerformanceEvalEvaluationCycle =>
    typia.random<IJobPerformanceEvalEvaluationCycle>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve filtered, paginated list of evaluation cycles.
 *
 * Retrieve a paginated list of job performance evaluation cycles allowing
 * clients to filter by properties such as cycle code, cycle name, date ranges,
 * and active status.
 *
 * These cycles represent distinct periods where employee and manager
 * evaluations occur, enabling users to select and manage evaluations within
 * those defined periods.
 *
 * Security considerations include restricting access to authorized roles who
 * can view evaluation periods and ensuring that inactive or deleted cycles can
 * be excluded.
 *
 * This operation interacts with the 'job_performance_eval_evaluation_cycles'
 * table and allows querying across historical and current cycles.
 *
 * Validation rules include verifying that paging and filtering parameters match
 * expected formats and ensuring that only accessible cycles are returned based
 * on user roles.
 *
 * This endpoint is typically combined with detail retrieval and update
 * operations to fully manage evaluation cycles.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination settings for evaluation
 *   cycles
 * @path /jobPerformanceEval/manager/evaluationCycles
 * @accessor api.functional.jobPerformanceEval.manager.evaluationCycles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination settings for evaluation cycles */
    body: IJobPerformanceEvalEvaluationCycle.IRequest;
  };
  export type Body = IJobPerformanceEvalEvaluationCycle.IRequest;
  export type Response = IPageIJobPerformanceEvalEvaluationCycle.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/evaluationCycles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/evaluationCycles";
  export const random = (): IPageIJobPerformanceEvalEvaluationCycle.ISummary =>
    typia.random<IPageIJobPerformanceEvalEvaluationCycle.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get evaluation cycle details by ID.
 *
 * Fetch detailed information about a single job performance evaluation cycle by
 * its unique identifier.
 *
 * This enables administrative users to view and validate properties such as
 * start and end dates, cycle codes, and active status.
 *
 * The operation links directly to the 'job_performance_eval_evaluation_cycles'
 * table and supports use cases involving evaluation scheduling and management.
 *
 * Access restrictions apply to prevent unauthorized data exposure.
 *
 * Error handling includes returning appropriate HTTP 404 when the ID is not
 * found and 400 for invalid UUID formats.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation cycle
 * @path /jobPerformanceEval/manager/evaluationCycles/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationCycles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the evaluation cycle */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalEvaluationCycle;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/evaluationCycles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/evaluationCycles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEvaluationCycle =>
    typia.random<IJobPerformanceEvalEvaluationCycle>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update evaluation cycle by ID.
 *
 * Update an existing job performance evaluation cycle identified by ID.
 *
 * Allows modification of properties including cycle code, name, start and end
 * dates, and active status.
 *
 * Ensures that input data respects uniqueness constraints and valid date
 * ranges.
 *
 * This operation updates the record in the
 * 'job_performance_eval_evaluation_cycles' table.
 *
 * Restricted to authorized users to maintain controlled evaluation scheduling.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation cycle to update
 * @param props.body Updated evaluation cycle information
 * @path /jobPerformanceEval/manager/evaluationCycles/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationCycles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the evaluation cycle to update */
    id: string & tags.Format<"uuid">;

    /** Updated evaluation cycle information */
    body: IJobPerformanceEvalEvaluationCycle.IUpdate;
  };
  export type Body = IJobPerformanceEvalEvaluationCycle.IUpdate;
  export type Response = IJobPerformanceEvalEvaluationCycle;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/evaluationCycles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/evaluationCycles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEvaluationCycle =>
    typia.random<IJobPerformanceEvalEvaluationCycle>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete job performance evaluation cycle by ID.
 *
 * Delete a job performance evaluation cycle identified by its unique UUID. This
 * operation permanently removes the evaluation cycle record from the database.
 * It has no request body or response body content.
 *
 * Security is critical: This operation should be limited to administrators, as
 * deleting evaluation cycles affects historical data consistency. Proper
 * authorization checks must exist in the implementation layer.
 *
 * The operation strictly maps to physical deletion in the
 * job_performance_eval_evaluation_cycles table with the primary key UUID
 * provided in the path parameter.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation cycle to delete
 * @path /jobPerformanceEval/manager/evaluationCycles/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationCycles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the evaluation cycle to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/evaluationCycles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/evaluationCycles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
