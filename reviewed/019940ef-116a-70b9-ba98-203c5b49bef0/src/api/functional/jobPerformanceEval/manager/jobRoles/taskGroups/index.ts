import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalTaskGroup } from "../../../../../structures/IJobPerformanceEvalTaskGroup";
import { IPageIJobPerformanceEvalTaskGroup } from "../../../../../structures/IPageIJobPerformanceEvalTaskGroup";

/**
 * List task groups of a job role with filtering.
 *
 * This endpoint returns a filtered and paginated list of task groups under a
 * given job role. Task groups are logical groupings of tasks relevant to the
 * job role, facilitating clearer management and categorization.
 *
 * Users with authorized roles 'employee' or 'manager' can access this list.
 *
 * Filtering, sorting, and pagination parameters can be provided in the request
 * body to refine the results.
 *
 * This operation corresponds to the 'job_performance_eval_task_groups' table,
 * returning summaries of task group entries.
 *
 * The response includes paginated data structured to enable efficient
 * client-side rendering and navigation through potentially large datasets.
 *
 * @param props.connection
 * @param props.jobRoleId Unique identifier of the target job role
 * @param props.body Filtering and pagination criteria for task groups
 * @path /jobPerformanceEval/manager/jobRoles/:jobRoleId/taskGroups
 * @accessor api.functional.jobPerformanceEval.manager.jobRoles.taskGroups.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target job role */
    jobRoleId: string & tags.Format<"uuid">;

    /** Filtering and pagination criteria for task groups */
    body: IJobPerformanceEvalTaskGroup.IRequest;
  };
  export type Body = IJobPerformanceEvalTaskGroup.IRequest;
  export type Response = IPageIJobPerformanceEvalTaskGroup.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/jobRoles/:jobRoleId/taskGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups`;
  export const random = (): IPageIJobPerformanceEvalTaskGroup.ISummary =>
    typia.random<IPageIJobPerformanceEvalTaskGroup.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed task group information by ID.
 *
 * This endpoint fetches detailed information about a specific task group within
 * a job role. Task groups consist of related tasks grouped for better
 * organization and management.
 *
 * The operation relies on 'jobRoleId' and 'taskGroupId' path parameters to
 * locate the targeted task group record in the database.
 *
 * Users with roles 'employee' or 'manager' have access to this endpoint for
 * security reasons.
 *
 * The returned data includes all relevant properties of the task group entity
 * as defined in the Prisma schema, suitable for full detail views or editing
 * interfaces.
 *
 * @param props.connection
 * @param props.jobRoleId Unique identifier of the target job role
 * @param props.taskGroupId Unique identifier of the target task group
 * @path /jobPerformanceEval/manager/jobRoles/:jobRoleId/taskGroups/:taskGroupId
 * @accessor api.functional.jobPerformanceEval.manager.jobRoles.taskGroups.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target job role */
    jobRoleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target task group */
    taskGroupId: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalTaskGroup;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/jobRoles/:jobRoleId/taskGroups/:taskGroupId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTaskGroup =>
    typia.random<IJobPerformanceEvalTaskGroup>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
