import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalTaskActivity } from "../../../../../structures/IJobPerformanceEvalTaskActivity";
import { IPageIJobPerformanceEvalTaskActivity } from "../../../../../structures/IPageIJobPerformanceEvalTaskActivity";

/**
 * Create a new task activity under a task.
 *
 * Create a new task activity under the task specified by taskId. The request
 * body should provide the necessary task activity data such as code, name, and
 * optional description according to the creation schema.
 *
 * The operation requires authorization with either 'employee' or 'manager'
 * roles.
 *
 * Successful creation returns the full detail of the newly created task
 * activity entity.
 *
 * Validation errors and duplicate codes cause error responses.
 *
 * The parameter taskId associates the new activity with the corresponding
 * parent task.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the parent task
 * @param props.body Data needed to create a new task activity
 * @path /jobPerformanceEval/manager/tasks/:taskId/taskActivities
 * @accessor api.functional.jobPerformanceEval.manager.tasks.taskActivities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the parent task */
    taskId: string & tags.Format<"uuid">;

    /** Data needed to create a new task activity */
    body: IJobPerformanceEvalTaskActivity.ICreate;
  };
  export type Body = IJobPerformanceEvalTaskActivity.ICreate;
  export type Response = IJobPerformanceEvalTaskActivity;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/tasks/:taskId/taskActivities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/tasks/${encodeURIComponent(props.taskId ?? "null")}/taskActivities`;
  export const random = (): IJobPerformanceEvalTaskActivity =>
    typia.random<IJobPerformanceEvalTaskActivity>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve list of task activities under a task.
 *
 * Retrieve a paginated and filtered list of task activities associated with the
 * specified task identified by taskId. This operation fetches data from the
 * job_performance_eval_task_activities table, returning details such as code,
 * name, description, and timestamps.
 *
 * The path parameter taskId is a UUID that uniquely identifies the parent task.
 * The request body supports complex filters and pagination options to
 * efficiently query large sets of task activities.
 *
 * Only users with roles 'employee' or 'manager' are authorized to access this
 * endpoint.
 *
 * Errors caused by invalid or non-existent taskId result in 404 or 400 HTTP
 * responses managed by the system.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Filtering and pagination criteria for listing task
 *   activities
 * @path /jobPerformanceEval/manager/tasks/:taskId/taskActivities
 * @accessor api.functional.jobPerformanceEval.manager.tasks.taskActivities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Filtering and pagination criteria for listing task activities */
    body: IJobPerformanceEvalTaskActivity.IRequest;
  };
  export type Body = IJobPerformanceEvalTaskActivity.IRequest;
  export type Response = IPageIJobPerformanceEvalTaskActivity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/tasks/:taskId/taskActivities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/tasks/${encodeURIComponent(props.taskId ?? "null")}/taskActivities`;
  export const random = (): IPageIJobPerformanceEvalTaskActivity.ISummary =>
    typia.random<IPageIJobPerformanceEvalTaskActivity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific task activity by taskActivityId
 * under the task identified by taskId. The returned data includes activity
 * code, name, description, creation and update timestamps as per the
 * job_performance_eval_task_activities schema.
 *
 * Authorized users with the roles 'employee' or 'manager' can perform this read
 * operation.
 *
 * Invalid path parameters or missing records result in HTTP error responses.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the parent task
 * @param props.taskActivityId Unique identifier of the task activity
 * @path /jobPerformanceEval/manager/tasks/:taskId/taskActivities/:taskActivityId
 * @accessor api.functional.jobPerformanceEval.manager.tasks.taskActivities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task activity */
    taskActivityId: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalTaskActivity;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/tasks/:taskId/taskActivities/:taskActivityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/tasks/${encodeURIComponent(props.taskId ?? "null")}/taskActivities/${encodeURIComponent(props.taskActivityId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTaskActivity =>
    typia.random<IJobPerformanceEvalTaskActivity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("taskActivityId")(() => typia.assert(props.taskActivityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task activity's details.
 *
 * Update the specified task activity identified by taskActivityId under the
 * task specified by taskId. The request body contains updated properties
 * compliant with the update schema.
 *
 * This operation requires roles 'employee' or 'manager' for authorization.
 *
 * Successful updates return the updated task activity entity data.
 *
 * Errors for invalid IDs or validation issues are returned appropriately.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the parent task
 * @param props.taskActivityId Unique identifier of the task activity to be
 *   updated
 * @param props.body Updated task activity data
 * @path /jobPerformanceEval/manager/tasks/:taskId/taskActivities/:taskActivityId
 * @accessor api.functional.jobPerformanceEval.manager.tasks.taskActivities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task activity to be updated */
    taskActivityId: string & tags.Format<"uuid">;

    /** Updated task activity data */
    body: IJobPerformanceEvalTaskActivity.IUpdate;
  };
  export type Body = IJobPerformanceEvalTaskActivity.IUpdate;
  export type Response = IJobPerformanceEvalTaskActivity;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/tasks/:taskId/taskActivities/:taskActivityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/tasks/${encodeURIComponent(props.taskId ?? "null")}/taskActivities/${encodeURIComponent(props.taskActivityId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTaskActivity =>
    typia.random<IJobPerformanceEvalTaskActivity>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("taskActivityId")(() => typia.assert(props.taskActivityId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
