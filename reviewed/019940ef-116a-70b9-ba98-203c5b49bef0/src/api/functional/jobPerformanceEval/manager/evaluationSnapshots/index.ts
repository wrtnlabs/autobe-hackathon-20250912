import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalEvaluationSnapshots } from "../../../../structures/IJobPerformanceEvalEvaluationSnapshots";
import { IPageIJobPerformanceEvalEvaluationSnapshots } from "../../../../structures/IPageIJobPerformanceEvalEvaluationSnapshots";
import { IJobPerformanceEvalEvaluationSnapshot } from "../../../../structures/IJobPerformanceEvalEvaluationSnapshot";

/**
 * List paginated evaluation snapshots with filtering.
 *
 * Retrieve a paginated list of job performance evaluation snapshots
 * representing historical combined employee and manager evaluation data.
 *
 * This operation allows filtering by evaluation cycle, employee, and other
 * criteria using a flexible request body schema. Pagination and sorting improve
 * usability for large datasets.
 *
 * Authorization roles include managers who review evaluation histories for
 * compliance, trend tracking, and HR decision making.
 *
 * The response returns paginated evaluation snapshot summaries suitable for
 * listing and detail exploration.
 *
 * @param props.connection
 * @param props.body Filtering, pagination, and sorting parameters for
 *   evaluation snapshots
 * @path /jobPerformanceEval/manager/evaluationSnapshots
 * @accessor api.functional.jobPerformanceEval.manager.evaluationSnapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, pagination, and sorting parameters for evaluation
     * snapshots
     */
    body: IJobPerformanceEvalEvaluationSnapshots.IRequest;
  };
  export type Body = IJobPerformanceEvalEvaluationSnapshots.IRequest;
  export type Response = IPageIJobPerformanceEvalEvaluationSnapshots.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/evaluationSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/evaluationSnapshots";
  export const random =
    (): IPageIJobPerformanceEvalEvaluationSnapshots.ISummary =>
      typia.random<IPageIJobPerformanceEvalEvaluationSnapshots.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific job performance evaluation snapshot by ID.
 *
 * Retrieve a detailed snapshot of job performance evaluation for a specific
 * evaluation record identified by its unique ID. This snapshot includes both
 * employee self-assessment and manager evaluation scores across multiple
 * categories such as work performance, knowledge/skills, problem-solving and
 * collaboration, and innovation.
 *
 * The operation retrieves data from the
 * job_performance_eval_evaluation_snapshots table, which serves as an immutable
 * historical record for evaluations conducted during specific evaluation
 * cycles. It includes timestamps and supports soft deletion for logical record
 * management.
 *
 * Security considerations require that only authorized users such as HR
 * personnel, managers, or administrators access this detailed data. Proper
 * validation of the snapshot ID is necessary to avoid invalid or unauthorized
 * data access.
 *
 * This operation returns the full detailed evaluation snapshot, useful for
 * report generation, historical analysis, and audit compliance. No request body
 * is required as this is a read-only GET operation. Errors such as not found or
 * unauthorized access should be handled at the application layer.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation snapshot to retrieve
 * @path /jobPerformanceEval/manager/evaluationSnapshots/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationSnapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the evaluation snapshot to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalEvaluationSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/evaluationSnapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/evaluationSnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEvaluationSnapshot =>
    typia.random<IJobPerformanceEvalEvaluationSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
