import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalTeamStatistic } from "../../../../structures/IJobPerformanceEvalTeamStatistic";
import { IPageIJobPerformanceEvalTeamStatistic } from "../../../../structures/IPageIJobPerformanceEvalTeamStatistic";

/**
 * Search and retrieve paginated job performance evaluation team statistics.
 *
 * Search and retrieve aggregated team statistics from job performance
 * evaluations. Users can apply various filters such as evaluation cycle,
 * organizational team, and date ranges, and receive paginated results sorted by
 * score averages or evaluation counts.
 *
 * The data source is the job_performance_eval_team_statistics table which
 * contains average scores across performance categories and evaluation counts.
 * This data supports management and HR in assessing team-level evaluation
 * outcomes over time.
 *
 * Security requires role-based access control; typically, only HR, managers, or
 * administrators can perform this search.
 *
 * The request body supports complex query conditions, including pagination
 * parameters to control result size and sorting options. The response includes
 * team statistics summaries for each team matching the criteria.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for team
 *   statistics filtering
 * @path /jobPerformanceEval/manager/teamStatistics
 * @accessor api.functional.jobPerformanceEval.manager.teamStatistics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for team statistics
     * filtering
     */
    body: IJobPerformanceEvalTeamStatistic.IRequest;
  };
  export type Body = IJobPerformanceEvalTeamStatistic.IRequest;
  export type Response = IPageIJobPerformanceEvalTeamStatistic.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/teamStatistics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/teamStatistics";
  export const random = (): IPageIJobPerformanceEvalTeamStatistic.ISummary =>
    typia.random<IPageIJobPerformanceEvalTeamStatistic.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific job performance evaluation team statistic by ID.
 *
 * Retrieve detailed job performance evaluation statistics for a specific team
 * identified by its unique ID. This includes average scores in work
 * performance, knowledge, problem-solving, and innovation metrics aggregated
 * over the evaluation cycle.
 *
 * The data is sourced from the job_performance_eval_team_statistics table
 * representing summarized team-level evaluation data. The operation supports
 * fetching immutable records including timestamps and handles soft deletion
 * logic.
 *
 * Security considerations restrict access to authorized personnel only.
 * Appropriate validation and error handling are expected to ensure data
 * accuracy and secure access.
 *
 * This GET operation requires the statistics record ID as a path parameter and
 * returns the detailed record data without a request body.
 *
 * @param props.connection
 * @param props.id Unique identifier of the team statistic record
 * @path /jobPerformanceEval/manager/teamStatistics/:id
 * @accessor api.functional.jobPerformanceEval.manager.teamStatistics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the team statistic record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalTeamStatistic;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/teamStatistics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/teamStatistics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalTeamStatistic =>
    typia.random<IJobPerformanceEvalTeamStatistic>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
