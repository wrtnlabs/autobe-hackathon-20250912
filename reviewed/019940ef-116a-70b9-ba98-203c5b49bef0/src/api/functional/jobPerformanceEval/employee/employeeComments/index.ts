import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalEmployeeComments } from "../../../../structures/IJobPerformanceEvalEmployeeComments";
import { IPageIJobPerformanceEvalEmployeeComments } from "../../../../structures/IPageIJobPerformanceEvalEmployeeComments";

/**
 * Create a new employee comment with required fields employee ID, evaluation
 * cycle ID, and comment text.
 *
 * Only accessible to users with role 'employee'.
 *
 * @param props.connection
 * @param props.body Data required to create an employee comment
 * @path /jobPerformanceEval/employee/employeeComments
 * @accessor api.functional.jobPerformanceEval.employee.employeeComments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create an employee comment */
    body: IJobPerformanceEvalEmployeeComments.ICreate;
  };
  export type Body = IJobPerformanceEvalEmployeeComments.ICreate;
  export type Response = IJobPerformanceEvalEmployeeComments;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/employee/employeeComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/employeeComments";
  export const random = (): IJobPerformanceEvalEmployeeComments =>
    typia.random<IJobPerformanceEvalEmployeeComments>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve employee comments.
 *
 * Retrieve a paginated list of employee comments on job performance evaluations
 * with support for search, filtering, and pagination.
 *
 * Employee comments capture qualitative feedback linked to evaluation cycles
 * for context.
 *
 * Authorization roles: 'employee' and 'manager'.
 *
 * Request Body: Search criteria and pagination details. Response Body:
 * Paginated list of employee comments summaries.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for employee comments
 * @path /jobPerformanceEval/employee/employeeComments
 * @accessor api.functional.jobPerformanceEval.employee.employeeComments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for employee comments */
    body: IJobPerformanceEvalEmployeeComments.IRequest;
  };
  export type Body = IJobPerformanceEvalEmployeeComments.IRequest;
  export type Response = IPageIJobPerformanceEvalEmployeeComments.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/employee/employeeComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/employeeComments";
  export const random = (): IPageIJobPerformanceEvalEmployeeComments.ISummary =>
    typia.random<IPageIJobPerformanceEvalEmployeeComments.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get employee comment details by ID.
 *
 * Get detailed information of an employee comment by its unique UUID `id`.
 *
 * Includes comment text, association to employee and evaluation cycle, and
 * timestamps.
 *
 * Authorization roles: 'employee' and 'manager'.
 *
 * @param props.connection
 * @param props.id Unique identifier of the employee comment
 * @path /jobPerformanceEval/employee/employeeComments/:id
 * @accessor api.functional.jobPerformanceEval.employee.employeeComments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the employee comment */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalEmployeeComments;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/employee/employeeComments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/employeeComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEmployeeComments =>
    typia.random<IJobPerformanceEvalEmployeeComments>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an employee comment by ID.
 *
 * Update an existing employee comment by its unique ID.
 *
 * This operation modifies the comment text of the employee comment record. The
 * record is identified using the employee comment's unique UUID path parameter.
 * The updated comment must comply with content length and format policies and
 * is linked to an employee and an evaluation cycle in the database.
 *
 * Only authenticated users with employee role authorization may perform this
 * update. The operation ensures that the related audit fields such as
 * updated_at are managed accordingly.
 *
 * No other record fields such as employee ID or evaluation cycle ID can be
 * changed using this method. The operation supports soft deletion logic
 * internally but does not expose soft delete via API.
 *
 * This API is integral for managing employee-submitted qualitative remarks
 * within the Job Performance Evaluation service.
 *
 * @param props.connection
 * @param props.id Unique identifier of the employee comment to update
 * @param props.body New content for the employee comment
 * @path /jobPerformanceEval/employee/employeeComments/:id
 * @accessor api.functional.jobPerformanceEval.employee.employeeComments.updateEmployeeComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateEmployeeComment(
  connection: IConnection,
  props: updateEmployeeComment.Props,
): Promise<updateEmployeeComment.Response> {
  return true === connection.simulate
    ? updateEmployeeComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateEmployeeComment.METADATA,
          path: updateEmployeeComment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateEmployeeComment {
  export type Props = {
    /** Unique identifier of the employee comment to update */
    id: string & tags.Format<"uuid">;

    /** New content for the employee comment */
    body: IJobPerformanceEvalEmployeeComments.IUpdate;
  };
  export type Body = IJobPerformanceEvalEmployeeComments.IUpdate;
  export type Response = IJobPerformanceEvalEmployeeComments;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/employee/employeeComments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/employeeComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEmployeeComments =>
    typia.random<IJobPerformanceEvalEmployeeComments>();
  export const simulate = (
    connection: IConnection,
    props: updateEmployeeComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateEmployeeComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an employee comment by ID.
 *
 * This operation permanently removes the employee comment record from the
 * database, identified by the UUID path parameter.
 *
 * Only users authenticated as employees can perform this deletion. Once
 * deleted, the comment cannot be restored through this API.
 *
 * This endpoint is critical for users managing their qualitative feedback and
 * comments related to their evaluations within the system.
 *
 * @param props.connection
 * @param props.id Unique identifier of the employee comment to delete
 * @path /jobPerformanceEval/employee/employeeComments/:id
 * @accessor api.functional.jobPerformanceEval.employee.employeeComments.eraseEmployeeComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseEmployeeComment(
  connection: IConnection,
  props: eraseEmployeeComment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseEmployeeComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseEmployeeComment.METADATA,
          path: eraseEmployeeComment.path(props),
          status: null,
        },
      );
}
export namespace eraseEmployeeComment {
  export type Props = {
    /** Unique identifier of the employee comment to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/employee/employeeComments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/employeeComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseEmployeeComment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseEmployeeComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
