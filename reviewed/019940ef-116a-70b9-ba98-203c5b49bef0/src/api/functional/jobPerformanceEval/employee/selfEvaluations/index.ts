import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalSelfEvaluation } from "../../../../structures/IJobPerformanceEvalSelfEvaluation";
import { IPageIJobPerformanceEvalSelfEvaluation } from "../../../../structures/IPageIJobPerformanceEvalSelfEvaluation";

/**
 * Create a new self-evaluation record for an employee.
 *
 * This API operation enables authenticated employees (role: employee) to create
 * a self-evaluation for a specified evaluation cycle. The self-evaluation
 * includes integer scores ranging from 1 to 5 for work performance level,
 * knowledge/skill, problem solving and collaboration, and innovation. A
 * mandatory overall comment summarizing their self-assessment must also be
 * provided.
 *
 * This operation requires employee authentication and authorization, linking
 * the evaluation to the specific employee and evaluation cycle. It stores
 * timestamps for creation and updates for auditing, and supports soft deletion
 * for data lifecycle management.
 *
 * The API complements read operations used by employees and managers to
 * retrieve evaluations and related comments, supporting comprehensive
 * evaluation data governance.
 *
 * @param props.connection
 * @param props.body Input data for creating a self-evaluation record, including
 *   scores and evaluation cycle reference
 * @path /jobPerformanceEval/employee/selfEvaluations
 * @accessor api.functional.jobPerformanceEval.employee.selfEvaluations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Input data for creating a self-evaluation record, including scores
     * and evaluation cycle reference
     */
    body: IJobPerformanceEvalSelfEvaluation.ICreate;
  };
  export type Body = IJobPerformanceEvalSelfEvaluation.ICreate;
  export type Response = IJobPerformanceEvalSelfEvaluation;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/employee/selfEvaluations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/selfEvaluations";
  export const random = (): IJobPerformanceEvalSelfEvaluation =>
    typia.random<IJobPerformanceEvalSelfEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated employee self-evaluations.
 *
 * This API endpoint allows clients to search and retrieve a filtered, paginated
 * list of employee self-evaluations. These self-evaluations include scores for
 * job performance, knowledge/skill proficiency, problem solving, collaboration,
 * and innovation, submitted by employees during defined evaluation cycles.
 *
 * The request body accepts detailed search criteria allowing filtering by
 * employee, evaluation cycle, score thresholds, and other relevant parameters
 * to narrow results. Pagination controls enable clients to fetch manageable
 * pages of data.
 *
 * The response provides summarized information on each self-evaluation,
 * optimized for list views. Authorization restricts access to authorized roles
 * such as employees and managers.
 *
 * This operation corresponds to the job_performance_eval_self_evaluations
 * table, facilitating review and management of evaluation records.
 *
 * @param props.connection
 * @param props.body Search criteria for employee self-evaluations
 * @path /jobPerformanceEval/employee/selfEvaluations
 * @accessor api.functional.jobPerformanceEval.employee.selfEvaluations.searchSelfEvaluations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchSelfEvaluations(
  connection: IConnection,
  props: searchSelfEvaluations.Props,
): Promise<searchSelfEvaluations.Response> {
  return true === connection.simulate
    ? searchSelfEvaluations.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchSelfEvaluations.METADATA,
          path: searchSelfEvaluations.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchSelfEvaluations {
  export type Props = {
    /** Search criteria for employee self-evaluations */
    body: IJobPerformanceEvalSelfEvaluation.IRequest;
  };
  export type Body = IJobPerformanceEvalSelfEvaluation.IRequest;
  export type Response = IPageIJobPerformanceEvalSelfEvaluation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/employee/selfEvaluations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/selfEvaluations";
  export const random = (): IPageIJobPerformanceEvalSelfEvaluation.ISummary =>
    typia.random<IPageIJobPerformanceEvalSelfEvaluation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchSelfEvaluations.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchSelfEvaluations.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific employee self-evaluation by ID.
 *
 * This API endpoint fetches complete details of a single employee
 * self-evaluation, identified by its unique ID in UUID format.
 *
 * Clients must provide the self-evaluation ID as a path parameter. The response
 * includes all evaluation scores, comments, and metadata associated with that
 * evaluation.
 *
 * Access is restricted to authorized users, ensuring privacy and data
 * protection.
 *
 * This operation maps to the job_performance_eval_self_evaluations table in
 * Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target self-evaluation
 * @path /jobPerformanceEval/employee/selfEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.employee.selfEvaluations.atSelfEvaluation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSelfEvaluation(
  connection: IConnection,
  props: atSelfEvaluation.Props,
): Promise<atSelfEvaluation.Response> {
  return true === connection.simulate
    ? atSelfEvaluation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSelfEvaluation.METADATA,
          path: atSelfEvaluation.path(props),
          status: null,
        },
      );
}
export namespace atSelfEvaluation {
  export type Props = {
    /** Unique identifier of the target self-evaluation */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalSelfEvaluation;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/employee/selfEvaluations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/selfEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalSelfEvaluation =>
    typia.random<IJobPerformanceEvalSelfEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: atSelfEvaluation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSelfEvaluation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing self-evaluation record by ID.
 *
 * This API operation allows authenticated employees (role: employee) to update
 * their own self-evaluation record by its unique ID. Scores for work
 * performance, knowledge/skill, problem solving and collaboration, and
 * innovation can be modified, along with the mandatory overall comment.
 *
 * The update enforces ownership and authorization checks and updates timestamps
 * for audit purposes. Soft deletion is respected to maintain data integrity and
 * history.
 *
 * This endpoint facilitates corrections before finalizing the evaluation
 * submission during the evaluation period.
 *
 * @param props.connection
 * @param props.id Unique identifier of the self-evaluation record to update
 * @param props.body Fields to update in the self-evaluation record
 * @path /jobPerformanceEval/employee/selfEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.employee.selfEvaluations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the self-evaluation record to update */
    id: string & tags.Format<"uuid">;

    /** Fields to update in the self-evaluation record */
    body: IJobPerformanceEvalSelfEvaluation.IUpdate;
  };
  export type Body = IJobPerformanceEvalSelfEvaluation.IUpdate;
  export type Response = IJobPerformanceEvalSelfEvaluation;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/employee/selfEvaluations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/selfEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalSelfEvaluation =>
    typia.random<IJobPerformanceEvalSelfEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a self-evaluation record by ID.
 *
 * This API operation allows employees (role: employee) to soft delete their
 * self-evaluation record using the record's UUID. The system sets the
 * deleted_at timestamp instead of permanently deleting the record, ensuring
 * logical removal while maintaining data integrity and history.
 *
 * Authorization checks ensure only permitted users may perform this operation.
 * No content is returned upon success.
 *
 * This complements create and update operations in lifecycle management of
 * evaluation data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the self-evaluation record to delete
 * @path /jobPerformanceEval/employee/selfEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.employee.selfEvaluations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the self-evaluation record to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/employee/selfEvaluations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/selfEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
