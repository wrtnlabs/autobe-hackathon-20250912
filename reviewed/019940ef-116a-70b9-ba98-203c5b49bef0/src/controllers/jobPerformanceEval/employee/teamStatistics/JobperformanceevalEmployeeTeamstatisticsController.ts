import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalEmployeeTeamStatistics } from "../../../../providers/patchjobPerformanceEvalEmployeeTeamStatistics";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { getjobPerformanceEvalEmployeeTeamStatisticsId } from "../../../../providers/getjobPerformanceEvalEmployeeTeamStatisticsId";

import { IPageIJobPerformanceEvalTeamStatistic } from "../../../../api/structures/IPageIJobPerformanceEvalTeamStatistic";
import { IJobPerformanceEvalTeamStatistic } from "../../../../api/structures/IJobPerformanceEvalTeamStatistic";

@Controller("/jobPerformanceEval/employee/teamStatistics")
export class JobperformanceevalEmployeeTeamstatisticsController {
  /**
   * Search and retrieve paginated job performance evaluation team statistics.
   *
   * Search and retrieve aggregated team statistics from job performance
   * evaluations. Users can apply various filters such as evaluation cycle,
   * organizational team, and date ranges, and receive paginated results sorted
   * by score averages or evaluation counts.
   *
   * The data source is the job_performance_eval_team_statistics table which
   * contains average scores across performance categories and evaluation
   * counts. This data supports management and HR in assessing team-level
   * evaluation outcomes over time.
   *
   * Security requires role-based access control; typically, only HR, managers,
   * or administrators can perform this search.
   *
   * The request body supports complex query conditions, including pagination
   * parameters to control result size and sorting options. The response
   * includes team statistics summaries for each team matching the criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for team statistics
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalTeamStatistic.IRequest,
  ): Promise<IPageIJobPerformanceEvalTeamStatistic.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeTeamStatistics({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific job performance evaluation team statistic by ID.
   *
   * Retrieve detailed job performance evaluation statistics for a specific team
   * identified by its unique ID. This includes average scores in work
   * performance, knowledge, problem-solving, and innovation metrics aggregated
   * over the evaluation cycle.
   *
   * The data is sourced from the job_performance_eval_team_statistics table
   * representing summarized team-level evaluation data. The operation supports
   * fetching immutable records including timestamps and handles soft deletion
   * logic.
   *
   * Security considerations restrict access to authorized personnel only.
   * Appropriate validation and error handling are expected to ensure data
   * accuracy and secure access.
   *
   * This GET operation requires the statistics record ID as a path parameter
   * and returns the detailed record data without a request body.
   *
   * @param connection
   * @param id Unique identifier of the team statistic record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalTeamStatistic> {
    try {
      return await getjobPerformanceEvalEmployeeTeamStatisticsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
