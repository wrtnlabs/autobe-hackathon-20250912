import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries } from "../../../../../providers/postjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries";
import { EmployeeAuth } from "../../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries } from "../../../../../providers/patchjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries";
import { getjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId } from "../../../../../providers/getjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId";
import { putjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId } from "../../../../../providers/putjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId";
import { deletejobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId } from "../../../../../providers/deletejobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId";

import { IJobPerformanceEvalJobSeries } from "../../../../../api/structures/IJobPerformanceEvalJobSeries";
import { IPageIJobPerformanceEvalJobSeries } from "../../../../../api/structures/IPageIJobPerformanceEvalJobSeries";

@Controller("/jobPerformanceEval/employee/jobGroups/:jobGroupId/jobSeries")
export class JobperformanceevalEmployeeJobgroupsJobseriesController {
  /**
   * Create a new job series under a job group.
   *
   * Create a new job series under the specified job group. The input includes
   * details needed to define the job series such as its unique code, name, and
   * description optionally.
   *
   * The operation respects the relationship to the parent job group to maintain
   * organizational hierarchy. Access control limits this operation to employees
   * and managers with appropriate authorization.
   *
   * A successful creation returns the full details of the newly created job
   * series entry.
   *
   * @param connection
   * @param jobGroupId Unique identifier of the target job group
   * @param body Creation data for a new job series
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobGroupId")
    jobGroupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobSeries.ICreate,
  ): Promise<IJobPerformanceEvalJobSeries> {
    try {
      return await postjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries({
        employee,
        jobGroupId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search job series within a specific job group.
   *
   * Retrieve a filtered and paginated list of job series under a specified job
   * group. This operation provides detailed access to job series data within
   * the context of the job group identified by the path parameter 'jobGroupId'.
   * Users with roles 'employee' or 'manager' can perform advanced searches and
   * sorting to locate particular job series relevant to organizational
   * management.
   *
   * Security considerations include role-based access control, ensuring only
   * employees and managers authorized for the job group can access job series
   * data. The operation correlates directly with the
   * 'job_performance_eval_job_series' table in the Prisma schema, utilizing
   * properties such as 'code', 'name', 'description', and relational
   * constraints referencing the parent job group.
   *
   * This endpoint supports pagination and search criteria passed in the request
   * body to enable scalable data retrieval. The response includes a paginated
   * list of summarized job series entries optimized for list displays.
   *
   * @param connection
   * @param jobGroupId Unique identifier of the target job group
   * @param body Search criteria and pagination parameters for job series
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobGroupId")
    jobGroupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobSeries.IRequest,
  ): Promise<IPageIJobPerformanceEvalJobSeries.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeries({
        employee,
        jobGroupId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific job series by ID within a job group.
   *
   * Retrieve detailed information about a specific job series within the given
   * job group. This endpoint provides comprehensive data stored in the
   * 'job_performance_eval_job_series' table including unique code, name,
   * description, creation and modification timestamps.
   *
   * Security considerations ensure that only authorized employees or managers
   * can access this detailed information. The operation validates 'jobGroupId'
   * and 'jobSeriesId' parameters to correctly locate the requested job series.
   *
   * This operation is essential for UI detail views or administrative workflows
   * requiring single job series data retrieval.
   *
   * @param connection
   * @param jobGroupId Unique identifier of the target job group
   * @param jobSeriesId Unique identifier of the target job series
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobSeriesId")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobGroupId")
    jobGroupId: string & tags.Format<"uuid">,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalJobSeries> {
    try {
      return await getjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId(
        {
          employee,
          jobGroupId,
          jobSeriesId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific job series within a job group.
   *
   * Update an existing job series under the given job group. Input data may
   * include updates to the job series code, name, and description.
   *
   * The operation ensures the target job series identified by path parameters
   * exists and is properly linked to the specified job group.
   *
   * Role-based access restricts operation to authorized employees and managers.
   *
   * Return data includes the updated details after successful update.
   *
   * @param connection
   * @param jobGroupId Unique identifier of the target job group
   * @param jobSeriesId Unique identifier of the target job series
   * @param body Updated data for the job series
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jobSeriesId")
  public async update(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobGroupId")
    jobGroupId: string & tags.Format<"uuid">,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobSeries.IUpdate,
  ): Promise<IJobPerformanceEvalJobSeries> {
    try {
      return await putjobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId(
        {
          employee,
          jobGroupId,
          jobSeriesId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific job series by ID within a job group.
   *
   * This DELETE operation targets the job_performance_eval_job_series table,
   * allowing authorized users to permanently remove a specific job series by
   * its unique identifier.
   *
   * As the job series is hierarchically linked to a job group, this endpoint
   * requires both the jobGroupId and jobSeriesId path parameters for precise
   * identification.
   *
   * The system performs a hard delete; records are irreversibly removed from
   * the database with no recovery option. Appropriate authorization checks
   * ensure that only users with roles 'employee' or 'manager' can access this
   * endpoint to protect data integrity.
   *
   * No response body is returned upon successful deletion. Error handling
   * includes notifying the client if the specified job series does not exist or
   * unauthorized access is attempted.
   *
   * @param connection
   * @param jobGroupId UUID of the parent job group for context
   * @param jobSeriesId UUID of the target job series to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jobSeriesId")
  public async erase(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobGroupId")
    jobGroupId: string & tags.Format<"uuid">,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeJobGroupsJobGroupIdJobSeriesJobSeriesId(
        {
          employee,
          jobGroupId,
          jobSeriesId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
