import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalEmployeeJobGroups } from "../../../../providers/patchjobPerformanceEvalEmployeeJobGroups";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { getjobPerformanceEvalEmployeeJobGroupsId } from "../../../../providers/getjobPerformanceEvalEmployeeJobGroupsId";

import { IPageIJobPerformanceEvalJobGroups } from "../../../../api/structures/IPageIJobPerformanceEvalJobGroups";
import { IJobPerformanceEvalJobGroups } from "../../../../api/structures/IJobPerformanceEvalJobGroups";
import { IJobPerformanceEvalJobGroup } from "../../../../api/structures/IJobPerformanceEvalJobGroup";

@Controller("/jobPerformanceEval/employee/jobGroups")
export class JobperformanceevalEmployeeJobgroupsController {
  /**
   * Search and retrieve paginated list of job groups.
   *
   * Retrieve filtered and paginated list of job groups in the job performance
   * evaluation system. The operation supports criteria such as code, name, and
   * creation range filtering.
   *
   * Job groups represent the highest level category of job hierarchy managed
   * within the system.
   *
   * This API endpoint provides pagination and sorting features for efficient
   * data handling.
   *
   * Only authorized users with employee or manager permissions can access this
   * resource.
   *
   * The response provides summarized data of job groups suitable for listings.
   *
   * @param connection
   * @param body Job group search and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalJobGroups.IRequest,
  ): Promise<IPageIJobPerformanceEvalJobGroups.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeJobGroups({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a job group by its ID from the job_performance_eval_job_groups
   * table.
   *
   * Retrieve detailed information of a specific job group identified by its
   * unique ID.
   *
   * This API retrieves data from the job_performance_eval_job_groups table,
   * including the unique code, name, and optional description of the job group.
   * It is intended for authenticated users who need to view job group details
   * for management or reporting purposes.
   *
   * Security considerations include requiring authenticated access to prevent
   * unauthorized data exposure. The system validates the UUID format of the job
   * group ID.
   *
   * Related operations include creating, updating, and deleting job groups
   * which manage the lifecycle of job group records.
   *
   * This operation returns the full job group data including timestamps for
   * creation and last update.
   *
   * Errors such as not found or invalid ID format will result in appropriate
   * HTTP error responses.
   *
   * @param connection
   * @param id Unique identifier of the job group (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalJobGroup> {
    try {
      return await getjobPerformanceEvalEmployeeJobGroupsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
