import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getjobPerformanceEvalEmployeeEmployeesId } from "../../../../providers/getjobPerformanceEvalEmployeeEmployeesId";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { putjobPerformanceEvalEmployeeEmployeesId } from "../../../../providers/putjobPerformanceEvalEmployeeEmployeesId";

import { IJobPerformanceEvalEmployee } from "../../../../api/structures/IJobPerformanceEvalEmployee";

@Controller("/jobPerformanceEval/employee/employees/:id")
export class JobperformanceevalEmployeeEmployeesController {
  /**
   * Retrieve detailed information of a specific employee by ID.
   *
   * This GET API endpoint allows clients to fetch the personal and
   * authentication-related information of a single employee identified by their
   * unique UUID. It provides essential details such as employee email and name,
   * which are fundamental for identification and notification purposes within
   * the Job Performance Evaluation system.
   *
   * Access to this resource is restricted to authenticated employees or
   * managers who require employee information for management or operational
   * tasks.
   *
   * The operation directly queries the job_performance_eval_employees table in
   * the database, ensuring the latest data is retrieved, including timestamps
   * for creation and updates. Since employee data is sensitive, authorization
   * and authentication measures are enforced.
   *
   * Error handling includes returning an appropriate error if the employee ID
   * does not exist. This endpoint is foundational for user profile management
   * and further operations involving employee-related data.
   *
   * @param connection
   * @param id Unique identifier of the target employee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEmployee> {
    try {
      return await getjobPerformanceEvalEmployeeEmployeesId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing employee information by ID.
   *
   * This PUT API endpoint allows modification of an existing employee's data
   * identified by their unique UUID. The operation supports updating employee
   * email, hashed password, and name fields which are necessary for
   * authentication and personal records.
   *
   * The endpoint is critical for user account management workflows, enabling
   * updates to credentials and identifying information. The system expects
   * input to comply with validation rules, including unique email constraints
   * and secure password hashing.
   *
   * Security considerations include ensuring only authorized users with
   * appropriate role-based access can perform updates. Input validation and
   * error handling are key to prevent inconsistent or duplicate data.
   *
   * The operation interacts with the job_performance_eval_employees table,
   * updating the record while preserving timestamp fields for record creation,
   * updates, and soft deletion. It returns the updated employee data upon
   * success.
   *
   * @param connection
   * @param id Unique identifier of the target employee
   * @param body Updated employee data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalEmployee.IUpdate,
  ): Promise<IJobPerformanceEvalEmployee> {
    try {
      return await putjobPerformanceEvalEmployeeEmployeesId({
        employee,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
