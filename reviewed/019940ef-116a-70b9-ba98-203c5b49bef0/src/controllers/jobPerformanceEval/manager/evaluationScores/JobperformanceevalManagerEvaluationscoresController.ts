import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalManagerEvaluationScores } from "../../../../providers/postjobPerformanceEvalManagerEvaluationScores";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { patchjobPerformanceEvalManagerEvaluationScores } from "../../../../providers/patchjobPerformanceEvalManagerEvaluationScores";
import { getjobPerformanceEvalManagerEvaluationScoresId } from "../../../../providers/getjobPerformanceEvalManagerEvaluationScoresId";
import { putjobPerformanceEvalManagerEvaluationScoresId } from "../../../../providers/putjobPerformanceEvalManagerEvaluationScoresId";

import { IJobPerformanceEvalEvaluationScore } from "../../../../api/structures/IJobPerformanceEvalEvaluationScore";
import { IPageIJobPerformanceEvalEvaluationScore } from "../../../../api/structures/IPageIJobPerformanceEvalEvaluationScore";

@Controller("/jobPerformanceEval/manager/evaluationScores")
export class JobperformanceevalManagerEvaluationscoresController {
  /**
   * Create evaluation score record.
   *
   * Create a new job performance evaluation score record.
   *
   * Requires an evaluation ID referencing either a self or manager evaluation,
   * a category name (e.g., work_performance), and an integer score between 1
   * and 5.
   *
   * Access is restricted to authorized users with roles 'employee' and
   * 'manager'.
   *
   * On success, returns the full created evaluation score record with
   * timestamps.
   *
   * Errors occur if evaluation ID is invalid or score outside allowed range.
   *
   * This operation is part of the full CRUD lifecycle for evaluation score
   * management.
   *
   * @param connection
   * @param body Payload data to create a new evaluation score record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationScore.ICreate,
  ): Promise<IJobPerformanceEvalEvaluationScore> {
    try {
      return await postjobPerformanceEvalManagerEvaluationScores({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of evaluation scores.
   *
   * Retrieve a paginated collection of job performance evaluation scores
   * matching specified search and filter criteria.
   *
   * This operation enables users to query evaluation scores across categories
   * and evaluations, with support for pagination and sorting to manage large
   * datasets efficiently.
   *
   * Security considerations enforce role-based access control, ensuring that
   * only users with 'employee' or 'manager' roles can access this data.
   *
   * The endpoint maps to the job_performance_eval_evaluation_scores table in
   * the database, guaranteeing accurate and up-to-date evaluation scoring
   * information.
   *
   * Related API operations include fetching individual evaluation scores by ID,
   * creating new score entries, and updating existing records.
   *
   * @param connection
   * @param body Request payload for filtering and paging job performance
   *   evaluation scores
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationScore.IRequest,
  ): Promise<IPageIJobPerformanceEvalEvaluationScore> {
    try {
      return await patchjobPerformanceEvalManagerEvaluationScores({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get job performance evaluation score by ID.
   *
   * Fetch detailed information of a single evaluation score by its unique
   * identifier.
   *
   * The operation ensures retrieval of all relevant properties including
   * evaluation linkage, category, score, and audit timestamps.
   *
   * Permissions restrict access to users with 'employee' or 'manager' roles.
   *
   * This API complements the listing, creation, and update operations for
   * evaluation scores, facilitating comprehensive management of evaluation
   * data.
   *
   * @param connection
   * @param id Unique identifier of the evaluation score
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEvaluationScore> {
    try {
      return await getjobPerformanceEvalManagerEvaluationScoresId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update evaluation score record by ID.
   *
   * Update an existing job performance evaluation score by its unique ID.
   *
   * Allows updating the category and score values while keeping the evaluation
   * ID immutable.
   *
   * Access restricted to users with 'employee' or 'manager' roles.
   *
   * Returns the updated evaluation score record including timestamps.
   *
   * Handles errors such as invalid IDs or data validation failures.
   *
   * Complements creation, retrieval, and listing APIs for comprehensive score
   * management.
   *
   * @param connection
   * @param id Unique identifier of the evaluation score to update
   * @param body Payload data to update evaluation score fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationScore.IUpdate,
  ): Promise<IJobPerformanceEvalEvaluationScore> {
    try {
      return await putjobPerformanceEvalManagerEvaluationScoresId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
