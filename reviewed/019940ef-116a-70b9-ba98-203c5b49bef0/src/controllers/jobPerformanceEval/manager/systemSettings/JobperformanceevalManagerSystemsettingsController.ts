import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerSystemSettings } from "../../../../providers/patchjobPerformanceEvalManagerSystemSettings";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerSystemSettingsId } from "../../../../providers/getjobPerformanceEvalManagerSystemSettingsId";

import { IPageIJobPerformanceEvalSystemSettings } from "../../../../api/structures/IPageIJobPerformanceEvalSystemSettings";
import { IJobPerformanceEvalSystemSettings } from "../../../../api/structures/IJobPerformanceEvalSystemSettings";

@Controller("/jobPerformanceEval/manager/systemSettings")
export class JobperformanceevalManagerSystemsettingsController {
  /**
   * Search and retrieve paginated list of system settings.
   *
   * Search and retrieve paginated list of job performance evaluation system
   * settings. Supports filtering by setting key, value, and description with
   * pagination parameters in the request.
   *
   * Access is typically restricted to users with administrative privileges such
   * as managers.
   *
   * This is a PATCH request with a structured request body that defines search
   * filters. Response includes paginated system settings data.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering system
   *   settings
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalSystemSettings.IRequest,
  ): Promise<IPageIJobPerformanceEvalSystemSettings> {
    try {
      return await patchjobPerformanceEvalManagerSystemSettings({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get system setting details by ID.
   *
   * Retrieve the full details of a job performance evaluation system setting
   * via its unique identifier.
   *
   * Security access is usually granted to manager roles or equivalent
   * administrators.
   *
   * The response contains all properties of the system setting record.
   *
   * @param connection
   * @param id Unique UUID of the system setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalSystemSettings> {
    try {
      return await getjobPerformanceEvalManagerSystemSettingsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
