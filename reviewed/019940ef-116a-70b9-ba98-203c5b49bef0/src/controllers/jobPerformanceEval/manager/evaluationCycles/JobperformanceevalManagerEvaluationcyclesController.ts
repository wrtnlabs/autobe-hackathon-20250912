import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalManagerEvaluationCycles } from "../../../../providers/postjobPerformanceEvalManagerEvaluationCycles";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { patchjobPerformanceEvalManagerEvaluationCycles } from "../../../../providers/patchjobPerformanceEvalManagerEvaluationCycles";
import { getjobPerformanceEvalManagerEvaluationCyclesId } from "../../../../providers/getjobPerformanceEvalManagerEvaluationCyclesId";
import { putjobPerformanceEvalManagerEvaluationCyclesId } from "../../../../providers/putjobPerformanceEvalManagerEvaluationCyclesId";
import { deletejobPerformanceEvalManagerEvaluationCyclesId } from "../../../../providers/deletejobPerformanceEvalManagerEvaluationCyclesId";

import { IJobPerformanceEvalEvaluationCycle } from "../../../../api/structures/IJobPerformanceEvalEvaluationCycle";
import { IPageIJobPerformanceEvalEvaluationCycle } from "../../../../api/structures/IPageIJobPerformanceEvalEvaluationCycle";

@Controller("/jobPerformanceEval/manager/evaluationCycles")
export class JobperformanceevalManagerEvaluationcyclesController {
  /**
   * Create a new evaluation cycle.
   *
   * Create a new job performance evaluation cycle with specified code, name,
   * dates, and active status.
   *
   * Authorized users can define new evaluation periods to manage cycles of
   * employee and manager assessments.
   *
   * Validation of unique cycle code and proper date intervals is enforced to
   * maintain data integrity.
   *
   * The operation inserts a new record into the
   * 'job_performance_eval_evaluation_cycles' table and returns the created
   * entity.
   *
   * Only authorized users may perform this operation.
   *
   * @param connection
   * @param body Details required to create an evaluation cycle
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationCycle.ICreate,
  ): Promise<IJobPerformanceEvalEvaluationCycle> {
    try {
      return await postjobPerformanceEvalManagerEvaluationCycles({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered, paginated list of evaluation cycles.
   *
   * Retrieve a paginated list of job performance evaluation cycles allowing
   * clients to filter by properties such as cycle code, cycle name, date
   * ranges, and active status.
   *
   * These cycles represent distinct periods where employee and manager
   * evaluations occur, enabling users to select and manage evaluations within
   * those defined periods.
   *
   * Security considerations include restricting access to authorized roles who
   * can view evaluation periods and ensuring that inactive or deleted cycles
   * can be excluded.
   *
   * This operation interacts with the 'job_performance_eval_evaluation_cycles'
   * table and allows querying across historical and current cycles.
   *
   * Validation rules include verifying that paging and filtering parameters
   * match expected formats and ensuring that only accessible cycles are
   * returned based on user roles.
   *
   * This endpoint is typically combined with detail retrieval and update
   * operations to fully manage evaluation cycles.
   *
   * @param connection
   * @param body Search criteria and pagination settings for evaluation cycles
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationCycle.IRequest,
  ): Promise<IPageIJobPerformanceEvalEvaluationCycle.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerEvaluationCycles({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get evaluation cycle details by ID.
   *
   * Fetch detailed information about a single job performance evaluation cycle
   * by its unique identifier.
   *
   * This enables administrative users to view and validate properties such as
   * start and end dates, cycle codes, and active status.
   *
   * The operation links directly to the
   * 'job_performance_eval_evaluation_cycles' table and supports use cases
   * involving evaluation scheduling and management.
   *
   * Access restrictions apply to prevent unauthorized data exposure.
   *
   * Error handling includes returning appropriate HTTP 404 when the ID is not
   * found and 400 for invalid UUID formats.
   *
   * @param connection
   * @param id Unique identifier of the evaluation cycle
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEvaluationCycle> {
    try {
      return await getjobPerformanceEvalManagerEvaluationCyclesId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update evaluation cycle by ID.
   *
   * Update an existing job performance evaluation cycle identified by ID.
   *
   * Allows modification of properties including cycle code, name, start and end
   * dates, and active status.
   *
   * Ensures that input data respects uniqueness constraints and valid date
   * ranges.
   *
   * This operation updates the record in the
   * 'job_performance_eval_evaluation_cycles' table.
   *
   * Restricted to authorized users to maintain controlled evaluation
   * scheduling.
   *
   * @param connection
   * @param id Unique identifier of the evaluation cycle to update
   * @param body Updated evaluation cycle information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationCycle.IUpdate,
  ): Promise<IJobPerformanceEvalEvaluationCycle> {
    try {
      return await putjobPerformanceEvalManagerEvaluationCyclesId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete job performance evaluation cycle by ID.
   *
   * Delete a job performance evaluation cycle identified by its unique UUID.
   * This operation permanently removes the evaluation cycle record from the
   * database. It has no request body or response body content.
   *
   * Security is critical: This operation should be limited to administrators,
   * as deleting evaluation cycles affects historical data consistency. Proper
   * authorization checks must exist in the implementation layer.
   *
   * The operation strictly maps to physical deletion in the
   * job_performance_eval_evaluation_cycles table with the primary key UUID
   * provided in the path parameter.
   *
   * @param connection
   * @param id Unique identifier of the evaluation cycle to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerEvaluationCyclesId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
