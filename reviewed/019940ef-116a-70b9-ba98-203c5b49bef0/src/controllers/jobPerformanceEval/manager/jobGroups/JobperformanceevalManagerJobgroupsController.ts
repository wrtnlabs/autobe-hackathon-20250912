import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalManagerJobGroups } from "../../../../providers/postjobPerformanceEvalManagerJobGroups";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { patchjobPerformanceEvalManagerJobGroups } from "../../../../providers/patchjobPerformanceEvalManagerJobGroups";
import { getjobPerformanceEvalManagerJobGroupsId } from "../../../../providers/getjobPerformanceEvalManagerJobGroupsId";
import { putjobPerformanceEvalManagerJobGroupsId } from "../../../../providers/putjobPerformanceEvalManagerJobGroupsId";
import { deletejobPerformanceEvalManagerJobGroupsId } from "../../../../providers/deletejobPerformanceEvalManagerJobGroupsId";

import { IJobPerformanceEvalJobGroup } from "../../../../api/structures/IJobPerformanceEvalJobGroup";
import { IPageIJobPerformanceEvalJobGroups } from "../../../../api/structures/IPageIJobPerformanceEvalJobGroups";
import { IJobPerformanceEvalJobGroups } from "../../../../api/structures/IJobPerformanceEvalJobGroups";

@Controller("/jobPerformanceEval/manager/jobGroups")
export class JobperformanceevalManagerJobgroupsController {
  /**
   * Create a new job group in job_performance_eval_job_groups table.
   *
   * Create a new job group entry in the system.
   *
   * This API allows authorized managers to add new job groups used in the
   * organizational hierarchy. The input includes unique code, name, and
   * optional description. The system validates uniqueness of the code.
   *
   * Security measures require 'manager' role authorization to restrict access
   * to authorized personnel only.
   *
   * On success, the API returns the created job group record with detailed
   * attributes including creation and update timestamps.
   *
   * Related operations are retrieving, updating, and deleting job groups.
   *
   * Validation errors or duplicate codes will result in error responses.
   *
   * @param connection
   * @param body Request body to create a job group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalJobGroup.ICreate,
  ): Promise<IJobPerformanceEvalJobGroup> {
    try {
      return await postjobPerformanceEvalManagerJobGroups({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of job groups.
   *
   * Retrieve filtered and paginated list of job groups in the job performance
   * evaluation system. The operation supports criteria such as code, name, and
   * creation range filtering.
   *
   * Job groups represent the highest level category of job hierarchy managed
   * within the system.
   *
   * This API endpoint provides pagination and sorting features for efficient
   * data handling.
   *
   * Only authorized users with employee or manager permissions can access this
   * resource.
   *
   * The response provides summarized data of job groups suitable for listings.
   *
   * @param connection
   * @param body Job group search and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalJobGroups.IRequest,
  ): Promise<IPageIJobPerformanceEvalJobGroups.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerJobGroups({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a job group by its ID from the job_performance_eval_job_groups
   * table.
   *
   * Retrieve detailed information of a specific job group identified by its
   * unique ID.
   *
   * This API retrieves data from the job_performance_eval_job_groups table,
   * including the unique code, name, and optional description of the job group.
   * It is intended for authenticated users who need to view job group details
   * for management or reporting purposes.
   *
   * Security considerations include requiring authenticated access to prevent
   * unauthorized data exposure. The system validates the UUID format of the job
   * group ID.
   *
   * Related operations include creating, updating, and deleting job groups
   * which manage the lifecycle of job group records.
   *
   * This operation returns the full job group data including timestamps for
   * creation and last update.
   *
   * Errors such as not found or invalid ID format will result in appropriate
   * HTTP error responses.
   *
   * @param connection
   * @param id Unique identifier of the job group (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalJobGroup> {
    try {
      return await getjobPerformanceEvalManagerJobGroupsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a job group by its ID in job_performance_eval_job_groups table.
   *
   * Update details of a specific job group by ID.
   *
   * Allows authorized managers to modify existing job group information. Fields
   * such as the code, name, and description can be updated. The system checks
   * for unique code constraints on update.
   *
   * This operation requires path parameter 'id' as UUID to identify the job
   * group. The request body must conform to IJobPerformanceEvalJobGroup.IUpdate
   * type.
   *
   * Security restrictions limit access to 'manager' users.
   *
   * Upon success, returns the updated job group details.
   *
   * Errors include not found, invalid UUID, or validation failures for input
   * fields.
   *
   * Related endpoints include creating and deleting job groups.
   *
   * @param connection
   * @param id Unique identifier of the job group (UUID)
   * @param body Request body to update a job group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobGroup.IUpdate,
  ): Promise<IJobPerformanceEvalJobGroup> {
    try {
      return await putjobPerformanceEvalManagerJobGroupsId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a job group by ID (hard delete) in job_performance_eval_job_groups
   * table.
   *
   * Permanently remove a job group from the system by its ID.
   *
   * This operation performs a hard delete of the job group record from the
   * job_performance_eval_job_groups table. Once deleted, the record cannot be
   * recovered.
   *
   * Because there is no soft delete timestamp in this schema, the deletion is
   * permanent.
   *
   * Path parameter 'id' specifies the target job group's UUID.
   *
   * Access is restricted to 'manager' users to prevent accidental or
   * unauthorized deletion.
   *
   * No request body is required. On success, the operation returns no content.
   *
   * Relevant related operations include retrieval, creation, and update of job
   * groups.
   *
   * @param connection
   * @param id Unique identifier of the job group (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerJobGroupsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
