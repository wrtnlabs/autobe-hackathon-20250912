import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroups } from "../../../../../providers/patchjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroups";
import { ManagerAuth } from "../../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroupsTaskGroupId } from "../../../../../providers/getjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroupsTaskGroupId";

import { IPageIJobPerformanceEvalTaskGroup } from "../../../../../api/structures/IPageIJobPerformanceEvalTaskGroup";
import { IJobPerformanceEvalTaskGroup } from "../../../../../api/structures/IJobPerformanceEvalTaskGroup";

@Controller("/jobPerformanceEval/manager/jobRoles/:jobRoleId/taskGroups")
export class JobperformanceevalManagerJobrolesTaskgroupsController {
  /**
   * List task groups of a job role with filtering.
   *
   * This endpoint returns a filtered and paginated list of task groups under a
   * given job role. Task groups are logical groupings of tasks relevant to the
   * job role, facilitating clearer management and categorization.
   *
   * Users with authorized roles 'employee' or 'manager' can access this list.
   *
   * Filtering, sorting, and pagination parameters can be provided in the
   * request body to refine the results.
   *
   * This operation corresponds to the 'job_performance_eval_task_groups' table,
   * returning summaries of task group entries.
   *
   * The response includes paginated data structured to enable efficient
   * client-side rendering and navigation through potentially large datasets.
   *
   * @param connection
   * @param jobRoleId Unique identifier of the target job role
   * @param body Filtering and pagination criteria for task groups
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskGroup.IRequest,
  ): Promise<IPageIJobPerformanceEvalTaskGroup.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroups({
        manager,
        jobRoleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed task group information by ID.
   *
   * This endpoint fetches detailed information about a specific task group
   * within a job role. Task groups consist of related tasks grouped for better
   * organization and management.
   *
   * The operation relies on 'jobRoleId' and 'taskGroupId' path parameters to
   * locate the targeted task group record in the database.
   *
   * Users with roles 'employee' or 'manager' have access to this endpoint for
   * security reasons.
   *
   * The returned data includes all relevant properties of the task group entity
   * as defined in the Prisma schema, suitable for full detail views or editing
   * interfaces.
   *
   * @param connection
   * @param jobRoleId Unique identifier of the target job role
   * @param taskGroupId Unique identifier of the target task group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskGroupId")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalTaskGroup> {
    try {
      return await getjobPerformanceEvalManagerJobRolesJobRoleIdTaskGroupsTaskGroupId(
        {
          manager,
          jobRoleId,
          taskGroupId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
