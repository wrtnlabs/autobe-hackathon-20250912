import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerEmployees } from "../../../../providers/patchjobPerformanceEvalManagerEmployees";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerEmployeesId } from "../../../../providers/getjobPerformanceEvalManagerEmployeesId";
import { putjobPerformanceEvalManagerEmployeesId } from "../../../../providers/putjobPerformanceEvalManagerEmployeesId";
import { deletejobPerformanceEvalManagerEmployeesId } from "../../../../providers/deletejobPerformanceEvalManagerEmployeesId";

import { IPageIJobPerformanceEvalEmployees } from "../../../../api/structures/IPageIJobPerformanceEvalEmployees";
import { IJobPerformanceEvalEmployees } from "../../../../api/structures/IJobPerformanceEvalEmployees";
import { IJobPerformanceEvalEmployee } from "../../../../api/structures/IJobPerformanceEvalEmployee";

@Controller("/jobPerformanceEval/manager/employees")
export class JobperformanceevalManagerEmployeesController {
  /**
   * List employees with filtering and pagination.
   *
   * Search and retrieve paginated employee list with filtering options.
   *
   * Typically available to managerial users for staff management.
   *
   * Request includes search criteria including pagination. Response returns
   * paged employee summaries.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for employee
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEmployees.IRequest,
  ): Promise<IPageIJobPerformanceEvalEmployees.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerEmployees({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific employee by ID.
   *
   * This GET API endpoint allows clients to fetch the personal and
   * authentication-related information of a single employee identified by their
   * unique UUID. It provides essential details such as employee email and name,
   * which are fundamental for identification and notification purposes within
   * the Job Performance Evaluation system.
   *
   * Access to this resource is restricted to authenticated employees or
   * managers who require employee information for management or operational
   * tasks.
   *
   * The operation directly queries the job_performance_eval_employees table in
   * the database, ensuring the latest data is retrieved, including timestamps
   * for creation and updates. Since employee data is sensitive, authorization
   * and authentication measures are enforced.
   *
   * Error handling includes returning an appropriate error if the employee ID
   * does not exist. This endpoint is foundational for user profile management
   * and further operations involving employee-related data.
   *
   * @param connection
   * @param id Unique identifier of the target employee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEmployee> {
    try {
      return await getjobPerformanceEvalManagerEmployeesId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing employee information by ID.
   *
   * This PUT API endpoint allows modification of an existing employee's data
   * identified by their unique UUID. The operation supports updating employee
   * email, hashed password, and name fields which are necessary for
   * authentication and personal records.
   *
   * The endpoint is critical for user account management workflows, enabling
   * updates to credentials and identifying information. The system expects
   * input to comply with validation rules, including unique email constraints
   * and secure password hashing.
   *
   * Security considerations include ensuring only authorized users with
   * appropriate role-based access can perform updates. Input validation and
   * error handling are key to prevent inconsistent or duplicate data.
   *
   * The operation interacts with the job_performance_eval_employees table,
   * updating the record while preserving timestamp fields for record creation,
   * updates, and soft deletion. It returns the updated employee data upon
   * success.
   *
   * @param connection
   * @param id Unique identifier of the target employee
   * @param body Updated employee data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalEmployee.IUpdate,
  ): Promise<IJobPerformanceEvalEmployee> {
    try {
      return await putjobPerformanceEvalManagerEmployeesId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase an employee record by ID.
   *
   * This DELETE API endpoint allows removal of an employee record identified by
   * their unique UUID. It permanently deletes the employee data, ensuring no
   * recovery is possible. This operation is critical for user management
   * lifecycle, particularly for employee offboarding scenarios.
   *
   * Authorization is required to prevent unauthorized data removal. The system
   * performs necessary validation before deletion to ensure integrity.
   *
   * The operation affects the job_performance_eval_employees schema table
   * directly and does not return a response body. Clients should handle
   * standard HTTP status codes for success or failure.
   *
   * @param connection
   * @param id Unique identifier of the target employee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerEmployeesId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
