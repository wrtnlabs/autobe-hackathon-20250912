import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEmployeeJoin } from "../../../../providers/postauthEmployeeJoin";

import { IJobPerformanceEvalEmployee } from "../../../../api/structures/IJobPerformanceEvalEmployee";

@Controller("/auth/employee/join")
export class AuthEmployeeJoinController {
  /**
   * Register new employee user and issue JWT tokens, related to
   * job_performance_eval_employees table.
   *
   * This API endpoint allows new employee users to register for the Job
   * Performance Evaluation system. It captures essential authentication
   * credentials, including unique email and securely hashed password fields as
   * stored in the job_performance_eval_employees table. After registration, an
   * access token is issued represented by
   * IJobPerformanceEvalJobPerformanceEvalEmployee.IAuthorized type enabling
   * subsequent authenticated interactions.
   *
   * The operation validates the uniqueness of the email to prevent duplicate
   * accounts and ensures password hashing security. It enables member users to
   * create their accounts and gain authenticated access.
   *
   * It is publicly accessible without prior authentication but requires valid
   * user input conforming to defined schema.
   *
   * This operation is the first step in the authentication flow for employee
   * role users.
   *
   * Subsequent operations include login (to authenticate) and refresh (to renew
   * access tokens) which depend on successful join operation execution.
   *
   * @param connection
   * @param body Request payload for creating new employee user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinEmployee(
    @TypedBody()
    body: IJobPerformanceEvalEmployee.ICreate,
  ): Promise<IJobPerformanceEvalEmployee.IAuthorized> {
    try {
      return await postauthEmployeeJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
