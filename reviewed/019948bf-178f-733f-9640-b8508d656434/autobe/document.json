{"operations":[{"specification":"This operation allows the diaryUser role (single logical user) to obtain a session for accessing their Mood Diary. The app does not support registration, so this endpoint serves as a universal entry point for the one user, with no username or password. The session is stateless, with no personal data collected. The operation returns a short-lived access token and metadata representing the system's single logical user, referencing the mood_diary_diaryusers table, which contains only an id and created_at timestamp. Security is provided by the inherent stateless nature and the absence of multi-user data. Token issuance is for session identification and not for authentication. No personal or secret input is ever required from the user. The response follows the pattern IMoodDiaryDiaryUser.IAuthorized, containing the issued token and diary user metadata. The join/login distinction is artificial and only present for back-end convention. There is no login operation because there is no credential authentication; refresh is provided for session extension.","authorizationType":"join","description":"Allows the system's single logical diaryUser to retrieve a session token for using the Mood Diary application. This operation does not perform traditional user registration or authentication—since the app has only a single logical user, anyone accessing the API receives the same (non-personalized) access. The endpoint directly issues a token for the logical diaryUser, returning the unique id and created_at fields from the mood_diary_diaryusers table. No personal identifiers or credentials are used. This operation is not a security boundary; rather, it establishes a stateless, anonymous session for logging moods, consistent with the single-user design. There is no support for login or password-based authentication. The access token enables subsequent authorized API actions for mood entry/log/view/statistics operations. \n\nRelated operations are refresh for extending session lifetime and the main mood entry CRUD endpoints (protected by the issued token). Error behavior is limited to backend or system-level failures (e.g., database access issues). This endpoint is always allowed and never rate limited for business logic.\n\nMust reference only fields defined in mood_diary_diaryusers: id and created_at. No user-managed input. Result conforms to IMoodDiaryDiaryUser.IAuthorized DTO.","summary":"Obtain session token as the logical diaryUser (single-user, from mood_diary_diaryusers), no registration or authentication required.","parameters":[],"requestBody":null,"responseBody":{"description":"Session authorized data for the single logical diaryUser, containing generated access token and diary user metadata (id, created_at).","typeName":"IMoodDiaryDiaryUser.IAuthorized"},"authorizationRole":"diaryUser","name":"join","path":"/auth/diaryUser/join","method":"post"},{"specification":"This operation provides a conventional login endpoint for the Mood Diary application's single logical user (diaryUser), in compliance with required OpenAPI authorization workflows. In this unique case, no credentials, passwords, or identities are used or accepted. The endpoint always succeeds, issuing a new access token and session information for the single logical user represented in the mood_diary_diaryusers table. No registration, multi-user control, or personal data exist. The response conforms to IMoodDiaryDiaryUser.IAuthorized format, containing the user's id and created_at timestamp. All login input data is ignored, as any party may obtain access freely. No user session or account is created, this is a stateless, always-permitted operation, present only for API completeness where OAuth/JWT \"login\" flows would be required. No actual security boundary is present. Use for compliance and OpenAPI client compatibility only.","authorizationType":"login","description":"Allows the single logical diaryUser to \"login\", even though no authentication is performed and no credentials or password are accepted. Any client may POST to this endpoint and receive a valid access token for the Mood Diary API. The operation always succeeds unless system-level errors occur. The underlying user data is drawn from mood_diary_diaryusers: only the id and created_at properties are returned. This operation is included solely for OpenAPI/JWT compliance, not security. No personal information is ever managed, no session state is persisted, and all business logic is stateless and open. The response includes token and diary user metadata as per IMoodDiaryDiaryUser.IAuthorized. Related operations include join (stateless registration/entry point) and refresh (token renewal).","summary":"OpenAPI-compliant login endpoint for the single logical diaryUser (mood_diary_diaryusers); no credentials accepted, always issues a token.","parameters":[],"requestBody":null,"responseBody":{"description":"Authorized session information for the logical diaryUser, including access token plus id and created_at from mood_diary_diaryusers.","typeName":"IMoodDiaryDiaryUser.IAuthorized"},"authorizationRole":"diaryUser","name":"login","path":"/auth/diaryUser/login","method":"post"},{"specification":"This operation provides token refresh capability for the Mood Diary application's single logical user (diaryUser). Given a valid refresh token, the system issues a new access token, extending the session without re-authentication or interaction. Since the system is single-user and issues tokens without registration or login, refresh is mainly for session management only. The mood_diary_diaryusers table is used as the data source: only the id and created_at fields are referenced. No personal information is managed; the operation is always available to the single logical user. If the provided refresh token is invalid or expired, a standard error is returned. There is no distinction between multiple users. No profile or credential information is involved. The authorized DTO pattern IMoodDiaryDiaryUser.IAuthorized is used for the response.","authorizationType":"refresh","description":"Allows the diaryUser (the single logical user in the Mood Diary app) to refresh their session token and extend access without any login or further interaction. Only a valid refresh token is required; no personal credentials or data are checked. The system returns a new access token and the diary user's id and created_at values from mood_diary_diaryusers. This supports seamless, stateless session continuation in the single-user context. All error and security handling is limited to token verification. There is no multi-user management or credential validation. This operation presumes only one logical user exists. Related operation: join (to obtain initial token).","summary":"Refreshes the session for the logical diaryUser by issuing a new access token given a valid refresh token (mood_diary_diaryusers, single-user context).","parameters":[],"requestBody":null,"responseBody":{"description":"Updated authorized session with new token for the single logical diaryUser, including id and created_at from mood_diary_diaryusers.","typeName":"IMoodDiaryDiaryUser.IAuthorized"},"authorizationRole":"diaryUser","name":"refresh","path":"/auth/diaryUser/refresh","method":"post"},{"specification":"This operation retrieves a paginated, reverse-chronological list of non-archived mood diary entries for the single logical diary user. It operates on the mood_diary_mood_entries table, referencing mood_diary_diaryusers as the logical owner. This endpoint supports search, filtering by date range, sorting, and pagination, but always excludes archived entries (older than 30 days, archived=true). All response objects include: entry id, mood type (must be one of the fixed 8), optional note, created_at ISO timestamp, and archived boolean (should always be false for returned records). Business rules enforce returning only unarchived entries, maximum of 3 per day, newest first.\n\nAll listing logic must honor the rule that only non-archived (archived=false) entries from the past 30 days are returned, ordered from most recent. The operation provides pagination with likely page size and current/total result count. No editing is permitted by this operation. Filtering by mood type or date range may be implemented, but always within the context of unarchived entries. \n\nThe Prisma schema table mood_diary_mood_entries is the data source for this operation, which references the logical owner in mood_diary_diaryusers via mood_diary_diaryuser_id.","description":"This operation provides the means for the diaryUser to view a list of their recent mood diary entries, supporting features like scrolling and filtering. Each result includes mood type (one of eight fixed values), the optional note (up to 500 Unicode characters), the auto-generated UTC timestamp (created_at), and an archived flag (expected false, as only recent entries are listed).\n\nSecurity-wise, no authentication or user separation exists; the app assumes a single logical diary owner, so all data is exposed. This is in line with business rules. Only non-archived entries (archived=false) are eligible, enforcing the 30-day retention policy for active viewing. Pagination and sorting are handled in the backend as per standard API conventions. No modification (edit/delete) actions are surfaced—this endpoint is strictly for read access.\n\nKey validation rules: only entries from the past 30 days, not archived, ordered by created_at descending. Error handling includes ensuring no archived data is exposed, and appropriate messages for invalid filters or pagination arguments. Related operations include mood entry creation (POST /moodEntries) and summary fetching (GET /moodEntries/weeklySummary).","summary":"Retrieve a paginated list of non-archived mood diary entries for the single logical user from mood_diary_mood_entries.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for retrieving non-archived mood diary entries over the last 30 days.","typeName":"IMoodDiaryMoodEntry.IRequest"},"responseBody":{"description":"Paginated list of non-archived mood diary entries matching criteria.","typeName":"IPageIMoodDiaryMoodEntry"},"authorizationType":null,"authorizationRole":"diaryUser","name":"index","path":"/moodDiary/diaryUser/moodEntries","method":"patch"},{"specification":"This operation creates a new mood diary entry for the single logical diary user, writing to the mood_diary_mood_entries table. On invocation, the system verifies that the number of non-archived entries for the current calendar day (Asia/Calcutta time) is less than 3, and that the submitted mood type is one of the 8 allowed types. The note is recorded as optional and may be up to 500 Unicode characters, supporting emojis and all characters. The system must automatically assign the server's current timestamp as created_at (user submission of timestamp is ignored), and archived field is set to false upon creation. The entry becomes immutable: no subsequent edits or deletion allowed.\n\nBusiness logic includes strict daily entry limitation (3 per day), rejection of invalid mood types, enforcement of note length, and validation that timestamped entries are not in the future. Attempts to insert a fourth entry in one day, or provide invalid data, must receive detailed error messages. The model mood_diary_mood_entries is the authoritative data source for this operation.","description":"This operation enables the diaryUser to create a new mood diary entry, capturing their mood and, optionally, a personal note. Only 3 entries per calendar day are permitted, ensuring users journal mindfully without data abuse. The mood_type must be one of: happy, sad, anxious, excited, angry, calm, stressed, tired. If omitted or invalid, an explicit validation error is returned. The note, if present, may be blank or up to 500 Unicode characters, including emojis. The system always sets the created_at timestamp to the current server time (Asia/Calcutta zone), never accepting a user-supplied timestamp. The archived flag is false by default for all new entries.\n\nSecurity is simple: no authentication or user distinction—this is a single-user diary by business design. All validation failures (invalid mood, too-long note, over daily limit, future timestamps) yield clear, user-focused error messages. The response includes the persisted entry data (id, mood_type, note, created_at, archived=false). Other related endpoints allow subsequent listing or summary. No edit or deletion is ever permitted on entries once created.","summary":"Create a new mood diary entry for the logical user in mood_diary_mood_entries, enforcing daily entry limit and validation rules.","parameters":[],"requestBody":{"description":"New mood diary entry details: mood type (from fixed set), optional note (≤500 characters).","typeName":"IMoodDiaryMoodEntry.ICreate"},"responseBody":{"description":"Persisted mood diary entry record, immutable after creation.","typeName":"IMoodDiaryMoodEntry"},"authorizationType":null,"authorizationRole":"diaryUser","name":"create","path":"/moodDiary/diaryUser/moodEntries","method":"post"},{"specification":"This operation retrieves the complete detail record for a specific, non-archived mood diary entry by id. The target is the mood_diary_mood_entries table, filtered strictly by id, archived=false. An entry may be retrieved if and only if it is not archived—entries older than 30 days (archived=true) are totally inaccessible. The response includes id, mood type (from 8 fixed types), optional note, exact UTC timestamp, and archived flag (serves as an integrity check; must be false for returned results). Requests for non-existent or archived entries must yield a not-found or access-denied error.\n\nStrictly, this operation is single-user, no authentication, no distinction: the app operates under a single logical diaryUser. The entry is immutable—no further editing or deletion is permitted, and the archived flag is read-only for the user. Prisma mood_diary_mood_entries is the source table, joined to mood_diary_diaryusers solely for referential integrity.","description":"Retrieves one mood diary entry in detail, given its unique id. Only unarchived entries (created within last 30 days) are available; attempts to access archived or non-existent entries result in a clear not found or access error. Returned object includes: id, mood_type (fixed allowed list), note (if present), created_at UTC timestamp, and archived flag (always false for successful lookups). No edit or delete is possible—data is immutable.\n\nThis operation is open to the single logical user by business rules—no authentication, no per-user scope. Data returned is always up to date and immutable. Errors are detailed for invalid ids or archived data, and security is ensured solely through archiving and business constraints.","summary":"Fetch details for a single non-archived mood diary entry by id from mood_diary_mood_entries.","parameters":[{"name":"entryId","description":"Unique identifier for the mood diary entry to retrieve. Must be a valid UUID and reference a non-archived entry (archived=false).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Mood diary entry details for given id, if unarchived and present.","typeName":"IMoodDiaryMoodEntry"},"authorizationType":null,"authorizationRole":"diaryUser","name":"at","path":"/moodDiary/diaryUser/moodEntries/{entryId}","method":"get"},{"specification":"This operation generates a weekly summary report of the single user's moods over the past 7 calendar days (excluding today), based on the mood_diary_mood_entries table. It aggregates unarchived entries (archived=false, created_at within last 30 days) for each day in the 7 day period, tallying count for each of the 8 allowed mood types. The summary includes daily and total counts per mood (happy, sad, anxious, excited, angry, calm, stressed, tired), and provides the ISO range of the covered week. All counts for mood types without entries default to zero.\n\nNo archived data (entries older than 30 days, archived=true) is included, and summary logic must exclude invalid/future-dated entries. The operation is stateless and re-computed on each request. Prisma mood_diary_mood_entries is the definitive source table, referencing mood_diary_diaryusers for the logical owner. Handles edge cases, such as weeks with no data (returns zeroes for all moods), and shows correct date range. The business rule is strict: no user authentication—single diaryUser, all entries relevant to that context.","description":"This endpoint computes and returns the mood summary statistics for the past 7 calendar days (not including today) for the single diaryUser. For each day/mood, the system counts non-archived entries and returns daily and total mood counts for all 8 standard types (zero when none logged). The summary includes start/end ISO dates for the time window. If no entries are present in the time window, the summary is zeroed accordingly.\n\nBusiness and security rules: no authentication or user separation, single user logical model. Archived entries are always excluded (business logic and application-level enforcement). Performance is expected within 2 seconds as per requirements. This API does not expose any individual entry details, only summary statistics. Related endpoints enable listing or creation of entries.\n\nError responses handle only internal system failure or invalid business logic.\n","summary":"Generate a weekly summary of moods for the last 7 active days, aggregating counts from mood_diary_mood_entries.","parameters":[],"requestBody":null,"responseBody":{"description":"Weekly summary of moods, with daily and total counts for each fixed mood type over the date range.","typeName":"IMoodDiaryMoodEntryWeeklySummary"},"authorizationType":null,"authorizationRole":"diaryUser","name":"weeklySummary","path":"/moodDiary/diaryUser/moodEntries/weeklySummary","method":"get"}],"components":{"authorization":[{"name":"diaryUser","description":"A user of the Mood Diary application who can log up to 3 mood entries per day, add personal notes, view their entries and weekly mood summaries, but cannot edit or delete entries. No registration, all are treated as a single logical user. Role allows full access to mood logging and summary features via API.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIMoodDiaryMoodEntry":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IMoodDiaryMoodEntry"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"EMoodDiaryMoodType":{"oneOf":[{"const":"happy","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"sad","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"anxious","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"excited","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"angry","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"calm","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"stressed","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},{"const":"tired","description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."}],"description":"Mood type enum representing the fixed set of allowed moods in the diary application. Only these eight values are valid for mood entries. Original schema comment and business requirement explicitly restrict mood types to these. This enumeration is referenced in all entry creation, update, and retrieval DTOs to validate mood data integrity."},"IMoodDiaryDiaryUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the logical diary user. Automatically generated and represents the single account context for all mood entries."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the logical user was created in the database (ISO 8601 UTC). Used for auditing and for future extensibility."}},"required":["id","created_at"],"description":"Diary user entity representing the app's single logical user. This schema matches the mood_diary_diaryusers Prisma table, which contains only the unique id and created_at fields. No additional properties or authentication fields exist in this minimal model. Used for internal session logic, auditing, and is the return value for diary session and login operations."},"IMoodDiaryDiaryUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the logical diary user, as issued from mood_diary_diaryusers. Used to identify the single user session context."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the logical user record was created, as stored in mood_diary_diaryusers. Returned for auditing and completeness, always present."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","token"],"description":"Authorization/session container for the diaryUser, returned when a join, login, or refresh endpoint is called.\n\nThis schema strictly matches the requirements for one logical user: it contains the unique id and created_at timestamp from mood_diary_diaryusers (no personal or credential fields), plus a standard authorization token structure (see IAuthorizationToken type). No sensitive credentials or secret fields are ever present. All properties are required by business convention and referenced in authentication/authorization workflows."},"IMoodDiaryMoodEntry":{"type":"object","description":"Represents a single mood diary entry, as stored in the database and returned by the API. Each entry is immutable, records which mood the user selected (from a fixed 8-value set), an optional note (unicode, up to 500 chars), the timestamp of creation (auto-set UTC/ISO8601), and whether the entry is archived (older than 30 days, fully hidden from all lists/summaries). Entries are always linked to the logical diary user (single-user scenario) by foreign key mood_diary_diaryuser_id. All fields are defined in the Prisma schema and no properties can be omitted.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this mood diary entry. Populated upon creation; never user-provided. Matches the id column in mood_diary_mood_entries table."},"mood_diary_diaryuser_id":{"type":"string","format":"uuid","description":"Foreign key reference to the logical diary user entity. Always present (single-user app, but designed for future proofing). Corresponds to mood_diary_diaryusers.id."},"mood_type":{"$ref":"#/components/schemas/EMoodType","description":"Mood selected for this entry. Must be one of: happy, sad, anxious, excited, angry, calm, stressed, tired. Enforced via enum at type and application level."},"note":{"oneOf":[{"type":"string","description":"Optional freeform mood note, up to 500 Unicode characters, may be blank or omitted. Populated if user added a text note for this mood entry."},{"type":"null"}],"description":"Optional freeform mood note, up to 500 Unicode characters, may be blank or omitted. Populated if user added a text note for this mood entry."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which the entry was created (ISO 8601 UTC, auto-set by system, never user-provided). Used for all sorting, listing, archiving."},"archived":{"type":"boolean","description":"If true, entry is archived (older than 30 days, business logic enforced); if false, entry is active and visible. User never edits or sets this property; system-controlled."}},"required":["id","mood_diary_diaryuser_id","mood_type","created_at","archived"]},"IMoodDiaryMoodEntry.IRequest":{"type":"object","description":"Request body schema for listing/searching mood diary entries. Allows pagination, filtering by date, mood_type, full-text search, and sort specification. Used in PATCH /moodDiary/diaryUser/moodEntries.","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Which page to retrieve (optional, 1-based indexing)."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of results per page (optional, enforced server-side)."},"from_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO8601 lower-bound filter for created_at (entries after or equal to this datetime)."},"to_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional ISO8601 upper-bound filter for created_at (entries before or equal to this datetime)."},"mood_type":{"oneOf":[{"$ref":"#/components/schemas/EMoodType"},{"type":"null"}],"description":"Restrict results to a single mood type (optional)."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full-text search over note content (optional, accent/emoji/Unicode-aware)."},"sort_by":{"oneOf":[{"const":"created_at"},{"type":"null"}],"description":"Sort field, only valid value in current API is 'created_at'."},"sort_dir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: 'asc' (oldest first) or 'desc' (newest first). Default is descending for reverse chronological listing."}},"required":[]},"IMoodDiaryMoodEntry.ICreate":{"type":"object","description":"Creation payload for a new mood diary entry. Only includes properties user may declare: mood_type and note. ID and timestamps are set system-side, and archived is always false for new entries. Prisma schema and all business logic strictly enforced. Mood type must be valid enum value. Note is optional, but if supplied, must be a string ≤ 500 Unicode chars. No extra properties permitted.","properties":{"mood_type":{"$ref":"#/components/schemas/EMoodType","description":"Mood type for the new entry. Required. Must be exactly one of the 8 allowed values, or entry is rejected."},"note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional note content associated with the mood entry, up to 500 Unicode chars. May be blank or omitted. Emojis/symbols accepted."}},"required":["mood_type"]},"EMoodType":{"oneOf":[{"const":"happy","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"sad","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"anxious","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"excited","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"angry","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"calm","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"stressed","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},{"const":"tired","description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."}],"description":"Enumeration for valid mood types in the Mood Diary app. Values correspond to the business-mandated fixed set: happy, sad, anxious, excited, angry, calm, stressed, tired. This enum should be used everywhere a mood_type appears, ensuring all business validation and logic constraints are enforced at the type level. Mood types outside this set are never permitted in requests or responses."},"IMoodDiaryMoodEntryWeeklySummary":{"type":"object","description":"Describes the weekly statistics summary of moods over the latest 7 calendar days, not including today. Used for reporting and trend tracking by the user's Mood Diary app. The schema provides ISO8601 date ranges (start/end), and an array of 8 mood statistics objects (one for each valid EMoodType), each with total and daily counts. No entry data ever covers archived moods (older than 30 days). All counts default to zero when no matching data in summary period.","properties":{"start_date":{"type":"string","format":"date","description":"Inclusive start of the week summary window, ISO 8601 local date (Asia/Calcutta time). Earliest day included when aggregating summary."},"end_date":{"type":"string","format":"date","description":"Inclusive end of the week window (usually 6 days after start_date), ISO 8601 local date. Day before today if summary runs in normal business logic."},"mood_counts":{"type":"array","items":{"$ref":"#/components/schemas/IMoodDiaryMoodEntryWeeklySummary.IMoodCount"},"description":"One object for each of 8 valid mood types, summarizing total and per-day counts in the window. Always returns 8 objects in consistent mood type order. All counts are zero if there are no matching entries."}},"required":["start_date","end_date","mood_counts"]},"IMoodDiaryMoodEntryWeeklySummary.IMoodCount":{"type":"object","description":"Aggregated mood statistics in the summary: mood type, total count over the week, and daily counts array (7 values, one for each calendar day in the window). This type is always used inside weekly summary arrays.","properties":{"mood_type":{"$ref":"#/components/schemas/EMoodType","description":"Mood type this count applies to (one of 8 allowed)."},"total_count":{"type":"integer","description":"Sum of entries for this mood in the 7-day period, not including today (business rule)."},"daily_counts":{"type":"array","items":{"type":"integer"},"minItems":7,"maxItems":7,"description":"Number of entries per day for this mood. Array is exactly 7 elements, in order from window start_date to end_date (business convention)."}},"required":["mood_type","total_count","daily_counts"]}}}}