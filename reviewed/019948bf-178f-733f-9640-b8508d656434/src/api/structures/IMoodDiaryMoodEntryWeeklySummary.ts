import { tags } from "typia";

import { EMoodType } from "./EMoodType";

/**
 * Describes the weekly statistics summary of moods over the latest 7 calendar
 * days, not including today. Used for reporting and trend tracking by the
 * user's Mood Diary app. The schema provides ISO8601 date ranges (start/end),
 * and an array of 8 mood statistics objects (one for each valid EMoodType),
 * each with total and daily counts. No entry data ever covers archived moods
 * (older than 30 days). All counts default to zero when no matching data in
 * summary period.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IMoodDiaryMoodEntryWeeklySummary = {
  /**
   * Inclusive start of the week summary window, ISO 8601 local date
   * (Asia/Calcutta time). Earliest day included when aggregating summary.
   */
  start_date: string & tags.Format<"date">;

  /**
   * Inclusive end of the week window (usually 6 days after start_date), ISO
   * 8601 local date. Day before today if summary runs in normal business
   * logic.
   */
  end_date: string & tags.Format<"date">;

  /**
   * One object for each of 8 valid mood types, summarizing total and per-day
   * counts in the window. Always returns 8 objects in consistent mood type
   * order. All counts are zero if there are no matching entries.
   */
  mood_counts: IMoodDiaryMoodEntryWeeklySummary.IMoodCount[];
};
export namespace IMoodDiaryMoodEntryWeeklySummary {
  /**
   * Aggregated mood statistics in the summary: mood type, total count over
   * the week, and daily counts array (7 values, one for each calendar day in
   * the window). This type is always used inside weekly summary arrays.
   */
  export type IMoodCount = {
    /** Mood type this count applies to (one of 8 allowed). */
    mood_type: EMoodType;

    /**
     * Sum of entries for this mood in the 7-day period, not including today
     * (business rule).
     */
    total_count: number & tags.Type<"int32">;

    /**
     * Number of entries per day for this mood. Array is exactly 7 elements,
     * in order from window start_date to end_date (business convention).
     */
    daily_counts: (number & tags.Type<"int32">)[] &
      tags.MinItems<7> &
      tags.MaxItems<7>;
  };
}
