import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Diary user entity representing the app's single logical user. This schema
 * matches the mood_diary_diaryusers Prisma table, which contains only the
 * unique id and created_at fields. No additional properties or authentication
 * fields exist in this minimal model. Used for internal session logic,
 * auditing, and is the return value for diary session and login operations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IMoodDiaryDiaryUser = {
  /**
   * Unique identifier (UUID) for the logical diary user. Automatically
   * generated and represents the single account context for all mood
   * entries.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Timestamp indicating when the logical user was created in the database
   * (ISO 8601 UTC). Used for auditing and for future extensibility.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IMoodDiaryDiaryUser {
  /**
   * Authorization/session container for the diaryUser, returned when a join,
   * login, or refresh endpoint is called.
   *
   * This schema strictly matches the requirements for one logical user: it
   * contains the unique id and created_at timestamp from
   * mood_diary_diaryusers (no personal or credential fields), plus a standard
   * authorization token structure (see IAuthorizationToken type). No
   * sensitive credentials or secret fields are ever present. All properties
   * are required by business convention and referenced in
   * authentication/authorization workflows.
   */
  export type IAuthorized = {
    /**
     * Unique identifier (UUID) for the logical diary user, as issued from
     * mood_diary_diaryusers. Used to identify the single user session
     * context.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Timestamp when the logical user record was created, as stored in
     * mood_diary_diaryusers. Returned for auditing and completeness, always
     * present.
     */
    created_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };
}
