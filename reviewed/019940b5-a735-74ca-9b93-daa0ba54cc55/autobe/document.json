{"operations":[{"specification":"This operation allows regular users (kind: \"member\") to register an account by providing their email and password. It is designed to create a new user account in the system with the provided credentials and initial profile data, storing the password as a hash for security. This endpoint directly corresponds to the 'event_registration_regular_users' table in the Prisma schema, which includes fields such as 'email', 'password_hash', 'full_name', 'phone_number', 'profile_picture_url', and 'email_verified'. Upon successful registration, an authentication token is issued to the user, enabling immediate access as an authorized user.\n\nSecurity considerations require the endpoint to be publicly accessible without prior authentication, while enforcing email uniqueness and proper password hashing as per underlying database constraints.\n\nRelated operations include the login and token refresh endpoints for regularUsers. Validation includes checks on the uniqueness of the email field and requiredness of essential authentication fields.\n\nTypical error scenarios involve duplicate email registration and invalid input formats.\n\nNo soft delete considerations apply as the user record permanency is managed elsewhere.\n\nThis operation is critical as it forms the initial entry point for regular users into the authentication system.","authorizationType":"join","description":"Registers a new regular user account with email and password, storing user profile details in the 'event_registration_regular_users' table. User starts with email_verified set to false and receives JWT tokens upon successful registration. Includes necessary validations for email uniqueness and password security.","summary":"Create a new regular user account (event_registration_regular_users) with email and password.","parameters":[],"requestBody":{"description":"Request body for creating a regular user account. Must include email, password hash, and profile data.","typeName":"IEventRegistrationRegularUser.ICreate"},"responseBody":{"description":"Authorized response including JWT tokens for the newly registered regular user.","typeName":"IEventRegistrationRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"joinRegularUser","path":"/auth/regularUser/join","method":"post"},{"specification":"This API allows regular users to authenticate themselves by submitting their email and password hash. It validates the credentials against the 'event_registration_regular_users' table ensuring the email exists, the password hash matches, and that the email_verified field is true to permit login. Successful authentication results in the issuance of JWT access and refresh tokens that allow further authorized actions.\n\nThe endpoint enforces security by only allowing login for users who have verified their email. It is publicly accessible but requires valid credentials.\n\nIt complements the join and refresh endpoints and relies on the existing user data structure.\n\nFailures due to incorrect credentials, unverified emails, or inactive accounts result in appropriate error responses.\n\nNo soft delete behavior is part of this operation.\n\nThis operation is essential for secure access by regular users.","authorizationType":"login","description":"Authenticates a regular user using their email and password and issues JWT tokens if credentials are valid and email is verified in the 'event_registration_regular_users' table.","summary":"Authenticate regular user (event_registration_regular_users) and issue access tokens.","parameters":[],"requestBody":{"description":"Request body containing login credentials of the regular user.","typeName":"IEventRegistrationRegularUser.ILogin"},"responseBody":{"description":"Authorized response including JWT tokens for the logged-in regular user.","typeName":"IEventRegistrationRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"loginRegularUser","path":"/auth/regularUser/login","method":"post"},{"specification":"This API refreshes JWT tokens for regular users who provide a valid refresh token. The refresh operation uses the 'event_registration_regular_users' schema to verify the current tokens and issue new ones, extending session validity without requiring re-authentication.\n\nThis endpoint requires the user to present a valid refresh token in the request and returns new access and refresh tokens upon success.\n\nIt complements the join and login endpoints for regular users and maintains secure token cycling.\n\nInvalid or expired refresh tokens result in error responses indicating re-login necessity.\n\nNo special soft delete considerations are part of this operation.\n\nToken refresh is critical for maintaining seamless user experience without compromising security.","authorizationType":"refresh","description":"Refreshes JWT access tokens using a valid refresh token for a regular user as per 'event_registration_regular_users' schema.","summary":"Refresh JWT tokens for regular user (event_registration_regular_users).","parameters":[],"requestBody":{"description":"Request body containing refresh token information.","typeName":"IEventRegistrationRegularUser.IRefresh"},"responseBody":{"description":"Authorized response including new JWT tokens for the regular user.","typeName":"IEventRegistrationRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"refreshRegularUser","path":"/auth/regularUser/refresh","method":"post"},{"specification":"This operation implements the registration (join) endpoint for the eventOrganizer role based on the event_registration_event_organizers table in Prisma schema. It enables new event organizer users to register by supplying relevant credentials and profile details. The operation creates a new event organizer account with fields like email, password_hash, full_name, phone_number (optional), profile_picture_url (optional), and sets email_verified to false initially. The creation and update timestamps are set by the backend. The join action issues initial JWT tokens upon successful registration and is publicly accessible without prior authentication. This forms the foundation for an event organizer to access the platform functionalities. Strict validation of email uniqueness and password security is implied. This endpoint does not allow login but is the initial registration mechanism for event organizers.\n\nSecurity considerations focus on securely managing password_hash and ensuring email uniqueness during registration.\n\nRelated operations include /auth/eventOrganizer/login for authentication, and /auth/eventOrganizer/refresh for token renewal.\n\nExpected response contains the authorized event organizer information with issued tokens following the IEventRegistrationEventOrganizer.IAuthorized type referencing service prefix and role name combinations.\n\nThis uses POST method at /auth/eventOrganizer/join to create and authorize a new event organizer account per the Identity.event_registration_event_organizers table.","authorizationType":"join","description":"Register a new event organizer user account with email and password. This endpoint allows event organizers to create their accounts by providing necessary authentication and profile information as defined in the event_registration_event_organizers Prisma table. The password is securely handled as a hashed value. Email verification is initially false until user confirms via email verification workflows.\n\nThis operation enforces email uniqueness and secures password hashing. Upon successful registration, JWT tokens are issued to authorize the user.\n\nIt is a public endpoint, not requiring prior authentication.\n\nReference fields: email, password_hash, full_name, phone_number (optional), profile_picture_url (optional), email_verified, created_at, updated_at.\n\nRelated endpoints for comprehensive authentication flow include /auth/eventOrganizer/login and /auth/eventOrganizer/refresh.","summary":"Create a new event organizer user (member kind) and issue authorization tokens.","parameters":[],"requestBody":{"description":"Payload for registering a new event organizer user.","typeName":"IEventRegistrationEventOrganizer.ICreate"},"responseBody":{"description":"Authorized event organizer user data with JWT tokens.","typeName":"IEventRegistrationEventOrganizer.IAuthorized"},"authorizationRole":"eventOrganizer","name":"join","path":"/auth/eventOrganizer/join","method":"post"},{"specification":"This operation provides login authentication for event organizer users. It validates credentials against the event_registration_event_organizers table fields of email and password_hash, which must be verified and email_verified must be true for login to succeed. Upon successful authentication, it issues JWT tokens for subsequent protected API access. It is a public endpoint accessible without prior authentication.\n\nSecurity considerations emphasize password_hash validation and email verification status enforcement.\n\nComplementary flows include registration at /auth/eventOrganizer/join and token refresh at /auth/eventOrganizer/refresh.\n\nResponse returns authorized event organizer user info and tokens with type IEventRegistrationEventOrganizer.IAuthorized using the EventRegistration prefix and role name as per guidelines.\n\nThis endpoint uses POST at /auth/eventOrganizer/login to authenticate event organizer users securely based on the Identity.event_registration_event_organizers table.","authorizationType":"login","description":"Authenticate event organizer user by email and password, validate email verified status. Issues JWT tokens upon successful login.\n\nOnly event organizers with verified email can log in.\n\nReference fields: email, password_hash, email_verified.\n\nMandatory password security checks and JWT issuance apply.\n\nPublic endpoint with no prior authentication required.\n\nRelated endpoints include /auth/eventOrganizer/join and /auth/eventOrganizer/refresh for full authentication lifecycle.","summary":"Authenticate an event organizer user and issue JWT tokens.","parameters":[],"requestBody":{"description":"Payload for logging in an event organizer user.","typeName":"IEventRegistrationEventOrganizer.ILogin"},"responseBody":{"description":"Authorized event organizer user data with JWT tokens.","typeName":"IEventRegistrationEventOrganizer.IAuthorized"},"authorizationRole":"eventOrganizer","name":"login","path":"/auth/eventOrganizer/login","method":"post"},{"specification":"This operation implements token refresh for event organizer users, allowing the renewal of JWT access tokens using a valid refresh token. The operation follows the event_registration_event_organizers table association for authentication context.\n\nThe endpoint validates the refresh token provided in the request body and issues new authorization tokens if valid.\n\nThis is a protected endpoint requiring a valid refresh token, but no additional user authentication.\n\nComplementary operations include /auth/eventOrganizer/join and /auth/eventOrganizer/login for full authentication flow.\n\nResponse uses the IEventRegistrationEventOrganizer.IAuthorized type for returning renewed tokens and user info.\n\nIt uses POST method at /auth/eventOrganizer/refresh for refreshing JWT tokens in the event organizer role.\n\nNo specific path parameters are needed as refresh token is supplied in the request body.","authorizationType":"refresh","description":"Refresh JWT authorization tokens using a refresh token for an event organizer user.\n\nRequires a valid refresh token in the request body.\n\nReturns new authorization tokens on success.\n\nReference: event_registration_event_organizers table context.\n\nRelated endpoints include /auth/eventOrganizer/join and /auth/eventOrganizer/login.","summary":"Refresh JWT tokens for event organizer user.","parameters":[],"requestBody":{"description":"Payload containing refresh token for event organizer user.","typeName":"IEventRegistrationEventOrganizer.IRefresh"},"responseBody":{"description":"Authorized event organizer user data with renewed JWT tokens.","typeName":"IEventRegistrationEventOrganizer.IAuthorized"},"authorizationRole":"eventOrganizer","name":"refresh","path":"/auth/eventOrganizer/refresh","method":"post"},{"specification":"This API operation allows an administrator user to register a new admin account in the system. It facilitates the creation of new admin users by accepting essential information such as email, password hash, full name, optional phone number, optional profile picture URL, and email verification status. The operation directly interfaces with the 'event_registration_admins' table in the Prisma database schema. The purpose is to enable system-wide administrators to be added securely to the platform with all necessary credentials and profile details.\n\nSecurity considerations include restricting access to this endpoint solely to authenticated admin users to prevent unauthorized creation of high-privilege accounts. The input follows strict validation to ensure the uniqueness of the email and compliance with password hashing and profile detail constraints.\n\nThis operation forms an integral part of the admin management lifecycle, supporting other admin-level operations like login, email verification management, and user role assignments. The system enforces email uniqueness and mandates proper credential handling. Error handling mechanisms return informative responses for email conflicts or input validation failures.","authorizationType":"join","description":"Create a new admin user account with email, password hash, full name, phone number (optional), profile picture URL (optional), and email verification status in the 'event_registration_admins' Prisma table. Access restricted to existing admin users for security and management governance. Ensures email uniqueness and proper profile data management.","summary":"Create an admin user account associated with the 'event_registration_admins' table","parameters":[],"requestBody":{"description":"Admin user account creation payload","typeName":"IEventRegistrationAdmin.ICreate"},"responseBody":{"description":"Admin user account information with authorization token","typeName":"IEventRegistrationAdmin.IAuthorized"},"authorizationRole":"admin","name":"createAdminUser","path":"/auth/admin/join","method":"post"},{"specification":"Handles authentication for administrators by verifying credentials and issuing JWT tokens. This operation queries the 'event_registration_admins' table to verify the provided email and password hash matches an existing admin account with verified email. On success, it generates a JWT token that allows the admin user to access secured system-wide administration features.\n\nIt enforces security checks such as ensuring the email is verified before successful authentication and provides secure token management with expiration. Authentication failures due to invalid credentials or unverified email statuses yield meaningful error messages.\n\nThis login operation is critical for the admin role as it gates access to high privilege management features, including organizer approvals, event capacity overrides, and system analytics viewing. It must be protected against brute-force attacks and ensure password hashes are securely stored and compared.","authorizationType":"login","description":"Authenticate an admin user with their email and password hash. Verifies credentials against the 'event_registration_admins' table and returns a JWT authorization token on success. Ensures email verification status is true before authentication. Restricted to admin role users.","summary":"Authenticate as admin and receive JWT token","parameters":[],"requestBody":{"description":"Admin login request payload containing email and password hash","typeName":"IEventRegistrationAdmin.ILogin"},"responseBody":{"description":"Successful admin authentication with JWT token","typeName":"IEventRegistrationAdmin.IAuthorized"},"authorizationRole":"admin","name":"loginAdminUser","path":"/auth/admin/login","method":"post"},{"specification":"Allows an admin user to refresh their JWT tokens securely. This operation accepts a valid refresh token and issues a new JWT access token to maintain the administrator's session without requiring re-authentication.\n\nIt relates to the 'event_registration_admins' table for authentication context but mainly focuses on token lifecycle management and security. Refresh tokens are validated thoroughly before issuance. Only authorized admins with valid tokens can access this endpoint.\n\nToken refresh operations enhance security by allowing short-lived access tokens while providing seamless session continuity for administrators. It complies with JWT best practices and ensures revocation support and audit logging.","authorizationType":"refresh","description":"Refresh JWT access tokens for authenticated admin users using valid refresh tokens. Ensures secure session continuation. Endpoint accessible only to already authenticated admins.","summary":"Refresh admin JWT access token","parameters":[],"requestBody":{"description":"Admin token refresh request containing valid refresh token","typeName":"IEventRegistrationAdmin.IRefresh"},"responseBody":{"description":"New JWT access token for admin user","typeName":"IEventRegistrationAdmin.IAuthorized"},"authorizationRole":"admin","name":"refreshAdminToken","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of event registration regular users. It operates on the event_registration_regular_users table from the Prisma schema, providing user identification, contact, and verification status details. Supports advanced filtering by name and creation date, efficient pagination, and sorting options. Access control typically restricts this data to admin roles for privacy and security.","description":"Retrieve a filtered and paginated list of event registration regular users from the system. This operation enables querying based on full name, email verified status, and registration dates.\n\nThis API is crucial for administrative auditing, user management, and reporting functionalities. Access should be limited to properly authorized roles due to the sensitive nature of user data.\n\nThis operation closely integrates with the event_registration_regular_users table, utilizing all relevant user profile fields like email, full name, phone number, profile picture, and verification status. The response returns user summaries optimized for list views, supporting further detailed retrieval via the 'at' endpoint.\n\nProper validation ensures only authorized users can execute this search and ensures pagination parameters are respected to maintain system performance and data security.\n\nRelated operations include retrieving single user detail (/regularUsers/{regularUserId}), updating user information, and removing users.\n\nError handling covers unauthorized access, invalid filter parameters, and system errors to ensure robust server responses.","summary":"Retrieve paginated list of regular users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering regular users","typeName":"IEventRegistrationRegularUser.IRequest"},"responseBody":{"description":"Paginated collection of regular user summaries","typeName":"IPageIEventRegistrationRegularUser.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/regularUsers","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information of a specific event registration regular user identified by their unique ID. It accesses the event_registration_regular_users table, returning full user profile information including email, full name, contact details, profile picture URL, and email verification status.\n\nIt is designed for administrative or authorized user use, facilitating individual user data management, auditing, or profile display. The unique user identifier is validated and required as a path parameter.\n\nThe response schema returns the complete user entity matching the Prisma DB schema. Error responses cover user not found, unauthorized access, and invalid identifier format.\n\nComplementary APIs include the list search endpoint, update, and delete operations for the user record.","description":"Retrieve detailed information about a regular user by their unique ID. This includes all profile data such as email, full name, phone number, profile picture URL, and email verification status.\n\nThis operation is intended for admin use or authorized contexts where sensitive user data must be accessed securely.\n\nThe user ID must be a valid UUID string. Appropriate authorization checks must be enforced.\n\nErrors include handling for invalid IDs, non-existent users, and permission denials.\n\nRelated endpoints include user list retrieval (/regularUsers), update, and delete operations.","summary":"Retrieve detailed regular user information by ID","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user entity matching Prisma schema","typeName":"IEventRegistrationRegularUser"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/regularUsers/{regularUserId}","method":"get","name":"at"},{"specification":"This operation updates an existing regular user's profile information identified by their unique ID. It allows modification of user fields including email (must remain unique), full name, phone number, profile picture URL, and email verification status. The user ID parameter ensures the target entity is correctly identified.\n\nOnly authorized administrators can perform updates to maintain data integrity and security. The update request body must comply with the defined data transfer object schema to ensure valid modifications.\n\nThe response returns the updated user entity reflecting committed changes. Validation includes email uniqueness checks, data format validations, and authorization enforcement.\n\nComplementary endpoints include retrieving user details and deleting user accounts.","description":"Update profile information of a regular user by their unique ID. Fields such as email, full name, phone number, profile picture, and email verification flag can be updated.\n\nAuthorization is limited to admins. This operation ensures data consistency and prevents unauthorized modifications.\n\nThe user ID must be a valid UUID. Request body schema enforces data correctness.\n\nResponses include the updated user record or error messages for validation failures.","summary":"Update regular user profile by ID","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating regular user profile","typeName":"IEventRegistrationRegularUser.IUpdate"},"responseBody":{"description":"Updated user entity","typeName":"IEventRegistrationRegularUser"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/regularUsers/{regularUserId}","method":"put","name":"update"},{"specification":"This operation permanently removes a regular user from the system identified by their unique ID. It performs a hard delete directly on the event_registration_regular_users table since no soft delete fields are defined for this model.\n\nSecurity considerations mandate that only administrators with appropriate privileges can execute user deletion to prevent inadvertent data loss.\n\nDeletion cascades to dependent relations such as email verification tokens, event signups, waitlists, organizer requests, and notifications, ensuring referential integrity.\n\nResponse is typically empty upon successful deletion. Errors include user not found, invalid ID format, and access denied.\n\nRelated operations are search, detailed retrieval, and update of users.","description":"Delete a regular user permanently by their unique ID. This operation cascades to all related user records such as verification tokens and signups.\n\nOnly admins are authorized to perform this delete action for security and compliance.\n\nThe user ID must be a valid UUID.\n\nErrors handled include non-existent user IDs and permission issues.\n\nThis is a hard delete operation with no restoration option.\n\nOther user management endpoints include search, retrieve, and update.","summary":"Permanently delete regular user by ID","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/regularUsers/{regularUserId}","method":"delete","name":"erase"},{"specification":"This operation updates (modifies) email verification tokens related to a specific regular user. It allows administrators or authorized services to change fields of an existing verification token record in the event_registration_email_verification_tokens table, which stores verification tokens used to confirm user emails. The ability to update tokens supports workflows such as token renewal or invalidation before expiry. The operation requires the regular user's ID and the ID of the token to be updated.","description":"This endpoint enables modification of an existing email verification token record for a given regular user.\n\nThe table event_registration_email_verification_tokens stores tokens for verifying user emails, linked by the user's ID.\n\nSecurity and authorization roles must ensure that only authorized parties can update verification tokens.\n\nUpdating tokens may occur for administrative actions such as extending expiry or reissuing tokens.\n\nThe input request body should contain properties matching the schema for update requests, and only allowed fields will be modified.\n\nErrors should be handled for non-existing token or user references.","summary":"Update an email verification token for a specific regular user","parameters":[{"name":"regularUserId","description":"ID of the regular user owning the token","schema":{"type":"string","format":"uuid"}},{"name":"emailVerificationTokenId","description":"ID of the email verification token to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update details of the email verification token","typeName":"IEventRegistrationEmailVerificationToken.IUpdate"},"responseBody":{"description":"The updated email verification token information","typeName":"IEventRegistrationEmailVerificationToken"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/regularUsers/{regularUserId}/emailVerificationTokens/{emailVerificationTokenId}","method":"put"},{"specification":"This operation retrieves detailed information about a specific email verification token for a given regular user. It fetches the token record from the event_registration_email_verification_tokens table, enabling clients or admin users to view token data such as the token string, expiry, and creation time. It is essential for audit, validation, or troubleshooting processes.\n\nRequires the regular user's ID and the email verification token's ID.","description":"Endpoint to get detailed information of a specific email verification token belonging to a regular user.\n\nAccess is typically restricted to admins or authorized system services.\n\nThis aids in token lifecycle management and auditing.\n\nErrors must be handled if the token or user is not found.","summary":"Retrieve a specific email verification token by its ID for a regular user","parameters":[{"name":"regularUserId","description":"ID of the regular user owning the token","schema":{"type":"string","format":"uuid"}},{"name":"emailVerificationTokenId","description":"ID of the email verification token to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Email verification token details","typeName":"IEventRegistrationEmailVerificationToken"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/regularUsers/{regularUserId}/emailVerificationTokens/{emailVerificationTokenId}","method":"get"},{"specification":"This operation generates a new email verification token for a specific regular user. It creates a token entity in the event_registration_email_verification_tokens table with unique token string and expiry timestamp. This supports the email verification process upon user registration or token renewal requests. The system ensures uniqueness of the token and associates it with the specified user ID.\n\nRequires the regular user's ID and token creation input data.","description":"Create a new email verification token record for the given regular user.\n\nThe token is unique and used to validate the email address ownership.\n\nThis supports the email verification workflow.\n\nProper authorization ensures only authenticated or admin users can perform this action.\n\nThe request body must contain the necessary token creation details following schema constraints.","summary":"Create a new email verification token for a regular user","parameters":[{"name":"regularUserId","description":"ID of the regular user to create token for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for creating a new email verification token","typeName":"IEventRegistrationEmailVerificationToken.ICreate"},"responseBody":{"description":"The newly created email verification token information","typeName":"IEventRegistrationEmailVerificationToken"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/regularUsers/{regularUserId}/emailVerificationTokens","method":"post"},{"specification":"This operation obtains a list of email verification tokens of a specific regular user. It retrieves the tokens linked to a user from the event_registration_email_verification_tokens table, which maintains records of tokens used for verification of user email addresses. This is useful for admin or system services to review all active or historic tokens for a user.\n\nThe operation requires the regular user's ID as a path parameter.\n\nResponses include pagination, filtering and searching properties in the request body.\n\nThis PATCH method with request body enables advanced queries on tokens for a user.","description":"Retrieve a paginated, filtered list of email verification tokens belonging to a specific regular user.\n\nAccess is typically limited to admins.\n\nSupports query parameters for searching and paginating the list.\n\nUseful for audit and management of email verification tokens.","summary":"Get list of email verification tokens for a specified regular user","parameters":[{"name":"regularUserId","description":"ID of the regular user whose tokens to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for token filtering","typeName":"IEventRegistrationEmailVerificationToken.IRequest"},"responseBody":{"description":"Paginated list of email verification tokens","typeName":"IPageIEventRegistrationEmailVerificationToken"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/eventRegistration/admin/regularUsers/{regularUserId}/emailVerificationTokens","method":"patch"},{"specification":"This operation deletes an existing email verification token associated with a specific regular user. It permanently removes the token record from the event_registration_email_verification_tokens table in the database, identified by its ID. This is necessary for token lifecycle management, such as revoking unused or expired tokens. Only users with admin privileges should perform this operation to ensure security and prevent unauthorized removal of verification tokens.","description":"This API endpoint allows for the permanent deletion of an email verification token belonging to a specific regular user. It uses the user ID and the token ID as path parameters to target the exact token to remove.\n\nDeleting a token helps maintain security hygiene and allows invalidation of tokens that are no longer valid or needed.\n\nThis operation corresponds to the event_registration_email_verification_tokens table and removes the record irrevocably.\n\nAuthorized roles: admin only.\n\nError handling includes returning appropriate error messages if the token or user does not exist.\n\nNo request body is needed.\n\nNo response body is returned upon successful deletion.\n","summary":"Delete an email verification token by ID for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"emailVerificationTokenId","description":"Unique identifier of the email verification token to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseEmailVerificationToken","path":"/eventRegistration/admin/regularUsers/{regularUserId}/emailVerificationTokens/{emailVerificationTokenId}","method":"delete"},{"specification":"This operation retrieves a paginated list of event attendee records for a specific regular user. It queries the event_registration_event_attendees table, filtering by the regularUserId path parameter. Results support pagination and potentially filtering or sorting based on the request body parameters.\n\nThis enables users or admins to view event attendance records tied to a user.\n\nOnly authenticated users or admins are allowed to access this data.","description":"Retrieves a paginated collection of event attendee records associated with the specified regular user. This allows viewing which events the user has attended or signed up for.\n\nThe request body specifies pagination and filtering criteria.\n\nThis operation returns a paginated list of attendee summaries.\n\nAuthorization roles include authenticated regular users and admins.","summary":"Retrieve paginated list of event attendees for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendee summaries","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"indexEventAttendeesByUser","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/attendees","method":"patch"},{"specification":"This operation retrieves a paginated list of event attendee records for a specific regular user. It queries the event_registration_event_attendees table, filtering by the regularUserId path parameter. Results support pagination and potentially filtering or sorting based on the request body parameters.\n\nThis enables users or admins to view event attendance records tied to a user.\n\nOnly authenticated users or admins are allowed to access this data.","description":"Retrieves a paginated collection of event attendee records associated with the specified regular user. This allows viewing which events the user has attended or signed up for.\n\nThe request body specifies pagination and filtering criteria.\n\nThis operation returns a paginated list of attendee summaries.\n\nAuthorization roles include authenticated regular users and admins.","summary":"Retrieve paginated list of event attendees for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendee summaries","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"indexEventAttendeesByUser","path":"/eventRegistration/admin/regularUsers/{regularUserId}/attendees","method":"patch"},{"specification":"This operation retrieves detailed information about a single event attendee record for a given regular user, identified by the unique eventAttendeeId. It accesses the event_registration_event_attendees table and returns full details about the attendee record.\n\nAccess is role-restricted to the owner user or administrators.\n\nPath parameters specify both the user ID and the attendee record ID.\n\nResponse includes complete event attendee entity data.","description":"Retrieves full details of a specific event attendee record for the given regular user. This includes all properties of the attendee record such as event association and timestamps.\n\nAccess control restricts viewing to the owning user or admins.\n\nNo request body is required.\n\nReturns the event attendee entity as the response body.","summary":"Get detailed event attendee record by ID for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee entity","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"regularUser","name":"atEventAttendeeByUser","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"get"},{"specification":"This operation retrieves detailed information about a single event attendee record for a given regular user, identified by the unique eventAttendeeId. It accesses the event_registration_event_attendees table and returns full details about the attendee record.\n\nAccess is role-restricted to the owner user or administrators.\n\nPath parameters specify both the user ID and the attendee record ID.\n\nResponse includes complete event attendee entity data.","description":"Retrieves full details of a specific event attendee record for the given regular user. This includes all properties of the attendee record such as event association and timestamps.\n\nAccess control restricts viewing to the owning user or admins.\n\nNo request body is required.\n\nReturns the event attendee entity as the response body.","summary":"Get detailed event attendee record by ID for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee entity","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"admin","name":"atEventAttendeeByUser","path":"/eventRegistration/admin/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"get"},{"specification":"This operation creates a new event attendee record representing a confirmed attendee registration for an event by the specified regular user. It inserts a record into the event_registration_event_attendees table, linking the user with the event.\n\nThe request body requires creation data including event ID and user data.\n\nAccess is restricted to authenticated regular users and admins.\n\nResponse returns the created event attendee entity with detailed information.","description":"Registers a regular user as an attendee for a specific event by creating a new attendee record.\n\nThe request body must include the necessary data to associate the user with the event.\n\nOn success, returns the detailed attendee record including timestamps and IDs.\n\nThis operation supports the event sign-up workflow.\n\nAuthorization roles include authenticated regular users and admins.","summary":"Create a new event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info for registering event attendee","typeName":"IEventRegistrationEventAttendee.ICreate"},"responseBody":{"description":"Created event attendee entity with details","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"regularUser","name":"createEventAttendeeForUser","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/attendees","method":"post"},{"specification":"This operation creates a new event attendee record representing a confirmed attendee registration for an event by the specified regular user. It inserts a record into the event_registration_event_attendees table, linking the user with the event.\n\nThe request body requires creation data including event ID and user data.\n\nAccess is restricted to authenticated regular users and admins.\n\nResponse returns the created event attendee entity with detailed information.","description":"Registers a regular user as an attendee for a specific event by creating a new attendee record.\n\nThe request body must include the necessary data to associate the user with the event.\n\nOn success, returns the detailed attendee record including timestamps and IDs.\n\nThis operation supports the event sign-up workflow.\n\nAuthorization roles include authenticated regular users and admins.","summary":"Create a new event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info for registering event attendee","typeName":"IEventRegistrationEventAttendee.ICreate"},"responseBody":{"description":"Created event attendee entity with details","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"admin","name":"createEventAttendeeForUser","path":"/eventRegistration/admin/regularUsers/{regularUserId}/attendees","method":"post"},{"specification":"This operation updates an event attendee record for a specified regular user and attendee ID in the event_registration_event_attendees table. It provides a mechanism to modify confirmed attendance details, such as updating timestamps or related fields within the attendee record as allowed. The endpoint requires path parameters regularUserId and eventAttendeeId matching UUID formats to precisely identify the target record. The request body must follow the IEventRegistrationEventAttendee.IUpdate schema representing updatable fields for an attendee. The response body returns the updated event attendee object. Authorization is limited to roles regularUser, eventOrganizer, and admin to secure attendance modifications. This operation ensures accurate management of event participation records in compliance with business logic for attendance tracking and event capacity management.","description":"This endpoint allows updating an existing event attendee record for a regular user. The attendee represents the confirmed registration of the user to an event in the system.\n\nThe update operation requires both the regularUserId and eventAttendeeId path parameters to locate and identify the specific event attendee record.\n\nThe authorized roles that can perform this operation include regularUser (owner), eventOrganizer (event manager), and admin.\n\nThe request body must include the properties defined in IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted attendee attributes while preserving audit and immutable fields.\n\nSuccessful operation returns the updated event attendee object reflecting the new registration details.\n\nErrors are raised if the user or attendee record does not exist or if authorization fails.\n\nThis operation is crucial for managing attendee information, maintaining attendance accuracy, and supporting event management workflows.","summary":"Update an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Event attendee data for update","typeName":"IEventRegistrationEventAttendee.IUpdate"},"responseBody":{"description":"Updated event attendee details","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"put"},{"specification":"This operation updates an event attendee record for a specified regular user and attendee ID in the event_registration_event_attendees table. It provides a mechanism to modify confirmed attendance details, such as updating timestamps or related fields within the attendee record as allowed. The endpoint requires path parameters regularUserId and eventAttendeeId matching UUID formats to precisely identify the target record. The request body must follow the IEventRegistrationEventAttendee.IUpdate schema representing updatable fields for an attendee. The response body returns the updated event attendee object. Authorization is limited to roles regularUser, eventOrganizer, and admin to secure attendance modifications. This operation ensures accurate management of event participation records in compliance with business logic for attendance tracking and event capacity management.","description":"This endpoint allows updating an existing event attendee record for a regular user. The attendee represents the confirmed registration of the user to an event in the system.\n\nThe update operation requires both the regularUserId and eventAttendeeId path parameters to locate and identify the specific event attendee record.\n\nThe authorized roles that can perform this operation include regularUser (owner), eventOrganizer (event manager), and admin.\n\nThe request body must include the properties defined in IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted attendee attributes while preserving audit and immutable fields.\n\nSuccessful operation returns the updated event attendee object reflecting the new registration details.\n\nErrors are raised if the user or attendee record does not exist or if authorization fails.\n\nThis operation is crucial for managing attendee information, maintaining attendance accuracy, and supporting event management workflows.","summary":"Update an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Event attendee data for update","typeName":"IEventRegistrationEventAttendee.IUpdate"},"responseBody":{"description":"Updated event attendee details","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"update","path":"/eventRegistration/eventOrganizer/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"put"},{"specification":"This operation updates an event attendee record for a specified regular user and attendee ID in the event_registration_event_attendees table. It provides a mechanism to modify confirmed attendance details, such as updating timestamps or related fields within the attendee record as allowed. The endpoint requires path parameters regularUserId and eventAttendeeId matching UUID formats to precisely identify the target record. The request body must follow the IEventRegistrationEventAttendee.IUpdate schema representing updatable fields for an attendee. The response body returns the updated event attendee object. Authorization is limited to roles regularUser, eventOrganizer, and admin to secure attendance modifications. This operation ensures accurate management of event participation records in compliance with business logic for attendance tracking and event capacity management.","description":"This endpoint allows updating an existing event attendee record for a regular user. The attendee represents the confirmed registration of the user to an event in the system.\n\nThe update operation requires both the regularUserId and eventAttendeeId path parameters to locate and identify the specific event attendee record.\n\nThe authorized roles that can perform this operation include regularUser (owner), eventOrganizer (event manager), and admin.\n\nThe request body must include the properties defined in IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted attendee attributes while preserving audit and immutable fields.\n\nSuccessful operation returns the updated event attendee object reflecting the new registration details.\n\nErrors are raised if the user or attendee record does not exist or if authorization fails.\n\nThis operation is crucial for managing attendee information, maintaining attendance accuracy, and supporting event management workflows.","summary":"Update an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Event attendee data for update","typeName":"IEventRegistrationEventAttendee.IUpdate"},"responseBody":{"description":"Updated event attendee details","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"put"},{"specification":"This operation performs a permanent deletion of a specified event attendee record associated with a regular user. It removes the attendance record from the event_registration_event_attendees table, reflecting event cancellations or user deregistrations. The path parameters regularUserId and eventAttendeeId uniquely identify the attendee to delete. This is a hard delete operation with no request body and no response body content upon success. Authorization to execute this endpoint is restricted to regularUser, eventOrganizer, and admin roles to ensure authorized cancellation management. This operation helps maintain accurate attendance data and triggers related business workflows such as waitlist promotion externally.","description":"This API operation permanently deletes the event attendee record for a given regularUserId and eventAttendeeId. The record represents confirmed attendance of the user for the event.\n\nOnly authorized roles such as regularUser, eventOrganizer, and admin can perform this deletion.\n\nNo request body is required. Upon success, the response contains no content.\n\nThis endpoint enforces business rules for cancellation and attendance management.\n\nErrors are returned if the record does not exist or the caller lacks the necessary permissions.\n\nDeleting an attendee may trigger waitlist promotions as handled outside this operation.\n\nThis ensures event attendance metrics remain consistent and accurate.","summary":"Delete an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"delete"},{"specification":"This operation performs a permanent deletion of a specified event attendee record associated with a regular user. It removes the attendance record from the event_registration_event_attendees table, reflecting event cancellations or user deregistrations. The path parameters regularUserId and eventAttendeeId uniquely identify the attendee to delete. This is a hard delete operation with no request body and no response body content upon success. Authorization to execute this endpoint is restricted to regularUser, eventOrganizer, and admin roles to ensure authorized cancellation management. This operation helps maintain accurate attendance data and triggers related business workflows such as waitlist promotion externally.","description":"This API operation permanently deletes the event attendee record for a given regularUserId and eventAttendeeId. The record represents confirmed attendance of the user for the event.\n\nOnly authorized roles such as regularUser, eventOrganizer, and admin can perform this deletion.\n\nNo request body is required. Upon success, the response contains no content.\n\nThis endpoint enforces business rules for cancellation and attendance management.\n\nErrors are returned if the record does not exist or the caller lacks the necessary permissions.\n\nDeleting an attendee may trigger waitlist promotions as handled outside this operation.\n\nThis ensures event attendance metrics remain consistent and accurate.","summary":"Delete an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"eventOrganizer","name":"erase","path":"/eventRegistration/eventOrganizer/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"delete"},{"specification":"This operation performs a permanent deletion of a specified event attendee record associated with a regular user. It removes the attendance record from the event_registration_event_attendees table, reflecting event cancellations or user deregistrations. The path parameters regularUserId and eventAttendeeId uniquely identify the attendee to delete. This is a hard delete operation with no request body and no response body content upon success. Authorization to execute this endpoint is restricted to regularUser, eventOrganizer, and admin roles to ensure authorized cancellation management. This operation helps maintain accurate attendance data and triggers related business workflows such as waitlist promotion externally.","description":"This API operation permanently deletes the event attendee record for a given regularUserId and eventAttendeeId. The record represents confirmed attendance of the user for the event.\n\nOnly authorized roles such as regularUser, eventOrganizer, and admin can perform this deletion.\n\nNo request body is required. Upon success, the response contains no content.\n\nThis endpoint enforces business rules for cancellation and attendance management.\n\nErrors are returned if the record does not exist or the caller lacks the necessary permissions.\n\nDeleting an attendee may trigger waitlist promotions as handled outside this operation.\n\nThis ensures event attendance metrics remain consistent and accurate.","summary":"Delete an event attendee record for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/eventRegistration/admin/regularUsers/{regularUserId}/attendees/{eventAttendeeId}","method":"delete"},{"specification":"This operation retrieves a paginated, filtered, and sorted list of waitlist entries for a given regular user from the event_registration_event_waitlists table. The path parameter regularUserId specifies the user. The request body is an object conforming to IEventRegistrationEventWaitlist.IRequest containing filtering criteria such as event status, date ranges, and sorting parameters. The response provides a paginated summary list (IPageIEventRegistrationEventWaitlist.ISummary) of waitlist entries, reflecting the user's current waitlisted events. Authorization is granted to regularUser, eventOrganizer, and admin roles, enforcing access controls and personal data protection. This endpoint supports user self-service to monitor waitlist statuses and supports event management by organizers and admins.","description":"This API endpoint allows querying and paginating event waitlist entries for a specific regular user.\n\nThe regularUserId path parameter identifies the user whose waitlist entries are requested.\n\nClients can send filtering, pagination, and sorting criteria in the request body adhering to IEventRegistrationEventWaitlist.IRequest type.\n\nThe response returns a paginated collection of event waitlist summaries, enabling the user to view events where they are on the waitlist.\n\nThe authorized roles include regularUser, eventOrganizer, and admin, so users can view their own waitlists, organizers can manage waitlists for their events, and admins have global access.\n\nThis operation is essential for providing transparency and management of waitlisted event participation.","summary":"Retrieve paginated waitlist entries for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filters and pagination for waitlist query","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paginated waitlist summaries for the user","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/waitlists","method":"patch"},{"specification":"This operation retrieves a paginated, filtered, and sorted list of waitlist entries for a given regular user from the event_registration_event_waitlists table. The path parameter regularUserId specifies the user. The request body is an object conforming to IEventRegistrationEventWaitlist.IRequest containing filtering criteria such as event status, date ranges, and sorting parameters. The response provides a paginated summary list (IPageIEventRegistrationEventWaitlist.ISummary) of waitlist entries, reflecting the user's current waitlisted events. Authorization is granted to regularUser, eventOrganizer, and admin roles, enforcing access controls and personal data protection. This endpoint supports user self-service to monitor waitlist statuses and supports event management by organizers and admins.","description":"This API endpoint allows querying and paginating event waitlist entries for a specific regular user.\n\nThe regularUserId path parameter identifies the user whose waitlist entries are requested.\n\nClients can send filtering, pagination, and sorting criteria in the request body adhering to IEventRegistrationEventWaitlist.IRequest type.\n\nThe response returns a paginated collection of event waitlist summaries, enabling the user to view events where they are on the waitlist.\n\nThe authorized roles include regularUser, eventOrganizer, and admin, so users can view their own waitlists, organizers can manage waitlists for their events, and admins have global access.\n\nThis operation is essential for providing transparency and management of waitlisted event participation.","summary":"Retrieve paginated waitlist entries for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filters and pagination for waitlist query","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paginated waitlist summaries for the user","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"index","path":"/eventRegistration/eventOrganizer/regularUsers/{regularUserId}/waitlists","method":"patch"},{"specification":"This operation retrieves a paginated, filtered, and sorted list of waitlist entries for a given regular user from the event_registration_event_waitlists table. The path parameter regularUserId specifies the user. The request body is an object conforming to IEventRegistrationEventWaitlist.IRequest containing filtering criteria such as event status, date ranges, and sorting parameters. The response provides a paginated summary list (IPageIEventRegistrationEventWaitlist.ISummary) of waitlist entries, reflecting the user's current waitlisted events. Authorization is granted to regularUser, eventOrganizer, and admin roles, enforcing access controls and personal data protection. This endpoint supports user self-service to monitor waitlist statuses and supports event management by organizers and admins.","description":"This API endpoint allows querying and paginating event waitlist entries for a specific regular user.\n\nThe regularUserId path parameter identifies the user whose waitlist entries are requested.\n\nClients can send filtering, pagination, and sorting criteria in the request body adhering to IEventRegistrationEventWaitlist.IRequest type.\n\nThe response returns a paginated collection of event waitlist summaries, enabling the user to view events where they are on the waitlist.\n\nThe authorized roles include regularUser, eventOrganizer, and admin, so users can view their own waitlists, organizers can manage waitlists for their events, and admins have global access.\n\nThis operation is essential for providing transparency and management of waitlisted event participation.","summary":"Retrieve paginated waitlist entries for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filters and pagination for waitlist query","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paginated waitlist summaries for the user","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/eventRegistration/admin/regularUsers/{regularUserId}/waitlists","method":"patch"},{"specification":"This operation retrieves detailed information about a specific event waitlist entry for a regular user, identified uniquely by regularUserId and eventWaitlistId. The endpoint reads from the event_registration_event_waitlists table, returning the complete event waitlist record with all relevant fields such as user association, event reference, and timestamps. The response entity is of type IEventRegistrationEventWaitlist. Access is limited to authorized roles including regularUser, eventOrganizer, and admin. This operation supports detailed user and admin views of event waitlist status to facilitate event participation management and communication.","description":"This API operation fetches full details for a single waitlist record belonging to a regular user.\n\nIt requires path parameters regularUserId and eventWaitlistId to uniquely identify the waitlist entry.\n\nThe response returns a detailed event waitlist object with all fields such as user reference, event association, and timestamps.\n\nRoles authorized to access this endpoint include regularUser, eventOrganizer, and admin.\n\nThe operation is essential to provide detailed waitlist status to users, organizers, and admins for management and notification purposes.\n\nError conditions include missing entries or insufficient access rights.\n\nThis operation helps ensure accurate tracking and transparency of the event waitlist system.","summary":"Retrieve detailed event waitlist entry for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event waitlist information","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/waitlists/{eventWaitlistId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific event waitlist entry for a regular user, identified uniquely by regularUserId and eventWaitlistId. The endpoint reads from the event_registration_event_waitlists table, returning the complete event waitlist record with all relevant fields such as user association, event reference, and timestamps. The response entity is of type IEventRegistrationEventWaitlist. Access is limited to authorized roles including regularUser, eventOrganizer, and admin. This operation supports detailed user and admin views of event waitlist status to facilitate event participation management and communication.","description":"This API operation fetches full details for a single waitlist record belonging to a regular user.\n\nIt requires path parameters regularUserId and eventWaitlistId to uniquely identify the waitlist entry.\n\nThe response returns a detailed event waitlist object with all fields such as user reference, event association, and timestamps.\n\nRoles authorized to access this endpoint include regularUser, eventOrganizer, and admin.\n\nThe operation is essential to provide detailed waitlist status to users, organizers, and admins for management and notification purposes.\n\nError conditions include missing entries or insufficient access rights.\n\nThis operation helps ensure accurate tracking and transparency of the event waitlist system.","summary":"Retrieve detailed event waitlist entry for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event waitlist information","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"at","path":"/eventRegistration/eventOrganizer/regularUsers/{regularUserId}/waitlists/{eventWaitlistId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific event waitlist entry for a regular user, identified uniquely by regularUserId and eventWaitlistId. The endpoint reads from the event_registration_event_waitlists table, returning the complete event waitlist record with all relevant fields such as user association, event reference, and timestamps. The response entity is of type IEventRegistrationEventWaitlist. Access is limited to authorized roles including regularUser, eventOrganizer, and admin. This operation supports detailed user and admin views of event waitlist status to facilitate event participation management and communication.","description":"This API operation fetches full details for a single waitlist record belonging to a regular user.\n\nIt requires path parameters regularUserId and eventWaitlistId to uniquely identify the waitlist entry.\n\nThe response returns a detailed event waitlist object with all fields such as user reference, event association, and timestamps.\n\nRoles authorized to access this endpoint include regularUser, eventOrganizer, and admin.\n\nThe operation is essential to provide detailed waitlist status to users, organizers, and admins for management and notification purposes.\n\nError conditions include missing entries or insufficient access rights.\n\nThis operation helps ensure accurate tracking and transparency of the event waitlist system.","summary":"Retrieve detailed event waitlist entry for a regular user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event waitlist information","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/regularUsers/{regularUserId}/waitlists/{eventWaitlistId}","method":"get"},{"specification":"This operation allows a regular user to create a waitlist entry for a specific event, associating their user account with the event's waitlist. It operates on the event_registration_event_waitlists table in the Prisma schema. The userId parameter identifies which regular user is making the request, while the request body contains necessary data to create the waitlist record, primarily linking to the event being waited for. This API enforces that a user cannot be on the waitlist for the same event multiple times by maintaining unique constraints on event_id and regular_user_id pairs.","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/waitlists","method":"post","summary":"Create a new event waitlist entry for a regular user","description":"Creates a new waitlist entry for a regular user for a specific event. This operation associates the regular user with the event's waitlist in FIFO order based on sign-up time.\n\nThe endpoint requires the user's ID to ensure authorization and linkage. The request body must specify the event for which the user wants to be waitlisted.\n\nSecurity considerations include verifying that only the authenticated regular user can create their own waitlist entries. Attempting to add duplicate waitlist entries for the same event should fail due to unique constraints.\n\nThis operation directly corresponds to the event_registration_event_waitlists table, which holds all waitlist entries with timestamps governing the FIFO logic.\n\nIf the event capacity is full, the user is successfully added to the waitlist. If not full, the API usage for waitlist creation would generally be avoided by client-side logic favoring direct event attendance registration.\n\nErrors include validation failures for missing or invalid fields, and authorization errors if the user ID does not match the authenticated user.","parameters":[{"name":"regularUserId","in":"path","description":"Unique identifier of the regular user creating the waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation data for the event waitlist entry","typeName":"IEventRegistrationEventWaitlists.ICreate"},"responseBody":{"description":"The created event waitlist record","typeName":"IEventRegistrationEventWaitlists"},"authorizationType":null,"authorizationRole":"regularUser","name":"createWaitlistEntry"},{"specification":"This operation allows a regular user to update their event waitlist entry details, such as timestamps or other modifiable fields defined in the waitlist schema. It operates on the event_registration_event_waitlists Prisma table, ensuring that the operation only affects the waitlist entries owned by the authenticated regular user.\n\nThe API requires path parameters for the regular user ID and the event waitlist entry ID to precisely identify the record. In doing so, it guarantees secure updates and preserves data integrity by enforcing user ownership. The request body contains the updated fields for the waitlist entry.\n\nSecurity permissions require that only the regular user who owns the waitlist entry can perform the update operation.\n\nTypical updates may be limited due to the nature of the waitlist entry, but this endpoint allows extensibility for future fields or corrections.","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/waitlists/{eventWaitlistId}","method":"put","summary":"Update an existing event waitlist entry for a regular user","description":"Updates a specific waitlist entry for a given regular user. This API edits existing event waitlist entries in the database tied to that user.\n\nThe endpoint requires both the regularUserId and the eventWaitlistId to ensure the user is authorized to update their own waitlist entry.\n\nThe request body contains modifiable fields for the event waitlist entry. The response confirms the updated data.\n\nThis operation affects the event_registration_event_waitlists table and enforces ownership and integrity of waitlist records.\n\nCommon scenarios include correcting timestamps or updating any allowed optional fields in the waitlist entity.\n\nSecurity checks ensure only the owner can update their waitlist entries.","parameters":[{"name":"regularUserId","in":"path","description":"Identifier of the regular user owner of the waitlist entry","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","in":"path","description":"Identifier of the target event waitlist entry to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the event waitlist entry","typeName":"IEventRegistrationEventWaitlists.IUpdate"},"responseBody":{"description":"Updated event waitlist entry information","typeName":"IEventRegistrationEventWaitlists"},"authorizationType":null,"authorizationRole":"regularUser","name":"updateWaitlistEntry"},{"specification":"This operation allows a regular user to delete their event waitlist entry, effectively removing them from the waitlist for a specific event. It permanently deletes the entry from the event_registration_event_waitlists table.\n\nThe endpoint requires the regular user's ID and the waitlist entry ID. The operation enforces security by only permitting the deletion by the owner user. The deletion is a hard delete, permanently removing the record.\n\nThis is useful when a regular user decides to cancel their waitlist position or has gained entry to the event via a promotion.\n\nErrors may include not found responses if the entry does not exist or the user does not own the entry.","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/waitlists/{eventWaitlistId}","method":"delete","summary":"Delete an event waitlist entry for a regular user","description":"Deletes a specific event waitlist entry for a given regular user, removing them from the event's waitlist.\n\nRequires the regularUserId and eventWaitlistId path parameters to identify the exact waitlist entry.\n\nThis operation performs a hard delete, permanently removing the record from the database.\n\nSecurity ensures that only the owner regular user can delete their waitlist entries.\n\nUseful when a user cancels their waitlist or is promoted to attendee.\n\nReturns no content upon success.","parameters":[{"name":"regularUserId","in":"path","description":"Identifier of the regular user owner of the waitlist entry","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","in":"path","description":"Identifier of the event waitlist entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"eraseWaitlistEntry"},{"specification":"This operation retrieves a paginated list of notifications for a specified regular user. It queries the event_registration_notifications table filtering notifications by the user ID. The response supports pagination to handle large notification datasets and includes sorting by creation date.\n\nThis endpoint requires the regular user's ID as a path parameter and may support pagination, search, and filtering options in the request body.\n\nNotifications include system and user-generated messages such as registration confirmations, waitlist promotions, event updates, and capacity adjustments.\n\nSecurity restrictions ensure a user can only retrieve their own notifications.","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/notifications","method":"patch","summary":"Get paginated notifications for a regular user","description":"Retrieve a paginated list of notifications for a specific regular user. Notifications include registration confirmations, waitlist promotions, event updates, and other alerts.\n\nSupports pagination and filtering via request body parameters.\n\nEnsures that only the correct user can access their notifications.\n\nThis operation reads from the event_registration_notifications table indexed by user ID and created date.\n\nReturns paginated notification entries with read status and content details.","parameters":[{"name":"regularUserId","in":"path","description":"Unique identifier of the regular user to retrieve notifications for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Parameters for pagination, filtering, and sorting notifications","typeName":"IEventRegistrationNotifications.IRequest"},"responseBody":{"description":"Paginated list of notifications belonging to the user","typeName":"IPageIEventRegistrationNotifications"},"authorizationRoles":["regularUser"],"authorizationRole":"regularUser","authorizationType":null,"name":"getNotifications"},{"specification":"This operation retrieves a specific notification by its ID for a given regular user identified by regularUserId and notificationId. It accesses the 'event_registration_notifications' table, which stores various system and user notifications related to event registration activities. The endpoint requires verifying the user's identity and matching the notification ID to return detailed notification information. This is a read-only endpoint, providing data such as notification type, content, read status, and timestamps.","path":"/eventRegistration/regularUser/regularUsers/{regularUserId}/notifications/{notificationId}","method":"get","summary":"Get a single notification of a regular user","description":"Retrieve a specific notification belonging to a regular user by their notification ID. This operation fetches detailed information about the notification including its type, content, read status, and timestamps.\n\nSecurity considerations include ensuring the requesting user is authenticated and authorized to access the specified notification to prevent unauthorized data disclosure.\n\nThe underlying database entity is the 'event_registration_notifications' table, which associates notifications with regular users or keeps them as system-wide notifications. The notification's read status indicates whether the user has seen the notification.\n\nValidation rules enforce the notification ID and regular user ID to be valid UUIDs and that the notification belongs to the user.\n\nThis endpoint complements notification listing and management APIs.","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information for the user","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"regularUser","name":"at"},{"specification":"This operation creates a new notification record for a specified regular user. It interacts with the 'event_registration_notifications' table, which stores notifications related to event registration activities such as registration confirmations, waitlist promotions, event updates, and capacity changes. The notification includes type, content, read status, and timestamps. This API is designed for authorized system components or admin roles to create user notifications programmatically.","path":"/eventRegistration/admin/regularUsers/{regularUserId}/notifications","method":"post","summary":"Create a notification for a regular user","description":"Create a new notification for a regular user. The notification must include type, content, and other relevant details. This operation is typically used by system processes or administrators to inform users about registration confirmations, waitlist promotions, event changes, and other important updates.\n\nSecurity concerns require that only authorized roles can create notifications to prevent spam or malicious entries.\n\nThis operation saves the notification in the 'event_registration_notifications' table, linking it to the specified regular user.","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification creation details for the regular user","typeName":"IEventRegistrationNotification.ICreate"},"responseBody":{"description":"Created notification details","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"admin","name":"create"},{"specification":"This operation updates an existing notification for a given regular user by notification ID. It acts on the 'event_registration_notifications' table which maintains the system and user notifications related to event registration activities. Typical uses include marking notifications as read, updating the content or type if necessary. This operation validates ownership and authorization before applying changes.","path":"/eventRegistration/admin/regularUsers/{regularUserId}/notifications/{notificationId}","method":"put","summary":"Update a notification of a regular user","description":"Update an existing notification of a regular user identified by notification ID. Common updates include changing the read status or modifying notification content or type.\n\nThe operation ensures the notification belongs to the specified user and enforces authorization checks.\n\nThe 'event_registration_notifications' table stores the notification details linked to the regular users. Update operations are critical for notification lifecycle management such as marking messages read or correcting content.","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update data for the regular user","typeName":"IEventRegistrationNotification.IUpdate"},"responseBody":{"description":"Updated notification details","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a specified notification from the given regular user's notification list based on notification ID. It permanently removes the record from 'event_registration_notifications' and ensures that only authorized administrators can perform this action. This endpoint complements notification management and cleanup activities in the system.","path":"/eventRegistration/admin/regularUsers/{regularUserId}/notifications/{notificationId}","method":"delete","summary":"Delete a notification of a regular user","description":"Delete a notification of a regular user by notification ID. This operation permanently removes the notification record from the system.\n\nAuthorization is required to ensure that only admins or authorized users can delete notifications, preventing accidental or malicious data loss.\n\nThe underlying database is 'event_registration_notifications' where notifications are linked to users or as system messages. After deletion, the notification will no longer be accessible or retrievable.","parameters":[{"name":"regularUserId","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of event organizers from the event_registration_event_organizers table in the Prisma schema. It enables querying event organizer records with options for filtering by properties such as email, full name, verification status, phone number, and creation date. The operation supports pagination, sorting, and search capabilities to allow efficient admin or system user browsing of event organizer accounts.","description":"Retrieve a filtered and paginated list of event organizers from the system. This allows querying event organizer accounts by criteria such as email, full name, and email verification status.\n\nSecurity considerations ensure that only authorized system users can access detailed organizer information. Pagination and sorting capabilities are supported for handling large datasets efficiently.\n\nThis operation references the event_registration_event_organizers table in the Prisma schema, utilizing all publicly available columns for search and display. The response provides a page of organizer summaries optimized for list views.","summary":"List and search event organizers with filtering and pagination","parameters":[],"requestBody":{"description":"Search and pagination parameters for filtering event organizers","typeName":"IEventRegistrationEventOrganizer.IRequest"},"responseBody":{"description":"Paginated list of event organizer summaries","typeName":"IPageIEventRegistrationEventOrganizer.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/eventRegistration/admin/eventOrganizers","method":"patch"},{"specification":"This operation retrieves detailed information about a specific event organizer identified by their unique ID. It provides the full details from the event_registration_event_organizers table, including contact details and verification status.\n\nSecurity constraints restrict access to admins who manage event organizers. The operation requires the eventOrganizerId path parameter, which is validated as a UUID corresponding to the organizer's primary key in the database.\n\nThe response includes the complete event organizer record information as specified in the Prisma schema.","description":"Get detailed information of a specific event organizer by ID. Only admins may access this endpoint.\n\nThe operation requires a UUID path parameter eventOrganizerId representing the target organizer.\n\nThis operation maps to the event_registration_event_organizers table in the Prisma schema and returns all relevant organizer fields, including email, full name, phone number, and email verification status.\n\nAppropriate security measures ensure only authorized users can retrieve this sensitive information.","summary":"Retrieve details of a specific event organizer","parameters":[{"name":"eventOrganizerId","description":"Unique identifier of the event organizer","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event organizer information","typeName":"IEventRegistrationEventOrganizer"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/eventOrganizers/{eventOrganizerId}","method":"get"},{"specification":"This operation creates a new event organizer account in the system based on the provided creation data. It inserts the new organizer into the event_registration_event_organizers table with required fields such as email, hashed password, full name, optional phone number, profile picture URL, and email verification status.\n\nSecurity policy restricts this operation to admin roles who can add event organizers. The input request body must conform to the IEventRegistrationEventOrganizer.ICreate schema.\n\nUpon successful creation, the full record of the new event organizer is returned.","description":"Create a new event organizer account with all necessary information. This operation is restricted to admins.\n\nThe request body must include email, password hash, full name, and optionally phone number and profile picture URL.\n\nThe system sets the email_verified flag according to input.\n\nThis operation inserts a record into the event_registration_event_organizers table and returns the created organizer's full data.","summary":"Create a new event organizer","parameters":[],"requestBody":{"description":"Creation data for a new event organizer","typeName":"IEventRegistrationEventOrganizer.ICreate"},"responseBody":{"description":"Created event organizer record","typeName":"IEventRegistrationEventOrganizer"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/eventOrganizers","method":"post"},{"specification":"This operation updates an existing event organizer's information identified by their unique ID. It accepts update data such as full name, phone number, profile picture URL, and email verification status.\n\nSecurity permissions allow only admins to update event organizers system-wide. The eventOrganizerId path parameter is required and validated as a UUID.\n\nThe update modifies the event_registration_event_organizers table record and returns the updated organizer data after applying changes.","description":"Update an existing event organizer's profile details by ID. Admins only.\n\nThe path parameter eventOrganizerId identifies the event organizer to be updated.\n\nThe request body includes the fields allowed for update, such as full name, phone number, profile picture URL, and email verification flag.\n\nSuccessful updates return the updated event organizer record, reflecting all changes.\n\nThis operation corresponds to the event_registration_event_organizers table in the Prisma schema.","summary":"Update event organizer data","parameters":[{"name":"eventOrganizerId","description":"Unique identifier of the event organizer to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for an event organizer","typeName":"IEventRegistrationEventOrganizer.IUpdate"},"responseBody":{"description":"Updated event organizer record","typeName":"IEventRegistrationEventOrganizer"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/eventOrganizers/{eventOrganizerId}","method":"put"},{"specification":"This API operation lists administrator user accounts from the event registration platform identity module. It supports filtering, pagination, and sorting of admins, allowing system administrators to efficiently manage and review admin user accounts. The operation interacts with the event_registration_admins table in the Prisma schema, which includes core user data such as email, full name, phone number, email verification status, and timestamps. List queries support filtering by name and creation date to facilitate efficient data retrieval. Required authorization is limited to admin users only, ensuring that only authorized personnel can manage admin accounts.","description":"Retrieve a paginated, filtered list of administrator user accounts from the event registration platform. The returned list includes detailed information such as email, full name, phone number, profile pictures, and email verification status.\n\nThis operation supports advanced search features, including filtering by full name with trigram search support, sorting by creation date or name, and pagination controls.\n\nAuthorization is restricted to admin users only due to the sensitive nature of administering system-wide users. Data access is audited and role-based controls protect user information.\n\nThis operation targets the event_registration_admins table, referencing unique email constraints, audit timestamps, and contact details essential for identity management.\n\nErrors include access denial for unauthorized users and invalid pagination parameters.\n\nSecurity best practices require encrypted handling of sensitive data fields and careful filtering of query outcomes.","summary":"Search and retrieve a filtered, paginated list of admin users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for administrator user accounts filtering","typeName":"IEventRegistrationAdmin.IRequest"},"responseBody":{"description":"Paginated list of admin user summaries matching search criteria","typeName":"IPageIEventRegistrationAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/eventRegistration/admin/admins","method":"patch"},{"specification":"This API operation retrieves detailed information of a single administrator account by its unique identifier. It targets the event_registration_admins table in the Prisma schema, which stores essential identity data including email, full name, phone number, email verification status, and timestamps.\n\nThe operation requires the admin ID as a path parameter (UUID string) and returns full admin details, useful for management and auditing purposes.\n\nAccess is restricted to users with the 'admin' role to protect sensitive data. Appropriate error responses are returned for invalid IDs or unauthorized access.","description":"Retrieve detailed information about a specific admin user identified by their unique ID.\n\nThis operation is intended for administrative use and returns data such as email, full name, phone number, profile picture, and email verification status.\n\nAdmin-only access is strictly enforced. The response includes timestamps for creation and updates, supporting audit requirements.\n\nInvalid UUID formats or requests for non-existent admins result in error responses with appropriate status codes.\n\nThis operation uses the event_registration_admins table, ensuring data consistency and integrity reflecting the database state.","summary":"Retrieve detailed admin user information by ID","parameters":[{"name":"adminId","description":"Unique identifier of the target admin user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested admin user","typeName":"IEventRegistrationAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/admins/{adminId}","method":"get"},{"specification":"This API operation creates a new administrator user account in the event registration platform. It works on the event_registration_admins table in the Prisma schema, accepting essential identity data such as email, full name, phone number, profile picture URL, password hash, and email verification status.\n\nThe operation requires a detailed request body with all necessary fields for creating an admin user. The email must be unique.\n\nThis action is restricted to authorized admin roles only as it grants high privileges. Errors include validation failures, duplicate email detection, and authorization rejection.\n\nThe created user is returned in the response with all identity fields except password hash for security reasons.\n\nSecurity considerations include encrypted password handling and strict role-based access.","description":"Create a new administrator user account with identity credentials and contact information.\n\nOnly authorized admin users can perform this operation.\n\nThe request body must include email, password hash, full name, optional phone number, profile picture URL, and email verification status.\n\nSuccessful creation returns the detailed user record, excluding sensitive password hash.\n\nDuplicate email addresses are rejected to maintain email uniqueness.","summary":"Create a new admin user","parameters":[],"requestBody":{"description":"Creation info of the admin user","typeName":"IEventRegistrationAdmin.ICreate"},"responseBody":{"description":"Information about the newly created admin user","typeName":"IEventRegistrationAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/admins","method":"post"},{"specification":"This API operation permanently removes an event organizer user account identified by a unique UUID. It operates on the event_registration_event_organizers table within the identity module of the event registration platform.\n\nThe operation requires the eventOrganizerId path parameter to specify which organizer to delete.\n\nOnly authorized users with admin roles can perform this deletion to prevent unauthorized account removals.\n\nThe operation performs a hard delete, fully removing the record from the database. No request body or response body content is required.\n\nErrors that may be encountered include invalid UUID format, unauthorized access, and attempts to delete non-existent organizers.\n\nSecurity precautions ensure deletion is logged and audited separately outside this API.\n\nThis operation supports user lifecycle management within the platform.","description":"Permanently delete an event organizer user account by the specified unique identifier.\n\nThis operation is restricted to admin users with appropriate privileges.\n\nOnce deleted, the event organizer data is irreversibly removed from the system.\n\nAttempts to delete non-existent records or invalid IDs return errors.\n\nNo response body content is returned upon successful deletion.\n\nAll deletions are audited by system logs outside this API.\n\nDeletes the entry from the event_registration_event_organizers table in the Prisma schema.","summary":"Delete an event organizer user account by ID","parameters":[{"name":"eventOrganizerId","description":"Unique identifier of the target event organizer to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/eventRegistration/admin/eventOrganizers/{eventOrganizerId}","method":"delete"},{"specification":"This operation updates an admin user record in the event_registration_admins table. The admin user is identified by their unique UUID. It allows modification of the admin's email, password hash, full name, phone number, profile picture URL, and email verification status. The operation requires the adminId path parameter which corresponds to the UUID primary key of the admin. The request body schema references IEventRegistrationAdmin.IUpdate, providing all fields editable for this entity. The response returns the updated admin user object. Authorization required is 'admin' role, reflecting administrative privilege to manage admin accounts.","description":"Update an existing administrator's user record by their unique ID. This operation enables modification of personal and authentication details including email, password hash, name, contact information, profile picture URL, and email verified status.\n\nAccess to this operation is restricted to users with the 'admin' role to ensure only authorized personnel can update administrator records.\n\nThe underlying data entity is event_registration_admins, containing all relevant user identification and contact fields. The API endpoint requires the unique adminId path parameter to specify which admin user to update.\n\nThe request body must conform to the IEventRegistrationAdmin.IUpdate schema, ensuring validated data updates. Upon success, the updated admin record is returned.\n\nFailures include invalid adminId not matching any records, or unauthorized access attempts by non-admin users.","summary":"Update an administrator user by ID","parameters":[{"name":"adminId","description":"Unique identifier of the target admin user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin user update request body","typeName":"IEventRegistrationAdmin.IUpdate"},"responseBody":{"description":"Updated administrator user information","typeName":"IEventRegistrationAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"updateAdminUser","path":"/eventRegistration/admin/admins/{adminId}","method":"put"},{"specification":"This operation deletes an admin user record from the event_registration_admins table by its unique UUID identifier. The delete operation performs a hard delete, permanently removing the admin record. The adminId path parameter identifies the target record to be deleted.\n\nAuthorization is restricted to the 'admin' role as only privileged users can delete admin records. No request body is needed. No response body is returned upon successful deletion.\n\nErrors include attempts to delete non-existent admin user or unauthorized access by non-admin users.","description":"Permanently delete an administrator user record by their unique ID.\n\nThis operation requires the admin role and is restricted to authorized administrators. It completely removes the record from the database, making it unrecoverable.\n\nThe resource is identified by the adminId path parameter.\n\nNo request body or response data is returned.\n\nThis action is irreversible.\n\nFailure cases include invalid adminId or unauthorized access attempts.","summary":"Delete an administrator user by ID","parameters":[{"name":"adminId","description":"Unique identifier of the admin user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseAdminUser","path":"/eventRegistration/admin/admins/{adminId}","method":"delete"},{"specification":"This operation retrieves a paginated list of organizer requests stored in the event_registration_organizer_requests table. The endpoint supports complex querying including filtering by status, searching, sorting, and pagination. Each request includes the requester's user ID, status (pending, approved, rejected), and timestamps.\n\nThe request body must conform to IEventRegistrationOrganizerRequests.IRequest providing filter and pagination parameters.\n\nThe response returns a paginated list of organizer request summary entities.\n\nAuthorization roles allowed are 'admin' and 'eventOrganizer', enabling both admins and event organizers to view organizer requests according to their permissions.","description":"Retrieve a paginated, filtered, and sorted list of event organizer requests.\n\nThis operation allows admins and event organizers to query pending, approved, or rejected organizer status requests submitted by regular users. Filtering by status, search terms, and pagination enable efficient management.\n\nThe underlying entity is event_registration_organizer_requests with fields including request ID, user ID, status, reason, and admin comment.\n\nAuthorization is restricted to roles 'admin' and 'eventOrganizer'.\n\nTypical usage includes admin review workflows for approving or rejecting organizer requests.\n\nSearch and filter criteria are provided in the request body, with results paginated in the response.","summary":"Search and list event organizer requests","parameters":[],"requestBody":{"description":"Organizer request search criteria and pagination parameters","typeName":"IEventRegistrationOrganizerRequests.IRequest"},"responseBody":{"description":"Paginated list of organizer request summaries matching search criteria","typeName":"IPageIEventRegistrationOrganizerRequests.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"searchOrganizerRequests","path":"/eventRegistration/admin/organizerRequests","method":"patch"},{"specification":"This operation retrieves a paginated list of organizer requests stored in the event_registration_organizer_requests table. The endpoint supports complex querying including filtering by status, searching, sorting, and pagination. Each request includes the requester's user ID, status (pending, approved, rejected), and timestamps.\n\nThe request body must conform to IEventRegistrationOrganizerRequests.IRequest providing filter and pagination parameters.\n\nThe response returns a paginated list of organizer request summary entities.\n\nAuthorization roles allowed are 'admin' and 'eventOrganizer', enabling both admins and event organizers to view organizer requests according to their permissions.","description":"Retrieve a paginated, filtered, and sorted list of event organizer requests.\n\nThis operation allows admins and event organizers to query pending, approved, or rejected organizer status requests submitted by regular users. Filtering by status, search terms, and pagination enable efficient management.\n\nThe underlying entity is event_registration_organizer_requests with fields including request ID, user ID, status, reason, and admin comment.\n\nAuthorization is restricted to roles 'admin' and 'eventOrganizer'.\n\nTypical usage includes admin review workflows for approving or rejecting organizer requests.\n\nSearch and filter criteria are provided in the request body, with results paginated in the response.","summary":"Search and list event organizer requests","parameters":[],"requestBody":{"description":"Organizer request search criteria and pagination parameters","typeName":"IEventRegistrationOrganizerRequests.IRequest"},"responseBody":{"description":"Paginated list of organizer request summaries matching search criteria","typeName":"IPageIEventRegistrationOrganizerRequests.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"searchOrganizerRequests","path":"/eventRegistration/eventOrganizer/organizerRequests","method":"patch"},{"specification":"This operation retrieves a single event organizer request by its unique ID from the event_registration_organizer_requests table. The organizerRequestId path parameter identifies the specific request.\n\nThe response returns detailed information about the organizer request entity including user ID, status, reason, and admin comments if any.\n\nAccess to this operation is limited to roles 'admin' and 'eventOrganizer'. Unauthorized access is denied.\n\nThis detailed view supports review and management of individual organizer requests in workflows.","description":"Retrieve detailed information for a single event organizer request by ID.\n\nThis operation is used by admins and event organizers to view the full details of a specific organizer status request submitted by a regular user.\n\nThe resource identifier is the organizerRequestId path parameter.\n\nThe response includes all relevant fields such as request status, reason given, and admin comments.\n\nAuthorization is restricted to roles 'admin' and 'eventOrganizer'.","summary":"Get event organizer request details by ID","parameters":[{"name":"organizerRequestId","description":"Unique identifier of the organizer request to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed organizer request information","typeName":"IEventRegistrationOrganizerRequests"},"authorizationType":null,"authorizationRole":"admin","name":"atOrganizerRequest","path":"/eventRegistration/admin/organizerRequests/{organizerRequestId}","method":"get"},{"specification":"This operation retrieves a single event organizer request by its unique ID from the event_registration_organizer_requests table. The organizerRequestId path parameter identifies the specific request.\n\nThe response returns detailed information about the organizer request entity including user ID, status, reason, and admin comments if any.\n\nAccess to this operation is limited to roles 'admin' and 'eventOrganizer'. Unauthorized access is denied.\n\nThis detailed view supports review and management of individual organizer requests in workflows.","description":"Retrieve detailed information for a single event organizer request by ID.\n\nThis operation is used by admins and event organizers to view the full details of a specific organizer status request submitted by a regular user.\n\nThe resource identifier is the organizerRequestId path parameter.\n\nThe response includes all relevant fields such as request status, reason given, and admin comments.\n\nAuthorization is restricted to roles 'admin' and 'eventOrganizer'.","summary":"Get event organizer request details by ID","parameters":[{"name":"organizerRequestId","description":"Unique identifier of the organizer request to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed organizer request information","typeName":"IEventRegistrationOrganizerRequests"},"authorizationRoles":["admin","eventOrganizer"],"path":"/eventRegistration/eventOrganizer/organizerRequests/{organizerRequestId}","method":"get","name":"atOrganizerRequest","authorizationRole":"eventOrganizer","authorizationType":null},{"specification":"This operation allows regular users to submit their request to become event organizers. It creates a new record in the event_registration_organizer_requests table with the requesting user's ID, the request status (initially 'pending'), an optional reason for the request, and timestamps for audit. This endpoint requires authenticated user context with role 'regularUser'. Duplicate requests for the same user are prevented by unique constraints.","description":"Create a new organizer request record where a regular user requests elevated privileges to create and manage events. The status is set as 'pending' upon creation and awaits admin approval.\n\nThis operation securely records the organizer request in the database and enforces uniqueness per user. The user must be authenticated as a regular user.\n\nWhen the request is approved or rejected, the admin will update the status via a separate operation.\n\nErrors are returned if the user already has a pending request or is unauthorized.","summary":"Submit an organizer request by a regular user for admin approval.","parameters":[],"requestBody":{"description":"Data required to create an organizer request","typeName":"IEventRegistrationOrganizerRequest.ICreate"},"responseBody":{"description":"The created organizer request with details","typeName":"IEventRegistrationOrganizerRequest"},"authorizationType":null,"authorizationRole":"regularUser","name":"createOrganizerRequest","path":"/eventRegistration/regularUser/organizerRequests","method":"post"},{"specification":"Update the status and administrative comments of an existing organizer request identified by organizerRequestId. Applies changes to the event_registration_organizer_requests table.\n\nThis operation is restricted to admin users authorized to approve or reject organizer requests. The status must be one of 'pending', 'approved', or 'rejected'.\n\nIt allows admins to record their decision and comments for the request. This updates the request entry with the new status and comments, preserving timestamps.\n\nErrors occur if the request does not exist, the user is unauthorized, or the status value is invalid.","description":"Update an organizer request status and admin comment. Restricted to admin users.\n\nAllows changing the status to 'pending', 'approved', or 'rejected' as per the business rules.\n\nAdmin users must be authenticated and authorized to perform this action.","summary":"Admin updates organizer request status and comment","parameters":[{"name":"organizerRequestId","description":"Identifier of the organizer request to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the organizer request","typeName":"IEventRegistrationOrganizerRequest.IUpdate"},"responseBody":{"description":"The updated organizer request record","typeName":"IEventRegistrationOrganizerRequest"},"authorizationType":null,"authorizationRole":"admin","name":"updateOrganizerRequest","path":"/eventRegistration/admin/organizerRequests/{organizerRequestId}","method":"put"},{"specification":"Delete an existing organizer request record identified by organizerRequestId from the database.\n\nThis operation requires admin authorization and permanently removes the organizer request from event_registration_organizer_requests table. No soft delete is implemented, so the deletion is hard.\n\nErrors result if the request is not found or if authorization fails.","description":"Permanently delete an organizer request by its unique identifier. Requires admin authorization.\n\nThis removes the record completely from the database. No request or response body required.\n\nUnauthorized users cannot perform this operation.","summary":"Delete an organizer request (hard delete)","parameters":[{"name":"organizerRequestId","description":"Unique identifier for the organizer request to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseOrganizerRequest","path":"/eventRegistration/admin/organizerRequests/{organizerRequestId}","method":"delete"},{"specification":"Retrieve a paginated list of events with support for complex filtering, sorting, and pagination through the event_registration_events table.\n\nFiltering supports event date ranges, locations, categories, and status. Sorting options include fields such as event date, name, and ticket price.\n\nThis endpoint is accessible without authentication to allow all users, verified or not, to browse current and upcoming events.\n\nThe response provides paginated event summaries optimized for listing in UI or API clients.","description":"Search and retrieve events with multiple filtering options (date range, location, category, status), sorting, and pagination.\n\nOpen to all users without authentication.\n\nResults are returned as paginated event summaries with essential event information.\n\nSupports efficient browsing of events with filtering criteria.","summary":"Query and list events with filtering and pagination","parameters":[],"requestBody":{"description":"Event search and filter parameters","typeName":"IEventRegistrationEvent.IRequest"},"responseBody":{"description":"Paginated event summary list matching filters","typeName":"IPageIEventRegistrationEvent.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"searchEvents","path":"/eventRegistration/events","method":"patch"},{"specification":"This operation retrieves detailed information about a single event from the event_registration_events table. It returns all event properties including event category reference, name, date, location, capacity, optional description, ticket price, event status, and audit timestamps. The event is identified by its unique UUID eventId path parameter. This read operation supports clients browsing event details to display comprehensive event info to users. It respects the soft deletion flag by only returning active records unless the deleted_at field is processed internally.","description":"Retrieve full details of a single event by its unique eventId. This operation returns the event's core properties including name, scheduled date in ISO 8601 format, location, maximum capacity, optional description, ticket price, and current status which is one of scheduled, cancelled, or completed.\n\nUsers of this endpoint include event organizers wanting to view their events, and general users browsing event details.\n\nThe operation accesses event_registration_events from the Prisma schema, returning all information needed to display event details.\n\nThe eventId parameter corresponds to the primary key UUID of the event record. Appropriate error handling is expected if the event does not exist.\n\nNo request body is needed. The response body returns the full event entity representation.\n\nAuthorization roles allow all users, including unauthenticated users, to access event details.\n\nThis endpoint uses the GET method, ensuring safe and idempotent retrieval of event data.","summary":"Retrieve details of a single event by its eventId","parameters":[{"name":"eventId","description":"Unique identifier of the event","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event information","typeName":"IEventRegistrationEvent"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/eventRegistration/events/{eventId}","method":"get"},{"specification":"This operation creates a new event record in the event_registration_events table. It requires authenticated event organizers or admins to submit event details including category, name, date, location, capacity, description, ticket price, and status. Upon creation, the event is assigned a unique UUID, timestamps are set, and the event is persisted. This enables event organizers to add new scheduled events for users to browse and sign up.\n\nValidation rules mandate name and date are valid and required. Capacity must be positive. Status must be one of scheduled, cancelled, or completed. Event category must exist. This endpoint returns the full created event object for confirmation.\n\nRole-based authorization restricts creation to eventOrganizer and admin roles only.","description":"Create a new event with provided details including category, scheduled date, location, capacity, optional description, ticket price, and event status.\n\nOnly users with eventOrganizer or admin roles may create events.\n\nThe request body must include valid values respecting validation constraints from the Prisma schema such as positive capacity and valid category reference.\n\nOn success, returns the created event entity including generated UUID and timestamps.\n\nClients use this to add new events to the system which can then be browsed and signed up for by regular users.\n\nThe method used is POST since this operation creates a new resource.","summary":"Create a new event","parameters":[],"requestBody":{"description":"New event creation data","typeName":"IEventRegistrationEvent.ICreate"},"responseBody":{"description":"Newly created event information","typeName":"IEventRegistrationEvent"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"create","path":"/eventRegistration/eventOrganizer/events","method":"post"},{"specification":"This operation creates a new event record in the event_registration_events table. It requires authenticated event organizers or admins to submit event details including category, name, date, location, capacity, description, ticket price, and status. Upon creation, the event is assigned a unique UUID, timestamps are set, and the event is persisted. This enables event organizers to add new scheduled events for users to browse and sign up.\n\nValidation rules mandate name and date are valid and required. Capacity must be positive. Status must be one of scheduled, cancelled, or completed. Event category must exist. This endpoint returns the full created event object for confirmation.\n\nRole-based authorization restricts creation to eventOrganizer and admin roles only.","description":"Create a new event with provided details including category, scheduled date, location, capacity, optional description, ticket price, and event status.\n\nOnly users with eventOrganizer or admin roles may create events.\n\nThe request body must include valid values respecting validation constraints from the Prisma schema such as positive capacity and valid category reference.\n\nOn success, returns the created event entity including generated UUID and timestamps.\n\nClients use this to add new events to the system which can then be browsed and signed up for by regular users.\n\nThe method used is POST since this operation creates a new resource.","summary":"Create a new event","parameters":[],"requestBody":{"description":"New event creation data","typeName":"IEventRegistrationEvent.ICreate"},"responseBody":{"description":"Newly created event information","typeName":"IEventRegistrationEvent"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/events","method":"post"},{"specification":"This operation updates an existing event in the event_registration_events table identified by the eventId path parameter. It allows modification of event properties such as category, name, date, location, capacity, description, ticket price, and status. The operation is restricted to eventOrganizer role owning the event or admin role with global permission.\n\nValidations ensure updated capacity remains positive, status is one of scheduled, cancelled, or completed, and eventCategory exists. The updated_at timestamp is refreshed. The response returns the updated event object.\n\nThis endpoint uses the PUT method and requires appropriate request body representing partial or full event updates. Path parameter eventId uniquely identifies the target event.\n\nThis operation supports event lifecycle management by authorized roles.","description":"Update an existing event identified by eventId with new property values including category, name, date, location, capacity, optional description, ticket price, and status.\n\nOnly eventOrganizers owning the event or admins may update events.\n\nRequest body must comply with Prisma schema validation constraints.\n\nReturns the updated event entity on success.\n\nIntended for clients modifying event details such as rescheduling or capacity adjustments.\n\nMethod used is PUT as this constitutes full replacement of the resource's modifiable attributes.","summary":"Update an existing event by eventId","parameters":[{"name":"eventId","description":"Unique identifier of the event to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated event data","typeName":"IEventRegistrationEvent.IUpdate"},"responseBody":{"description":"Updated event information","typeName":"IEventRegistrationEvent"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"update","path":"/eventRegistration/eventOrganizer/events/{eventId}","method":"put"},{"specification":"This operation updates an existing event in the event_registration_events table identified by the eventId path parameter. It allows modification of event properties such as category, name, date, location, capacity, description, ticket price, and status. The operation is restricted to eventOrganizer role owning the event or admin role with global permission.\n\nValidations ensure updated capacity remains positive, status is one of scheduled, cancelled, or completed, and eventCategory exists. The updated_at timestamp is refreshed. The response returns the updated event object.\n\nThis endpoint uses the PUT method and requires appropriate request body representing partial or full event updates. Path parameter eventId uniquely identifies the target event.\n\nThis operation supports event lifecycle management by authorized roles.","description":"Update an existing event identified by eventId with new property values including category, name, date, location, capacity, optional description, ticket price, and status.\n\nOnly eventOrganizers owning the event or admins may update events.\n\nRequest body must comply with Prisma schema validation constraints.\n\nReturns the updated event entity on success.\n\nIntended for clients modifying event details such as rescheduling or capacity adjustments.\n\nMethod used is PUT as this constitutes full replacement of the resource's modifiable attributes.","summary":"Update an existing event by eventId","parameters":[{"name":"eventId","description":"Unique identifier of the event to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated event data","typeName":"IEventRegistrationEvent.IUpdate"},"responseBody":{"description":"Updated event information","typeName":"IEventRegistrationEvent"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/events/{eventId}","method":"put"},{"specification":"This operation permanently deletes an event record identified by eventId from the event_registration_events table. The deletion is a hard delete removing the record and all linked references. Only admins may perform event deletion, reflecting administrative authority for managing system data.\n\nNo request body is required. Path parameter eventId specified as UUID identifies the event.\n\nDeletion is irreversible and will result in loss of event data. Clients should confirm before calling.\n\nMethod used is DELETE indicating resource removal.\n\nResponse has no content on success.\n\nThis operation enforces strict authorization allowing only admins to delete events.","description":"Delete an event by its unique eventId. This operation permanently removes the event and cannot be undone.\n\nOnly users with the admin role may delete events.\n\nNo request body is needed. The eventId path parameter identifies the target event.\n\nResponse contains no data.\n\nThis hard delete operation is final and will remove all event data from the system.\n\nThe HTTP method is DELETE representing the destructive action.","summary":"Delete an event by eventId","parameters":[{"name":"eventId","description":"Unique identifier of the event to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/eventRegistration/admin/events/{eventId}","method":"delete"},{"specification":"This operation retrieves a paginated list of event categories with advanced filtering, sorting, and pagination. It operates on the event_registration_event_categories table in the Prisma schema. Users can query event categories by name or description and paginate the results as needed. The endpoint supports searching categories based on the trigram index for efficient partial matches. This operation is suitable for admin users to manage and overview event categories.","description":"Retrieve a filtered and paginated list of event categories from the system.\n\nThis operation supports complex search parameters including partial name matching using trigram search, description filtering, sorting by creation date or name, and pagination.\n\nOnly users with admin role are authorized to execute this operation, ensuring that sensitive management capabilities are protected.\n\nIt corresponds directly to the event_registration_event_categories table in the database, utilizing all its searchable fields efficiently.\n\nThe response returns a paginated list of event category summaries designed for listings and administrative overviews.","summary":"Search and retrieve a paginated list of event categories","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for event categories","typeName":"IEventRegistrationEventCategory.IRequest"},"responseBody":{"description":"Paginated list of event category summary information","typeName":"IPageIEventRegistrationEventCategory.ISummary"},"authorizationRoles":["admin"],"path":"/eventRegistration/admin/eventCategories","method":"patch","name":"index","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a single event category identified by its unique ID, based on the event_registration_event_categories table in the Prisma schema. It allows admin users to get all relevant details including name, description, and timestamps for the specified event category. The operation ensures secure access and returns comprehensive data for administrative use.","description":"Retrieve detailed information about a specific event category by its unique ID.\n\nThis operation requires the eventCategoryId path parameter to specify the target category.\n\nOnly users with admin authorization can access this detailed event category information.\n\nIt maps directly to the event_registration_event_categories table column data. The response includes all details necessary for administrative editing or overview.","summary":"Retrieve detailed event category information by ID","parameters":[{"name":"eventCategoryId","description":"Unique identifier of the target event category","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event category information","typeName":"IEventRegistrationEventCategory"},"authorizationRoles":["admin"],"path":"/eventRegistration/admin/eventCategories/{eventCategoryId}","method":"get","name":"at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new event category in the system, operating on the event_registration_event_categories table from the Prisma schema. Only admin users are authorized to create event categories to maintain controlled classification. The creation request must include the name of the category and can optionally include a description. The system automatically assigns timestamps for creation and updates.","description":"Create a new event category with a unique name and optional description.\n\nOnly admin users are authorized to perform this operation to maintain controlled event categorization.\n\nThis operation maps to the event_registration_event_categories table and ensures the uniqueness of category names.\n\nUpon successful creation, the full event category record is returned with assigned timestamps.","summary":"Create a new event category","parameters":[],"requestBody":{"description":"Creation information for a new event category","typeName":"IEventRegistrationEventCategory.ICreate"},"responseBody":{"description":"The newly created event category details","typeName":"IEventRegistrationEventCategory"},"authorizationRoles":["admin"],"path":"/eventRegistration/admin/eventCategories","method":"post","name":"create","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing event category's information by its unique ID, based on the event_registration_event_categories table in the Prisma schema. Admin users can modify the name and description of the category. The path parameter eventCategoryId identifies the specific category to update. The response contains the updated category details with timestamps.","description":"Update information of an existing event category by its unique ID.\n\nAdmin role authorization is required to ensure controlled modification of event classifications.\n\nThe operation requires the eventCategoryId path parameter and request body containing the updated fields.\n\nThe response returns comprehensive updated information of the event category for confirmation and subsequent use.","summary":"Update an existing event category","parameters":[{"name":"eventCategoryId","description":"Unique identifier of the target event category","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated event category information","typeName":"IEventRegistrationEventCategory.IUpdate"},"responseBody":{"description":"Updated event category details","typeName":"IEventRegistrationEventCategory"},"authorizationRoles":["admin"],"path":"/eventRegistration/admin/eventCategories/{eventCategoryId}","method":"put","name":"update","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of event attendees from the event_registration_event_attendees table. It allows filtering, searching, and pagination according to specified criteria to support organizers and admins in managing event participants.","description":"Retrieve a filtered and paginated list of event attendees. This operation supports complex queries for event attendee data from the event_registration_event_attendees table, which records confirmed users registered for events. It includes references to associated events and regular users, with creation and update timestamps.\n\nAccess to this operation requires roles of admin or eventOrganizer, reflecting their need to review attendees. Proper authorization checks are mandatory to enforce data privacy.\n\nThe response provides summarized attendee data conducive for management dashboards or listings.","summary":"Search and retrieve a filtered, paginated list of event attendees","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendee summary information matching search criteria","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationRoles":["admin","eventOrganizer"],"name":"index","path":"/eventRegistration/admin/eventAttendees","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of event attendees from the event_registration_event_attendees table. It allows filtering, searching, and pagination according to specified criteria to support organizers and admins in managing event participants.","description":"Retrieve a filtered and paginated list of event attendees. This operation supports complex queries for event attendee data from the event_registration_event_attendees table, which records confirmed users registered for events. It includes references to associated events and regular users, with creation and update timestamps.\n\nAccess to this operation requires roles of admin or eventOrganizer, reflecting their need to review attendees. Proper authorization checks are mandatory to enforce data privacy.\n\nThe response provides summarized attendee data conducive for management dashboards or listings.","summary":"Search and retrieve a filtered, paginated list of event attendees","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendee summary information matching search criteria","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationRoles":["admin","eventOrganizer"],"name":"index","path":"/eventRegistration/eventOrganizer/eventAttendees","method":"patch","authorizationRole":"eventOrganizer","authorizationType":null},{"specification":"This operation retrieves detailed information of a specific event attendee by their unique attendee ID from the event_registration_event_attendees table. It returns the complete attendee record including references to the associated event and regular user, with timestamps.\n\nAccess is restricted to roles admin and eventOrganizer to maintain secure and authorized data access. Proper error handling is expected if the attendee ID does not exist.","description":"Retrieve detailed information of a specific event attendee identified by eventAttendeeId. The record includes event and user associations from event_registration_event_attendees.\n\nAuthorization is limited to admin and eventOrganizer roles to protect sensitive registration details.\n\nReturns full attendee data or an error if not found.","summary":"Retrieve detailed information of a specific event attendee by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee information","typeName":"IEventRegistrationEventAttendee"},"authorizationRoles":["admin","eventOrganizer"],"name":"at","path":"/eventRegistration/admin/eventAttendees/{eventAttendeeId}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information of a specific event attendee by their unique attendee ID from the event_registration_event_attendees table. It returns the complete attendee record including references to the associated event and regular user, with timestamps.\n\nAccess is restricted to roles admin and eventOrganizer to maintain secure and authorized data access. Proper error handling is expected if the attendee ID does not exist.","description":"Retrieve detailed information of a specific event attendee identified by eventAttendeeId. The record includes event and user associations from event_registration_event_attendees.\n\nAuthorization is limited to admin and eventOrganizer roles to protect sensitive registration details.\n\nReturns full attendee data or an error if not found.","summary":"Retrieve detailed information of a specific event attendee by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee information","typeName":"IEventRegistrationEventAttendee"},"authorizationRoles":["admin","eventOrganizer"],"name":"at","path":"/eventRegistration/eventOrganizer/eventAttendees/{eventAttendeeId}","method":"get","authorizationRole":"eventOrganizer","authorizationType":null},{"specification":"This operation registers a user as an attendee for an event by creating a new record in the event_registration_event_attendees table. It requires the user to have a verified email and for the event to have available capacity.\n\nThe request must provide necessary data to link the attendee to the event and user.\n\nAccess authorization requires the 'regularUser' role representing authenticated, verified users.\n\nThe response returns the created attendee record upon successful registration.","description":"Register a user as an event attendee. This inserts a new record into event_registration_event_attendees linking the user to the event.\n\nThe user must have verified their email, and the event must have capacity.\n\nAuthorized roles: regularUser.\n\nReturns the created attendee information.","summary":"Register a user as an event attendee","parameters":[],"requestBody":{"description":"Information needed to register a user as an event attendee","typeName":"IEventRegistrationEventAttendee.ICreate"},"responseBody":{"description":"Created event attendee information","typeName":"IEventRegistrationEventAttendee"},"authorizationRoles":["regularUser"],"name":"create","path":"/eventRegistration/regularUser/eventAttendees","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes an event attendee registration by its unique ID from the event_registration_event_attendees table. It performs a hard delete to remove the attendee record permanently. Authorization includes roles regularUser (attendee), admin, and eventOrganizer (organizer) to allow appropriate cancellation or removal.\n\nNo request body or response content is required.\n\nThe operation ensures idempotency and enforces permission checks to restrict deletion rights.","description":"Delete an event attendee registration by ID. This is a permanent deletion removing the attendee's event registration record.\n\nAuthorized roles for this operation include regularUser (the attendee), admin, and eventOrganizer.\n\nThere is no request or response body.\n\nThis operation does not perform soft deletion.","summary":"Delete an event attendee registration by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee registration to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser","admin","eventOrganizer"],"name":"erase","path":"/eventRegistration/regularUser/eventAttendees/{eventAttendeeId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes an event attendee registration by its unique ID from the event_registration_event_attendees table. It performs a hard delete to remove the attendee record permanently. Authorization includes roles regularUser (attendee), admin, and eventOrganizer (organizer) to allow appropriate cancellation or removal.\n\nNo request body or response content is required.\n\nThe operation ensures idempotency and enforces permission checks to restrict deletion rights.","description":"Delete an event attendee registration by ID. This is a permanent deletion removing the attendee's event registration record.\n\nAuthorized roles for this operation include regularUser (the attendee), admin, and eventOrganizer.\n\nThere is no request or response body.\n\nThis operation does not perform soft deletion.","summary":"Delete an event attendee registration by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee registration to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser","admin","eventOrganizer"],"name":"erase","path":"/eventRegistration/admin/eventAttendees/{eventAttendeeId}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes an event attendee registration by its unique ID from the event_registration_event_attendees table. It performs a hard delete to remove the attendee record permanently. Authorization includes roles regularUser (attendee), admin, and eventOrganizer (organizer) to allow appropriate cancellation or removal.\n\nNo request body or response content is required.\n\nThe operation ensures idempotency and enforces permission checks to restrict deletion rights.","description":"Delete an event attendee registration by ID. This is a permanent deletion removing the attendee's event registration record.\n\nAuthorized roles for this operation include regularUser (the attendee), admin, and eventOrganizer.\n\nThere is no request or response body.\n\nThis operation does not perform soft deletion.","summary":"Delete an event attendee registration by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee registration to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser","admin","eventOrganizer"],"name":"erase","path":"/eventRegistration/eventOrganizer/eventAttendees/{eventAttendeeId}","method":"delete","authorizationRole":"eventOrganizer","authorizationType":null},{"specification":"This operation updates the details of a specific event attendee in the event_registration_event_attendees table of the Prisma schema. It allows modification of fields defined in the event attendee entity, specifically accessible by authorized roles. Update operations must ensure referential integrity with the event and regular user entities and maintain valid timestamps for update tracking.","description":"This API operation updates information for a particular event attendee identified by the path parameter 'eventAttendeeId'. The underlying database entity is event_registration_event_attendees, which links confirmed attendees to events.\n\nUsers with the appropriate authorization role can update the attendee record details. This might include changes to the association or timestamps. The API expects a valid UUID format ID to identify the attendee record.\n\nAll updates must comply with database constraints ensuring event and user relationships remain consistent. Timestamps should reflect the time of modification to maintain auditability.\n\nValidation includes confirming the attendee exists and the provided update data matches the Prisma schema field types.","summary":"Update event attendee information","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to update an event attendee record","typeName":"IEventRegistrationEventAttendee.IUpdate"},"responseBody":{"description":"Updated event attendee record","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/eventAttendees/{eventAttendeeId}","method":"put"},{"specification":"This operation retrieves a paginated list of event attendees for a specific event from the event_registration_event_attendees table in the Prisma schema. It accepts search, filter, and pagination parameters to query the attendees of the given event.\n\nThe API requires the event ID in the path and filters attendees related to that event. This enables organizers or admins to view attendee lists with appropriate permissions.\n\nPagination and filtering options support efficient data retrieval for large attendee lists.","description":"Lists attendees registered for the event specified by 'eventId'. Supports pagination, filtering, and sorting parameters defined in the request body.\n\nOnly authorized roles such as event organizers and admins can access this data. The response includes a pageable summary of attendees including essential details needed for attendee management.\n\nThis facilitates event management tasks such as attendance tracking and reporting.","summary":"List attendees for a specific event","parameters":[{"name":"eventId","description":"Unique identifier of the event to get attendees for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria for event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendees","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/eventRegistration/admin/events/{eventId}/attendees","method":"patch"},{"specification":"This operation retrieves a paginated list of event attendees for a specific event from the event_registration_event_attendees table in the Prisma schema. It accepts search, filter, and pagination parameters to query the attendees of the given event.\n\nThe API requires the event ID in the path and filters attendees related to that event. This enables organizers or admins to view attendee lists with appropriate permissions.\n\nPagination and filtering options support efficient data retrieval for large attendee lists.","description":"Lists attendees registered for the event specified by 'eventId'. Supports pagination, filtering, and sorting parameters defined in the request body.\n\nOnly authorized roles such as event organizers and admins can access this data. The response includes a pageable summary of attendees including essential details needed for attendee management.\n\nThis facilitates event management tasks such as attendance tracking and reporting.","summary":"List attendees for a specific event","parameters":[{"name":"eventId","description":"Unique identifier of the event to get attendees for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria for event attendees","typeName":"IEventRegistrationEventAttendee.IRequest"},"responseBody":{"description":"Paginated list of event attendees","typeName":"IPageIEventRegistrationEventAttendee.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"index","path":"/eventRegistration/eventOrganizer/events/{eventId}/attendees","method":"patch"},{"specification":"This operation retrieves a specific event attendee record by its unique ID from the event_registration_event_attendees table in the Prisma schema. It returns detailed information about the attendee's association with an event.\n\nAccess to this operation is restricted to authorized roles including admins and event organizers who are managing the respective event. The operation requires the attendee ID as a path parameter.\n\nThis endpoint supports detailed queries for individual attendee data necessary for event management functionalities.","description":"Retrieves detailed information about an event attendee identified by the path parameter 'eventAttendeeId'.\n\nAuthorized users such as event organizers and admins can use this endpoint to view full attendee details including association with event and user data.\n\nThe response includes all data fields defined in the event_registration_event_attendees model pinpointing one specific attendee record.","summary":"Get event attendee details by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee record","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/events/{eventId}/attendees/{eventAttendeeId}","method":"get"},{"specification":"This operation retrieves a specific event attendee record by its unique ID from the event_registration_event_attendees table in the Prisma schema. It returns detailed information about the attendee's association with an event.\n\nAccess to this operation is restricted to authorized roles including admins and event organizers who are managing the respective event. The operation requires the attendee ID as a path parameter.\n\nThis endpoint supports detailed queries for individual attendee data necessary for event management functionalities.","description":"Retrieves detailed information about an event attendee identified by the path parameter 'eventAttendeeId'.\n\nAuthorized users such as event organizers and admins can use this endpoint to view full attendee details including association with event and user data.\n\nThe response includes all data fields defined in the event_registration_event_attendees model pinpointing one specific attendee record.","summary":"Get event attendee details by ID","parameters":[{"name":"eventAttendeeId","description":"Unique identifier of the event attendee to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event attendee record","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"at","path":"/eventRegistration/eventOrganizer/events/{eventId}/attendees/{eventAttendeeId}","method":"get"},{"specification":"This operation creates a new attendee record for a specified event by associating a regular user as an attendee. It operates on the event_registration_event_attendees table, enforcing the user is registered for the event if capacity permits according to business rules. This operation verifies and requires authenticated regularUser role to perform event attendee addition. Audit timestamps track record creation and updates.","path":"/eventRegistration/regularUser/events/{eventId}/attendees","method":"post","summary":"Add a regular user as an event attendee","description":"Create a new event attendee by adding a regular user registration to the event identified by eventId. This operation ensures the user is added as a confirmed attendee for the specified event.\n\nSecurity and authorization require the caller to have the 'regularUser' role. Duplicate registrations are prevented by the unique constraint on (event_id, regular_user_id).\n\nThis operation interacts with the event_registration_event_attendees table from the Prisma schema and requires appropriate event and user identifiers.\n\nClients must provide the regular_user_id in the request body within the ICreate structure to indicate which user is being registered as an attendee.\n\nErrors due to duplicate entries, invalid event or user IDs, or insufficient permissions must be handled appropriately by the API implementation.","parameters":[{"name":"eventId","in":"path","description":"Unique identifier of the event","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create an event attendee record","typeName":"IEventRegistrationEventAttendee.ICreate"},"responseBody":{"description":"The newly created event attendee record","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"regularUser","name":"create"},{"specification":"This operation updates an existing attendee record identified by eventAttendeeId within a specific event identified by eventId. It operates on the event_registration_event_attendees table and permits updating mutable fields, primarily timestamps or administrative changes. Authorization requires the caller to have the 'regularUser' role and appropriate ownership or privileges.\n\nThe operation uses PUT method with request body of type IUpdate. The updated attendee record is returned in the response.\n\nIt validates the event and attendee IDs, ensuring the entity belongs to the event before applying updates.\n\nThis complements the create (POST) and erase (DELETE) operations for comprehensive event attendee management.","path":"/eventRegistration/regularUser/events/{eventId}/attendees/{eventAttendeeId}","method":"put","summary":"Update an event attendee's information","description":"Update an existing event attendee record specified by eventId and eventAttendeeId. Replaces attendee information according to the update payload.\n\nAuthorization ensures only authorized users with 'regularUser' role can perform updates.\n\nThis operation affects the event_registration_event_attendees table, maintaining consistency with event and regular user foreign key references.\n\nValidation confirms existence of the attendee and correct event association.\n\nThe operation primarily updates mutable fields such as timestamps for audit and administrative purposes.\n\nRelated operations include creating new attendees and deleting attendee records.","parameters":[{"name":"eventId","in":"path","description":"Unique identifier of the event","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","in":"path","description":"Unique identifier of the event attendee","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the event attendee record","typeName":"IEventRegistrationEventAttendee.IUpdate"},"responseBody":{"description":"The updated event attendee record","typeName":"IEventRegistrationEventAttendee"},"authorizationType":null,"authorizationRole":"regularUser","name":"update"},{"specification":"This operation deletes an event attendee record identified by eventAttendeeId within a specific event identified by eventId. It performs a hard delete removing the attendee's registration record permanently.\n\nAuthorization requires the caller to have the 'regularUser' role and appropriate ownership or elevated permissions to delete the attendee.\n\nThis DELETE method does not accept a request body and returns no content. Proper validation and error handling must ensure only legitimate deletions.\n\nThis operation is related to create (POST) and update (PUT) operations and to waitlist management when freeing capacity.","path":"/eventRegistration/regularUser/events/{eventId}/attendees/{eventAttendeeId}","method":"delete","summary":"Delete an event attendee record","description":"Delete an event attendee record identified by eventId and eventAttendeeId. This operation performs permanent deletion.\n\nOnly authorized regular users may execute this operation.\n\nThe deletion affects the event_registration_event_attendees table and impacts event capacity and waitlist promotion logic.\n\nNo request body is accepted.\n\nRelated operations are create and update for event attendee management.","parameters":[{"name":"eventId","in":"path","description":"Unique identifier of the event","schema":{"type":"string","format":"uuid"}},{"name":"eventAttendeeId","in":"path","description":"Unique identifier of the event attendee","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase"},{"specification":"This operation searches and retrieves paginated waitlist entries for events. It uses the PATCH method with a request body containing filtering and pagination parameters defined in IEventRegistrationEventWaitlist.IRequest. The response is a paginated list of event waitlist summaries.\n\nAuthorization requires the caller to have the 'regularUser' role for access. Intended for use by event organizers and admins to manage and review waitlists.\n\nThis operation operates on the event_registration_event_waitlists Prisma table. It supports filtering by event, user, and other criteria.\n\nRelated operations include creating attendees, deleting waitlist entries, and managing dynamic event capacities.","path":"/eventRegistration/regularUser/eventWaitlists","method":"patch","summary":"Search and retrieve event waitlisted users","description":"Search and retrieve a paginated list of event waitlisted users with support for filtering, sorting, and pagination.\n\nAuthorization requires 'regularUser' role or higher. Typically utilized by event organizers and administrators.\n\nThis operation corresponds to querying the event_registration_event_waitlists table.\n\nFilters enable fine-grained retrieval of waitlists for specific events and users.\n\nThe response wraps event waitlist summary data in a paginated format to optimize client consumption.","parameters":[],"requestBody":{"description":"Search filters and pagination options for event waitlists","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paged list of event waitlist summaries","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index"},{"specification":"This operation retrieves detailed information about a specific event waitlist entry from the event_registration_event_waitlists table in the Prisma schema. It provides information about a single user's place on the waitlist for a particular event, including timestamps aligned with database audit requirements.","description":"Retrieve a specific event waitlist entry by its unique ID. This operation returns detailed information including the associated event ID, the regular user ID of the waitlisted user, and timestamps indicating when the entry was created and last updated.\n\nSecurity considerations include ensuring only authorized users with appropriate permissions can access waitlist details, typically event organizers or admins. This operation interacts directly with the event_registration_event_waitlists table.\n\nThe API expects the waitlist entry ID as a path parameter and returns the detailed waitlist entry data. If the specified entry does not exist, an error should be returned.\n\nNo request body is required as this is a retrieval operation.","summary":"Retrieve details of a specific event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified event waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/eventWaitlists/{eventWaitlistId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific event waitlist entry from the event_registration_event_waitlists table in the Prisma schema. It provides information about a single user's place on the waitlist for a particular event, including timestamps aligned with database audit requirements.","description":"Retrieve a specific event waitlist entry by its unique ID. This operation returns detailed information including the associated event ID, the regular user ID of the waitlisted user, and timestamps indicating when the entry was created and last updated.\n\nSecurity considerations include ensuring only authorized users with appropriate permissions can access waitlist details, typically event organizers or admins. This operation interacts directly with the event_registration_event_waitlists table.\n\nThe API expects the waitlist entry ID as a path parameter and returns the detailed waitlist entry data. If the specified entry does not exist, an error should be returned.\n\nNo request body is required as this is a retrieval operation.","summary":"Retrieve details of a specific event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the specified event waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"at","path":"/eventRegistration/eventOrganizer/eventWaitlists/{eventWaitlistId}","method":"get"},{"specification":"This operation creates a new event waitlist entry in the event_registration_event_waitlists table, representing a regular user waiting for a spot in a specified event. The operation enforces uniqueness constraints preventing duplicate waitlist entries for the same user and event.\n\nIt requires specifying the event ID and regular user ID to establish the association. Appropriate timestamps are recorded automatically by the system.\n\nSecurity restrictions mandate that only authorized users, such as admins or event organizers, can create waitlist entries manually, although in practice, such entries often get created as side effects of event capacity checks.","description":"Create a new event waitlist entry linking a regular user to an event waitlist. Input must specify the event and the user to be waitlisted. The system ensures that the user is not already registered as an attendee or on the waitlist. This action increments waitlist count and triggers notifications.\n\nOnly users with admin or event organizer roles are authorized to perform this operation.\n\nThe client provides the event ID and regular user ID. The created entry with timestamps is returned upon success.","summary":"Create a new event waitlist entry","parameters":[],"requestBody":{"description":"Information needed to create a new event waitlist entry","typeName":"IEventRegistrationEventWaitlist.ICreate"},"responseBody":{"description":"The created event waitlist entry data","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/eventWaitlists","method":"post"},{"specification":"This operation creates a new event waitlist entry in the event_registration_event_waitlists table, representing a regular user waiting for a spot in a specified event. The operation enforces uniqueness constraints preventing duplicate waitlist entries for the same user and event.\n\nIt requires specifying the event ID and regular user ID to establish the association. Appropriate timestamps are recorded automatically by the system.\n\nSecurity restrictions mandate that only authorized users, such as admins or event organizers, can create waitlist entries manually, although in practice, such entries often get created as side effects of event capacity checks.","description":"Create a new event waitlist entry linking a regular user to an event waitlist. Input must specify the event and the user to be waitlisted. The system ensures that the user is not already registered as an attendee or on the waitlist. This action increments waitlist count and triggers notifications.\n\nOnly users with admin or event organizer roles are authorized to perform this operation.\n\nThe client provides the event ID and regular user ID. The created entry with timestamps is returned upon success.","summary":"Create a new event waitlist entry","parameters":[],"requestBody":{"description":"Information needed to create a new event waitlist entry","typeName":"IEventRegistrationEventWaitlist.ICreate"},"responseBody":{"description":"The created event waitlist entry data","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"create","path":"/eventRegistration/eventOrganizer/eventWaitlists","method":"post"},{"specification":"This operation updates an existing event waitlist entry, adjusting the associated event or user IDs or modifying timestamps as necessary. It targets the event_registration_event_waitlists table and ensures data integrity and uniqueness of the user-event waitlist association.\n\nUpdates to this table are rare and typically occur under administrative or correctional scenarios.\n\nThe path parameter specifies the waitlist entry ID to update. The request body contains the updated fields. Only authorized event organizers and admins may perform this action.","description":"Update an existing event waitlist entry identified by its unique ID. The client can modify event association, user association, or update audit fields as needed.\n\nThis operation enforces uniqueness of event-user combinations and maintains data consistency.\n\nAuthorization is restricted to admin and event organizer roles.\n\nThe response returns the updated waitlist entry data.","summary":"Update an existing event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist entry to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the event waitlist entry","typeName":"IEventRegistrationEventWaitlist.IUpdate"},"responseBody":{"description":"The updated event waitlist entry data","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/eventWaitlists/{eventWaitlistId}","method":"put"},{"specification":"This operation updates an existing event waitlist entry, adjusting the associated event or user IDs or modifying timestamps as necessary. It targets the event_registration_event_waitlists table and ensures data integrity and uniqueness of the user-event waitlist association.\n\nUpdates to this table are rare and typically occur under administrative or correctional scenarios.\n\nThe path parameter specifies the waitlist entry ID to update. The request body contains the updated fields. Only authorized event organizers and admins may perform this action.","description":"Update an existing event waitlist entry identified by its unique ID. The client can modify event association, user association, or update audit fields as needed.\n\nThis operation enforces uniqueness of event-user combinations and maintains data consistency.\n\nAuthorization is restricted to admin and event organizer roles.\n\nThe response returns the updated waitlist entry data.","summary":"Update an existing event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist entry to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the event waitlist entry","typeName":"IEventRegistrationEventWaitlist.IUpdate"},"responseBody":{"description":"The updated event waitlist entry data","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"update","path":"/eventRegistration/eventOrganizer/eventWaitlists/{eventWaitlistId}","method":"put"},{"specification":"This operation permanently removes a specified event waitlist entry from the event_registration_event_waitlists table. It deletes the record associated with the given waitlist ID.\n\nOnly authorized users such as admins or event organizers are allowed to delete waitlist entries. This operation does not have a request body and does not return a response body.\n\nCare must be taken when deleting records to maintain consistent event and waitlist state in the overall event registration system.","description":"Delete an event waitlist entry by its unique ID, removing the user from the waitlist for the event. This is a hard delete operation.\n\nAuthorization is limited to event organizers and admins.\n\nNo request body is required, and the operation does not return any response body on success.","summary":"Remove an event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist entry to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/eventRegistration/admin/eventWaitlists/{eventWaitlistId}","method":"delete"},{"specification":"This operation permanently removes a specified event waitlist entry from the event_registration_event_waitlists table. It deletes the record associated with the given waitlist ID.\n\nOnly authorized users such as admins or event organizers are allowed to delete waitlist entries. This operation does not have a request body and does not return a response body.\n\nCare must be taken when deleting records to maintain consistent event and waitlist state in the overall event registration system.","description":"Delete an event waitlist entry by its unique ID, removing the user from the waitlist for the event. This is a hard delete operation.\n\nAuthorization is limited to event organizers and admins.\n\nNo request body is required, and the operation does not return any response body on success.","summary":"Remove an event waitlist entry","parameters":[{"name":"eventWaitlistId","description":"Unique identifier of the event waitlist entry to remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"eventOrganizer","name":"erase","path":"/eventRegistration/eventOrganizer/eventWaitlists/{eventWaitlistId}","method":"delete"},{"specification":"This operation retrieves the paginated list of users on the waitlist for the specified event. It interacts with the \"event_registration_event_waitlists\" table in the Prisma schema, which holds records linking regular users to events they are waiting for. This endpoint supports complex search, filtering, pagination, and sorting parameters to manage and query the waitlist efficiently. It allows authorized roles to view the current queue of waitlisted users for an event.","description":"This endpoint retrieves a filtered and paginated list of waitlisted users for a specific event identified by its eventId. The waitlist records are sorted based on their creation timestamps in FIFO order, allowing organizers and admins to see who is next in line.\n\nSecurity is enforced such that only users with roles \"eventOrganizer\" or \"admin\" can access this sensitive data, ensuring privacy and compliance. The waitlist is essential for managing event capacity dynamically and for promoting users when spots open.\n\nThe underlying Prisma table \"event_registration_event_waitlists\" contains fields for the event ID, user ID, and timestamps, with relationships to the regular user and event entities. This operation supports pagination and filtering through the request body, mapped to IEventRegistrationEventWaitlist.IRequest type, and returns paginated waitlist summary responses.","summary":"Search and retrieve paginated waitlists for an event","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for event waitlist filtering","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paginated list of event waitlist summary records matching search criteria","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","path":"/eventRegistration/eventOrganizer/events/{eventId}/waitlists","method":"patch","name":"index"},{"specification":"This operation retrieves the paginated list of users on the waitlist for the specified event. It interacts with the \"event_registration_event_waitlists\" table in the Prisma schema, which holds records linking regular users to events they are waiting for. This endpoint supports complex search, filtering, pagination, and sorting parameters to manage and query the waitlist efficiently. It allows authorized roles to view the current queue of waitlisted users for an event.","description":"This endpoint retrieves a filtered and paginated list of waitlisted users for a specific event identified by its eventId. The waitlist records are sorted based on their creation timestamps in FIFO order, allowing organizers and admins to see who is next in line.\n\nSecurity is enforced such that only users with roles \"eventOrganizer\" or \"admin\" can access this sensitive data, ensuring privacy and compliance. The waitlist is essential for managing event capacity dynamically and for promoting users when spots open.\n\nThe underlying Prisma table \"event_registration_event_waitlists\" contains fields for the event ID, user ID, and timestamps, with relationships to the regular user and event entities. This operation supports pagination and filtering through the request body, mapped to IEventRegistrationEventWaitlist.IRequest type, and returns paginated waitlist summary responses.","summary":"Search and retrieve paginated waitlists for an event","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for event waitlist filtering","typeName":"IEventRegistrationEventWaitlist.IRequest"},"responseBody":{"description":"Paginated list of event waitlist summary records matching search criteria","typeName":"IPageIEventRegistrationEventWaitlist.ISummary"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/events/{eventId}/waitlists","method":"patch","name":"index"},{"specification":"This operation retrieves the detailed information of a specific waitlist entry by its unique ID for a given event. It reads from the \"event_registration_event_waitlists\" table in Prisma schema, representing a user waiting for a spot in an event. Authorized roles \"eventOrganizer\" and \"admin\" are required to access the details, supporting event management workflows where specific user waitlist details are needed.","description":"This endpoint returns full detailed information about a single waitlist entry identified by eventWaitlistId for the associated event eventId. The waitlist entry links a regular user to an event they are waiting for, including creation and update timestamps.\n\nThis operation is protected and accessible only by users with roles \"eventOrganizer\" or \"admin\" due to the sensitive nature of waitlist data. The detailed information helps event organizers and admins manage individual waitlist slots more precisely.\n\nThe underlying Prisma model \"event_registration_event_waitlists\" ensures the integrity of the waitlist with unique constraints preventing duplicate entries for the same user and event. This GET operation corresponds to the \"at\" pattern returning a single entity.","summary":"Retrieve specific waitlist entry details","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","path":"/eventRegistration/eventOrganizer/events/{eventId}/waitlists/{eventWaitlistId}","method":"get","name":"at"},{"specification":"This operation retrieves the detailed information of a specific waitlist entry by its unique ID for a given event. It reads from the \"event_registration_event_waitlists\" table in Prisma schema, representing a user waiting for a spot in an event. Authorized roles \"eventOrganizer\" and \"admin\" are required to access the details, supporting event management workflows where specific user waitlist details are needed.","description":"This endpoint returns full detailed information about a single waitlist entry identified by eventWaitlistId for the associated event eventId. The waitlist entry links a regular user to an event they are waiting for, including creation and update timestamps.\n\nThis operation is protected and accessible only by users with roles \"eventOrganizer\" or \"admin\" due to the sensitive nature of waitlist data. The detailed information helps event organizers and admins manage individual waitlist slots more precisely.\n\nThe underlying Prisma model \"event_registration_event_waitlists\" ensures the integrity of the waitlist with unique constraints preventing duplicate entries for the same user and event. This GET operation corresponds to the \"at\" pattern returning a single entity.","summary":"Retrieve specific waitlist entry details","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/events/{eventId}/waitlists/{eventWaitlistId}","method":"get","name":"at"},{"specification":"This operation allows authorized users to add a new user to the waitlist for a specific event when the event capacity is full. It writes a new record into the \"event_registration_event_waitlists\" table representing a regular user waiting for a spot. The waitlist maintains FIFO order based on creation timestamps. Roles \"eventOrganizer\" and \"admin\" are allowed to perform this action, in line with business rules that manage event enrollment and waitlist placement.","description":"This endpoint creates a new waitlist entry for a user wishing to join the waitlist of the specified event. The request body includes required fields to link the regular user and the event. The operation ensures FIFO order by recording the creation timestamp. It is secured to allow only users with roles \"eventOrganizer\" or \"admin\" to add waitlist entries.\n\nThe underlying Prisma schema enforces uniqueness per user-event combination to prevent duplicates. This POST operation corresponds to the \"create\" pattern, returning the created waitlist entry details.","summary":"Add a user to event waitlist","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new event waitlist entry","typeName":"IEventRegistrationEventWaitlist.ICreate"},"responseBody":{"description":"Details of the newly created waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","path":"/eventRegistration/eventOrganizer/events/{eventId}/waitlists","method":"post","name":"create"},{"specification":"This operation allows authorized users to add a new user to the waitlist for a specific event when the event capacity is full. It writes a new record into the \"event_registration_event_waitlists\" table representing a regular user waiting for a spot. The waitlist maintains FIFO order based on creation timestamps. Roles \"eventOrganizer\" and \"admin\" are allowed to perform this action, in line with business rules that manage event enrollment and waitlist placement.","description":"This endpoint creates a new waitlist entry for a user wishing to join the waitlist of the specified event. The request body includes required fields to link the regular user and the event. The operation ensures FIFO order by recording the creation timestamp. It is secured to allow only users with roles \"eventOrganizer\" or \"admin\" to add waitlist entries.\n\nThe underlying Prisma schema enforces uniqueness per user-event combination to prevent duplicates. This POST operation corresponds to the \"create\" pattern, returning the created waitlist entry details.","summary":"Add a user to event waitlist","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for creating a new event waitlist entry","typeName":"IEventRegistrationEventWaitlist.ICreate"},"responseBody":{"description":"Details of the newly created waitlist entry","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/events/{eventId}/waitlists","method":"post","name":"create"},{"specification":"This operation updates an existing waitlist entry for a specified event. It modifies fields for the waitlist record in the \"event_registration_event_waitlists\" Prisma table, such as potentially the regular user or timestamps. Access is restricted to \"eventOrganizer\" and \"admin\" roles to ensure secure modification of sensitive waitlist data, supporting event management workflows where waitlist status or details may change.","description":"This endpoint updates the waitlist entry identified by eventWaitlistId for the event specified by eventId. Authorized roles \"eventOrganizer\" or \"admin\" can modify the waitlist entry's data as allowed by the schema.\n\nThis operation allows managing the waitlist effectively, such as correcting entries or updating timestamps. The underlying Prisma schema enforces unique constraints.\n\nThis PUT operation corresponds to the \"update\" pattern, returning the updated waitlist entry details on success.","summary":"Update an event waitlist entry","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating an event waitlist entry","typeName":"IEventRegistrationEventWaitlist.IUpdate"},"responseBody":{"description":"Updated waitlist entry details","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"eventOrganizer","path":"/eventRegistration/eventOrganizer/events/{eventId}/waitlists/{eventWaitlistId}","method":"put","name":"update"},{"specification":"This operation updates an existing waitlist entry for a specified event. It modifies fields for the waitlist record in the \"event_registration_event_waitlists\" Prisma table, such as potentially the regular user or timestamps. Access is restricted to \"eventOrganizer\" and \"admin\" roles to ensure secure modification of sensitive waitlist data, supporting event management workflows where waitlist status or details may change.","description":"This endpoint updates the waitlist entry identified by eventWaitlistId for the event specified by eventId. Authorized roles \"eventOrganizer\" or \"admin\" can modify the waitlist entry's data as allowed by the schema.\n\nThis operation allows managing the waitlist effectively, such as correcting entries or updating timestamps. The underlying Prisma schema enforces unique constraints.\n\nThis PUT operation corresponds to the \"update\" pattern, returning the updated waitlist entry details on success.","summary":"Update an event waitlist entry","parameters":[{"name":"eventId","description":"Unique identifier of the target event","schema":{"type":"string","format":"uuid"}},{"name":"eventWaitlistId","description":"Unique identifier of the target event waitlist entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for updating an event waitlist entry","typeName":"IEventRegistrationEventWaitlist.IUpdate"},"responseBody":{"description":"Updated waitlist entry details","typeName":"IEventRegistrationEventWaitlist"},"authorizationType":null,"authorizationRole":"admin","path":"/eventRegistration/admin/events/{eventId}/waitlists/{eventWaitlistId}","method":"put","name":"update"},{"authorizationRole":"regularUser","authorizationType":null,"description":"Deletes a waitlist record from the event_registration_event_waitlists table permanently. It requires both eventId and eventWaitlistId as path parameters, both UUIDs, which uniquely identify the event and the specific waitlist entry respectively.\n\nAuthentication with the \"user\" role is required to execute this operation.\n\nNo request body is needed, and the operation returns no response body upon success.\n\nThis operation is critical in managing event waitlists, ensuring users removed from waitlists are no longer considered for promotions or notifications.\n\nAny invalid or unauthorized attempts are rejected with appropriate error messages.","method":"delete","name":"eraseWaitlistEntry","parameters":[{"description":"Unique identifier of the target event","name":"eventId","schema":{"format":"uuid","type":"string"}},{"description":"Unique identifier of the waitlist entry to delete","name":"eventWaitlistId","schema":{"format":"uuid","type":"string"}}],"path":"/eventRegistration/regularUser/events/{eventId}/waitlists/{eventWaitlistId}","requestBody":null,"responseBody":null,"specification":"This operation deletes a specific waitlist entry for an event, identified by eventId and eventWaitlistId, from the event_registration_event_waitlists table. The table tracks users waiting for spots in full events and ensures FIFO order. This endpoint permanently removes the specified waitlist record, helping manage waitlist removals due to user cancellations or promotions. It requires user authentication and ensures data integrity by allowing only authorized users to perform this action.","summary":"Erase waitlist entry by eventId and eventWaitlistId"},{"authorizationRole":"admin","authorizationType":null,"description":"Returns a paginated list of event capacity override records matching provided search criteria, such as event ID and override flag status.\n\nThe PATCH request body enables filtering and pagination parameters.\n\nThis endpoint is restricted to users with the \"admin\" role, ensuring only authorized personnel manage capacity overrides.\n\nResponse includes paginated summary data of capacity overrides.\n\nThis endpoint supports admin workflows to control dynamic capacity adjustment features per event.","method":"patch","name":"indexEventCapacityOverrides","parameters":[],"path":"/eventRegistration/admin/eventCapacityOverrides","requestBody":{"description":"Search criteria and pagination parameters for event capacity overrides","typeName":"IEventRegistrationEventCapacityOverride.IRequest"},"responseBody":{"description":"Paginated list of event capacity override summaries","typeName":"IPageIEventRegistrationEventCapacityOverride"},"specification":"This operation lists event capacity override records with support for filtering, sorting, and pagination. Capacity overrides allow admins to disable or enable automatic event capacity adjustments per event. The underlying table is event_registration_event_capacity_overrides, which stores the override flag, event reference, and audit timestamps. This operation aids admins in managing event capacity override settings efficiently.","summary":"Search event capacity overrides with filters and pagination"},{"authorizationRole":"admin","authorizationType":null,"description":"Fetch a detailed event capacity override record by its unique identifier.\n\nRequires the eventCapacityOverrideId path parameter (UUID).\n\nAccessible only to users with the \"admin\" role.\n\nResponse contains detailed override information such as event reference, override enablement, and timestamps.\n\nUseful for admin UI or API consumers managing event capacity policies.","method":"get","name":"atEventCapacityOverride","parameters":[{"description":"Unique identifier of the event capacity override record","name":"eventCapacityOverrideId","schema":{"format":"uuid","type":"string"}}],"path":"/eventRegistration/admin/eventCapacityOverrides/{eventCapacityOverrideId}","requestBody":null,"responseBody":{"description":"Detailed event capacity override record","typeName":"IEventRegistrationEventCapacityOverride"},"specification":"This operation retrieves details of a single event capacity override identified by eventCapacityOverrideId. The record shows the event association, override flag status, and audit timestamps from the event_registration_event_capacity_overrides table. It is used to present detailed capacity override settings to authorized admins for review and management.","summary":"Get event capacity override detail by ID"},{"authorizationRole":"admin","authorizationType":null,"description":"Create a new event capacity override record.\n\nRequest body must define event ID and the override enablement flag.\n\nAccessible only by admins.\n\nOn success, returns the created capacity override record including audit fields.\n\nSupports administrative control over dynamic event capacities.\n\nNo additional side effects.\n","method":"post","name":"createEventCapacityOverride","parameters":[],"path":"/eventRegistration/admin/eventCapacityOverrides","requestBody":{"description":"Payload for creating event capacity override","typeName":"IEventRegistrationEventCapacityOverride.ICreate"},"responseBody":{"description":"Created event capacity override record","typeName":"IEventRegistrationEventCapacityOverride"},"specification":"This operation creates a new event capacity override record allowing manual disabling or enabling of automatic capacity adjustments for an event. The event_capacity_override table links to an event and stores the override boolean plus audit timestamps. Accessible by authorized admins to enforce capacity control policies.","summary":"Create event capacity override record"},{"specification":"This operation updates an existing event capacity override record in the event_registration_event_capacity_overrides table. It allows administrators to enable or disable automatic capacity adjustments for a specific event by updating the is_override_enabled flag. The operation requires the eventCapacityOverrideId path parameter to identify the target override record, and a request body containing the updated is_override_enabled boolean. This enables administrators to control dynamic capacity adjustments as per business rules, ensuring manual overrides are properly logged and enforced.","description":"This API endpoint updates the capacity override settings for a specific event. Capacity overrides are administrative controls allowing manual enablement or disablement of automatic adjustments to event capacity. By updating the is_override_enabled flag, administrators can override the system's dynamic capacity adjustment behavior for the identified event.\n\nThis operation requires authentication with appropriate administrative roles as capacity override settings impact event management globally. It operates on the event_registration_event_capacity_overrides database table.\n\nValidation is performed to ensure the provided is_override_enabled value is a boolean. The eventCapacityOverrideId must be a valid UUID representing the existing capacity override record.\n\nThe updated capacity override object is returned as confirmation of successful operation.","summary":"Update event capacity override by ID","parameters":[{"name":"eventCapacityOverrideId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target event capacity override record"}],"requestBody":{"description":"New capacity override information","typeName":"IEventRegistrationEventCapacityOverrides.IUpdate"},"responseBody":{"description":"Updated event capacity override information","typeName":"IEventRegistrationEventCapacityOverrides"},"authorizationType":null,"authorizationRole":"admin","method":"put","path":"/eventRegistration/admin/eventCapacityOverrides/{eventCapacityOverrideId}","name":"update"},{"specification":"Deletes an existing event capacity override entry from the event_registration_event_capacity_overrides table. The operation permanently removes the capacity override record identified by the eventCapacityOverrideId path parameter, disabling any manual override settings for the associated event. This results in the event reverting to automatic capacity adjustment behavior unless another override exists.","description":"This operation performs a hard delete of the event capacity override identified by the specified UUID. Removing the capacity override record disables manual overrides for event capacity adjustments, restoring automatic control.\n\nOnly users with administrative privileges may perform this operation due to its impact on event management.\n\nThe deletion is permanent; once removed, there is no recovery unless recreated. The API returns no content upon successful deletion.","summary":"Delete event capacity override by ID","parameters":[{"name":"eventCapacityOverrideId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target event capacity override record"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","method":"delete","path":"/eventRegistration/admin/eventCapacityOverrides/{eventCapacityOverrideId}","name":"erase"},{"specification":"Retrieves all capacity override records associated with a specific event from the event_registration_event_capacity_overrides table. This allows clients to view manual override settings for an event, facilitating administrative transparency and capacity management. The eventId path parameter identifies the event whose overrides are listed.","description":"This API endpoint returns a list of capacity override records linked to the specified event ID. Capacity overrides represent admin controls that enable or disable automatic capacity adjustments on events.\n\nAccess to this endpoint requires administrative authorization due to the sensitivity of override settings.\n\nReturned data includes detailed override records with flags indicating override status, along with timestamps for audit purposes.","summary":"List capacity overrides for an event","parameters":[{"name":"eventId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the event to list capacity overrides for"}],"requestBody":null,"responseBody":{"description":"List of capacity override records","typeName":"IPageIEventRegistrationEventCapacityOverrides"},"authorizationType":null,"authorizationRole":"admin","method":"patch","path":"/eventRegistration/admin/events/{eventId}/capacityOverrides","name":"index"},{"specification":"Retrieves detailed information for a specific event capacity override record identified by the eventCapacityOverrideId parameter from the event_registration_event_capacity_overrides table. Provides data for administrative review, including whether automatic capacity adjustment is overridden, and audit timestamps.","description":"This API endpoint fetches detailed information of a single event capacity override by its unique ID. The data includes override status and audit timestamps.\n\nAccess is restricted to administrators due to the sensitive nature of capacity override settings.\n\nIf the specified ID does not exist, a suitable error response is returned.","summary":"Get event capacity override details by ID","parameters":[{"name":"eventCapacityOverrideId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target event capacity override record"}],"requestBody":null,"responseBody":{"description":"Event capacity override details","typeName":"IEventRegistrationEventCapacityOverrides"},"authorizationType":null,"authorizationRole":"admin","method":"get","path":"/eventRegistration/admin/events/{eventId}/capacityOverrides/{eventCapacityOverrideId}","name":"at"},{"specification":"This operation creates a new capacity override for a specific event, allowing admin users to enable or disable automatic capacity adjustments for that event. It uses the event_registration_event_capacity_overrides table in the eventRegistration schema, linking capacity overrides uniquely to events by UUID.","description":"Allows authorized admin users to create a capacity override linked to a specified event by eventId (UUID). This override indicates whether automatic capacity adjustment is enabled or disabled.\n\nOnly admins can perform this operation.\n\nCreates audit fields for tracking creation and updates. The operation ensures uniqueness per event to prevent conflicting overrides.\n\nThis operation aligns strictly with the event_registration_event_capacity_overrides Prisma model's specifications.","summary":"Create capacity override for an event","parameters":[{"name":"eventId","description":"Unique ID of the event to create capacity override for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a capacity override, including isOverrideEnabled flag","typeName":"IEventRegistrationEventCapacityOverride.ICreate"},"responseBody":{"description":"Information of newly created capacity override","typeName":"IEventRegistrationEventCapacityOverride"},"authorizationType":null,"authorizationRole":"admin","name":"createCapacityOverride","path":"/eventRegistration/admin/events/{eventId}/capacityOverrides","method":"post"},{"specification":"This operation updates an existing capacity override record for a specified event. Admin users can toggle the isOverrideEnabled flag, controlling the dynamic adjustment of event capacity.\n\nThe operation acts on the event_registration_event_capacity_overrides table and requires precise identification of both event and capacity override IDs as UUIDs.","description":"Authorized admin users can update an existing capacity override for a given event and override ID.\n\nPrimarily modifies the isOverrideEnabled flag to enable or disable automatic capacity override.\n\nThe operation validates UUID parameters for eventId and eventCapacityOverrideId.\n\nStrictly corresponds to the event_registration_event_capacity_overrides model, ensuring data integrity and audit compliance.","summary":"Update capacity override for an event","parameters":[{"name":"eventId","description":"Unique identifier of the event associated with the capacity override","schema":{"type":"string","format":"uuid"}},{"name":"eventCapacityOverrideId","description":"Unique identifier of the capacity override record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for existing capacity override including isOverrideEnabled flag","typeName":"IEventRegistrationEventCapacityOverride.IUpdate"},"responseBody":{"description":"Updated capacity override information","typeName":"IEventRegistrationEventCapacityOverride"},"authorizationType":null,"authorizationRole":"admin","name":"updateCapacityOverride","path":"/eventRegistration/admin/events/{eventId}/capacityOverrides/{eventCapacityOverrideId}","method":"put"},{"specification":"This operation deletes a capacity override record for a specified event, permanently removing the override configuration. Only admin users are authorized to perform this deletion.\n\nIt directly operates on the event_registration_event_capacity_overrides table in the eventRegistration schema.\n\nPath parameters eventId and eventCapacityOverrideId specify the exact override record for deletion, both as UUIDs.","description":"Allows authorized admin users to permanently delete a capacity override linked to a given event.\n\nRemoves the override completely from the database, causing the event to revert to default automatic capacity behavior.\n\nThe operation does not implement soft deletion. It requires UUID identification parameters for both event and override records.\n\nFulfills audit and data integrity requirements as per the event_registration_event_capacity_overrides schema.","summary":"Delete capacity override for an event","parameters":[{"name":"eventId","description":"Unique identifier of the event associated with the capacity override to delete","schema":{"type":"string","format":"uuid"}},{"name":"eventCapacityOverrideId","description":"Unique identifier of the capacity override record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"eraseCapacityOverride","path":"/eventRegistration/admin/events/{eventId}/capacityOverrides/{eventCapacityOverrideId}","method":"delete"},{"specification":"This operation retrieves a paginated, filtered list of notifications for users of the eventRegistration system. Notifications include registration confirmations, waitlist promotions, event schedule changes, and capacity adjustments, stored in the event_registration_notifications table.\n\nAccessible by regular users, event organizers, and admins, this operation supports filtering, sorting, and pagination to efficiently browse notification logs.\n\nThe PATCH method accepts a request body defining filter criteria and returns paginated notification summaries.","description":"Retrieves filtered and paginated notifications for authenticated users across all roles (regular user, event organizer, admin).\n\nNotifications include event-related registration confirmations, waitlist promotions, schedule changes, and capacity adjustments.\n\nSupports filtering by read status, sorting, and pagination for efficient notification log management.\n\nReturns paginated notification summaries optimally designed for user dashboards.\n\nMatches the event_registration_notifications Prisma schema requirements, adhering to role-based access control.","summary":"Retrieve filtered paginated notifications list","parameters":[],"requestBody":{"description":"Filtering, sorting and pagination criteria for notifications","typeName":"IEventRegistrationNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching criteria","typeName":"IPageIEventRegistrationNotification.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"indexNotifications","path":"/eventRegistration/admin/notifications","method":"patch"},{"specification":"This operation retrieves a paginated, filtered list of notifications for users of the eventRegistration system. Notifications include registration confirmations, waitlist promotions, event schedule changes, and capacity adjustments, stored in the event_registration_notifications table.\n\nAccessible by regular users, event organizers, and admins, this operation supports filtering, sorting, and pagination to efficiently browse notification logs.\n\nThe PATCH method accepts a request body defining filter criteria and returns paginated notification summaries.","description":"Retrieves filtered and paginated notifications for authenticated users across all roles (regular user, event organizer, admin).\n\nNotifications include event-related registration confirmations, waitlist promotions, schedule changes, and capacity adjustments.\n\nSupports filtering by read status, sorting, and pagination for efficient notification log management.\n\nReturns paginated notification summaries optimally designed for user dashboards.\n\nMatches the event_registration_notifications Prisma schema requirements, adhering to role-based access control.","summary":"Retrieve filtered paginated notifications list","parameters":[],"requestBody":{"description":"Filtering, sorting and pagination criteria for notifications","typeName":"IEventRegistrationNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching criteria","typeName":"IPageIEventRegistrationNotification.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"indexNotifications","path":"/eventRegistration/eventOrganizer/notifications","method":"patch"},{"specification":"This operation retrieves a paginated, filtered list of notifications for users of the eventRegistration system. Notifications include registration confirmations, waitlist promotions, event schedule changes, and capacity adjustments, stored in the event_registration_notifications table.\n\nAccessible by regular users, event organizers, and admins, this operation supports filtering, sorting, and pagination to efficiently browse notification logs.\n\nThe PATCH method accepts a request body defining filter criteria and returns paginated notification summaries.","description":"Retrieves filtered and paginated notifications for authenticated users across all roles (regular user, event organizer, admin).\n\nNotifications include event-related registration confirmations, waitlist promotions, schedule changes, and capacity adjustments.\n\nSupports filtering by read status, sorting, and pagination for efficient notification log management.\n\nReturns paginated notification summaries optimally designed for user dashboards.\n\nMatches the event_registration_notifications Prisma schema requirements, adhering to role-based access control.","summary":"Retrieve filtered paginated notifications list","parameters":[],"requestBody":{"description":"Filtering, sorting and pagination criteria for notifications","typeName":"IEventRegistrationNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching criteria","typeName":"IPageIEventRegistrationNotification.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"indexNotifications","path":"/eventRegistration/regularUser/notifications","method":"patch"},{"specification":"This API operation handles retrieval of a specific notification by its unique identifier from the event_registration_notifications table in the Event Registration platform's database. It enables authorized users to fetch detailed information about a particular notification, including its type, content, read status, and timestamps. The notification may be associated with a specific user or be system-wide, supporting the platform's notification viewing and management features. The operation requires the notification ID as a path parameter and returns the full notification object for display or further processing.","description":"This operation retrieves detailed information about a notification identified by its UUID. The notification record includes properties such as type (e.g., registration confirmation, waitlist promotion), content message, read flag, creation and update timestamps, and optional deletion timestamp. It also includes association to the user who receives or triggers the notification, if applicable.\n\nAccess is typically restricted to authenticated users with roles including regularUser, eventOrganizer, or admin, viewing their own notifications or system components retrieving notifications for management or logging purposes.\n\nThe operation does not alter data and is a simple data fetch based on the unique notification ID.","summary":"Retrieve detailed information of a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/eventRegistration/regularUser/notifications/{notificationId}","method":"get"},{"specification":"This API operation handles retrieval of a specific notification by its unique identifier from the event_registration_notifications table in the Event Registration platform's database. It enables authorized users to fetch detailed information about a particular notification, including its type, content, read status, and timestamps. The notification may be associated with a specific user or be system-wide, supporting the platform's notification viewing and management features. The operation requires the notification ID as a path parameter and returns the full notification object for display or further processing.","description":"This operation retrieves detailed information about a notification identified by its UUID. The notification record includes properties such as type (e.g., registration confirmation, waitlist promotion), content message, read flag, creation and update timestamps, and optional deletion timestamp. It also includes association to the user who receives or triggers the notification, if applicable.\n\nAccess is typically restricted to authenticated users with roles including regularUser, eventOrganizer, or admin, viewing their own notifications or system components retrieving notifications for management or logging purposes.\n\nThe operation does not alter data and is a simple data fetch based on the unique notification ID.","summary":"Retrieve detailed information of a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"at","path":"/eventRegistration/eventOrganizer/notifications/{notificationId}","method":"get"},{"specification":"This API operation handles retrieval of a specific notification by its unique identifier from the event_registration_notifications table in the Event Registration platform's database. It enables authorized users to fetch detailed information about a particular notification, including its type, content, read status, and timestamps. The notification may be associated with a specific user or be system-wide, supporting the platform's notification viewing and management features. The operation requires the notification ID as a path parameter and returns the full notification object for display or further processing.","description":"This operation retrieves detailed information about a notification identified by its UUID. The notification record includes properties such as type (e.g., registration confirmation, waitlist promotion), content message, read flag, creation and update timestamps, and optional deletion timestamp. It also includes association to the user who receives or triggers the notification, if applicable.\n\nAccess is typically restricted to authenticated users with roles including regularUser, eventOrganizer, or admin, viewing their own notifications or system components retrieving notifications for management or logging purposes.\n\nThe operation does not alter data and is a simple data fetch based on the unique notification ID.","summary":"Retrieve detailed information of a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/eventRegistration/admin/notifications/{notificationId}","method":"get"},{"specification":"This API operation creates a new notification record in the event_registration_notifications table to log system or user-related events such as registration confirmations, waitlist promotions, event changes, or capacity adjustments. This operation is essential to record notifications that will be later retrieved by users or administrators. The endpoint accepts all necessary notification details except the primary key which is generated by the backend system.","description":"This operation creates a new notification record in the system. The client provides notification details such as user association (nullable if system-wide), type, content, read status, and timestamps. The system records this notification for display in user dashboards or administrative interfaces.\n\nThis endpoint is typically restricted to admin role, reflecting controlled creation of notifications triggered by platform events or administrative actions.\n\nThis operation modifies the database by inserting new notifications, supporting system messaging and notification management workflows.","summary":"Create a new notification record","parameters":[],"requestBody":{"description":"Creation info of the notification","typeName":"IEventRegistrationNotification.ICreate"},"responseBody":{"description":"Created notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/eventRegistration/admin/notifications","method":"post"},{"specification":"This API operation updates an existing notification record in the event_registration_notifications table, enabling modifications such as marking a notification as read or updating content. It helps maintain current notification states for users or the system. The request must specify the notification ID as a path parameter and provide updated properties as request body. It supports notification management features such as marking notifications read or changing messages.","description":"This operation updates properties of an existing notification identified by the UUID. Common updates include changing the read flag or modifying the content message.\n\nUpdates are typically done by users marking notifications read or system processes updating texts.\n\nThe operation ensures valid input data and returns the updated notification object after successful modification.\n\nAccess control is enforced to restrict updates to authorized users - regularUser, eventOrganizer, or admin - permitted to update the notification data they own or manage.","summary":"Update an existing notification","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the notification","typeName":"IEventRegistrationNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/eventRegistration/regularUser/notifications/{notificationId}","method":"put"},{"specification":"This API operation updates an existing notification record in the event_registration_notifications table, enabling modifications such as marking a notification as read or updating content. It helps maintain current notification states for users or the system. The request must specify the notification ID as a path parameter and provide updated properties as request body. It supports notification management features such as marking notifications read or changing messages.","description":"This operation updates properties of an existing notification identified by the UUID. Common updates include changing the read flag or modifying the content message.\n\nUpdates are typically done by users marking notifications read or system processes updating texts.\n\nThe operation ensures valid input data and returns the updated notification object after successful modification.\n\nAccess control is enforced to restrict updates to authorized users - regularUser, eventOrganizer, or admin - permitted to update the notification data they own or manage.","summary":"Update an existing notification","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the notification","typeName":"IEventRegistrationNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"update","path":"/eventRegistration/eventOrganizer/notifications/{notificationId}","method":"put"},{"specification":"This API operation updates an existing notification record in the event_registration_notifications table, enabling modifications such as marking a notification as read or updating content. It helps maintain current notification states for users or the system. The request must specify the notification ID as a path parameter and provide updated properties as request body. It supports notification management features such as marking notifications read or changing messages.","description":"This operation updates properties of an existing notification identified by the UUID. Common updates include changing the read flag or modifying the content message.\n\nUpdates are typically done by users marking notifications read or system processes updating texts.\n\nThe operation ensures valid input data and returns the updated notification object after successful modification.\n\nAccess control is enforced to restrict updates to authorized users - regularUser, eventOrganizer, or admin - permitted to update the notification data they own or manage.","summary":"Update an existing notification","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the notification","typeName":"IEventRegistrationNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"IEventRegistrationNotification"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/eventRegistration/admin/notifications/{notificationId}","method":"put"},{"specification":"This API operation permanently deletes a notification record from the event_registration_notifications table, effectively removing the notification for the associated user or system logs. It requires the notification ID as a path parameter. This operation performs a hard delete and should be restricted to authorized users managing their notifications or admins performing cleanup. No response body is returned.","description":"This operation deletes a notification record by its unique identifier, permanently removing it from the database.\n\nThis supports user actions to erase unwanted notifications or administrative cleanup tasks.\n\nNo request body is required and no response body is returned upon successful deletion.\n\nAuthorization ensures only the notification owner or administrators can perform this hard delete operation.","summary":"Delete a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/eventRegistration/regularUser/notifications/{notificationId}","method":"delete"},{"specification":"This API operation permanently deletes a notification record from the event_registration_notifications table, effectively removing the notification for the associated user or system logs. It requires the notification ID as a path parameter. This operation performs a hard delete and should be restricted to authorized users managing their notifications or admins performing cleanup. No response body is returned.","description":"This operation deletes a notification record by its unique identifier, permanently removing it from the database.\n\nThis supports user actions to erase unwanted notifications or administrative cleanup tasks.\n\nNo request body is required and no response body is returned upon successful deletion.\n\nAuthorization ensures only the notification owner or administrators can perform this hard delete operation.","summary":"Delete a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"eventOrganizer","name":"erase","path":"/eventRegistration/eventOrganizer/notifications/{notificationId}","method":"delete"},{"specification":"This API operation permanently deletes a notification record from the event_registration_notifications table, effectively removing the notification for the associated user or system logs. It requires the notification ID as a path parameter. This operation performs a hard delete and should be restricted to authorized users managing their notifications or admins performing cleanup. No response body is returned.","description":"This operation deletes a notification record by its unique identifier, permanently removing it from the database.\n\nThis supports user actions to erase unwanted notifications or administrative cleanup tasks.\n\nNo request body is required and no response body is returned upon successful deletion.\n\nAuthorization ensures only the notification owner or administrators can perform this hard delete operation.","summary":"Delete a notification by ID","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/eventRegistration/admin/notifications/{notificationId}","method":"delete"},{"specification":"This operation retrieves a paginated list of event analytics data, allowing filtering, searching, and sorting capabilities. It operates on the event_registration_event_analytics table in the Prisma database schema, which records aggregated analytical data such as total sign-ups, waitlist length, and popularity counts across different event categories per event. The search operation enables clients to perform complex queries to analyze event registration and waitlist trends over time, supporting decision-making by event organizers and administrators.","path":"/eventRegistration/admin/eventAnalytics","method":"patch","summary":"Search and retrieve a paginated list of event analytics data","description":"Retrieve a filtered and paginated list of event analytics records from the system. This operation supports detailed querying to provide insights into event performance including total signups, waitlist sizes, and category popularity metrics.\n\nThe operation interacts with the event_registration_event_analytics table which aggregates important metrics per event such as total sign-ups, waitlist lengths, and category-wise popularity.\n\nSecurity considerations include ensuring only users with appropriate roles and permissions can access detailed analytics data. Admins have global access while organizers have scoped access.\n\nThe request body supports various search parameters and pagination options to enable precise data retrieval.\n\nThe response contains a paginated collection of event analytics summaries optimized for dashboard views.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for event analytics filtering","typeName":"IEventRegistrationEventAnalytics.IRequest"},"responseBody":{"description":"Paginated list of event analytics summaries matching search criteria","typeName":"IPageIEventRegistrationEventAnalytics.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a paginated list of event analytics data, allowing filtering, searching, and sorting capabilities. It operates on the event_registration_event_analytics table in the Prisma database schema, which records aggregated analytical data such as total sign-ups, waitlist length, and popularity counts across different event categories per event. The search operation enables clients to perform complex queries to analyze event registration and waitlist trends over time, supporting decision-making by event organizers and administrators.","path":"/eventRegistration/eventOrganizer/eventAnalytics","method":"patch","summary":"Search and retrieve a paginated list of event analytics data","description":"Retrieve a filtered and paginated list of event analytics records from the system. This operation supports detailed querying to provide insights into event performance including total signups, waitlist sizes, and category popularity metrics.\n\nThe operation interacts with the event_registration_event_analytics table which aggregates important metrics per event such as total sign-ups, waitlist lengths, and category-wise popularity.\n\nSecurity considerations include ensuring only users with appropriate roles and permissions can access detailed analytics data. Admins have global access while organizers have scoped access.\n\nThe request body supports various search parameters and pagination options to enable precise data retrieval.\n\nThe response contains a paginated collection of event analytics summaries optimized for dashboard views.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for event analytics filtering","typeName":"IEventRegistrationEventAnalytics.IRequest"},"responseBody":{"description":"Paginated list of event analytics summaries matching search criteria","typeName":"IPageIEventRegistrationEventAnalytics.ISummary"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"index"},{"specification":"This operation retrieves the detailed event analytics record specified by the unique eventAnalyticsId. It operates on the event_registration_event_analytics table in the Prisma schema.\n\nClients use this endpoint to fetch a single, detailed snapshot of event performance metrics including total sign-ups, waitlist length, and popularity by event category for a particular event analytics entry.\n\nSecurity considerations involve restricting access based on user role: admins have full access while event organizers may have scoped access depending on ownership.\n\nThe response includes all detailed properties of the event analytics entity.","path":"/eventRegistration/admin/eventAnalytics/{eventAnalyticsId}","method":"get","summary":"Retrieve detailed event analytics by ID","description":"Retrieve detailed information about a single event analytics record identified by eventAnalyticsId. This operation provides insights into specific event registration data captured at a point in time.\n\nAccess is controlled to ensure sensitive data is only visible to authorized roles including admins and event organizers with appropriate permissions.\n\nIf the requested eventAnalyticsId does not exist, the operation will respond with an appropriate error.\n\nNo request body is needed for this GET operation.","parameters":[{"name":"eventAnalyticsId","description":"Unique identifier of the target event analytics record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event analytics information","typeName":"IEventRegistrationEventAnalytics"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves the detailed event analytics record specified by the unique eventAnalyticsId. It operates on the event_registration_event_analytics table in the Prisma schema.\n\nClients use this endpoint to fetch a single, detailed snapshot of event performance metrics including total sign-ups, waitlist length, and popularity by event category for a particular event analytics entry.\n\nSecurity considerations involve restricting access based on user role: admins have full access while event organizers may have scoped access depending on ownership.\n\nThe response includes all detailed properties of the event analytics entity.","path":"/eventRegistration/eventOrganizer/eventAnalytics/{eventAnalyticsId}","method":"get","summary":"Retrieve detailed event analytics by ID","description":"Retrieve detailed information about a single event analytics record identified by eventAnalyticsId. This operation provides insights into specific event registration data captured at a point in time.\n\nAccess is controlled to ensure sensitive data is only visible to authorized roles including admins and event organizers with appropriate permissions.\n\nIf the requested eventAnalyticsId does not exist, the operation will respond with an appropriate error.\n\nNo request body is needed for this GET operation.","parameters":[{"name":"eventAnalyticsId","description":"Unique identifier of the target event analytics record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed event analytics information","typeName":"IEventRegistrationEventAnalytics"},"authorizationType":null,"authorizationRole":"eventOrganizer","name":"at"}],"components":{"authorization":[{"name":"regularUser","description":"Regular users who can register with email/password, verify email, browse events, and sign up for events after verification. They can request organizer status but cannot create or manage events by default.","kind":"member"},{"name":"eventOrganizer","description":"Users with permissions to create, update, cancel, and manage their own events. Organizers can view attendee lists, manage waitlists, and see analytics for their events. Organizer status must be approved by admins.","kind":"member"},{"name":"admin","description":"Admins have global privileges to manage users, approve organizer requests, manage all events system-wide, override capacity adjustments, and view global analytics. They also handle manual email verifications and system-level notifications.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIEventRegistrationRegularUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationRegularUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEmailVerificationToken":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEmailVerificationToken"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventAttendee.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventAttendee.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventWaitlist.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventWaitlist.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationNotifications":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationNotifications"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventOrganizer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventOrganizer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationOrganizerRequests.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationOrganizerRequests.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEvent.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEvent.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventCapacityOverride":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventCapacityOverride"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventCapacityOverrides":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventCapacityOverrides"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIEventRegistrationEventAnalytics.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IEventRegistrationEventAnalytics.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IEventRegistrationRegularUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user"},"email":{"type":"string","description":"Unique email address of the regular user for login authentication and notifications"},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords"},"full_name":{"type":"string","description":"Full legal or preferred name of the user"},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for contacting the user"},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL of the user's profile picture"},"email_verified":{"type":"boolean","description":"Email verification status of the user, true if verified"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created (ISO 8601)"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated (ISO 8601)"}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at"],"description":"Represents a regular user registered in the system with login credentials and profile information.\n\nIncludes email verification status and timestamps for auditing."},"IEventRegistrationRegularUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"User's unique email address used for login authentication.\n\nMust be a valid email format.\n\nUnique in the system."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords."},"full_name":{"type":"string","description":"User's full legal or preferred name."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's phone number, optional but useful for contacting."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL of user's profile picture, optional."},"email_verified":{"type":"boolean","description":"Flag indicating if user has verified their email address.\n\nUsers start with this set to false by default."}},"required":["email","password_hash","full_name","email_verified"],"description":"Request body for creating a regular user account. Must include email, password hash, and profile data."},"IEventRegistrationRegularUser.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"User's email address for login."},"password_hash":{"type":"string","description":"Hashed password of the user."}},"required":["email","password_hash"],"description":"Request body containing login credentials of the regular user."},"IEventRegistrationRegularUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token to obtain new access tokens."}},"required":["refresh_token"],"description":"Request body containing refresh token information."},"IEventRegistrationRegularUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID of the authorized user."},"email":{"type":"string","description":"Unique email address of the regular user for login authentication and notifications"},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords"},"full_name":{"type":"string","description":"Full legal or preferred name of the user"},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for contacting the user"},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL of the user's profile picture"},"email_verified":{"type":"boolean","description":"Email verification status of the user, true if verified"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created (ISO 8601)"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated (ISO 8601)"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at","token"],"description":"Authorized response including JWT tokens for the newly registered regular user."},"IEventRegistrationEventOrganizer.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for the event organizer. This is mandatory for login and communication."},"password_hash":{"type":"string","description":"Hashed password string for secure authentication. Never store plaintext passwords."},"full_name":{"type":"string","description":"Full legal or preferred name of the event organizer."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional contact phone number of the organizer."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to the organizer's profile picture. Optional field."},"email_verified":{"type":"boolean","description":"Flag indicating if the organizer's email has been verified."}},"required":["email","password_hash","full_name","email_verified"],"description":"Request payload for creating a new event organizer user account. Includes authentication and profile info."},"IEventRegistrationEventOrganizer.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the event organizer used for login."},"password_hash":{"type":"string","description":"Hashed password for authentication."}},"required":["email","password_hash"],"description":"Request payload for event organizer login authentication."},"IEventRegistrationEventOrganizer.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token used to obtain new authentication tokens."}},"required":["refresh_token"],"description":"Request payload to refresh JWT tokens for event organizer users."},"IEventRegistrationEventOrganizer.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized event organizer user."},"email":{"type":"string","description":"Email address of the authorized event organizer."},"password_hash":{"type":"string","description":"Hashed password for secure authentication.\nNever store plain text passwords."},"full_name":{"type":"string","description":"Full name of the authorized event organizer."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number of the authorized event organizer."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile picture URL of the authorized event organizer."},"email_verified":{"type":"boolean","description":"Email verification status of the authorized event organizer."},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Account last updated timestamp."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at","token"],"description":"Response payload for authorized event organizer users including JWT tokens."},"IEventRegistrationAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's unique email address for login.","format":"email"},"password_hash":{"type":"string","description":"Hashed password for authentication security."},"full_name":{"type":"string","description":"Admin's full name for identification."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for admin contact."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile picture URL for admin users."},"email_verified":{"type":"boolean","description":"Flag indicating if admin's email has been verified."}},"required":["email","password_hash","full_name","email_verified"],"description":"Payload for creating a new admin user account with required authentication and profile details."},"IEventRegistrationAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's unique email address for login.","format":"email"},"password_hash":{"type":"string","description":"Hashed password for authentication security."}},"required":["email","password_hash"],"description":"Payload for admin login authentication with email and password hash."},"IEventRegistrationAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh JWT token to obtain new access tokens."}},"required":["refresh_token"],"description":"Payload to refresh JWT authorization tokens for admin."},"IEventRegistrationAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Primary key of the admin user.","format":"uuid"},"email":{"type":"string","description":"Administrator's unique email address.","format":"email"},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords."},"full_name":{"type":"string","description":"Admin's full name for identification."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for admin contact."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile picture URL for admin users."},"email_verified":{"type":"boolean","description":"Flag indicating if admin's email has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user record was last updated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at","token"],"description":"Response schema for authorized admin user including JWT tokens."},"IEventRegistrationRegularUser.IRequest":{"type":"object","properties":{"full_name":{"type":"string","description":"Search string to filter users by full name.\n\nOptional; supports partial matching."},"email_verified":{"type":"boolean","description":"Filter based on email verification status.\n\nOptional; true filters verified users, false for unverified."},"created_after":{"type":"string","format":"date-time","description":"Date-time string to filter users created after this datetime.\n\nOptional; ISO 8601 date string."},"created_before":{"type":"string","format":"date-time","description":"Date-time string to filter users created before this datetime.\n\nOptional; ISO 8601 date string."},"page":{"type":"integer","format":"uint32","description":"Pagination: page number.\n\nOptional; unsigned 32-bit integer."},"limit":{"type":"integer","format":"uint32","description":"Pagination: number of records per page.\n\nOptional; unsigned 32-bit integer."}},"description":"Request parameters for querying and filtering regular users.\n\nIncludes pagination, filtering by name, email verification, and creation date.","required":[]},"IEventRegistrationRegularUser.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's email address.\n\nUpdatable field; must remain unique."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Hashed password string.\n\nUpdatable for password changes."},"full_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's full name.\n\nOptional update."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's phone number.\n\nOptional; can be null."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL to user's profile picture.\n\nOptional; can be null."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Email verification status.\n\nOptional update."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of last update.\n\nAuto-set by system; generally not supplied externally."}},"description":"Fields of a regular user entity that can be updated.","required":[]},"IEventRegistrationEmailVerificationToken.IUpdate":{"type":"object","properties":{"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime of the token.\n\nOptional update."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Token creation timestamp.\n\nOptional; typical for audit and update, not commonly changed."}},"description":"Fields of an email verification token entity that can be updated.","required":[]},"IEventRegistrationEmailVerificationToken":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key UUID"},"event_registration_regular_user_id":{"type":"string","description":"Belonged regular user UUID"},"token":{"type":"string","description":"Unique email verification token"},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the token. Formatted in ISO 8601."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the token was created. Formatted in ISO 8601."}},"required":["id","event_registration_regular_user_id","token","expires_at","created_at"],"description":"Email verification token entry storing unique tokens linked to user accounts. Contains the token string used for verifying email ownership, and expiration information."},"IEventRegistrationEmailVerificationToken.ICreate":{"type":"object","properties":{"event_registration_regular_user_id":{"type":"string","description":"Foreign key to the regular user (UUID)"},"token":{"type":"string","description":"Unique token string for email verification purposes"},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp for the token. Must be a valid ISO 8601 datetime string."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp of token creation."}},"required":["event_registration_regular_user_id","token","expires_at"],"description":"Request body for creating a new email verification token. Requires the user ID to link the token, token string value, and expiration date."},"IEventRegistrationEmailVerificationToken.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (starts at 1)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit of records per page for pagination."},"event_registration_regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by user ID."},"token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by token string."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter by expiration timestamp."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter by creation timestamp."}},"required":[],"description":"Search filters and pagination parameters for querying email verification tokens."},"IEventRegistrationEventAttendee":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of attendee record"},"event_id":{"type":"string","format":"uuid","description":"Associated event unique identifier"},"regular_user_id":{"type":"string","format":"uuid","description":"Associated user's unique identifier"},"created_at":{"type":"string","format":"date-time","description":"Created timestamp in ISO 8601 format"},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp in ISO 8601 format"}},"required":["id","event_id","regular_user_id","created_at","updated_at"],"description":"Represents a confirmed attendee record linking a user to an event.\n\nIncludes necessary timestamps for audit."},"IEventRegistrationEventAttendee.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (starts at 1)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit of records per page for pagination."},"event_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by event ID."},"regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by regular user ID."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter by creation timestamp."}},"required":[],"description":"Filters and pagination parameters for querying event attendees."},"IEventRegistrationEventAttendee.ICreate":{"type":"object","properties":{"event_id":{"type":"string","format":"uuid","description":"References the event_registration_events.id of the attended event."},"regular_user_id":{"type":"string","format":"uuid","description":"References the event_registration_regular_users.id of the attendee."}},"required":["event_id","regular_user_id"],"description":"Request body schema for creating an event attendee record. Requires event ID and user ID to link the attendee to an event."},"IEventRegistrationEventAttendee.IUpdate":{"type":"object","properties":{"event_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"References the event_registration_events.id of the attended event. Nullable for updates."},"regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"References the event_registration_regular_users.id of the attendee. Nullable for updates."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the attendee registered. Nullable for updates."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the attendee registration was last updated. Nullable for updates."}},"required":[],"description":"Request body schema for updating an event attendee record. All properties are optional and nullable to support partial updates."},"IEventRegistrationEventWaitlist.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items per page for pagination."},"event_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by event ID."},"regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by regular user ID."}},"required":[],"description":"Request body schema for searching event waitlists. Supports pagination and filtering by event or regular user."},"IEventRegistrationEventWaitlist":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of the waitlist entry."},"event_id":{"type":"string","format":"uuid","description":"Event ID this waitlist entry is associated with."},"regular_user_id":{"type":"string","format":"uuid","description":"Regular user ID of the user on the waitlist."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated."}},"required":["id","event_id","regular_user_id","created_at","updated_at"],"description":"Represents a waitlist entry associating a regular user with an event waiting for available capacity.\n\nEach entry includes references to the event and user plus timestamps for creation and update tracking. Used to enforce FIFO waitlist ordering and business logic."},"IEventRegistrationEventWaitlists.ICreate":{"type":"object","properties":{"event_id":{"type":"string","format":"uuid","description":"References the event_registration_events.id of the event being waited for.\n\nMandatory identifier linking the new waitlist entry to its event."},"regular_user_id":{"type":"string","format":"uuid","description":"References the event_registration_regular_users.id of the waitlisted user.\n\nMandatory identifier for the user who is being added to the waitlist."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional; defaults to current timestamp if not supplied."},{"type":"null"}],"description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional; defaults to current timestamp if not supplied."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated.\n\nOptional; defaults to current timestamp if not supplied."},{"type":"null"}],"description":"Timestamp when this waitlist entry was last updated.\n\nOptional; defaults to current timestamp if not supplied."}},"required":["event_id","regular_user_id"],"description":"Create new event waitlist record for a user waiting for a spot in a full event.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IEventRegistrationEventWaitlists.IUpdate":{"type":"object","properties":{"event_id":{"oneOf":[{"type":"string","format":"uuid","description":"References the event_registration_events.id of the event being waited for.\n\nOptional property for updating the event associated with the waitlist record."},{"type":"null"}],"description":"References the event_registration_events.id of the event being waited for.\n\nOptional property for updating the event associated with the waitlist record."},"regular_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"References the event_registration_regular_users.id of the waitlisted user.\n\nOptional property for updating the user associated with the waitlist record."},{"type":"null"}],"description":"References the event_registration_regular_users.id of the waitlisted user.\n\nOptional property for updating the user associated with the waitlist record."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional; can be used to modify record creation timestamp for correction purposes."},{"type":"null"}],"description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional; can be used to modify record creation timestamp for correction purposes."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated.\n\nOptional; used to record the time of latest modification."},{"type":"null"}],"description":"Timestamp when this waitlist entry was last updated.\n\nOptional; used to record the time of latest modification."}},"required":[],"description":"Update an existing event waitlist record attribues.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IEventRegistrationEventWaitlists":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nRepresents the unique identifier for each waitlist record."},"event_id":{"type":"string","format":"uuid","description":"References the event_registration_events.id of the event being waited for.\n\nThis property links the waitlist record to a specific event."},"regular_user_id":{"type":"string","format":"uuid","description":"References the event_registration_regular_users.id of the waitlisted user.\n\nIdentifies which regular user is on the waitlist."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nUsed to manage the order in which waitlisted users are promoted."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated.\n\nTracks the last modification time to support audit logging."}},"required":["id","event_id","regular_user_id","created_at","updated_at"],"description":"Represents the waitlist for events that have reached full capacity. Each record links a regular user waiting for a spot in a specific event. The creation timestamp manages the FIFO order of the waitlist. This supports automated waitlist promotion and audit logging.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IEventRegistrationNotifications.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"1-based page number for paginated results; nullable for default behavior"},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"int32"},{"type":"null"}],"description":"Number of records per page; nullable if default applies"},"type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter notifications by type; e.g., \"registration confirmation\", \"waitlist promotion\"; nullable disables filter"},"read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter based on read status; true for read, false for unread; nullable disables filter"}},"required":[],"description":"Request schema for retrieving event registration notifications with support for pagination and filtering.\nSupports optional fields for page, limit, type filtering, and read status.\nPurpose is to allow API consumers to query notifications efficiently with flexible criteria."},"IEventRegistrationNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification; UUID string"},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID receiving or associated with notification; nullable for system-wide messages"},"type":{"type":"string","description":"Kind of notification; business domain values like \"registration confirmation\" or \"waitlist promotion\""},"content":{"type":"string","description":"Text content with detailed information about the notification"},"read":{"type":"boolean","description":"Flag indicating if the notification has been read by the recipient"},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of creation time"},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of last update time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable deletion timestamp if the notification was soft deleted; null if active"}},"required":["id","type","content","read","created_at","updated_at"],"description":"Main entity schema representing a notification record.\nFields include unique ID, user association, type, content, read flag, creation/update timestamps, and optional deleted timestamp.\nProvides comprehensive details suitable for API responses and detailed views."},"IEventRegistrationNotification.ICreate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID to receive this notification; nullable for system-wide messages"},"type":{"type":"string","description":"Notification type; e.g., \"registration confirmation\", \"waitlist promotion\""},"content":{"type":"string","description":"Notification textual content describing the event or action"},"read":{"type":"boolean","description":"Whether this notification is read; usually initialized to false"}},"required":["type","content","read"],"description":"Request schema for creating a notification.\nRequired fields include type, content, and read flag.\nOptional user_id allows targeting specific users or indicating system-wide messages.\nUsed as request body for POST creation."},"IEventRegistrationNotification.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional user ID recipient; nullable to clear association"},"type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notification type string; nullable to clear value (rare)"},"content":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional content text; nullable clears content (unusual)"},"read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional read flag indicating the notification read status"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional deletion timestamp; nullable to mark as deleted or restored"}},"required":[],"description":"Request schema for updating a notification.\nAll properties are optional and nullable to allow partial updates.\nIncludes user_id, type, content, read flag, and deleted_at timestamp.\nUsed as request body for PUT update."},"IEventRegistrationEventOrganizer":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the event organizer."},"email":{"type":"string","description":"Event organizer's unique email address for authentication.\nMust be unique."},"password_hash":{"type":"string","description":"Hashed password for secure authentication.\nNever store plain text passwords."},"full_name":{"type":"string","description":"Full name of the event organizer."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number of the event organizer, optional.\n\nNullable."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for profile picture of the organizer, optional.\n\nNullable."},"email_verified":{"type":"boolean","description":"Indicator whether the organizer has verified their email."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the organizer record was created.\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the organizer record was last updated.\nISO 8601 date-time string."}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at"],"description":"Event organizers who can create and manage their own events after admin approval. Stores authentication credentials plus contact details and profile information such as full name, phone number, and profile picture URL. Email must be unique. Tracks email verification status and timestamps for creation and updates."},"IEventRegistrationEventOrganizer.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Email address filter for searching event organizers.\n\nNullable."},"full_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full name filter to search event organizers.\nUses trigram search operator in database.\n\nNullable."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Email verified status filter.\n\nNullable."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Phone number filter.\n\nNullable."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination parameter: page number.\n\nNullable."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination parameter: limit of records per page.\n\nNullable."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field name.\nSupported fields: email, full_name, created_at\n\nNullable."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Descending order flag.\ntrue means descending order.\n\nNullable."}},"required":[],"description":"Request parameter object for filtering and paginating event organizers."},"IEventRegistrationEventOrganizer.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Can update the email address of the organizer."},"password_hash":{"type":"string","description":"Password hash value to update the stored password with."},"full_name":{"type":"string","description":"Full name of the organizer."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number of the organizer.\n\nNullable."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile picture URL.\n\nNullable."},"email_verified":{"type":"boolean","description":"Flag indicating if the organizer has verified email."},"updated_at":{"type":"string","format":"date-time","description":"Updated timestamp."}},"required":[],"description":"Updatable properties for an event organizer profile."},"IEventRegistrationAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of the admin user."},"email":{"type":"string","description":"Admin's unique email address for authentication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords."},"full_name":{"type":"string","description":"Admin's full legal or preferred name."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for admin contact."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL of the admin's profile picture."},"email_verified":{"type":"boolean","description":"Flag indicating if the admin's email is verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin user record was last updated."}},"required":["id","email","password_hash","full_name","email_verified","created_at","updated_at"],"description":"Administrator user entity representing system-level admins with global privileges, including authentication credentials and profile information."},"IEventRegistrationAdmin.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Email filter."},"full_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full name filter."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Email verified filter."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Phone number filter."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination: current page."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Pagination: page size limit."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction."}},"required":[],"description":"Request parameter object for filtering and paginating admin users."},"IEventRegistrationAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Admin's unique email address for authentication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; never store plain passwords."},"full_name":{"type":"string","description":"Admin's full legal or preferred name."},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional phone number for admin contact."},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional URL of the admin's profile picture."},"email_verified":{"type":"boolean","description":"Flag indicating if the admin's email is verified."}},"required":[],"description":"Partial update request for administrator user details. All fields are optional to facilitate patch-like updates."},"IEventRegistrationOrganizerRequests":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique request identifier."},"user_id":{"type":"string","format":"uuid","description":"User ID who submitted the request."},"status":{"oneOf":[{"const":"pending","description":"Current status of the request."},{"const":"approved","description":"Current status of the request."},{"const":"rejected","description":"Current status of the request."}],"description":"Current status of the request."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason for requesting organizer status."},"admin_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional administrator comment on the request."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the organizer request."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the request."}},"required":["id","user_id","status","created_at","updated_at"],"description":"Event organizer requests from regular users seeking elevated privileges to create and manage events, including status and administrative comments."},"IEventRegistrationOrganizerRequests.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","minimum":0},{"type":"null"}],"description":"Zero-based page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1},{"type":"null"}],"description":"Maximum records per page; defaults to 100 if omitted."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full-text search filter for requests."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field for sorting results."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting direction, ascending or descending."},"status":{"oneOf":[{"const":"pending"},{"const":"approved"},{"const":"rejected"},{"type":"null"}],"description":"Filter requests by status."}},"required":[],"description":"Search query parameters for event organizer requests including pagination, filtering, and sorting options."},"IEventRegistrationOrganizerRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"Requesting user's ID."},"status":{"oneOf":[{"const":"pending","description":"Current status of the request."},{"const":"approved","description":"Current status of the request."},{"const":"rejected","description":"Current status of the request."}],"description":"Current status of the request."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason provided by the user for the organizer request."},"admin_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin comment on the request."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the request was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the request was last updated."}},"required":["id","user_id","status","created_at","updated_at"],"description":"Event organizer requests submitted by regular users seeking elevated organizer privileges. Records requester's user ID, status, optional reason, optional admin comments, and timestamps."},"IEventRegistrationOrganizerRequest.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Requesting user's ID."},"status":{"oneOf":[{"const":"pending","description":"Status of the request."},{"const":"approved","description":"Status of the request."},{"const":"rejected","description":"Status of the request."}],"description":"Status of the request."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason provided by the user."},"admin_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin comment."}},"required":["user_id","status"],"description":"Request data when a regular user creates a new organizer request."},"IEventRegistrationOrganizerRequest.IUpdate":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User ID is immutable after creation."},"status":{"oneOf":[{"const":"pending","description":"Status of the request."},{"const":"approved","description":"Status of the request."},{"const":"rejected","description":"Status of the request."}],"description":"Status of the request."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason."},"admin_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin comment."}},"required":[],"description":"Update data for an existing organizer request."},"IEventRegistrationEvent.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by name, partial match."},"status":{"oneOf":[{"type":"array","items":{"oneOf":[{"const":"scheduled"},{"const":"cancelled"},{"const":"completed"}]}},{"type":"null"}],"description":"Optional filter by status; supports multiple values."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional date range start to filter events on or after this date."},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional date range end to filter events before or on this date."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional location filter; partial string match."},"event_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional event category id filter."},"page":{"oneOf":[{"type":"number","exclusiveMinimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"number","exclusiveMinimum":0},{"type":"null"}],"description":"Limit of records per page."},"sort":{"oneOf":[{"type":"object","properties":{"field":{"oneOf":[{"const":"name","description":"Sort field: must be one of 'name', 'date', 'capacity', or 'ticket_price'."},{"const":"date","description":"Sort field: must be one of 'name', 'date', 'capacity', or 'ticket_price'."},{"const":"capacity","description":"Sort field: must be one of 'name', 'date', 'capacity', or 'ticket_price'."},{"const":"ticket_price","description":"Sort field: must be one of 'name', 'date', 'capacity', or 'ticket_price'."}],"description":"Sort field: must be one of 'name', 'date', 'capacity', or 'ticket_price'."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending."}},"required":["field","direction"],"description":"Sort field and direction."},{"type":"null"}],"description":"Sort field and direction."}},"required":[],"description":"Search criteria and pagination parameters for filtering events."},"IEventRegistrationEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the event."},"event_category_id":{"type":"string","format":"uuid","description":"Foreign key to the event category."},"name":{"type":"string","description":"The name of the event.\n\nNon-empty string naming the event."},"date":{"type":"string","format":"date-time","description":"The scheduled start date and time of the event in ISO 8601 format."},"location":{"type":"string","description":"The location where the event will take place."},"capacity":{"type":"integer","description":"The maximum number of attendees allowed for the event.\n\nMust be a positive integer."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the event; optional."},{"type":"null"}],"description":"Detailed description of the event; optional."},"ticket_price":{"type":"number","format":"double","description":"The ticket price for entry; zero indicates a free event."},"status":{"oneOf":[{"const":"scheduled","description":"The current status of the event: scheduled, cancelled, or completed.\n\nAllowed values: \"scheduled\", \"cancelled\", \"completed\""},{"const":"cancelled","description":"The current status of the event: scheduled, cancelled, or completed.\n\nAllowed values: \"scheduled\", \"cancelled\", \"completed\""},{"const":"completed","description":"The current status of the event: scheduled, cancelled, or completed.\n\nAllowed values: \"scheduled\", \"cancelled\", \"completed\""}],"description":"The current status of the event: scheduled, cancelled, or completed.\n\nAllowed values: \"scheduled\", \"cancelled\", \"completed\""},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the event record was created, as ISO 8601 string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the event record was last updated, as ISO 8601 string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion; null if the event is active."},{"type":"null"}],"description":"Timestamp for soft deletion; null if the event is active."}},"required":["id","event_category_id","name","date","location","capacity","ticket_price","status","created_at","updated_at"],"description":"Record representing an event in the event registration system, including essential properties for event management and listing."},"IEventRegistrationEvent.ICreate":{"type":"object","properties":{"event_category_id":{"type":"string","format":"uuid","description":"Foreign key to the event category.\n\nMust correspond to an existing event category ID."},"name":{"type":"string","description":"The name of the event.\n\nRequired non-empty string."},"date":{"type":"string","format":"date-time","description":"The scheduled start date and time of the event in ISO 8601 format."},"location":{"type":"string","description":"The location where the event will take place."},"capacity":{"type":"integer","description":"The maximum number of attendees allowed for the event.\n\nMust be a positive integer."},"description":{"oneOf":[{"type":"string","description":"Detailed description of the event; optional."},{"type":"null"}],"description":"Detailed description of the event; optional."},"ticket_price":{"type":"number","format":"double","description":"The ticket price for entry; zero indicates a free event."},"status":{"oneOf":[{"const":"scheduled","description":"The current status of the event.\n\nMust be one of \"scheduled\", \"cancelled\", or \"completed\"."},{"const":"cancelled","description":"The current status of the event.\n\nMust be one of \"scheduled\", \"cancelled\", or \"completed\"."},{"const":"completed","description":"The current status of the event.\n\nMust be one of \"scheduled\", \"cancelled\", or \"completed\"."}],"description":"The current status of the event.\n\nMust be one of \"scheduled\", \"cancelled\", or \"completed\"."}},"required":["event_category_id","name","date","location","capacity","ticket_price","status"],"description":"Request payload for creating a new event with all required fields and optional description."},"IEventRegistrationEvent.IUpdate":{"type":"object","properties":{"event_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Foreign key to event category.\n\nOptional; can be used to change the event's category."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The name of the event.\n\nOptional field for updating."},"date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The scheduled start date and time in ISO 8601 format."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The location of the event."},"capacity":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"The max capacity of attendees."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional event description."},"ticket_price":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"The ticket price."},"status":{"oneOf":[{"const":"scheduled"},{"const":"cancelled"},{"const":"completed"},{"type":"null"}],"description":"Event status: scheduled, cancelled, completed."}},"required":[],"description":"Request payload for updating an existing event with partial fields."},"IEventRegistrationEventCategory.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique name of the event category, such as workshop or seminar."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the category."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the category record was created."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the category record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if active."},"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field name."},"sortDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction."}},"required":[],"description":"Request type for filtering and pagination of event categories."},"IEventRegistrationEventCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the event category to create.\n\nRequired, non-empty string."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description to provide details about the category.\n\nSet to null or provide a string."}},"required":["name"],"description":"Payload to create a new event category.\n\nRequires unique name property to be specified."},"IEventRegistrationEventCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Optional new name for the event category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated description for the category."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp.\nIf specified, marks category as deleted."}},"required":[],"description":"Payload to update existing event category data.\n\nFields are optional; only specified fields will be updated."},"IEventRegistrationEventCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID of the event category"},"name":{"type":"string","description":"Unique name of the event category"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the category"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the category record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the category record was last updated"}},"required":["id","name","created_at","updated_at"],"description":"Summary information for the event category entity including identifier, name, and timestamps for audit tracking."},"IEventRegistrationEventCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the event category.\n\nAuto-generated primary key."},"name":{"type":"string","description":"Unique name of the event category, such as \"workshop\" or \"seminar\".\n\nUsed for category identification and filtering."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the category.\n\nProvides human-readable details to describe the category."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the category was created.\n\nStored as UTC date-time string in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the category was last updated.\n\nStored as UTC date-time string in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if the category is active.\n\nIndicates if the category is deleted logically."}},"required":["id","name","created_at","updated_at"],"description":"Event category entity representing classification for events.\n\nEach category has a unique name and optional description.\nCategories help organize events for filtering and reporting.\n\nManaged by the event registration platform."},"IEventRegistrationEventWaitlist.ICreate":{"type":"object","properties":{"event_id":{"type":"string","format":"uuid","description":"UUID of the event to be waited for.\n\nREQUIRED."},"regular_user_id":{"type":"string","format":"uuid","description":"UUID of the regular user added to the waitlist.\n\nREQUIRED."}},"required":["event_id","regular_user_id"],"description":"Payload to create a new event waitlist entry.\n\nRequires event_id and regular_user_id to associate user and event."},"IEventRegistrationEventWaitlist.IUpdate":{"type":"object","properties":{"event_id":{"oneOf":[{"type":"string","format":"uuid","description":"References the {@link event_registration_events.id} of the event being waited for.\n\nOptional UUID string referencing the event; nullable to allow clearing."},{"type":"null"}],"description":"References the {@link event_registration_events.id} of the event being waited for.\n\nOptional UUID string referencing the event; nullable to allow clearing."},"regular_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"References the {@link event_registration_regular_users.id} of the waitlisted user.\n\nOptional UUID string of the waitlisted user; nullable."},{"type":"null"}],"description":"References the {@link event_registration_regular_users.id} of the waitlisted user.\n\nOptional UUID string of the waitlisted user; nullable."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional ISO 8601 date-time string; nullable."},{"type":"null"}],"description":"Timestamp when this waitlist entry was created, defining FIFO order.\n\nOptional ISO 8601 date-time string; nullable."},"updated_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated.\n\nOptional ISO 8601 date-time string; nullable."},{"type":"null"}],"description":"Timestamp when this waitlist entry was last updated.\n\nOptional ISO 8601 date-time string; nullable."}},"required":[],"description":"Update data for an event registration event waitlist record.\n\nAllows partial updates and nullable clearing of relation and timestamp fields.\n\nAll properties are optional and nullable to support flexible updates."},"IEventRegistrationEventCapacityOverride.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","description":"Page number to retrieve for pagination."},{"type":"null"}],"description":"Page number to retrieve for pagination."},"limit":{"oneOf":[{"type":"number","description":"Limit of records per page. Defaults to 100 if not set."},{"type":"null"}],"description":"Limit of records per page. Defaults to 100 if not set."},"event_id":{"oneOf":[{"type":"string","description":"Optional filter for event_id to narrow results on specific event."},{"type":"null"}],"description":"Optional filter for event_id to narrow results on specific event."},"is_override_enabled":{"oneOf":[{"type":"boolean","description":"Optional filter indicating if override is enabled for the capacity record."},{"type":"null"}],"description":"Optional filter indicating if override is enabled for the capacity record."}},"required":[],"description":"Request for filtering and paginating event capacity override records.\n\nIncludes optional parameters for paging, filtering by event, and override flag status.\n\nAllows efficient query specification for listing capacity override entries."},"IEventRegistrationEventCapacityOverride":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key for the event capacity override record."},"event_id":{"type":"string","format":"uuid","description":"References the {@link event_registration_events.id} of the event for this capacity override."},"is_override_enabled":{"type":"boolean","description":"Flag indicating if automatic capacity adjustments are overridden for this event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this capacity override record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this capacity override record was last updated."}},"required":["id","event_id","is_override_enabled","created_at","updated_at"],"description":"Event capacity override entity specifying manual override settings for automatic capacity adjustments.\n\nManages administrative controls per event to enable or disable dynamic capacity scaling features.\n\nProvides audit timestamps and links to the associated event."},"IEventRegistrationEventCapacityOverride.ICreate":{"type":"object","properties":{"event_id":{"type":"string","format":"uuid","description":"References the {@link event_registration_events.id} of the event for this capacity override."},"is_override_enabled":{"type":"boolean","description":"Flag indicating if automatic capacity adjustments are overridden for this event."}},"required":["event_id","is_override_enabled"],"description":"Request data for creating a new event capacity override.\n\nIncludes the event reference and the override enabled flag.\n\nUsed by admins to customize dynamic capacity behavior per event."},"IEventRegistrationEventCapacityOverrides":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"event_id":{"type":"string","format":"uuid","description":"References the event of this capacity override."},"is_override_enabled":{"type":"boolean","description":"Indicates if automatic capacity adjustments are overridden for this event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this capacity override record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this capacity override record was last updated."}},"required":["id","event_id","is_override_enabled","created_at","updated_at"],"description":"Aggregated event capacity override record allowing administrators to enable or disable automatic capacity adjustments per event.\n\nThis entity links to a specific event via the event_id and tracks the override flag and audit timestamps for creation and update.\n\nThis enables manual control over the dynamic capacity adjustment feature per event.\n"},"IEventRegistrationEventCapacityOverrides.IUpdate":{"type":"object","properties":{"is_override_enabled":{"type":"boolean","description":"Indicates if automatic capacity adjustments are overridden for this event."}},"required":["is_override_enabled"],"description":"Request payload for updating the 'is_override_enabled' status of an event capacity override record."},"IEventRegistrationEventCapacityOverride.IUpdate":{"type":"object","properties":{"is_override_enabled":{"type":"boolean","description":"Indicates if automatic capacity adjustments are overridden for this event."}},"required":["is_override_enabled"],"description":"Request payload for updating the 'is_override_enabled' status of an event capacity override entry. Alias for IEventRegistrationEventCapacityOverrides.IUpdate."},"IEventRegistrationNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","minimum":0},{"type":"null"}],"description":"Page number for paginated notification results."},"limit":{"oneOf":[{"type":"number","minimum":1},{"type":"null"}],"description":"Number of notifications to return per page."},"read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter notifications by their read status."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term to filter notification content or types."}},"description":"Request criteria for filtering and paginating notifications.","required":[]},"IEventRegistrationRegularUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user"},"full_name":{"type":"string","description":"Full legal or preferred name"},"email_verified":{"type":"boolean","description":"Email verification status"}},"required":["id","full_name","email_verified"],"description":"Summary data for regular users suitable for list views.\n\nContains minimal essential public facing information."},"IEventRegistrationEventAttendee.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of attendee record"},"event_id":{"type":"string","format":"uuid","description":"Associated event unique identifier"},"regular_user_id":{"type":"string","format":"uuid","description":"Associated user's unique identifier"},"created_at":{"type":"string","format":"date-time","description":"Created timestamp in ISO 8601 format"}},"required":["id","event_id","regular_user_id","created_at"],"description":"Minimal summary view for event attendees.\n\nIncludes the key identifiers and created timestamp for quick reference."},"IEventRegistrationEventAnalytics":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID"},"event_registration_event_id":{"type":"string","format":"uuid","description":"Belonged event unique identifier"},"total_sign_ups":{"type":"integer","description":"Total confirmed event sign-ups at the snapshot time"},"waitlist_length":{"type":"integer","description":"Number of users currently on the waitlist at the snapshot time"},"popularity_category_workshop":{"type":"integer","description":"Number of sign-ups to events categorized as 'workshop'"},"popularity_category_seminar":{"type":"integer","description":"Number of sign-ups to events categorized as 'seminar'"},"popularity_category_social":{"type":"integer","description":"Number of sign-ups to events categorized as 'social'"},"popularity_category_networking":{"type":"integer","description":"Number of sign-ups to events categorized as 'networking'"},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 Last update timestamp"}},"required":["id","event_registration_event_id","total_sign_ups","waitlist_length","popularity_category_workshop","popularity_category_seminar","popularity_category_social","popularity_category_networking","created_at","updated_at"],"description":"Aggregated analytical data for event registrations.\n\nCaptures total sign-ups, waitlist size, and popularity by event category."},"IEventRegistrationEventAnalytics.IRequest":{"type":"object","properties":{"event_registration_event_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filtering by event ID"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Pagination: Page number"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Pagination: Number of items per page"},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filtering by date greater or equal than created_at"},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filtering by date less than or equal to created_at"}},"required":[],"description":"Request parameters for search and pagination over event analytics data.\n\nSupports filtering by event ID and creation date range, with pagination."},"IEventRegistrationEventWaitlist.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Primary key of the waitlist entry"},"event_id":{"type":"string","description":"Reference to the event associated with the waitlist entry"},"regular_user_id":{"type":"string","description":"Reference to the regular user on the waitlist"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this waitlist entry was last updated"}},"required":["id","event_id","regular_user_id","created_at","updated_at"],"description":"A summary view of waitlist entry representing a regular user waiting for an event spot. Contains essential references for list displays."},"IEventRegistrationNotifications":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key of the notification record"},"user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"ID of the user receiving or triggering this notification. Nullable because some notifications may be system-wide."},"type":{"type":"string","description":"Type of notification, e.g., registration confirmation, waitlist promotion, event schedule change, capacity adjustment"},"content":{"type":"string","description":"Detailed notification content describing the event or action"},"read":{"type":"boolean","description":"Flag indicating whether the notification has been read by the user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated"},"deleted_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Timestamp when the notification was soft deleted; null if not deleted"}},"required":["id","type","content","read","created_at","updated_at"],"description":"Represents a notification record linked to a user or system-wide. Contains type, content, read status, timestamps, and deletion flag."},"IEventRegistrationEventOrganizer.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the event organizer"},"email":{"type":"string","description":"Unique email address of the organizer"},"full_name":{"type":"string","description":"Full name of the event organizer"},"email_verified":{"type":"boolean","description":"Flag indicating if the organizer's email is verified"},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Phone number of the organizer (optional)"},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL of the profile picture of the event organizer (optional)"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the event organizer record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the event organizer record was last updated"}},"required":["id","email","full_name","email_verified","created_at","updated_at"],"description":"A summary view of event organizer containing core identification and contact information, with verification status and timestamps."},"IEventRegistrationAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the admin user"},"email":{"type":"string","description":"Unique email address of the admin user"},"full_name":{"type":"string","description":"Full name of the administrator"},"email_verified":{"type":"boolean","description":"Email verification status of the admin"},"phone_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Phone number of the admin user (optional)"},"profile_picture_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Profile picture URL of the admin user (optional)"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin record was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the admin record was last updated"}},"required":["id","email","full_name","email_verified","created_at","updated_at"],"description":"Summary information for an administrator user, including identification, contact, verification status, and audit timestamps."},"IEventRegistrationOrganizerRequests.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID of the organizer request"},"user_id":{"type":"string","format":"uuid","description":"Requesting user's UUID"},"status":{"oneOf":[{"const":"pending","description":"Current status of the organizer request: 'pending', 'approved', or 'rejected'."},{"const":"approved","description":"Current status of the organizer request: 'pending', 'approved', or 'rejected'."},{"const":"rejected","description":"Current status of the organizer request: 'pending', 'approved', or 'rejected'."}],"description":"Current status of the organizer request: 'pending', 'approved', or 'rejected'."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reason provided by the user for requesting organizer status."},"admin_comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin comment on the request, e.g., reasons for approval or rejection."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the request was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the request was last updated."}},"required":["id","user_id","status","created_at","updated_at"],"description":"Summary information about an event organizer request including user, status, reasons, and admin comments.\n\nThis summary type includes all essential audit and status details needed for listing and overview in management interfaces."},"IEventRegistrationEvent.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the event"},"event_category_id":{"type":"string","format":"uuid","description":"Foreign key referring to the category the event belongs to"},"name":{"type":"string","description":"The name of the event"},"date":{"type":"string","format":"date-time","description":"The scheduled start date and time of the event in ISO 8601 format."},"location":{"type":"string","description":"Location where the event will take place"},"capacity":{"type":"integer","description":"The maximum number of attendees allowed for the event"},"ticket_price":{"type":"number","description":"The ticket price for entry; zero indicates a free event"},"status":{"oneOf":[{"const":"scheduled","description":"The current status of the event"},{"const":"cancelled","description":"The current status of the event"},{"const":"completed","description":"The current status of the event"}],"description":"The current status of the event"}},"required":["id","event_category_id","name","date","location","capacity","ticket_price","status"],"description":"A summary view of the event entity presenting the core identifying and scheduling data. Provides enough detail for event listings and overviews."},"IEventRegistrationNotification.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID of the notification"},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Nullable reference to the user receiving or triggering the notification"},"type":{"type":"string","description":"Type of notification, e.g., registration confirmation, waitlist promotion"},"content":{"type":"string","description":"Detailed notification content describing the event or action"},"read":{"type":"boolean","description":"Flag indicating whether the notification has been read"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was soft deleted; null if not deleted"}},"required":["id","type","content","read","created_at","updated_at"],"description":"Summary notification entity containing essential details for displaying notifications in lists. Includes read status and soft deletion tracking."},"IEventRegistrationEventAnalytics.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the event analytics record.\n\nThis is the primary key as UUID string."},"event_registration_event_id":{"type":"string","description":"The event ID associated with this analytics summary record.\n\nReferences the event_registration_events.id field."},"total_sign_ups":{"type":"integer","description":"Total confirmed sign-ups for the event at the snapshot time.\n\nInteger count of attendees."},"waitlist_length":{"type":"integer","description":"Number of users currently on the waitlist.\n\nInteger count reflecting waitlist length."},"popularity_category_workshop":{"type":"integer","description":"Number of sign-ups for events categorized as 'workshop'."},"popularity_category_seminar":{"type":"integer","description":"Number of sign-ups for events categorized as 'seminar'."},"popularity_category_social":{"type":"integer","description":"Number of sign-ups for events categorized as 'social'."},"popularity_category_networking":{"type":"integer","description":"Number of sign-ups for events categorized as 'networking'."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nStored as ISO 8601 string in UTC time."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nStored as ISO 8601 string in UTC time."}},"required":["id","event_registration_event_id","total_sign_ups","waitlist_length","popularity_category_workshop","popularity_category_seminar","popularity_category_social","popularity_category_networking","created_at","updated_at"],"description":"Summary of event analytics including total sign-ups, waitlist length, and popularity by event category.\n\nThis entity provides a snapshot of key metrics for an event, supporting reporting and dashboard summaries."}}}}