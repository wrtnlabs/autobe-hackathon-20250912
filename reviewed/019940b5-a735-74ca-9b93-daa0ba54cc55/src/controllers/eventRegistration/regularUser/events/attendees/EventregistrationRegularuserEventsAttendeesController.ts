import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationRegularUserEventsEventIdAttendees } from "../../../../../providers/posteventRegistrationRegularUserEventsEventIdAttendees";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { puteventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId } from "../../../../../providers/puteventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId";
import { deleteeventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId } from "../../../../../providers/deleteeventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId";

import { IEventRegistrationEventAttendee } from "../../../../../api/structures/IEventRegistrationEventAttendee";

@Controller("/eventRegistration/regularUser/events/:eventId/attendees")
export class EventregistrationRegularuserEventsAttendeesController {
  /**
   * Add a regular user as an event attendee.
   *
   * Create a new event attendee by adding a regular user registration to the
   * event identified by eventId. This operation ensures the user is added as a
   * confirmed attendee for the specified event.
   *
   * Security and authorization require the caller to have the 'regularUser'
   * role. Duplicate registrations are prevented by the unique constraint on
   * (event_id, regular_user_id).
   *
   * This operation interacts with the event_registration_event_attendees table
   * from the Prisma schema and requires appropriate event and user
   * identifiers.
   *
   * Clients must provide the regular_user_id in the request body within the
   * ICreate structure to indicate which user is being registered as an
   * attendee.
   *
   * Errors due to duplicate entries, invalid event or user IDs, or insufficient
   * permissions must be handled appropriately by the API implementation.
   *
   * @param connection
   * @param eventId Unique identifier of the event
   * @param body Information needed to create an event attendee record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.ICreate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await posteventRegistrationRegularUserEventsEventIdAttendees({
        regularUser,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an event attendee's information.
   *
   * Update an existing event attendee record specified by eventId and
   * eventAttendeeId. Replaces attendee information according to the update
   * payload.
   *
   * Authorization ensures only authorized users with 'regularUser' role can
   * perform updates.
   *
   * This operation affects the event_registration_event_attendees table,
   * maintaining consistency with event and regular user foreign key
   * references.
   *
   * Validation confirms existence of the attendee and correct event
   * association.
   *
   * The operation primarily updates mutable fields such as timestamps for audit
   * and administrative purposes.
   *
   * Related operations include creating new attendees and deleting attendee
   * records.
   *
   * @param connection
   * @param eventId Unique identifier of the event
   * @param eventAttendeeId Unique identifier of the event attendee
   * @param body Update data for the event attendee record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventAttendeeId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IUpdate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await puteventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId(
        {
          regularUser,
          eventId,
          eventAttendeeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event attendee record identified by eventId and eventAttendeeId.
   * This operation performs permanent deletion.
   *
   * Only authorized regular users may execute this operation.
   *
   * The deletion affects the event_registration_event_attendees table and
   * impacts event capacity and waitlist promotion logic.
   *
   * No request body is accepted.
   *
   * Related operations are create and update for event attendee management.
   *
   * @param connection
   * @param eventId Unique identifier of the event
   * @param eventAttendeeId Unique identifier of the event attendee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventAttendeeId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationRegularUserEventsEventIdAttendeesEventAttendeeId(
        {
          regularUser,
          eventId,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
