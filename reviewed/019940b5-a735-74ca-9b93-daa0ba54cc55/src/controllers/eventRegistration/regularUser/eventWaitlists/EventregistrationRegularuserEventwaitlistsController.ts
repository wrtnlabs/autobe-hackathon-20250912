import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patcheventRegistrationRegularUserEventWaitlists } from "../../../../providers/patcheventRegistrationRegularUserEventWaitlists";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IPageIEventRegistrationEventWaitlist } from "../../../../api/structures/IPageIEventRegistrationEventWaitlist";
import { IEventRegistrationEventWaitlist } from "../../../../api/structures/IEventRegistrationEventWaitlist";

@Controller("/eventRegistration/regularUser/eventWaitlists")
export class EventregistrationRegularuserEventwaitlistsController {
  /**
   * Search and retrieve event waitlisted users.
   *
   * Search and retrieve a paginated list of event waitlisted users with support
   * for filtering, sorting, and pagination.
   *
   * Authorization requires 'regularUser' role or higher. Typically utilized by
   * event organizers and administrators.
   *
   * This operation corresponds to querying the
   * event_registration_event_waitlists table.
   *
   * Filters enable fine-grained retrieval of waitlists for specific events and
   * users.
   *
   * The response wraps event waitlist summary data in a paginated format to
   * optimize client consumption.
   *
   * @param connection
   * @param body Search filters and pagination options for event waitlists
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IRequest,
  ): Promise<IPageIEventRegistrationEventWaitlist.ISummary> {
    try {
      return await patcheventRegistrationRegularUserEventWaitlists({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
