import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { posteventRegistrationRegularUserOrganizerRequests } from "../../../../providers/posteventRegistrationRegularUserOrganizerRequests";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IEventRegistrationOrganizerRequest } from "../../../../api/structures/IEventRegistrationOrganizerRequest";

@Controller("/eventRegistration/regularUser/organizerRequests")
export class EventregistrationRegularuserOrganizerrequestsController {
  /**
   * Submit an organizer request by a regular user for admin approval.
   *
   * Create a new organizer request record where a regular user requests
   * elevated privileges to create and manage events. The status is set as
   * 'pending' upon creation and awaits admin approval.
   *
   * This operation securely records the organizer request in the database and
   * enforces uniqueness per user. The user must be authenticated as a regular
   * user.
   *
   * When the request is approved or rejected, the admin will update the status
   * via a separate operation.
   *
   * Errors are returned if the user already has a pending request or is
   * unauthorized.
   *
   * @param connection
   * @param body Data required to create an organizer request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createOrganizerRequest(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IEventRegistrationOrganizerRequest.ICreate,
  ): Promise<IEventRegistrationOrganizerRequest> {
    try {
      return await posteventRegistrationRegularUserOrganizerRequests({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
