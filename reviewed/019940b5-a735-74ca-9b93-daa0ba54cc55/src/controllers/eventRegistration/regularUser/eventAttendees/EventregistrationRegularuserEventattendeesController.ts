import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationRegularUserEventAttendees } from "../../../../providers/posteventRegistrationRegularUserEventAttendees";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { deleteeventRegistrationRegularUserEventAttendeesEventAttendeeId } from "../../../../providers/deleteeventRegistrationRegularUserEventAttendeesEventAttendeeId";

import { IEventRegistrationEventAttendee } from "../../../../api/structures/IEventRegistrationEventAttendee";

@Controller("/eventRegistration/regularUser/eventAttendees")
export class EventregistrationRegularuserEventattendeesController {
  /**
   * Register a user as an event attendee. This inserts a new record into
   * event_registration_event_attendees linking the user to the event.
   *
   * The user must have verified their email, and the event must have capacity.
   *
   * Authorized roles: regularUser.
   *
   * Returns the created attendee information.
   *
   * @param connection
   * @param body Information needed to register a user as an event attendee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IEventRegistrationEventAttendee.ICreate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await posteventRegistrationRegularUserEventAttendees({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event attendee registration by ID. This is a permanent deletion
   * removing the attendee's event registration record.
   *
   * Authorized roles for this operation include regularUser (the attendee),
   * admin, and eventOrganizer.
   *
   * There is no request or response body.
   *
   * This operation does not perform soft deletion.
   *
   * @param connection
   * @param eventAttendeeId Unique identifier of the event attendee registration
   *   to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventAttendeeId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationRegularUserEventAttendeesEventAttendeeId(
        {
          regularUser,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
