import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { geteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId } from "../../../../providers/geteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { puteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId } from "../../../../providers/puteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId";
import { deleteeventRegistrationEventOrganizerEventWaitlistsEventWaitlistId } from "../../../../providers/deleteeventRegistrationEventOrganizerEventWaitlistsEventWaitlistId";
import { posteventRegistrationEventOrganizerEventWaitlists } from "../../../../providers/posteventRegistrationEventOrganizerEventWaitlists";

import { IEventRegistrationEventWaitlist } from "../../../../api/structures/IEventRegistrationEventWaitlist";

@Controller("/eventRegistration/eventOrganizer/eventWaitlists")
export class EventregistrationEventorganizerEventwaitlistsController {
  /**
   * Retrieve details of a specific event waitlist entry.
   *
   * Retrieve a specific event waitlist entry by its unique ID. This operation
   * returns detailed information including the associated event ID, the regular
   * user ID of the waitlisted user, and timestamps indicating when the entry
   * was created and last updated.
   *
   * Security considerations include ensuring only authorized users with
   * appropriate permissions can access waitlist details, typically event
   * organizers or admins. This operation interacts directly with the
   * event_registration_event_waitlists table.
   *
   * The API expects the waitlist entry ID as a path parameter and returns the
   * detailed waitlist entry data. If the specified entry does not exist, an
   * error should be returned.
   *
   * No request body is required as this is a retrieval operation.
   *
   * @param connection
   * @param eventWaitlistId Unique identifier of the target event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventWaitlistId")
  public async at(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await geteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId(
        {
          eventOrganizer,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing event waitlist entry identified by its unique ID. The
   * client can modify event association, user association, or update audit
   * fields as needed.
   *
   * This operation enforces uniqueness of event-user combinations and maintains
   * data consistency.
   *
   * Authorization is restricted to admin and event organizer roles.
   *
   * The response returns the updated waitlist entry data.
   *
   * @param connection
   * @param eventWaitlistId Unique identifier of the event waitlist entry to be
   *   updated
   * @param body Updated information for the event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventWaitlistId")
  public async update(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IUpdate,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await puteventRegistrationEventOrganizerEventWaitlistsEventWaitlistId(
        {
          eventOrganizer,
          eventWaitlistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove an event waitlist entry.
   *
   * Delete an event waitlist entry by its unique ID, removing the user from the
   * waitlist for the event. This is a hard delete operation.
   *
   * Authorization is limited to event organizers and admins.
   *
   * No request body is required, and the operation does not return any response
   * body on success.
   *
   * @param connection
   * @param eventWaitlistId Unique identifier of the event waitlist entry to
   *   remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventWaitlistId")
  public async erase(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationEventOrganizerEventWaitlistsEventWaitlistId(
        {
          eventOrganizer,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new event waitlist entry linking a regular user to an event
   * waitlist. Input must specify the event and the user to be waitlisted. The
   * system ensures that the user is not already registered as an attendee or on
   * the waitlist. This action increments waitlist count and triggers
   * notifications.
   *
   * Only users with admin or event organizer roles are authorized to perform
   * this operation.
   *
   * The client provides the event ID and regular user ID. The created entry
   * with timestamps is returned upon success.
   *
   * @param connection
   * @param body Information needed to create a new event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.ICreate,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await posteventRegistrationEventOrganizerEventWaitlists({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
