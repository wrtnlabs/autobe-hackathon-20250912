import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puteventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId } from "../../../../../providers/puteventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId";
import { EventOrganizerAuth } from "../../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../../decorators/payload/EventOrganizerPayload";
import { deleteeventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId } from "../../../../../providers/deleteeventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId";

import { IEventRegistrationEventAttendee } from "../../../../../api/structures/IEventRegistrationEventAttendee";

@Controller(
  "/eventRegistration/eventOrganizer/regularUsers/:regularUserId/attendees/:eventAttendeeId",
)
export class EventregistrationEventorganizerRegularusersAttendeesController {
  /**
   * Update an event attendee record for a regular user.
   *
   * This endpoint allows updating an existing event attendee record for a
   * regular user. The attendee represents the confirmed registration of the
   * user to an event in the system.
   *
   * The update operation requires both the regularUserId and eventAttendeeId
   * path parameters to locate and identify the specific event attendee record.
   *
   * The authorized roles that can perform this operation include regularUser
   * (owner), eventOrganizer (event manager), and admin.
   *
   * The request body must include the properties defined in
   * IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted
   * attendee attributes while preserving audit and immutable fields.
   *
   * Successful operation returns the updated event attendee object reflecting
   * the new registration details.
   *
   * Errors are raised if the user or attendee record does not exist or if
   * authorization fails.
   *
   * This operation is crucial for managing attendee information, maintaining
   * attendance accuracy, and supporting event management workflows.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventAttendeeId Unique identifier of the event attendee record
   * @param body Event attendee data for update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IUpdate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await puteventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId(
        {
          eventOrganizer,
          regularUserId,
          eventAttendeeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event attendee record for a regular user.
   *
   * This API operation permanently deletes the event attendee record for a
   * given regularUserId and eventAttendeeId. The record represents confirmed
   * attendance of the user for the event.
   *
   * Only authorized roles such as regularUser, eventOrganizer, and admin can
   * perform this deletion.
   *
   * No request body is required. Upon success, the response contains no
   * content.
   *
   * This endpoint enforces business rules for cancellation and attendance
   * management.
   *
   * Errors are returned if the record does not exist or the caller lacks the
   * necessary permissions.
   *
   * Deleting an attendee may trigger waitlist promotions as handled outside
   * this operation.
   *
   * This ensures event attendance metrics remain consistent and accurate.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventAttendeeId Unique identifier of the event attendee record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationEventOrganizerRegularUsersRegularUserIdAttendeesEventAttendeeId(
        {
          eventOrganizer,
          regularUserId,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
