import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationEventOrganizerEvents } from "../../../../providers/posteventRegistrationEventOrganizerEvents";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { puteventRegistrationEventOrganizerEventsEventId } from "../../../../providers/puteventRegistrationEventOrganizerEventsEventId";

import { IEventRegistrationEvent } from "../../../../api/structures/IEventRegistrationEvent";

@Controller("/eventRegistration/eventOrganizer/events")
export class EventregistrationEventorganizerEventsController {
  /**
   * Create a new event with provided details including category, scheduled
   * date, location, capacity, optional description, ticket price, and event
   * status.
   *
   * Only users with eventOrganizer or admin roles may create events.
   *
   * The request body must include valid values respecting validation
   * constraints from the Prisma schema such as positive capacity and valid
   * category reference.
   *
   * On success, returns the created event entity including generated UUID and
   * timestamps.
   *
   * Clients use this to add new events to the system which can then be browsed
   * and signed up for by regular users.
   *
   * The method used is POST since this operation creates a new resource.
   *
   * @param connection
   * @param body New event creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEvent.ICreate,
  ): Promise<IEventRegistrationEvent> {
    try {
      return await posteventRegistrationEventOrganizerEvents({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing event by eventId.
   *
   * Update an existing event identified by eventId with new property values
   * including category, name, date, location, capacity, optional description,
   * ticket price, and status.
   *
   * Only eventOrganizers owning the event or admins may update events.
   *
   * Request body must comply with Prisma schema validation constraints.
   *
   * Returns the updated event entity on success.
   *
   * Intended for clients modifying event details such as rescheduling or
   * capacity adjustments.
   *
   * Method used is PUT as this constitutes full replacement of the resource's
   * modifiable attributes.
   *
   * @param connection
   * @param eventId Unique identifier of the event to update
   * @param body Updated event data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventId")
  public async update(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEvent.IUpdate,
  ): Promise<IEventRegistrationEvent> {
    try {
      return await puteventRegistrationEventOrganizerEventsEventId({
        eventOrganizer,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
