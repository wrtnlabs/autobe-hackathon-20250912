import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEventOrganizerEventsEventIdAttendees } from "../../../../../providers/patcheventRegistrationEventOrganizerEventsEventIdAttendees";
import { EventOrganizerAuth } from "../../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../../decorators/payload/EventOrganizerPayload";
import { geteventRegistrationEventOrganizerEventsEventIdAttendeesEventAttendeeId } from "../../../../../providers/geteventRegistrationEventOrganizerEventsEventIdAttendeesEventAttendeeId";

import { IPageIEventRegistrationEventAttendee } from "../../../../../api/structures/IPageIEventRegistrationEventAttendee";
import { IEventRegistrationEventAttendee } from "../../../../../api/structures/IEventRegistrationEventAttendee";

@Controller("/eventRegistration/eventOrganizer/events/:eventId/attendees")
export class EventregistrationEventorganizerEventsAttendeesController {
  /**
   * List attendees for a specific event.
   *
   * Lists attendees registered for the event specified by 'eventId'. Supports
   * pagination, filtering, and sorting parameters defined in the request body.
   *
   * Only authorized roles such as event organizers and admins can access this
   * data. The response includes a pageable summary of attendees including
   * essential details needed for attendee management.
   *
   * This facilitates event management tasks such as attendance tracking and
   * reporting.
   *
   * @param connection
   * @param eventId Unique identifier of the event to get attendees for
   * @param body Search and pagination criteria for event attendees
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IRequest,
  ): Promise<IPageIEventRegistrationEventAttendee.ISummary> {
    try {
      return await patcheventRegistrationEventOrganizerEventsEventIdAttendees({
        eventOrganizer,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get event attendee details by ID.
   *
   * Retrieves detailed information about an event attendee identified by the
   * path parameter 'eventAttendeeId'.
   *
   * Authorized users such as event organizers and admins can use this endpoint
   * to view full attendee details including association with event and user
   * data.
   *
   * The response includes all data fields defined in the
   * event_registration_event_attendees model pinpointing one specific attendee
   * record.
   *
   * @param connection
   * @param eventAttendeeId Unique identifier of the event attendee to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventAttendeeId")
  public async at(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventId")
    eventId: string,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await geteventRegistrationEventOrganizerEventsEventIdAttendeesEventAttendeeId(
        {
          eventOrganizer,
          eventId,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
