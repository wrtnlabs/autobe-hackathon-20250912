import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEventOrganizerOrganizerRequests } from "../../../../providers/patcheventRegistrationEventOrganizerOrganizerRequests";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { geteventRegistrationEventOrganizerOrganizerRequestsOrganizerRequestId } from "../../../../providers/geteventRegistrationEventOrganizerOrganizerRequestsOrganizerRequestId";

import { IPageIEventRegistrationOrganizerRequests } from "../../../../api/structures/IPageIEventRegistrationOrganizerRequests";
import { IEventRegistrationOrganizerRequests } from "../../../../api/structures/IEventRegistrationOrganizerRequests";

@Controller("/eventRegistration/eventOrganizer/organizerRequests")
export class EventregistrationEventorganizerOrganizerrequestsController {
  /**
   * Search and list event organizer requests.
   *
   * Retrieve a paginated, filtered, and sorted list of event organizer
   * requests.
   *
   * This operation allows admins and event organizers to query pending,
   * approved, or rejected organizer status requests submitted by regular users.
   * Filtering by status, search terms, and pagination enable efficient
   * management.
   *
   * The underlying entity is event_registration_organizer_requests with fields
   * including request ID, user ID, status, reason, and admin comment.
   *
   * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
   *
   * Typical usage includes admin review workflows for approving or rejecting
   * organizer requests.
   *
   * Search and filter criteria are provided in the request body, with results
   * paginated in the response.
   *
   * @param connection
   * @param body Organizer request search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchOrganizerRequests(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationOrganizerRequests.IRequest,
  ): Promise<IPageIEventRegistrationOrganizerRequests.ISummary> {
    try {
      return await patcheventRegistrationEventOrganizerOrganizerRequests({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get event organizer request details by ID.
   *
   * Retrieve detailed information for a single event organizer request by ID.
   *
   * This operation is used by admins and event organizers to view the full
   * details of a specific organizer status request submitted by a regular
   * user.
   *
   * The resource identifier is the organizerRequestId path parameter.
   *
   * The response includes all relevant fields such as request status, reason
   * given, and admin comments.
   *
   * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
   *
   * @param connection
   * @param organizerRequestId Unique identifier of the organizer request to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizerRequestId")
  public async atOrganizerRequest(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("organizerRequestId")
    organizerRequestId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationOrganizerRequests> {
    try {
      return await geteventRegistrationEventOrganizerOrganizerRequestsOrganizerRequestId(
        {
          eventOrganizer,
          organizerRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
