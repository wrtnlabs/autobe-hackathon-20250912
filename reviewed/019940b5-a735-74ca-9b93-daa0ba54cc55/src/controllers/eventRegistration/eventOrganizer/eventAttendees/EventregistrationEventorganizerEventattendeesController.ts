import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEventOrganizerEventAttendees } from "../../../../providers/patcheventRegistrationEventOrganizerEventAttendees";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { geteventRegistrationEventOrganizerEventAttendeesEventAttendeeId } from "../../../../providers/geteventRegistrationEventOrganizerEventAttendeesEventAttendeeId";
import { deleteeventRegistrationEventOrganizerEventAttendeesEventAttendeeId } from "../../../../providers/deleteeventRegistrationEventOrganizerEventAttendeesEventAttendeeId";

import { IPageIEventRegistrationEventAttendee } from "../../../../api/structures/IPageIEventRegistrationEventAttendee";
import { IEventRegistrationEventAttendee } from "../../../../api/structures/IEventRegistrationEventAttendee";

@Controller("/eventRegistration/eventOrganizer/eventAttendees")
export class EventregistrationEventorganizerEventattendeesController {
  /**
   * Search and retrieve a filtered, paginated list of event attendees.
   *
   * Retrieve a filtered and paginated list of event attendees. This operation
   * supports complex queries for event attendee data from the
   * event_registration_event_attendees table, which records confirmed users
   * registered for events. It includes references to associated events and
   * regular users, with creation and update timestamps.
   *
   * Access to this operation requires roles of admin or eventOrganizer,
   * reflecting their need to review attendees. Proper authorization checks are
   * mandatory to enforce data privacy.
   *
   * The response provides summarized attendee data conducive for management
   * dashboards or listings.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for event attendees
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IRequest,
  ): Promise<IPageIEventRegistrationEventAttendee.ISummary> {
    try {
      return await patcheventRegistrationEventOrganizerEventAttendees({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific event attendee by ID.
   *
   * Retrieve detailed information of a specific event attendee identified by
   * eventAttendeeId. The record includes event and user associations from
   * event_registration_event_attendees.
   *
   * Authorization is limited to admin and eventOrganizer roles to protect
   * sensitive registration details.
   *
   * Returns full attendee data or an error if not found.
   *
   * @param connection
   * @param eventAttendeeId Unique identifier of the event attendee record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventAttendeeId")
  public async at(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await geteventRegistrationEventOrganizerEventAttendeesEventAttendeeId(
        {
          eventOrganizer,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event attendee registration by ID. This is a permanent deletion
   * removing the attendee's event registration record.
   *
   * Authorized roles for this operation include regularUser (the attendee),
   * admin, and eventOrganizer.
   *
   * There is no request or response body.
   *
   * This operation does not perform soft deletion.
   *
   * @param connection
   * @param eventAttendeeId Unique identifier of the event attendee registration
   *   to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventAttendeeId")
  public async erase(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationEventOrganizerEventAttendeesEventAttendeeId(
        {
          eventOrganizer,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
