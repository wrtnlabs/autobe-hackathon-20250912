import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationAdminOrganizerRequests } from "../../../../providers/patcheventRegistrationAdminOrganizerRequests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { geteventRegistrationAdminOrganizerRequestsOrganizerRequestId } from "../../../../providers/geteventRegistrationAdminOrganizerRequestsOrganizerRequestId";
import { puteventRegistrationAdminOrganizerRequestsOrganizerRequestId } from "../../../../providers/puteventRegistrationAdminOrganizerRequestsOrganizerRequestId";
import { deleteeventRegistrationAdminOrganizerRequestsOrganizerRequestId } from "../../../../providers/deleteeventRegistrationAdminOrganizerRequestsOrganizerRequestId";

import { IPageIEventRegistrationOrganizerRequests } from "../../../../api/structures/IPageIEventRegistrationOrganizerRequests";
import { IEventRegistrationOrganizerRequests } from "../../../../api/structures/IEventRegistrationOrganizerRequests";
import { IEventRegistrationOrganizerRequest } from "../../../../api/structures/IEventRegistrationOrganizerRequest";

@Controller("/eventRegistration/admin/organizerRequests")
export class EventregistrationAdminOrganizerrequestsController {
  /**
   * Search and list event organizer requests.
   *
   * Retrieve a paginated, filtered, and sorted list of event organizer
   * requests.
   *
   * This operation allows admins and event organizers to query pending,
   * approved, or rejected organizer status requests submitted by regular users.
   * Filtering by status, search terms, and pagination enable efficient
   * management.
   *
   * The underlying entity is event_registration_organizer_requests with fields
   * including request ID, user ID, status, reason, and admin comment.
   *
   * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
   *
   * Typical usage includes admin review workflows for approving or rejecting
   * organizer requests.
   *
   * Search and filter criteria are provided in the request body, with results
   * paginated in the response.
   *
   * @param connection
   * @param body Organizer request search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchOrganizerRequests(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationOrganizerRequests.IRequest,
  ): Promise<IPageIEventRegistrationOrganizerRequests.ISummary> {
    try {
      return await patcheventRegistrationAdminOrganizerRequests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get event organizer request details by ID.
   *
   * Retrieve detailed information for a single event organizer request by ID.
   *
   * This operation is used by admins and event organizers to view the full
   * details of a specific organizer status request submitted by a regular
   * user.
   *
   * The resource identifier is the organizerRequestId path parameter.
   *
   * The response includes all relevant fields such as request status, reason
   * given, and admin comments.
   *
   * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
   *
   * @param connection
   * @param organizerRequestId Unique identifier of the organizer request to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizerRequestId")
  public async atOrganizerRequest(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("organizerRequestId")
    organizerRequestId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationOrganizerRequests> {
    try {
      return await geteventRegistrationAdminOrganizerRequestsOrganizerRequestId(
        {
          admin,
          organizerRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin updates organizer request status and comment.
   *
   * Update an organizer request status and admin comment. Restricted to admin
   * users.
   *
   * Allows changing the status to 'pending', 'approved', or 'rejected' as per
   * the business rules.
   *
   * Admin users must be authenticated and authorized to perform this action.
   *
   * @param connection
   * @param organizerRequestId Identifier of the organizer request to update
   * @param body Fields to update on the organizer request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":organizerRequestId")
  public async updateOrganizerRequest(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("organizerRequestId")
    organizerRequestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationOrganizerRequest.IUpdate,
  ): Promise<IEventRegistrationOrganizerRequest> {
    try {
      return await puteventRegistrationAdminOrganizerRequestsOrganizerRequestId(
        {
          admin,
          organizerRequestId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an organizer request (hard delete).
   *
   * Permanently delete an organizer request by its unique identifier. Requires
   * admin authorization.
   *
   * This removes the record completely from the database. No request or
   * response body required.
   *
   * Unauthorized users cannot perform this operation.
   *
   * @param connection
   * @param organizerRequestId Unique identifier for the organizer request to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":organizerRequestId")
  public async eraseOrganizerRequest(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("organizerRequestId")
    organizerRequestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminOrganizerRequestsOrganizerRequestId(
        {
          admin,
          organizerRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
