import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminRegularUsersRegularUserIdNotifications } from "../../../../../providers/posteventRegistrationAdminRegularUsersRegularUserIdNotifications";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { puteventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId } from "../../../../../providers/puteventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId";
import { deleteeventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId } from "../../../../../providers/deleteeventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId";

import { IEventRegistrationNotification } from "../../../../../api/structures/IEventRegistrationNotification";

@Controller(
  "/eventRegistration/admin/regularUsers/:regularUserId/notifications",
)
export class EventregistrationAdminRegularusersNotificationsController {
  /**
   * Create a notification for a regular user.
   *
   * Create a new notification for a regular user. The notification must include
   * type, content, and other relevant details. This operation is typically used
   * by system processes or administrators to inform users about registration
   * confirmations, waitlist promotions, event changes, and other important
   * updates.
   *
   * Security concerns require that only authorized roles can create
   * notifications to prevent spam or malicious entries.
   *
   * This operation saves the notification in the
   * 'event_registration_notifications' table, linking it to the specified
   * regular user.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param body Notification creation details for the regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationNotification.ICreate,
  ): Promise<IEventRegistrationNotification> {
    try {
      return await posteventRegistrationAdminRegularUsersRegularUserIdNotifications(
        {
          admin,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a notification of a regular user.
   *
   * Update an existing notification of a regular user identified by
   * notification ID. Common updates include changing the read status or
   * modifying notification content or type.
   *
   * The operation ensures the notification belongs to the specified user and
   * enforces authorization checks.
   *
   * The 'event_registration_notifications' table stores the notification
   * details linked to the regular users. Update operations are critical for
   * notification lifecycle management such as marking messages read or
   * correcting content.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param notificationId Unique identifier of the target notification
   * @param body Notification update data for the regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":notificationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationNotification.IUpdate,
  ): Promise<IEventRegistrationNotification> {
    try {
      return await puteventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId(
        {
          admin,
          regularUserId,
          notificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification of a regular user by notification ID. This operation
   * permanently removes the notification record from the system.
   *
   * Authorization is required to ensure that only admins or authorized users
   * can delete notifications, preventing accidental or malicious data loss.
   *
   * The underlying database is 'event_registration_notifications' where
   * notifications are linked to users or as system messages. After deletion,
   * the notification will no longer be accessible or retrievable.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param notificationId Unique identifier of the target notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":notificationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminRegularUsersRegularUserIdNotificationsNotificationId(
        {
          admin,
          regularUserId,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
