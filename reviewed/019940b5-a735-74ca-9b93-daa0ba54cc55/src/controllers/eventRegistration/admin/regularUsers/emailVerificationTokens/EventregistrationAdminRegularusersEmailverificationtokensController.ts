import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { geteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId } from "../../../../../providers/geteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { puteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId } from "../../../../../providers/puteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId";
import { deleteeventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId } from "../../../../../providers/deleteeventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId";
import { posteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens } from "../../../../../providers/posteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens";
import { patcheventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens } from "../../../../../providers/patcheventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens";

import { IEventRegistrationEmailVerificationToken } from "../../../../../api/structures/IEventRegistrationEmailVerificationToken";
import { IPageIEventRegistrationEmailVerificationToken } from "../../../../../api/structures/IPageIEventRegistrationEmailVerificationToken";

@Controller(
  "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens",
)
export class EventregistrationAdminRegularusersEmailverificationtokensController {
  /**
   * Retrieve a specific email verification token by its ID for a regular user.
   *
   * Endpoint to get detailed information of a specific email verification token
   * belonging to a regular user.
   *
   * Access is typically restricted to admins or authorized system services.
   *
   * This aids in token lifecycle management and auditing.
   *
   * Errors must be handled if the token or user is not found.
   *
   * @param connection
   * @param regularUserId ID of the regular user owning the token
   * @param emailVerificationTokenId ID of the email verification token to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":emailVerificationTokenId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("emailVerificationTokenId")
    emailVerificationTokenId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEmailVerificationToken> {
    try {
      return await geteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId(
        {
          admin,
          regularUserId,
          emailVerificationTokenId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an email verification token for a specific regular user.
   *
   * This endpoint enables modification of an existing email verification token
   * record for a given regular user.
   *
   * The table event_registration_email_verification_tokens stores tokens for
   * verifying user emails, linked by the user's ID.
   *
   * Security and authorization roles must ensure that only authorized parties
   * can update verification tokens.
   *
   * Updating tokens may occur for administrative actions such as extending
   * expiry or reissuing tokens.
   *
   * The input request body should contain properties matching the schema for
   * update requests, and only allowed fields will be modified.
   *
   * Errors should be handled for non-existing token or user references.
   *
   * @param connection
   * @param regularUserId ID of the regular user owning the token
   * @param emailVerificationTokenId ID of the email verification token to
   *   update
   * @param body Update details of the email verification token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":emailVerificationTokenId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("emailVerificationTokenId")
    emailVerificationTokenId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEmailVerificationToken.IUpdate,
  ): Promise<IEventRegistrationEmailVerificationToken> {
    try {
      return await puteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId(
        {
          admin,
          regularUserId,
          emailVerificationTokenId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an email verification token by ID for a regular user.
   *
   * This API endpoint allows for the permanent deletion of an email
   * verification token belonging to a specific regular user. It uses the user
   * ID and the token ID as path parameters to target the exact token to
   * remove.
   *
   * Deleting a token helps maintain security hygiene and allows invalidation of
   * tokens that are no longer valid or needed.
   *
   * This operation corresponds to the
   * event_registration_email_verification_tokens table and removes the record
   * irrevocably.
   *
   * Authorized roles: admin only.
   *
   * Error handling includes returning appropriate error messages if the token
   * or user does not exist.
   *
   * No request body is needed.
   *
   * No response body is returned upon successful deletion.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param emailVerificationTokenId Unique identifier of the email verification
   *   token to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":emailVerificationTokenId")
  public async eraseEmailVerificationToken(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("emailVerificationTokenId")
    emailVerificationTokenId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokensEmailVerificationTokenId(
        {
          admin,
          regularUserId,
          emailVerificationTokenId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new email verification token for a regular user.
   *
   * Create a new email verification token record for the given regular user.
   *
   * The token is unique and used to validate the email address ownership.
   *
   * This supports the email verification workflow.
   *
   * Proper authorization ensures only authenticated or admin users can perform
   * this action.
   *
   * The request body must contain the necessary token creation details
   * following schema constraints.
   *
   * @param connection
   * @param regularUserId ID of the regular user to create token for
   * @param body Information for creating a new email verification token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEmailVerificationToken.ICreate,
  ): Promise<IEventRegistrationEmailVerificationToken> {
    try {
      return await posteventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens(
        {
          admin,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get list of email verification tokens for a specified regular user.
   *
   * Retrieve a paginated, filtered list of email verification tokens belonging
   * to a specific regular user.
   *
   * Access is typically limited to admins.
   *
   * Supports query parameters for searching and paginating the list.
   *
   * Useful for audit and management of email verification tokens.
   *
   * @param connection
   * @param regularUserId ID of the regular user whose tokens to retrieve
   * @param body Search criteria and pagination parameters for token filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEmailVerificationToken.IRequest,
  ): Promise<IPageIEventRegistrationEmailVerificationToken> {
    try {
      return await patcheventRegistrationAdminRegularUsersRegularUserIdEmailVerificationTokens(
        {
          admin,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
