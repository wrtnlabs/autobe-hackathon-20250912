import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationAdminRegularUsersRegularUserIdWaitlists } from "../../../../../providers/patcheventRegistrationAdminRegularUsersRegularUserIdWaitlists";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { geteventRegistrationAdminRegularUsersRegularUserIdWaitlistsEventWaitlistId } from "../../../../../providers/geteventRegistrationAdminRegularUsersRegularUserIdWaitlistsEventWaitlistId";

import { IPageIEventRegistrationEventWaitlist } from "../../../../../api/structures/IPageIEventRegistrationEventWaitlist";
import { IEventRegistrationEventWaitlist } from "../../../../../api/structures/IEventRegistrationEventWaitlist";

@Controller("/eventRegistration/admin/regularUsers/:regularUserId/waitlists")
export class EventregistrationAdminRegularusersWaitlistsController {
  /**
   * Retrieve paginated waitlist entries for a regular user.
   *
   * This API endpoint allows querying and paginating event waitlist entries for
   * a specific regular user.
   *
   * The regularUserId path parameter identifies the user whose waitlist entries
   * are requested.
   *
   * Clients can send filtering, pagination, and sorting criteria in the request
   * body adhering to IEventRegistrationEventWaitlist.IRequest type.
   *
   * The response returns a paginated collection of event waitlist summaries,
   * enabling the user to view events where they are on the waitlist.
   *
   * The authorized roles include regularUser, eventOrganizer, and admin, so
   * users can view their own waitlists, organizers can manage waitlists for
   * their events, and admins have global access.
   *
   * This operation is essential for providing transparency and management of
   * waitlisted event participation.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param body Filters and pagination for waitlist query
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IRequest,
  ): Promise<IPageIEventRegistrationEventWaitlist.ISummary> {
    try {
      return await patcheventRegistrationAdminRegularUsersRegularUserIdWaitlists(
        {
          admin,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed event waitlist entry for a regular user.
   *
   * This API operation fetches full details for a single waitlist record
   * belonging to a regular user.
   *
   * It requires path parameters regularUserId and eventWaitlistId to uniquely
   * identify the waitlist entry.
   *
   * The response returns a detailed event waitlist object with all fields such
   * as user reference, event association, and timestamps.
   *
   * Roles authorized to access this endpoint include regularUser,
   * eventOrganizer, and admin.
   *
   * The operation is essential to provide detailed waitlist status to users,
   * organizers, and admins for management and notification purposes.
   *
   * Error conditions include missing entries or insufficient access rights.
   *
   * This operation helps ensure accurate tracking and transparency of the event
   * waitlist system.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventWaitlistId Unique identifier of the event waitlist record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventWaitlistId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await geteventRegistrationAdminRegularUsersRegularUserIdWaitlistsEventWaitlistId(
        {
          admin,
          regularUserId,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
