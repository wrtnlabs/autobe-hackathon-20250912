import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminAdmins } from "../../../../providers/posteventRegistrationAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminAdmins } from "../../../../providers/patcheventRegistrationAdminAdmins";
import { geteventRegistrationAdminAdminsAdminId } from "../../../../providers/geteventRegistrationAdminAdminsAdminId";
import { puteventRegistrationAdminAdminsAdminId } from "../../../../providers/puteventRegistrationAdminAdminsAdminId";
import { deleteeventRegistrationAdminAdminsAdminId } from "../../../../providers/deleteeventRegistrationAdminAdminsAdminId";

import { IEventRegistrationAdmin } from "../../../../api/structures/IEventRegistrationAdmin";
import { IPageIEventRegistrationAdmin } from "../../../../api/structures/IPageIEventRegistrationAdmin";

@Controller("/eventRegistration/admin/admins")
export class EventregistrationAdminAdminsController {
  /**
   * Create a new admin user.
   *
   * Create a new administrator user account with identity credentials and
   * contact information.
   *
   * Only authorized admin users can perform this operation.
   *
   * The request body must include email, password hash, full name, optional
   * phone number, profile picture URL, and email verification status.
   *
   * Successful creation returns the detailed user record, excluding sensitive
   * password hash.
   *
   * Duplicate email addresses are rejected to maintain email uniqueness.
   *
   * @param connection
   * @param body Creation info of the admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationAdmin.ICreate,
  ): Promise<IEventRegistrationAdmin> {
    try {
      return await posteventRegistrationAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of admin users.
   *
   * Retrieve a paginated, filtered list of administrator user accounts from the
   * event registration platform. The returned list includes detailed
   * information such as email, full name, phone number, profile pictures, and
   * email verification status.
   *
   * This operation supports advanced search features, including filtering by
   * full name with trigram search support, sorting by creation date or name,
   * and pagination controls.
   *
   * Authorization is restricted to admin users only due to the sensitive nature
   * of administering system-wide users. Data access is audited and role-based
   * controls protect user information.
   *
   * This operation targets the event_registration_admins table, referencing
   * unique email constraints, audit timestamps, and contact details essential
   * for identity management.
   *
   * Errors include access denial for unauthorized users and invalid pagination
   * parameters.
   *
   * Security best practices require encrypted handling of sensitive data fields
   * and careful filtering of query outcomes.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for administrator
   *   user accounts filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationAdmin.IRequest,
  ): Promise<IPageIEventRegistrationAdmin.ISummary> {
    try {
      return await patcheventRegistrationAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed admin user information by ID.
   *
   * Retrieve detailed information about a specific admin user identified by
   * their unique ID.
   *
   * This operation is intended for administrative use and returns data such as
   * email, full name, phone number, profile picture, and email verification
   * status.
   *
   * Admin-only access is strictly enforced. The response includes timestamps
   * for creation and updates, supporting audit requirements.
   *
   * Invalid UUID formats or requests for non-existent admins result in error
   * responses with appropriate status codes.
   *
   * This operation uses the event_registration_admins table, ensuring data
   * consistency and integrity reflecting the database state.
   *
   * @param connection
   * @param adminId Unique identifier of the target admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationAdmin> {
    try {
      return await geteventRegistrationAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an administrator user by ID.
   *
   * Update an existing administrator's user record by their unique ID. This
   * operation enables modification of personal and authentication details
   * including email, password hash, name, contact information, profile picture
   * URL, and email verified status.
   *
   * Access to this operation is restricted to users with the 'admin' role to
   * ensure only authorized personnel can update administrator records.
   *
   * The underlying data entity is event_registration_admins, containing all
   * relevant user identification and contact fields. The API endpoint requires
   * the unique adminId path parameter to specify which admin user to update.
   *
   * The request body must conform to the IEventRegistrationAdmin.IUpdate
   * schema, ensuring validated data updates. Upon success, the updated admin
   * record is returned.
   *
   * Failures include invalid adminId not matching any records, or unauthorized
   * access attempts by non-admin users.
   *
   * @param connection
   * @param adminId Unique identifier of the target admin user
   * @param body Admin user update request body
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async updateAdminUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationAdmin.IUpdate,
  ): Promise<IEventRegistrationAdmin> {
    try {
      return await puteventRegistrationAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an administrator user by ID.
   *
   * Permanently delete an administrator user record by their unique ID.
   *
   * This operation requires the admin role and is restricted to authorized
   * administrators. It completely removes the record from the database, making
   * it unrecoverable.
   *
   * The resource is identified by the adminId path parameter.
   *
   * No request body or response data is returned.
   *
   * This action is irreversible.
   *
   * Failure cases include invalid adminId or unauthorized access attempts.
   *
   * @param connection
   * @param adminId Unique identifier of the admin user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async eraseAdminUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
