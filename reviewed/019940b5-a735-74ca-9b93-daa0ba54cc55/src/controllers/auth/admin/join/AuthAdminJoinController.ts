import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IEventRegistrationAdmin } from "../../../../api/structures/IEventRegistrationAdmin";

@Controller("/auth/admin/join")
export class AuthAdminJoinController {
  /**
   * Create an admin user account associated with the
   * 'event_registration_admins' table.
   *
   * Create a new admin user account with email, password hash, full name, phone
   * number (optional), profile picture URL (optional), and email verification
   * status in the 'event_registration_admins' Prisma table. Access restricted
   * to existing admin users for security and management governance. Ensures
   * email uniqueness and proper profile data management.
   *
   * @param connection
   * @param body Admin user account creation payload
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAdminUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationAdmin.ICreate,
  ): Promise<IEventRegistrationAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
