import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEventOrganizerJoin } from "../../../providers/postauthEventOrganizerJoin";
import { EventOrganizerAuth } from "../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../decorators/payload/EventOrganizerPayload";
import { postauthEventOrganizerLogin } from "../../../providers/postauthEventOrganizerLogin";
import { postauthEventOrganizerRefresh } from "../../../providers/postauthEventOrganizerRefresh";

import { IEventRegistrationEventOrganizer } from "../../../api/structures/IEventRegistrationEventOrganizer";

@Controller("/auth/eventOrganizer")
export class AuthEventorganizerController {
  /**
   * Create a new event organizer user (member kind) and issue authorization
   * tokens.
   *
   * Register a new event organizer user account with email and password. This
   * endpoint allows event organizers to create their accounts by providing
   * necessary authentication and profile information as defined in the
   * event_registration_event_organizers Prisma table. The password is securely
   * handled as a hashed value. Email verification is initially false until user
   * confirms via email verification workflows.
   *
   * This operation enforces email uniqueness and secures password hashing. Upon
   * successful registration, JWT tokens are issued to authorize the user.
   *
   * It is a public endpoint, not requiring prior authentication.
   *
   * Reference fields: email, password_hash, full_name, phone_number (optional),
   * profile_picture_url (optional), email_verified, created_at, updated_at.
   *
   * Related endpoints for comprehensive authentication flow include
   * /auth/eventOrganizer/login and /auth/eventOrganizer/refresh.
   *
   * @param connection
   * @param body Payload for registering a new event organizer user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.ICreate,
  ): Promise<IEventRegistrationEventOrganizer.IAuthorized> {
    try {
      return await postauthEventOrganizerJoin({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an event organizer user and issue JWT tokens.
   *
   * Authenticate event organizer user by email and password, validate email
   * verified status. Issues JWT tokens upon successful login.
   *
   * Only event organizers with verified email can log in.
   *
   * Reference fields: email, password_hash, email_verified.
   *
   * Mandatory password security checks and JWT issuance apply.
   *
   * Public endpoint with no prior authentication required.
   *
   * Related endpoints include /auth/eventOrganizer/join and
   * /auth/eventOrganizer/refresh for full authentication lifecycle.
   *
   * @param connection
   * @param body Payload for logging in an event organizer user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.ILogin,
  ): Promise<IEventRegistrationEventOrganizer.IAuthorized> {
    try {
      return await postauthEventOrganizerLogin({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for event organizer user.
   *
   * Refresh JWT authorization tokens using a refresh token for an event
   * organizer user.
   *
   * Requires a valid refresh token in the request body.
   *
   * Returns new authorization tokens on success.
   *
   * Reference: event_registration_event_organizers table context.
   *
   * Related endpoints include /auth/eventOrganizer/join and
   * /auth/eventOrganizer/login.
   *
   * @param connection
   * @param body Payload containing refresh token for event organizer user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.IRefresh,
  ): Promise<IEventRegistrationEventOrganizer.IAuthorized> {
    try {
      return await postauthEventOrganizerRefresh({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
