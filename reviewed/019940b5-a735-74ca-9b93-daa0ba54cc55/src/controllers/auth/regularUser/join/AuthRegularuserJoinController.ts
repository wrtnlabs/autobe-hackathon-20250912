import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthRegularUserJoin } from "../../../../providers/postauthRegularUserJoin";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IEventRegistrationRegularUser } from "../../../../api/structures/IEventRegistrationRegularUser";

@Controller("/auth/regularUser/join")
export class AuthRegularuserJoinController {
  /**
   * Create a new regular user account (event_registration_regular_users) with
   * email and password.
   *
   * Registers a new regular user account with email and password, storing user
   * profile details in the 'event_registration_regular_users' table. User
   * starts with email_verified set to false and receives JWT tokens upon
   * successful registration. Includes necessary validations for email
   * uniqueness and password security.
   *
   * @param connection
   * @param body Request body for creating a regular user account. Must include
   *   email, password hash, and profile data.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinRegularUser(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IEventRegistrationRegularUser.ICreate,
  ): Promise<IEventRegistrationRegularUser.IAuthorized> {
    try {
      return await postauthRegularUserJoin({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
