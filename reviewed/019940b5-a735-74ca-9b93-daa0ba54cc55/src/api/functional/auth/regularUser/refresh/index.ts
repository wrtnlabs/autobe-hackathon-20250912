import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationRegularUser } from "../../../../structures/IEventRegistrationRegularUser";

/**
 * Refresh JWT tokens for regular user (event_registration_regular_users).
 *
 * Refreshes JWT access tokens using a valid refresh token for a regular user as
 * per 'event_registration_regular_users' schema.
 *
 * @param props.connection
 * @param props.body Request body containing refresh token information.
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/refresh
 * @accessor api.functional.auth.regularUser.refresh.refreshRegularUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refreshRegularUser(
  connection: IConnection,
  props: refreshRegularUser.Props,
): Promise<refreshRegularUser.Response> {
  const output: refreshRegularUser.Response =
    true === connection.simulate
      ? refreshRegularUser.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refreshRegularUser.METADATA,
            path: refreshRegularUser.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refreshRegularUser {
  export type Props = {
    /** Request body containing refresh token information. */
    body: IEventRegistrationRegularUser.IRefresh;
  };
  export type Body = IEventRegistrationRegularUser.IRefresh;
  export type Response = IEventRegistrationRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/refresh";
  export const random = (): IEventRegistrationRegularUser.IAuthorized =>
    typia.random<IEventRegistrationRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refreshRegularUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refreshRegularUser.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
