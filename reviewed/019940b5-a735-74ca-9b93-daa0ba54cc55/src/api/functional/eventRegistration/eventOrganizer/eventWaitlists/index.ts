import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventWaitlist } from "../../../../structures/IEventRegistrationEventWaitlist";

/**
 * Retrieve details of a specific event waitlist entry.
 *
 * Retrieve a specific event waitlist entry by its unique ID. This operation
 * returns detailed information including the associated event ID, the regular
 * user ID of the waitlisted user, and timestamps indicating when the entry was
 * created and last updated.
 *
 * Security considerations include ensuring only authorized users with
 * appropriate permissions can access waitlist details, typically event
 * organizers or admins. This operation interacts directly with the
 * event_registration_event_waitlists table.
 *
 * The API expects the waitlist entry ID as a path parameter and returns the
 * detailed waitlist entry data. If the specified entry does not exist, an error
 * should be returned.
 *
 * No request body is required as this is a retrieval operation.
 *
 * @param props.connection
 * @param props.eventWaitlistId Unique identifier of the target event waitlist
 *   entry
 * @path /eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.eventWaitlists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target event waitlist entry */
    eventWaitlistId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/eventWaitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing event waitlist entry identified by its unique ID. The
 * client can modify event association, user association, or update audit fields
 * as needed.
 *
 * This operation enforces uniqueness of event-user combinations and maintains
 * data consistency.
 *
 * Authorization is restricted to admin and event organizer roles.
 *
 * The response returns the updated waitlist entry data.
 *
 * @param props.connection
 * @param props.eventWaitlistId Unique identifier of the event waitlist entry to
 *   be updated
 * @param props.body Updated information for the event waitlist entry
 * @path /eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.eventWaitlists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the event waitlist entry to be updated */
    eventWaitlistId: string & tags.Format<"uuid">;

    /** Updated information for the event waitlist entry */
    body: IEventRegistrationEventWaitlist.IUpdate;
  };
  export type Body = IEventRegistrationEventWaitlist.IUpdate;
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/eventWaitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove an event waitlist entry.
 *
 * Delete an event waitlist entry by its unique ID, removing the user from the
 * waitlist for the event. This is a hard delete operation.
 *
 * Authorization is limited to event organizers and admins.
 *
 * No request body is required, and the operation does not return any response
 * body on success.
 *
 * @param props.connection
 * @param props.eventWaitlistId Unique identifier of the event waitlist entry to
 *   remove
 * @path /eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.eventWaitlists.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the event waitlist entry to remove */
    eventWaitlistId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/eventOrganizer/eventWaitlists/:eventWaitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/eventWaitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new event waitlist entry linking a regular user to an event
 * waitlist. Input must specify the event and the user to be waitlisted. The
 * system ensures that the user is not already registered as an attendee or on
 * the waitlist. This action increments waitlist count and triggers
 * notifications.
 *
 * Only users with admin or event organizer roles are authorized to perform this
 * operation.
 *
 * The client provides the event ID and regular user ID. The created entry with
 * timestamps is returned upon success.
 *
 * @param props.connection
 * @param props.body Information needed to create a new event waitlist entry
 * @path /eventRegistration/eventOrganizer/eventWaitlists
 * @accessor api.functional.eventRegistration.eventOrganizer.eventWaitlists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a new event waitlist entry */
    body: IEventRegistrationEventWaitlist.ICreate;
  };
  export type Body = IEventRegistrationEventWaitlist.ICreate;
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/eventOrganizer/eventWaitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/eventOrganizer/eventWaitlists";
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
