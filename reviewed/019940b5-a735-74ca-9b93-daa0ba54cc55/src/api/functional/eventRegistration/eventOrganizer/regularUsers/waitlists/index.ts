import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventWaitlist } from "../../../../../structures/IEventRegistrationEventWaitlist";
import { IPageIEventRegistrationEventWaitlist } from "../../../../../structures/IPageIEventRegistrationEventWaitlist";

/**
 * Retrieve paginated waitlist entries for a regular user.
 *
 * This API endpoint allows querying and paginating event waitlist entries for a
 * specific regular user.
 *
 * The regularUserId path parameter identifies the user whose waitlist entries
 * are requested.
 *
 * Clients can send filtering, pagination, and sorting criteria in the request
 * body adhering to IEventRegistrationEventWaitlist.IRequest type.
 *
 * The response returns a paginated collection of event waitlist summaries,
 * enabling the user to view events where they are on the waitlist.
 *
 * The authorized roles include regularUser, eventOrganizer, and admin, so users
 * can view their own waitlists, organizers can manage waitlists for their
 * events, and admins have global access.
 *
 * This operation is essential for providing transparency and management of
 * waitlisted event participation.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.body Filters and pagination for waitlist query
 * @path /eventRegistration/eventOrganizer/regularUsers/:regularUserId/waitlists
 * @accessor api.functional.eventRegistration.eventOrganizer.regularUsers.waitlists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Filters and pagination for waitlist query */
    body: IEventRegistrationEventWaitlist.IRequest;
  };
  export type Body = IEventRegistrationEventWaitlist.IRequest;
  export type Response = IPageIEventRegistrationEventWaitlist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/eventOrganizer/regularUsers/:regularUserId/waitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/waitlists`;
  export const random = (): IPageIEventRegistrationEventWaitlist.ISummary =>
    typia.random<IPageIEventRegistrationEventWaitlist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed event waitlist entry for a regular user.
 *
 * This API operation fetches full details for a single waitlist record
 * belonging to a regular user.
 *
 * It requires path parameters regularUserId and eventWaitlistId to uniquely
 * identify the waitlist entry.
 *
 * The response returns a detailed event waitlist object with all fields such as
 * user reference, event association, and timestamps.
 *
 * Roles authorized to access this endpoint include regularUser, eventOrganizer,
 * and admin.
 *
 * The operation is essential to provide detailed waitlist status to users,
 * organizers, and admins for management and notification purposes.
 *
 * Error conditions include missing entries or insufficient access rights.
 *
 * This operation helps ensure accurate tracking and transparency of the event
 * waitlist system.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.eventWaitlistId Unique identifier of the event waitlist record
 * @path /eventRegistration/eventOrganizer/regularUsers/:regularUserId/waitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.regularUsers.waitlists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the event waitlist record */
    eventWaitlistId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/regularUsers/:regularUserId/waitlists/:eventWaitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/waitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
