import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventWaitlist } from "../../../../../structures/IEventRegistrationEventWaitlist";
import { IPageIEventRegistrationEventWaitlist } from "../../../../../structures/IPageIEventRegistrationEventWaitlist";

/**
 * Add a user to event waitlist.
 *
 * This endpoint creates a new waitlist entry for a user wishing to join the
 * waitlist of the specified event. The request body includes required fields to
 * link the regular user and the event. The operation ensures FIFO order by
 * recording the creation timestamp. It is secured to allow only users with
 * roles "eventOrganizer" or "admin" to add waitlist entries.
 *
 * The underlying Prisma schema enforces uniqueness per user-event combination
 * to prevent duplicates. This POST operation corresponds to the "create"
 * pattern, returning the created waitlist entry details.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the target event
 * @param props.body Data for creating a new event waitlist entry
 * @path /eventRegistration/eventOrganizer/events/:eventId/waitlists
 * @accessor api.functional.eventRegistration.eventOrganizer.events.waitlists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target event */
    eventId: string & tags.Format<"uuid">;

    /** Data for creating a new event waitlist entry */
    body: IEventRegistrationEventWaitlist.ICreate;
  };
  export type Body = IEventRegistrationEventWaitlist.ICreate;
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/eventOrganizer/events/:eventId/waitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/waitlists`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated waitlists for an event.
 *
 * This endpoint retrieves a filtered and paginated list of waitlisted users for
 * a specific event identified by its eventId. The waitlist records are sorted
 * based on their creation timestamps in FIFO order, allowing organizers and
 * admins to see who is next in line.
 *
 * Security is enforced such that only users with roles "eventOrganizer" or
 * "admin" can access this sensitive data, ensuring privacy and compliance. The
 * waitlist is essential for managing event capacity dynamically and for
 * promoting users when spots open.
 *
 * The underlying Prisma table "event_registration_event_waitlists" contains
 * fields for the event ID, user ID, and timestamps, with relationships to the
 * regular user and event entities. This operation supports pagination and
 * filtering through the request body, mapped to
 * IEventRegistrationEventWaitlist.IRequest type, and returns paginated waitlist
 * summary responses.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the target event
 * @param props.body Search criteria and pagination parameters for event
 *   waitlist filtering
 * @path /eventRegistration/eventOrganizer/events/:eventId/waitlists
 * @accessor api.functional.eventRegistration.eventOrganizer.events.waitlists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target event */
    eventId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for event waitlist
     * filtering
     */
    body: IEventRegistrationEventWaitlist.IRequest;
  };
  export type Body = IEventRegistrationEventWaitlist.IRequest;
  export type Response = IPageIEventRegistrationEventWaitlist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/eventOrganizer/events/:eventId/waitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/waitlists`;
  export const random = (): IPageIEventRegistrationEventWaitlist.ISummary =>
    typia.random<IPageIEventRegistrationEventWaitlist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific waitlist entry details.
 *
 * This endpoint returns full detailed information about a single waitlist entry
 * identified by eventWaitlistId for the associated event eventId. The waitlist
 * entry links a regular user to an event they are waiting for, including
 * creation and update timestamps.
 *
 * This operation is protected and accessible only by users with roles
 * "eventOrganizer" or "admin" due to the sensitive nature of waitlist data. The
 * detailed information helps event organizers and admins manage individual
 * waitlist slots more precisely.
 *
 * The underlying Prisma model "event_registration_event_waitlists" ensures the
 * integrity of the waitlist with unique constraints preventing duplicate
 * entries for the same user and event. This GET operation corresponds to the
 * "at" pattern returning a single entity.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the target event
 * @param props.eventWaitlistId Unique identifier of the target event waitlist
 *   entry
 * @path /eventRegistration/eventOrganizer/events/:eventId/waitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.events.waitlists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target event */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the target event waitlist entry */
    eventWaitlistId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/events/:eventId/waitlists/:eventWaitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/waitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an event waitlist entry.
 *
 * This endpoint updates the waitlist entry identified by eventWaitlistId for
 * the event specified by eventId. Authorized roles "eventOrganizer" or "admin"
 * can modify the waitlist entry's data as allowed by the schema.
 *
 * This operation allows managing the waitlist effectively, such as correcting
 * entries or updating timestamps. The underlying Prisma schema enforces unique
 * constraints.
 *
 * This PUT operation corresponds to the "update" pattern, returning the updated
 * waitlist entry details on success.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the target event
 * @param props.eventWaitlistId Unique identifier of the target event waitlist
 *   entry
 * @param props.body Data for updating an event waitlist entry
 * @path /eventRegistration/eventOrganizer/events/:eventId/waitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.eventOrganizer.events.waitlists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target event */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the target event waitlist entry */
    eventWaitlistId: string & tags.Format<"uuid">;

    /** Data for updating an event waitlist entry */
    body: IEventRegistrationEventWaitlist.IUpdate;
  };
  export type Body = IEventRegistrationEventWaitlist.IUpdate;
  export type Response = IEventRegistrationEventWaitlist;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/eventOrganizer/events/:eventId/waitlists/:eventWaitlistId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/waitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): IEventRegistrationEventWaitlist =>
    typia.random<IEventRegistrationEventWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
