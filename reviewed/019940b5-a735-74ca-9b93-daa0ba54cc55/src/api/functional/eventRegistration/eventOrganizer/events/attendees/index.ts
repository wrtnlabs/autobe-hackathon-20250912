import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAttendee } from "../../../../../structures/IEventRegistrationEventAttendee";
import { IPageIEventRegistrationEventAttendee } from "../../../../../structures/IPageIEventRegistrationEventAttendee";

/**
 * List attendees for a specific event.
 *
 * Lists attendees registered for the event specified by 'eventId'. Supports
 * pagination, filtering, and sorting parameters defined in the request body.
 *
 * Only authorized roles such as event organizers and admins can access this
 * data. The response includes a pageable summary of attendees including
 * essential details needed for attendee management.
 *
 * This facilitates event management tasks such as attendance tracking and
 * reporting.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event to get attendees for
 * @param props.body Search and pagination criteria for event attendees
 * @path /eventRegistration/eventOrganizer/events/:eventId/attendees
 * @accessor api.functional.eventRegistration.eventOrganizer.events.attendees.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the event to get attendees for */
    eventId: string & tags.Format<"uuid">;

    /** Search and pagination criteria for event attendees */
    body: IEventRegistrationEventAttendee.IRequest;
  };
  export type Body = IEventRegistrationEventAttendee.IRequest;
  export type Response = IPageIEventRegistrationEventAttendee.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/eventOrganizer/events/:eventId/attendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/attendees`;
  export const random = (): IPageIEventRegistrationEventAttendee.ISummary =>
    typia.random<IPageIEventRegistrationEventAttendee.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get event attendee details by ID.
 *
 * Retrieves detailed information about an event attendee identified by the path
 * parameter 'eventAttendeeId'.
 *
 * Authorized users such as event organizers and admins can use this endpoint to
 * view full attendee details including association with event and user data.
 *
 * The response includes all data fields defined in the
 * event_registration_event_attendees model pinpointing one specific attendee
 * record.
 *
 * @param props.connection
 * @param props.eventAttendeeId Unique identifier of the event attendee to
 *   retrieve
 * @path /eventRegistration/eventOrganizer/events/:eventId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.eventOrganizer.events.attendees.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    eventId: string;

    /** Unique identifier of the event attendee to retrieve */
    eventAttendeeId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/events/:eventId/attendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
