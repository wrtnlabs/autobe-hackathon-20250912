import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationNotifications } from "../../../../../structures/IEventRegistrationNotifications";
import { IPageIEventRegistrationNotifications } from "../../../../../structures/IPageIEventRegistrationNotifications";
import { IEventRegistrationNotification } from "../../../../../structures/IEventRegistrationNotification";

/**
 * Get paginated notifications for a regular user.
 *
 * Retrieve a paginated list of notifications for a specific regular user.
 * Notifications include registration confirmations, waitlist promotions, event
 * updates, and other alerts.
 *
 * Supports pagination and filtering via request body parameters.
 *
 * Ensures that only the correct user can access their notifications.
 *
 * This operation reads from the event_registration_notifications table indexed
 * by user ID and created date.
 *
 * Returns paginated notification entries with read status and content details.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user to retrieve
 *   notifications for
 * @param props.body Parameters for pagination, filtering, and sorting
 *   notifications
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/notifications
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.notifications.getNotifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getNotifications(
  connection: IConnection,
  props: getNotifications.Props,
): Promise<getNotifications.Response> {
  return true === connection.simulate
    ? getNotifications.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getNotifications.METADATA,
          path: getNotifications.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace getNotifications {
  export type Props = {
    /** Unique identifier of the regular user to retrieve notifications for */
    regularUserId: string & tags.Format<"uuid">;

    /** Parameters for pagination, filtering, and sorting notifications */
    body: IEventRegistrationNotifications.IRequest;
  };
  export type Body = IEventRegistrationNotifications.IRequest;
  export type Response = IPageIEventRegistrationNotifications;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications`;
  export const random = (): IPageIEventRegistrationNotifications =>
    typia.random<IPageIEventRegistrationNotifications>();
  export const simulate = (
    connection: IConnection,
    props: getNotifications.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getNotifications.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single notification of a regular user.
 *
 * Retrieve a specific notification belonging to a regular user by their
 * notification ID. This operation fetches detailed information about the
 * notification including its type, content, read status, and timestamps.
 *
 * Security considerations include ensuring the requesting user is authenticated
 * and authorized to access the specified notification to prevent unauthorized
 * data disclosure.
 *
 * The underlying database entity is the 'event_registration_notifications'
 * table, which associates notifications with regular users or keeps them as
 * system-wide notifications. The notification's read status indicates whether
 * the user has seen the notification.
 *
 * Validation rules enforce the notification ID and regular user ID to be valid
 * UUIDs and that the notification belongs to the user.
 *
 * This endpoint complements notification listing and management APIs.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.notificationId Unique identifier of the target notification
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/notifications/:notificationId
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationNotification;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEventRegistrationNotification =>
    typia.random<IEventRegistrationNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
