import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAttendee } from "../../../../../structures/IEventRegistrationEventAttendee";
import { IPageIEventRegistrationEventAttendee } from "../../../../../structures/IPageIEventRegistrationEventAttendee";

/**
 * Create a new event attendee record for a regular user.
 *
 * Registers a regular user as an attendee for a specific event by creating a
 * new attendee record.
 *
 * The request body must include the necessary data to associate the user with
 * the event.
 *
 * On success, returns the detailed attendee record including timestamps and
 * IDs.
 *
 * This operation supports the event sign-up workflow.
 *
 * Authorization roles include authenticated regular users and admins.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.body Creation info for registering event attendee
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/attendees
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.attendees.createEventAttendeeForUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createEventAttendeeForUser(
  connection: IConnection,
  props: createEventAttendeeForUser.Props,
): Promise<createEventAttendeeForUser.Response> {
  return true === connection.simulate
    ? createEventAttendeeForUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEventAttendeeForUser.METADATA,
          path: createEventAttendeeForUser.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createEventAttendeeForUser {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Creation info for registering event attendee */
    body: IEventRegistrationEventAttendee.ICreate;
  };
  export type Body = IEventRegistrationEventAttendee.ICreate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/attendees`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: createEventAttendeeForUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createEventAttendeeForUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated list of event attendees for a regular user.
 *
 * Retrieves a paginated collection of event attendee records associated with
 * the specified regular user. This allows viewing which events the user has
 * attended or signed up for.
 *
 * The request body specifies pagination and filtering criteria.
 *
 * This operation returns a paginated list of attendee summaries.
 *
 * Authorization roles include authenticated regular users and admins.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.body Search criteria and pagination parameters for filtering
 *   event attendees
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/attendees
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.attendees.indexEventAttendeesByUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexEventAttendeesByUser(
  connection: IConnection,
  props: indexEventAttendeesByUser.Props,
): Promise<indexEventAttendeesByUser.Response> {
  return true === connection.simulate
    ? indexEventAttendeesByUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexEventAttendeesByUser.METADATA,
          path: indexEventAttendeesByUser.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexEventAttendeesByUser {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for filtering event
     * attendees
     */
    body: IEventRegistrationEventAttendee.IRequest;
  };
  export type Body = IEventRegistrationEventAttendee.IRequest;
  export type Response = IPageIEventRegistrationEventAttendee.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/attendees`;
  export const random = (): IPageIEventRegistrationEventAttendee.ISummary =>
    typia.random<IPageIEventRegistrationEventAttendee.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexEventAttendeesByUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexEventAttendeesByUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed event attendee record by ID for a regular user.
 *
 * Retrieves full details of a specific event attendee record for the given
 * regular user. This includes all properties of the attendee record such as
 * event association and timestamps.
 *
 * Access control restricts viewing to the owning user or admins.
 *
 * No request body is required.
 *
 * Returns the event attendee entity as the response body.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.eventAttendeeId Unique identifier of the event attendee record
 *   to retrieve
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.attendees.atEventAttendeeByUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atEventAttendeeByUser(
  connection: IConnection,
  props: atEventAttendeeByUser.Props,
): Promise<atEventAttendeeByUser.Response> {
  return true === connection.simulate
    ? atEventAttendeeByUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atEventAttendeeByUser.METADATA,
          path: atEventAttendeeByUser.path(props),
          status: null,
        },
      );
}
export namespace atEventAttendeeByUser {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the event attendee record to retrieve */
    eventAttendeeId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: atEventAttendeeByUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atEventAttendeeByUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an event attendee record for a regular user.
 *
 * This endpoint allows updating an existing event attendee record for a regular
 * user. The attendee represents the confirmed registration of the user to an
 * event in the system.
 *
 * The update operation requires both the regularUserId and eventAttendeeId path
 * parameters to locate and identify the specific event attendee record.
 *
 * The authorized roles that can perform this operation include regularUser
 * (owner), eventOrganizer (event manager), and admin.
 *
 * The request body must include the properties defined in
 * IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted
 * attendee attributes while preserving audit and immutable fields.
 *
 * Successful operation returns the updated event attendee object reflecting the
 * new registration details.
 *
 * Errors are raised if the user or attendee record does not exist or if
 * authorization fails.
 *
 * This operation is crucial for managing attendee information, maintaining
 * attendance accuracy, and supporting event management workflows.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.eventAttendeeId Unique identifier of the event attendee record
 * @param props.body Event attendee data for update
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.attendees.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the event attendee record */
    eventAttendeeId: string & tags.Format<"uuid">;

    /** Event attendee data for update */
    body: IEventRegistrationEventAttendee.IUpdate;
  };
  export type Body = IEventRegistrationEventAttendee.IUpdate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an event attendee record for a regular user.
 *
 * This API operation permanently deletes the event attendee record for a given
 * regularUserId and eventAttendeeId. The record represents confirmed attendance
 * of the user for the event.
 *
 * Only authorized roles such as regularUser, eventOrganizer, and admin can
 * perform this deletion.
 *
 * No request body is required. Upon success, the response contains no content.
 *
 * This endpoint enforces business rules for cancellation and attendance
 * management.
 *
 * Errors are returned if the record does not exist or the caller lacks the
 * necessary permissions.
 *
 * Deleting an attendee may trigger waitlist promotions as handled outside this
 * operation.
 *
 * This ensures event attendance metrics remain consistent and accurate.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.eventAttendeeId Unique identifier of the event attendee record
 * @path /eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.regularUsers.attendees.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the event attendee record */
    eventAttendeeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
