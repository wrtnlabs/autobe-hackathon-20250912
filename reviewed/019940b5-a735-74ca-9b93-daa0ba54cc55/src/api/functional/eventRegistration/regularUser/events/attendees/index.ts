import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAttendee } from "../../../../../structures/IEventRegistrationEventAttendee";

/**
 * Add a regular user as an event attendee.
 *
 * Create a new event attendee by adding a regular user registration to the
 * event identified by eventId. This operation ensures the user is added as a
 * confirmed attendee for the specified event.
 *
 * Security and authorization require the caller to have the 'regularUser' role.
 * Duplicate registrations are prevented by the unique constraint on (event_id,
 * regular_user_id).
 *
 * This operation interacts with the event_registration_event_attendees table
 * from the Prisma schema and requires appropriate event and user identifiers.
 *
 * Clients must provide the regular_user_id in the request body within the
 * ICreate structure to indicate which user is being registered as an attendee.
 *
 * Errors due to duplicate entries, invalid event or user IDs, or insufficient
 * permissions must be handled appropriately by the API implementation.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event
 * @param props.body Information needed to create an event attendee record
 * @path /eventRegistration/regularUser/events/:eventId/attendees
 * @accessor api.functional.eventRegistration.regularUser.events.attendees.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the event */
    eventId: string & tags.Format<"uuid">;

    /** Information needed to create an event attendee record */
    body: IEventRegistrationEventAttendee.ICreate;
  };
  export type Body = IEventRegistrationEventAttendee.ICreate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/regularUser/events/:eventId/attendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/events/${encodeURIComponent(props.eventId ?? "null")}/attendees`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an event attendee's information.
 *
 * Update an existing event attendee record specified by eventId and
 * eventAttendeeId. Replaces attendee information according to the update
 * payload.
 *
 * Authorization ensures only authorized users with 'regularUser' role can
 * perform updates.
 *
 * This operation affects the event_registration_event_attendees table,
 * maintaining consistency with event and regular user foreign key references.
 *
 * Validation confirms existence of the attendee and correct event association.
 *
 * The operation primarily updates mutable fields such as timestamps for audit
 * and administrative purposes.
 *
 * Related operations include creating new attendees and deleting attendee
 * records.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event
 * @param props.eventAttendeeId Unique identifier of the event attendee
 * @param props.body Update data for the event attendee record
 * @path /eventRegistration/regularUser/events/:eventId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.events.attendees.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the event */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the event attendee */
    eventAttendeeId: string & tags.Format<"uuid">;

    /** Update data for the event attendee record */
    body: IEventRegistrationEventAttendee.IUpdate;
  };
  export type Body = IEventRegistrationEventAttendee.IUpdate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/regularUser/events/:eventId/attendees/:eventAttendeeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/regularUser/events/${encodeURIComponent(props.eventId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an event attendee record identified by eventId and eventAttendeeId.
 * This operation performs permanent deletion.
 *
 * Only authorized regular users may execute this operation.
 *
 * The deletion affects the event_registration_event_attendees table and impacts
 * event capacity and waitlist promotion logic.
 *
 * No request body is accepted.
 *
 * Related operations are create and update for event attendee management.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event
 * @param props.eventAttendeeId Unique identifier of the event attendee
 * @path /eventRegistration/regularUser/events/:eventId/attendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.events.attendees.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the event */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the event attendee */
    eventAttendeeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/regularUser/events/:eventId/attendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/events/${encodeURIComponent(props.eventId ?? "null")}/attendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
