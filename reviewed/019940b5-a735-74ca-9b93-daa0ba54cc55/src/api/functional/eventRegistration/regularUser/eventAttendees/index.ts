import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAttendee } from "../../../../structures/IEventRegistrationEventAttendee";

/**
 * Register a user as an event attendee. This inserts a new record into
 * event_registration_event_attendees linking the user to the event.
 *
 * The user must have verified their email, and the event must have capacity.
 *
 * Authorized roles: regularUser.
 *
 * Returns the created attendee information.
 *
 * @param props.connection
 * @param props.body Information needed to register a user as an event attendee
 * @path /eventRegistration/regularUser/eventAttendees
 * @accessor api.functional.eventRegistration.regularUser.eventAttendees.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to register a user as an event attendee */
    body: IEventRegistrationEventAttendee.ICreate;
  };
  export type Body = IEventRegistrationEventAttendee.ICreate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/regularUser/eventAttendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/regularUser/eventAttendees";
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an event attendee registration by ID. This is a permanent deletion
 * removing the attendee's event registration record.
 *
 * Authorized roles for this operation include regularUser (the attendee),
 * admin, and eventOrganizer.
 *
 * There is no request or response body.
 *
 * This operation does not perform soft deletion.
 *
 * @param props.connection
 * @param props.eventAttendeeId Unique identifier of the event attendee
 *   registration to delete
 * @path /eventRegistration/regularUser/eventAttendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.regularUser.eventAttendees.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the event attendee registration to delete */
    eventAttendeeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/regularUser/eventAttendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/eventAttendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
