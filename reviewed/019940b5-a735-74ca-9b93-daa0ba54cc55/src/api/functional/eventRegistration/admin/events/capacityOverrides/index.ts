import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventCapacityOverride } from "../../../../../structures/IEventRegistrationEventCapacityOverride";
import { IPageIEventRegistrationEventCapacityOverrides } from "../../../../../structures/IPageIEventRegistrationEventCapacityOverrides";
import { IEventRegistrationEventCapacityOverrides } from "../../../../../structures/IEventRegistrationEventCapacityOverrides";

/**
 * Create capacity override for an event.
 *
 * Allows authorized admin users to create a capacity override linked to a
 * specified event by eventId (UUID). This override indicates whether automatic
 * capacity adjustment is enabled or disabled.
 *
 * Only admins can perform this operation.
 *
 * Creates audit fields for tracking creation and updates. The operation ensures
 * uniqueness per event to prevent conflicting overrides.
 *
 * This operation aligns strictly with the
 * event_registration_event_capacity_overrides Prisma model's specifications.
 *
 * @param props.connection
 * @param props.eventId Unique ID of the event to create capacity override for
 * @param props.body Data required to create a capacity override, including
 *   isOverrideEnabled flag
 * @path /eventRegistration/admin/events/:eventId/capacityOverrides
 * @accessor api.functional.eventRegistration.admin.events.capacityOverrides.createCapacityOverride
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createCapacityOverride(
  connection: IConnection,
  props: createCapacityOverride.Props,
): Promise<createCapacityOverride.Response> {
  return true === connection.simulate
    ? createCapacityOverride.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCapacityOverride.METADATA,
          path: createCapacityOverride.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createCapacityOverride {
  export type Props = {
    /** Unique ID of the event to create capacity override for */
    eventId: string & tags.Format<"uuid">;

    /**
     * Data required to create a capacity override, including
     * isOverrideEnabled flag
     */
    body: IEventRegistrationEventCapacityOverride.ICreate;
  };
  export type Body = IEventRegistrationEventCapacityOverride.ICreate;
  export type Response = IEventRegistrationEventCapacityOverride;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/events/:eventId/capacityOverrides",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/events/${encodeURIComponent(props.eventId ?? "null")}/capacityOverrides`;
  export const random = (): IEventRegistrationEventCapacityOverride =>
    typia.random<IEventRegistrationEventCapacityOverride>();
  export const simulate = (
    connection: IConnection,
    props: createCapacityOverride.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createCapacityOverride.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List capacity overrides for an event.
 *
 * This API endpoint returns a list of capacity override records linked to the
 * specified event ID. Capacity overrides represent admin controls that enable
 * or disable automatic capacity adjustments on events.
 *
 * Access to this endpoint requires administrative authorization due to the
 * sensitivity of override settings.
 *
 * Returned data includes detailed override records with flags indicating
 * override status, along with timestamps for audit purposes.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event to list capacity
 *   overrides for
 * @path /eventRegistration/admin/events/:eventId/capacityOverrides
 * @accessor api.functional.eventRegistration.admin.events.capacityOverrides.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the event to list capacity overrides for */
    eventId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIEventRegistrationEventCapacityOverrides;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/events/:eventId/capacityOverrides",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/events/${encodeURIComponent(props.eventId ?? "null")}/capacityOverrides`;
  export const random = (): IPageIEventRegistrationEventCapacityOverrides =>
    typia.random<IPageIEventRegistrationEventCapacityOverrides>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get event capacity override details by ID.
 *
 * This API endpoint fetches detailed information of a single event capacity
 * override by its unique ID. The data includes override status and audit
 * timestamps.
 *
 * Access is restricted to administrators due to the sensitive nature of
 * capacity override settings.
 *
 * If the specified ID does not exist, a suitable error response is returned.
 *
 * @param props.connection
 * @param props.eventCapacityOverrideId Unique identifier of the target event
 *   capacity override record
 * @path /eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.events.capacityOverrides.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    eventId: string;

    /** Unique identifier of the target event capacity override record */
    eventCapacityOverrideId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventCapacityOverrides;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/events/${encodeURIComponent(props.eventId ?? "null")}/capacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): IEventRegistrationEventCapacityOverrides =>
    typia.random<IEventRegistrationEventCapacityOverrides>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update capacity override for an event.
 *
 * Authorized admin users can update an existing capacity override for a given
 * event and override ID.
 *
 * Primarily modifies the isOverrideEnabled flag to enable or disable automatic
 * capacity override.
 *
 * The operation validates UUID parameters for eventId and
 * eventCapacityOverrideId.
 *
 * Strictly corresponds to the event_registration_event_capacity_overrides
 * model, ensuring data integrity and audit compliance.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event associated with the
 *   capacity override
 * @param props.eventCapacityOverrideId Unique identifier of the capacity
 *   override record to update
 * @param props.body Update data for existing capacity override including
 *   isOverrideEnabled flag
 * @path /eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.events.capacityOverrides.updateCapacityOverride
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateCapacityOverride(
  connection: IConnection,
  props: updateCapacityOverride.Props,
): Promise<updateCapacityOverride.Response> {
  return true === connection.simulate
    ? updateCapacityOverride.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCapacityOverride.METADATA,
          path: updateCapacityOverride.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateCapacityOverride {
  export type Props = {
    /** Unique identifier of the event associated with the capacity override */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the capacity override record to update */
    eventCapacityOverrideId: string & tags.Format<"uuid">;

    /**
     * Update data for existing capacity override including
     * isOverrideEnabled flag
     */
    body: IEventRegistrationEventCapacityOverride.IUpdate;
  };
  export type Body = IEventRegistrationEventCapacityOverride.IUpdate;
  export type Response = IEventRegistrationEventCapacityOverride;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/events/${encodeURIComponent(props.eventId ?? "null")}/capacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): IEventRegistrationEventCapacityOverride =>
    typia.random<IEventRegistrationEventCapacityOverride>();
  export const simulate = (
    connection: IConnection,
    props: updateCapacityOverride.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateCapacityOverride.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete capacity override for an event.
 *
 * Allows authorized admin users to permanently delete a capacity override
 * linked to a given event.
 *
 * Removes the override completely from the database, causing the event to
 * revert to default automatic capacity behavior.
 *
 * The operation does not implement soft deletion. It requires UUID
 * identification parameters for both event and override records.
 *
 * Fulfills audit and data integrity requirements as per the
 * event_registration_event_capacity_overrides schema.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event associated with the
 *   capacity override to delete
 * @param props.eventCapacityOverrideId Unique identifier of the capacity
 *   override record to delete
 * @path /eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.events.capacityOverrides.eraseCapacityOverride
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseCapacityOverride(
  connection: IConnection,
  props: eraseCapacityOverride.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseCapacityOverride.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseCapacityOverride.METADATA,
          path: eraseCapacityOverride.path(props),
          status: null,
        },
      );
}
export namespace eraseCapacityOverride {
  export type Props = {
    /**
     * Unique identifier of the event associated with the capacity override
     * to delete
     */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the capacity override record to delete */
    eventCapacityOverrideId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/events/:eventId/capacityOverrides/:eventCapacityOverrideId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/events/${encodeURIComponent(props.eventId ?? "null")}/capacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseCapacityOverride.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseCapacityOverride.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
