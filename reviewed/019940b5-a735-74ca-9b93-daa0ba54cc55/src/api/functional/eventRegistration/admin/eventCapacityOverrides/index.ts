import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventCapacityOverride } from "../../../../structures/IEventRegistrationEventCapacityOverride";
import { IPageIEventRegistrationEventCapacityOverride } from "../../../../structures/IPageIEventRegistrationEventCapacityOverride";
import { IEventRegistrationEventCapacityOverrides } from "../../../../structures/IEventRegistrationEventCapacityOverrides";

/**
 * Create event capacity override record.
 *
 * Create a new event capacity override record.
 *
 * Request body must define event ID and the override enablement flag.
 *
 * Accessible only by admins.
 *
 * On success, returns the created capacity override record including audit
 * fields.
 *
 * Supports administrative control over dynamic event capacities.
 *
 * No additional side effects.
 *
 * @param props.connection
 * @param props.body Payload for creating event capacity override
 * @path /eventRegistration/admin/eventCapacityOverrides
 * @accessor api.functional.eventRegistration.admin.eventCapacityOverrides.createEventCapacityOverride
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createEventCapacityOverride(
  connection: IConnection,
  props: createEventCapacityOverride.Props,
): Promise<createEventCapacityOverride.Response> {
  return true === connection.simulate
    ? createEventCapacityOverride.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEventCapacityOverride.METADATA,
          path: createEventCapacityOverride.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createEventCapacityOverride {
  export type Props = {
    /** Payload for creating event capacity override */
    body: IEventRegistrationEventCapacityOverride.ICreate;
  };
  export type Body = IEventRegistrationEventCapacityOverride.ICreate;
  export type Response = IEventRegistrationEventCapacityOverride;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/eventCapacityOverrides",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventCapacityOverrides";
  export const random = (): IEventRegistrationEventCapacityOverride =>
    typia.random<IEventRegistrationEventCapacityOverride>();
  export const simulate = (
    connection: IConnection,
    props: createEventCapacityOverride.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createEventCapacityOverride.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search event capacity overrides with filters and pagination.
 *
 * Returns a paginated list of event capacity override records matching provided
 * search criteria, such as event ID and override flag status.
 *
 * The PATCH request body enables filtering and pagination parameters.
 *
 * This endpoint is restricted to users with the "admin" role, ensuring only
 * authorized personnel manage capacity overrides.
 *
 * Response includes paginated summary data of capacity overrides.
 *
 * This endpoint supports admin workflows to control dynamic capacity adjustment
 * features per event.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for event
 *   capacity overrides
 * @path /eventRegistration/admin/eventCapacityOverrides
 * @accessor api.functional.eventRegistration.admin.eventCapacityOverrides.indexEventCapacityOverrides
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexEventCapacityOverrides(
  connection: IConnection,
  props: indexEventCapacityOverrides.Props,
): Promise<indexEventCapacityOverrides.Response> {
  return true === connection.simulate
    ? indexEventCapacityOverrides.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexEventCapacityOverrides.METADATA,
          path: indexEventCapacityOverrides.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexEventCapacityOverrides {
  export type Props = {
    /**
     * Search criteria and pagination parameters for event capacity
     * overrides
     */
    body: IEventRegistrationEventCapacityOverride.IRequest;
  };
  export type Body = IEventRegistrationEventCapacityOverride.IRequest;
  export type Response = IPageIEventRegistrationEventCapacityOverride;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/eventCapacityOverrides",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventCapacityOverrides";
  export const random = (): IPageIEventRegistrationEventCapacityOverride =>
    typia.random<IPageIEventRegistrationEventCapacityOverride>();
  export const simulate = (
    connection: IConnection,
    props: indexEventCapacityOverrides.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexEventCapacityOverrides.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get event capacity override detail by ID.
 *
 * Fetch a detailed event capacity override record by its unique identifier.
 *
 * Requires the eventCapacityOverrideId path parameter (UUID).
 *
 * Accessible only to users with the "admin" role.
 *
 * Response contains detailed override information such as event reference,
 * override enablement, and timestamps.
 *
 * Useful for admin UI or API consumers managing event capacity policies.
 *
 * @param props.connection
 * @param props.eventCapacityOverrideId Unique identifier of the event capacity
 *   override record
 * @path /eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.eventCapacityOverrides.atEventCapacityOverride
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atEventCapacityOverride(
  connection: IConnection,
  props: atEventCapacityOverride.Props,
): Promise<atEventCapacityOverride.Response> {
  return true === connection.simulate
    ? atEventCapacityOverride.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atEventCapacityOverride.METADATA,
          path: atEventCapacityOverride.path(props),
          status: null,
        },
      );
}
export namespace atEventCapacityOverride {
  export type Props = {
    /** Unique identifier of the event capacity override record */
    eventCapacityOverrideId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventCapacityOverride;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventCapacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): IEventRegistrationEventCapacityOverride =>
    typia.random<IEventRegistrationEventCapacityOverride>();
  export const simulate = (
    connection: IConnection,
    props: atEventCapacityOverride.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atEventCapacityOverride.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update event capacity override by ID.
 *
 * This API endpoint updates the capacity override settings for a specific
 * event. Capacity overrides are administrative controls allowing manual
 * enablement or disablement of automatic adjustments to event capacity. By
 * updating the is_override_enabled flag, administrators can override the
 * system's dynamic capacity adjustment behavior for the identified event.
 *
 * This operation requires authentication with appropriate administrative roles
 * as capacity override settings impact event management globally. It operates
 * on the event_registration_event_capacity_overrides database table.
 *
 * Validation is performed to ensure the provided is_override_enabled value is a
 * boolean. The eventCapacityOverrideId must be a valid UUID representing the
 * existing capacity override record.
 *
 * The updated capacity override object is returned as confirmation of
 * successful operation.
 *
 * @param props.connection
 * @param props.eventCapacityOverrideId Unique identifier of the target event
 *   capacity override record
 * @param props.body New capacity override information
 * @path /eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.eventCapacityOverrides.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target event capacity override record */
    eventCapacityOverrideId: string & tags.Format<"uuid">;

    /** New capacity override information */
    body: IEventRegistrationEventCapacityOverrides.IUpdate;
  };
  export type Body = IEventRegistrationEventCapacityOverrides.IUpdate;
  export type Response = IEventRegistrationEventCapacityOverrides;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/eventCapacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): IEventRegistrationEventCapacityOverrides =>
    typia.random<IEventRegistrationEventCapacityOverrides>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete event capacity override by ID.
 *
 * This operation performs a hard delete of the event capacity override
 * identified by the specified UUID. Removing the capacity override record
 * disables manual overrides for event capacity adjustments, restoring automatic
 * control.
 *
 * Only users with administrative privileges may perform this operation due to
 * its impact on event management.
 *
 * The deletion is permanent; once removed, there is no recovery unless
 * recreated. The API returns no content upon successful deletion.
 *
 * @param props.connection
 * @param props.eventCapacityOverrideId Unique identifier of the target event
 *   capacity override record
 * @path /eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId
 * @accessor api.functional.eventRegistration.admin.eventCapacityOverrides.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target event capacity override record */
    eventCapacityOverrideId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/eventCapacityOverrides/:eventCapacityOverrideId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventCapacityOverrides/${encodeURIComponent(props.eventCapacityOverrideId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventCapacityOverrideId")(() =>
        typia.assert(props.eventCapacityOverrideId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
