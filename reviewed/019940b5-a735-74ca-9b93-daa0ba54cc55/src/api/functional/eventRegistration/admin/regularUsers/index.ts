import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationRegularUser } from "../../../../structures/IEventRegistrationRegularUser";
import { IPageIEventRegistrationRegularUser } from "../../../../structures/IPageIEventRegistrationRegularUser";
export * as emailVerificationTokens from "./emailVerificationTokens/index";
export * as attendees from "./attendees/index";
export * as waitlists from "./waitlists/index";
export * as notifications from "./notifications/index";

/**
 * Retrieve paginated list of regular users.
 *
 * Retrieve a filtered and paginated list of event registration regular users
 * from the system. This operation enables querying based on full name, email
 * verified status, and registration dates.
 *
 * This API is crucial for administrative auditing, user management, and
 * reporting functionalities. Access should be limited to properly authorized
 * roles due to the sensitive nature of user data.
 *
 * This operation closely integrates with the event_registration_regular_users
 * table, utilizing all relevant user profile fields like email, full name,
 * phone number, profile picture, and verification status. The response returns
 * user summaries optimized for list views, supporting further detailed
 * retrieval via the 'at' endpoint.
 *
 * Proper validation ensures only authorized users can execute this search and
 * ensures pagination parameters are respected to maintain system performance
 * and data security.
 *
 * Related operations include retrieving single user detail
 * (/regularUsers/{regularUserId}), updating user information, and removing
 * users.
 *
 * Error handling covers unauthorized access, invalid filter parameters, and
 * system errors to ensure robust server responses.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   regular users
 * @path /eventRegistration/admin/regularUsers
 * @accessor api.functional.eventRegistration.admin.regularUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering regular users */
    body: IEventRegistrationRegularUser.IRequest;
  };
  export type Body = IEventRegistrationRegularUser.IRequest;
  export type Response = IPageIEventRegistrationRegularUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/regularUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/regularUsers";
  export const random = (): IPageIEventRegistrationRegularUser.ISummary =>
    typia.random<IPageIEventRegistrationRegularUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed regular user information by ID.
 *
 * Retrieve detailed information about a regular user by their unique ID. This
 * includes all profile data such as email, full name, phone number, profile
 * picture URL, and email verification status.
 *
 * This operation is intended for admin use or authorized contexts where
 * sensitive user data must be accessed securely.
 *
 * The user ID must be a valid UUID string. Appropriate authorization checks
 * must be enforced.
 *
 * Errors include handling for invalid IDs, non-existent users, and permission
 * denials.
 *
 * Related endpoints include user list retrieval (/regularUsers), update, and
 * delete operations.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @path /eventRegistration/admin/regularUsers/:regularUserId
 * @accessor api.functional.eventRegistration.admin.regularUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationRegularUser;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/regularUsers/:regularUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): IEventRegistrationRegularUser =>
    typia.random<IEventRegistrationRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update regular user profile by ID.
 *
 * Update profile information of a regular user by their unique ID. Fields such
 * as email, full name, phone number, profile picture, and email verification
 * flag can be updated.
 *
 * Authorization is limited to admins. This operation ensures data consistency
 * and prevents unauthorized modifications.
 *
 * The user ID must be a valid UUID. Request body schema enforces data
 * correctness.
 *
 * Responses include the updated user record or error messages for validation
 * failures.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.body Data for updating regular user profile
 * @path /eventRegistration/admin/regularUsers/:regularUserId
 * @accessor api.functional.eventRegistration.admin.regularUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Data for updating regular user profile */
    body: IEventRegistrationRegularUser.IUpdate;
  };
  export type Body = IEventRegistrationRegularUser.IUpdate;
  export type Response = IEventRegistrationRegularUser;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/regularUsers/:regularUserId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): IEventRegistrationRegularUser =>
    typia.random<IEventRegistrationRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete regular user by ID.
 *
 * Delete a regular user permanently by their unique ID. This operation cascades
 * to all related user records such as verification tokens and signups.
 *
 * Only admins are authorized to perform this delete action for security and
 * compliance.
 *
 * The user ID must be a valid UUID.
 *
 * Errors handled include non-existent user IDs and permission issues.
 *
 * This is a hard delete operation with no restoration option.
 *
 * Other user management endpoints include search, retrieve, and update.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @path /eventRegistration/admin/regularUsers/:regularUserId
 * @accessor api.functional.eventRegistration.admin.regularUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/regularUsers/:regularUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
