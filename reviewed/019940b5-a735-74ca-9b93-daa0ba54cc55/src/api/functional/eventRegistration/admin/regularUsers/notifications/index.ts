import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationNotification } from "../../../../../structures/IEventRegistrationNotification";

/**
 * Create a notification for a regular user.
 *
 * Create a new notification for a regular user. The notification must include
 * type, content, and other relevant details. This operation is typically used
 * by system processes or administrators to inform users about registration
 * confirmations, waitlist promotions, event changes, and other important
 * updates.
 *
 * Security concerns require that only authorized roles can create notifications
 * to prevent spam or malicious entries.
 *
 * This operation saves the notification in the
 * 'event_registration_notifications' table, linking it to the specified regular
 * user.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.body Notification creation details for the regular user
 * @path /eventRegistration/admin/regularUsers/:regularUserId/notifications
 * @accessor api.functional.eventRegistration.admin.regularUsers.notifications.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Notification creation details for the regular user */
    body: IEventRegistrationNotification.ICreate;
  };
  export type Body = IEventRegistrationNotification.ICreate;
  export type Response = IEventRegistrationNotification;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications`;
  export const random = (): IEventRegistrationNotification =>
    typia.random<IEventRegistrationNotification>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a notification of a regular user.
 *
 * Update an existing notification of a regular user identified by notification
 * ID. Common updates include changing the read status or modifying notification
 * content or type.
 *
 * The operation ensures the notification belongs to the specified user and
 * enforces authorization checks.
 *
 * The 'event_registration_notifications' table stores the notification details
 * linked to the regular users. Update operations are critical for notification
 * lifecycle management such as marking messages read or correcting content.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.notificationId Unique identifier of the target notification
 * @param props.body Notification update data for the regular user
 * @path /eventRegistration/admin/regularUsers/:regularUserId/notifications/:notificationId
 * @accessor api.functional.eventRegistration.admin.regularUsers.notifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;

    /** Notification update data for the regular user */
    body: IEventRegistrationNotification.IUpdate;
  };
  export type Body = IEventRegistrationNotification.IUpdate;
  export type Response = IEventRegistrationNotification;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEventRegistrationNotification =>
    typia.random<IEventRegistrationNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification of a regular user by notification ID. This operation
 * permanently removes the notification record from the system.
 *
 * Authorization is required to ensure that only admins or authorized users can
 * delete notifications, preventing accidental or malicious data loss.
 *
 * The underlying database is 'event_registration_notifications' where
 * notifications are linked to users or as system messages. After deletion, the
 * notification will no longer be accessible or retrievable.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.notificationId Unique identifier of the target notification
 * @path /eventRegistration/admin/regularUsers/:regularUserId/notifications/:notificationId
 * @accessor api.functional.eventRegistration.admin.regularUsers.notifications.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
