import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a regular user registered in the system with login credentials and
 * profile information.
 *
 * Includes email verification status and timestamps for auditing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationRegularUser = {
  /** Unique identifier of the user */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address of the regular user for login authentication and
   * notifications
   */
  email: string;

  /** Hashed password for secure authentication; never store plain passwords */
  password_hash: string;

  /** Full legal or preferred name of the user */
  full_name: string;

  /** Optional phone number for contacting the user */
  phone_number?: string | null | undefined;

  /** Optional URL of the user's profile picture */
  profile_picture_url?: string | null | undefined;

  /** Email verification status of the user, true if verified */
  email_verified: boolean;

  /** Timestamp when the user record was created (ISO 8601) */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the user record was last updated (ISO 8601) */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationRegularUser {
  /**
   * Request body for creating a regular user account. Must include email,
   * password hash, and profile data.
   */
  export type ICreate = {
    /**
     * User's unique email address used for login authentication.
     *
     * Must be a valid email format.
     *
     * Unique in the system.
     */
    email: string;

    /**
     * Hashed password for secure authentication; never store plain
     * passwords.
     */
    password_hash: string;

    /** User's full legal or preferred name. */
    full_name: string;

    /** User's phone number, optional but useful for contacting. */
    phone_number?: string | null | undefined;

    /** URL of user's profile picture, optional. */
    profile_picture_url?: string | null | undefined;

    /**
     * Flag indicating if user has verified their email address.
     *
     * Users start with this set to false by default.
     */
    email_verified: boolean;
  };

  /** Request body containing login credentials of the regular user. */
  export type ILogin = {
    /** User's email address for login. */
    email: string;

    /** Hashed password of the user. */
    password_hash: string;
  };

  /** Request body containing refresh token information. */
  export type IRefresh = {
    /** Refresh token to obtain new access tokens. */
    refresh_token: string;
  };

  /**
   * Authorized response including JWT tokens for the newly registered regular
   * user.
   */
  export type IAuthorized = {
    /** Unique ID of the authorized user. */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address of the regular user for login authentication and
     * notifications
     */
    email: string;

    /**
     * Hashed password for secure authentication; never store plain
     * passwords
     */
    password_hash: string;

    /** Full legal or preferred name of the user */
    full_name: string;

    /** Optional phone number for contacting the user */
    phone_number?: string | null | undefined;

    /** Optional URL of the user's profile picture */
    profile_picture_url?: string | null | undefined;

    /** Email verification status of the user, true if verified */
    email_verified: boolean;

    /** Timestamp when the user record was created (ISO 8601) */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user record was last updated (ISO 8601) */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request parameters for querying and filtering regular users.
   *
   * Includes pagination, filtering by name, email verification, and creation
   * date.
   */
  export type IRequest = {
    /**
     * Search string to filter users by full name.
     *
     * Optional; supports partial matching.
     */
    full_name?: string | undefined;

    /**
     * Filter based on email verification status.
     *
     * Optional; true filters verified users, false for unverified.
     */
    email_verified?: boolean | undefined;

    /**
     * Date-time string to filter users created after this datetime.
     *
     * Optional; ISO 8601 date string.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Date-time string to filter users created before this datetime.
     *
     * Optional; ISO 8601 date string.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination: page number.
     *
     * Optional; unsigned 32-bit integer.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Pagination: number of records per page.
     *
     * Optional; unsigned 32-bit integer.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /** Fields of a regular user entity that can be updated. */
  export type IUpdate = {
    /**
     * User's email address.
     *
     * Updatable field; must remain unique.
     */
    email?: string | null | undefined;

    /**
     * Hashed password string.
     *
     * Updatable for password changes.
     */
    password_hash?: string | null | undefined;

    /**
     * User's full name.
     *
     * Optional update.
     */
    full_name?: string | null | undefined;

    /**
     * User's phone number.
     *
     * Optional; can be null.
     */
    phone_number?: string | null | undefined;

    /**
     * URL to user's profile picture.
     *
     * Optional; can be null.
     */
    profile_picture_url?: string | null | undefined;

    /**
     * Email verification status.
     *
     * Optional update.
     */
    email_verified?: boolean | null | undefined;

    /**
     * Timestamp of last update.
     *
     * Auto-set by system; generally not supplied externally.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary data for regular users suitable for list views.
   *
   * Contains minimal essential public facing information.
   */
  export type ISummary = {
    /** Unique identifier of the user */
    id: string & tags.Format<"uuid">;

    /** Full legal or preferred name */
    full_name: string;

    /** Email verification status */
    email_verified: boolean;
  };
}
