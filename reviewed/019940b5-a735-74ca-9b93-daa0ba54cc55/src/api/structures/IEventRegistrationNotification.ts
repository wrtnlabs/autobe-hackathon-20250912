import { tags } from "typia";

/**
 * Main entity schema representing a notification record. Fields include unique
 * ID, user association, type, content, read flag, creation/update timestamps,
 * and optional deleted timestamp. Provides comprehensive details suitable for
 * API responses and detailed views.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationNotification = {
  /** Unique identifier of the notification; UUID string */
  id: string & tags.Format<"uuid">;

  /**
   * User ID receiving or associated with notification; nullable for
   * system-wide messages
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Kind of notification; business domain values like "registration
   * confirmation" or "waitlist promotion"
   */
  type: string;

  /** Text content with detailed information about the notification */
  content: string;

  /** Flag indicating if the notification has been read by the recipient */
  read: boolean;

  /** ISO 8601 timestamp of creation time */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 timestamp of last update time */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Nullable deletion timestamp if the notification was soft deleted; null if
   * active
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEventRegistrationNotification {
  /**
   * Request schema for creating a notification. Required fields include type,
   * content, and read flag. Optional user_id allows targeting specific users
   * or indicating system-wide messages. Used as request body for POST
   * creation.
   */
  export type ICreate = {
    /**
     * User ID to receive this notification; nullable for system-wide
     * messages
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Notification type; e.g., "registration confirmation", "waitlist
     * promotion"
     */
    type: string;

    /** Notification textual content describing the event or action */
    content: string;

    /** Whether this notification is read; usually initialized to false */
    read: boolean;
  };

  /**
   * Request schema for updating a notification. All properties are optional
   * and nullable to allow partial updates. Includes user_id, type, content,
   * read flag, and deleted_at timestamp. Used as request body for PUT
   * update.
   */
  export type IUpdate = {
    /** Optional user ID recipient; nullable to clear association */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional notification type string; nullable to clear value (rare) */
    type?: string | null | undefined;

    /** Optional content text; nullable clears content (unusual) */
    content?: string | null | undefined;

    /** Optional read flag indicating the notification read status */
    read?: boolean | null | undefined;

    /** Optional deletion timestamp; nullable to mark as deleted or restored */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Request criteria for filtering and paginating notifications. */
  export type IRequest = {
    /** Page number for paginated notification results. */
    page?: (number & tags.Minimum<0>) | null | undefined;

    /** Number of notifications to return per page. */
    limit?: (number & tags.Minimum<1>) | null | undefined;

    /** Filter notifications by their read status. */
    read?: boolean | null | undefined;

    /** Search term to filter notification content or types. */
    search?: string | null | undefined;
  };

  /**
   * Summary notification entity containing essential details for displaying
   * notifications in lists. Includes read status and soft deletion tracking.
   */
  export type ISummary = {
    /** Primary Key UUID of the notification */
    id: string & tags.Format<"uuid">;

    /**
     * Nullable reference to the user receiving or triggering the
     * notification
     */
    user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of notification, e.g., registration confirmation, waitlist
     * promotion
     */
    type: string;

    /** Detailed notification content describing the event or action */
    content: string;

    /** Flag indicating whether the notification has been read */
    read: boolean;

    /** Timestamp when the notification was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the notification was last updated */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the notification was soft deleted; null if not deleted */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
