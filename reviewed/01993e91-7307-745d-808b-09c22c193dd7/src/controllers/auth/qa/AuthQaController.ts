import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthQaJoin } from "../../../providers/postauthQaJoin";
import { QaAuth } from "../../../decorators/QaAuth";
import { QaPayload } from "../../../decorators/payload/QaPayload";
import { postauthQaLogin } from "../../../providers/postauthQaLogin";
import { postauthQaRefresh } from "../../../providers/postauthQaRefresh";

import { ITaskManagementQa } from "../../../api/structures/ITaskManagementQa";

@Controller("/auth/qa")
export class AuthQaController {
  /**
   * Create new QA user account and issue JWT tokens.
   *
   * Create a new QA user account. The request must include a valid email
   * address, password information, and the full name of the QA user. The system
   * will securely hash the password and store the data in the
   * task_management_qa table. An authorization token is issued upon successful
   * creation to allow immediate authentication. This operation facilitates
   * onboarding of quality assurance personnel in the task management platform.
   *
   * Account email must be unique among QA users to prevent duplicate accounts.
   * Password policies must be adhered to (e.g., minimum length, hashing). The
   * response includes JWT tokens for authorized access.
   *
   * This operation is intended for public access without prior authentication.
   *
   * Use this alongside /auth/qa/login and /auth/qa/refresh for complete auth
   * lifecycle.
   *
   * Ensure error handling covers existing emails and invalid input formats.
   *
   * This operation references the task_management_qa table where user
   * credentials and metadata are stored.
   *
   * @param connection
   * @param body QA user creation request body
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @QaAuth()
    qa: QaPayload,
    @TypedBody()
    body: ITaskManagementQa.ICreate,
  ): Promise<ITaskManagementQa.IAuthorized> {
    try {
      return await postauthQaJoin({
        qa,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * QA user login to issue access tokens.
   *
   * Authenticate existing QA user with email and password. The system validates
   * credentials against stored hashed passwords in the task_management_qa
   * table. Upon success, JWT access and refresh tokens are generated and
   * returned in the response. Authentication enables QA personnel to access
   * task management resources securely.
   *
   * Login request requires valid email and password formats. Failure to
   * authenticate must return errors.
   *
   * This endpoint is accessible without prior authentication.
   *
   * Use together with /auth/qa/join and /auth/qa/refresh for the full auth
   * process.
   *
   * @param connection
   * @param body QA user login request payload
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @QaAuth()
    qa: QaPayload,
    @TypedBody()
    body: ITaskManagementQa.ILogin,
  ): Promise<ITaskManagementQa.IAuthorized> {
    try {
      return await postauthQaLogin({
        qa,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh QA user access token.
   *
   * Refresh JWT tokens using a valid refresh token for QA users. This operation
   * prolongs session validity without requiring re-authentication with
   * credentials.
   *
   * The request must include a valid refresh token linked to the QA user in the
   * task_management_qa table. Successful operations return new JWT tokens and
   * authorization data.
   *
   * This endpoint requires an authenticated user with a valid refresh token.
   *
   * Utilize this API alongside /auth/qa/join and /auth/qa/login for complete
   * token lifecycle management.
   *
   * @param connection
   * @param body QA user token refresh request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @QaAuth()
    qa: QaPayload,
    @TypedBody()
    body: ITaskManagementQa.IRefresh,
  ): Promise<ITaskManagementQa.IAuthorized> {
    try {
      return await postauthQaRefresh({
        qa,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
