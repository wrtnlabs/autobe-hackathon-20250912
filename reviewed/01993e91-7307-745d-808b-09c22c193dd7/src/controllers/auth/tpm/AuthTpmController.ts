import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthTpmJoin } from "../../../providers/postauthTpmJoin";
import { postauthTpmLogin } from "../../../providers/postauthTpmLogin";
import { postauthTpmRefresh } from "../../../providers/postauthTpmRefresh";

import { ITaskManagementTpm } from "../../../api/structures/ITaskManagementTpm";

@Controller("/auth/tpm")
export class AuthTpmController {
  /**
   * Register a new TPM user and issue JWT tokens (task_management_tpm).
   *
   * Registers a new Technical Project Manager (TPM) user, creating an account
   * with the necessary credentials and issuing initial JWT tokens. This
   * operation uses the task_management_tpm table, handling email,
   * password_hash, name, and timestamps. It is a public endpoint for user
   * registration and requires no prior authentication.
   *
   * @param connection
   * @param body Registration details for TPM user including email, password,
   *   and name.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITaskManagementTpm.IJoin,
  ): Promise<ITaskManagementTpm.IAuthorized> {
    try {
      return await postauthTpmJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login for TPM user to obtain JWT tokens (task_management_tpm).
   *
   * Authenticate an existing Technical Project Manager (TPM) user by verifying
   * email and password credentials, issuing JWT tokens upon successful
   * authentication. This operation uses the task_management_tpm table for
   * credential validation and requires no prior authentication.
   *
   * @param connection
   * @param body Login credentials for TPM user including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITaskManagementTpm.ILogin,
  ): Promise<ITaskManagementTpm.IAuthorized> {
    try {
      return await postauthTpmLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for TPM user (task_management_tpm).
   *
   * Refresh the JWT access token for a Technical Project Manager (TPM) user
   * using a valid refresh token. Returns new authorized tokens. Operation
   * interacts with the task_management_tpm table manage tokens in the
   * authentication workflow.
   *
   * @param connection
   * @param body Refresh token payload to request new access token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITaskManagementTpm.IRefresh,
  ): Promise<ITaskManagementTpm.IAuthorized> {
    try {
      return await postauthTpmRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
