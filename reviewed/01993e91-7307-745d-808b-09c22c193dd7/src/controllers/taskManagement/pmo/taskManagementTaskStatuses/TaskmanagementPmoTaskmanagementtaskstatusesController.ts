import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoTaskManagementTaskStatuses } from "../../../../providers/posttaskManagementPmoTaskManagementTaskStatuses";
import { PmoAuth } from "../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../decorators/payload/PmoPayload";
import { patchtaskManagementPmoTaskManagementTaskStatuses } from "../../../../providers/patchtaskManagementPmoTaskManagementTaskStatuses";
import { gettaskManagementPmoTaskManagementTaskStatusesId } from "../../../../providers/gettaskManagementPmoTaskManagementTaskStatusesId";
import { puttaskManagementPmoTaskManagementTaskStatusesId } from "../../../../providers/puttaskManagementPmoTaskManagementTaskStatusesId";
import { deletetaskManagementPmoTaskManagementTaskStatusesId } from "../../../../providers/deletetaskManagementPmoTaskManagementTaskStatusesId";

import { ITaskManagementTaskStatus } from "../../../../api/structures/ITaskManagementTaskStatus";
import { IPageITaskManagementTaskStatuses } from "../../../../api/structures/IPageITaskManagementTaskStatuses";
import { ITaskManagementTaskStatuses } from "../../../../api/structures/ITaskManagementTaskStatuses";

@Controller("/taskManagement/pmo/taskManagementTaskStatuses")
export class TaskmanagementPmoTaskmanagementtaskstatusesController {
  /**
   * Create a new taskManagementTaskStatus record.
   *
   * The client must provide a unique code, a human-readable name, and
   * optionally a description for the new status.
   *
   * Only authorized users with roles TPM, PM, or PMO may perform this creation.
   *
   * The system enforces uniqueness of the code and validates validity of the
   * inputs.
   *
   * Returns the full created record including timestamps.
   *
   * Use this API to extend or customize task lifecycle statuses as needed.
   *
   * @param connection
   * @param body Payload for creating taskManagementTaskStatus
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementTaskStatus.ICreate,
  ): Promise<ITaskManagementTaskStatus> {
    try {
      return await posttaskManagementPmoTaskManagementTaskStatuses({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve list of taskManagementTaskStatuses.
   *
   * Retrieve a filtered and paginated list of taskManagementTaskStatuses.
   *
   * The operation supports searching by code, name, and provides pagination
   * controls. Only authenticated roles such as TPM, PM, PMO, developers,
   * designers, and QA can access this list.
   *
   * This endpoint returns summarized data intended for listing and selection.
   *
   * Related APIs include retrieval of individual status details and creation of
   * new statuses.
   *
   * Proper filtering and pagination parameters improve performance and
   * usability.
   *
   * @param connection
   * @param body Search criteria and pagination controls for
   *   taskManagementTaskStatuses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementTaskStatuses.IRequest,
  ): Promise<IPageITaskManagementTaskStatuses.ISummary> {
    try {
      return await patchtaskManagementPmoTaskManagementTaskStatuses({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get taskManagementTaskStatus details by ID.
   *
   * Retrieve detailed information of a taskManagementTaskStatus by its unique
   * ID.
   *
   * Only authenticated users including TPM, PM, PMO, developers, designers, and
   * QA can access this information.
   *
   * The operation returns the full details including code, name, description,
   * and timestamp information.
   *
   * It is important to handle errors when the requested ID does not exist.
   *
   * This endpoint is commonly used in conjunction with the status list and
   * creation APIs.
   *
   * @param connection
   * @param id Unique UUID identifier for the target taskManagementTaskStatus
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskStatus> {
    try {
      return await gettaskManagementPmoTaskManagementTaskStatusesId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific task status record in task_management_task_statuses
   * table.
   *
   * This API allows updating a specific task status entity which represents
   * status states for tasks within the system.
   *
   * It operates on the task_management_task_statuses table where each record
   * defines a distinct task status like 'To Do', 'In Progress', or 'Done'. The
   * update operation modifies the code (unique identifier), the human-readable
   * name, and an optional descriptive explanation of the status.
   *
   * Security considerations include appropriate permission checks to restrict
   * updates to authorized roles only, typically administrators or PMO roles.
   *
   * The endpoint receives the task status 'id' as a path parameter and expects
   * a request body with updated fields following strict validation rules
   * including code uniqueness.
   *
   * Upon successful update, the full updated task status record is returned,
   * including timestamps indicating creation and last update times.
   *
   * This operation supports maintaining accurate and up-to-date task lifecycle
   * states, crucial for task tracking and workflow management.
   *
   * @param connection
   * @param id Unique identifier of the target task status record
   * @param body Updated data for the task status entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskStatuses.IUpdate,
  ): Promise<ITaskManagementTaskStatuses> {
    try {
      return await puttaskManagementPmoTaskManagementTaskStatusesId({
        pmo,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a task status record from the task_management_task_statuses table.
   *
   * This API permanently removes a specific task status record identified by ID
   * from the task_management_task_statuses table.
   *
   * It ensures the status is no longer available in task lifecycle workflows.
   *
   * Administrative privileges are required to invoke this operation.
   *
   * Once deleted, the record cannot be restored.
   *
   * Error handling includes responding with an appropriate error if the record
   * does not exist.
   *
   * Careful permission management must be in place due to potential impacts to
   * business workflows reliant on task status data.
   *
   * No request body needed. The path parameter 'id' uniquely identifies the
   * task status to remove.
   *
   * @param connection
   * @param id Target task status record ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoTaskManagementTaskStatusesId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
