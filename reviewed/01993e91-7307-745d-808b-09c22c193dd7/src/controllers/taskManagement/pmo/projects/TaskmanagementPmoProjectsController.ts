import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoProjects } from "../../../../providers/posttaskManagementPmoProjects";
import { PmoAuth } from "../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../decorators/payload/PmoPayload";
import { patchtaskManagementPmoProjects } from "../../../../providers/patchtaskManagementPmoProjects";
import { gettaskManagementPmoProjectsProjectId } from "../../../../providers/gettaskManagementPmoProjectsProjectId";
import { puttaskManagementPmoProjectsProjectId } from "../../../../providers/puttaskManagementPmoProjectsProjectId";
import { deletetaskManagementPmoProjectsProjectId } from "../../../../providers/deletetaskManagementPmoProjectsProjectId";

import { ITaskManagementProject } from "../../../../api/structures/ITaskManagementProject";
import { IPageITaskManagementProject } from "../../../../api/structures/IPageITaskManagementProject";

@Controller("/taskManagement/pmo/projects")
export class TaskmanagementPmoProjectsController {
  /**
   * Create a new project entity in the system.
   *
   * Request body must supply project details including ownerId, code, name,
   * optional description.
   *
   * The system validates all inputs and persists the new project.
   *
   * On success, returns the detailed project entity including generated ID and
   * timestamps.
   *
   * Only users with creation permissions may perform this operation.
   *
   * This operation is based on the task_management_projects Prisma table.
   *
   * @param connection
   * @param body Project creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementProject.ICreate,
  ): Promise<ITaskManagementProject> {
    try {
      return await posttaskManagementPmoProjects({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of projects.
   *
   * Retrieve a paginated list of projects supporting advanced filtering,
   * sorting, and pagination.
   *
   * This operation enables browsing and searching projects with criteria like
   * code, name, and owner information.
   *
   * Filters and pagination parameters are included in the request body.
   *
   * Response returns summarized information for each project.
   *
   * Access is allowed to all authenticated users. Pagination helps to manage
   * large result sets.
   *
   * No path parameters.
   *
   * This operation corresponds to the task_management_projects Prisma table.
   *
   * @param connection
   * @param body Pagination, filters, and search criteria for projects
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementProject.IRequest,
  ): Promise<IPageITaskManagementProject.ISummary> {
    try {
      return await patchtaskManagementPmoProjects({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed project information by ID.
   *
   * Retrieve full details of a single project entity.
   *
   * This operation fetches the project data identified by projectId.
   *
   * Includes all properties such as owner, code, name, description, creation,
   * and update timestamps.
   *
   * Only authenticated and authorized users may access this detailed
   * information.
   *
   * Path parameter `projectId` is required and must be a valid UUID.
   *
   * Response returns the detailed project entity.
   *
   * Related operations for listing projects and managing projects complement
   * this.
   *
   * This is based on the task_management_projects Prisma table.
   *
   * @param connection
   * @param projectId Unique identifier of the project
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":projectId")
  public async at(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementProject> {
    try {
      return await gettaskManagementPmoProjectsProjectId({
        pmo,
        projectId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific project by projectId.
   *
   * Update an existing project identified by the projectId path parameter. This
   * operation allows modifying project details such as the owner (a TPM user),
   * unique code, descriptive name, and optional description.
   *
   * The operation ensures data integrity by checking the projectId exists and
   * validates fields according to the schema. It updates the record's
   * timestamps for last modification.
   *
   * Authorization is restricted to users with roles TPM, PM, or PMO, who manage
   * project resources effectively.
   *
   * This operation is associated with the task_management_projects table in the
   * Prisma schema, which defines projects including ownership, codes, and audit
   * timestamps with soft delete capability.
   *
   * The request body must provide fields conforming to the
   * ITaskManagementProject.IUpdate type, ensuring valid data types and value
   * constraints.
   *
   * The response returns the complete project information after the update.
   *
   * No data related to soft deletion is modified here; to delete a project, use
   * the dedicated erase operation.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Project update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":projectId")
  public async updateProject(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementProject.IUpdate,
  ): Promise<ITaskManagementProject> {
    try {
      return await puttaskManagementPmoProjectsProjectId({
        pmo,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific project by projectId.
   *
   * Permanently remove the project record identified by projectId from the
   * database, or mark it as deleted if soft delete is implemented.
   *
   * Only authorized roles TPM, PM, and PMO may perform this operation.
   *
   * This operation maps to the task_management_projects Prisma schema table.
   *
   * Deleting a project removes all associated boards and tasks implicitly due
   * to cascade rules.
   *
   * Once deleted, the project cannot be retrieved.
   *
   * No request body is required for this operation.
   *
   * Response contains no content on success.
   *
   * Ensure callers confirm intent before invoking this operation as it is
   * irreversible.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":projectId")
  public async eraseProject(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoProjectsProjectId({
        pmo,
        projectId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
