import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoTaskManagementPmos } from "../../../../../providers/posttaskManagementPmoTaskManagementPmos";
import { PmoAuth } from "../../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../../decorators/payload/PmoPayload";
import { patchtaskManagementPmoTaskManagementPmos } from "../../../../../providers/patchtaskManagementPmoTaskManagementPmos";
import { gettaskManagementPmoTaskManagementPmosId } from "../../../../../providers/gettaskManagementPmoTaskManagementPmosId";
import { puttaskManagementPmoTaskManagementPmosId } from "../../../../../providers/puttaskManagementPmoTaskManagementPmosId";
import { deletetaskManagementPmoTaskManagementPmosId } from "../../../../../providers/deletetaskManagementPmoTaskManagementPmosId";

import { ITaskManagementPmo } from "../../../../../api/structures/ITaskManagementPmo";
import { IPageITaskManagementPmo } from "../../../../../api/structures/IPageITaskManagementPmo";

@Controller("/taskManagement/pmo/taskManagement/pmos")
export class TaskmanagementPmoTaskmanagementPmosController {
  /**
   * Create a new PMO user.
   *
   * Create a new Project Management Officer (PMO) user with required details.
   *
   * The request body must contain valid user data as per
   * ITaskManagementPmo.ICreate specification including email and
   * password_hash.
   *
   * On success, the full PMO entity with timestamps and possible soft delete
   * fields is returned.
   *
   * Only users with the 'pmo' role are authorized to call this operation for
   * security.
   *
   * @param connection
   * @param body PMO creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createPmo(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPmo.ICreate,
  ): Promise<ITaskManagementPmo> {
    try {
      return await posttaskManagementPmoTaskManagementPmos({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search filtered, paginated PMO list.
   *
   * Search and list PMO users with filtering and pagination.
   *
   * Supports search criteria such as name, email, status, and pagination
   * details passed in the request body matching ITaskManagementPmo.IRequest.
   *
   * The response contains paginated summaries of PMOs conforming to
   * IPageITaskManagementPmo.ISummary.
   *
   * Access is granted only to users with 'pmo' role for secure data management.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for PMO filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexPmo(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPmo.IRequest,
  ): Promise<IPageITaskManagementPmo.ISummary> {
    try {
      return await patchtaskManagementPmoTaskManagementPmos({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed PMO information by ID.
   *
   * Retrieve detailed information about a specific PMO user by UUID.
   *
   * This operation returns the complete PMO entity information including all
   * relevant fields.
   *
   * Only users with the 'pmo' role are authorized to access this endpoint.
   *
   * No request body is needed for this GET operation.
   *
   * @param connection
   * @param id Unique identifier of the PMO to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atPmo(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementPmo> {
    try {
      return await gettaskManagementPmoTaskManagementPmosId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a PMO user by ID.
   *
   * Update the details of a specific Project Management Officer (PMO) user,
   * identified by their unique ID.
   *
   * This operation allows modification of PMO user attributes such as email,
   * password hash, and name. It serves administrative functions where PMO user
   * information needs to be maintained. Security is enforced to allow only
   * authorized users with the 'pmo' role to perform updates.
   *
   * The underlying database entity is task_management_pmo, stored as a UUID
   * primary key with related fields for email and authentication data. Upon
   * successful update, the updated PMO user's information is returned.
   *
   * This operation does not allow updating soft-deleted users, nor does it
   * override data validation rules such as email uniqueness. Validation errors
   * or authorization failures should result in appropriate error responses.
   *
   * Related operations include creating new PMO users and deleting existing
   * ones, all of which are secured and role-based.
   *
   * @param connection
   * @param id Unique identifier of the target PMO user
   * @param body Update payload for PMO user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementPmo.IUpdate,
  ): Promise<ITaskManagementPmo> {
    try {
      return await puttaskManagementPmoTaskManagementPmosId({
        pmo,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a PMO user by ID.
   *
   * Permanently delete a specific Project Management Officer (PMO) user from
   * the database by their unique ID.
   *
   * This operation irreversibly removes the PMO user record. It is restricted
   * to authorized users with the 'pmo' role to prevent accidental or
   * unauthorized deletions.
   *
   * Any related records depending on this PMO user should be handled cautiously
   * by the system to maintain data integrity.
   *
   * No response body is returned after successful deletion.
   *
   * Operations related to creation and update of PMO users complement this
   * delete operation for full lifecycle management.
   *
   * @param connection
   * @param id Unique identifier of the target PMO user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoTaskManagementPmosId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
