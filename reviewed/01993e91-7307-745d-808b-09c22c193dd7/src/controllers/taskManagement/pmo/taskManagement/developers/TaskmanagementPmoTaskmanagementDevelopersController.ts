import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoTaskManagementDevelopers } from "../../../../../providers/posttaskManagementPmoTaskManagementDevelopers";
import { PmoAuth } from "../../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../../decorators/payload/PmoPayload";
import { puttaskManagementPmoTaskManagementDevelopersId } from "../../../../../providers/puttaskManagementPmoTaskManagementDevelopersId";
import { deletetaskManagementPmoTaskManagementDevelopersId } from "../../../../../providers/deletetaskManagementPmoTaskManagementDevelopersId";

import { ITaskManagementDeveloper } from "../../../../../api/structures/ITaskManagementDeveloper";

@Controller("/taskManagement/pmo/taskManagement/developers")
export class TaskmanagementPmoTaskmanagementDevelopersController {
  /**
   * Create a new developer user with mandatory fields including email,
   * password_hash, and name. The system will assign a unique UUID primary key
   * and manage created_at and updated_at timestamps automatically. This
   * operation is restricted to authorized users who can manage developer
   * accounts.
   *
   * Security considerations include secure password storage via hashing and
   * unique email validation. Soft delete support via deleted_at allows safe
   * recovery.
   *
   * This operation interacts directly with the task_management_developer Prisma
   * schema model. It does not accept or return sensitive password data except
   * hashed. Returns the created developer entity information.
   *
   * Errors are returned for duplicate emails or validation failures.
   *
   * Authorization roles for this endpoint are users with assignment and
   * creation rights typically TPM, PM, or PMO roles.
   *
   * @param connection
   * @param body Information required to create a developer user account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementDeveloper.ICreate,
  ): Promise<ITaskManagementDeveloper> {
    try {
      return await posttaskManagementPmoTaskManagementDevelopers({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update developer information by ID.
   *
   * Update an existing developer by id. Changes can include email,
   * password_hash, and name.
   *
   * The system will update the updated_at timestamp upon modification. Soft
   * deleted developers (deleted_at is set) cannot be updated.
   *
   * This operation requires authentication and authorization for user
   * management roles. It interacts with the task_management_developer Prisma
   * schema model.
   *
   * Errors are returned for invalid ids, duplicate emails, or validation
   * issues.
   *
   * Authorization roles include admin users or their equivalents who manage
   * developer accounts.
   *
   * @param connection
   * @param id Unique identifier of the developer to update
   * @param body Updated developer information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementDeveloper.IUpdate,
  ): Promise<ITaskManagementDeveloper> {
    try {
      return await puttaskManagementPmoTaskManagementDevelopersId({
        pmo,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete developer user by ID.
   *
   * Soft delete a developer user by marking the deleted_at timestamp. The
   * record remains in the database but is excluded from active queries.
   *
   * Only authorized users can perform deletion. This operation interacts with
   * the task_management_developer Prisma schema.
   *
   * Errors will occur if the developer does not exist or is already deleted.
   *
   * @param connection
   * @param id Unique identifier of the developer to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoTaskManagementDevelopersId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
