import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementTpmNotificationPreferences } from "../../../../providers/patchtaskManagementTpmNotificationPreferences";
import { TpmAuth } from "../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../decorators/payload/TpmPayload";
import { gettaskManagementTpmNotificationPreferencesId } from "../../../../providers/gettaskManagementTpmNotificationPreferencesId";
import { puttaskManagementTpmNotificationPreferencesId } from "../../../../providers/puttaskManagementTpmNotificationPreferencesId";
import { deletetaskManagementTpmNotificationPreferencesId } from "../../../../providers/deletetaskManagementTpmNotificationPreferencesId";

import { IPageITaskManagementNotificationPreferences } from "../../../../api/structures/IPageITaskManagementNotificationPreferences";
import { ITaskManagementNotificationPreferences } from "../../../../api/structures/ITaskManagementNotificationPreferences";

@Controller("/taskManagement/tpm/notificationPreferences")
export class TaskmanagementTpmNotificationpreferencesController {
  /**
   * Search notification preferences with filtering and pagination.
   *
   * Retrieve notification preferences with filtering and pagination.
   *
   * This operation enables users with roles tpm, pm, pmo, developer, designer,
   * or qa to search their notification preferences by preference key, delivery
   * method, or enabled status.
   *
   * The response is paginated to efficiently handle potentially large data
   * sets.
   *
   * Clients use this alongside other preference management endpoints to fully
   * manage their notifications.
   *
   * @param connection
   * @param body Search criteria for notification preference filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexNotificationPreferences(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementNotificationPreferences.IRequest,
  ): Promise<IPageITaskManagementNotificationPreferences> {
    try {
      return await patchtaskManagementTpmNotificationPreferences({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve notification preference detail by ID.
   *
   * Retrieve the notification preference record for given ID.
   *
   * Authorized users with roles tpm, pm, pmo, developer, designer, or qa can
   * view their notification preferences.
   *
   * This endpoint complements list and update preference APIs for full
   * preference management.
   *
   * @param connection
   * @param id Unique identifier of the notification preference
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atNotificationPreference(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementNotificationPreferences> {
    try {
      return await gettaskManagementTpmNotificationPreferencesId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update notification preference by ID.
   *
   * Update a notification preference by its unique ID.
   *
   * Users with roles tpm, pm, pmo, developer, designer, or qa can update their
   * notification preferences including preference key, enabled status, and
   * delivery method.
   *
   * This endpoint must validate inputs against allowed notification categories
   * and delivery options.
   *
   * It works with other preference APIs to provide a complete notification
   * preference management system.
   *
   * @param connection
   * @param id Unique identifier of the notification preference
   * @param body Notification preference update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateNotificationPreference(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementNotificationPreferences.IUpdate,
  ): Promise<ITaskManagementNotificationPreferences> {
    try {
      return await puttaskManagementTpmNotificationPreferencesId({
        tpm,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification preference by ID from
   * task_management_notification_preferences.
   *
   * This DELETE operation targets a specific Notification Preference record
   * within the task_management_notification_preferences table by the unique ID
   * provided in the path parameter.
   *
   * This operation permanently removes the notification preference setting for
   * the user, meaning the preference for notification types and delivery
   * methods associated with that ID will no longer exist in the system.
   *
   * Users or administrators authorized to manage notification preferences can
   * invoke this endpoint to delete obsolete or incorrect preferences. All
   * relevant security controls should ensure only authorized personnel can
   * perform this deletion.
   *
   * The operation uses a hard deletion mechanism, physically deleting the
   * record rather than marking it as deleted with a flag. Therefore, this
   * action is irreversible.
   *
   * Path Parameter:
   *
   * - Id: The UUID of the exact notification preference record to be deleted.
   *
   * No request body is necessary as the identification provided in the URL path
   * suffices.
   *
   * Response:
   *
   * - No data content is returned on success.
   *
   * Error Handling:
   *
   * - If the ID does not correspond to any existing record, an appropriate error
   *   (e.g., 404 Not Found) is expected.
   * - Unauthorized attempts are rejected with proper authorization errors.
   *
   * This operation corresponds to the task_management_notification_preferences
   * table defined in the Prisma schema, ensuring accurate and safe removal of
   * user notification preferences.
   *
   * @param connection
   * @param id Unique identifier of the notification preference to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmNotificationPreferencesId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
