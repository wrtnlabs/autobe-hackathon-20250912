import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmProjectsProjectIdMembers } from "../../../../../providers/posttaskManagementTpmProjectsProjectIdMembers";
import { TpmAuth } from "../../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmProjectsProjectIdMembers } from "../../../../../providers/patchtaskManagementTpmProjectsProjectIdMembers";
import { gettaskManagementTpmProjectsProjectIdMembersMemberId } from "../../../../../providers/gettaskManagementTpmProjectsProjectIdMembersMemberId";
import { puttaskManagementTpmProjectsProjectIdMembersMemberId } from "../../../../../providers/puttaskManagementTpmProjectsProjectIdMembersMemberId";
import { deletetaskManagementTpmProjectsProjectIdMembersMemberId } from "../../../../../providers/deletetaskManagementTpmProjectsProjectIdMembersMemberId";

import { ITaskManagementProjectMember } from "../../../../../api/structures/ITaskManagementProjectMember";
import { IPageITaskManagementProjectMember } from "../../../../../api/structures/IPageITaskManagementProjectMember";

@Controller("/taskManagement/tpm/projects/:projectId/members")
export class TaskmanagementTpmProjectsMembersController {
  /**
   * Create a new project member.
   *
   * Allows authorized users (TPM, PM, PMO) to add new members to a project.
   *
   * The operation creates a new record in the task_management_project_members
   * table linking a TPM user to the specified project by projectId.
   *
   * Input data is validated against the create schema, ensuring compliance with
   * uniqueness and referential integrity.
   *
   * Successful operation returns the created project member entity. Errors
   * include invalid projectId, duplicate memberships, or unauthorized access.
   *
   * This is essential for managing project team composition and collaboration.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Data needed to create a project member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementProjectMember.ICreate,
  ): Promise<ITaskManagementProjectMember> {
    try {
      return await posttaskManagementTpmProjectsProjectIdMembers({
        tpm,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of project members for a specific
   * project.
   *
   * This endpoint allows authorized users (roles: TPM, PM, PMO) to retrieve a
   * filtered and paginated list of project members for a given project ID.
   *
   * The task_management_project_members table connects TPM users to projects
   * with audit timestamps, associating each member uniquely with a project. The
   * response returns summary information suitable for listing and management.
   *
   * Security is paramount: only users with proper authorization can access this
   * sensitive membership information. The operation supports pagination and
   * search capabilities, assisting in efficient membership management.
   *
   * Errors will be handled gracefully if the projectId is invalid or if the
   * user lacks the right permissions.
   *
   * This operation is typically used alongside create, update, and detail
   * retrieval APIs for comprehensive membership management.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Search criteria and pagination parameters for project member
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementProjectMember.IRequest,
  ): Promise<IPageITaskManagementProjectMember> {
    try {
      return await patchtaskManagementTpmProjectsProjectIdMembers({
        tpm,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific project member.
   *
   * This endpoint fetches detailed membership information for a specific member
   * of a project.
   *
   * The task_management_project_members table uniquely associates TPM users to
   * projects, and this operation verifies the existence of such membership.
   *
   * Access is restricted to authorized users with roles TPM, PM, and PMO to
   * protect privacy and ensure data integrity.
   *
   * Validation of projectId and memberId parameters ensures correct entity
   * targeting.
   *
   * The response provides the full project member entity as defined in the
   * TaskManagementProjectMember schema.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param memberId Unique identifier of the project member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementProjectMember> {
    try {
      return await gettaskManagementTpmProjectsProjectIdMembersMemberId({
        tpm,
        projectId,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update information of an existing project member.
   *
   * Enables authorized users (TPM, PM, PMO) to update details for an existing
   * project member.
   *
   * The operation validates input against the member update schema and applies
   * changes to the corresponding task_management_project_members record.
   *
   * Proper authorization and input validation protect data consistency.
   *
   * The response returns the updated project member entity upon success, or
   * error information upon failure.
   *
   * This operation supports comprehensive membership lifecycle management
   * within projects.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param memberId Unique identifier of the project member
   * @param body Data to update existing project member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":memberId")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementProjectMember.IUpdate,
  ): Promise<ITaskManagementProjectMember> {
    try {
      return await puttaskManagementTpmProjectsProjectIdMembersMemberId({
        tpm,
        projectId,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific member from a project by project ID and member ID.
   *
   * This API endpoint facilitates the deletion of a project member's
   * association, thereby removing their membership from the specified project.
   * This is a hard delete operation on the task_management_project_members
   * table, ensuring that the member's link to the project is fully removed and
   * the user can no longer access the project's resources.
   *
   * Only users with appropriate permissions should invoke this operation,
   * typically administrators or project owners. The operation requires valid
   * UUID identifiers for both the project and member to guarantee safe and
   * targeted deletion.
   *
   * Upon successful execution, the system permanently removes the membership
   * record from the database. Failure scenarios may include missing or invalid
   * UUIDs or attempting to remove non-existent members.
   *
   * No request body is required as this is a direct resource deletion
   * operation.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param memberId Unique identifier of the member to delete from the project
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":memberId")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmProjectsProjectIdMembersMemberId({
        tpm,
        projectId,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
