import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmTasks } from "../../../../providers/posttaskManagementTpmTasks";
import { TpmAuth } from "../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmTasks } from "../../../../providers/patchtaskManagementTpmTasks";
import { gettaskManagementTpmTasksTaskId } from "../../../../providers/gettaskManagementTpmTasksTaskId";
import { puttaskManagementTpmTasksTaskId } from "../../../../providers/puttaskManagementTpmTasksTaskId";
import { deletetaskManagementTpmTasksTaskId } from "../../../../providers/deletetaskManagementTpmTasksTaskId";

import { ITaskManagementTask } from "../../../../api/structures/ITaskManagementTask";
import { IPageITaskManagementTasks } from "../../../../api/structures/IPageITaskManagementTasks";
import { ITaskManagementTasks } from "../../../../api/structures/ITaskManagementTasks";

@Controller("/taskManagement/tpm/tasks")
export class TaskmanagementTpmTasksController {
  /**
   * Create a new task record in task_management_tasks.
   *
   * Create a new task in the system by submitting mandatory and optional task
   * details.
   *
   * This API endpoint operates on the 'task_management_tasks' table which
   * contains comprehensive task metadata.
   *
   * Users with roles TPM, PM, PMO or equivalent can invoke this to insert new
   * tasks with status defaulting to 'To Do'.
   *
   * Task data includes title, optional description, priority, due date,
   * project/board affiliations, and creator reference.
   *
   * The response returns the full task record including assigned IDs and
   * now-persistent metadata.
   *
   * No soft delete is done; newly created records are active immediately.
   *
   * This operation integrates with assignment and notification services to
   * inform relevant users.
   *
   * Request body must comply with the ITaskManagementTask.ICreate interface.
   *
   * @param connection
   * @param body Details for new task creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementTask.ICreate,
  ): Promise<ITaskManagementTask> {
    try {
      return await posttaskManagementTpmTasks({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Complex search and paginated retrieval of task list from
   * task_management_tasks.
   *
   * Retrieve a paginated list of task entities from the system, optionally
   * filtered and sorted according to complex criteria provided in the request
   * body.
   *
   * This operation accesses the 'task_management_tasks' table, encompassing
   * details like title, description, status, priority, due date, creator, and
   * project associations.
   *
   * Users with respective roles such as TPM, PM, Developer, Designer, QA, and
   * PMO can query tasks to support task tracking, assignment overview, and
   * workload distribution.
   *
   * The request accepts filters such as status, priority, assignees, and date
   * ranges to refine results. Pagination parameters control result set size and
   * navigation.
   *
   * The response provides task summaries with essential information for
   * listing, enabling frontend applications to display manageable task lists.
   *
   * This operation integrates with other task detail endpoints for CRUD and
   * status updates.
   *
   * @param connection
   * @param body Filters, pagination, and sorting parameters for task list
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementTasks.IRequest,
  ): Promise<IPageITaskManagementTasks.ISummary> {
    try {
      return await patchtaskManagementTpmTasks({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve single task details by taskId.
   *
   * Fetch detailed task information by its unique identifier.
   *
   * This API targets the 'task_management_tasks' database table storing task
   * metadata including status, priority, creator reference, project and board
   * membership, due date, title, and description.
   *
   * Security restrictions ensure that only authorized users can view sensitive
   * task details.
   *
   * The response contains the full task object conforming to the data model
   * including all relevant fields derived from the Prisma schema for tasks.
   *
   * This endpoint supports client-side task detail views, editing workflows,
   * and history tracking via related status change and comment APIs.
   *
   * No request body required; response provides detailed task data.
   *
   * @param connection
   * @param taskId Unique identifier of the task to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskId")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTask> {
    try {
      return await gettaskManagementTpmTasksTaskId({
        tpm,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task by taskId from the task_management_tasks table.
   *
   * This API operation enables authorized users (roles TPM, PM, PMO) to update
   * task details stored in the task_management_tasks table identified by the
   * 'taskId' path parameter.
   *
   * Users can update task fields such as title, description, status (linking to
   * task_management_task_statuses via status_id), priority (linking to
   * task_management_priorities via priority_id), due date, project_id, and
   * board_id.
   *
   * The system validates all provided references to ensure they exist and
   * enforces business rules like non-empty title and valid date formats.
   *
   * Errors are returned if inputs are invalid, the task does not exist, or the
   * user lacks appropriate permissions.
   *
   * This operation complements related task creation, deletion, and assignment
   * APIs for full task lifecycle management.
   *
   * This endpoint applies a hard update and sets the updated_at timestamp
   * accordingly.
   *
   * @param connection
   * @param taskId The UUID of the task to update
   * @param body Task update information matching ITaskManagementTask.IUpdate
   *   schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":taskId")
  public async updateTask(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTask.IUpdate,
  ): Promise<ITaskManagementTask> {
    try {
      return await puttaskManagementTpmTasksTaskId({
        tpm,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a task by taskId from the task_management_tasks table.
   *
   * This API operation permanently deletes the task identified by the 'taskId'
   * parameter from the task_management_tasks database table.
   *
   * Users with delete permissions (roles TPM, PM, PMO) can perform this
   * operation.
   *
   * Although the schema has a soft delete column 'deleted_at', this operation
   * performs a hard delete removing the record entirely.
   *
   * Adequate error handling manages cases of nonexistent tasks or unauthorized
   * deletion attempts.
   *
   * No request body is required.
   *
   * Response body is empty indicating successful deletion.
   *
   * @param connection
   * @param taskId The UUID of the task to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":taskId")
  public async eraseTask(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmTasksTaskId({
        tpm,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
