import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmTaskManagementRoles } from "../../../../providers/posttaskManagementTpmTaskManagementRoles";
import { TpmAuth } from "../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmTaskManagementRoles } from "../../../../providers/patchtaskManagementTpmTaskManagementRoles";
import { gettaskManagementTpmTaskManagementRolesId } from "../../../../providers/gettaskManagementTpmTaskManagementRolesId";
import { puttaskManagementTpmTaskManagementRolesId } from "../../../../providers/puttaskManagementTpmTaskManagementRolesId";
import { deletetaskManagementTpmTaskManagementRolesId } from "../../../../providers/deletetaskManagementTpmTaskManagementRolesId";

import { ITaskManagementTaskManagementRoles } from "../../../../api/structures/ITaskManagementTaskManagementRoles";
import { IPageITaskManagementTaskManagementRoles } from "../../../../api/structures/IPageITaskManagementTaskManagementRoles";

@Controller("/taskManagement/tpm/taskManagementRoles")
export class TaskmanagementTpmTaskmanagementrolesController {
  /**
   * Create a TaskManagementRole.
   *
   * Create a new task management role by providing mandatory role code, name,
   * and optional description. The system validates input, enforces uniqueness
   * of role code, and persists the role details.
   *
   * Only users in roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or
   * 'qa' are authorized to invoke this operation.
   *
   * Errors include validation failures and conflicts on duplicate codes.
   *
   * Operates on the 'task_management_roles' Prisma table.
   *
   * @param connection
   * @param body TaskManagementRole creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementTaskManagementRoles.ICreate,
  ): Promise<ITaskManagementTaskManagementRoles> {
    try {
      return await posttaskManagementTpmTaskManagementRoles({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of TaskManagementRole.
   *
   * Retrieve a paginated and filtered list of task management roles. This
   * operation provides flexible querying options to search roles by code, name,
   * or description, with pagination and sorting controls.
   *
   * The 'task_management_roles' table includes unique codes like 'TPM', 'PM',
   * 'Developer', etc., with descriptive information.
   *
   * Permission to access this endpoint is granted only to authorized users with
   * roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'.
   * Unauthorized access is forbidden.
   *
   * Errors may result from invalid query parameters or authentication failures.
   *
   * @param connection
   * @param body Search and pagination parameters for task management role
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementTaskManagementRoles.IRequest,
  ): Promise<IPageITaskManagementTaskManagementRoles> {
    try {
      return await patchtaskManagementTpmTaskManagementRoles({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info of a TaskManagementRole by ID.
   *
   * Retrieve detailed information about a specific task management role by its
   * unique identifier.
   *
   * The operation returns properties including role code, name, optional
   * description, created and updated timestamps.
   *
   * Access is restricted to authorized users with roles such as 'tpm', 'pm',
   * 'pmo', 'developer', 'designer', or 'qa'.
   *
   * Errors include invalid ID format, not found, or unauthorized access errors.
   *
   * This operation accesses the 'task_management_roles' Prisma table.
   *
   * @param connection
   * @param id UUID of the TaskManagementRole
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskManagementRoles> {
    try {
      return await gettaskManagementTpmTaskManagementRolesId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific TaskManagementRole.
   *
   * Update an existing task management role identified by UUID, with new code,
   * name, and optional description.
   *
   * Authorization restricted to users with roles 'tpm', 'pm', 'pmo',
   * 'developer', 'designer', or 'qa'.
   *
   * Handles validation and uniqueness constraints.
   *
   * Operates on the 'task_management_roles' Prisma table.
   *
   * Returns updated role info.
   *
   * Errors include not found or validation failure.
   *
   * @param connection
   * @param id UUID of TaskManagementRole to update
   * @param body TaskManagementRole update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskManagementRoles.IUpdate,
  ): Promise<ITaskManagementTaskManagementRoles> {
    try {
      return await puttaskManagementTpmTaskManagementRolesId({
        tpm,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a taskManagementRole by ID.
   *
   * Deletes a specific taskManagementRole by its unique identifier. This
   * permanently removes the role from the underlying task_management_roles
   * table.
   *
   * Only authorized users such as TPM, PM, or PMO roles may perform this
   * operation to ensure security and integrity of role management.
   *
   * Failure to locate the specified role by ID should result in an appropriate
   * error response.
   *
   * The operation has no request body and returns no response content upon
   * success.
   *
   * @param connection
   * @param id Unique UUID identifier of the taskManagementRole to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmTaskManagementRolesId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
