import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementQaTasks } from "../../../../providers/patchtaskManagementQaTasks";
import { QaAuth } from "../../../../decorators/QaAuth";
import { QaPayload } from "../../../../decorators/payload/QaPayload";
import { gettaskManagementQaTasksTaskId } from "../../../../providers/gettaskManagementQaTasksTaskId";

import { IPageITaskManagementTasks } from "../../../../api/structures/IPageITaskManagementTasks";
import { ITaskManagementTasks } from "../../../../api/structures/ITaskManagementTasks";
import { ITaskManagementTask } from "../../../../api/structures/ITaskManagementTask";

@Controller("/taskManagement/qa/tasks")
export class TaskmanagementQaTasksController {
  /**
   * Complex search and paginated retrieval of task list from
   * task_management_tasks.
   *
   * Retrieve a paginated list of task entities from the system, optionally
   * filtered and sorted according to complex criteria provided in the request
   * body.
   *
   * This operation accesses the 'task_management_tasks' table, encompassing
   * details like title, description, status, priority, due date, creator, and
   * project associations.
   *
   * Users with respective roles such as TPM, PM, Developer, Designer, QA, and
   * PMO can query tasks to support task tracking, assignment overview, and
   * workload distribution.
   *
   * The request accepts filters such as status, priority, assignees, and date
   * ranges to refine results. Pagination parameters control result set size and
   * navigation.
   *
   * The response provides task summaries with essential information for
   * listing, enabling frontend applications to display manageable task lists.
   *
   * This operation integrates with other task detail endpoints for CRUD and
   * status updates.
   *
   * @param connection
   * @param body Filters, pagination, and sorting parameters for task list
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @QaAuth()
    qa: QaPayload,
    @TypedBody()
    body: ITaskManagementTasks.IRequest,
  ): Promise<IPageITaskManagementTasks.ISummary> {
    try {
      return await patchtaskManagementQaTasks({
        qa,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve single task details by taskId.
   *
   * Fetch detailed task information by its unique identifier.
   *
   * This API targets the 'task_management_tasks' database table storing task
   * metadata including status, priority, creator reference, project and board
   * membership, due date, title, and description.
   *
   * Security restrictions ensure that only authorized users can view sensitive
   * task details.
   *
   * The response contains the full task object conforming to the data model
   * including all relevant fields derived from the Prisma schema for tasks.
   *
   * This endpoint supports client-side task detail views, editing workflows,
   * and history tracking via related status change and comment APIs.
   *
   * No request body required; response provides detailed task data.
   *
   * @param connection
   * @param taskId Unique identifier of the task to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskId")
  public async at(
    @QaAuth()
    qa: QaPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTask> {
    try {
      return await gettaskManagementQaTasksTaskId({
        qa,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
