import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementQaTasksTaskIdAssignments } from "../../../../../providers/patchtaskManagementQaTasksTaskIdAssignments";
import { QaAuth } from "../../../../../decorators/QaAuth";
import { QaPayload } from "../../../../../decorators/payload/QaPayload";
import { gettaskManagementQaTasksTaskIdAssignmentsAssignmentId } from "../../../../../providers/gettaskManagementQaTasksTaskIdAssignmentsAssignmentId";

import { ITaskManagementTaskAssignmentArray } from "../../../../../api/structures/ITaskManagementTaskAssignmentArray";
import { ITaskManagementTaskAssignment } from "../../../../../api/structures/ITaskManagementTaskAssignment";

@Controller("/taskManagement/qa/tasks/:taskId/assignments")
export class TaskmanagementQaTasksAssignmentsController {
  /**
   * Retrieve the list of assignments for a given task identified by taskId.
   *
   * This API operation retrieves all assignments related to a specific task
   * using the task's unique identifier 'taskId'.
   *
   * Each assignment links a user (typically a TPM role user) to the task,
   * including the assignment timestamp.
   *
   * This read-only operation supports roles TPM, PM, PMO, Developer, Designer,
   * and QA.
   *
   * No request body is required.
   *
   * The response contains a list of task assignments details.
   *
   * The operation may return errors if the task does not exist or access is
   * unauthorized.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexTaskAssignments(
    @QaAuth()
    qa: QaPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskAssignmentArray> {
    try {
      return await patchtaskManagementQaTasksTaskIdAssignments({
        qa,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific assignment by assignmentId for a task by taskId.
   *
   * This API operation fetches the detailed information of a single task
   * assignment identified by 'assignmentId' under the parent task identified by
   * 'taskId'.
   *
   * It returns assignment data including the assignee ID and the assigned
   * timestamp.
   *
   * Allowed roles include TPM, PM, PMO, Developer, Designer, and QA.
   *
   * No request body is required.
   *
   * Errors are returned if the assignment or parent task does not exist or
   * access is unauthorized.
   *
   * Useful for audit trails and individual assignment inspection.
   *
   * @param connection
   * @param taskId Unique identifier of the parent task
   * @param assignmentId Unique identifier of the target assignment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":assignmentId")
  public async atTaskAssignment(
    @QaAuth()
    qa: QaPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskAssignment> {
    try {
      return await gettaskManagementQaTasksTaskIdAssignmentsAssignmentId({
        qa,
        taskId,
        assignmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
