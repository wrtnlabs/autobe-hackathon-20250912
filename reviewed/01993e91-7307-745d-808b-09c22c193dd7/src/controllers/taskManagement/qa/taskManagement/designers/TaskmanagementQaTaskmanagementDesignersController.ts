import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchtaskManagementQaTaskManagementDesigners } from "../../../../../providers/patchtaskManagementQaTaskManagementDesigners";
import { QaAuth } from "../../../../../decorators/QaAuth";
import { QaPayload } from "../../../../../decorators/payload/QaPayload";

import { IPageITaskManagementDesigner } from "../../../../../api/structures/IPageITaskManagementDesigner";
import { ITaskManagementDesigner } from "../../../../../api/structures/ITaskManagementDesigner";

@Controller("/taskManagement/qa/taskManagement/designers")
export class TaskmanagementQaTaskmanagementDesignersController {
  /**
   * Search and retrieve paginated list of designers.
   *
   * Retrieve a filtered and paginated list of designer users from the system.
   * Supports search criteria like partial matches on email and name.
   *
   * The operation provides comprehensive pagination and sorting options,
   * allowing clients to specify page size and order.
   *
   * Authentication is required to access designer data. Soft deleted users are
   * excluded from results.
   *
   * This operation references the task_management_designer Prisma schema model
   * and returns summary information optimized for list displays.
   *
   * Errors occur for invalid search parameters or unauthorized access.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for designer
   *   search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @QaAuth()
    qa: QaPayload,
    @TypedBody()
    body: ITaskManagementDesigner.IRequest,
  ): Promise<IPageITaskManagementDesigner.ISummary> {
    try {
      return await patchtaskManagementQaTaskManagementDesigners({
        qa,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
