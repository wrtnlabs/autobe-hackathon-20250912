import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementDeveloperTaskManagementTaskStatuses } from "../../../../providers/patchtaskManagementDeveloperTaskManagementTaskStatuses";
import { DeveloperAuth } from "../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../decorators/payload/DeveloperPayload";
import { gettaskManagementDeveloperTaskManagementTaskStatusesId } from "../../../../providers/gettaskManagementDeveloperTaskManagementTaskStatusesId";

import { IPageITaskManagementTaskStatuses } from "../../../../api/structures/IPageITaskManagementTaskStatuses";
import { ITaskManagementTaskStatuses } from "../../../../api/structures/ITaskManagementTaskStatuses";
import { ITaskManagementTaskStatus } from "../../../../api/structures/ITaskManagementTaskStatus";

@Controller("/taskManagement/developer/taskManagementTaskStatuses")
export class TaskmanagementDeveloperTaskmanagementtaskstatusesController {
  /**
   * Search and retrieve list of taskManagementTaskStatuses.
   *
   * Retrieve a filtered and paginated list of taskManagementTaskStatuses.
   *
   * The operation supports searching by code, name, and provides pagination
   * controls. Only authenticated roles such as TPM, PM, PMO, developers,
   * designers, and QA can access this list.
   *
   * This endpoint returns summarized data intended for listing and selection.
   *
   * Related APIs include retrieval of individual status details and creation of
   * new statuses.
   *
   * Proper filtering and pagination parameters improve performance and
   * usability.
   *
   * @param connection
   * @param body Search criteria and pagination controls for
   *   taskManagementTaskStatuses
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: ITaskManagementTaskStatuses.IRequest,
  ): Promise<IPageITaskManagementTaskStatuses.ISummary> {
    try {
      return await patchtaskManagementDeveloperTaskManagementTaskStatuses({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get taskManagementTaskStatus details by ID.
   *
   * Retrieve detailed information of a taskManagementTaskStatus by its unique
   * ID.
   *
   * Only authenticated users including TPM, PM, PMO, developers, designers, and
   * QA can access this information.
   *
   * The operation returns the full details including code, name, description,
   * and timestamp information.
   *
   * It is important to handle errors when the requested ID does not exist.
   *
   * This endpoint is commonly used in conjunction with the status list and
   * creation APIs.
   *
   * @param connection
   * @param id Unique UUID identifier for the target taskManagementTaskStatus
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskStatus> {
    try {
      return await gettaskManagementDeveloperTaskManagementTaskStatusesId({
        developer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
