import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmProjectsProjectIdBoards } from "../../../../../providers/posttaskManagementPmProjectsProjectIdBoards";
import { PmAuth } from "../../../../../decorators/PmAuth";
import { PmPayload } from "../../../../../decorators/payload/PmPayload";
import { patchtaskManagementPmProjectsProjectIdBoards } from "../../../../../providers/patchtaskManagementPmProjectsProjectIdBoards";
import { gettaskManagementPmProjectsProjectIdBoardsBoardId } from "../../../../../providers/gettaskManagementPmProjectsProjectIdBoardsBoardId";
import { puttaskManagementPmProjectsProjectIdBoardsBoardId } from "../../../../../providers/puttaskManagementPmProjectsProjectIdBoardsBoardId";
import { deletetaskManagementPmProjectsProjectIdBoardsBoardId } from "../../../../../providers/deletetaskManagementPmProjectsProjectIdBoardsBoardId";

import { ITaskManagementBoard } from "../../../../../api/structures/ITaskManagementBoard";
import { IPageITaskManagementBoard } from "../../../../../api/structures/IPageITaskManagementBoard";

@Controller("/taskManagement/pm/projects/:projectId/boards")
export class TaskmanagementPmProjectsBoardsController {
  /**
   * Create a new board in a project.
   *
   * This endpoint allows authenticated users with the role of TPM or PM to
   * create a new Board within a specified Project. Boards are logical
   * containers for tasks allowing better project task management.
   *
   * The user must supply essential details including a unique board code, name,
   * and optionally a descriptive text to elaborate the board's purpose.
   *
   * The system validates that the provided projectId exists and that the owner
   * is correctly assigned. Upon successful creation, the board is persisted
   * with creation and update timestamps for auditability.
   *
   * Security constraints ensure that only users with proper permissions can
   * perform this operation.
   *
   * The created Board entity will reflect relationships to the Project and its
   * owner as defined in the task_management_boards table within the Prisma
   * schema, enabling hierarchical project-task organization.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Board creation payload including project association, owner,
   *   code, and descriptive details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoard.ICreate,
  ): Promise<ITaskManagementBoard> {
    try {
      return await posttaskManagementPmProjectsProjectIdBoards({
        pm,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List boards under a specific project.
   *
   * Retrieve a paginated list of boards belonging to the project identified by
   * projectId.
   *
   * This endpoint supports complex filters and sorting (e.g., by creation date,
   * name) using the request body.
   *
   * Authorization is restricted to TPM, PM, and PMO roles, who manage project
   * boards.
   *
   * Each board record includes project and owner references, descriptive
   * metadata, and audit timestamps.
   *
   * This operation leverages the task_management_boards table with
   * relationships to projects and TPM owners.
   *
   * The response returns a paginated collection of board summary objects for
   * efficient listing.
   *
   * No direct modification happens; it's a read-only operation providing
   * project board overview.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Board filtering and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexBoardsInProject(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoard.IRequest,
  ): Promise<IPageITaskManagementBoard.ISummary> {
    try {
      return await patchtaskManagementPmProjectsProjectIdBoards({
        pm,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail of a board by projectId and boardId.
   *
   * Get details of a specific board identified by boardId under the project
   * identified by projectId.
   *
   * This operation is restricted to users with TPM, PM, or PMO roles.
   *
   * The board entity includes references to its owning project and owner user,
   * along with metadata like name, code, description, and temporal audit
   * fields.
   *
   * Soft deletion status is reflected but does not affect retrieval unless
   * filtered.
   *
   * This operation returns comprehensive details for UI display or management.
   *
   * The request requires both projectId and boardId path parameters.
   *
   * The response contains a full board schema object as defined in the Prisma
   * schema.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param boardId Unique identifier of the target board
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":boardId")
  public async atBoardInProject(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementBoard> {
    try {
      return await gettaskManagementPmProjectsProjectIdBoardsBoardId({
        pm,
        projectId,
        boardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing board within a project.
   *
   * This endpoint permits TPM or PM role users to update details of an existing
   * Board identified by its boardId within a specified projectId. Updates
   * include board name, description, and other allowed fields.
   *
   * Access control ensures only authorized users can perform this update.
   *
   * The operation maintains relationships and integrity as per the
   * task_management_boards schema, including cascading updates and audit
   * timestamps.
   *
   * Proper validation is applied to ensure data correctness and uniqueness
   * constraints are respected.
   *
   * Successful execution returns the updated board entity with current
   * attribute values.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param boardId Unique identifier of the board to update
   * @param body Board update payload with fields to be modified
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":boardId")
  public async update(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoard.IUpdate,
  ): Promise<ITaskManagementBoard> {
    try {
      return await puttaskManagementPmProjectsProjectIdBoardsBoardId({
        pm,
        projectId,
        boardId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a board from a project.
   *
   * Allows TPM or PM users to delete a board within a specific project.
   *
   * The board is either soft deleted by setting deleted_at timestamp or hard
   * deleted depending on the database schema.
   *
   * Security controls restrict this action to authorized users only.
   *
   * Deletion cascades or constraints are managed according to relational
   * mappings in the Prisma schema.
   *
   * No response body is returned upon successful deletion, conforming to
   * RESTful standards.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param boardId Unique identifier of the board to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":boardId")
  public async erase(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmProjectsProjectIdBoardsBoardId({
        pm,
        projectId,
        boardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
