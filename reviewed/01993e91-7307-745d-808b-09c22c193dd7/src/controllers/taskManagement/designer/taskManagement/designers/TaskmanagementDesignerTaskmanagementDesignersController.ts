import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementDesignerTaskManagementDesigners } from "../../../../../providers/posttaskManagementDesignerTaskManagementDesigners";
import { DesignerAuth } from "../../../../../decorators/DesignerAuth";
import { DesignerPayload } from "../../../../../decorators/payload/DesignerPayload";
import { patchtaskManagementDesignerTaskManagementDesigners } from "../../../../../providers/patchtaskManagementDesignerTaskManagementDesigners";
import { gettaskManagementDesignerTaskManagementDesignersId } from "../../../../../providers/gettaskManagementDesignerTaskManagementDesignersId";
import { puttaskManagementDesignerTaskManagementDesignersId } from "../../../../../providers/puttaskManagementDesignerTaskManagementDesignersId";
import { deletetaskManagementDesignerTaskManagementDesignersId } from "../../../../../providers/deletetaskManagementDesignerTaskManagementDesignersId";

import { ITaskManagementDesigner } from "../../../../../api/structures/ITaskManagementDesigner";
import { IPageITaskManagementDesigner } from "../../../../../api/structures/IPageITaskManagementDesigner";

@Controller("/taskManagement/designer/taskManagement/designers")
export class TaskmanagementDesignerTaskmanagementDesignersController {
  /**
   * Create a new designer user account.
   *
   * Create a new designer user in the system with required fields including
   * email, password hash, and name. The API accepts designer user information
   * to populate the task_management_designer table and returns the created
   * object.
   *
   * Safety checks verify the uniqueness of the email field and validate input
   * formats. Only users with administrative privileges may execute this
   * operation. The timestamps for creation and update are managed by the
   * system.
   *
   * This operation enables administrators to manage designer user lifecycle
   * effectively and securely.
   *
   * @param connection
   * @param body New designer user creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedBody()
    body: ITaskManagementDesigner.ICreate,
  ): Promise<ITaskManagementDesigner> {
    try {
      return await posttaskManagementDesignerTaskManagementDesigners({
        designer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of designers.
   *
   * Retrieve a filtered and paginated list of designer users from the system.
   * Supports search criteria like partial matches on email and name.
   *
   * The operation provides comprehensive pagination and sorting options,
   * allowing clients to specify page size and order.
   *
   * Authentication is required to access designer data. Soft deleted users are
   * excluded from results.
   *
   * This operation references the task_management_designer Prisma schema model
   * and returns summary information optimized for list displays.
   *
   * Errors occur for invalid search parameters or unauthorized access.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for designer
   *   search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedBody()
    body: ITaskManagementDesigner.IRequest,
  ): Promise<IPageITaskManagementDesigner.ISummary> {
    try {
      return await patchtaskManagementDesignerTaskManagementDesigners({
        designer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a single designer user.
   *
   * Retrieve detailed information of a specific designer user by their unique
   * identifier. This API endpoint accesses the task_management_designer table,
   * which contains essential user information required for authentication and
   * role management within the task management backend service.
   *
   * Security measures ensure that only authorized personnel, such as
   * administrators or system managers, can view this sensitive information. The
   * response omits sensitive fields like password hashes to maintain security.
   *
   * The operation requires a valid designer ID in UUID format and returns all
   * relevant profile data including email, name, and timestamps of creation and
   * last update. If the designer has been soft deleted (deleted_at is set), the
   * record may be excluded or flagged according to system policy.
   *
   * This operation pairs with other CRUD endpoints for full lifecycle
   * management of designer users.
   *
   * @param connection
   * @param id Unique identifier of the designer user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementDesigner> {
    try {
      return await gettaskManagementDesignerTaskManagementDesignersId({
        designer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a designer user's information.
   *
   * Update an existing designer user identified by the unique ID. This endpoint
   * modifies details in the task_management_designer table, ensuring data
   * integrity and validation.
   *
   * Only authorized administrators may perform this operation. The email field
   * must remain unique and follow proper email formatting rules. Passwords must
   * be securely handled and stored as hashes.
   *
   * The operation returns the updated designer user entity upon successful
   * completion. Attempts to update non-existent or soft-deleted users should be
   * rejected appropriately.
   *
   * @param connection
   * @param id Unique identifier of the designer user
   * @param body Designer user update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementDesigner.IUpdate,
  ): Promise<ITaskManagementDesigner> {
    try {
      return await puttaskManagementDesignerTaskManagementDesignersId({
        designer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a designer user.
   *
   * Delete an existing designer user by ID. This endpoint performs a hard
   * delete on the task_management_designer record, permanently removing the
   * user from the system.
   *
   * Only users with administrative privileges can execute this operation.
   * Attempts to delete non-existent users should result in appropriate error
   * responses.
   *
   * This operation is irreversible and should be performed with caution. It
   * complements create, read, and update endpoints to allow full user lifecycle
   * management.
   *
   * @param connection
   * @param id Unique identifier of the designer user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementDesignerTaskManagementDesignersId({
        designer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
