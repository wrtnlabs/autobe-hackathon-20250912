import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementDesignerNotificationPreferences } from "../../../../providers/patchtaskManagementDesignerNotificationPreferences";
import { DesignerAuth } from "../../../../decorators/DesignerAuth";
import { DesignerPayload } from "../../../../decorators/payload/DesignerPayload";
import { gettaskManagementDesignerNotificationPreferencesId } from "../../../../providers/gettaskManagementDesignerNotificationPreferencesId";
import { puttaskManagementDesignerNotificationPreferencesId } from "../../../../providers/puttaskManagementDesignerNotificationPreferencesId";

import { IPageITaskManagementNotificationPreferences } from "../../../../api/structures/IPageITaskManagementNotificationPreferences";
import { ITaskManagementNotificationPreferences } from "../../../../api/structures/ITaskManagementNotificationPreferences";

@Controller("/taskManagement/designer/notificationPreferences")
export class TaskmanagementDesignerNotificationpreferencesController {
  /**
   * Search notification preferences with filtering and pagination.
   *
   * Retrieve notification preferences with filtering and pagination.
   *
   * This operation enables users with roles tpm, pm, pmo, developer, designer,
   * or qa to search their notification preferences by preference key, delivery
   * method, or enabled status.
   *
   * The response is paginated to efficiently handle potentially large data
   * sets.
   *
   * Clients use this alongside other preference management endpoints to fully
   * manage their notifications.
   *
   * @param connection
   * @param body Search criteria for notification preference filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexNotificationPreferences(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedBody()
    body: ITaskManagementNotificationPreferences.IRequest,
  ): Promise<IPageITaskManagementNotificationPreferences> {
    try {
      return await patchtaskManagementDesignerNotificationPreferences({
        designer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve notification preference detail by ID.
   *
   * Retrieve the notification preference record for given ID.
   *
   * Authorized users with roles tpm, pm, pmo, developer, designer, or qa can
   * view their notification preferences.
   *
   * This endpoint complements list and update preference APIs for full
   * preference management.
   *
   * @param connection
   * @param id Unique identifier of the notification preference
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atNotificationPreference(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementNotificationPreferences> {
    try {
      return await gettaskManagementDesignerNotificationPreferencesId({
        designer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update notification preference by ID.
   *
   * Update a notification preference by its unique ID.
   *
   * Users with roles tpm, pm, pmo, developer, designer, or qa can update their
   * notification preferences including preference key, enabled status, and
   * delivery method.
   *
   * This endpoint must validate inputs against allowed notification categories
   * and delivery options.
   *
   * It works with other preference APIs to provide a complete notification
   * preference management system.
   *
   * @param connection
   * @param id Unique identifier of the notification preference
   * @param body Notification preference update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateNotificationPreference(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementNotificationPreferences.IUpdate,
  ): Promise<ITaskManagementNotificationPreferences> {
    try {
      return await puttaskManagementDesignerNotificationPreferencesId({
        designer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
