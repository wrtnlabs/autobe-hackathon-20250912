import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementDesignerNotifications } from "../../../../providers/patchtaskManagementDesignerNotifications";
import { DesignerAuth } from "../../../../decorators/DesignerAuth";
import { DesignerPayload } from "../../../../decorators/payload/DesignerPayload";
import { gettaskManagementDesignerNotificationsId } from "../../../../providers/gettaskManagementDesignerNotificationsId";
import { puttaskManagementDesignerNotificationsId } from "../../../../providers/puttaskManagementDesignerNotificationsId";
import { deletetaskManagementDesignerNotificationsId } from "../../../../providers/deletetaskManagementDesignerNotificationsId";

import { IPageITaskManagementNotification } from "../../../../api/structures/IPageITaskManagementNotification";
import { ITaskManagementNotification } from "../../../../api/structures/ITaskManagementNotification";

@Controller("/taskManagement/designer/notifications")
export class TaskmanagementDesignerNotificationsController {
  /**
   * Search and retrieve a filtered paginated list of notifications for the
   * user.
   *
   * This endpoint provides a filtered and paginated view of the user's
   * notifications within the task management system. Notifications can come
   * from task assignments, status changes, comments, or general alerts.
   *
   * The operation lets users search, sort, and paginate through their
   * notifications efficiently.
   *
   * The task_management_notifications table stores notifications with
   * references to the relevant user, task, and notification type. This
   * operation respects user permissions and returns only notifications
   * belonging to the authenticated user.
   *
   * This API is a PATCH method to support complex queries beyond simple
   * filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   notifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedBody()
    body: ITaskManagementNotification.IRequest,
  ): Promise<IPageITaskManagementNotification.ISummary> {
    try {
      return await patchtaskManagementDesignerNotifications({
        designer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific notification by ID.
   *
   * This endpoint fetches the detailed data of a single notification. Each
   * notification record corresponds to user alerts for task actions such as
   * assignment, status changes, comments, or general announcements.
   *
   * The system requires that the requesting user has access rights to view this
   * notification.
   *
   * The unique notification ID is validated as a UUID.
   *
   * The response includes comprehensive properties from the
   * task_management_notifications table including the notification type, read
   * status and timestamps.
   *
   * @param connection
   * @param id Unique identifier of the notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementNotification> {
    try {
      return await gettaskManagementDesignerNotificationsId({
        designer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update notification properties such as read status.
   *
   * This endpoint enables updating properties of a notification, typically to
   * mark it as read or unread.
   *
   * Valid updates include changing the is_read flag and setting the read_at
   * timestamp.
   *
   * The system verifies user permissions to update the notification.
   *
   * The path parameter is the notification's UUID.
   *
   * Request body must include valid update schema for notifications.
   *
   * @param connection
   * @param id Unique identifier of the notification to update
   * @param body Notification update fields
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementNotification.IUpdate,
  ): Promise<ITaskManagementNotification> {
    try {
      return await puttaskManagementDesignerNotificationsId({
        designer,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification by ID from task_management_notifications.
   *
   * This API endpoint allows an authorized user with role among tpm, pm, pmo,
   * developer, designer, or qa to delete a notification identified by its
   * unique ID.
   *
   * The operation completely removes the notification record from the database.
   *
   * Error responses may include 404 for non-existing notifications or 403 if
   * unauthorized.
   *
   * This operation complements other notification APIs such as retrieval and
   * preference management.
   *
   * @param connection
   * @param id Unique identifier of the notification to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseNotification(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementDesignerNotificationsId({
        designer,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
