import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Quality Assurance (QA) user information including authentication data.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementQa = {
  /** Unique identifier of the QA user. */
  id: string & tags.Format<"uuid">;

  /** Email address of the QA user. Must be unique. */
  email: string;

  /** Hashed password for authentication. */
  password_hash: string;

  /** Full name of the QA user. */
  name: string;

  /** Timestamp of record creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last record update. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp if deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementQa {
  /**
   * Request body schema for registering a new QA user.
   *
   * Contains email, securely hashed password, and full name as mandatory
   * properties.
   */
  export type ICreate = {
    /** Unique email address for user registration with required format. */
    email: string & tags.Format<"email">;

    /** Password hashed securely for authentication. */
    password_hash: string;

    /** Full name of the user registering for QA role. */
    name: string;
  };

  /**
   * Request body schema for QA user login.
   *
   * Includes user email and plain text password for authentication.
   */
  export type ILogin = {
    /** User's email used for login. */
    email: string & tags.Format<"email">;

    /** Plain password to be verified against stored hash. */
    password: string;
  };

  /**
   * Request body schema for refreshing JWT tokens.
   *
   * Only requires a valid refresh token string to be provided.
   */
  export type IRefresh = {
    /** Refresh token to obtain new JWT access tokens. */
    refresh_token: string;
  };

  /**
   * Authorization response containing JWT tokens for the QA user post
   * authentication.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized QA user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the QA user. Must be unique. */
    email: string;

    /** Hashed password for authentication. */
    password_hash: string;

    /** Full name of the QA user. */
    name: string;

    /** Timestamp of record creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last record update. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp if deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Parameters for filtering, sorting, and pagination when searching QA
   * users.
   */
  export type IRequest = {
    /** Search filter by email with partial matching. */
    email?: string | null | undefined;

    /** Search filter by name with partial matching. */
    name?: string | null | undefined;

    /** Filter by creation timestamp, ISO 8601 string. */
    created_at?: string | null | undefined;

    /** Filter by last update timestamp, ISO 8601 string. */
    updated_at?: string | null | undefined;

    /** Pagination: page number. */
    page?: number | null | undefined;

    /** Pagination: limit per page. */
    limit?: number | null | undefined;

    /** Sorting criteria. */
    sort?: string | null | undefined;
  };

  /**
   * Update model for Quality Assurance (QA) users.
   *
   * This type includes the last updated timestamp as an optional field.
   *
   * Only the properties defined here are allowed in the update model.
   */
  export type IUpdate = {
    /** Timestamp when the QA user record was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /** Summary view of QA user including ID, email, and name. */
  export type ISummary = {
    /** Unique identifier of the QA user */
    id: string & tags.Format<"uuid">;

    /** Email address of the QA user */
    email: string & tags.Format<"email">;

    /** Full name of the QA user */
    name: string;
  };
}
