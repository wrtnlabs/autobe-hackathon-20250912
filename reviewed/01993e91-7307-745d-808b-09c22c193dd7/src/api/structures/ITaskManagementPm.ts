import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Project Manager (PM) user entity, includes unique identifier, email, hashed
 * password, full name, creation and update timestamps, and optional soft
 * deletion timestamp. Used to manage PM user accounts and authentication.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementPm = {
  /** Unique identifier of the Project Manager user. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address used for login. Essential for authentication and
   * user communication.
   */
  email: string;

  /** Hashed password for authentication. Ensures password security. */
  password_hash: string;

  /**
   * Full name of the PM user. Represents the user's full name as displayed in
   * the system.
   */
  name: string;

  /** Record creation timestamp. Indicates when the PM record was created. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to the PM record. Reflects the last modification
   * time.
   */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp. Nullable to indicate active or deleted status. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementPm {
  /**
   * Request body for creating a new PM user. Includes required email,
   * plain-text password for hashing, and the user name. Note: password field
   * represents plain password to be hashed internally. Clients should send
   * plain text password only on creation.
   */
  export type ICreate = {
    /** Email address for login and contact, must be unique. */
    email: string;

    /** Plain text password for hashing, never exposed in responses. */
    password: string;

    /** Full name of the PM user. */
    name: string;
  };

  /**
   * Request body for login operation. Contains email and plain text password
   * for authentication. This is public-facing.
   */
  export type ILogin = {
    /** Email address to authenticate. */
    email: string;

    /** Password in plain text to authenticate. */
    password: string;
  };

  /**
   * Request body for token refresh operation. Contains the refresh token
   * string to request new access token.
   */
  export type IRefresh = {
    /** JWT refresh token string valid and unexpired. */
    refresh_token: string;
  };

  /**
   * Authorization response including user identity and JWT tokens. Contains
   * user ID and the authorization token information.
   */
  export type IAuthorized = {
    /** Unique identifier for the authenticated PM user. */
    id: string;

    /**
     * Unique email address used for login. Essential for authentication and
     * user communication.
     */
    email: string;

    /** Hashed password for authentication. Ensures password security. */
    password_hash: string;

    /**
     * Full name of the PM user. Represents the user's full name as
     * displayed in the system.
     */
    name: string;

    /** Record creation timestamp. Indicates when the PM record was created. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to the PM record. Reflects the last
     * modification time.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp. Nullable to indicate active or deleted
     * status.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Update payload for PM user. All fields are optional for partial update.
   * Allowed to update email, password_hash, and name. id, created_at,
   * deleted_at, updated_at are read-only.
   */
  export type IUpdate = {
    /**
     * Optional updated email address. When provided, must be unique and
     * valid.
     */
    email?: string | undefined;

    /** Optional updated password hash. Expected to be previously hashed */
    password_hash?: string | undefined;

    /** Optional updated full name. */
    name?: string | undefined;
  };
}
