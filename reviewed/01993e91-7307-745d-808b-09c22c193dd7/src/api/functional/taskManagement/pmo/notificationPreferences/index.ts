import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementNotificationPreferences } from "../../../../structures/ITaskManagementNotificationPreferences";
import { IPageITaskManagementNotificationPreferences } from "../../../../structures/IPageITaskManagementNotificationPreferences";

/**
 * Search notification preferences with filtering and pagination.
 *
 * Retrieve notification preferences with filtering and pagination.
 *
 * This operation enables users with roles tpm, pm, pmo, developer, designer, or
 * qa to search their notification preferences by preference key, delivery
 * method, or enabled status.
 *
 * The response is paginated to efficiently handle potentially large data sets.
 *
 * Clients use this alongside other preference management endpoints to fully
 * manage their notifications.
 *
 * @param props.connection
 * @param props.body Search criteria for notification preference filtering
 * @path /taskManagement/pmo/notificationPreferences
 * @accessor api.functional.taskManagement.pmo.notificationPreferences.indexNotificationPreferences
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexNotificationPreferences(
  connection: IConnection,
  props: indexNotificationPreferences.Props,
): Promise<indexNotificationPreferences.Response> {
  return true === connection.simulate
    ? indexNotificationPreferences.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexNotificationPreferences.METADATA,
          path: indexNotificationPreferences.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexNotificationPreferences {
  export type Props = {
    /** Search criteria for notification preference filtering */
    body: ITaskManagementNotificationPreferences.IRequest;
  };
  export type Body = ITaskManagementNotificationPreferences.IRequest;
  export type Response = IPageITaskManagementNotificationPreferences;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pmo/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/notificationPreferences";
  export const random = (): IPageITaskManagementNotificationPreferences =>
    typia.random<IPageITaskManagementNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: indexNotificationPreferences.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexNotificationPreferences.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve notification preference detail by ID.
 *
 * Retrieve the notification preference record for given ID.
 *
 * Authorized users with roles tpm, pm, pmo, developer, designer, or qa can view
 * their notification preferences.
 *
 * This endpoint complements list and update preference APIs for full preference
 * management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification preference
 * @path /taskManagement/pmo/notificationPreferences/:id
 * @accessor api.functional.taskManagement.pmo.notificationPreferences.atNotificationPreference
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atNotificationPreference(
  connection: IConnection,
  props: atNotificationPreference.Props,
): Promise<atNotificationPreference.Response> {
  return true === connection.simulate
    ? atNotificationPreference.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atNotificationPreference.METADATA,
          path: atNotificationPreference.path(props),
          status: null,
        },
      );
}
export namespace atNotificationPreference {
  export type Props = {
    /** Unique identifier of the notification preference */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementNotificationPreferences;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pmo/notificationPreferences/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/notificationPreferences/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementNotificationPreferences =>
    typia.random<ITaskManagementNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: atNotificationPreference.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atNotificationPreference.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification preference by ID.
 *
 * Update a notification preference by its unique ID.
 *
 * Users with roles tpm, pm, pmo, developer, designer, or qa can update their
 * notification preferences including preference key, enabled status, and
 * delivery method.
 *
 * This endpoint must validate inputs against allowed notification categories
 * and delivery options.
 *
 * It works with other preference APIs to provide a complete notification
 * preference management system.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification preference
 * @param props.body Notification preference update data
 * @path /taskManagement/pmo/notificationPreferences/:id
 * @accessor api.functional.taskManagement.pmo.notificationPreferences.updateNotificationPreference
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateNotificationPreference(
  connection: IConnection,
  props: updateNotificationPreference.Props,
): Promise<updateNotificationPreference.Response> {
  return true === connection.simulate
    ? updateNotificationPreference.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateNotificationPreference.METADATA,
          path: updateNotificationPreference.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateNotificationPreference {
  export type Props = {
    /** Unique identifier of the notification preference */
    id: string & tags.Format<"uuid">;

    /** Notification preference update data */
    body: ITaskManagementNotificationPreferences.IUpdate;
  };
  export type Body = ITaskManagementNotificationPreferences.IUpdate;
  export type Response = ITaskManagementNotificationPreferences;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pmo/notificationPreferences/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/notificationPreferences/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementNotificationPreferences =>
    typia.random<ITaskManagementNotificationPreferences>();
  export const simulate = (
    connection: IConnection,
    props: updateNotificationPreference.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateNotificationPreference.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
