import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementPmo } from "../../../../../structures/ITaskManagementPmo";
import { IPageITaskManagementPmo } from "../../../../../structures/IPageITaskManagementPmo";

/**
 * Create a new PMO user.
 *
 * Create a new Project Management Officer (PMO) user with required details.
 *
 * The request body must contain valid user data as per
 * ITaskManagementPmo.ICreate specification including email and password_hash.
 *
 * On success, the full PMO entity with timestamps and possible soft delete
 * fields is returned.
 *
 * Only users with the 'pmo' role are authorized to call this operation for
 * security.
 *
 * @param props.connection
 * @param props.body PMO creation data
 * @path /taskManagement/pmo/taskManagement/pmos
 * @accessor api.functional.taskManagement.pmo.taskManagement.pmos.createPmo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createPmo(
  connection: IConnection,
  props: createPmo.Props,
): Promise<createPmo.Response> {
  return true === connection.simulate
    ? createPmo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createPmo.METADATA,
          path: createPmo.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createPmo {
  export type Props = {
    /** PMO creation data */
    body: ITaskManagementPmo.ICreate;
  };
  export type Body = ITaskManagementPmo.ICreate;
  export type Response = ITaskManagementPmo;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pmo/taskManagement/pmos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagement/pmos";
  export const random = (): ITaskManagementPmo =>
    typia.random<ITaskManagementPmo>();
  export const simulate = (
    connection: IConnection,
    props: createPmo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createPmo.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search filtered, paginated PMO list.
 *
 * Search and list PMO users with filtering and pagination.
 *
 * Supports search criteria such as name, email, status, and pagination details
 * passed in the request body matching ITaskManagementPmo.IRequest.
 *
 * The response contains paginated summaries of PMOs conforming to
 * IPageITaskManagementPmo.ISummary.
 *
 * Access is granted only to users with 'pmo' role for secure data management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for PMO filtering
 * @path /taskManagement/pmo/taskManagement/pmos
 * @accessor api.functional.taskManagement.pmo.taskManagement.pmos.indexPmo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexPmo(
  connection: IConnection,
  props: indexPmo.Props,
): Promise<indexPmo.Response> {
  return true === connection.simulate
    ? indexPmo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexPmo.METADATA,
          path: indexPmo.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexPmo {
  export type Props = {
    /** Search criteria and pagination parameters for PMO filtering */
    body: ITaskManagementPmo.IRequest;
  };
  export type Body = ITaskManagementPmo.IRequest;
  export type Response = IPageITaskManagementPmo.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pmo/taskManagement/pmos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagement/pmos";
  export const random = (): IPageITaskManagementPmo.ISummary =>
    typia.random<IPageITaskManagementPmo.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexPmo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexPmo.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed PMO information by ID.
 *
 * Retrieve detailed information about a specific PMO user by UUID.
 *
 * This operation returns the complete PMO entity information including all
 * relevant fields.
 *
 * Only users with the 'pmo' role are authorized to access this endpoint.
 *
 * No request body is needed for this GET operation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the PMO to retrieve
 * @path /taskManagement/pmo/taskManagement/pmos/:id
 * @accessor api.functional.taskManagement.pmo.taskManagement.pmos.atPmo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atPmo(
  connection: IConnection,
  props: atPmo.Props,
): Promise<atPmo.Response> {
  return true === connection.simulate
    ? atPmo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atPmo.METADATA,
          path: atPmo.path(props),
          status: null,
        },
      );
}
export namespace atPmo {
  export type Props = {
    /** Unique identifier of the PMO to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementPmo;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pmo/taskManagement/pmos/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/taskManagement/pmos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementPmo =>
    typia.random<ITaskManagementPmo>();
  export const simulate = (
    connection: IConnection,
    props: atPmo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atPmo.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a PMO user by ID.
 *
 * Update the details of a specific Project Management Officer (PMO) user,
 * identified by their unique ID.
 *
 * This operation allows modification of PMO user attributes such as email,
 * password hash, and name. It serves administrative functions where PMO user
 * information needs to be maintained. Security is enforced to allow only
 * authorized users with the 'pmo' role to perform updates.
 *
 * The underlying database entity is task_management_pmo, stored as a UUID
 * primary key with related fields for email and authentication data. Upon
 * successful update, the updated PMO user's information is returned.
 *
 * This operation does not allow updating soft-deleted users, nor does it
 * override data validation rules such as email uniqueness. Validation errors or
 * authorization failures should result in appropriate error responses.
 *
 * Related operations include creating new PMO users and deleting existing ones,
 * all of which are secured and role-based.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target PMO user
 * @param props.body Update payload for PMO user
 * @path /taskManagement/pmo/taskManagement/pmos/:id
 * @accessor api.functional.taskManagement.pmo.taskManagement.pmos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target PMO user */
    id: string & tags.Format<"uuid">;

    /** Update payload for PMO user */
    body: ITaskManagementPmo.IUpdate;
  };
  export type Body = ITaskManagementPmo.IUpdate;
  export type Response = ITaskManagementPmo;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pmo/taskManagement/pmos/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/taskManagement/pmos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementPmo =>
    typia.random<ITaskManagementPmo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a PMO user by ID.
 *
 * Permanently delete a specific Project Management Officer (PMO) user from the
 * database by their unique ID.
 *
 * This operation irreversibly removes the PMO user record. It is restricted to
 * authorized users with the 'pmo' role to prevent accidental or unauthorized
 * deletions.
 *
 * Any related records depending on this PMO user should be handled cautiously
 * by the system to maintain data integrity.
 *
 * No response body is returned after successful deletion.
 *
 * Operations related to creation and update of PMO users complement this delete
 * operation for full lifecycle management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target PMO user
 * @path /taskManagement/pmo/taskManagement/pmos/:id
 * @accessor api.functional.taskManagement.pmo.taskManagement.pmos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target PMO user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pmo/taskManagement/pmos/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/taskManagement/pmos/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
