import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementProject } from "../../../../structures/ITaskManagementProject";
import { IPageITaskManagementProject } from "../../../../structures/IPageITaskManagementProject";
export * as boards from "./boards/index";
export * as members from "./members/index";

/**
 * Create a new project entity in the system.
 *
 * Request body must supply project details including ownerId, code, name,
 * optional description.
 *
 * The system validates all inputs and persists the new project.
 *
 * On success, returns the detailed project entity including generated ID and
 * timestamps.
 *
 * Only users with creation permissions may perform this operation.
 *
 * This operation is based on the task_management_projects Prisma table.
 *
 * @param props.connection
 * @param props.body Project creation data
 * @path /taskManagement/tpm/projects
 * @accessor api.functional.taskManagement.tpm.projects.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Project creation data */
    body: ITaskManagementProject.ICreate;
  };
  export type Body = ITaskManagementProject.ICreate;
  export type Response = ITaskManagementProject;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/projects",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/projects";
  export const random = (): ITaskManagementProject =>
    typia.random<ITaskManagementProject>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of projects.
 *
 * Retrieve a paginated list of projects supporting advanced filtering, sorting,
 * and pagination.
 *
 * This operation enables browsing and searching projects with criteria like
 * code, name, and owner information.
 *
 * Filters and pagination parameters are included in the request body.
 *
 * Response returns summarized information for each project.
 *
 * Access is allowed to all authenticated users. Pagination helps to manage
 * large result sets.
 *
 * No path parameters.
 *
 * This operation corresponds to the task_management_projects Prisma table.
 *
 * @param props.connection
 * @param props.body Pagination, filters, and search criteria for projects
 * @path /taskManagement/tpm/projects
 * @accessor api.functional.taskManagement.tpm.projects.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination, filters, and search criteria for projects */
    body: ITaskManagementProject.IRequest;
  };
  export type Body = ITaskManagementProject.IRequest;
  export type Response = IPageITaskManagementProject.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/tpm/projects",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/projects";
  export const random = (): IPageITaskManagementProject.ISummary =>
    typia.random<IPageITaskManagementProject.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed project information by ID.
 *
 * Retrieve full details of a single project entity.
 *
 * This operation fetches the project data identified by projectId.
 *
 * Includes all properties such as owner, code, name, description, creation, and
 * update timestamps.
 *
 * Only authenticated and authorized users may access this detailed information.
 *
 * Path parameter `projectId` is required and must be a valid UUID.
 *
 * Response returns the detailed project entity.
 *
 * Related operations for listing projects and managing projects complement
 * this.
 *
 * This is based on the task_management_projects Prisma table.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the project
 * @path /taskManagement/tpm/projects/:projectId
 * @accessor api.functional.taskManagement.tpm.projects.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the project */
    projectId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementProject;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/tpm/projects/:projectId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}`;
  export const random = (): ITaskManagementProject =>
    typia.random<ITaskManagementProject>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific project by projectId.
 *
 * Update an existing project identified by the projectId path parameter. This
 * operation allows modifying project details such as the owner (a TPM user),
 * unique code, descriptive name, and optional description.
 *
 * The operation ensures data integrity by checking the projectId exists and
 * validates fields according to the schema. It updates the record's timestamps
 * for last modification.
 *
 * Authorization is restricted to users with roles TPM, PM, or PMO, who manage
 * project resources effectively.
 *
 * This operation is associated with the task_management_projects table in the
 * Prisma schema, which defines projects including ownership, codes, and audit
 * timestamps with soft delete capability.
 *
 * The request body must provide fields conforming to the
 * ITaskManagementProject.IUpdate type, ensuring valid data types and value
 * constraints.
 *
 * The response returns the complete project information after the update.
 *
 * No data related to soft deletion is modified here; to delete a project, use
 * the dedicated erase operation.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.body Project update data
 * @path /taskManagement/tpm/projects/:projectId
 * @accessor api.functional.taskManagement.tpm.projects.updateProject
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateProject(
  connection: IConnection,
  props: updateProject.Props,
): Promise<updateProject.Response> {
  return true === connection.simulate
    ? updateProject.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateProject.METADATA,
          path: updateProject.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateProject {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Project update data */
    body: ITaskManagementProject.IUpdate;
  };
  export type Body = ITaskManagementProject.IUpdate;
  export type Response = ITaskManagementProject;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/projects/:projectId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}`;
  export const random = (): ITaskManagementProject =>
    typia.random<ITaskManagementProject>();
  export const simulate = (
    connection: IConnection,
    props: updateProject.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateProject.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific project by projectId.
 *
 * Permanently remove the project record identified by projectId from the
 * database, or mark it as deleted if soft delete is implemented.
 *
 * Only authorized roles TPM, PM, and PMO may perform this operation.
 *
 * This operation maps to the task_management_projects Prisma schema table.
 *
 * Deleting a project removes all associated boards and tasks implicitly due to
 * cascade rules.
 *
 * Once deleted, the project cannot be retrieved.
 *
 * No request body is required for this operation.
 *
 * Response contains no content on success.
 *
 * Ensure callers confirm intent before invoking this operation as it is
 * irreversible.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @path /taskManagement/tpm/projects/:projectId
 * @accessor api.functional.taskManagement.tpm.projects.eraseProject
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseProject(
  connection: IConnection,
  props: eraseProject.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseProject.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseProject.METADATA,
          path: eraseProject.path(props),
          status: null,
        },
      );
}
export namespace eraseProject {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/projects/:projectId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseProject.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseProject.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
