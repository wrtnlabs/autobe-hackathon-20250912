import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTask } from "../../../../structures/ITaskManagementTask";
import { ITaskManagementTasks } from "../../../../structures/ITaskManagementTasks";
import { IPageITaskManagementTasks } from "../../../../structures/IPageITaskManagementTasks";
export * as assignments from "./assignments/index";
export * as comments from "./comments/index";
export * as statusChanges from "./statusChanges/index";

/**
 * Create a new task record in task_management_tasks.
 *
 * Create a new task in the system by submitting mandatory and optional task
 * details.
 *
 * This API endpoint operates on the 'task_management_tasks' table which
 * contains comprehensive task metadata.
 *
 * Users with roles TPM, PM, PMO or equivalent can invoke this to insert new
 * tasks with status defaulting to 'To Do'.
 *
 * Task data includes title, optional description, priority, due date,
 * project/board affiliations, and creator reference.
 *
 * The response returns the full task record including assigned IDs and
 * now-persistent metadata.
 *
 * No soft delete is done; newly created records are active immediately.
 *
 * This operation integrates with assignment and notification services to inform
 * relevant users.
 *
 * Request body must comply with the ITaskManagementTask.ICreate interface.
 *
 * @param props.connection
 * @param props.body Details for new task creation
 * @path /taskManagement/tpm/tasks
 * @accessor api.functional.taskManagement.tpm.tasks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details for new task creation */
    body: ITaskManagementTask.ICreate;
  };
  export type Body = ITaskManagementTask.ICreate;
  export type Response = ITaskManagementTask;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/tasks";
  export const random = (): ITaskManagementTask =>
    typia.random<ITaskManagementTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Complex search and paginated retrieval of task list from
 * task_management_tasks.
 *
 * Retrieve a paginated list of task entities from the system, optionally
 * filtered and sorted according to complex criteria provided in the request
 * body.
 *
 * This operation accesses the 'task_management_tasks' table, encompassing
 * details like title, description, status, priority, due date, creator, and
 * project associations.
 *
 * Users with respective roles such as TPM, PM, Developer, Designer, QA, and PMO
 * can query tasks to support task tracking, assignment overview, and workload
 * distribution.
 *
 * The request accepts filters such as status, priority, assignees, and date
 * ranges to refine results. Pagination parameters control result set size and
 * navigation.
 *
 * The response provides task summaries with essential information for listing,
 * enabling frontend applications to display manageable task lists.
 *
 * This operation integrates with other task detail endpoints for CRUD and
 * status updates.
 *
 * @param props.connection
 * @param props.body Filters, pagination, and sorting parameters for task list
 *   retrieval
 * @path /taskManagement/tpm/tasks
 * @accessor api.functional.taskManagement.tpm.tasks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filters, pagination, and sorting parameters for task list retrieval */
    body: ITaskManagementTasks.IRequest;
  };
  export type Body = ITaskManagementTasks.IRequest;
  export type Response = IPageITaskManagementTasks.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/tpm/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/tasks";
  export const random = (): IPageITaskManagementTasks.ISummary =>
    typia.random<IPageITaskManagementTasks.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve single task details by taskId.
 *
 * Fetch detailed task information by its unique identifier.
 *
 * This API targets the 'task_management_tasks' database table storing task
 * metadata including status, priority, creator reference, project and board
 * membership, due date, title, and description.
 *
 * Security restrictions ensure that only authorized users can view sensitive
 * task details.
 *
 * The response contains the full task object conforming to the data model
 * including all relevant fields derived from the Prisma schema for tasks.
 *
 * This endpoint supports client-side task detail views, editing workflows, and
 * history tracking via related status change and comment APIs.
 *
 * No request body required; response provides detailed task data.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to retrieve
 * @path /taskManagement/tpm/tasks/:taskId
 * @accessor api.functional.taskManagement.tpm.tasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the task to retrieve */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTask;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/tpm/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITaskManagementTask =>
    typia.random<ITaskManagementTask>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task by taskId from the task_management_tasks table.
 *
 * This API operation enables authorized users (roles TPM, PM, PMO) to update
 * task details stored in the task_management_tasks table identified by the
 * 'taskId' path parameter.
 *
 * Users can update task fields such as title, description, status (linking to
 * task_management_task_statuses via status_id), priority (linking to
 * task_management_priorities via priority_id), due date, project_id, and
 * board_id.
 *
 * The system validates all provided references to ensure they exist and
 * enforces business rules like non-empty title and valid date formats.
 *
 * Errors are returned if inputs are invalid, the task does not exist, or the
 * user lacks appropriate permissions.
 *
 * This operation complements related task creation, deletion, and assignment
 * APIs for full task lifecycle management.
 *
 * This endpoint applies a hard update and sets the updated_at timestamp
 * accordingly.
 *
 * @param props.connection
 * @param props.taskId The UUID of the task to update
 * @param props.body Task update information matching
 *   ITaskManagementTask.IUpdate schema.
 * @path /taskManagement/tpm/tasks/:taskId
 * @accessor api.functional.taskManagement.tpm.tasks.updateTask
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateTask(
  connection: IConnection,
  props: updateTask.Props,
): Promise<updateTask.Response> {
  return true === connection.simulate
    ? updateTask.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateTask.METADATA,
          path: updateTask.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateTask {
  export type Props = {
    /** The UUID of the task to update */
    taskId: string & tags.Format<"uuid">;

    /** Task update information matching ITaskManagementTask.IUpdate schema. */
    body: ITaskManagementTask.IUpdate;
  };
  export type Body = ITaskManagementTask.IUpdate;
  export type Response = ITaskManagementTask;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/tasks/:taskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITaskManagementTask =>
    typia.random<ITaskManagementTask>();
  export const simulate = (
    connection: IConnection,
    props: updateTask.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateTask.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a task by taskId from the task_management_tasks table.
 *
 * This API operation permanently deletes the task identified by the 'taskId'
 * parameter from the task_management_tasks database table.
 *
 * Users with delete permissions (roles TPM, PM, PMO) can perform this
 * operation.
 *
 * Although the schema has a soft delete column 'deleted_at', this operation
 * performs a hard delete removing the record entirely.
 *
 * Adequate error handling manages cases of nonexistent tasks or unauthorized
 * deletion attempts.
 *
 * No request body is required.
 *
 * Response body is empty indicating successful deletion.
 *
 * @param props.connection
 * @param props.taskId The UUID of the task to delete
 * @path /taskManagement/tpm/tasks/:taskId
 * @accessor api.functional.taskManagement.tpm.tasks.eraseTask
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseTask(
  connection: IConnection,
  props: eraseTask.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseTask.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseTask.METADATA,
          path: eraseTask.path(props),
          status: null,
        },
      );
}
export namespace eraseTask {
  export type Props = {
    /** The UUID of the task to delete */
    taskId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseTask.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseTask.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
