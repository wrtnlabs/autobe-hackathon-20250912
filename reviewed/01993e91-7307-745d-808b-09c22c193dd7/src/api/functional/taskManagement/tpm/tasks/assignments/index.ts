import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskAssignment } from "../../../../../structures/ITaskManagementTaskAssignment";
import { ITaskManagementTaskAssignmentArray } from "../../../../../structures/ITaskManagementTaskAssignmentArray";

/**
 * Create a new assignment for a task.
 *
 * This API endpoint allows users with appropriate roles (TPM, PM, PMO) to
 * create a new assignment of a user to a task. The assignment represents that
 * the user is responsible for or working on the task.
 *
 * The operation requires the path parameter 'taskId' which identifies the task
 * to assign. The request body includes at minimum the 'assigneeId', which must
 * reference a valid user in the system with a role capable of being assigned
 * (likely from TPM, PM, Developer, Designer, QA roles as per business rules).
 *
 * The API ensures that the assignment record is created with an accurate
 * timestamp reflecting when the assignment was made. This operation contributes
 * to task management by enabling clear ownership and collaborative work on
 * tasks.
 *
 * Security considerations:
 *
 * - Only authorized roles can perform assignment creation.
 * - The system validates that the assigneeId is valid and user exists.
 *
 * This operation corresponds to the 'task_management_task_assignments' Prisma
 * DB table.
 *
 * Error handling:
 *
 * - Returns errors if taskId is invalid or not found.
 * - Returns errors if assigneeId is missing or invalid.
 *
 * Successful operation returns the created assignment information.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Assignment creation data including assignee ID
 * @path /taskManagement/tpm/tasks/:taskId/assignments
 * @accessor api.functional.taskManagement.tpm.tasks.assignments.createAssignment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createAssignment(
  connection: IConnection,
  props: createAssignment.Props,
): Promise<createAssignment.Response> {
  return true === connection.simulate
    ? createAssignment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createAssignment.METADATA,
          path: createAssignment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createAssignment {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Assignment creation data including assignee ID */
    body: ITaskManagementTaskAssignment.ICreate;
  };
  export type Body = ITaskManagementTaskAssignment.ICreate;
  export type Response = ITaskManagementTaskAssignment;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/tasks/:taskId/assignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments`;
  export const random = (): ITaskManagementTaskAssignment =>
    typia.random<ITaskManagementTaskAssignment>();
  export const simulate = (
    connection: IConnection,
    props: createAssignment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createAssignment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the list of assignments for a given task identified by taskId.
 *
 * This API operation retrieves all assignments related to a specific task using
 * the task's unique identifier 'taskId'.
 *
 * Each assignment links a user (typically a TPM role user) to the task,
 * including the assignment timestamp.
 *
 * This read-only operation supports roles TPM, PM, PMO, Developer, Designer,
 * and QA.
 *
 * No request body is required.
 *
 * The response contains a list of task assignments details.
 *
 * The operation may return errors if the task does not exist or access is
 * unauthorized.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @path /taskManagement/tpm/tasks/:taskId/assignments
 * @accessor api.functional.taskManagement.tpm.tasks.assignments.indexTaskAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexTaskAssignments(
  connection: IConnection,
  props: indexTaskAssignments.Props,
): Promise<indexTaskAssignments.Response> {
  return true === connection.simulate
    ? indexTaskAssignments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexTaskAssignments.METADATA,
          path: indexTaskAssignments.path(props),
          status: null,
        },
      );
}
export namespace indexTaskAssignments {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskAssignmentArray;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/tpm/tasks/:taskId/assignments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments`;
  export const random = (): ITaskManagementTaskAssignmentArray =>
    typia.random<ITaskManagementTaskAssignmentArray>();
  export const simulate = (
    connection: IConnection,
    props: indexTaskAssignments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexTaskAssignments.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific assignment by assignmentId for a task by taskId.
 *
 * This API operation fetches the detailed information of a single task
 * assignment identified by 'assignmentId' under the parent task identified by
 * 'taskId'.
 *
 * It returns assignment data including the assignee ID and the assigned
 * timestamp.
 *
 * Allowed roles include TPM, PM, PMO, Developer, Designer, and QA.
 *
 * No request body is required.
 *
 * Errors are returned if the assignment or parent task does not exist or access
 * is unauthorized.
 *
 * Useful for audit trails and individual assignment inspection.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the parent task
 * @param props.assignmentId Unique identifier of the target assignment
 * @path /taskManagement/tpm/tasks/:taskId/assignments/:assignmentId
 * @accessor api.functional.taskManagement.tpm.tasks.assignments.atTaskAssignment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atTaskAssignment(
  connection: IConnection,
  props: atTaskAssignment.Props,
): Promise<atTaskAssignment.Response> {
  return true === connection.simulate
    ? atTaskAssignment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atTaskAssignment.METADATA,
          path: atTaskAssignment.path(props),
          status: null,
        },
      );
}
export namespace atTaskAssignment {
  export type Props = {
    /** Unique identifier of the parent task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target assignment */
    assignmentId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskAssignment;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/tpm/tasks/:taskId/assignments/:assignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments/${encodeURIComponent(props.assignmentId ?? "null")}`;
  export const random = (): ITaskManagementTaskAssignment =>
    typia.random<ITaskManagementTaskAssignment>();
  export const simulate = (
    connection: IConnection,
    props: atTaskAssignment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atTaskAssignment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("assignmentId")(() => typia.assert(props.assignmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task assignment.
 *
 * This API endpoint allows authorized roles to update a specific task
 * assignment for a task. The path parameters 'taskId' and 'assignmentId'
 * specify the target assignment record.
 *
 * The request body includes fields to update, typically allowing changing the
 * assignee or updating timestamps. This supports managing task ownership
 * changes or corrections.
 *
 * Security checks ensure only authorized users can update assignments.
 *
 * Error handling:
 *
 * - Returns error if taskId or assignmentId not found.
 * - Returns error if update data is invalid.
 *
 * This corresponds to the 'task_management_task_assignments' table in the
 * Prisma schema.
 *
 * No response body data is required on success, but updated assignment data may
 * be returned depending on implementation.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.assignmentId Unique identifier of the task assignment to update
 * @param props.body Assignment update data
 * @path /taskManagement/tpm/tasks/:taskId/assignments/:assignmentId
 * @accessor api.functional.taskManagement.tpm.tasks.assignments.updateAssignment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateAssignment(
  connection: IConnection,
  props: updateAssignment.Props,
): Promise<updateAssignment.Response> {
  return true === connection.simulate
    ? updateAssignment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAssignment.METADATA,
          path: updateAssignment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateAssignment {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task assignment to update */
    assignmentId: string & tags.Format<"uuid">;

    /** Assignment update data */
    body: ITaskManagementTaskAssignment.IUpdate;
  };
  export type Body = ITaskManagementTaskAssignment.IUpdate;
  export type Response = ITaskManagementTaskAssignment;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/tasks/:taskId/assignments/:assignmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments/${encodeURIComponent(props.assignmentId ?? "null")}`;
  export const random = (): ITaskManagementTaskAssignment =>
    typia.random<ITaskManagementTaskAssignment>();
  export const simulate = (
    connection: IConnection,
    props: updateAssignment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateAssignment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("assignmentId")(() => typia.assert(props.assignmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a task assignment.
 *
 * This API endpoint enables authorized roles to delete a task assignment by
 * specifying both the taskId and the assignmentId in the path. Upon deletion,
 * the assignment record is removed from the database, effectively unassigning
 * the user from the task.
 *
 * Security considerations:
 *
 * - Only users with appropriate roles can perform deletion.
 *
 * Error handling:
 *
 * - Returns errors if taskId or assignmentId are invalid or not found.
 *
 * This corresponds to the 'task_management_task_assignments' table in the
 * Prisma schema.
 *
 * No request body or response body is required for this operation.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.assignmentId Unique identifier of the task assignment to delete
 * @path /taskManagement/tpm/tasks/:taskId/assignments/:assignmentId
 * @accessor api.functional.taskManagement.tpm.tasks.assignments.eraseAssignment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAssignment(
  connection: IConnection,
  props: eraseAssignment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAssignment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAssignment.METADATA,
          path: eraseAssignment.path(props),
          status: null,
        },
      );
}
export namespace eraseAssignment {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task assignment to delete */
    assignmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/tasks/:taskId/assignments/:assignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments/${encodeURIComponent(props.assignmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAssignment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAssignment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("assignmentId")(() => typia.assert(props.assignmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
