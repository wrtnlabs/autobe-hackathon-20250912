import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskManagementRoles } from "../../../../structures/ITaskManagementTaskManagementRoles";
import { IPageITaskManagementTaskManagementRoles } from "../../../../structures/IPageITaskManagementTaskManagementRoles";

/**
 * Create a TaskManagementRole.
 *
 * Create a new task management role by providing mandatory role code, name, and
 * optional description. The system validates input, enforces uniqueness of role
 * code, and persists the role details.
 *
 * Only users in roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or
 * 'qa' are authorized to invoke this operation.
 *
 * Errors include validation failures and conflicts on duplicate codes.
 *
 * Operates on the 'task_management_roles' Prisma table.
 *
 * @param props.connection
 * @param props.body TaskManagementRole creation data
 * @path /taskManagement/tpm/taskManagementRoles
 * @accessor api.functional.taskManagement.tpm.taskManagementRoles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** TaskManagementRole creation data */
    body: ITaskManagementTaskManagementRoles.ICreate;
  };
  export type Body = ITaskManagementTaskManagementRoles.ICreate;
  export type Response = ITaskManagementTaskManagementRoles;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/taskManagementRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/taskManagementRoles";
  export const random = (): ITaskManagementTaskManagementRoles =>
    typia.random<ITaskManagementTaskManagementRoles>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of TaskManagementRole.
 *
 * Retrieve a paginated and filtered list of task management roles. This
 * operation provides flexible querying options to search roles by code, name,
 * or description, with pagination and sorting controls.
 *
 * The 'task_management_roles' table includes unique codes like 'TPM', 'PM',
 * 'Developer', etc., with descriptive information.
 *
 * Permission to access this endpoint is granted only to authorized users with
 * roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'.
 * Unauthorized access is forbidden.
 *
 * Errors may result from invalid query parameters or authentication failures.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for task management role
 *   filtering
 * @path /taskManagement/tpm/taskManagementRoles
 * @accessor api.functional.taskManagement.tpm.taskManagementRoles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for task management role filtering */
    body: ITaskManagementTaskManagementRoles.IRequest;
  };
  export type Body = ITaskManagementTaskManagementRoles.IRequest;
  export type Response = IPageITaskManagementTaskManagementRoles;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/tpm/taskManagementRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/taskManagementRoles";
  export const random = (): IPageITaskManagementTaskManagementRoles =>
    typia.random<IPageITaskManagementTaskManagementRoles>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info of a TaskManagementRole by ID.
 *
 * Retrieve detailed information about a specific task management role by its
 * unique identifier.
 *
 * The operation returns properties including role code, name, optional
 * description, created and updated timestamps.
 *
 * Access is restricted to authorized users with roles such as 'tpm', 'pm',
 * 'pmo', 'developer', 'designer', or 'qa'.
 *
 * Errors include invalid ID format, not found, or unauthorized access errors.
 *
 * This operation accesses the 'task_management_roles' Prisma table.
 *
 * @param props.connection
 * @param props.id UUID of the TaskManagementRole
 * @path /taskManagement/tpm/taskManagementRoles/:id
 * @accessor api.functional.taskManagement.tpm.taskManagementRoles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the TaskManagementRole */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskManagementRoles;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/tpm/taskManagementRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/taskManagementRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTaskManagementRoles =>
    typia.random<ITaskManagementTaskManagementRoles>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific TaskManagementRole.
 *
 * Update an existing task management role identified by UUID, with new code,
 * name, and optional description.
 *
 * Authorization restricted to users with roles 'tpm', 'pm', 'pmo', 'developer',
 * 'designer', or 'qa'.
 *
 * Handles validation and uniqueness constraints.
 *
 * Operates on the 'task_management_roles' Prisma table.
 *
 * Returns updated role info.
 *
 * Errors include not found or validation failure.
 *
 * @param props.connection
 * @param props.id UUID of TaskManagementRole to update
 * @param props.body TaskManagementRole update data
 * @path /taskManagement/tpm/taskManagementRoles/:id
 * @accessor api.functional.taskManagement.tpm.taskManagementRoles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of TaskManagementRole to update */
    id: string & tags.Format<"uuid">;

    /** TaskManagementRole update data */
    body: ITaskManagementTaskManagementRoles.IUpdate;
  };
  export type Body = ITaskManagementTaskManagementRoles.IUpdate;
  export type Response = ITaskManagementTaskManagementRoles;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/taskManagementRoles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/taskManagementRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTaskManagementRoles =>
    typia.random<ITaskManagementTaskManagementRoles>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a taskManagementRole by ID.
 *
 * Deletes a specific taskManagementRole by its unique identifier. This
 * permanently removes the role from the underlying task_management_roles
 * table.
 *
 * Only authorized users such as TPM, PM, or PMO roles may perform this
 * operation to ensure security and integrity of role management.
 *
 * Failure to locate the specified role by ID should result in an appropriate
 * error response.
 *
 * The operation has no request body and returns no response content upon
 * success.
 *
 * @param props.connection
 * @param props.id Unique UUID identifier of the taskManagementRole to delete
 * @path /taskManagement/tpm/taskManagementRoles/:id
 * @accessor api.functional.taskManagement.tpm.taskManagementRoles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique UUID identifier of the taskManagementRole to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/taskManagementRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/taskManagementRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
