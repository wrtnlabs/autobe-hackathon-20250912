import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskStatusChange } from "../../../../../structures/ITaskManagementTaskStatusChange";
import { IPageITaskManagementTaskStatusChange } from "../../../../../structures/IPageITaskManagementTaskStatusChange";

/**
 * Create a new task status change record for a given task. This operation logs
 * a status transition in the task's lifecycle.
 *
 * User must provide the new status ID and optionally a comment describing the
 * change.
 *
 * Operation validates input and ensures only authorized roles perform status
 * changes.
 *
 * References task_management_task_status_changes table and requires taskId path
 * parameter.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Payload for creating a task status change
 * @path /taskManagement/pm/tasks/:taskId/statusChanges
 * @accessor api.functional.taskManagement.pm.tasks.statusChanges.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Payload for creating a task status change */
    body: ITaskManagementTaskStatusChange.ICreate;
  };
  export type Body = ITaskManagementTaskStatusChange.ICreate;
  export type Response = ITaskManagementTaskStatusChange;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/tasks/:taskId/statusChanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/statusChanges`;
  export const random = (): ITaskManagementTaskStatusChange =>
    typia.random<ITaskManagementTaskStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated list retrieval of task status changes by task ID.
 *
 * Retrieve a filtered and paginated list of status change history entries for
 * the given task.
 *
 * This method allows authorized users to track the full lifecycle of task
 * status changes by returning detailed audit trail data including new status,
 * change timestamps, and optional admin comments.
 *
 * Security is enforced to allow only permitted roles to access task status
 * histories. The operation uses path parameter taskId to identify the specific
 * task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema
 * for filter and pagination controls.
 *
 * This operation returns a paginated response of task status change records
 * referencing the task_management_task_status_changes table.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Request body for searching and pagination of task status
 *   changes
 * @path /taskManagement/pm/tasks/:taskId/statusChanges
 * @accessor api.functional.taskManagement.pm.tasks.statusChanges.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Request body for searching and pagination of task status changes */
    body: ITaskManagementTaskStatusChange.IRequest;
  };
  export type Body = ITaskManagementTaskStatusChange.IRequest;
  export type Response = IPageITaskManagementTaskStatusChange;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pm/tasks/:taskId/statusChanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/statusChanges`;
  export const random = (): IPageITaskManagementTaskStatusChange =>
    typia.random<IPageITaskManagementTaskStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific task status change.
 *
 * Retrieve detailed information of a single status change record within a task
 * identified by taskId and statusChangeId.
 *
 * Useful for auditing specific status changes with all associated metadata.
 *
 * Only accessible by authorized users with appropriate role permissions.
 *
 * References the task_management_task_status_changes schema.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.statusChangeId Unique identifier of the task status change
 * @path /taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId
 * @accessor api.functional.taskManagement.pm.tasks.statusChanges.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task status change */
    statusChangeId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskStatusChange;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): ITaskManagementTaskStatusChange =>
    typia.random<ITaskManagementTaskStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update task status change record.
 *
 * Update fields of an existing task status change record specified by taskId
 * and statusChangeId.
 *
 * Allows authorized updates to status transition data and comments.
 *
 * Ensures data integrity and adherence to validation rules on status values.
 *
 * Tied to the task_management_task_status_changes table schema.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.statusChangeId Unique identifier of the task status change
 * @param props.body Payload for updating a task status change
 * @path /taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId
 * @accessor api.functional.taskManagement.pm.tasks.statusChanges.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the task status change */
    statusChangeId: string & tags.Format<"uuid">;

    /** Payload for updating a task status change */
    body: ITaskManagementTaskStatusChange.IUpdate;
  };
  export type Body = ITaskManagementTaskStatusChange.IUpdate;
  export type Response = ITaskManagementTaskStatusChange;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): ITaskManagementTaskStatusChange =>
    typia.random<ITaskManagementTaskStatusChange>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific task status change record.
 *
 * Allows authorized users to permanently delete a task status change entry from
 * the task_management_task_status_changes table. This deletes the specific
 * record of a status change event for a task.
 *
 * Security and permissions enforcement ensures only users with relevant roles
 * can perform deletions.
 *
 * The operation requires the taskId and statusChangeId path parameters, both
 * expected as valid UUID strings.
 *
 * Deleting this record removes the audited history of a status change, so it
 * should be used carefully. The system performs hard delete with no recovery.
 *
 * Use this operation when cleaning up old or incorrect status change records is
 * necessary.
 *
 * No request body is needed. No response body is returned upon success.
 *
 * @param props.connection
 * @param props.taskId Identifier of the target task
 * @param props.statusChangeId Identifier of the status change to delete
 * @path /taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId
 * @accessor api.functional.taskManagement.pm.tasks.statusChanges.eraseStatusChange
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseStatusChange(
  connection: IConnection,
  props: eraseStatusChange.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseStatusChange.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseStatusChange.METADATA,
          path: eraseStatusChange.path(props),
          status: null,
        },
      );
}
export namespace eraseStatusChange {
  export type Props = {
    /** Identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Identifier of the status change to delete */
    statusChangeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/tasks/:taskId/statusChanges/:statusChangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/statusChanges/${encodeURIComponent(props.statusChangeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseStatusChange.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseStatusChange.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("statusChangeId")(() => typia.assert(props.statusChangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
