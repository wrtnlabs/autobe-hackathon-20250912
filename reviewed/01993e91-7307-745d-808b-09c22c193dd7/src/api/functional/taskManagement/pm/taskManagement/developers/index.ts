import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementDeveloper } from "../../../../../structures/ITaskManagementDeveloper";

/**
 * Create a new developer user with mandatory fields including email,
 * password_hash, and name. The system will assign a unique UUID primary key and
 * manage created_at and updated_at timestamps automatically. This operation is
 * restricted to authorized users who can manage developer accounts.
 *
 * Security considerations include secure password storage via hashing and
 * unique email validation. Soft delete support via deleted_at allows safe
 * recovery.
 *
 * This operation interacts directly with the task_management_developer Prisma
 * schema model. It does not accept or return sensitive password data except
 * hashed. Returns the created developer entity information.
 *
 * Errors are returned for duplicate emails or validation failures.
 *
 * Authorization roles for this endpoint are users with assignment and creation
 * rights typically TPM, PM, or PMO roles.
 *
 * @param props.connection
 * @param props.body Information required to create a developer user account
 * @path /taskManagement/pm/taskManagement/developers
 * @accessor api.functional.taskManagement.pm.taskManagement.developers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a developer user account */
    body: ITaskManagementDeveloper.ICreate;
  };
  export type Body = ITaskManagementDeveloper.ICreate;
  export type Response = ITaskManagementDeveloper;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/taskManagement/developers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pm/taskManagement/developers";
  export const random = (): ITaskManagementDeveloper =>
    typia.random<ITaskManagementDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update developer information by ID.
 *
 * Update an existing developer by id. Changes can include email, password_hash,
 * and name.
 *
 * The system will update the updated_at timestamp upon modification. Soft
 * deleted developers (deleted_at is set) cannot be updated.
 *
 * This operation requires authentication and authorization for user management
 * roles. It interacts with the task_management_developer Prisma schema model.
 *
 * Errors are returned for invalid ids, duplicate emails, or validation issues.
 *
 * Authorization roles include admin users or their equivalents who manage
 * developer accounts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the developer to update
 * @param props.body Updated developer information
 * @path /taskManagement/pm/taskManagement/developers/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.developers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the developer to update */
    id: string & tags.Format<"uuid">;

    /** Updated developer information */
    body: ITaskManagementDeveloper.IUpdate;
  };
  export type Body = ITaskManagementDeveloper.IUpdate;
  export type Response = ITaskManagementDeveloper;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/taskManagement/developers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/taskManagement/developers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementDeveloper =>
    typia.random<ITaskManagementDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete developer user by ID.
 *
 * Soft delete a developer user by marking the deleted_at timestamp. The record
 * remains in the database but is excluded from active queries.
 *
 * Only authorized users can perform deletion. This operation interacts with the
 * task_management_developer Prisma schema.
 *
 * Errors will occur if the developer does not exist or is already deleted.
 *
 * @param props.connection
 * @param props.id Unique identifier of the developer to delete
 * @path /taskManagement/pm/taskManagement/developers/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.developers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the developer to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/taskManagement/developers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/taskManagement/developers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
