import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementBoardMember } from "../../../../../structures/ITaskManagementBoardMember";

/**
 * Retrieve details about a specific board member.
 *
 * This API operation retrieves detailed information about a specific member of
 * a board in the task management system. The board and member are identified by
 * their unique UUIDs.
 *
 * Users having valid authentication and appropriate role permissions like tpm,
 * pm, pmo, developer, designer, or qa can fetch membership details for the
 * specified memberId within the given boardId.
 *
 * The operation maps to the task_management_board_members table in the Prisma
 * schema, involving fields such as boardId (foreign key to boards), userId
 * (member user), and creation/update timestamps. Soft deletion is handled by
 * filtering out memberships with non-null deleted_at timestamps.
 *
 * Validation ensures both IDs are valid UUID strings and represent existing
 * entities.
 *
 * Errors include not found if membership does not exist or is soft deleted, and
 * unauthorized if requester lacks permission.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the board
 * @param props.memberId Unique identifier of the board member user
 * @path /taskManagement/pm/boards/:boardId/members/:memberId
 * @accessor api.functional.taskManagement.pm.boards.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the board */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the board member user */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementBoardMember;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pm/boards/:boardId/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/boards/${encodeURIComponent(props.boardId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITaskManagementBoardMember =>
    typia.random<ITaskManagementBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a board member's information.
 *
 * This API operation updates information of an existing member associated with
 * a board. The member is identified by memberId, and the board is identified by
 * boardId.
 *
 * The operation accepts updated membership fields via the request body.
 *
 * It relates to the task_management_board_members table that tracks membership
 * associations between users and boards, including timestamps and soft-deletion
 * flags.
 *
 * Appropriate authorization is required to modify membership information. The
 * API provides the updated membership record upon success.
 *
 * This update operation helps maintain correct membership information and
 * supports audit compliance.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the board
 * @param props.memberId Unique identifier of the board member user
 * @param props.body Updated information for the board member
 * @path /taskManagement/pm/boards/:boardId/members/:memberId
 * @accessor api.functional.taskManagement.pm.boards.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the board */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the board member user */
    memberId: string & tags.Format<"uuid">;

    /** Updated information for the board member */
    body: ITaskManagementBoardMember.IUpdate;
  };
  export type Body = ITaskManagementBoardMember.IUpdate;
  export type Response = ITaskManagementBoardMember;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/boards/:boardId/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/boards/${encodeURIComponent(props.boardId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITaskManagementBoardMember =>
    typia.random<ITaskManagementBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a board member.
 *
 * This API operation removes a member from a board, identified by memberId,
 * within the specified board identified by boardId.
 *
 * It deletes the membership record in the task_management_board_members table
 * linking the user to the board.
 *
 * Soft delete semantics apply if implemented; otherwise, the record is fully
 * removed.
 *
 * Authorization checks confirm the requester has permission to delete board
 * members.
 *
 * No response body is returned upon successful deletion.
 *
 * Errors include not found if the membership does not exist or forbidden if
 * unauthorized.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the board
 * @param props.memberId Unique identifier of the board member user
 * @path /taskManagement/pm/boards/:boardId/members/:memberId
 * @accessor api.functional.taskManagement.pm.boards.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the board */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the board member user */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/boards/:boardId/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/boards/${encodeURIComponent(props.boardId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new board member.
 *
 * This API operation creates a new member association to a board, allowing the
 * addition of a user as a member to a specific board identified by boardId.
 *
 * The request body must include userId, representing the user to be added as a
 * member.
 *
 * Upon successful creation, the API returns the full membership record
 * including board and user references and timestamps.
 *
 * Authorized roles such as tpm, pm, pmo, developer, designer, and qa can
 * perform this operation.
 *
 * The operation directly manipulates the task_management_board_members table,
 * ensuring data integrity and audit compliance.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the board
 * @param props.body Information of the new board member
 * @path /taskManagement/pm/boards/:boardId/members
 * @accessor api.functional.taskManagement.pm.boards.members.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the board */
    boardId: string & tags.Format<"uuid">;

    /** Information of the new board member */
    body: ITaskManagementBoardMember.ICreate;
  };
  export type Body = ITaskManagementBoardMember.ICreate;
  export type Response = ITaskManagementBoardMember;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/boards/:boardId/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/boards/${encodeURIComponent(props.boardId ?? "null")}/members`;
  export const random = (): ITaskManagementBoardMember =>
    typia.random<ITaskManagementBoardMember>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
