import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTasks } from "../../../../structures/ITaskManagementTasks";
import { IPageITaskManagementTasks } from "../../../../structures/IPageITaskManagementTasks";
import { ITaskManagementTask } from "../../../../structures/ITaskManagementTask";
export * as assignments from "./assignments/index";
export * as comments from "./comments/index";
export * as statusChanges from "./statusChanges/index";

/**
 * Complex search and paginated retrieval of task list from
 * task_management_tasks.
 *
 * Retrieve a paginated list of task entities from the system, optionally
 * filtered and sorted according to complex criteria provided in the request
 * body.
 *
 * This operation accesses the 'task_management_tasks' table, encompassing
 * details like title, description, status, priority, due date, creator, and
 * project associations.
 *
 * Users with respective roles such as TPM, PM, Developer, Designer, QA, and PMO
 * can query tasks to support task tracking, assignment overview, and workload
 * distribution.
 *
 * The request accepts filters such as status, priority, assignees, and date
 * ranges to refine results. Pagination parameters control result set size and
 * navigation.
 *
 * The response provides task summaries with essential information for listing,
 * enabling frontend applications to display manageable task lists.
 *
 * This operation integrates with other task detail endpoints for CRUD and
 * status updates.
 *
 * @param props.connection
 * @param props.body Filters, pagination, and sorting parameters for task list
 *   retrieval
 * @path /taskManagement/developer/tasks
 * @accessor api.functional.taskManagement.developer.tasks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filters, pagination, and sorting parameters for task list retrieval */
    body: ITaskManagementTasks.IRequest;
  };
  export type Body = ITaskManagementTasks.IRequest;
  export type Response = IPageITaskManagementTasks.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/developer/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/developer/tasks";
  export const random = (): IPageITaskManagementTasks.ISummary =>
    typia.random<IPageITaskManagementTasks.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve single task details by taskId.
 *
 * Fetch detailed task information by its unique identifier.
 *
 * This API targets the 'task_management_tasks' database table storing task
 * metadata including status, priority, creator reference, project and board
 * membership, due date, title, and description.
 *
 * Security restrictions ensure that only authorized users can view sensitive
 * task details.
 *
 * The response contains the full task object conforming to the data model
 * including all relevant fields derived from the Prisma schema for tasks.
 *
 * This endpoint supports client-side task detail views, editing workflows, and
 * history tracking via related status change and comment APIs.
 *
 * No request body required; response provides detailed task data.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the task to retrieve
 * @path /taskManagement/developer/tasks/:taskId
 * @accessor api.functional.taskManagement.developer.tasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the task to retrieve */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTask;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/developer/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/developer/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): ITaskManagementTask =>
    typia.random<ITaskManagementTask>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
