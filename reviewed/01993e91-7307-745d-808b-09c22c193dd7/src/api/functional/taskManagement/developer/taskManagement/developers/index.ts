import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementDeveloper } from "../../../../../structures/ITaskManagementDeveloper";
import { IPageITaskManagementDeveloper } from "../../../../../structures/IPageITaskManagementDeveloper";

/**
 * Search and retrieve a filtered, paginated list of developers.
 *
 * Retrieve a paginated list of developers filtered and sorted by criteria
 * specified in the request.
 *
 * This operation enables searching developers by attributes such as email and
 * name, supports pagination and sorting, and returns summaries of developers
 * along with metadata about the result set.
 *
 * Access is authorized for authenticated users with the 'developer' role,
 * reflecting developer access permissions.
 *
 * The underlying database entity is task_management_developer, containing
 * detailed developer information. Results exclude sensitive information like
 * password hashes and are optimized for list display.
 *
 * This supports efficient management and display of developer users in
 * administrative or reporting interfaces.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for developer
 *   filtering
 * @path /taskManagement/developer/taskManagement/developers
 * @accessor api.functional.taskManagement.developer.taskManagement.developers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for developer filtering */
    body: ITaskManagementDeveloper.IRequest;
  };
  export type Body = ITaskManagementDeveloper.IRequest;
  export type Response = IPageITaskManagementDeveloper.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/developer/taskManagement/developers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/taskManagement/developer/taskManagement/developers";
  export const random = (): IPageITaskManagementDeveloper.ISummary =>
    typia.random<IPageITaskManagementDeveloper.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a developer by ID.
 *
 * Retrieve detailed information about a developer user specified by their
 * unique ID.
 *
 * This operation returns profile details including email, name, and timestamps
 * of the developer. Sensitive information such as password hashes is excluded
 * for security.
 *
 * Access is granted to authenticated users with role 'developer', ensuring
 * proper authorization.
 *
 * This operation corresponds directly to the task_management_developer entity
 * in the database.
 *
 * It is commonly used in user administration panels or personal profile
 * displays.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target developer
 * @path /taskManagement/developer/taskManagement/developers/:id
 * @accessor api.functional.taskManagement.developer.taskManagement.developers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target developer */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementDeveloper;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/developer/taskManagement/developers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/developer/taskManagement/developers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementDeveloper =>
    typia.random<ITaskManagementDeveloper>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
