import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementDeveloper } from "../../../structures/ITaskManagementDeveloper";

/**
 * Registration (join) operation for developers based on the
 * 'task_management_developer' Prisma DB table.
 *
 * This operation implements the registration (join) functionality for developer
 * users, enabling them to create new accounts in the system. The
 * 'task_management_developer' schema supports this operation with required
 * fields: email (unique), password_hash (hashed password), and name. The API
 * securely stores these credentials and issues JWT tokens encapsulated in the
 * response type ITaskManagementDeveloper.IAuthorized. Authentication details
 * include email/password validation and ensuring uniqueness of email. The
 * operation is accessible without prior authentication (public). Related
 * operations include login and refresh token issuance.
 *
 * @param props.connection
 * @param props.body Developer registration request body
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/join
 * @accessor api.functional.auth.developer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Developer registration request body */
    body: ITaskManagementDeveloper.ICreate;
  };
  export type Body = ITaskManagementDeveloper.ICreate;
  export type Response = ITaskManagementDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/join";
  export const random = (): ITaskManagementDeveloper.IAuthorized =>
    typia.random<ITaskManagementDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login operation for developers based on the 'task_management_developer'
 * Prisma DB table.
 *
 * This login API authenticates developers by validating their email and
 * password credentials stored in 'task_management_developer'. Upon success, it
 * issues JWT tokens encapsulated in the response type
 * ITaskManagementDeveloper.IAuthorized. This operation depends on prior
 * registration (join) and precedes token refresh functionality. It ensures
 * security by proper password hashing and token handling. The endpoint is
 * accessible without authentication.
 *
 * @param props.connection
 * @param props.body Developer login request body
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/login
 * @accessor api.functional.auth.developer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Developer login request body */
    body: ITaskManagementDeveloper.ILogin;
  };
  export type Body = ITaskManagementDeveloper.ILogin;
  export type Response = ITaskManagementDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/login";
  export const random = (): ITaskManagementDeveloper.IAuthorized =>
    typia.random<ITaskManagementDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Token refresh operation for developers referencing the
 * 'task_management_developer' Prisma DB table.
 *
 * Token refresh operation for developer users utilizing valid refresh tokens.
 * It ensures the developer remains authenticated by exchanging refresh tokens
 * for new JWTs encapsulated in ITaskManagementDeveloper.IAuthorized response.
 * This operation follows login and join endpoints and secures session
 * longevity. The endpoint requires authentication via the refresh token and is
 * restricted to developer role users.
 *
 * @param props.connection
 * @param props.body Developer token refresh request body
 * @setHeader token.access Authorization
 *
 * @path /auth/developer/refresh
 * @accessor api.functional.auth.developer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Developer token refresh request body */
    body: ITaskManagementDeveloper.IRefresh;
  };
  export type Body = ITaskManagementDeveloper.IRefresh;
  export type Response = ITaskManagementDeveloper.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/developer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/developer/refresh";
  export const random = (): ITaskManagementDeveloper.IAuthorized =>
    typia.random<ITaskManagementDeveloper.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
