import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementPmo } from "../../../structures/ITaskManagementPmo";

/**
 * Creates a new project management officer (PMO) user account and issues
 * authentication tokens.
 *
 * Register a new Project Management Officer (PMO) account with email and
 * password hash credentials. This operation creates a secure user record in the
 * task_management_pmo table, including lifecycle timestamps and ensuring email
 * uniqueness. The system issues JWT tokens upon successful registration for
 * authorized access. Use this endpoint publicly to onboard new PMO users who
 * administrate projects and enforce standards. Strict password hashing and
 * validation apply. This operation is foundational for admin-level user access
 * control.
 *
 * @param props.connection
 * @param props.body Registration details for creating a PMO user account.
 * @setHeader token.access Authorization
 *
 * @path /auth/pmo/join
 * @accessor api.functional.auth.pmo.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration details for creating a PMO user account. */
    body: ITaskManagementPmo.IJoin;
  };
  export type Body = ITaskManagementPmo.IJoin;
  export type Response = ITaskManagementPmo.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pmo/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pmo/join";
  export const random = (): ITaskManagementPmo.IAuthorized =>
    typia.random<ITaskManagementPmo.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logs in a project management officer (PMO) and returns authorization tokens.
 *
 * Authenticate an existing Project Management Officer (PMO) user using email
 * and password. Validates credentials against the task_management_pmo table and
 * returns JWT tokens for authorized session management. This operation supports
 * secure login for PMO users who manage projects and enforce compliance.
 * Passwords are securely hashed and verified. Public access is enabled for user
 * authentication.
 *
 * @param props.connection
 * @param props.body Login credentials for PMO user authentication.
 * @setHeader token.access Authorization
 *
 * @path /auth/pmo/login
 * @accessor api.functional.auth.pmo.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for PMO user authentication. */
    body: ITaskManagementPmo.ILogin;
  };
  export type Body = ITaskManagementPmo.ILogin;
  export type Response = ITaskManagementPmo.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pmo/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pmo/login";
  export const random = (): ITaskManagementPmo.IAuthorized =>
    typia.random<ITaskManagementPmo.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for a PMO user session.
 *
 * Refresh JWT access and refresh tokens for a logged-in Project Management
 * Officer (PMO) user using a valid refresh token. Enables continued
 * authenticated sessions without password re-entry. Ensures token validity and
 * issues new tokens referencing the task_management_pmo user. Protects
 * admin-level access for governance users managing projects.
 *
 * @param props.connection
 * @param props.body Refresh token payload for renewing JWT tokens.
 * @setHeader token.access Authorization
 *
 * @path /auth/pmo/refresh
 * @accessor api.functional.auth.pmo.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload for renewing JWT tokens. */
    body: ITaskManagementPmo.IRefresh;
  };
  export type Body = ITaskManagementPmo.IRefresh;
  export type Response = ITaskManagementPmo.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pmo/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pmo/refresh";
  export const random = (): ITaskManagementPmo.IAuthorized =>
    typia.random<ITaskManagementPmo.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
