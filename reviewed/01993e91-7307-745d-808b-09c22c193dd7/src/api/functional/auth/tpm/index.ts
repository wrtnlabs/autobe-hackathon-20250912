import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTpm } from "../../../structures/ITaskManagementTpm";

/**
 * Register a new TPM user and issue JWT tokens (task_management_tpm).
 *
 * Registers a new Technical Project Manager (TPM) user, creating an account
 * with the necessary credentials and issuing initial JWT tokens. This operation
 * uses the task_management_tpm table, handling email, password_hash, name, and
 * timestamps. It is a public endpoint for user registration and requires no
 * prior authentication.
 *
 * @param props.connection
 * @param props.body Registration details for TPM user including email,
 *   password, and name.
 * @setHeader token.access Authorization
 *
 * @path /auth/tpm/join
 * @accessor api.functional.auth.tpm.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Registration details for TPM user including email, password, and
     * name.
     */
    body: ITaskManagementTpm.IJoin;
  };
  export type Body = ITaskManagementTpm.IJoin;
  export type Response = ITaskManagementTpm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/tpm/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/tpm/join";
  export const random = (): ITaskManagementTpm.IAuthorized =>
    typia.random<ITaskManagementTpm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login for TPM user to obtain JWT tokens (task_management_tpm).
 *
 * Authenticate an existing Technical Project Manager (TPM) user by verifying
 * email and password credentials, issuing JWT tokens upon successful
 * authentication. This operation uses the task_management_tpm table for
 * credential validation and requires no prior authentication.
 *
 * @param props.connection
 * @param props.body Login credentials for TPM user including email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/tpm/login
 * @accessor api.functional.auth.tpm.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for TPM user including email and password. */
    body: ITaskManagementTpm.ILogin;
  };
  export type Body = ITaskManagementTpm.ILogin;
  export type Response = ITaskManagementTpm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/tpm/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/tpm/login";
  export const random = (): ITaskManagementTpm.IAuthorized =>
    typia.random<ITaskManagementTpm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for TPM user (task_management_tpm).
 *
 * Refresh the JWT access token for a Technical Project Manager (TPM) user using
 * a valid refresh token. Returns new authorized tokens. Operation interacts
 * with the task_management_tpm table manage tokens in the authentication
 * workflow.
 *
 * @param props.connection
 * @param props.body Refresh token payload to request new access token.
 * @setHeader token.access Authorization
 *
 * @path /auth/tpm/refresh
 * @accessor api.functional.auth.tpm.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload to request new access token. */
    body: ITaskManagementTpm.IRefresh;
  };
  export type Body = ITaskManagementTpm.IRefresh;
  export type Response = ITaskManagementTpm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/tpm/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/tpm/refresh";
  export const random = (): ITaskManagementTpm.IAuthorized =>
    typia.random<ITaskManagementTpm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
