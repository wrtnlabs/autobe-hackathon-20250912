import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementPm } from "../../../structures/ITaskManagementPm";

/**
 * Register new Project Manager user in task_management_pm table.
 *
 * Create a new Project Manager (PM) account with secure credentials and issue
 * initial JWT tokens. The endpoint receives user registration data and securely
 * stores the PM user record.
 *
 * The `task_management_pm` table fields involved include `email` (unique login
 * identifier), `password_hash` (secure password storage), `name` (user's full
 * name), and timestamp fields for auditing account creation.
 *
 * This operation enables new PMs to register for the task management system,
 * establishing their identity and allowing subsequent authentication.
 *
 * Security considerations include validation of email uniqueness and password
 * hashing prior to database insertion.
 *
 * This registration operation has no authorization requirement as it is meant
 * for public access.
 *
 * @param props.connection
 * @param props.body Create a new Project Manager (PM) account with necessary
 *   details
 * @setHeader token.access Authorization
 *
 * @path /auth/pm/join
 * @accessor api.functional.auth.pm.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Create a new Project Manager (PM) account with necessary details */
    body: ITaskManagementPm.ICreate;
  };
  export type Body = ITaskManagementPm.ICreate;
  export type Response = ITaskManagementPm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pm/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pm/join";
  export const random = (): ITaskManagementPm.IAuthorized =>
    typia.random<ITaskManagementPm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login existing Project Manager user.
 *
 * Authenticate Project Manager (PM) user by verifying credentials and issue JWT
 * tokens.
 *
 * This login operation uses `email` and `password` parameters validated against
 * stored `password_hash` in `task_management_pm`.
 *
 * Successful authentication returns authorization tokens without exposing
 * sensitive user data.
 *
 * Security controls include protection against brute force and session
 * hijacking.
 *
 * Login is a public endpoint to allow PM users to obtain access tokens.
 *
 * @param props.connection
 * @param props.body Login credentials for Project Manager user
 * @setHeader token.access Authorization
 *
 * @path /auth/pm/login
 * @accessor api.functional.auth.pm.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login credentials for Project Manager user */
    body: ITaskManagementPm.ILogin;
  };
  export type Body = ITaskManagementPm.ILogin;
  export type Response = ITaskManagementPm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pm/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pm/login";
  export const random = (): ITaskManagementPm.IAuthorized =>
    typia.random<ITaskManagementPm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh tokens for Project Manager.
 *
 * Refresh JWT authorization tokens for authenticated Project Manager user using
 * a valid refresh token.
 *
 * This operation ensures continued authorized access without requiring
 * re-authentication.
 *
 * Security checks include token validation and session consistency.
 *
 * Only accessible by authenticated PM users with valid refresh tokens.
 *
 * @param props.connection
 * @param props.body Refresh token request for Project Manager
 * @setHeader token.access Authorization
 *
 * @path /auth/pm/refresh
 * @accessor api.functional.auth.pm.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request for Project Manager */
    body: ITaskManagementPm.IRefresh;
  };
  export type Body = ITaskManagementPm.IRefresh;
  export type Response = ITaskManagementPm.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/pm/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/pm/refresh";
  export const random = (): ITaskManagementPm.IAuthorized =>
    typia.random<ITaskManagementPm.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
