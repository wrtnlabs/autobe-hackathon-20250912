import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IChatAppRegularUser } from "../../../api/structures/IChatAppRegularUser";

@Controller("/auth/regularUser")
export class AuthRegularuserController {
  /**
   * Create new regular user account and issue JWT tokens. Maps to
   * chat_app_regular_users table.
   *
   * Registers a new regular user by creating a record in
   * chat_app_regular_users with validated social login ID and nickname.
   * Issues an authorized JWT token session response.
   *
   * This operation maps to the Actors.chat_app_regular_users table, utilizing
   * fields: id (UUID), social_login_id (string), nickname (string),
   * profile_image_uri (optional string), created_at and updated_at
   * timestamps.
   *
   * Key security consideration is ensuring uniqueness of social_login_id and
   * secure handling of authentication tokens post-registration.
   *
   * Typical usage requires prior social login validation via Snapchat OAuth2
   * external service.
   *
   * Works in tandem with login and token refresh endpoints to maintain user
   * session lifecycle.
   *
   * @param connection
   * @param body New regular user registration data.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IChatAppRegularUser.ICreate,
  ): Promise<IChatAppRegularUser.IAuthorized> {
    body;
    return typia.random<IChatAppRegularUser.IAuthorized>();
  }

  /**
   * Authenticate regular user and issue JWT tokens. Maps to
   * chat_app_regular_users table.
   *
   * Authenticates a regular user by validating social login ID against
   * chat_app_regular_users.
   *
   * Generates JWT tokens for the session in IChatAppRegularUser.IAuthorized
   * response.
   *
   * References chat_app_regular_users.social_login_id and authentication
   * session management.
   *
   * Critical to ensure secure credential verification and token issuance.
   *
   * Complementary to join and refresh endpoints.
   *
   * @param connection
   * @param body Regular user login data with Snapchat social login ID.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IChatAppRegularUser.IRequestLogin,
  ): Promise<IChatAppRegularUser.IAuthorized> {
    body;
    return typia.random<IChatAppRegularUser.IAuthorized>();
  }

  /**
   * Refresh JWT access token for regular user. Maps to
   * chat_app_authentication_sessions table.
   *
   * Refresh JWT access token for regular user using a valid refresh token.
   *
   * Validates token existence, expiry and revocation status in
   * chat_app_authentication_sessions.
   *
   * Issues new authorized JWT access token in IChatAppRegularUser.IAuthorized
   * response.
   *
   * Essential for maintaining secure user sessions without requiring full
   * re-login.
   *
   * Works in conjunction with login and join endpoints for complete token
   * lifecycle management.
   *
   * @param connection
   * @param body Refresh token request data for regular user.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IChatAppRegularUser.IRequestRefresh,
  ): Promise<IChatAppRegularUser.IAuthorized> {
    body;
    return typia.random<IChatAppRegularUser.IAuthorized>();
  }
}
