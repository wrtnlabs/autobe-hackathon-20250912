import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIChatAppRegularUser } from "../../../../api/structures/IPageIChatAppRegularUser";
import { IChatAppRegularUser } from "../../../../api/structures/IChatAppRegularUser";

@Controller("/chatApp/regularUser/regularUsers")
export class ChatappRegularuserRegularusersController {
  /**
   * Search and retrieve a paginated list of regular users.
   *
   * Fetch a paginated list of regular users based on filtering criteria
   * including nickname and social login ID.
   *
   * Supports pagination and sorting options.
   *
   * Returns user summaries for display purposes.
   *
   * Access limited to authenticated users to protect privacy.
   *
   * Useful for user management and browsing within the chat app system.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   regular users
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IChatAppRegularUser.IRequest,
  ): Promise<IPageIChatAppRegularUser.ISummary> {
    body;
    return typia.random<IPageIChatAppRegularUser.ISummary>();
  }

  /**
   * Retrieve a specific chat application regular user by ID.
   *
   * Retrieve a specific regular user by their unique ID. This operation
   * queries the chat_app_regular_users table as defined in the Prisma schema,
   * which stores key user identity data such as social login identifiers,
   * nicknames, and optional profile image URIs.
   *
   * Security considerations include restricting access to authenticated users
   * or admins depending on application policies, ensuring personal data is
   * not exposed without proper authorization.
   *
   * This operation only fetches user details and does not expose sensitive
   * tokens or authentication session data.
   *
   * Validation ensures that the provided user ID matches a valid UUID format
   * and exists in the system. Failure to find the user results in an error.
   *
   * Related operations include updating user details, deleting users, and
   * listing a user's authentication sessions.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":regularUserId")
  public async at(
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
  ): Promise<IChatAppRegularUser> {
    regularUserId;
    return typia.random<IChatAppRegularUser>();
  }

  /**
   * Update an existing chat application regular user by ID.
   *
   * Update an existing regular user in the chat_app_regular_users table. This
   * allows modification of mutable fields like nickname and
   * profile_image_uri.
   *
   * Authorization ensures only the user or privileged roles can perform
   * updates.
   *
   * Input validation enforces correct data formats and value limits. The
   * social_login_id and user id are immutable in this operation.
   *
   * Successful update returns the updated user details.
   *
   * This operation integrates with the user detail retrieval and session
   * management APIs for comprehensive user profile maintenance.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user.
   * @param body Updated data for the chat application regular user.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":regularUserId")
  public async update(
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppRegularUser.IUpdate,
  ): Promise<IChatAppRegularUser> {
    regularUserId;
    body;
    return typia.random<IChatAppRegularUser>();
  }

  /**
   * Delete a chat application regular user by ID.
   *
   * Delete a regular user by their unique identifier, permanently removing
   * the user and associated data from the database.
   *
   * This hard delete operation cascades to remove related memberships,
   * messages, notifications, and auth sessions.
   *
   * Access is restricted to admin roles to prevent unauthorized deletions.
   *
   * Upon successful deletion, no content is returned.
   *
   * This operation complements user retrieval and update APIs, aiding full
   * user lifecycle management.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":regularUserId")
  public async erase(
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
  ): Promise<void> {
    regularUserId;
    return typia.random<void>();
  }
}
