import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IChatAppMediaAttachment } from "../../../../../api/structures/IChatAppMediaAttachment";
import { IPageIChatAppMessageMediaAttachment } from "../../../../../api/structures/IPageIChatAppMessageMediaAttachment";
import { IChatAppMessageMediaAttachment } from "../../../../../api/structures/IChatAppMessageMediaAttachment";

@Controller("/chatApp/regularUser/messages/:messageId/mediaAttachments")
export class ChatappRegularuserMessagesMediaattachmentsController {
  /**
   * Create a media attachment for a chat message.
   *
   * Create a media attachment associated with a specific chat message by
   * messageId.
   *
   * The request body must specify mediaType ('image' or 'video') and URI of
   * the stored media file.
   *
   * This operation requires UUID validation on the messageId path parameter.
   *
   * User authorization is enforced to restrict creation rights.
   *
   * The operation creates records in the chat_app_media_attachments table,
   * validating media types and URI length constraints.
   *
   * Returns newly created media attachment data for client update.
   *
   * @param connection
   * @param messageId Unique identifier of the target message
   * @param body Media attachment creation info
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async createMediaAttachment(
    @TypedParam("messageId")
    messageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppMediaAttachment.ICreate,
  ): Promise<IChatAppMediaAttachment> {
    messageId;
    body;
    return typia.random<IChatAppMediaAttachment>();
  }

  /**
   * List media attachments for a message.
   *
   * Retrieve media attachments belonging to a chat message. Supports
   * pagination, filtering, and sorting.
   *
   * Returns a paginated list of media metadata (type, URI) associated with
   * the specified message.
   *
   * Security ensures only users with permission to view the message's media
   * can access this.
   *
   * This operation uses pagination request parameters and returns a paginated
   * response containing media attachment information.
   *
   * Media types supported are limited to 'image' and 'video'.
   *
   * @param connection
   * @param messageId Unique identifier of the chat message
   * @param body Request parameters for filtering and pagination
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("messageId")
    messageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppMessageMediaAttachment.IRequest,
  ): Promise<IPageIChatAppMessageMediaAttachment> {
    messageId;
    body;
    return typia.random<IPageIChatAppMessageMediaAttachment>();
  }

  /**
   * Get a media attachment for a chat message by IDs.
   *
   * Retrieve details of a specific media attachment linked to a chat message
   * by messageId and mediaAttachmentId.
   *
   * This operation validates the UUID format of both path parameters to
   * ensure correct targeting.
   *
   * Only authenticated users with appropriate permissions can successfully
   * access this data.
   *
   * The operation interacts with the chat_app_media_attachments table in the
   * Prisma schema, which contains media files linked to chat messages.
   *
   * If the specified media attachment or message does not exist or access is
   * unauthorized, appropriate error responses are returned.
   *
   * Related operations include creating, updating, and deleting media
   * attachments for messages.
   *
   * The response provides the complete media attachment data for client-side
   * rendering or download.
   *
   * @param connection
   * @param messageId Unique identifier of the target message
   * @param mediaAttachmentId Unique identifier of the target media attachment
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":mediaAttachmentId")
  public async atMediaAttachment(
    @TypedParam("messageId")
    messageId: string & tags.Format<"uuid">,
    @TypedParam("mediaAttachmentId")
    mediaAttachmentId: string & tags.Format<"uuid">,
  ): Promise<IChatAppMediaAttachment> {
    messageId;
    mediaAttachmentId;
    return typia.random<IChatAppMediaAttachment>();
  }

  /**
   * Update a media attachment for a chat message.
   *
   * Update media attachment details (mediaType and uri) for a specific chat
   * message by messageId and mediaAttachmentId.
   *
   * Both path parameters require UUID format validation.
   *
   * Authorization is enforced to restrict updates to authorized users.
   *
   * Returns updated media attachment record for confirmation.
   *
   * @param connection
   * @param messageId Unique identifier of the target message
   * @param mediaAttachmentId Unique identifier of the target media attachment
   * @param body Media attachment update info
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":mediaAttachmentId")
  public async updateMediaAttachment(
    @TypedParam("messageId")
    messageId: string & tags.Format<"uuid">,
    @TypedParam("mediaAttachmentId")
    mediaAttachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppMediaAttachment.IUpdate,
  ): Promise<IChatAppMediaAttachment> {
    messageId;
    mediaAttachmentId;
    body;
    return typia.random<IChatAppMediaAttachment>();
  }

  /**
   * Delete a media attachment for a chat message.
   *
   * Delete a media attachment of a chat message by messageId and
   * mediaAttachmentId.
   *
   * This operation permanently deletes the media attachment record from the
   * database.
   *
   * Authorization and UUID validation are enforced.
   *
   * No response body is returned on success.
   *
   * Clients should handle success confirmation via HTTP status codes.
   *
   * @param connection
   * @param messageId Unique identifier of the target message
   * @param mediaAttachmentId Unique identifier of the target media attachment
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":mediaAttachmentId")
  public async eraseMediaAttachment(
    @TypedParam("messageId")
    messageId: string & tags.Format<"uuid">,
    @TypedParam("mediaAttachmentId")
    mediaAttachmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    messageId;
    mediaAttachmentId;
    return typia.random<void>();
  }
}
