import { tags } from "typia";

/**
 * Chat message entity representing one-on-one or group message.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatAppMessage = {
  /**
   * Unique identifier of the chat message. Corresponds to
   * chat_app_messages.id primary key.
   */
  id: string & tags.Format<"uuid">;

  /** UUID of sender user from chat_app_regular_users.id. */
  sender_id: string & tags.Format<"uuid">;

  /** Optional group UUID for group message. Nullable for one-on-one messages. */
  group_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional recipient UUID for one-on-one message. Nullable if group
   * message.
   */
  recipient_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Text content of the message. */
  content: string;

  /** Type of message content: text, image, or video. */
  message_type: "text" | "image" | "video";

  /** Creation timestamp of message in ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp of message in ISO 8601 format. */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable soft deletion timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatAppMessage {
  /** Request type for searching and filtering chat messages. */
  export type IRequest = {
    /** Optional sender filter UUID. */
    sender_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional group filter UUID. */
    group_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional recipient filter UUID. */
    recipient_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional message type filter. */
    message_type?: "text" | "image" | "video" | null | undefined;

    /** Content text search filter. */
    content_search?: string | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Start date filter for messages. */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** End date filter for messages. */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Sorting order of results. */
    order?: "asc" | "desc" | null | undefined;
  };

  /** Request type for creating a chat message. */
  export type ICreate = {
    /** UUID of the message sender. */
    sender_id: string & tags.Format<"uuid">;

    /** Optional group UUID for group messages. */
    group_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional recipient UUID for one-on-one messages. */
    recipient_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Content of the message. */
    content: string;

    /** Type of the message content. */
    message_type: "text" | "image" | "video";
  };

  /** Request type for updating a chat message. */
  export type IUpdate = {
    /** New content of the message. */
    content?: string | undefined;

    /** Updated type of message content. */
    message_type?: "text" | "image" | "video" | undefined;
  };

  /**
   * Summary of chat message information suitable for list display.
   *
   * Includes message ID, sender, content snippet, type, and creation
   * timestamp.
   *
   * Omits sensitive or deleted state details.
   *
   * Used for message listing endpoints.
   */
  export type ISummary = {
    /** Unique identifier of the chat message */
    id: string & tags.Format<"uuid">;

    /** Sender user's unique identifier */
    sender_id: string & tags.Format<"uuid">;

    /** Target group identifier if message is in a group chat */
    group_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Recipient user ID for one-on-one chats */
    recipient_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Text content of the message */
    content: string;

    /** Type of the message content: text, image, or video */
    message_type: string;

    /** Timestamp the message was created */
    created_at: string & tags.Format<"date-time">;
  };
}
