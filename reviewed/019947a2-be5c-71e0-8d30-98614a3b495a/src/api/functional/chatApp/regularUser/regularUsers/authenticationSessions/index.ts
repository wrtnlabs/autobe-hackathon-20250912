import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppAuthenticationSession } from "../../../../../structures/IChatAppAuthenticationSession";
import { IPageIChatAppAuthenticationSession } from "../../../../../structures/IPageIChatAppAuthenticationSession";
import { IChatAppAuthenticationSessions } from "../../../../../structures/IChatAppAuthenticationSessions";

/**
 * List authentication sessions for a regular user.
 *
 * Retrieve a paginated list of authentication sessions belonging to a specific
 * regular user identified by their unique user ID.
 *
 * These sessions correspond to OAuth2 tokens issued for Snapchat social login
 * authentication.
 *
 * Access is restricted to the user themselves or administrators.
 *
 * Request supports pagination and filtering options.
 *
 * Response includes detailed session information such as access and refresh
 * tokens, expiration dates, and creation timestamps.
 *
 * This operation is essential for session management, auditing, and security
 * review processes.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user whose
 *   sessions are being fetched.
 * @param props.body Pagination and filtering parameters to query authentication
 *   sessions.
 * @path /chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions
 * @accessor api.functional.chatApp.regularUser.regularUsers.authenticationSessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the regular user whose sessions are being
     * fetched.
     */
    regularUserId: string & tags.Format<"uuid">;

    /** Pagination and filtering parameters to query authentication sessions. */
    body: IChatAppAuthenticationSession.IRequest;
  };
  export type Body = IChatAppAuthenticationSession.IRequest;
  export type Response = IPageIChatAppAuthenticationSession;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/authenticationSessions`;
  export const random = (): IPageIChatAppAuthenticationSession =>
    typia.random<IPageIChatAppAuthenticationSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific authentication session by ID for a user.
 *
 * Retrieve a single authentication session record belonging to a regular user,
 * identified by the combination of their user ID and the session's unique ID.
 * This operation enables clients to query details such as OAuth2 access token,
 * refresh token, expiration timestamp, and soft deletion timestamp to monitor
 * session validity.
 *
 * Security considerations require that only the owner of the authentication
 * session or authorized administrative roles may access these details,
 * preventing unauthorized disclosure of sensitive token information.
 *
 * Associate this operation with the chat_app_authentication_sessions database
 * entity, ensuring the retrieved record includes all fields as defined in the
 * Prisma schema.
 *
 * Validation includes confirming the input UUID formats for both user ID and
 * session ID. Errors due to missing records will result in not found responses,
 * while unauthorized access attempts should be appropriately rejected.
 *
 * Related API operations may include creating new authentication sessions via
 * social login (not exposed here), and deleting sessions to revoke access
 * tokens.
 *
 * This operation performs a simple GET request and returns the full
 * authentication session record or an error if not found.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.authenticationSessionId Unique identifier of the authentication
 *   session
 * @path /chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions/:authenticationSessionId
 * @accessor api.functional.chatApp.regularUser.regularUsers.authenticationSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the authentication session */
    authenticationSessionId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppAuthenticationSessions;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions/:authenticationSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/authenticationSessions/${encodeURIComponent(props.authenticationSessionId ?? "null")}`;
  export const random = (): IChatAppAuthenticationSessions =>
    typia.random<IChatAppAuthenticationSessions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("authenticationSessionId")(() =>
        typia.assert(props.authenticationSessionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific authentication session for a user.
 *
 * Delete a specific authentication session permanently from the system for a
 * given regular user and authentication session ID. This operation performs a
 * hard delete from the database, removing all associated OAuth2 tokens and
 * session metadata.
 *
 * Security constraints ensure only the owner of the session or authorized
 * administrators can execute this operation. The API supports logout and token
 * revocation workflows by permanently deleting session records.
 *
 * This operation maps directly to the chat_app_authentication_sessions Prisma
 * schema, confirming proper session identification via UUID parameters and
 * enforcing access control.
 *
 * No request body is necessary, and no response body is returned upon
 * successful deletion.
 *
 * Deletion failures due to non-existent IDs or unauthorized access should be
 * appropriately handled with error responses.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.authenticationSessionId Unique identifier of the authentication
 *   session
 * @path /chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions/:authenticationSessionId
 * @accessor api.functional.chatApp.regularUser.regularUsers.authenticationSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the authentication session */
    authenticationSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/regularUsers/:regularUserId/authenticationSessions/:authenticationSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/authenticationSessions/${encodeURIComponent(props.authenticationSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("authenticationSessionId")(() =>
        typia.assert(props.authenticationSessionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
