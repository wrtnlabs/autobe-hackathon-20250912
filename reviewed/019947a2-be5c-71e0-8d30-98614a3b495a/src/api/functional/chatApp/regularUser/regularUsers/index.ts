import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppRegularUser } from "../../../../structures/IChatAppRegularUser";
import { IPageIChatAppRegularUser } from "../../../../structures/IPageIChatAppRegularUser";
export * as authenticationSessions from "./authenticationSessions/index";
export * as notifications from "./notifications/index";

/**
 * Search and retrieve a paginated list of regular users.
 *
 * Fetch a paginated list of regular users based on filtering criteria including
 * nickname and social login ID.
 *
 * Supports pagination and sorting options.
 *
 * Returns user summaries for display purposes.
 *
 * Access limited to authenticated users to protect privacy.
 *
 * Useful for user management and browsing within the chat app system.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   regular users
 * @path /chatApp/regularUser/regularUsers
 * @accessor api.functional.chatApp.regularUser.regularUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering regular users */
    body: IChatAppRegularUser.IRequest;
  };
  export type Body = IChatAppRegularUser.IRequest;
  export type Response = IPageIChatAppRegularUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/regularUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/regularUsers";
  export const random = (): IPageIChatAppRegularUser.ISummary =>
    typia.random<IPageIChatAppRegularUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific chat application regular user by ID.
 *
 * Retrieve a specific regular user by their unique ID. This operation queries
 * the chat_app_regular_users table as defined in the Prisma schema, which
 * stores key user identity data such as social login identifiers, nicknames,
 * and optional profile image URIs.
 *
 * Security considerations include restricting access to authenticated users or
 * admins depending on application policies, ensuring personal data is not
 * exposed without proper authorization.
 *
 * This operation only fetches user details and does not expose sensitive tokens
 * or authentication session data.
 *
 * Validation ensures that the provided user ID matches a valid UUID format and
 * exists in the system. Failure to find the user results in an error.
 *
 * Related operations include updating user details, deleting users, and listing
 * a user's authentication sessions.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user.
 * @path /chatApp/regularUser/regularUsers/:regularUserId
 * @accessor api.functional.chatApp.regularUser.regularUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the regular user. */
    regularUserId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppRegularUser;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/regularUsers/:regularUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): IChatAppRegularUser =>
    typia.random<IChatAppRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing chat application regular user by ID.
 *
 * Update an existing regular user in the chat_app_regular_users table. This
 * allows modification of mutable fields like nickname and profile_image_uri.
 *
 * Authorization ensures only the user or privileged roles can perform updates.
 *
 * Input validation enforces correct data formats and value limits. The
 * social_login_id and user id are immutable in this operation.
 *
 * Successful update returns the updated user details.
 *
 * This operation integrates with the user detail retrieval and session
 * management APIs for comprehensive user profile maintenance.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user.
 * @param props.body Updated data for the chat application regular user.
 * @path /chatApp/regularUser/regularUsers/:regularUserId
 * @accessor api.functional.chatApp.regularUser.regularUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the regular user. */
    regularUserId: string & tags.Format<"uuid">;

    /** Updated data for the chat application regular user. */
    body: IChatAppRegularUser.IUpdate;
  };
  export type Body = IChatAppRegularUser.IUpdate;
  export type Response = IChatAppRegularUser;

  export const METADATA = {
    method: "PUT",
    path: "/chatApp/regularUser/regularUsers/:regularUserId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): IChatAppRegularUser =>
    typia.random<IChatAppRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chat application regular user by ID.
 *
 * Delete a regular user by their unique identifier, permanently removing the
 * user and associated data from the database.
 *
 * This hard delete operation cascades to remove related memberships, messages,
 * notifications, and auth sessions.
 *
 * Access is restricted to admin roles to prevent unauthorized deletions.
 *
 * Upon successful deletion, no content is returned.
 *
 * This operation complements user retrieval and update APIs, aiding full user
 * lifecycle management.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user.
 * @path /chatApp/regularUser/regularUsers/:regularUserId
 * @accessor api.functional.chatApp.regularUser.regularUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the regular user. */
    regularUserId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/regularUsers/:regularUserId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
