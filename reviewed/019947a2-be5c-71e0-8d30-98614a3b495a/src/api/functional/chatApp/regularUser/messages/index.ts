import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppMessage } from "../../../../structures/IChatAppMessage";
import { IPageIChatAppMessage } from "../../../../structures/IPageIChatAppMessage";
export * as mediaAttachments from "./mediaAttachments/index";

/**
 * Create a new chat message from the authenticated user. This message can be
 * sent either to a community group or to an individual recipient user for
 * one-on-one chat. The system validates that the sender is a registered user
 * and that the message content is not empty and complies with length
 * restrictions.
 *
 * The operation stores the message with its type (text, image, or video),
 * timestamp, and sender information in the chat_app_messages table.
 *
 * Security considerations ensure that only authenticated users can send
 * messages, and the stored message is soft deletable for audit purposes.
 *
 * This operation integrates with chat_app_messages schema as defined in the
 * Prisma model, saving sender_id, content, message_type, and association to
 * group or recipient where applicable.
 *
 * Clients should use this operation to send new messages and receive the
 * created message object in response.
 *
 * @param props.connection
 * @param props.body Data required to create a new chat message
 * @path /chatApp/regularUser/messages
 * @accessor api.functional.chatApp.regularUser.messages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create a new chat message */
    body: IChatAppMessage.ICreate;
  };
  export type Body = IChatAppMessage.ICreate;
  export type Response = IChatAppMessage;

  export const METADATA = {
    method: "POST",
    path: "/chatApp/regularUser/messages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/messages";
  export const random = (): IChatAppMessage => typia.random<IChatAppMessage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list chat messages with filtering and pagination.
 *
 * Search and retrieve paginated chat messages supporting filters like sender,
 * group, recipient, message type, date range, and content keywords.
 *
 * Supports pagination and sorting for efficient message history display.
 *
 * Requires authorization to only allow queries by users with access rights.
 *
 * Operates on chat_app_messages table.
 *
 * Returns summaries optimized for list displays.
 *
 * Related to detail message retrieval by ID.
 *
 * @param props.connection
 * @param props.body Message search criteria and pagination parameters
 * @path /chatApp/regularUser/messages
 * @accessor api.functional.chatApp.regularUser.messages.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Message search criteria and pagination parameters */
    body: IChatAppMessage.IRequest;
  };
  export type Body = IChatAppMessage.IRequest;
  export type Response = IPageIChatAppMessage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/messages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/messages";
  export const random = (): IPageIChatAppMessage.ISummary =>
    typia.random<IPageIChatAppMessage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a single chat message by ID.
 *
 * Retrieve detailed information of a single chat message by its unique
 * identifier.
 *
 * Returns full message details including sender, related group or recipient,
 * content, type, and timestamps.
 *
 * Ensures authorization to view message content.
 *
 * Operates on the chat_app_messages table.
 *
 * The message ID is a UUID path parameter.
 *
 * Related to message searching and media attachments management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target chat message
 * @path /chatApp/regularUser/messages/:id
 * @accessor api.functional.chatApp.regularUser.messages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target chat message */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppMessage;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/messages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatAppMessage => typia.random<IChatAppMessage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a chat message by ID.
 *
 * Update an existing chat message by its unique identifier. Only the sender of
 * the message may perform this action.
 *
 * The message content and message type (text, image, video) may be updated. The
 * system validates ownership and ensures the message is not marked as deleted.
 *
 * The updated message is returned after the update operation.
 *
 * Security checks prevent unauthorized modifications.
 *
 * This operation links to the chat_app_messages table and updates the content
 * and message_type fields.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chat message to update
 * @param props.body Updated data for the chat message
 * @path /chatApp/regularUser/messages/:id
 * @accessor api.functional.chatApp.regularUser.messages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the chat message to update */
    id: string & tags.Format<"uuid">;

    /** Updated data for the chat message */
    body: IChatAppMessage.IUpdate;
  };
  export type Body = IChatAppMessage.IUpdate;
  export type Response = IChatAppMessage;

  export const METADATA = {
    method: "PUT",
    path: "/chatApp/regularUser/messages/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IChatAppMessage => typia.random<IChatAppMessage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a chat message by ID.
 *
 * Permanently delete a chat message by its unique ID. This operation cannot be
 * undone and all associated data will be removed.
 *
 * Only authorized users (message sender or admins) can perform this operation.
 *
 * This operation removes the record completely from the chat_app_messages table
 * and cleans up related data.
 *
 * Ensure that the client handles this action cautiously as deleted messages are
 * unrecoverable.
 *
 * This operation targets the chat_app_messages table based on the primary key
 * 'id'.
 *
 * @param props.connection
 * @param props.id Unique identifier of the chat message to delete
 * @path /chatApp/regularUser/messages/:id
 * @accessor api.functional.chatApp.regularUser.messages.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the chat message to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/messages/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
