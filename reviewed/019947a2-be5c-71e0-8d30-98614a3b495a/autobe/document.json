{"operations":[{"specification":"The /auth/regularUser/join API endpoint enables new regular users to register using Snapchat social login credentials and other required data. This operation involves creating a new record in the chat_app_regular_users table, which stores essential user identity and authentication-related information such as social_login_id and nickname. Upon successful registration, the API issues JWT tokens encapsulated in the IChatAppRegularUser.IAuthorized response for secure session management. The creation process sets timestamps for audit purposes and ensures the uniqueness of social_login_id as per the Prisma schema. This endpoint is public and does not require prior authentication since it's meant for account creation. The business logic mandates validating the unique social_login_id and nickname before account creation. Related operations include login and refresh token endpoints.","authorizationType":"join","description":"Registers a new regular user by creating a record in chat_app_regular_users with validated social login ID and nickname. Issues an authorized JWT token session response.\n\nThis operation maps to the Actors.chat_app_regular_users table, utilizing fields: id (UUID), social_login_id (string), nickname (string), profile_image_uri (optional string), created_at and updated_at timestamps.\n\nKey security consideration is ensuring uniqueness of social_login_id and secure handling of authentication tokens post-registration.\n\nTypical usage requires prior social login validation via Snapchat OAuth2 external service.\n\nWorks in tandem with login and token refresh endpoints to maintain user session lifecycle.","summary":"Create new regular user account and issue JWT tokens. Maps to chat_app_regular_users table.","parameters":[],"requestBody":{"description":"New regular user registration data.","typeName":"IChatAppRegularUser.ICreate"},"responseBody":{"description":"Authorized user session with JWT tokens.","typeName":"IChatAppRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"join","path":"/auth/regularUser/join","method":"post"},{"specification":"The /auth/regularUser/login API endpoint authenticates existing regular users using Snapchat social login credentials, verifying their identity against the chat_app_regular_users table. On successful credential validation, this operation issues JWT tokens for session management encapsulated in the IChatAppRegularUser.IAuthorized response type. The login aligns with schema fields like social_login_id and id for user identification. Security mechanisms enforce token uniqueness and session tracking via chat_app_authentication_sessions. This operation does not require prior authentication and is publicly accessible. It is part of the essential authentication flow alongside join and refresh token operations.","authorizationType":"login","description":"Authenticates a regular user by validating social login ID against chat_app_regular_users.\n\nGenerates JWT tokens for the session in IChatAppRegularUser.IAuthorized response.\n\nReferences chat_app_regular_users.social_login_id and authentication session management.\n\nCritical to ensure secure credential verification and token issuance.\n\nComplementary to join and refresh endpoints.","summary":"Authenticate regular user and issue JWT tokens. Maps to chat_app_regular_users table.","parameters":[],"requestBody":{"description":"Regular user login data with Snapchat social login ID.","typeName":"IChatAppRegularUser.IRequestLogin"},"responseBody":{"description":"Authorized user session with JWT tokens.","typeName":"IChatAppRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"login","path":"/auth/regularUser/login","method":"post"},{"specification":"The /auth/regularUser/refresh API endpoint allows existing authenticated regular users to refresh their JWT access tokens by submitting a valid refresh token associated with their session. This operation connects to the chat_app_authentication_sessions table where refresh tokens are tracked, including expiry timestamps and revocation status via deleted_at. Upon verifying the token's validity and expiry, a new access token is issued in the response encapsulated as IChatAppRegularUser.IAuthorized. The operation ensures session continuity and security by preventing reuse of revoked or expired tokens. It requires valid authentication, and hence, is protected with necessary role checks.","authorizationType":"refresh","description":"Refresh JWT access token for regular user using a valid refresh token.\n\nValidates token existence, expiry and revocation status in chat_app_authentication_sessions.\n\nIssues new authorized JWT access token in IChatAppRegularUser.IAuthorized response.\n\nEssential for maintaining secure user sessions without requiring full re-login.\n\nWorks in conjunction with login and join endpoints for complete token lifecycle management.","summary":"Refresh JWT access token for regular user. Maps to chat_app_authentication_sessions table.","parameters":[],"requestBody":{"description":"Refresh token request data for regular user.","typeName":"IChatAppRegularUser.IRequestRefresh"},"responseBody":{"description":"Authorized user session with new JWT tokens.","typeName":"IChatAppRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"refresh","path":"/auth/regularUser/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of authentication sessions associated with regular users in the chatting application. It accesses the chat_app_authentication_sessions table which stores OAuth2 tokens issued to users authenticated via Snapchat social login. The operation supports advanced filtering, searching, and sorting by token details, expiration, user ID, and timestamps. It includes columns like access_token, refresh_token, expiration timestamps, and user references. This is critical for regular users to manage their own active sessions.","description":"Retrieve a filtered and paginated list of authentication sessions.\n\nThis operation returns authentication session records including access tokens, refresh tokens, expiration times, and user associations from the chat_app_authentication_sessions table. Regular users can search, filter, and sort sessions based on token details and expiration timestamps.\n\nSecurity considerations include restricting access appropriately since session data is sensitive.\n\nThe response includes session summary information optimized for listing, enabling monitoring of active sessions and management of OAuth2 token lifecycles for Snapchat social login.\n\nErrors may result from invalid filter parameters or unauthorized access.","summary":"Search and retrieve authentication sessions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for authentication sessions filtering","typeName":"IChatAppAuthenticationSessions.IRequest"},"responseBody":{"description":"Paginated list of authentication session summaries matching search criteria","typeName":"IPageIChatAppAuthenticationSessions.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/chatApp/regularUser/authenticationSessions","method":"patch"},{"specification":"This operation retrieves detailed information about a specific authentication session given its unique ID. It accesses the chat_app_authentication_sessions table storing OAuth2 tokens and expiration data for Snapchat social login authenticated users. This allows regular users to view full session details including tokens, associated user, and lifecycle timestamps.","description":"Retrieve detailed information of a single authentication session by its ID.\n\nThis operation returns all fields of a chat_app_authentication_sessions record, including access token, refresh token, expiration timestamps, and user linkage.\n\nSecurity considerations require regular users can access their own session information.\n\nIf the specified session ID does not exist, the operation returns a 404 Not Found error.","summary":"Get a specific authentication session details","parameters":[{"name":"authenticationSessionId","description":"Unique identifier of the authentication session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested authentication session","typeName":"IChatAppAuthenticationSessions"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/chatApp/regularUser/authenticationSessions/{authenticationSessionId}","method":"get"},{"specification":"This operation creates a new authentication session for a user authenticated via Snapchat social login. It stores OAuth2 access and refresh tokens, expiration timestamps, and associates the session with the chat_app_regular_users user record. This enables secure token issuance and session management for active user authentications.","description":"Create a new authentication session record.\n\nThis operation allows creation of a new OAuth2 authentication session with access and refresh tokens for a Snapchat login user. It stores details such as token strings, token expiration, and associated user ID.\n\nSecurity considerations mandate that only authenticated regular users can create their own sessions, ensuring secure management of authentication credentials.\n\nProper validation of tokens and user existence is required to ensure valid sessions are created.","summary":"Create authentication session","parameters":[],"requestBody":{"description":"Information required to create a new authentication session","typeName":"IChatAppAuthenticationSessions.ICreate"},"responseBody":{"description":"Details of the newly created authentication session","typeName":"IChatAppAuthenticationSessions"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/chatApp/regularUser/authenticationSessions","method":"post"},{"specification":"This operation updates an existing authentication session identified by its unique ID. It allows modifying OAuth2 tokens, expiration timestamps, and association to the user record from chat_app_regular_users table. This is important for session lifecycle management and token refresh processes for Snapchat social login authenticated users.","description":"Update an existing authentication session's details.\n\nThis operation modifies fields of an existing chat_app_authentication_sessions record, including access token, refresh token, expiration timestamps, and user linkage.\n\nAccess is restricted to regular users for their own session data due to the sensitive nature of authentication information.\n\nIf the provided session ID does not exist, a 404 Not Found error is returned. Validation must ensure token fields are correctly formatted.","summary":"Update authentication session","parameters":[{"name":"authenticationSessionId","description":"Unique identifier of the authentication session to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update the authentication session","typeName":"IChatAppAuthenticationSessions.IUpdate"},"responseBody":{"description":"Details of the updated authentication session","typeName":"IChatAppAuthenticationSessions"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/chatApp/regularUser/authenticationSessions/{authenticationSessionId}","method":"put"},{"specification":"This operation permanently deletes an authentication session record identified by authenticationSessionId from the chat_app_authentication_sessions table. This table stores OAuth2 token session data linked to users for Snapchat login authentication and supports soft deletion. However, this endpoint implements hard deletion, removing the record completely from the database. The deletion is performed by locating the record by its unique UUID primary key and removing it. Authorization checks must ensure only users with sufficient privileges can remove authentication sessions. This operation does not require a request body and does not return any response body content.","description":"This API operation permanently removes an authentication session from the system given its unique identifier. The session record belongs to chat_app_authentication_sessions which manages OAuth2 token-based authentication sessions for Snapchat logins.\n\nOnly authorized personnel can perform deletion of sessions as it affects user login capabilities by revoking tokens.\n\nThe deletion removes the record entirely and cleans up associated data.\n\nErrors may occur if the specified authentication session ID does not exist, in which case a suitable HTTP 404 error response should be returned.\n\nThis operation is critical for security management, enabling revocation of compromised or expired sessions to prevent unauthorized usage.","summary":"Delete an authentication session by ID","parameters":[{"name":"authenticationSessionId","description":"Unique identifier of the authentication session to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","method":"delete","path":"/chatApp/regularUser/authenticationSessions/{authenticationSessionId}","name":"erase"},{"specification":"This operation searches and retrieves a paginated list of notifications for users from the chat_app_notifications table. Notifications represent system-generated message alerts related to chat messages such as new message arrivals or group invites. The search supports filtering, pagination, and sorting based on notification attributes and read status. Notification records include references to users and related message entities.\n\nOnly authenticated users can access their notifications, ensuring privacy and security. The API request body supports query parameters for filtering by read status and pagination details. The response returns a paginated list of notification summaries optimized for list display.","description":"Retrieve a filtered and paginated list of chat application notifications for the authenticated user. Notifications include message alerts and system messages.\n\nThe operation supports filtering by read/unread status, pagination with page size and number, and sorting options.\n\nNotifications are returned as summary information with relevant fields for list views.\n\nSecurity considerations restrict access to the authenticated user's own notifications with appropriate authorization.\n\nQuery parameters include read status filter and pagination controls.\n\nThe response returns paginated notifications data according to the request filtering.","summary":"Search and retrieve a paginated list of notifications","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for notifications filtering","typeName":"IChatAppNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summary information matching search criteria","typeName":"IPageIChatAppNotification.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","method":"patch","path":"/chatApp/regularUser/notifications","name":"index"},{"specification":"This operation retrieves detailed information of a specific notification by its unique ID from the chat_app_notifications table. Notifications represent system messages related to chat messages and include details such as notification type, read state, and associated user and message references.\n\nThe API user must be authenticated and authorized to access their own notifications only. The response returns the main entity object representing the notification with full detail, including read status, associated message, and timestamps.","description":"Fetch detailed information about a specific notification identified by notificationId.\n\nThis includes notification type, read/unread state, associated message, and timestamps.\n\nSecurity ensures that only the owner of the notification or authorized roles can access this information.\n\nErrors returned if the notification does not exist or if access is denied.\n\nUseful for viewing detailed system message context triggered by chat activities.","summary":"Retrieve detailed information about a specific notification","parameters":[{"name":"notificationId","description":"Unique identifier of the target notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"IChatAppNotification"},"authorizationType":null,"authorizationRole":"regularUser","method":"get","path":"/chatApp/regularUser/notifications/{notificationId}","name":"at"},{"specification":"This operation retrieves a filtered and paginated list of regular users from chat_app_regular_users table. This entity represents users authenticated via Snapchat social login. The search API supports advanced filtering by nickname, social login ID, and creation date, with pagination and sorting capabilities.\n\nAccess is restricted to authenticated users. The response includes user summaries suitable for list display. The request body specifies search parameters including filters and pagination settings.\n\nSecurity considerations include filtering by user role and data privacy constraints. The API supports efficient retrieval optimized by GIN indexes on searchable text fields.","description":"Fetch a paginated list of regular users based on filtering criteria including nickname and social login ID.\n\nSupports pagination and sorting options.\n\nReturns user summaries for display purposes.\n\nAccess limited to authenticated users to protect privacy.\n\nUseful for user management and browsing within the chat app system.","summary":"Search and retrieve a paginated list of regular users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering regular users","typeName":"IChatAppRegularUser.IRequest"},"responseBody":{"description":"Paginated list of regular user summary information matching search criteria","typeName":"IPageIChatAppRegularUser.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","method":"patch","path":"/chatApp/regularUser/regularUsers","name":"index"},{"specification":"This operation retrieves detailed information of a single chat application regular user identified by the unique UUID. It queries the chat_app_regular_users table from the Prisma schema, returning all the user's identity, social login ID, nickname, profile image URI, and timestamps for creation and updates. This endpoint supports retrieving a user's public and internal profile details for user profile viewing or administration purposes.","description":"Retrieve a specific regular user by their unique ID. This operation queries the chat_app_regular_users table as defined in the Prisma schema, which stores key user identity data such as social login identifiers, nicknames, and optional profile image URIs.\n\nSecurity considerations include restricting access to authenticated users or admins depending on application policies, ensuring personal data is not exposed without proper authorization.\n\nThis operation only fetches user details and does not expose sensitive tokens or authentication session data.\n\nValidation ensures that the provided user ID matches a valid UUID format and exists in the system. Failure to find the user results in an error.\n\nRelated operations include updating user details, deleting users, and listing a user's authentication sessions.","summary":"Retrieve a specific chat application regular user by ID.","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the retrieved chat application regular user.","typeName":"IChatAppRegularUser"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/regularUsers/{regularUserId}","method":"get","name":"at"},{"specification":"This operation updates an existing chat application regular user identified by their unique UUID. It accepts updated user information such as nickname and profile image URI and modifies the corresponding record in the chat_app_regular_users table from the Prisma schema. The operation ensures that updates maintain data integrity and that modification rights are restricted to authorized users.\n\nSecurity checks must verify the updater's permissions. Validation checks include verifying nickname length and profile image URI format.\n\nThis operation supports user profile edits while preserving immutable fields like social login ID.\n\nRelated operations include retrieving user details, deleting users, and managing authentication sessions.","description":"Update an existing regular user in the chat_app_regular_users table. This allows modification of mutable fields like nickname and profile_image_uri.\n\nAuthorization ensures only the user or privileged roles can perform updates.\n\nInput validation enforces correct data formats and value limits. The social_login_id and user id are immutable in this operation.\n\nSuccessful update returns the updated user details.\n\nThis operation integrates with the user detail retrieval and session management APIs for comprehensive user profile maintenance.","summary":"Update an existing chat application regular user by ID.","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the chat application regular user.","typeName":"IChatAppRegularUser.IUpdate"},"responseBody":{"description":"Updated information of the chat application regular user.","typeName":"IChatAppRegularUser"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/regularUsers/{regularUserId}","method":"put","name":"update"},{"specification":"This operation deletes a specific regular user from the chat application by their unique UUID. It performs a hard delete on the chat_app_regular_users table as the schema does not indicate soft delete fields for this table. Deletion removes the user's profile, associated memberships, messages, notifications, and authentication sessions due to cascading rules.\n\nSecurity considerations enforce that only authorized admins can delete users. The system ensures no residual personal data remains post-deletion.\n\nRelated operations include user retrieval, update, and session management endpoints.","description":"Delete a regular user by their unique identifier, permanently removing the user and associated data from the database.\n\nThis hard delete operation cascades to remove related memberships, messages, notifications, and auth sessions.\n\nAccess is restricted to admin roles to prevent unauthorized deletions.\n\nUpon successful deletion, no content is returned.\n\nThis operation complements user retrieval and update APIs, aiding full user lifecycle management.","summary":"Delete a chat application regular user by ID.","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/regularUsers/{regularUserId}","method":"delete","name":"erase"},{"specification":"This operation retrieves a paginated list of authentication sessions for a given regular user. Sessions correspond to OAuth2 tokens issued for Snapchat social login authentication, recording access tokens, refresh tokens, expiry, and session timestamps. The data comes from the chat_app_authentication_sessions table in the Prisma schema, filtered by chat_app_regular_user_id.\n\nUsers or admins may invoke this endpoint to audit active sessions, revoke tokens, or monitor login activity. Pagination, filtering, and sorting may be included in request parameters to manage large session lists.\n\nSecurity constraints require that only the user owning the sessions or privileged admins can access this information.\n\nThis operation integrates with session management APIs for token revocation and login state.","description":"Retrieve a paginated list of authentication sessions belonging to a specific regular user identified by their unique user ID.\n\nThese sessions correspond to OAuth2 tokens issued for Snapchat social login authentication.\n\nAccess is restricted to the user themselves or administrators.\n\nRequest supports pagination and filtering options.\n\nResponse includes detailed session information such as access and refresh tokens, expiration dates, and creation timestamps.\n\nThis operation is essential for session management, auditing, and security review processes.","summary":"List authentication sessions for a regular user.","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user whose sessions are being fetched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination and filtering parameters to query authentication sessions.","typeName":"IChatAppAuthenticationSession.IRequest"},"responseBody":{"description":"Paginated list of authentication sessions for the user.","typeName":"IPageIChatAppAuthenticationSession"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/regularUsers/{regularUserId}/authenticationSessions","method":"patch","name":"index"},{"specification":"This operation retrieves a specific authentication session by its ID for a given regular user. It queries the chat_app_authentication_sessions table in the database, using the regular user's ID and the authentication session ID as the lookup keys. The response includes detailed information about the session including OAuth2 tokens, expiration timestamps, and timestamps for creation, update, and soft deletion status. The operation ensures that only authenticated and authorized users can access their own authentication session details, maintaining session security and privacy. This operation supports auditing of active and revoked authentication sessions for users authenticated via Snapchat social login, as defined in the Prisma schema for chat_app_authentication_sessions.","description":"Retrieve a single authentication session record belonging to a regular user, identified by the combination of their user ID and the session's unique ID. This operation enables clients to query details such as OAuth2 access token, refresh token, expiration timestamp, and soft deletion timestamp to monitor session validity.\n\nSecurity considerations require that only the owner of the authentication session or authorized administrative roles may access these details, preventing unauthorized disclosure of sensitive token information.\n\nAssociate this operation with the chat_app_authentication_sessions database entity, ensuring the retrieved record includes all fields as defined in the Prisma schema.\n\nValidation includes confirming the input UUID formats for both user ID and session ID. Errors due to missing records will result in not found responses, while unauthorized access attempts should be appropriately rejected.\n\nRelated API operations may include creating new authentication sessions via social login (not exposed here), and deleting sessions to revoke access tokens.\n\nThis operation performs a simple GET request and returns the full authentication session record or an error if not found.","summary":"Retrieve a specific authentication session by ID for a user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"authenticationSessionId","description":"Unique identifier of the authentication session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed authentication session information","typeName":"IChatAppAuthenticationSessions"},"authorizationRoles":["regularUser"],"path":"/chatApp/regularUser/regularUsers/{regularUserId}/authenticationSessions/{authenticationSessionId}","method":"get","name":"at","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes (hard deletes) a specific authentication session record identified by its ID for a given regular user. The authentication sessions correspond to OAuth2 login tokens issued primarily via Snapchat social login. Deleting the session effectively revokes the user's token and terminates the session.\n\nSince the Prisma schema for chat_app_authentication_sessions includes a soft delete timestamp field (deleted_at), this operation assumes hard deletion is required here to completely revoke access and remove the session record from the database.\n\nThe request requires user authentication and authorization to verify that only the rightful session owner or authorized administrators can perform the deletion. This operation returns no body and confirms successful removal by status code.\n\nThis API is critical for managing session lifecycle and security as part of token revocation and logout flows.","description":"Delete a specific authentication session permanently from the system for a given regular user and authentication session ID. This operation performs a hard delete from the database, removing all associated OAuth2 tokens and session metadata.\n\nSecurity constraints ensure only the owner of the session or authorized administrators can execute this operation. The API supports logout and token revocation workflows by permanently deleting session records.\n\nThis operation maps directly to the chat_app_authentication_sessions Prisma schema, confirming proper session identification via UUID parameters and enforcing access control.\n\nNo request body is necessary, and no response body is returned upon successful deletion.\n\nDeletion failures due to non-existent IDs or unauthorized access should be appropriately handled with error responses.","summary":"Delete a specific authentication session for a user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"authenticationSessionId","description":"Unique identifier of the authentication session","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"path":"/chatApp/regularUser/regularUsers/{regularUserId}/authenticationSessions/{authenticationSessionId}","method":"delete","name":"erase","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation retrieves a paginated list of notifications for a specified regular user from the chat_app_notifications table. It supports filtering, searching, and pagination controls to efficiently fetch relevant notifications such as message received alerts, group invites, or system notices.\n\nThe underlying notifications entity includes details like notification type, linked message ID, read status, and timestamps for creation, update, and soft deletion. This operation allows users to manage and view their notifications history.\n\nSecurity considerations mandate that only the specified user can fetch their notifications. Validation includes UUID format checks for user IDs and correct pagination parameters.\n\nRelated API operations include marking notifications as read and fetching individual notification details.","description":"Retrieve a filtered, paginated list of notification records for a given regular user. This operation supports search and filtering based on notification type and read status.\n\nThe response includes important notification metadata such as the linked message triggering the notification, the type of notification, read/unread flag, and timestamps.\n\nSecurity enforcement ensures only the owner of the notifications may access their list. This operation uses the chat_app_notifications database table as defined in the Prisma schema.\n\nInput validation involves UUID checks for the regular user ID and proper pagination filtering. The API supports high volume notification retrieval efficiently through pagination.\n\nSuccessful responses are paginated and return summaries suitable for list views.","summary":"Search and retrieve a filtered, paginated list of user notifications","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for notifications","typeName":"IChatAppNotifications.IRequest"},"responseBody":{"description":"Paginated list of notification summary information","typeName":"IPageIChatAppNotifications.ISummary"},"authorizationRoles":["regularUser"],"path":"/chatApp/regularUser/regularUsers/{regularUserId}/notifications","method":"patch","name":"index","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation fetches details of a specific notification record identified by its unique notification ID for a specified regular user. It retrieves all notification metadata including the linked message, notification type, read status, and timestamps.\n\nSecurity measures ensure that only the owner of the notification record or authorized personnel can access the sensitive notification information.\n\nThis operation relates directly to the chat_app_notifications database table from the Prisma schema. It validates input UUID formats and handles not found errors gracefully.\n\nClients can use this operation to display detailed notification information to users and facilitate notification management workflows such as marking as read.\n\nThis is a simple GET request operation returning the full notification entity or an error if not found or unauthorized.","description":"Retrieve detailed information of a specific notification for a given regular user. This operation returns all metadata about the notification including linked message information and read status.\n\nSecurity constraints restrict access to the owner of the notification, preventing unauthorized data leaks.\n\nThe operation maps to the chat_app_notifications Prisma schema table ensuring all data fields are returned as defined.\n\nInput validation includes UUID format checking for both user ID and notification ID. Errors for invalid IDs or unauthorized access are handled according to standard API practices.\n\nThis operation complements the notifications list retrieval and supports notification detail views.","summary":"Retrieve detailed notification information by ID for a user","parameters":[{"name":"regularUserId","description":"Unique identifier of the regular user","schema":{"type":"string","format":"uuid"}},{"name":"notificationId","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"IChatAppNotifications"},"authorizationRoles":["regularUser"],"path":"/chatApp/regularUser/regularUsers/{regularUserId}/notifications/{notificationId}","method":"get","name":"at","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation provides a paginated, filterable, and sortable list of community groups from the chat_app_groups table. It allows clients to query multiple groups with various search criteria on group names, status, and business statuses. Pagination parameters enable efficient loading of group lists in the chatting application interface. Users can explore available community groups and browse through active or archived groups as needed.","description":"Retrieve a paginated and searchable list of community groups from the chat_app_groups table. This operation supports filtering groups based on name, status, and business-specific status to facilitate user discovery of community groups.\n\nSecurity considerations include role-based access control; generally, read access is open to regular users to facilitate group exploration, but sensitive statuses are protected.\n\nThe operation returns summaries of community groups optimized for list display, not full details. Response includes group name, status, and creation data.\n\nRelated operations include creating new groups (POST /groups) and retrieving detailed group information (GET /groups/{groupId}).\n\nInvalid or malformed search parameters result in validation errors. Pagination parameters ensure performance even with large group datasets.","summary":"Retrieve a filtered, paginated list of community groups","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for community groups filtering","typeName":"IChatAppGroup.IRequest"},"responseBody":{"description":"Paginated list of community group summaries matching the search criteria","typeName":"IPageIChatAppGroup.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/groups","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information about a specific community group from the chat_app_groups table by its unique identifier (groupId). It returns all relevant metadata including the group's name, description, status, business status, and timestamps.\n\nUser permissions are validated to ensure the requesting user has access rights to view group details. Typically, only authenticated users are allowed to retrieve this information.\n\nThis operation is essential for displaying complete group details in the application UI when a user navigates to a specific group.\n\nErrors include 404 if the group does not exist or the user lacks reading permission.","description":"Fetch detailed information of a community group by its unique groupId. Includes all group metadata such as name, description, status, business status, and timestamps.\n\nThis operation ensures that only authorized users can access full group details and supports error handling for non-existing groups.\n\nRelated to group list (PATCH /groups) and group update (PUT /groups/{groupId}).","summary":"Retrieve specific community group details by ID","authorizationType":null,"authorizationRole":"regularUser","parameters":[{"name":"groupId","description":"Unique identifier of the target community group","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed community group information","typeName":"IChatAppGroup"},"path":"/chatApp/regularUser/groups/{groupId}","method":"get","name":"at"},{"specification":"This operation creates a new community group in the chat_app_groups table. Users can specify the group's unique name, optional description, and initial status. The creating user is typically assigned as the initial admin via related membership logic.\n\nValidation ensures that the group name is unique and conforms to length requirements. The status must be one of the allowed workflow states.\n\nPermissions restrict creation to authenticated users.\n\nSuccessful creation returns the newly created group entity with complete details.\n\nRelated operations include listing groups and updating group information.","description":"Create a new community group with specified name, description, and status. Ensures group name uniqueness and initializes creation timestamps.\n\nOnly authenticated users are permitted to create groups.\n\nReturns the full details of the created group for confirmation and further actions.\n\nRelated operations: listing groups (PATCH /groups) and updating groups (PUT /groups/{groupId}).","summary":"Create a new community group","authorizationType":null,"authorizationRole":"regularUser","parameters":[],"requestBody":{"description":"Creation information for a new community group","typeName":"IChatAppGroup.ICreate"},"responseBody":{"description":"Created community group information","typeName":"IChatAppGroup"},"path":"/chatApp/regularUser/groups","method":"post","name":"create"},{"specification":"This operation updates an existing community group identified by groupId in the chat_app_groups table. It allows modification of group properties like name, description, status, and business status if permitted.\n\nValidation includes uniqueness check for the new group name if changed, and status must conform to predefined values.\n\nOnly authorized users, typically group admins, can perform updates.\n\nThe operation returns the updated group information after successful modification.\n\nErrors arise if the group does not exist or if permissions are insufficient.","description":"Update properties of an existing community group by its ID. Includes validation of uniqueness and status fields.\n\nOnly group admins or authorized users may update the group.\n\nThe response returns the updated group details.\n\nRelated to group retrieval (GET /groups/{groupId}) and listing (PATCH /groups).","summary":"Update an existing community group","authorizationType":null,"authorizationRole":"regularUser","parameters":[{"name":"groupId","description":"Unique identifier of the target community group to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the community group","typeName":"IChatAppGroup.IUpdate"},"responseBody":{"description":"Updated community group information","typeName":"IChatAppGroup"},"path":"/chatApp/regularUser/groups/{groupId}","method":"put","name":"update"},{"specification":"This API operation deletes a community group from the chat_app_groups table in the Prisma database based on the supplied groupId path parameter. It performs a hard delete, removing the record and all related memberships and messages by cascading delete rules configured in the schema. Only users with the 'regularUser' role are authorized to invoke this endpoint.\n\nThis ensures secure and permanent removal of groups by authorized users only. No request body or response body is included for this operation.","description":"Deletes an existing community group identified by the unique UUID provided as groupId path parameter. This operation permanently removes the group and all associated data such as memberships and messages.\n\nSecurity is enforced by allowing only regular users with appropriate privileges to perform group deletion.\n\nThe operation targets the chat_app_groups table in Prisma schema and respects cascading deletes. It returns no data upon successful deletion.\n\nErrors indicate unauthorized access or non-existent target group.\n\nThis operation is critical for maintaining data integrity and enforcing group lifecycle management in the system.","summary":"Delete a community group by its unique identifier","parameters":[{"name":"groupId","in":"path","description":"Unique identifier of the group to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"erase","path":"/chatApp/regularUser/groups/{groupId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieves a list of group membership records for the specified group ID from chat_app_group_memberships table. The operation supports advanced filtering, searching, and pagination for performance and usability. Each membership record includes user roles, membership status, join timestamps, and other metadata relevant to group membership management. Authorization requires the user to be authenticated as a 'regularUser'.\n\nThis operation facilitates group membership management, allowing querying of members with specified criteria and secure access controls.","description":"Fetches a paginated and filtered list of memberships belonging to the community group uniquely identified by groupId. Provides membership summaries including roles, statuses, and timestamps.\n\nAccess restricted to authenticated regular users.\n\nThis operation leverages the chat_app_group_memberships table in the Prisma schema.\n\nRequest body supports complex filtering and pagination criteria using IChatAppGroupMembership.IRequest.\n\nResponse returns paginated membership summaries conforming to IPageIChatAppGroupMembership.ISummary.","summary":"List memberships of a community group with pagination and filters","parameters":[{"name":"groupId","in":"path","description":"Unique identifier of the community group to list memberships for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination parameters for group memberships","typeName":"IChatAppGroupMembership.IRequest"},"responseBody":{"description":"Paginated list of membership summaries","typeName":"IPageIChatAppGroupMembership.ISummary"},"authorizationRoles":["regularUser"],"name":"index","path":"/chatApp/regularUser/groups/{groupId}/memberships","method":"patch","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieves detailed information about a specified membership identified by membershipId within a community group specified by groupId. The data is fetched from the chat_app_group_memberships table and includes member roles, join date, status, and linked user and group details. Access requires authenticated user with 'regularUser' role.\n\nThis operation supports precise membership detail viewing for group and user management.","description":"Retrieves detailed membership information of a specific member within a particular group using groupId and membershipId.\n\nAccess restricted to authenticated regular users.\n\nReturns membership details following the IChatAppGroupMembership schema.","summary":"Get detailed membership information by ID within a group","parameters":[{"name":"groupId","in":"path","description":"Unique ID of the community group containing the membership","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","in":"path","description":"Unique ID of the membership to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed membership information","typeName":"IChatAppGroupMembership"},"authorizationRoles":["regularUser"],"name":"at","path":"/chatApp/regularUser/groups/{groupId}/memberships/{membershipId}","method":"get","authorizationRole":"regularUser","authorizationType":null},{"specification":"Creates a new membership record in a community group identified by the path parameter groupId. Uses the request body to specify membership creation details such as user ID, role, joined timestamp, status, and other metadata compliant with the IChatAppGroupMembership.ICreate schema. Only authorized users with 'regularUser' role can add members.\n\nThis facilitates managing memberships by adding new users to groups under controlled access.","description":"Adds a new member to a community group by providing membership details in the request body.\n\nAccess allowed only for authenticated regular users.\n\nRequest body must conform to IChatAppGroupMembership.ICreate schema.\n\nReturns the created membership details following the IChatAppGroupMembership schema.","summary":"Create a new membership in a community group","parameters":[{"name":"groupId","in":"path","description":"Unique identifier of the community group to add a member to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new group membership","typeName":"IChatAppGroupMembership.ICreate"},"responseBody":{"description":"New membership details","typeName":"IChatAppGroupMembership"},"authorizationRoles":["regularUser"],"name":"create","path":"/chatApp/regularUser/groups/{groupId}/memberships","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates a specific group membership record, modifying membership details such as role, status, and business status in the chat_app_group_memberships table. It allows group administrators to manage members within community groups, enforcing authorization and validating the existence of the membership. The operation requires group ID and membership ID as path parameters and accepts an update payload conforming to IChatAppGroupMembership.IUpdate. The response returns the updated membership details as defined in the Prisma schema.","description":"Update a group membership in a community group. The operation modifies membership attributes including the member's role (e.g., admin or member), membership status (active, banned, pending), and optional business status information.\n\nAuthorization ensures only group administrators can perform updates. The groupId and membershipId identify the target group and membership record. The request body must adhere to the IChatAppGroupMembership.IUpdate schema.\n\nThe response includes the fully updated membership entity from the database.\n\nThis operation directly affects the chat_app_group_memberships table, managing relations between groups and their members.","summary":"Update a specific group membership by ID within a group","parameters":[{"name":"groupId","description":"Unique identifier of the target community group","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","description":"Unique identifier of the target membership record","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Membership update data","typeName":"IChatAppGroupMembership.IUpdate"},"responseBody":{"description":"Updated group membership information","typeName":"IChatAppGroupMembership"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/groups/{groupId}/memberships/{membershipId}","method":"put","name":"update"},{"specification":"Deletes a specific membership from a given community group in the chat_app_group_memberships table. This operation is intended for authorized group administrators to remove members from a group, permanently deleting the membership record.\n\nThe operation requires the group ID and membership ID path parameters to identify the record to delete. Upon success, no content is returned.\n\nIt enforces authorization and validates the existence of the membership. This is a hard delete that permanently removes the database record.","description":"Delete a specific group membership by ID from a community group. This action revokes the user's membership and associated permissions permanently.\n\nAuthorization ensures only group admins or authorized users can perform this operation.\n\nThe groupId and membershipId identify the target membership. No request or response body is needed.\n\nThis operation acts directly on the chat_app_group_memberships table.","summary":"Delete a specific group membership by ID within a group","parameters":[{"name":"groupId","description":"Unique identifier of the target community group","schema":{"type":"string","format":"uuid"}},{"name":"membershipId","description":"Unique identifier of the target membership record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/groups/{groupId}/memberships/{membershipId}","method":"delete","name":"erase"},{"specification":"Retrieves a paginated list of chat messages from the chat_app_messages table with support for complex filtering such as sender ID, group ID, recipient ID, message type, and date range. It facilitates efficient message history retrieval with pagination and sorting capabilities. The request body structure follows IChatAppMessage.IRequest for flexible query parameters. The response is a paginated list of message summaries under IPageIChatAppMessage.ISummary format.\n\nSecurity enforces that only authorized users can query messages related to their groups or direct messages.\n\nErrors are returned on invalid input or unauthorized access.","description":"Search and retrieve paginated chat messages supporting filters like sender, group, recipient, message type, date range, and content keywords.\n\nSupports pagination and sorting for efficient message history display.\n\nRequires authorization to only allow queries by users with access rights.\n\nOperates on chat_app_messages table.\n\nReturns summaries optimized for list displays.\n\nRelated to detail message retrieval by ID.","summary":"Search and list chat messages with filtering and pagination","parameters":[],"requestBody":{"description":"Message search criteria and pagination parameters","typeName":"IChatAppMessage.IRequest"},"responseBody":{"description":"Paginated list of message summaries matching criteria","typeName":"IPageIChatAppMessage.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/messages","method":"patch","name":"index"},{"specification":"Retrieves detailed information of a specific chat message by its unique ID from the chat_app_messages table. Returns the full message including sender, recipient or group context, content, message type, timestamps, and associated media attachments. Access is restricted to authorized users such as sender, recipient, or group members. The path parameter is the message ID as a UUID.\n\nThis operation complements message search and listing operations.\n\nErrors are returned for unauthorized access or if the message is not found.","description":"Retrieve detailed information of a single chat message by its unique identifier.\n\nReturns full message details including sender, related group or recipient, content, type, and timestamps.\n\nEnsures authorization to view message content.\n\nOperates on the chat_app_messages table.\n\nThe message ID is a UUID path parameter.\n\nRelated to message searching and media attachments management.","summary":"Retrieve detailed information of a single chat message by ID","parameters":[{"name":"id","description":"Unique identifier of the target chat message","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed chat message information","typeName":"IChatAppMessage"},"authorizationType":null,"authorizationRole":"regularUser","path":"/chatApp/regularUser/messages/{id}","method":"get","name":"at"},{"specification":"This operation creates a new chat message in the chat_app_messages table. It saves message content, sender information, target group or recipient user, message type (text, image, or video), and timestamps. The operation verifies that the sender is an active user, and stores the message for persistence and delivery. This operation supports sending messages in both one-on-one and group chats, including media references if present.","description":"Create a new chat message from the authenticated user. This message can be sent either to a community group or to an individual recipient user for one-on-one chat. The system validates that the sender is a registered user and that the message content is not empty and complies with length restrictions.\n\nThe operation stores the message with its type (text, image, or video), timestamp, and sender information in the chat_app_messages table.\n\nSecurity considerations ensure that only authenticated users can send messages, and the stored message is soft deletable for audit purposes.\n\nThis operation integrates with chat_app_messages schema as defined in the Prisma model, saving sender_id, content, message_type, and association to group or recipient where applicable.\n\nClients should use this operation to send new messages and receive the created message object in response.","summary":"Create a new chat message","parameters":[],"requestBody":{"description":"Data required to create a new chat message","typeName":"IChatAppMessage.ICreate"},"responseBody":{"description":"The created chat message data","typeName":"IChatAppMessage"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/chatApp/regularUser/messages","method":"post"},{"specification":"This operation updates an existing chat message identified by its UUID in the chat_app_messages table. It allows modifying the message content and type. The operation validates that the user updating the message is its sender and that the message is not deleted. The updated_at timestamp is refreshed to reflect the modification time.\n\nThis operation enforces message ownership and integrity, preventing unauthorized edits.\n\nUsed to correct or modify previous messages while maintaining message history and compliance. It operates on chat_app_messages where id is the primary key.","description":"Update an existing chat message by its unique identifier. Only the sender of the message may perform this action.\n\nThe message content and message type (text, image, video) may be updated. The system validates ownership and ensures the message is not marked as deleted.\n\nThe updated message is returned after the update operation.\n\nSecurity checks prevent unauthorized modifications.\n\nThis operation links to the chat_app_messages table and updates the content and message_type fields.","summary":"Update a chat message by ID","parameters":[{"name":"id","description":"Unique identifier of the chat message to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the chat message","typeName":"IChatAppMessage.IUpdate"},"responseBody":{"description":"Updated chat message data","typeName":"IChatAppMessage"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/chatApp/regularUser/messages/{id}","method":"put"},{"specification":"This operation permanently deletes a chat message identified by its UUID from the chat_app_messages table. The message is removed entirely from the database.\n\nDeleting a message is restricted to the sender or a privileged user. The operation ensures data integrity by removing all associated references such as media attachments and notifications.\n\nThis is a hard delete operation since the chat_app_messages model supports soft deletion using deleted_at but this operation enforces permanent removal.\n\nUsed for removing messages that should no longer appear in chats or history.","description":"Permanently delete a chat message by its unique ID. This operation cannot be undone and all associated data will be removed.\n\nOnly authorized users (message sender or admins) can perform this operation.\n\nThis operation removes the record completely from the chat_app_messages table and cleans up related data.\n\nEnsure that the client handles this action cautiously as deleted messages are unrecoverable.\n\nThis operation targets the chat_app_messages table based on the primary key 'id'.","summary":"Delete a chat message by ID","parameters":[{"name":"id","description":"Unique identifier of the chat message to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/chatApp/regularUser/messages/{id}","method":"delete"},{"specification":"This operation retrieves paginated media attachments for a specific chat message identified by its UUID in chat_app_media_attachments.\n\nIt supports filtering, sorting, and pagination criteria specified in the request body. The operation returns media items associated with the message, including media type and URI.\n\nOnly authorized users who have access to the corresponding chat message can retrieve media attachments.\n\nThis operation links to chat_app_media_attachments with message_id foreign key relation and returns data suitable for media attachment browsing.","description":"Retrieve media attachments belonging to a chat message. Supports pagination, filtering, and sorting.\n\nReturns a paginated list of media metadata (type, URI) associated with the specified message.\n\nSecurity ensures only users with permission to view the message's media can access this.\n\nThis operation uses pagination request parameters and returns a paginated response containing media attachment information.\n\nMedia types supported are limited to 'image' and 'video'.","summary":"List media attachments for a message","parameters":[{"name":"messageId","description":"Unique identifier of the chat message","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for filtering and pagination","typeName":"IChatAppMessageMediaAttachment.IRequest"},"responseBody":{"description":"Paginated list of media attachments","typeName":"IPageIChatAppMessageMediaAttachment"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/chatApp/regularUser/messages/{messageId}/mediaAttachments","method":"patch"},{"specification":"This operation retrieves detailed information about a specific media attachment associated with a chat message in the ChatApp messaging system. It accesses the chat_app_media_attachments table by mediaAttachmentId and associated messageId, returning all relevant media metadata stored, including media type and URI. This endpoint supports user authorization to ensure only authorized access to the media resource.","description":"Retrieve details of a specific media attachment linked to a chat message by messageId and mediaAttachmentId.\n\nThis operation validates the UUID format of both path parameters to ensure correct targeting.\n\nOnly authenticated users with appropriate permissions can successfully access this data.\n\nThe operation interacts with the chat_app_media_attachments table in the Prisma schema, which contains media files linked to chat messages.\n\nIf the specified media attachment or message does not exist or access is unauthorized, appropriate error responses are returned.\n\nRelated operations include creating, updating, and deleting media attachments for messages.\n\nThe response provides the complete media attachment data for client-side rendering or download.","summary":"Get a media attachment for a chat message by IDs","parameters":[{"name":"messageId","description":"Unique identifier of the target message","schema":{"type":"string","format":"uuid"}},{"name":"mediaAttachmentId","description":"Unique identifier of the target media attachment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Media attachment details","typeName":"IChatAppMediaAttachment"},"authorizationType":null,"authorizationRole":"regularUser","name":"atMediaAttachment","path":"/chatApp/regularUser/messages/{messageId}/mediaAttachments/{mediaAttachmentId}","method":"get"},{"specification":"This operation creates a new media attachment linked to a specific chat message in the ChatApp messaging service. It inserts records into the chat_app_media_attachments table with specified media type and URI. The media type must be either 'image' or 'video', and the URI string is restricted in maximum length per schema.\n\nUser authentication and authorization checks ensure the creator has appropriate permissions on the target message.\n\nOn success, the created media attachment record is returned, including database-generated fields like ID and timestamps.","description":"Create a media attachment associated with a specific chat message by messageId.\n\nThe request body must specify mediaType ('image' or 'video') and URI of the stored media file.\n\nThis operation requires UUID validation on the messageId path parameter.\n\nUser authorization is enforced to restrict creation rights.\n\nThe operation creates records in the chat_app_media_attachments table, validating media types and URI length constraints.\n\nReturns newly created media attachment data for client update.","summary":"Create a media attachment for a chat message","parameters":[{"name":"messageId","description":"Unique identifier of the target message","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Media attachment creation info","typeName":"IChatAppMediaAttachment.ICreate"},"responseBody":{"description":"Created media attachment information","typeName":"IChatAppMediaAttachment"},"authorizationType":null,"authorizationRole":"regularUser","name":"createMediaAttachment","path":"/chatApp/regularUser/messages/{messageId}/mediaAttachments","method":"post"},{"specification":"This operation updates an existing media attachment resource associated with a chat message by its unique identifiers messageId and mediaAttachmentId. It allows modification of the media type and the URI location of the media file.\n\nThe operation performs UUID validation on both path parameters.\n\nAuthorization ensures only permitted users may update media attachments.\n\nUpdates affect records in the chat_app_media_attachments table in the Prisma schema.\n\nSuccess response returns the updated media attachment data.","description":"Update media attachment details (mediaType and uri) for a specific chat message by messageId and mediaAttachmentId.\n\nBoth path parameters require UUID format validation.\n\nAuthorization is enforced to restrict updates to authorized users.\n\nReturns updated media attachment record for confirmation.","summary":"Update a media attachment for a chat message","parameters":[{"name":"messageId","description":"Unique identifier of the target message","schema":{"type":"string","format":"uuid"}},{"name":"mediaAttachmentId","description":"Unique identifier of the target media attachment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Media attachment update info","typeName":"IChatAppMediaAttachment.IUpdate"},"responseBody":{"description":"Updated media attachment information","typeName":"IChatAppMediaAttachment"},"authorizationType":null,"authorizationRole":"regularUser","name":"updateMediaAttachment","path":"/chatApp/regularUser/messages/{messageId}/mediaAttachments/{mediaAttachmentId}","method":"put"},{"specification":"This operation performs a hard delete of a media attachment associated with a chat message by messageId and mediaAttachmentId, permanently removing the record from the chat_app_media_attachments table in the Prisma schema.\n\nPath parameter UUID validation is enforced.\n\nAuthorization is restricted to owners or authorized group members.\n\nNo request body or response body is included for this DELETE operation.\n\nRelated operations include creation, retrieval, and updating of media attachments.","description":"Delete a media attachment of a chat message by messageId and mediaAttachmentId.\n\nThis operation permanently deletes the media attachment record from the database.\n\nAuthorization and UUID validation are enforced.\n\nNo response body is returned on success.\n\nClients should handle success confirmation via HTTP status codes.","summary":"Delete a media attachment for a chat message","parameters":[{"name":"messageId","description":"Unique identifier of the target message","schema":{"type":"string","format":"uuid"}},{"name":"mediaAttachmentId","description":"Unique identifier of the target media attachment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"eraseMediaAttachment","path":"/chatApp/regularUser/messages/{messageId}/mediaAttachments/{mediaAttachmentId}","method":"delete"}],"components":{"authorization":[{"name":"regularUser","description":"Authenticated users who can participate in one-on-one and group chats, send messages with media, and receive notifications.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIChatAppAuthenticationSessions.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppAuthenticationSessions.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppRegularUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppRegularUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppAuthenticationSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppAuthenticationSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppNotifications.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppNotifications.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppGroup.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppGroup.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppGroupMembership.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppGroupMembership.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppMessage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppMessage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIChatAppMessageMediaAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IChatAppMessageMediaAttachment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IChatAppRegularUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the regular user."},"social_login_id":{"type":"string","description":"Unique Snapchat social login ID."},"nickname":{"type":"string","description":"Display name or nickname of the user."},"profile_image_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile image URI."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when user record was last updated."}},"required":["id","social_login_id","nickname","created_at","updated_at"],"description":"Regular user entity representing a user authenticated via Snapchat social login.\n\nContains user identity, social login ID, nickname, profile image URI, and timestamps.\n\nSensitive authentication tokens are managed separately in authentication sessions."},"IChatAppRegularUser.ICreate":{"type":"object","properties":{"social_login_id":{"type":"string","description":"Unique Snapchat social login ID."},"nickname":{"type":"string","description":"Display name or nickname of the user."},"profile_image_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile image URI."}},"required":["social_login_id","nickname"],"description":"DTO for creating a new regular user.\n\nThe id and timestamps are generated by the system and thus excluded.\n\nThe social_login_id must be unique.\n\nprofile_image_uri is optional."},"IChatAppRegularUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized regular user."},"social_login_id":{"type":"string","description":"Unique Snapchat social login ID."},"nickname":{"type":"string","description":"Display name or nickname of the user."},"profile_image_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile image URI."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when user record was last updated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","social_login_id","nickname","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens for the regular user."},"IChatAppRegularUser.IRequestLogin":{"type":"object","properties":{"social_login_id":{"type":"string","description":"Snapchat social login ID for authentication."}},"required":["social_login_id"],"description":"Login request data.\n\nContains social_login_id for authentication via Snapchat."},"IChatAppRegularUser.IRequestRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to obtain a new access token."}},"required":["refresh_token"],"description":"Refresh token request data.\n\nContains the refresh token string used to obtain a new access token."},"IChatAppAuthenticationSessions.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Limit of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for tokens."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order specification."},"chat_app_regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by user ID."}},"required":[],"description":"Request for filtering authentication sessions."},"IChatAppAuthenticationSessions":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"Belonged regular user ID."},"access_token":{"type":"string","description":"OAuth2 access token string from Snapchat."},"refresh_token":{"type":"string","description":"OAuth2 refresh token string from Snapchat."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the access token."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp indicating revocation or expiry."}},"required":["id","chat_app_regular_user_id","access_token","refresh_token","expires_at","created_at","updated_at"],"description":"Authentication session entity storing OAuth2 tokens issued to a regular user via Snapchat.\n\nContains token strings, timestamps, user linkage, and soft deletion timestamp."},"IChatAppAuthenticationSessions.ICreate":{"type":"object","properties":{"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"Belonged user's {@link chat_app_regular_users.id}."},"access_token":{"type":"string","description":"OAuth2 access token string provided by Snapchat for authentication."},"refresh_token":{"type":"string","description":"OAuth2 refresh token string to obtain new access tokens."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the access token expires."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp indicating revocation or expiry."}},"required":["chat_app_regular_user_id","access_token","refresh_token","expires_at","created_at","updated_at"],"description":"Create a new authentication session record.\n\nThis operation allows creation of a new OAuth2 authentication session with access and refresh tokens for a Snapchat login user. It stores details such as token strings, token expiration, and associated user ID.\n\nSecurity considerations mandate that only authenticated regular users can create their own sessions, ensuring secure management of authentication credentials.\n\nProper validation of tokens and user existence is required to ensure valid sessions are created."},"IChatAppAuthenticationSessions.IUpdate":{"type":"object","properties":{"access_token":{"type":"string","description":"OAuth2 access token string."},"refresh_token":{"type":"string","description":"OAuth2 refresh token string."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the token."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":[],"description":"Update an existing authentication session record."},"IChatAppNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Limit of records per page."},"is_read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by read/unread status."}},"required":[],"description":"Request parameters for filtering notifications."},"IChatAppNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"Target user ID."},"chat_app_message_id":{"type":"string","format":"uuid","description":"Associated message ID."},"notification_type":{"type":"string","description":"Type/category of the notification."},"is_read":{"type":"boolean","description":"Flag indicating if the notification is read."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp."}},"required":["id","chat_app_regular_user_id","chat_app_message_id","notification_type","is_read","created_at","updated_at"],"description":"Notification entity representing a user notification related to chat messages.\n\nContains notification type, linkage to user and message, read status, and timestamps."},"IChatAppRegularUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"int64"},{"type":"null"}],"description":"Limitation of records per a page."},"social_login_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique Snapchat social login ID for filtering."},"nickname":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Nickname for filtering."}},"required":[],"description":"Request parameters for searching/filtering regular users.\n\nIncludes pagination, filtering by social_login_id and nickname."},"IChatAppRegularUser.IUpdate":{"type":"object","properties":{"nickname":{"type":"string","description":"Display name or nickname of the user."},"profile_image_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile image URI."}},"required":[],"description":"DTO for updating an existing regular user.\n\nOnly mutable fields are allowed.\n\nThe social_login_id and id are immutable and not allowed here.\n\nAll fields optional for partial updates."},"IChatAppAuthenticationSession.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","minimum":1},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"number","minimum":1},{"type":"null"}],"description":"Optional pagination limit per page."},"chat_app_regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by user ID linked to sessions."},"is_deleted":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter by whether session is soft deleted or not."},"token_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search string for access or refresh tokens."},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort order: 'asc' or 'desc' for sorting by expires_at."}},"description":"Request body for authentication sessions search queries.\nAllows filtering and pagination of authentication session records.","required":[]},"IChatAppNotifications.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","minimum":1},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"number","minimum":1},{"type":"null"}],"description":"Optional limit for number of results per page."},"is_read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter by read/unread status of notifications."}},"description":"Request body for filtering and paginating notifications list.\nProvides options to filter by read state and paginate results.","required":[]},"IChatAppNotifications":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID identifier of the notification."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"UUID of the user who receives the notification."},"chat_app_message_id":{"type":"string","format":"uuid","description":"UUID of the associated message triggering the notification."},"notification_type":{"type":"string","description":"Notification type such as 'message_received', 'group_invite'. Defines the category of notification for handling logic."},"is_read":{"type":"boolean","description":"Read state flag. True if the notification has been acknowledged by the user."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when notification was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when notification was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp for archival."}},"required":["id","chat_app_regular_user_id","chat_app_message_id","notification_type","is_read","created_at","updated_at"],"description":"Notification records for system messages related to chat application users, including message alerts, read status, and audit timestamps."},"IChatAppGroup.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for filtering groups."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter groups with exact or partial matching name."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status filter for group states like 'active', 'inactive', or 'archived'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business specific status filter, optional."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Order by a property name with direction control, e.g., 'name_ASC', 'created_at_DESC'."}},"required":[],"description":"Request type for filtering and pagination of community groups.\n\nIncludes pagination parameters to control page size and number, search keyword, and filtering by name, status, and business status.\n\nAllows ordering results by specified fields and direction."},"IChatAppGroup":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the community group."},"name":{"type":"string","description":"Unique name of the community group, used for identification and display."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the community group."},"status":{"type":"string","description":"Current status of the group for workflow management, e.g., 'active', 'inactive', 'archived'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional business-specific status information, optional."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the group was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the group was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion of the group; null if not deleted."}},"required":["id","name","status","created_at","updated_at"],"description":"Community groups in the chatting application.\n\nRepresents a group entity that users can create, join, and manage. Contains group metadata including unique name, description, and status fields.\n\nGroups are independently managed core business entities with lifecycle states and soft deletion support.\n\nRelated to group memberships via chat_app_group_memberships.\n\nEnables group admins to organize and control membership and group settings."},"IChatAppGroup.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the community group at creation."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the new community group."},"status":{"type":"string","description":"Initial status of the group for workflow management."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business specific status info."}},"required":["name","status"],"description":"Request type to create a new community group.\n\nIncludes name, optional description, status, and optional business status.\n\nName must be unique within all community groups."},"IChatAppGroup.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated name of the community group."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated description of the community group."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated status of the community group."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated business status info."}},"required":[],"description":"Request type to update existing community group.\n\nIncludes partial properties for name, description, status, and business status.\n\nSupports partial updates and optional fields, all nullable."},"IChatAppGroupMembership":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key representing the unique ID of this membership."},"chat_app_group_id":{"type":"string","format":"uuid","description":"Foreign key referencing the community group this membership belongs to."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"Foreign key referencing the regular user who is a member."},"role":{"type":"string","description":"Role of the member within the group, e.g., 'member', 'admin'."},"joined_at":{"type":"string","format":"date-time","description":"ISO 8601 formatted timestamp when the user joined the group."},"status":{"type":"string","description":"Current membership status, e.g., 'active', 'banned', 'pending'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business-specific membership status."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when this membership record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp recording the last update time for this membership."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if not deleted."}},"required":["id","chat_app_group_id","chat_app_regular_user_id","role","joined_at","status","created_at","updated_at"],"description":"Represents a user's membership in a community group within the chatting application. Contains role, join date, current status, and relevant timestamps. Used to manage user access and privileges within groups."},"IChatAppGroupMembership.ICreate":{"type":"object","properties":{"chat_app_group_id":{"type":"string","format":"uuid","description":"The community group ID to join."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"ID of the user joining the group."},"role":{"type":"string","description":"Role assigned to the new member, e.g., 'member' or 'admin'."},"joined_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the membership starts."},"status":{"type":"string","description":"Initial membership status, e.g., 'active', 'banned', or 'pending'."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business-specific status information for the membership."}},"required":["chat_app_group_id","chat_app_regular_user_id","role","joined_at","status"],"description":"Request body schema for creating a new membership in a community group. Contains all required fields for establishing membership with optional business status."},"IChatAppGroupMembership.IUpdate":{"type":"object","properties":{"role":{"type":"string","description":"Optional updated role for the membership."},"status":{"type":"string","description":"Optional updated membership status."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated business status for the membership."},"joined_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional updated join date timestamp."}},"required":[],"description":"Request body schema for updating existing membership fields selectively. Allows partial updates to role, status, business status, and join date."},"IChatAppGroupMembership.IRequest":{"type":"object","properties":{"chat_app_group_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter criterion for the community group ID."},"chat_app_regular_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter for the member user ID."},"role":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by membership role."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by membership status."},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by business status."},"joined_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter memberships joined after this ISO 8601 date."},"joined_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter memberships joined before this ISO 8601 date."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, starting from 1."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit of records per page."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to order the results by."},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Direction of sort, ascending or descending."}},"required":[],"description":"Request schema for searching and filtering memberships in community groups with pagination controls."},"IChatAppMessage":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the chat message. Corresponds to chat_app_messages.id primary key."},"sender_id":{"type":"string","format":"uuid","description":"UUID of sender user from chat_app_regular_users.id."},"group_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional group UUID for group message. Nullable for one-on-one messages."},"recipient_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional recipient UUID for one-on-one message. Nullable if group message."},"content":{"type":"string","description":"Text content of the message."},"message_type":{"oneOf":[{"const":"text","description":"Type of message content: text, image, or video."},{"const":"image","description":"Type of message content: text, image, or video."},{"const":"video","description":"Type of message content: text, image, or video."}],"description":"Type of message content: text, image, or video."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of message in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of message in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft deletion timestamp."}},"required":["id","sender_id","content","message_type","created_at","updated_at"],"description":"Chat message entity representing one-on-one or group message."},"IChatAppMessage.IRequest":{"type":"object","properties":{"sender_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional sender filter UUID."},"group_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional group filter UUID."},"recipient_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional recipient filter UUID."},"message_type":{"oneOf":[{"const":"text"},{"const":"image"},{"const":"video"},{"type":"null"}],"description":"Optional message type filter."},"content_search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Content text search filter."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit number of records per page."},"date_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date filter for messages."},"date_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End date filter for messages."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order of results."}},"required":[],"description":"Request type for searching and filtering chat messages."},"IChatAppMessage.ICreate":{"type":"object","properties":{"sender_id":{"type":"string","format":"uuid","description":"UUID of the message sender."},"group_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional group UUID for group messages."},"recipient_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional recipient UUID for one-on-one messages."},"content":{"type":"string","description":"Content of the message."},"message_type":{"oneOf":[{"const":"text","description":"Type of the message content."},{"const":"image","description":"Type of the message content."},{"const":"video","description":"Type of the message content."}],"description":"Type of the message content."}},"required":["sender_id","content","message_type"],"description":"Request type for creating a chat message."},"IChatAppMessage.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"New content of the message."},"message_type":{"oneOf":[{"const":"text","description":"Updated type of message content."},{"const":"image","description":"Updated type of message content."},{"const":"video","description":"Updated type of message content."}],"description":"Updated type of message content."}},"required":[],"description":"Request type for updating a chat message."},"IChatAppMessageMediaAttachment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum records per page."},"filter":{"type":"object","properties":{"message_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by message ID."},{"type":"null"}],"description":"Filter by message ID."},"media_type":{"oneOf":[{"const":"image","description":"Filter by media type."},{"const":"video","description":"Filter by media type."},{"type":"null"}],"description":"Filter by media type."}},"required":[],"description":"Filtering criteria for media attachments."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for media attachments."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting order expression."}},"required":[],"description":"Request parameters for searching and paginating media attachments."},"IChatAppMediaAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the media attachment."},"message_id":{"type":"string","format":"uuid","description":"Identifier of the associated chat message."},"media_type":{"oneOf":[{"const":"image","description":"Type of media: image or video."},{"const":"video","description":"Type of media: image or video."}],"description":"Type of media: image or video."},"uri":{"type":"string","description":"URI of the media file stored in the system."},"created_at":{"type":"string","format":"date-time","description":"Date and time when the media attachment was uploaded."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when media was deleted (nullable)."}},"required":["id","message_id","media_type","uri","created_at"],"description":"Media files attached to chat messages supporting images and videos.\n\nLinked to messages and stored with metadata including file URI, type, and timestamps.\n\nSupports audit with creation timestamps and soft deletion for compliance."},"IChatAppMediaAttachment.ICreate":{"type":"object","properties":{"message_id":{"type":"string","format":"uuid","description":"Associated message's unique identifier."},"media_type":{"oneOf":[{"const":"image","description":"Media type, either 'image' or 'video'."},{"const":"video","description":"Media type, either 'image' or 'video'."}],"description":"Media type, either 'image' or 'video'."},"uri":{"type":"string","description":"URI of the media file to be attached."}},"required":["message_id","media_type","uri"],"description":"Data required to create a new media attachment associated with a chat message."},"IChatAppMediaAttachment.IUpdate":{"type":"object","properties":{"media_type":{"oneOf":[{"const":"image"},{"const":"video"},{"type":"null"}],"description":"Updated media type, either 'image' or 'video'."},"uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated URI of the media file."}},"required":[],"description":"Update fields for a chat app media attachment, optional as fields can be partially updated."},"IChatAppRegularUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the regular user."},"nickname":{"type":"string","description":"Display name or nickname of the user."},"profile_image_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional profile image URI."}},"required":["id","nickname"],"description":"DTO with essential user fields for listings and summaries."},"IChatAppAuthenticationSessions.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the session."},"access_token":{"type":"string","description":"OAuth2 access token string."},"expires_at":{"type":"string","format":"date-time","description":"Expiration timestamp of the access token."}},"required":["id","access_token","expires_at"],"description":"Summary information of an authentication session."},"IChatAppNotification.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification."},"notification_type":{"type":"string","description":"Type/category of the notification."},"is_read":{"type":"boolean","description":"Flag if the notification has been read."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."}},"required":["id","notification_type","is_read","created_at"],"description":"Summary information of a notification."},"IChatAppAuthenticationSession":{"type":"object","description":"Authentication session entity for a regular user logged in via Snapchat social login. Stores OAuth2 tokens and expiration info.\n\nThis entity is linked to a regular user by chat_app_regular_user_id, representing a secure authentication session with token lifecycle management. Supports soft deletion to revoke sessions.\n\nProperties:\n- **id**: Unique UUID identifier of the session.\n- **chat_app_regular_user_id**: UUID reference to the user owning the session.\n- **access_token**: OAuth2 access token string from Snapchat.\n- **refresh_token**: OAuth2 refresh token string for renewing access.\n- **expires_at**: ISO 8601 timestamp when access token expires.\n- **created_at**/**updated_at**: Timestamps of session creation and last update.\n- **deleted_at**: Optional soft deletion timestamp indicating session revocation.\n\nThis entity ensures secure, session-based access management for authenticated regular users.","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID for the authentication session."},"chat_app_regular_user_id":{"type":"string","format":"uuid","description":"UUID reference for the regular user who owns this session."},"access_token":{"type":"string","description":"OAuth2 access token issued for this session by Snapchat."},"refresh_token":{"type":"string","description":"OAuth2 refresh token used to obtain new access tokens."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format indicating when the access token expires."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format indicating when the session was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp in ISO 8601 format indicating last update time for the session."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp in ISO 8601 format indicating when the session was soft deleted (revoked). Null if not deleted."}},"required":["id","chat_app_regular_user_id","access_token","refresh_token","expires_at","created_at","updated_at"]},"IChatAppNotifications.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification"},"notification_type":{"type":"string","description":"Type or category of notification, e.g., message_received"},"is_read":{"type":"boolean","description":"Whether the notification has been read"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated"}},"required":["id","notification_type","is_read","created_at","updated_at"],"description":"Summary view of notification information suitable for list display.\n\nIncludes the unique identifier, notification type, read status, and timestamps for creation and last update.\n\nDoes NOT include sensitive or detailed message content.\n\nUse this type for notification listing endpoints."},"IChatAppGroup.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community group"},"name":{"type":"string","description":"Unique name of the community group"},"status":{"type":"string","description":"Current status of the group for workflow management"},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional business-specific status information, optional"}},"required":["id","name","status"],"description":"Summary view of community group entity suitable for list display.\n\nIncludes unique group ID, group name, current status, and optional business-related status.\n\nUsed for group listing endpoints where full group detail is unnecessary."},"IChatAppGroupMembership.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the group membership"},"role":{"type":"string","description":"Role of the member within the group, e.g., member, admin"},"status":{"type":"string","description":"Current membership status, e.g., active, banned, pending"},"business_status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Additional business-specific membership status, optional"},"joined_at":{"type":"string","format":"date-time","description":"Timestamp when the user joined the group"}},"required":["id","role","status","joined_at"],"description":"Summary of a group membership suitable for list display.\n\nIncludes membership unique ID, member role, status, optional business status, and join timestamp.\n\nUsed in membership listing with pagination and filtering."},"IChatAppMessage.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the chat message"},"sender_id":{"type":"string","format":"uuid","description":"Sender user's unique identifier"},"group_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target group identifier if message is in a group chat"},"recipient_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Recipient user ID for one-on-one chats"},"content":{"type":"string","description":"Text content of the message"},"message_type":{"type":"string","description":"Type of the message content: text, image, or video"},"created_at":{"type":"string","format":"date-time","description":"Timestamp the message was created"}},"required":["id","sender_id","content","message_type","created_at"],"description":"Summary of chat message information suitable for list display.\n\nIncludes message ID, sender, content snippet, type, and creation timestamp.\n\nOmits sensitive or deleted state details.\n\nUsed for message listing endpoints."},"IChatAppMessageMediaAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the media attachment record."},"message_id":{"type":"string","format":"uuid","description":"Foreign key reference to the chat message the media is attached to."},"media_type":{"oneOf":[{"const":"image","description":"Type of the media: 'image' or 'video'."},{"const":"video","description":"Type of the media: 'image' or 'video'."}],"description":"Type of the media: 'image' or 'video'."},"uri":{"type":"string","maxLength":80000,"description":"URI of the stored media file in the system."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the media attachment was created."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp. Null if not deleted."}},"required":["id","message_id","media_type","uri","created_at"],"description":"Media files attached to chat messages supporting images and videos. Linked to messages and stored with metadata including file URI, type, and timestamps. Supports audit with creation timestamps and soft deletion for compliance."},"IChatAppMessageMediaAttachment.ICreate":{"type":"object","properties":{"message_id":{"type":"string","format":"uuid","description":"Reference to message this media will attach."},"media_type":{"oneOf":[{"const":"image","description":"Media type for the new attachment."},{"const":"video","description":"Media type for the new attachment."}],"description":"Media type for the new attachment."},"uri":{"type":"string","maxLength":80000,"description":"URI location of the media file to attach."}},"required":["message_id","media_type","uri"],"description":"Information required to create a new media attachment linked to a chat message."},"IChatAppMessageMediaAttachment.IUpdate":{"type":"object","properties":{"message_id":{"type":"string","format":"uuid","description":"Reference to message being attached to. Optional in update."},"media_type":{"oneOf":[{"const":"image","description":"Media type (image or video). Optional in update."},{"const":"video","description":"Media type (image or video). Optional in update."}],"description":"Media type (image or video). Optional in update."},"uri":{"type":"string","maxLength":80000,"description":"URI of the media file. Optional in update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Nullable in update."}},"required":[],"description":"Data for updating an existing media attachment. All fields optional."},"IChatAppMessageMediaAttachment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique media attachment identifier."},"media_type":{"oneOf":[{"const":"image","description":"Type of media."},{"const":"video","description":"Type of media."}],"description":"Type of media."},"uri":{"type":"string","maxLength":80000,"description":"URI of media file."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."}},"required":["id","media_type","uri","created_at"],"description":"Summary information for media attachments, used in paginated lists."},"IPage.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Limit per page."}},"required":[],"description":"Request parameters for paginated data retrieval."}}}}