import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingUnits } from "../../../structures/IRecipeSharingUnits";
import { IPageIRecipeSharingUnits } from "../../../structures/IPageIRecipeSharingUnits";

/**
 * Search and retrieve a filtered, paginated list of measurement units.
 *
 * Retrieve a filtered and paginated list of measurement units from the system.
 * This operation allows users to search and sort units by code, name, or
 * abbreviation.
 *
 * Units are standardized labels for ingredient measurements, consistent with
 * the recipe sharing backend's requirements for precision in ingredient
 * quantities.
 *
 * Security considerations include read access typically available to
 * authenticated users or public depending on system policy.
 *
 * The response contains unit summary information optimized for listing
 * purposes.
 *
 * This operation interfaces with the recipe_sharing_units table, ensuring
 * accurate reflection of units stored in the database.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for unit
 *   filtering
 * @path /recipeSharing/units
 * @accessor api.functional.recipeSharing.units.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for unit filtering */
    body: IRecipeSharingUnits.IRequest;
  };
  export type Body = IRecipeSharingUnits.IRequest;
  export type Response = IPageIRecipeSharingUnits.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/units",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/units";
  export const random = (): IPageIRecipeSharingUnits.ISummary =>
    typia.random<IPageIRecipeSharingUnits.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific measurement unit by ID.
 *
 * Retrieve detailed information of a measurement unit identified by its unique
 * ID.
 *
 * This operation ensures users obtain complete unit details including code,
 * full name, and abbreviation.
 *
 * Access control for detailed information may require authenticated user roles.
 *
 * The operation corresponds with the recipe_sharing_units table structure in
 * the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the measurement unit
 * @path /recipeSharing/units/:id
 * @accessor api.functional.recipeSharing.units.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the measurement unit */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingUnits;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/units/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/units/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingUnits =>
    typia.random<IRecipeSharingUnits>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
