import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingDietCategory } from "../../../../structures/IRecipeSharingDietCategory";

/**
 * Create a new diet category.
 *
 * Creates a new diet category in the system to classify recipes and user
 * dietary preferences.
 *
 * This operation requires supplying a unique code and name for the diet
 * category, with an optional description for clarity.
 *
 * Security considerations include restricting this creation endpoint to
 * authenticated moderator roles to prevent unauthorized category manipulation.
 *
 * The operation affects the 'recipe_sharing_diet_categories' table, adding a
 * new record with automatic creation and update timestamps.
 *
 * Validation ensures the uniqueness of the category code and proper formatting
 * of data, returning errors if conflicts or invalid data occur.
 *
 * Related operations include updating existing diet categories and deleting
 * them when deprecated.
 *
 * Errors will be returned if code or name are missing or violate uniqueness
 * constraints.
 *
 * @param props.connection
 * @param props.body Information to create a new diet category
 * @path /recipeSharing/moderator/dietCategories
 * @accessor api.functional.recipeSharing.moderator.dietCategories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information to create a new diet category */
    body: IRecipeSharingDietCategory.ICreate;
  };
  export type Body = IRecipeSharingDietCategory.ICreate;
  export type Response = IRecipeSharingDietCategory;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/dietCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/dietCategories";
  export const random = (): IRecipeSharingDietCategory =>
    typia.random<IRecipeSharingDietCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing diet category.
 *
 * Updates the properties of an existing diet category in the system.
 *
 * The category is located by its unique ID provided as a path parameter.
 *
 * Fields that can be updated include the category's code, name, and description
 * to reflect changes or corrections.
 *
 * Security restrictions ensure only users with appropriate moderator
 * permissions can perform updates.
 *
 * Successful updates modify the 'recipe_sharing_diet_categories' table record
 * and refresh the update timestamp.
 *
 * Validation enforces uniqueness constraints for the code and verifies data
 * integrity.
 *
 * Related operations include creation of new diet categories and deletion of
 * outdated ones.
 *
 * Errors occur if the ID is invalid or if uniqueness constraints fail.
 *
 * @param props.connection
 * @param props.id Unique identifier of the diet category to update
 * @param props.body Updated diet category information
 * @path /recipeSharing/moderator/dietCategories/:id
 * @accessor api.functional.recipeSharing.moderator.dietCategories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the diet category to update */
    id: string & tags.Format<"uuid">;

    /** Updated diet category information */
    body: IRecipeSharingDietCategory.IUpdate;
  };
  export type Body = IRecipeSharingDietCategory.IUpdate;
  export type Response = IRecipeSharingDietCategory;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/dietCategories/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/dietCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingDietCategory =>
    typia.random<IRecipeSharingDietCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a diet category.
 *
 * Deletes a diet category identified by its unique ID from the database.
 *
 * This operation performs a hard deletion, permanently removing all associated
 * records of the diet category.
 *
 * The endpoint requires authorized moderator users to prevent accidental or
 * unauthorized deletions.
 *
 * No response body is returned upon successful deletion.
 *
 * This affects the 'recipe_sharing_diet_categories' table in the Prisma
 * database.
 *
 * Errors are returned for invalid IDs or unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the diet category to delete
 * @path /recipeSharing/moderator/dietCategories/:id
 * @accessor api.functional.recipeSharing.moderator.dietCategories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the diet category to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/dietCategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/dietCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
