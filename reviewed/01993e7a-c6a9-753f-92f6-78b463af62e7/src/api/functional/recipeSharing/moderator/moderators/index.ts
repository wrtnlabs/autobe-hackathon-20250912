import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingModerator } from "../../../../structures/IRecipeSharingModerator";
import { IPageIRecipeSharingModerator } from "../../../../structures/IPageIRecipeSharingModerator";

/**
 * Search and retrieve a list of moderator user accounts.
 *
 * Retrieve a filtered and paginated list of moderator accounts in the Recipe
 * Sharing Backend system. This operation supports searching and sorting by
 * moderator attributes including email, username, and timestamps for creation
 * and last update.
 *
 * Security for this endpoint requires authentication with the 'moderator' role
 * to prevent unauthorized access to sensitive user data. The response returns
 * summary information optimized for management interfaces showing essential
 * moderator details.
 *
 * The operation corresponds to the recipe_sharing_moderators table which stores
 * authentication and auditing information for moderators, including email,
 * hashed passwords, and timestamps. Pagination ensures scalable retrieval for
 * large numbers of moderators.
 *
 * This endpoint integrates standard pagination parameters alongside search
 * criteria in the request body, allowing flexible queries. The response
 * provides a paginated list structure with moderator summary information.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   moderators
 * @path /recipeSharing/moderator/moderators
 * @accessor api.functional.recipeSharing.moderator.moderators.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering moderators */
    body: IRecipeSharingModerator.IRequest;
  };
  export type Body = IRecipeSharingModerator.IRequest;
  export type Response = IPageIRecipeSharingModerator.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/moderators";
  export const random = (): IPageIRecipeSharingModerator.ISummary =>
    typia.random<IPageIRecipeSharingModerator.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed moderator information by ID.
 *
 * Retrieve detailed information of a single moderator user identified by their
 * unique ID in the Recipe Sharing Backend system. This includes email,
 * username, creation and update timestamps. Password hashes are not returned to
 * ensure security.
 *
 * The operation requires a path parameter 'id' that corresponds to the
 * moderator's UUID. Only authenticated users with the 'moderator' role may
 * access this information, ensuring data protection.
 *
 * The moderator data is sourced from the recipe_sharing_moderators Prisma
 * model, which manages authentication and audit information. This operation is
 * useful for administrative user account management and status checking.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target moderator user
 * @path /recipeSharing/moderator/moderators/:id
 * @accessor api.functional.recipeSharing.moderator.moderators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target moderator user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingModerator;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingModerator =>
    typia.random<IRecipeSharingModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update moderator user information by ID.
 *
 * Update a moderator user's information by their unique ID. The update may
 * include changes to the email, username, or password hash. This operation
 * enforces security by limiting access to authenticated moderators.
 *
 * Input validation ensures email uniqueness and username format compliance. The
 * update reflects in the recipe_sharing_moderators database table, maintaining
 * audit timestamps.
 *
 * This endpoint supports administrative maintenance of moderator accounts such
 * as credential updates and profile management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target moderator user
 * @param props.body Update data for the moderator user
 * @path /recipeSharing/moderator/moderators/:id
 * @accessor api.functional.recipeSharing.moderator.moderators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target moderator user */
    id: string & tags.Format<"uuid">;

    /** Update data for the moderator user */
    body: IRecipeSharingModerator.IUpdate;
  };
  export type Body = IRecipeSharingModerator.IUpdate;
  export type Response = IRecipeSharingModerator;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/moderators/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingModerator =>
    typia.random<IRecipeSharingModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a moderator user by ID.
 *
 * Permanently delete a moderator user from the system by their unique ID. This
 * is a hard delete operation that cannot be undone. It removes all associated
 * data from the recipe_sharing_moderators table.
 *
 * The operation requires the path parameter 'id' as the unique identifier of
 * the moderator to erase. Only users with the 'moderator' role may perform this
 * action to ensure strict control.
 *
 * There is no request body or response content. The successful execution
 * results in the complete removal of the moderator user record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target moderator user
 * @path /recipeSharing/moderator/moderators/:id
 * @accessor api.functional.recipeSharing.moderator.moderators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target moderator user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/moderators/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/moderators/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
