import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRecipeCategory } from "../../../../structures/IRecipeSharingRecipeCategory";

/**
 * Create a new recipe category in the system.
 *
 * Inputs must include category type (e.g., cuisine, diet, difficulty) and
 * unique category name.
 *
 * Optional description allows further metadata about the category.
 *
 * The system validates inputs and uniqueness constraints before saving.
 *
 * Only authorized users (e.g., moderators) can perform this operation to
 * maintain controlled taxonomy.
 *
 * Upon successful creation, the full category entity is returned.
 *
 * This is foundational for expanding category options for recipe tagging and
 * filtering.
 *
 * Error handling captures duplicate names and validation failures with
 * meaningful messages.
 *
 * @param props.connection
 * @param props.body Creation info for a new recipe category
 * @path /recipeSharing/moderator/recipeCategories
 * @accessor api.functional.recipeSharing.moderator.recipeCategories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info for a new recipe category */
    body: IRecipeSharingRecipeCategory.ICreate;
  };
  export type Body = IRecipeSharingRecipeCategory.ICreate;
  export type Response = IRecipeSharingRecipeCategory;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/recipeCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/recipeCategories";
  export const random = (): IRecipeSharingRecipeCategory =>
    typia.random<IRecipeSharingRecipeCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing recipe category by ID.
 *
 * Update an existing recipe category with specified details.
 *
 * This operation supports modification of category type, name, and description.
 *
 * Input is validated for uniqueness and compliance with schema.
 *
 * Only authorized moderators can perform updates to preserve taxonomy
 * integrity.
 *
 * The response returns the full updated category record upon success.
 *
 * Errors are returned when the category is not found or inputs are invalid.
 *
 * @param props.connection
 * @param props.recipeCategoryId Unique identifier of the recipe category to
 *   update
 * @param props.body Update info for an existing recipe category
 * @path /recipeSharing/moderator/recipeCategories/:recipeCategoryId
 * @accessor api.functional.recipeSharing.moderator.recipeCategories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the recipe category to update */
    recipeCategoryId: string & tags.Format<"uuid">;

    /** Update info for an existing recipe category */
    body: IRecipeSharingRecipeCategory.IUpdate;
  };
  export type Body = IRecipeSharingRecipeCategory.IUpdate;
  export type Response = IRecipeSharingRecipeCategory;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/recipeCategories/:recipeCategoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/recipeCategories/${encodeURIComponent(props.recipeCategoryId ?? "null")}`;
  export const random = (): IRecipeSharingRecipeCategory =>
    typia.random<IRecipeSharingRecipeCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeCategoryId")(() =>
        typia.assert(props.recipeCategoryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a recipe category by ID.
 *
 * Delete a recipe category by its unique identifier.
 *
 * This operation permanently removes the recipe category record identified by
 * `recipeCategoryId` from the database. As recipe categories are fundamental to
 * recipe organization, deletion should be performed only by authorized
 * moderators with a clear need. Upon successful deletion, the category will no
 * longer be available for tagging or filtering recipes.
 *
 * The request requires a valid UUID of the recipe category. Proper
 * authentication and authorization checks for moderator role access are
 * expected.
 *
 * Related operations include retrieval or updating of recipe categories.
 *
 * Errors may occur if the category is associated with active recipes or if the
 * ID does not exist.
 *
 * Consumers should handle these cases appropriately.
 *
 * @param props.connection
 * @param props.recipeCategoryId Unique identifier of the recipe category to
 *   delete
 * @path /recipeSharing/moderator/recipeCategories/:recipeCategoryId
 * @accessor api.functional.recipeSharing.moderator.recipeCategories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the recipe category to delete */
    recipeCategoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/recipeCategories/:recipeCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/recipeCategories/${encodeURIComponent(props.recipeCategoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeCategoryId")(() =>
        typia.assert(props.recipeCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
