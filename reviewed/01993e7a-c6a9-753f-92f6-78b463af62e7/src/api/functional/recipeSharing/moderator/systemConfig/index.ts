import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingSystemConfig } from "../../../../structures/IRecipeSharingSystemConfig";

/**
 * Create new system configuration entry.
 *
 * Add a new system configuration setting with a unique key and associated
 * value. Optional description can provide context. The timestamps for creation
 * and update are handled automatically.
 *
 * This operation requires moderator authorization to restrict configuration
 * changes to trusted users only.
 *
 * The request body must contain all required fields to create the new system
 * configuration entry.
 *
 * Successful creation returns the full system configuration object including
 * timestamps.
 *
 * Ensure uniqueness of the 'key' field to prevent duplicate entries.
 *
 * @param props.connection
 * @param props.body Data required to create system configuration
 * @path /recipeSharing/moderator/systemConfig
 * @accessor api.functional.recipeSharing.moderator.systemConfig.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data required to create system configuration */
    body: IRecipeSharingSystemConfig.ICreate;
  };
  export type Body = IRecipeSharingSystemConfig.ICreate;
  export type Response = IRecipeSharingSystemConfig;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/systemConfig",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/systemConfig";
  export const random = (): IRecipeSharingSystemConfig =>
    typia.random<IRecipeSharingSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a system configuration entry by ID.
 *
 * Update a system configuration record by its unique identifier. The operation
 * modifies the 'value' and optional 'description' fields of the system
 * configuration, preserving creation and update timestamps automatically.
 * Access to this operation is restricted to administrators who manage global
 * system settings.
 *
 * This operation directly interacts with the 'recipe_sharing_system_config'
 * table, ensuring configuration consistency across the platform. Validation
 * includes verifying the existence of the configuration ID and input data,
 * guaranteeing integrity and security.
 *
 * Proper error responses must be returned for invalid inputs or insufficient
 * permissions.
 *
 * @param props.connection
 * @param props.id Identifier of the target system configuration entry
 * @param props.body System configuration update payload
 * @path /recipeSharing/moderator/systemConfig/:id
 * @accessor api.functional.recipeSharing.moderator.systemConfig.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the target system configuration entry */
    id: string & tags.Format<"uuid">;

    /** System configuration update payload */
    body: IRecipeSharingSystemConfig.IUpdate;
  };
  export type Body = IRecipeSharingSystemConfig.IUpdate;
  export type Response = IRecipeSharingSystemConfig;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/systemConfig/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/systemConfig/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingSystemConfig =>
    typia.random<IRecipeSharingSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a system configuration by ID.
 *
 * Permanently remove a system configuration record by its unique identifier.
 * Because the schema lacks soft delete columns, this operation deletes the
 * record irreversibly.
 *
 * Access is restricted to moderators responsible for system maintenance.
 * Successful deletion returns no content.
 *
 * Proper error handling must address non-existent records and unauthorized
 * access attempts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system configuration entry to delete
 * @path /recipeSharing/moderator/systemConfig/:id
 * @accessor api.functional.recipeSharing.moderator.systemConfig.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the system configuration entry to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/systemConfig/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/systemConfig/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
