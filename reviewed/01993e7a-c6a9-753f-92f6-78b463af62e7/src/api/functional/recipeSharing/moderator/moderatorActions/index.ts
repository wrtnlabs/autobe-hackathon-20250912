import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingModeratorActions } from "../../../../structures/IRecipeSharingModeratorActions";
import { IRecipeSharingFlagQueue } from "../../../../structures/IRecipeSharingFlagQueue";
import { IPageIRecipeSharingFlagQueue } from "../../../../structures/IPageIRecipeSharingFlagQueue";

/**
 * Create a new moderator action record documenting the moderation activity
 * performed.
 *
 * The request must specify the moderator ID, the type of action taken, the
 * target entity ID, and optional comments describing the operation.
 *
 * This is essential for maintaining an audit trail of all moderation decisions
 * and actions taken on flagged reviews or category approvals.
 *
 * Only authorized moderators can perform this operation.
 *
 * The system timestamps are applied automatically and do not require client
 * input.
 *
 * The response returns the full created moderator action entity.
 *
 * Errors are triggered if required fields are missing or invalid.
 *
 * @param props.connection
 * @param props.body Moderator action creation details
 * @path /recipeSharing/moderator/moderatorActions
 * @accessor api.functional.recipeSharing.moderator.moderatorActions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Moderator action creation details */
    body: IRecipeSharingModeratorActions.ICreate;
  };
  export type Body = IRecipeSharingModeratorActions.ICreate;
  export type Response = IRecipeSharingModeratorActions;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/moderatorActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/moderatorActions";
  export const random = (): IRecipeSharingModeratorActions =>
    typia.random<IRecipeSharingModeratorActions>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve flag queue entries for moderation.
 *
 * This API endpoint allows moderators to search, filter, paginate, and sort
 * flag queue entries used in moderation workflows. It supports complex search
 * criteria defined in the request body, such as filtering by status, flag
 * reason, report date ranges, and reporter user ID.
 *
 * The system returns a paginated list of flag queue entries matching the
 * criteria, including relevant details like review IDs, reporter IDs, reason
 * for flags, and timestamps.
 *
 * Security ensures only moderators can access this data.
 *
 * Errors include invalid query parameters or unauthorized access.
 *
 * This operation facilitates effective moderation by enabling moderators to
 * retrieve and manage the flag queue in a scalable and efficient manner.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for flag queue entries
 * @path /recipeSharing/moderator/moderatorActions
 * @accessor api.functional.recipeSharing.moderator.moderatorActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter criteria for flag queue entries */
    body: IRecipeSharingFlagQueue.IRequest;
  };
  export type Body = IRecipeSharingFlagQueue.IRequest;
  export type Response = IPageIRecipeSharingFlagQueue;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/moderatorActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/moderatorActions";
  export const random = (): IPageIRecipeSharingFlagQueue =>
    typia.random<IPageIRecipeSharingFlagQueue>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific moderator action by ID.
 *
 * Retrieve a specific moderator action by its unique identifier in the recipe
 * sharing backend moderation system.
 *
 * This operation returns detailed information of the moderation action
 * including the moderator who performed it, the exact action type, target
 * entity, timestamps, and any comments added by the moderator. It supports
 * audit and compliance by providing immutable logs of moderation activities.
 *
 * Access control ensures only authorized moderators can access this data. The
 * response includes all significant fields maintained in the
 * 'recipe_sharing_moderator_actions' Prisma table such as 'moderator_id',
 * 'action_type', 'target_id', 'action_timestamp', and audit fields like
 * 'created_at' and 'updated_at'.
 *
 * No request body is needed for this GET operation.
 *
 * Errors such as invalid or nonexistent IDs return appropriate HTTP error
 * responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the moderator action to retrieve
 * @path /recipeSharing/moderator/moderatorActions/:id
 * @accessor api.functional.recipeSharing.moderator.moderatorActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the moderator action to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingModeratorActions;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/moderatorActions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/moderatorActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingModeratorActions =>
    typia.random<IRecipeSharingModeratorActions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a moderator action by ID.
 *
 * Update an existing moderator action by its ID.
 *
 * Allows modification of action details and comments while preserving audit
 * compliance.
 *
 * Only authorized moderators can perform updates.
 *
 * The system manages timestamps for creation and updates.
 *
 * The response provides the updated moderator action object.
 *
 * Errors occur if the ID is invalid or update data fails validation.
 *
 * @param props.connection
 * @param props.id Unique identifier of the moderator action to update
 * @param props.body Moderator action update details
 * @path /recipeSharing/moderator/moderatorActions/:id
 * @accessor api.functional.recipeSharing.moderator.moderatorActions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the moderator action to update */
    id: string & tags.Format<"uuid">;

    /** Moderator action update details */
    body: IRecipeSharingModeratorActions.IUpdate;
  };
  export type Body = IRecipeSharingModeratorActions.IUpdate;
  export type Response = IRecipeSharingModeratorActions;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/moderatorActions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/moderatorActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingModeratorActions =>
    typia.random<IRecipeSharingModeratorActions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a moderator action by ID.
 *
 * Delete a moderator action from the system by its unique ID.
 *
 * This permanently removes the audit log entry for the moderation activity.
 *
 * Only authorized moderators can execute this operation.
 *
 * No request body or response body is needed.
 *
 * Errors occur if the specified ID does not exist.
 *
 * This is a hard delete operation removing the record entirely.
 *
 * @param props.connection
 * @param props.id Unique identifier of the moderator action to delete
 * @path /recipeSharing/moderator/moderatorActions/:id
 * @accessor api.functional.recipeSharing.moderator.moderatorActions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the moderator action to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/moderatorActions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/moderatorActions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
