import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingModerationLog } from "../../../../../structures/IRecipeSharingModerationLog";
import { IPageIRecipeSharingModerationLog } from "../../../../../structures/IPageIRecipeSharingModerationLog";
import { IRecipeSharingModerationLogs } from "../../../../../structures/IRecipeSharingModerationLogs";

/**
 * Retrieve paginated list of moderation logs.
 *
 * Retrieve moderation logs for review moderation activities.
 *
 * Includes detailed audit trail for compliance.
 *
 * Accessible only by moderators.
 *
 * Supports pagination, filtering, and search via request body JSON.
 *
 * Returns paginated list of logs.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for moderation
 *   logs
 * @path /recipeSharing/moderator/moderation/logs
 * @accessor api.functional.recipeSharing.moderator.moderation.logs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination parameters for moderation logs */
    body: IRecipeSharingModerationLog.IRequest;
  };
  export type Body = IRecipeSharingModerationLog.IRequest;
  export type Response = IPageIRecipeSharingModerationLog;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/moderation/logs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/moderation/logs";
  export const random = (): IPageIRecipeSharingModerationLog =>
    typia.random<IPageIRecipeSharingModerationLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed moderation log information by ID.
 *
 * Retrieve detailed information for a moderation log by its unique ID. The log
 * includes moderator details, the action performed (e.g., hide, unhide),
 * optional moderator comments, and timestamps for audit and compliance
 * purposes.
 *
 * Access to this endpoint is restricted to moderators to maintain auditing
 * security.
 *
 * The operation relates directly to the recipe_sharing_moderation_logs table
 * which stores immutable audit trails for moderation actions on flagged
 * reviews.
 *
 * Validations include proper UUID formatting for the log ID and existence
 * checks.
 *
 * This GET operation supports moderator workflows requiring detailed moderation
 * activity audits to ensure transparency and accountability.
 *
 * @param props.connection
 * @param props.id Unique identifier of the moderation log
 * @path /recipeSharing/moderator/moderation/logs/:id
 * @accessor api.functional.recipeSharing.moderator.moderation.logs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the moderation log */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingModerationLogs;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/moderation/logs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/moderation/logs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingModerationLogs =>
    typia.random<IRecipeSharingModerationLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
