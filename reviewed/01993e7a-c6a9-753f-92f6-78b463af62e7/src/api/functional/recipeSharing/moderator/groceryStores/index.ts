import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingGroceryStore } from "../../../../structures/IRecipeSharingGroceryStore";

/**
 * Retrieve grocery store information by ID.
 *
 * Retrieve detailed information for a grocery store by its unique identifier
 * (groceryStoreId). This operation returns all relevant details including the
 * store's name, address, phone number, and website URL from the
 * recipe_sharing_grocery_stores table.
 *
 * Access to this endpoint is restricted to authorized moderators to protect
 * sensitive business data. Soft-deleted grocery stores (those with a deleted_at
 * timestamp) are excluded from results.
 *
 * Proper error handling includes responses for non-existent or deleted store
 * IDs. The endpoint supports shopping list cost optimization and ingredient
 * availability checks.
 *
 * This operation is a GET method at /groceryStores/{groceryStoreId} and returns
 * a full grocery store entity matching the ID.
 *
 * @param props.connection
 * @param props.groceryStoreId Unique identifier of the grocery store
 * @path /recipeSharing/moderator/groceryStores/:groceryStoreId
 * @accessor api.functional.recipeSharing.moderator.groceryStores.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the grocery store */
    groceryStoreId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingGroceryStore;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/groceryStores/:groceryStoreId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/groceryStores/${encodeURIComponent(props.groceryStoreId ?? "null")}`;
  export const random = (): IRecipeSharingGroceryStore =>
    typia.random<IRecipeSharingGroceryStore>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groceryStoreId")(() => typia.assert(props.groceryStoreId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update grocery store information by ID.
 *
 * Update details of a grocery store identified by groceryStoreId. Fields such
 * as name, address, phone, and website URL can be modified. This operation is
 * authorized only for moderators.
 *
 * Validation checks ensure the store exists and the updates meet all
 * constraints. Returns the updated grocery store entity fully reflecting
 * current data.
 *
 * This is a PUT operation at /groceryStores/{groceryStoreId} targeting the
 * recipe_sharing_grocery_stores table.
 *
 * @param props.connection
 * @param props.groceryStoreId Unique identifier of the grocery store to update
 * @param props.body Update info of the grocery store
 * @path /recipeSharing/moderator/groceryStores/:groceryStoreId
 * @accessor api.functional.recipeSharing.moderator.groceryStores.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the grocery store to update */
    groceryStoreId: string & tags.Format<"uuid">;

    /** Update info of the grocery store */
    body: IRecipeSharingGroceryStore.IUpdate;
  };
  export type Body = IRecipeSharingGroceryStore.IUpdate;
  export type Response = IRecipeSharingGroceryStore;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/groceryStores/:groceryStoreId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/groceryStores/${encodeURIComponent(props.groceryStoreId ?? "null")}`;
  export const random = (): IRecipeSharingGroceryStore =>
    typia.random<IRecipeSharingGroceryStore>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groceryStoreId")(() => typia.assert(props.groceryStoreId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete grocery store by ID.
 *
 * Delete a grocery store by its unique groceryStoreId. This hard delete is
 * irreversible and removes the grocery store from the system's records.
 *
 * Only moderators have authorization to perform this destructive action.
 * Deletion impacts ingredient pricing and availability tracking.
 *
 * This DELETE /groceryStores/{groceryStoreId} endpoint corresponds to the
 * recipe_sharing_grocery_stores Prisma table and must confirm the store's
 * existence before deletion.
 *
 * Post-deletion, the store data cannot be restored.
 *
 * @param props.connection
 * @param props.groceryStoreId Unique identifier of the grocery store to delete
 * @path /recipeSharing/moderator/groceryStores/:groceryStoreId
 * @accessor api.functional.recipeSharing.moderator.groceryStores.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the grocery store to delete */
    groceryStoreId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/groceryStores/:groceryStoreId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/groceryStores/${encodeURIComponent(props.groceryStoreId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groceryStoreId")(() => typia.assert(props.groceryStoreId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create new grocery store.
 *
 * Create a new grocery store with required name and optional address, phone,
 * and website URL fields. This operation is authorized for moderators and is
 * essential for expanding the list of stores used in ingredient cost tracking.
 *
 * On successful creation, the complete grocery store object including
 * system-generated fields such as id and timestamps is returned. This
 * management action helps maintain up-to-date grocery store data.
 *
 * This endpoint POST /groceryStores operates on the
 * recipe_sharing_grocery_stores table and complies with soft delete
 * conventions.
 *
 * @param props.connection
 * @param props.body Creation info of the grocery store
 * @path /recipeSharing/moderator/groceryStores
 * @accessor api.functional.recipeSharing.moderator.groceryStores.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the grocery store */
    body: IRecipeSharingGroceryStore.ICreate;
  };
  export type Body = IRecipeSharingGroceryStore.ICreate;
  export type Response = IRecipeSharingGroceryStore;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/groceryStores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/groceryStores";
  export const random = (): IRecipeSharingGroceryStore =>
    typia.random<IRecipeSharingGroceryStore>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
