import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingUserTags } from "../../../../structures/IRecipeSharingUserTags";
import { IPageIRecipeSharingUserTags } from "../../../../structures/IPageIRecipeSharingUserTags";

/**
 * Update a user-suggested tag identified by tagId.
 *
 * Update a user-suggested tag for recipes in the system. This operation targets
 * the recipe_sharing_user_tags table, handling user-generated tags pending
 * moderator approval.
 *
 * Users can suggest tags which remain in a pending state until reviewed.
 * Through this API, changes can be made to the suggested name, status (e.g.,
 * pending, approved, rejected), or link the tag to an approved tag record.
 *
 * Security consideration requires only the owning user or moderators with
 * appropriate permissions can update user tags. Updates must adhere to
 * validation rules, ensuring status values correspond to defined moderation
 * states.
 *
 * Related operations include retrieving user tag details and searching user
 * tags with filtering on status.
 *
 * This endpoint uses the HTTP PUT method with the tagId path parameter to
 * specify target user tag.
 *
 * Errors result from invalid tagId, unauthorized access, or bad request
 * payloads.
 *
 * Successful operations return the updated user tag entity details.
 *
 * @param props.connection
 * @param props.tagId Identifier of the user tag to update
 * @param props.body User tag update data including status and suggested name
 * @path /recipeSharing/regularUser/userTags/:tagId
 * @accessor api.functional.recipeSharing.regularUser.userTags.updateUserTag
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateUserTag(
  connection: IConnection,
  props: updateUserTag.Props,
): Promise<updateUserTag.Response> {
  return true === connection.simulate
    ? updateUserTag.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateUserTag.METADATA,
          path: updateUserTag.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateUserTag {
  export type Props = {
    /** Identifier of the user tag to update */
    tagId: string & tags.Format<"uuid">;

    /** User tag update data including status and suggested name */
    body: IRecipeSharingUserTags.IUpdate;
  };
  export type Body = IRecipeSharingUserTags.IUpdate;
  export type Response = IRecipeSharingUserTags;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/userTags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/userTags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IRecipeSharingUserTags =>
    typia.random<IRecipeSharingUserTags>();
  export const simulate = (
    connection: IConnection,
    props: updateUserTag.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateUserTag.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user-suggested tag by tagId.
 *
 * Delete a user tag suggestion permanently from the database.
 *
 * This operation targets the recipe_sharing_user_tags table and performs a hard
 * delete as per schema constraints.
 *
 * Requires path parameter tagId to identify the user tag record.
 *
 * Authorization restricts deletion rights to owning users and moderators.
 *
 * No request or response body is needed.
 *
 * Errors include invalid ID, unauthorized access, or referential integrity
 * constraints preventing delete.
 *
 * Successful deletion returns no content.
 *
 * @param props.connection
 * @param props.tagId Identifier of the user tag to delete
 * @path /recipeSharing/regularUser/userTags/:tagId
 * @accessor api.functional.recipeSharing.regularUser.userTags.eraseUserTag
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseUserTag(
  connection: IConnection,
  props: eraseUserTag.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseUserTag.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseUserTag.METADATA,
          path: eraseUserTag.path(props),
          status: null,
        },
      );
}
export namespace eraseUserTag {
  export type Props = {
    /** Identifier of the user tag to delete */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/userTags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/userTags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseUserTag.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseUserTag.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new user tag suggestion.
 *
 * Create a new user-generated tag suggestion by submitting a payload containing
 * the submitting user ID, optional approved tag ID, suggested tag name, and
 * status representing moderation state. The system stores the suggestion with
 * timestamps. Only authenticated regular users can create tag suggestions. The
 * operation refers strictly to the recipe_sharing_user_tags Prisma DB table.
 *
 * The system enforces uniqueness in tag suggestions and restricts unauthorized
 * tag creation.
 *
 * Related operations include updating and deleting user tag suggestions.
 *
 * Any errors will be returned if validation or authorization fails, or if
 * required fields are missing.
 *
 * @param props.connection
 * @param props.body User tag suggestion creation payload
 * @path /recipeSharing/regularUser/userTags
 * @accessor api.functional.recipeSharing.regularUser.userTags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** User tag suggestion creation payload */
    body: IRecipeSharingUserTags.ICreate;
  };
  export type Body = IRecipeSharingUserTags.ICreate;
  export type Response = IRecipeSharingUserTags;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/userTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/userTags";
  export const random = (): IRecipeSharingUserTags =>
    typia.random<IRecipeSharingUserTags>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list user-suggested tags.
 *
 * Search and retrieve paginated user-suggested tags.
 *
 * This operation returns user tag suggestions in the recipe_sharing_user_tags
 * table matching the given search criteria.
 *
 * Supports filtering by status and other attributes. Includes pagination and
 * sorting.
 *
 * Results are paged and contain summary details for efficient listing.
 *
 * No path parameters.
 *
 * Requires authentication with user role.
 *
 * Response is paginated user tag summaries.
 *
 * @param props.connection
 * @param props.body Search criteria for user tags
 * @path /recipeSharing/regularUser/userTags
 * @accessor api.functional.recipeSharing.regularUser.userTags.searchUserTags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchUserTags(
  connection: IConnection,
  props: searchUserTags.Props,
): Promise<searchUserTags.Response> {
  return true === connection.simulate
    ? searchUserTags.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchUserTags.METADATA,
          path: searchUserTags.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchUserTags {
  export type Props = {
    /** Search criteria for user tags */
    body: IRecipeSharingUserTags.IRequest;
  };
  export type Body = IRecipeSharingUserTags.IRequest;
  export type Response = IPageIRecipeSharingUserTags.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/userTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/userTags";
  export const random = (): IPageIRecipeSharingUserTags.ISummary =>
    typia.random<IPageIRecipeSharingUserTags.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchUserTags.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchUserTags.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed user tag information by ID.
 *
 * Get detailed information of a user-generated tag suggestion by ID.
 *
 * This operation queries the recipe_sharing_user_tags table for the specified
 * tagId.
 *
 * Returns detailed information including user association, tag names,
 * moderation status, and timestamps.
 *
 * Requires authorization to ensure secure access.
 *
 * No request body is needed.
 *
 * Response contains the full user tag entity.
 *
 * @param props.connection
 * @param props.userTagId Unique identifier of the user tag
 * @path /recipeSharing/regularUser/userTags/:userTagId
 * @accessor api.functional.recipeSharing.regularUser.userTags.atUserTag
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atUserTag(
  connection: IConnection,
  props: atUserTag.Props,
): Promise<atUserTag.Response> {
  return true === connection.simulate
    ? atUserTag.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atUserTag.METADATA,
          path: atUserTag.path(props),
          status: null,
        },
      );
}
export namespace atUserTag {
  export type Props = {
    /** Unique identifier of the user tag */
    userTagId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingUserTags;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/userTags/:userTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/userTags/${encodeURIComponent(props.userTagId ?? "null")}`;
  export const random = (): IRecipeSharingUserTags =>
    typia.random<IRecipeSharingUserTags>();
  export const simulate = (
    connection: IConnection,
    props: atUserTag.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atUserTag.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userTagId")(() => typia.assert(props.userTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update user tag suggestion by ID.
 *
 * Update user-generated tag suggestion by ID.
 *
 * Authorized users (owners or moderators) can update fields such as
 * suggestedName and status.
 *
 * Authentication as regularUser is required. Validation ensures the uniqueness
 * and valid status inputs.
 *
 * Update timestamps are refreshed.
 *
 * Returns updated entity.
 *
 * Errors if ID not found or unauthorized.
 *
 * Related to create and delete user tag operations.
 *
 * @param props.connection
 * @param props.userTagId UUID of the user tag suggestion to update
 * @param props.body User tag suggestion update payload
 * @path /recipeSharing/regularUser/userTags/:userTagId
 * @accessor api.functional.recipeSharing.regularUser.userTags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the user tag suggestion to update */
    userTagId: string & tags.Format<"uuid">;

    /** User tag suggestion update payload */
    body: IRecipeSharingUserTags.IUpdate;
  };
  export type Body = IRecipeSharingUserTags.IUpdate;
  export type Response = IRecipeSharingUserTags;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/userTags/:userTagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/userTags/${encodeURIComponent(props.userTagId ?? "null")}`;
  export const random = (): IRecipeSharingUserTags =>
    typia.random<IRecipeSharingUserTags>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userTagId")(() => typia.assert(props.userTagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete user tag suggestion by ID.
 *
 * Delete user-generated tag suggestion by ID.
 *
 * Only owners (regularUsers) or moderators may delete tag suggestions.
 *
 * This operation is a hard delete removing the record from the database.
 *
 * Returns no content.
 *
 * Errors if tag not found or unauthorized.
 *
 * Relates to tag creation and updating.
 *
 * @param props.connection
 * @param props.userTagId UUID of the user tag suggestion to delete
 * @path /recipeSharing/regularUser/userTags/:userTagId
 * @accessor api.functional.recipeSharing.regularUser.userTags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the user tag suggestion to delete */
    userTagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/userTags/:userTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/userTags/${encodeURIComponent(props.userTagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userTagId")(() => typia.assert(props.userTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
