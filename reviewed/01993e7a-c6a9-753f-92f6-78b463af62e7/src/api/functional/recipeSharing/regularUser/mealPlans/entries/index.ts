import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingMealPlanEntry } from "../../../../../structures/IRecipeSharingMealPlanEntry";
import { IPageIRecipeSharingMealPlanEntry } from "../../../../../structures/IPageIRecipeSharingMealPlanEntry";

/**
 * Create a new meal plan entry under the specified meal plan. Requires recipe
 * ID, quantity, planned date, and meal slot.
 *
 * Only the owner of the meal plan (regular or premium user) can create entries.
 *
 * Successfully returns the created meal plan entry with all specified details.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan to add a new entry
 * @param props.body Meal plan entry creation data
 * @path /recipeSharing/regularUser/mealPlans/:mealPlanId/entries
 * @accessor api.functional.recipeSharing.regularUser.mealPlans.entries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the meal plan to add a new entry */
    mealPlanId: string & tags.Format<"uuid">;

    /** Meal plan entry creation data */
    body: IRecipeSharingMealPlanEntry.ICreate;
  };
  export type Body = IRecipeSharingMealPlanEntry.ICreate;
  export type Response = IRecipeSharingMealPlanEntry;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/mealPlans/:mealPlanId/entries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries`;
  export const random = (): IRecipeSharingMealPlanEntry =>
    typia.random<IRecipeSharingMealPlanEntry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List meal plan entries for a meal plan.
 *
 * Retrieve all entries for a specified meal plan identified by mealPlanId.
 * Entries include recipes planned, quantities, scheduled dates, and meal
 * slots.
 *
 * Allows users to view and manage their scheduled meal recipes.
 *
 * Requires authentication and ownership authorization.
 *
 * Errors are returned for invalid or unauthorized requests.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan to retrieve
 *   entries for
 * @path /recipeSharing/regularUser/mealPlans/:mealPlanId/entries
 * @accessor api.functional.recipeSharing.regularUser.mealPlans.entries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the meal plan to retrieve entries for */
    mealPlanId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIRecipeSharingMealPlanEntry;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/mealPlans/:mealPlanId/entries",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries`;
  export const random = (): IPageIRecipeSharingMealPlanEntry =>
    typia.random<IPageIRecipeSharingMealPlanEntry>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a meal plan entry by mealPlanId and mealPlanEntryId.
 *
 * Retrieve detailed information for a meal plan entry specified by mealPlanId
 * and mealPlanEntryId. This operation validates that the requested meal plan
 * entry exists and belongs to the meal plan provided.
 *
 * Security considerations: Only the owner of the meal plan (regular or premium
 * user) may access this detail.
 *
 * The returned data includes all fields such as recipe ID, quantity, planned
 * date, and meal slot.
 *
 * If the entry or meal plan does not exist or access is unauthorized, the
 * operation returns appropriate error responses.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the target meal plan
 * @param props.mealPlanEntryId Unique identifier of the target meal plan entry
 * @path /recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId
 * @accessor api.functional.recipeSharing.regularUser.mealPlans.entries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target meal plan */
    mealPlanId: string & tags.Format<"uuid">;

    /** Unique identifier of the target meal plan entry */
    mealPlanEntryId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingMealPlanEntry;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries/${encodeURIComponent(props.mealPlanEntryId ?? "null")}`;
  export const random = (): IRecipeSharingMealPlanEntry =>
    typia.random<IRecipeSharingMealPlanEntry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
      assert.param("mealPlanEntryId")(() =>
        typia.assert(props.mealPlanEntryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a meal plan entry by mealPlanId and mealPlanEntryId with provided
 * update data.
 *
 * Only the owning user may update entries.
 *
 * Validation ensures the targeted meal plan and entry exist and belong to the
 * user.
 *
 * Returns updated meal plan entry information reflecting the changes.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan
 * @param props.mealPlanEntryId Unique identifier of the meal plan entry
 * @param props.body Meal plan entry update data
 * @path /recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId
 * @accessor api.functional.recipeSharing.regularUser.mealPlans.entries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the meal plan */
    mealPlanId: string & tags.Format<"uuid">;

    /** Unique identifier of the meal plan entry */
    mealPlanEntryId: string & tags.Format<"uuid">;

    /** Meal plan entry update data */
    body: IRecipeSharingMealPlanEntry.IUpdate;
  };
  export type Body = IRecipeSharingMealPlanEntry.IUpdate;
  export type Response = IRecipeSharingMealPlanEntry;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries/${encodeURIComponent(props.mealPlanEntryId ?? "null")}`;
  export const random = (): IRecipeSharingMealPlanEntry =>
    typia.random<IRecipeSharingMealPlanEntry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
      assert.param("mealPlanEntryId")(() =>
        typia.assert(props.mealPlanEntryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a meal plan entry by mealPlanId and mealPlanEntryId.
 *
 * Only the owner of the meal plan can perform this operation.
 *
 * This operation permanently removes the entry from the database.
 *
 * No content is returned on successful deletion.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan
 * @param props.mealPlanEntryId Unique identifier of the meal plan entry
 * @path /recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId
 * @accessor api.functional.recipeSharing.regularUser.mealPlans.entries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the meal plan */
    mealPlanId: string & tags.Format<"uuid">;

    /** Unique identifier of the meal plan entry */
    mealPlanEntryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/mealPlans/:mealPlanId/entries/:mealPlanEntryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries/${encodeURIComponent(props.mealPlanEntryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
      assert.param("mealPlanEntryId")(() =>
        typia.assert(props.mealPlanEntryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
