import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingIngredient } from "../../../../structures/IRecipeSharingIngredient";
import { IPageIRecipeSharingIngredient } from "../../../../structures/IPageIRecipeSharingIngredient";
export * as substitutions from "./substitutions/index";

/**
 * Create a new ingredient in the master catalog.
 *
 * Create a new ingredient record in the master ingredient table.
 *
 * Requires authorized user role to perform ingredient management.
 *
 * Returns the fully detailed created ingredient including UUID and timestamps.
 *
 * @param props.connection
 * @param props.body Creation information for a new ingredient
 * @path /recipeSharing/regularUser/ingredients
 * @accessor api.functional.recipeSharing.regularUser.ingredients.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for a new ingredient */
    body: IRecipeSharingIngredient.ICreate;
  };
  export type Body = IRecipeSharingIngredient.ICreate;
  export type Response = IRecipeSharingIngredient;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/ingredients",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/ingredients";
  export const random = (): IRecipeSharingIngredient =>
    typia.random<IRecipeSharingIngredient>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of ingredients with filtering and pagination.
 *
 * Search and retrieve a paginated list of ingredients. Supports filtering by
 * name, brand, and sorting with search criteria detailed in the request body.
 *
 * Requires authenticated access.
 *
 * Returns paginated ingredient summaries suitable for display in ingredient
 * exploration and substitution lists.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for ingredient
 *   filtering
 * @path /recipeSharing/regularUser/ingredients
 * @accessor api.functional.recipeSharing.regularUser.ingredients.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for ingredient filtering */
    body: IRecipeSharingIngredient.IRequest;
  };
  export type Body = IRecipeSharingIngredient.IRequest;
  export type Response = IPageIRecipeSharingIngredient.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/ingredients",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/ingredients";
  export const random = (): IPageIRecipeSharingIngredient.ISummary =>
    typia.random<IPageIRecipeSharingIngredient.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of an ingredient by ingredientId.
 *
 * Get detailed ingredient information identified by ingredientId.
 *
 * Accessible to authenticated users to facilitate recipe creation and
 * substitutions.
 *
 * Returns full ingredient data including name, brand, and timestamps.
 *
 * @param props.connection
 * @param props.ingredientId Unique identifier of the target ingredient
 * @path /recipeSharing/regularUser/ingredients/:ingredientId
 * @accessor api.functional.recipeSharing.regularUser.ingredients.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target ingredient */
    ingredientId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingIngredient;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/ingredients/:ingredientId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/ingredients/${encodeURIComponent(props.ingredientId ?? "null")}`;
  export const random = (): IRecipeSharingIngredient =>
    typia.random<IRecipeSharingIngredient>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientId")(() => typia.assert(props.ingredientId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of an ingredient in the recipe_sharing_ingredients table.
 *
 * This endpoint allows updating the details of an existing ingredient by
 * specifying the ingredientId path parameter. The request body must include the
 * updated details such as name and optionally brand. The response returns the
 * updated ingredient record.
 *
 * Users performing this action must have appropriate authorization as either
 * regular or premium users.
 *
 * The operation ensures data validation, uniqueness of ingredient names, and
 * audit timestamp modification. Proper error handling returns 400 for invalid
 * input, 403 for unauthorized access, and 404 if the ingredient does not
 * exist.
 *
 * Other relevant operations include retrieving ingredients, managing
 * substitutions, and deletion.
 *
 * This operation performs a hard update without changing soft deletion flags.
 *
 * @param props.connection
 * @param props.ingredientId Unique identifier of the target ingredient
 * @param props.body Updated ingredient details
 * @path /recipeSharing/regularUser/ingredients/:ingredientId
 * @accessor api.functional.recipeSharing.regularUser.ingredients.updateIngredient
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateIngredient(
  connection: IConnection,
  props: updateIngredient.Props,
): Promise<updateIngredient.Response> {
  return true === connection.simulate
    ? updateIngredient.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateIngredient.METADATA,
          path: updateIngredient.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateIngredient {
  export type Props = {
    /** Unique identifier of the target ingredient */
    ingredientId: string & tags.Format<"uuid">;

    /** Updated ingredient details */
    body: IRecipeSharingIngredient.IUpdate;
  };
  export type Body = IRecipeSharingIngredient.IUpdate;
  export type Response = IRecipeSharingIngredient;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/ingredients/:ingredientId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/ingredients/${encodeURIComponent(props.ingredientId ?? "null")}`;
  export const random = (): IRecipeSharingIngredient =>
    typia.random<IRecipeSharingIngredient>();
  export const simulate = (
    connection: IConnection,
    props: updateIngredient.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateIngredient.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientId")(() => typia.assert(props.ingredientId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanent deletion of an ingredient from the recipe_sharing_ingredients
 * table.
 *
 * This endpoint facilitates permanent deletion of an ingredient by
 * ingredientId. The user must have regular or premium authorization.
 *
 * Successful deletion removes the ingredient record from the database
 * completely with no response body.
 *
 * Errors include unauthorized access or non-existent ingredient.
 *
 * Related operations include ingredient retrieval, updates, and substitution
 * management.
 *
 * This is a hard delete ignoring soft delete timestamps.
 *
 * @param props.connection
 * @param props.ingredientId Unique identifier of the target ingredient
 * @path /recipeSharing/regularUser/ingredients/:ingredientId
 * @accessor api.functional.recipeSharing.regularUser.ingredients.eraseIngredient
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseIngredient(
  connection: IConnection,
  props: eraseIngredient.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseIngredient.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseIngredient.METADATA,
          path: eraseIngredient.path(props),
          status: null,
        },
      );
}
export namespace eraseIngredient {
  export type Props = {
    /** Unique identifier of the target ingredient */
    ingredientId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/ingredients/:ingredientId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/ingredients/${encodeURIComponent(props.ingredientId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseIngredient.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseIngredient.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientId")(() => typia.assert(props.ingredientId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
