import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingNutritionFact } from "../../../../structures/IRecipeSharingNutritionFact";

/**
 * Create a new nutrition fact record associated with an ingredient. This POST
 * operation inserts detailed nutritional data such as calories, protein, fat,
 * carbohydrates, fiber, sodium, sugar, vitamins, and minerals into the
 * database. It links the nutrition fact to an existing ingredient via
 * ingredient_id.
 *
 * The system validates that the ingredient exists and that all numeric
 * nutrition values are provided as positive or zero floats where applicable.
 *
 * Only authorized users can create nutrition facts, typically administrative or
 * content management roles.
 *
 * Upon successful creation, the full nutrition fact record is returned.
 *
 * @param props.connection
 * @param props.body Information needed to create a nutrition fact
 * @path /recipeSharing/regularUser/nutritionFacts
 * @accessor api.functional.recipeSharing.regularUser.nutritionFacts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information needed to create a nutrition fact */
    body: IRecipeSharingNutritionFact.ICreate;
  };
  export type Body = IRecipeSharingNutritionFact.ICreate;
  export type Response = IRecipeSharingNutritionFact;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/nutritionFacts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/nutritionFacts";
  export const random = (): IRecipeSharingNutritionFact =>
    typia.random<IRecipeSharingNutritionFact>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a nutrition fact by ID.
 *
 * Update an existing nutrition fact entry by its ID. This PUT operation
 * modifies nutritional data such as calories, protein, carbs, fat, fiber,
 * sodium, sugar, vitamins, and minerals. It requires the nutritionFactId path
 * parameter and a valid update payload reflecting changes.
 *
 * The system performs validation on the updated values and ensures referential
 * integrity with the linked ingredient.
 *
 * Only authorized roles like administrators can update nutrition facts.
 *
 * Returns the updated nutrition fact record after applying changes.
 *
 * @param props.connection
 * @param props.nutritionFactId Unique identifier of the nutrition fact to
 *   update
 * @param props.body Updated nutrition fact data
 * @path /recipeSharing/regularUser/nutritionFacts/:nutritionFactId
 * @accessor api.functional.recipeSharing.regularUser.nutritionFacts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the nutrition fact to update */
    nutritionFactId: string & tags.Format<"uuid">;

    /** Updated nutrition fact data */
    body: IRecipeSharingNutritionFact.IUpdate;
  };
  export type Body = IRecipeSharingNutritionFact.IUpdate;
  export type Response = IRecipeSharingNutritionFact;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/nutritionFacts/:nutritionFactId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/nutritionFacts/${encodeURIComponent(props.nutritionFactId ?? "null")}`;
  export const random = (): IRecipeSharingNutritionFact =>
    typia.random<IRecipeSharingNutritionFact>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nutritionFactId")(() =>
        typia.assert(props.nutritionFactId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a nutrition fact by ID.
 *
 * Delete a nutrition fact record by its unique ID. This operation permanently
 * removes the nutrition fact from the database. Only administrators have
 * permission to delete nutrition facts.
 *
 * The nutritionFactId path parameter is required and must reference an existing
 * nutrition fact record.
 *
 * No response body is returned upon successful deletion.
 *
 * This is a hard delete operation with no recovery after deletion.
 *
 * @param props.connection
 * @param props.nutritionFactId Unique identifier of the nutrition fact to
 *   delete
 * @path /recipeSharing/regularUser/nutritionFacts/:nutritionFactId
 * @accessor api.functional.recipeSharing.regularUser.nutritionFacts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the nutrition fact to delete */
    nutritionFactId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/nutritionFacts/:nutritionFactId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/nutritionFacts/${encodeURIComponent(props.nutritionFactId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nutritionFactId")(() =>
        typia.assert(props.nutritionFactId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
