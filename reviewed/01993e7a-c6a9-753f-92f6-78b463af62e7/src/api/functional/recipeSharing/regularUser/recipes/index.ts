import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRecipes } from "../../../../structures/IRecipeSharingRecipes";
import { IPageIRecipeSharingRecipes } from "../../../../structures/IPageIRecipeSharingRecipes";

/**
 * Create a new recipe.
 *
 * Creates a new recipe entry in the system.
 *
 * Users submit the required recipe details including title, description,
 * ingredients, status, and nutritional information.
 *
 * The operation validates that the title is unique per user and fields meet
 * numeric and formatting constraints.
 *
 * Successful creation returns the full recipe data including assigned IDs and
 * timestamps.
 *
 * This endpoint is essential for user content generation within the platform.
 *
 * @param props.connection
 * @param props.body Creation info of the recipe
 * @path /recipeSharing/regularUser/recipes
 * @accessor api.functional.recipeSharing.regularUser.recipes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the recipe */
    body: IRecipeSharingRecipes.ICreate;
  };
  export type Body = IRecipeSharingRecipes.ICreate;
  export type Response = IRecipeSharingRecipes;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/recipes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/recipes";
  export const random = (): IRecipeSharingRecipes =>
    typia.random<IRecipeSharingRecipes>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of recipes.
 *
 * Fetches a paginated list of recipes stored in the system with support for
 * complex search filters.
 *
 * This operation enables users to search for recipes by various criteria
 * including partial title matches, status filtering (e.g., published, draft),
 * and sorted results.
 *
 * Security considerations ensure that only authenticated users (regular or
 * premium) can access this list. Sensitive recipe information is filtered
 * according to user roles.
 *
 * The operation relates to the recipe_sharing_recipes Prisma DB table,
 * leveraging all searchable fields and supporting pagination for efficient data
 * transmission.
 *
 * Validation rules ensure valid pagination parameters and allowed sorting
 * options.
 *
 * This operation is commonly used prior to fetching detailed recipe information
 * through the detail endpoint.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for recipe
 *   filtering
 * @path /recipeSharing/regularUser/recipes
 * @accessor api.functional.recipeSharing.regularUser.recipes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for recipe filtering */
    body: IRecipeSharingRecipes.IRequest;
  };
  export type Body = IRecipeSharingRecipes.IRequest;
  export type Response = IPageIRecipeSharingRecipes.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/recipes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/recipes";
  export const random = (): IPageIRecipeSharingRecipes.ISummary =>
    typia.random<IPageIRecipeSharingRecipes.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a recipe by ID.
 *
 * Fetches detailed recipe information by recipe ID.
 *
 * Users must provide a valid recipe UUID to retrieve the details.
 * Authentication ensures that only authorized users access this data.
 *
 * This operation interfaces directly with the Prisma DB recipe_sharing_recipes
 * table and returns all fields necessary for comprehensive recipe display.
 *
 * If the recipe does not exist, an appropriate error response is returned.
 *
 * This fetch is typically followed by update or deletion operations if the user
 * owns the recipe.
 *
 * @param props.connection
 * @param props.recipeId Unique identifier of the target recipe
 * @path /recipeSharing/regularUser/recipes/:recipeId
 * @accessor api.functional.recipeSharing.regularUser.recipes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target recipe */
    recipeId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingRecipes;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/recipes/:recipeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/recipes/${encodeURIComponent(props.recipeId ?? "null")}`;
  export const random = (): IRecipeSharingRecipes =>
    typia.random<IRecipeSharingRecipes>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeId")(() => typia.assert(props.recipeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing recipe by ID.
 *
 * Updates an existing recipe by ID.
 *
 * Users provide updated recipe information conforming to the schema.
 *
 * The endpoint enforces that only the creator of the recipe can update it.
 *
 * Validation errors are returned if any field is invalid.
 *
 * Successful update returns the full updated recipe data.
 *
 * This operation maintains content accuracy and user ownership.
 *
 * @param props.connection
 * @param props.recipeId Unique identifier of the target recipe
 * @param props.body Update info of the recipe
 * @path /recipeSharing/regularUser/recipes/:recipeId
 * @accessor api.functional.recipeSharing.regularUser.recipes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target recipe */
    recipeId: string & tags.Format<"uuid">;

    /** Update info of the recipe */
    body: IRecipeSharingRecipes.IUpdate;
  };
  export type Body = IRecipeSharingRecipes.IUpdate;
  export type Response = IRecipeSharingRecipes;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/recipes/:recipeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/recipes/${encodeURIComponent(props.recipeId ?? "null")}`;
  export const random = (): IRecipeSharingRecipes =>
    typia.random<IRecipeSharingRecipes>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeId")(() => typia.assert(props.recipeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a recipe by recipeId.
 *
 * Deletes a specific recipe identified by recipeId from the
 * recipe_sharing_recipes table. This is a hard delete operation that removes
 * the recipe completely from the database with no recovery possible from this
 * endpoint.
 *
 * Access is restricted to authorized users such as the recipe owner.
 *
 * If the recipe does not exist, a 404 error is returned. Other access and
 * server errors are handled per standard HTTP conventions.
 *
 * This operation complements other recipe management APIs including recipe
 * creation, update, and retrieval.
 *
 * No request body is needed for this DELETE operation, and no response body is
 * returned upon successful execution.
 *
 * @param props.connection
 * @param props.recipeId Unique identifier of the recipe to delete
 * @path /recipeSharing/regularUser/recipes/:recipeId
 * @accessor api.functional.recipeSharing.regularUser.recipes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the recipe to delete */
    recipeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/recipes/:recipeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/recipes/${encodeURIComponent(props.recipeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeId")(() => typia.assert(props.recipeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
