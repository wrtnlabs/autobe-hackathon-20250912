import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingCategoryApprovals } from "../../../../structures/IRecipeSharingCategoryApprovals";

/**
 * Submit a new category approval request.
 *
 * Allows a user (typically a regular or premium user) to propose a new category
 * or tag for approval by moderators. The submission includes the category name
 * and related metadata. The system records the submission with a 'pending'
 * approval status and timestamps.
 *
 * Security requirements restrict this action to authenticated users (regular or
 * premium) capable of submitting suggestions.
 *
 * The operation affects the recipe_sharing_category_approvals table, preserving
 * the proposed category name, submitting user ID, and approval metadata.
 *
 * Validation errors occur if the input data is incomplete or invalid;
 * successful submissions return the created record with unique identifiers.
 *
 * @param props.connection
 * @param props.body New category approval submission data
 * @path /recipeSharing/regularUser/categoryApprovals
 * @accessor api.functional.recipeSharing.regularUser.categoryApprovals.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New category approval submission data */
    body: IRecipeSharingCategoryApprovals.ICreate;
  };
  export type Body = IRecipeSharingCategoryApprovals.ICreate;
  export type Response = IRecipeSharingCategoryApprovals;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/categoryApprovals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/categoryApprovals";
  export const random = (): IRecipeSharingCategoryApprovals =>
    typia.random<IRecipeSharingCategoryApprovals>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
