import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingPremiumUser } from "../../../../structures/IRecipeSharingPremiumUser";
import { IPageIRecipeSharingPremiumUser } from "../../../../structures/IPageIRecipeSharingPremiumUser";

/**
 * Search and retrieve a filtered, paginated list of premium users.
 *
 * Retrieve a paginated list of premium users. This operation supports advanced
 * search filtering, sorting, and pagination. It accesses the
 * recipe_sharing_premiumusers table, applying soft deletion filters to exclude
 * deleted users.
 *
 * Only authenticated users with roles 'regularUser' or 'premiumUser' can access
 * this endpoint. The response includes paginated premium user summaries,
 * allowing client-side listing and management of premium subscribers.
 *
 * Typical use cases include administrative UI to manage premium users and
 * analytics dashboards for subscription tracking.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for premium user
 *   filtering
 * @path /recipeSharing/regularUser/premiumUsers
 * @accessor api.functional.recipeSharing.regularUser.premiumUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for premium user filtering */
    body: IRecipeSharingPremiumUser.IRequest;
  };
  export type Body = IRecipeSharingPremiumUser.IRequest;
  export type Response = IPageIRecipeSharingPremiumUser;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/premiumUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/premiumUsers";
  export const random = (): IPageIRecipeSharingPremiumUser =>
    typia.random<IPageIRecipeSharingPremiumUser>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed premium user information by ID.
 *
 * Retrieve detailed information of a premium user by their unique identifier.
 *
 * This operation fetches all standard profile data from the
 * recipe_sharing_premiumusers record and omits sensitive fields such as
 * password_hash.
 *
 * Authorization checks ensure only users with appropriate access can retrieve
 * this information.
 *
 * If the premium user is soft deleted, the operation will treat the record as
 * non-existent.
 *
 * Proper error responses are issued for missing or inaccessible users.
 *
 * @param props.connection
 * @param props.id Target premium user's unique identifier (UUID)
 * @path /recipeSharing/regularUser/premiumUsers/:id
 * @accessor api.functional.recipeSharing.regularUser.premiumUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target premium user's unique identifier (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingPremiumUser;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/premiumUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/premiumUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingPremiumUser =>
    typia.random<IRecipeSharingPremiumUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update premium user details by ID.
 *
 * Update profile details of a premium user.
 *
 * Allows modification of email, username, and premium_since date fields with
 * appropriate validation.
 *
 * This operation is restricted to the user or administrators with specified
 * roles.
 *
 * Password or deletion-related fields cannot be updated through this method.
 *
 * A successful update returns the updated premium user information excluding
 * sensitive credentials.
 *
 * Invalid inputs or permission denials return error responses.
 *
 * @param props.connection
 * @param props.id Target premium user's unique identifier (UUID)
 * @param props.body Profile update data for the premium user
 * @path /recipeSharing/regularUser/premiumUsers/:id
 * @accessor api.functional.recipeSharing.regularUser.premiumUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target premium user's unique identifier (UUID) */
    id: string & tags.Format<"uuid">;

    /** Profile update data for the premium user */
    body: IRecipeSharingPremiumUser.IUpdate;
  };
  export type Body = IRecipeSharingPremiumUser.IUpdate;
  export type Response = IRecipeSharingPremiumUser;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/premiumUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/premiumUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingPremiumUser =>
    typia.random<IRecipeSharingPremiumUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
