import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingFlagQueue } from "../../../../structures/IRecipeSharingFlagQueue";

/**
 * Create a new flag queue entry for review moderation.
 *
 * This API endpoint allows authenticated users to create a new flag queue entry
 * when they flag a review as inappropriate or requiring moderation. The user
 * must provide the ID of the flagged review (optional), the identifier of the
 * user who is reporting (flagging) the review, and the reason for the flag.
 *
 * The operation is intended for use by regular or premium users to report
 * problematic reviews, which then enter the moderation queue managed by
 * moderators.
 *
 * The system records creation timestamps and initializes the flag queue entry
 * with a default status (handled internally).
 *
 * Security considerations include validating the user is authenticated and
 * authorized to flag content.
 *
 * On successful creation, the new flag queue entry is stored permanently and
 * will appear in moderation queues until addressed.
 *
 * Errors include invalid references (nonexistent review IDs or user IDs) or
 * unauthorized attempts.
 *
 * This operation creates entries in the recipe_sharing_flag_queues table in the
 * database.
 *
 * @param props.connection
 * @param props.body Flag queue creation details
 * @path /recipeSharing/regularUser/flagQueues
 * @accessor api.functional.recipeSharing.regularUser.flagQueues.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Flag queue creation details */
    body: IRecipeSharingFlagQueue.ICreate;
  };
  export type Body = IRecipeSharingFlagQueue.ICreate;
  export type Response = IRecipeSharingFlagQueue;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/flagQueues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/flagQueues";
  export const random = (): IRecipeSharingFlagQueue =>
    typia.random<IRecipeSharingFlagQueue>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
