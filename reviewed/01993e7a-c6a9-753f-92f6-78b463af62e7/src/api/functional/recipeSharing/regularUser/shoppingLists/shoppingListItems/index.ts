import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIRecipeSharingShoppingListItem } from "../../../../../structures/IPageIRecipeSharingShoppingListItem";
import { IRecipeSharingShoppingListItem } from "../../../../../structures/IRecipeSharingShoppingListItem";

/**
 * List all items in a shopping list.
 *
 * Retrieve all items within a specific shopping list owned by the authenticated
 * user.
 *
 * Each shopping list item consists of an ingredient, its quantity, measurement
 * unit, and optional user notes.
 *
 * Security controls restrict access to items of shopping lists owned by the
 * user, ensuring privacy.
 *
 * This operation maps to the 'recipe_sharing_shopping_list_items' table in the
 * Prisma schema, which maintains detailed ingredient line items within shopping
 * lists.
 *
 * Returns the full list of detailed shopping list item records.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list whose
 *   items are requested
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.shoppingListItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the shopping list whose items are requested */
    shoppingListId: string;
  };
  export type Response = IPageIRecipeSharingShoppingListItem.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems`;
  export const random = (): IPageIRecipeSharingShoppingListItem.ISummary =>
    typia.random<IPageIRecipeSharingShoppingListItem.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a shopping list item in the specified shopping list.
 *
 * Create a new shopping list item under a specific shopping list by providing
 * ingredient reference, quantity, unit, and optional notes.
 *
 * The operation validates that the referenced shopping list exists and
 * associates the new item with that list. This allows users to manage their
 * grocery items and consolidate ingredient quantities for efficient shopping.
 *
 * Security considerations include ensuring the user owns or has permission to
 * modify the shopping list. The ingredient must be valid and exist in the
 * system.
 *
 * Upon successful creation, the full shopping list item data including
 * timestamps is returned for confirmation and further management.
 *
 * @param props.connection
 * @param props.shoppingListId Identifier of the target shopping list
 * @param props.body Shopping list item creation data
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.shoppingListItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the target shopping list */
    shoppingListId: string & tags.Format<"uuid">;

    /** Shopping list item creation data */
    body: IRecipeSharingShoppingListItem.ICreate;
  };
  export type Body = IRecipeSharingShoppingListItem.ICreate;
  export type Response = IRecipeSharingShoppingListItem;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems`;
  export const random = (): IRecipeSharingShoppingListItem =>
    typia.random<IRecipeSharingShoppingListItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific shopping list item by ID.
 *
 * Retrieve a specific shopping list item by its unique identifier within the
 * specified shopping list.
 *
 * The item details include ingredient reference, quantity, measurement unit,
 * and optional notes.
 *
 * Access is restricted to the shopping list owner or authorized users.
 *
 * This operation leverages the 'recipe_sharing_shopping_list_items' table in
 * the Prisma schema.
 *
 * Returns the detailed shopping list item entity.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list containing
 *   the item
 * @param props.shoppingListItemId Unique identifier of the shopping list item
 *   to retrieve
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.shoppingListItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the shopping list containing the item */
    shoppingListId: string;

    /** Unique identifier of the shopping list item to retrieve */
    shoppingListItemId: string;
  };
  export type Response = IRecipeSharingShoppingListItem;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems/${encodeURIComponent(props.shoppingListItemId ?? "null")}`;
  export const random = (): IRecipeSharingShoppingListItem =>
    typia.random<IRecipeSharingShoppingListItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.param("shoppingListItemId")(() =>
        typia.assert(props.shoppingListItemId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shopping list item in a specified shopping list.
 *
 * Update an existing shopping list item within a shopping list, modifying
 * ingredient, quantity, unit, or notes.
 *
 * This operation validates ownership and correct association with the parent
 * shopping list. Quantity and units changes allow granular control for shopping
 * list management.
 *
 * The response includes the full updated shopping list item record.
 *
 * @param props.connection
 * @param props.shoppingListId Identifier of the target shopping list
 * @param props.shoppingListItemId Identifier of the shopping list item to
 *   update
 * @param props.body Shopping list item update data
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.shoppingListItems.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the target shopping list */
    shoppingListId: string & tags.Format<"uuid">;

    /** Identifier of the shopping list item to update */
    shoppingListItemId: string & tags.Format<"uuid">;

    /** Shopping list item update data */
    body: IRecipeSharingShoppingListItem.IUpdate;
  };
  export type Body = IRecipeSharingShoppingListItem.IUpdate;
  export type Response = IRecipeSharingShoppingListItem;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems/${encodeURIComponent(props.shoppingListItemId ?? "null")}`;
  export const random = (): IRecipeSharingShoppingListItem =>
    typia.random<IRecipeSharingShoppingListItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.param("shoppingListItemId")(() =>
        typia.assert(props.shoppingListItemId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping list item from a specified shopping list.
 *
 * Permanently delete a shopping list item from a specified shopping list.
 *
 * The item is completely removed and cannot be recovered. The operation
 * validates user ownership and permissions before deletion.
 *
 * No content is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.shoppingListId Identifier of the target shopping list
 * @param props.shoppingListItemId Identifier of the shopping list item to
 *   delete
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.shoppingListItems.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the target shopping list */
    shoppingListId: string & tags.Format<"uuid">;

    /** Identifier of the shopping list item to delete */
    shoppingListItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems/${encodeURIComponent(props.shoppingListItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.param("shoppingListItemId")(() =>
        typia.assert(props.shoppingListItemId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
