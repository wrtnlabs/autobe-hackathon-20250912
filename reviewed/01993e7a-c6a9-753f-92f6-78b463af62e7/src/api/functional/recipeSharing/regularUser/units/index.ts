import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingUnits } from "../../../../structures/IRecipeSharingUnits";

/**
 * Create a new measurement unit for ingredient quantity specifications.
 *
 * The operation requires a JSON payload describing the unit code, name, and
 * optional abbreviation.
 *
 * Data validation rejects duplicate codes or names.
 *
 * Successful creation returns the detailed created unit data.
 *
 * This operation corresponds to the recipe_sharing_units table in the Prisma
 * schema.
 *
 * @param props.connection
 * @param props.body Creation info of the measurement unit
 * @path /recipeSharing/regularUser/units
 * @accessor api.functional.recipeSharing.regularUser.units.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the measurement unit */
    body: IRecipeSharingUnits.ICreate;
  };
  export type Body = IRecipeSharingUnits.ICreate;
  export type Response = IRecipeSharingUnits;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/units",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/units";
  export const random = (): IRecipeSharingUnits =>
    typia.random<IRecipeSharingUnits>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update measurement unit by ID.
 *
 * Update an existing measurement unit identified by ID.
 *
 * Allows changing the unit code, name, and abbreviation as needed.
 *
 * Request includes the path parameter for unit identification and the update
 * payload.
 *
 * Response contains the updated unit details reflecting current database state.
 *
 * Authorization requires regularUser role to ensure data integrity.
 *
 * @param props.connection
 * @param props.id Unique identifier of the measurement unit
 * @param props.body Update info of the measurement unit
 * @path /recipeSharing/regularUser/units/:id
 * @accessor api.functional.recipeSharing.regularUser.units.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the measurement unit */
    id: string & tags.Format<"uuid">;

    /** Update info of the measurement unit */
    body: IRecipeSharingUnits.IUpdate;
  };
  export type Body = IRecipeSharingUnits.IUpdate;
  export type Response = IRecipeSharingUnits;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/units/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/units/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingUnits =>
    typia.random<IRecipeSharingUnits>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
