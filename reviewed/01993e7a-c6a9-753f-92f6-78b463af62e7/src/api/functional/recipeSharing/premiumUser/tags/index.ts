import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingTags } from "../../../../structures/IRecipeSharingTags";
import { IPageIRecipeSharingTags } from "../../../../structures/IPageIRecipeSharingTags";

/**
 * Create a new recipe tag with a unique name and optional description.
 *
 * The request must include a JSON body adhering to the
 * IRecipeSharingTags.ICreate schema.
 *
 * Authorization requires the user role.
 *
 * Handling duplicate names or validation failures returning error details is
 * expected.
 *
 * On success, the complete tag record is returned for confirmation and further
 * use.
 *
 * Related operations include listing tags and fetching individual tag details.
 *
 * @param props.connection
 * @param props.body Data needed to create a new recipe tag
 * @path /recipeSharing/premiumUser/tags
 * @accessor api.functional.recipeSharing.premiumUser.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data needed to create a new recipe tag */
    body: IRecipeSharingTags.ICreate;
  };
  export type Body = IRecipeSharingTags.ICreate;
  export type Response = IRecipeSharingTags;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/premiumUser/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/tags";
  export const random = (): IRecipeSharingTags =>
    typia.random<IRecipeSharingTags>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of recipe tags.
 *
 * Retrieve a filtered and paginated list of recipe tags.
 *
 * This endpoint allows searching among tags by name or description using
 * substring matching. Pagination and sorting options enable users to browse the
 * tag collection efficiently.
 *
 * Security considerations ensure only authenticated users can access this
 * endpoint.
 *
 * The response provides paged tag summary information suitable for listing
 * displays.
 *
 * Related endpoints include creating new tags and retrieving specific tag
 * details.
 *
 * Errors may arise from invalid filters or pagination parameters.
 *
 * Consumers should implement retry or fallback logic as needed.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for tag filtering
 * @path /recipeSharing/premiumUser/tags
 * @accessor api.functional.recipeSharing.premiumUser.tags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for tag filtering */
    body: IRecipeSharingTags.IRequest;
  };
  export type Body = IRecipeSharingTags.IRequest;
  export type Response = IPageIRecipeSharingTags.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/premiumUser/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/tags";
  export const random = (): IPageIRecipeSharingTags.ISummary =>
    typia.random<IPageIRecipeSharingTags.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get recipe tag details by ID.
 *
 * Fetch a recipe tag's full detail by its unique ID.
 *
 * This endpoint returns all stored information of a tag including name and
 * description fields.
 *
 * Authentication is required to access detailed tag data.
 *
 * Related endpoints include tag listing and creation.
 *
 * Client applications should gracefully handle cases where the tag ID does not
 * exist.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the recipe tag
 * @path /recipeSharing/premiumUser/tags/:tagId
 * @accessor api.functional.recipeSharing.premiumUser.tags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the recipe tag */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingTags;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IRecipeSharingTags =>
    typia.random<IRecipeSharingTags>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
