import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingMealPlan } from "../../../../structures/IRecipeSharingMealPlan";
export * as entries from "./entries/index";

/**
 * Create a new meal plan for a user in the system. Requires providing the
 * owner's user ID, a unique meal plan name, and an optional description.
 *
 * Validations include ensuring the uniqueness of the meal plan name for the
 * given owner.
 *
 * Upon successful creation, the meal plan is recorded with timestamps for
 * auditing.
 *
 * Only regular and premium authenticated users authorized.
 *
 * Errors occur for duplicate meal plan names per user or invalid inputs.
 *
 * This operation supports user meal scheduling and planning functionality.
 *
 * @param props.connection
 * @param props.body Meal plan creation data including ownerUserId, name and
 *   optional description
 * @path /recipeSharing/premiumUser/mealPlans
 * @accessor api.functional.recipeSharing.premiumUser.mealPlans.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Meal plan creation data including ownerUserId, name and optional
     * description
     */
    body: IRecipeSharingMealPlan.ICreate;
  };
  export type Body = IRecipeSharingMealPlan.ICreate;
  export type Response = IRecipeSharingMealPlan;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/premiumUser/mealPlans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/mealPlans";
  export const random = (): IRecipeSharingMealPlan =>
    typia.random<IRecipeSharingMealPlan>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing meal plan by ID.
 *
 * Update the details of an existing meal plan such as name or description. The
 * mealPlanId path parameter specifies the target meal plan.
 *
 * Request body contains updated information, and only regular or premium users
 * owning the meal plan have authorization to update.
 *
 * The operation verifies the uniqueness of the name per owner and updates
 * timestamps.
 *
 * Error handling covers invalid mealPlanId, unauthorized access, or conflicting
 * meal plan names.
 *
 * Supports dynamic meal plan modification.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan to update
 * @param props.body Updated meal plan data
 * @path /recipeSharing/premiumUser/mealPlans/:mealPlanId
 * @accessor api.functional.recipeSharing.premiumUser.mealPlans.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the meal plan to update */
    mealPlanId: string & tags.Format<"uuid">;

    /** Updated meal plan data */
    body: IRecipeSharingMealPlan.IUpdate;
  };
  export type Body = IRecipeSharingMealPlan.IUpdate;
  export type Response = IRecipeSharingMealPlan;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/premiumUser/mealPlans/:mealPlanId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/premiumUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}`;
  export const random = (): IRecipeSharingMealPlan =>
    typia.random<IRecipeSharingMealPlan>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing meal plan by ID.
 *
 * Permanently delete a meal plan by ID. The mealPlanId path parameter
 * identifies the meal plan to delete.
 *
 * This operation ensures only authorized regular and premium users can delete
 * their meal plans.
 *
 * Deleted records cannot be recovered.
 *
 * Errors return for invalid IDs or unauthorized access.
 *
 * Supports meal plan lifecycle management via removal.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan to delete
 * @path /recipeSharing/premiumUser/mealPlans/:mealPlanId
 * @accessor api.functional.recipeSharing.premiumUser.mealPlans.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the meal plan to delete */
    mealPlanId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/premiumUser/mealPlans/:mealPlanId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
