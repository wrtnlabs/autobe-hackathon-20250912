import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingStoreIngredientPrice } from "../../../../structures/IRecipeSharingStoreIngredientPrice";

/**
 * Create a new store ingredient price record.
 *
 * Create a new store ingredient price entry linking an ingredient with a
 * grocery store, specifying price and availability. This endpoint allows
 * authorized users to input current pricing data to support cost tracking and
 * shopping list features.
 *
 * Input validation includes existence of referenced grocery store and
 * ingredient, positive price values, and valid timestamps for last updated.
 *
 * This operation complements the retrieval and update APIs for store ingredient
 * prices.
 *
 * @param props.connection
 * @param props.body Store ingredient price creation data
 * @path /recipeSharing/premiumUser/storeIngredientPrices
 * @accessor api.functional.recipeSharing.premiumUser.storeIngredientPrices.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Store ingredient price creation data */
    body: IRecipeSharingStoreIngredientPrice.ICreate;
  };
  export type Body = IRecipeSharingStoreIngredientPrice.ICreate;
  export type Response = IRecipeSharingStoreIngredientPrice;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/premiumUser/storeIngredientPrices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/storeIngredientPrices";
  export const random = (): IRecipeSharingStoreIngredientPrice =>
    typia.random<IRecipeSharingStoreIngredientPrice>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update store ingredient price by ID.
 *
 * Update an existing store ingredient price record identified by ID. This
 * allows modification of price, availability, and last updated information to
 * keep data current for shopping and costing features.
 *
 * Input must include the updated fields and the path parameter for the record
 * ID.
 *
 * This operation is related to create and index APIs managing store ingredient
 * prices.
 *
 * Authorization is required for access.
 *
 * @param props.connection
 * @param props.storeIngredientPriceId Identifier of the store ingredient price
 *   record to update
 * @param props.body Store ingredient price update data
 * @path /recipeSharing/premiumUser/storeIngredientPrices/:storeIngredientPriceId
 * @accessor api.functional.recipeSharing.premiumUser.storeIngredientPrices.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the store ingredient price record to update */
    storeIngredientPriceId: string & tags.Format<"uuid">;

    /** Store ingredient price update data */
    body: IRecipeSharingStoreIngredientPrice.IUpdate;
  };
  export type Body = IRecipeSharingStoreIngredientPrice.IUpdate;
  export type Response = IRecipeSharingStoreIngredientPrice;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/premiumUser/storeIngredientPrices/:storeIngredientPriceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/premiumUser/storeIngredientPrices/${encodeURIComponent(props.storeIngredientPriceId ?? "null")}`;
  export const random = (): IRecipeSharingStoreIngredientPrice =>
    typia.random<IRecipeSharingStoreIngredientPrice>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeIngredientPriceId")(() =>
        typia.assert(props.storeIngredientPriceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
