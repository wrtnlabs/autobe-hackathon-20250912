import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingPersonalizedFeed } from "../../../../structures/IRecipeSharingPersonalizedFeed";
import { IPageIRecipeSharingPersonalizedFeed } from "../../../../structures/IPageIRecipeSharingPersonalizedFeed";

/**
 * Search personalized feeds with filtering and pagination.
 *
 * Retrieve personalized feed entries for a user according to the supplied
 * filtering and pagination criteria. The response contains a paginated list of
 * summarized personalized feed entries including recipe and originator
 * information.
 *
 * Supports filtering by user ID, recipe ID, originator user ID, and sorting by
 * creation time.
 *
 * Authorized access is limited to authenticated regular and premium users.
 *
 * This API correlates with the recipe_sharing_personalized_feeds Prisma table
 * that defines the personalized feed entries per user.
 *
 * @param props.connection
 * @param props.body Search parameters for personalized feed filtering and
 *   pagination
 * @path /recipeSharing/premiumUser/personalizedFeeds
 * @accessor api.functional.recipeSharing.premiumUser.personalizedFeeds.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search parameters for personalized feed filtering and pagination */
    body: IRecipeSharingPersonalizedFeed.IRequest;
  };
  export type Body = IRecipeSharingPersonalizedFeed.IRequest;
  export type Response = IPageIRecipeSharingPersonalizedFeed.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/premiumUser/personalizedFeeds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/personalizedFeeds";
  export const random = (): IPageIRecipeSharingPersonalizedFeed.ISummary =>
    typia.random<IPageIRecipeSharingPersonalizedFeed.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed personalized feed entry by ID.
 *
 * Retrieve detailed information about a personalized feed entry by its ID
 * specified in the path parameter.
 *
 * The response contains the full data for the targeted feed entry including
 * user, recipe, and originator user information.
 *
 * Authorization is required for regular and premium users to access their
 * personalized feeds.
 *
 * If the entry does not exist or access is denied, an error will be returned.
 *
 * This operation maps to the recipe_sharing_personalized_feeds Prisma table
 * representing personalized feeds.
 *
 * @param props.connection
 * @param props.personalizedFeedId Target personalized feed entry ID
 * @path /recipeSharing/premiumUser/personalizedFeeds/:personalizedFeedId
 * @accessor api.functional.recipeSharing.premiumUser.personalizedFeeds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target personalized feed entry ID */
    personalizedFeedId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingPersonalizedFeed;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/personalizedFeeds/:personalizedFeedId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/personalizedFeeds/${encodeURIComponent(props.personalizedFeedId ?? "null")}`;
  export const random = (): IRecipeSharingPersonalizedFeed =>
    typia.random<IRecipeSharingPersonalizedFeed>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("personalizedFeedId")(() =>
        typia.assert(props.personalizedFeedId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
