import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingIngredientSubstitution } from "../../../../../structures/IRecipeSharingIngredientSubstitution";
import { IPageIRecipeSharingIngredientSubstitution } from "../../../../../structures/IPageIRecipeSharingIngredientSubstitution";

/**
 * List available substitutions for a specified ingredient.
 *
 * This endpoint retrieves a paginated list of ingredient substitutions for a
 * specific ingredient identified by ingredientId.
 *
 * The request body supports filtering and pagination criteria. The response
 * returns a paginated list of substitution summaries.
 *
 * Only users with regularUser or premiumUser roles may access.
 *
 * Related endpoints provide substitution details, creation, update, and
 * deletion capabilities.
 *
 * Errors include 404 if the ingredient is not found or 403 if the user is
 * unauthorized.
 *
 * @param props.connection
 * @param props.ingredientId Unique identifier of the target ingredient
 * @param props.body Substitution search criteria and pagination parameters
 * @path /recipeSharing/premiumUser/ingredients/:ingredientId/substitutions
 * @accessor api.functional.recipeSharing.premiumUser.ingredients.substitutions.indexIngredientSubstitutions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexIngredientSubstitutions(
  connection: IConnection,
  props: indexIngredientSubstitutions.Props,
): Promise<indexIngredientSubstitutions.Response> {
  return true === connection.simulate
    ? indexIngredientSubstitutions.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexIngredientSubstitutions.METADATA,
          path: indexIngredientSubstitutions.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexIngredientSubstitutions {
  export type Props = {
    /** Unique identifier of the target ingredient */
    ingredientId: string & tags.Format<"uuid">;

    /** Substitution search criteria and pagination parameters */
    body: IRecipeSharingIngredientSubstitution.IRequest;
  };
  export type Body = IRecipeSharingIngredientSubstitution.IRequest;
  export type Response = IPageIRecipeSharingIngredientSubstitution.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/premiumUser/ingredients/:ingredientId/substitutions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/premiumUser/ingredients/${encodeURIComponent(props.ingredientId ?? "null")}/substitutions`;
  export const random =
    (): IPageIRecipeSharingIngredientSubstitution.ISummary =>
      typia.random<IPageIRecipeSharingIngredientSubstitution.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexIngredientSubstitutions.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexIngredientSubstitutions.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientId")(() => typia.assert(props.ingredientId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific ingredient substitution.
 *
 * This endpoint returns detailed information about a specific ingredient
 * substitution.
 *
 * Path parameters ingredientId and substitutionId are required to identify the
 * substitution.
 *
 * No request body is needed.
 *
 * Response contains the full substitution record.
 *
 * Access is limited to users with regularUser or premiumUser roles.
 *
 * Related operations cover substitution listing, creation, update, and
 * deletion.
 *
 * Errors include 404 not found and 403 unauthorized.
 *
 * @param props.connection
 * @param props.ingredientId Unique identifier of the target ingredient
 * @param props.substitutionId Unique identifier of the target substitution
 * @path /recipeSharing/premiumUser/ingredients/:ingredientId/substitutions/:substitutionId
 * @accessor api.functional.recipeSharing.premiumUser.ingredients.substitutions.atIngredientSubstitution
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atIngredientSubstitution(
  connection: IConnection,
  props: atIngredientSubstitution.Props,
): Promise<atIngredientSubstitution.Response> {
  return true === connection.simulate
    ? atIngredientSubstitution.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atIngredientSubstitution.METADATA,
          path: atIngredientSubstitution.path(props),
          status: null,
        },
      );
}
export namespace atIngredientSubstitution {
  export type Props = {
    /** Unique identifier of the target ingredient */
    ingredientId: string & tags.Format<"uuid">;

    /** Unique identifier of the target substitution */
    substitutionId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingIngredientSubstitution;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/ingredients/:ingredientId/substitutions/:substitutionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/ingredients/${encodeURIComponent(props.ingredientId ?? "null")}/substitutions/${encodeURIComponent(props.substitutionId ?? "null")}`;
  export const random = (): IRecipeSharingIngredientSubstitution =>
    typia.random<IRecipeSharingIngredientSubstitution>();
  export const simulate = (
    connection: IConnection,
    props: atIngredientSubstitution.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atIngredientSubstitution.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientId")(() => typia.assert(props.ingredientId));
      assert.param("substitutionId")(() => typia.assert(props.substitutionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
