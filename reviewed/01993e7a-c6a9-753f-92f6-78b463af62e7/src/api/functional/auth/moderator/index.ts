import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingModerator } from "../../../structures/IRecipeSharingModerator";

/**
 * Register a new moderator user in the recipe_sharing_moderators table and
 * issue JWT tokens upon success.
 *
 * This endpoint creates a new moderator user account in the Recipe Sharing
 * Backend system by inserting a new record into the recipe_sharing_moderators
 * table. It accepts the moderator's email, hashed password, and unique
 * username. Upon successful registration, the system issues JWT tokens to
 * enable authenticated session management. The operation ensures unique email
 * and username constraints while enabling soft delete via nullable deleted_at.
 * This registration flow is a crucial starting point for moderators who manage
 * flagged content, approve categories, and enforce platform policies.
 *
 * @param props.connection
 * @param props.body Information needed to create a new moderator user account.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/join
 * @accessor api.functional.auth.moderator.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Information needed to create a new moderator user account. */
    body: IRecipeSharingModerator.ICreate;
  };
  export type Body = IRecipeSharingModerator.ICreate;
  export type Response = IRecipeSharingModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/join";
  export const random = (): IRecipeSharingModerator.IAuthorized =>
    typia.random<IRecipeSharingModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate moderator user and issue JWT tokens upon successful login.
 *
 * This endpoint authenticates a moderator user with email and password
 * credential verification against stored hashed passwords in the
 * recipe_sharing_moderators table. It denies access for deleted accounts (soft
 * deleted via deleted_at). Upon successful login, it issues JWT tokens
 * representing the moderator's authenticated session state. This is a core
 * authentication operation allowing moderators to perform moderation actions
 * securely.
 *
 * @param props.connection
 * @param props.body Moderator login credentials including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/login
 * @accessor api.functional.auth.moderator.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Moderator login credentials including email and password. */
    body: IRecipeSharingModerator.ILogin;
  };
  export type Body = IRecipeSharingModerator.ILogin;
  export type Response = IRecipeSharingModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/login";
  export const random = (): IRecipeSharingModerator.IAuthorized =>
    typia.random<IRecipeSharingModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for the authenticated moderator user.
 *
 * This endpoint allows a moderator user to refresh their authentication tokens
 * using a valid refresh token. It verifies token validity, expiration, and
 * associated user permissions. Upon validation, it generates new JWT tokens for
 * the moderator to maintain an active session without re-login. Token refresh
 * operations are essential for security and usability in managing session
 * lifespan securely.
 *
 * @param props.connection
 * @param props.body Refresh token payload for moderator user.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/refresh
 * @accessor api.functional.auth.moderator.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload for moderator user. */
    body: IRecipeSharingModerator.IRefresh;
  };
  export type Body = IRecipeSharingModerator.IRefresh;
  export type Response = IRecipeSharingModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/refresh";
  export const random = (): IRecipeSharingModerator.IAuthorized =>
    typia.random<IRecipeSharingModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
