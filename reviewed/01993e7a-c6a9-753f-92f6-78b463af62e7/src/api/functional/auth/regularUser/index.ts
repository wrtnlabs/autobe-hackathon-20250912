import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRegularUser } from "../../../structures/IRecipeSharingRegularUser";

/**
 * Register new regularUser in recipe_sharing_regularusers.
 *
 * Register a new regular user account by creating an entry in
 * recipe_sharing_regularusers table. The API accepts email, username, and a
 * hashed password (password_hash). The operation ensures email and username
 * uniqueness, sets creation and update timestamps, and initializes deleted_at
 * as null. Successful registration issues JWT tokens for access and refresh,
 * allowing the user to proceed to login and refresh sessions.
 *
 * The operation is publicly accessible without authentication.
 *
 * References schema fields: email, username, password_hash, created_at,
 * updated_at, deleted_at.
 *
 * This API is the entry point for new users and validates unique credentials
 * before storing sensitive data securely as hashes.
 *
 * @param props.connection
 * @param props.body New user registration details including email, username,
 *   and hashed password
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/join
 * @accessor api.functional.auth.regularUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * New user registration details including email, username, and hashed
     * password
     */
    body: IRecipeSharingRegularUser.ICreate;
  };
  export type Body = IRecipeSharingRegularUser.ICreate;
  export type Response = IRecipeSharingRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/join";
  export const random = (): IRecipeSharingRegularUser.IAuthorized =>
    typia.random<IRecipeSharingRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login existing regularUser in recipe_sharing_regularusers.
 *
 * Log in an existing regularUser by validating email and password hash against
 * recipe_sharing_regularusers records. On successful authentication, return JWT
 * tokens for session management. This operation enforces unique user
 * credentials stored in password_hash and email fields.
 *
 * The endpoint is publicly accessible.
 *
 * Uses schema fields: email, password_hash, username for response.
 *
 * Ensures security best practices for password verification and JWT token
 * issuance.
 *
 * @param props.connection
 * @param props.body User login credentials including email and password hash
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/login
 * @accessor api.functional.auth.regularUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** User login credentials including email and password hash */
    body: IRecipeSharingRegularUser.ILogin;
  };
  export type Body = IRecipeSharingRegularUser.ILogin;
  export type Response = IRecipeSharingRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/login";
  export const random = (): IRecipeSharingRegularUser.IAuthorized =>
    typia.random<IRecipeSharingRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for regularUser in recipe_sharing_regularusers.
 *
 * Refresh JWT tokens for an authenticated regularUser. Requires a valid refresh
 * token to issue a new access token and refresh token pair. This maintains
 * session security and continuity. The operation targets
 * recipe_sharing_regularusers role users.
 *
 * Uses schema constraints and security for token validation.
 *
 * Related authentication lifecycle endpoints include join and login.
 *
 * Refresh token expiration and revocation are managed according to security
 * policies.
 *
 * @param props.connection
 * @param props.body Refresh token details for regularUser token renewal
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/refresh
 * @accessor api.functional.auth.regularUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token details for regularUser token renewal */
    body: IRecipeSharingRegularUser.IRefresh;
  };
  export type Body = IRecipeSharingRegularUser.IRefresh;
  export type Response = IRecipeSharingRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/refresh";
  export const random = (): IRecipeSharingRegularUser.IAuthorized =>
    typia.random<IRecipeSharingRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
