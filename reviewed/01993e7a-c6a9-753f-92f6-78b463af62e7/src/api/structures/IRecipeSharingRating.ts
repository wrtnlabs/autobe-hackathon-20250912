import { tags } from "typia";

/**
 * User rating entity for recipes capturing the user, the rated recipe, the star
 * rating value (1-5), and audit timestamps.
 *
 * This schema defines the core rating information associating users and recipes
 * with their rating feedback.
 *
 * It serves to support user feedback UI, rating averages, and analytics.
 *
 * Sensitive authentication data such as password hashes are excluded.
 *
 * The rating field enforces a valid integer rating from 1 to 5.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingRating = {
  /** Primary Key - Unique identifier of the rating record */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged user's recipe_sharing_regularusers.id or
   * recipe_sharing_premiumusers.id
   */
  recipe_sharing_user_id: string & tags.Format<"uuid">;

  /** Belonged recipe's recipe_sharing_recipes.id */
  recipe_sharing_recipe_id: string & tags.Format<"uuid">;

  /** Star rating from 1 to 5 */
  rating: number & tags.Type<"int32">;

  /** Timestamp when the rating was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the rating was last updated */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRecipeSharingRating {
  /** Request query parameters for filtering and paginating recipe ratings. */
  export type IRequest = {
    /** Page number for pagination */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit number of records per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Search string to filter ratings */
    search?: string | null | undefined;

    /** Sort field name */
    sortBy?: string | null | undefined;

    /** Filter ratings by user ID */
    userId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter ratings by recipe ID */
    recipeId?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Request payload to create a new recipe rating.
   *
   * Includes user id, recipe id, and rating value.
   *
   * Used in endpoints accepting rating creation requests.
   *
   * All fields are required, and rating must be between 1 and 5.
   */
  export type ICreate = {
    /** Belonged user who submits the rating */
    recipe_sharing_user_id: string & tags.Format<"uuid">;

    /** Target recipe to rate */
    recipe_sharing_recipe_id: string & tags.Format<"uuid">;

    /** Star rating from 1 to 5 */
    rating: number & tags.Type<"int32">;
  };

  /**
   * Request payload to update an existing recipe rating.
   *
   * Fields are optional and used to update portions of the rating record.
   *
   * The rating, if provided, must be between 1 and 5.
   */
  export type IUpdate = {
    /** Updated star rating from 1 to 5 */
    rating: number & tags.Type<"int32">;
  };
}
