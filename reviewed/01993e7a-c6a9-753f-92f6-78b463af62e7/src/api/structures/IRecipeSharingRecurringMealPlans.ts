import { tags } from "typia";

/**
 * Represents a user's recurring meal plan with details on name, recurrence,
 * dates, and audit info.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingRecurringMealPlans = {
  /** Unique identifier (UUID) of the recurring meal plan. */
  id: string & tags.Format<"uuid">;

  /** Owner user identifier (UUID). */
  owner_user_id: string & tags.Format<"uuid">;

  /** Name of the recurring meal plan. */
  name: string;

  /** Optional textual description. */
  description?: string | null | undefined;

  /** Recurrence pattern string (e.g., 'weekly', 'biweekly'). */
  recurrence_pattern: string;

  /** Start date of the recurrence. */
  start_date: string & tags.Format<"date-time">;

  /** Optional end date of the recurrence. */
  end_date?: (string & tags.Format<"date-time">) | null | undefined;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Optional soft deletion timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingRecurringMealPlans {
  /**
   * Request schema for searching recurring meal plans with filtering,
   * pagination, and sorting options.
   */
  export type IRequest = {
    /** Page number of the paginated list. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Search keyword to filter recurring meal plans. */
    search?: string | null | undefined;

    /** Sorting parameter for the list. */
    sort?: string | null | undefined;

    /**
     * UUID of the user owning the recurring meal plan. Used to filter by
     * owner.
     */
    owner_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Recurrence schedule pattern such as 'weekly', 'monthly', etc. */
    recurrence_pattern?: string | null | undefined;
  };
}
