import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Premium user entity representing users with enhanced meal planning and cost
 * tracking access.
 *
 * This entity includes identification, authentication, subscription timestamp,
 * and audit fields to support business logic and data integrity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingPremiumUser = {
  /**
   * Primary Key.
   *
   * Unique UUID identifier for the premium user.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Premium user's unique email address for login and communication.
   *
   * Must be unique system-wide.
   */
  email: string;

  /** Hashed password for authentication. Stored securely. */
  password_hash: string;

  /**
   * Unique username for premium user identification.
   *
   * Must be unique system-wide.
   */
  username: string;

  /**
   * Timestamp marking when the user became premium. Used to track
   * subscription duration.
   */
  premium_since: string & tags.Format<"date-time">;

  /** Timestamp when the premium user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the premium user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for soft deletion of premium user account.
   *
   * Nullable date-time string.
   */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IRecipeSharingPremiumUser {
  /**
   * Payload to create a new premium user account.
   *
   * Required fields: email (unique), password_hash, username. Other fields
   * such as timestamps and premium_since are auto-managed and not accepted in
   * input.
   */
  export type ICreate = {
    /** Unique email address for premium user login */
    email: string;

    /** Hashed password (e.g., bcrypt hash) */
    password_hash: string;

    /** Unique username for the premium user */
    username: string;
  };

  /**
   * Authorized response containing user id and JWT tokens. Returned after
   * successful login or token refresh.
   */
  export type IAuthorized = {
    /** ID of the authenticated premium user */
    id: string & tags.Format<"uuid">;

    /**
     * Premium user's unique email address for login and communication.
     *
     * Must be unique system-wide.
     */
    email: string;

    /** Hashed password for authentication. Stored securely. */
    password_hash: string;

    /**
     * Unique username for premium user identification.
     *
     * Must be unique system-wide.
     */
    username: string;

    /**
     * Timestamp marking when the user became premium. Used to track
     * subscription duration.
     */
    premium_since: string & tags.Format<"date-time">;

    /** Timestamp when the premium user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the premium user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp for soft deletion of premium user account.
     *
     * Nullable date-time string.
     */
    deleted_at: (string & tags.Format<"date-time">) | null;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request body for user login. Contains user's email and hashed password. */
  export type ILogin = {
    /** Premium user's email address */
    email: string & tags.Format<"email">;

    /** Hashed password input for authentication */
    password_hash: string;
  };

  /** Refresh token request body to renew JWT access and refresh tokens. */
  export type IRefresh = {
    /** Refresh token string used to obtain new JWT tokens */
    refresh_token: string;
  };

  /** Request parameters for searching and paginating premium users. */
  export type IRequest = {
    /** Premium user email filter for searching users. */
    email?: string | null | undefined;

    /** Premium user username filter for searching users. */
    username?: string | null | undefined;

    /** Filter by premium activation start date. */
    premium_since?: string | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Field name to sort the results. */
    sortBy?: string | null | undefined;

    /** Sorting order: asc or desc. */
    order?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request payload for updating premium user details.
   *
   * Allows partial update of email, username, and premium_since fields.
   */
  export type IUpdate = {
    /** Email address of the premium user. */
    email?: string | null | undefined;

    /** Username of the premium user. */
    username?: string | null | undefined;

    /** Premium subscription activation timestamp. */
    premium_since?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
