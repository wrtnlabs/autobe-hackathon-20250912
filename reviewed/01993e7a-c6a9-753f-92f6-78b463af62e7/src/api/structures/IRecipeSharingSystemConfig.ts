import { tags } from "typia";

/**
 * A system configuration entry representing key-value pairs used for global
 * application settings.
 *
 * This entity is essential for managing runtime configuration parameters and
 * application flags.
 *
 * It comprises a unique identifier, key, value, optional description, and audit
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingSystemConfig = {
  /** Unique identifier (UUID) for the system configuration entry. */
  id: string;

  /** Configuration key uniquely identifying the setting. */
  key: string;

  /** Value associated with the configuration key. */
  value: string;

  /** Optional description providing further context about the configuration. */
  description?: string | null | undefined;

  /** Timestamp when the configuration record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the configuration record was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRecipeSharingSystemConfig {
  /** Request parameters to filter, sort, and paginate system configurations. */
  export type IRequest = {
    /**
     * Filter by configuration key. Allows searching of configuration keys
     * by substring or exact match.
     *
     * This property is optional and can be null if not used in filter.
     */
    key?: string | undefined;

    /**
     * Filter by configuration value. Allows searching of configuration
     * values.
     *
     * This property is optional and can be null if not used in filter.
     */
    value?: string | undefined;

    /**
     * Current page number.
     *
     * This is the pagination page requested. Must be a non-negative
     * integer.
     *
     * Optional and can be null, defaulting to system default.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of records per page.
     *
     * This limits how many records are returned per request.
     *
     * Optional and can be null, defaulting to system default.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sorting criteria.
     *
     * Use string format to define sorting (e.g., 'key asc').
     *
     * Optional and can be null.
     */
    order_by?: string | undefined;
  };

  /**
   * Request body for creating a new system configuration entry.
   *
   * Includes the configuration key, value, and optional descriptive text.
   */
  export type ICreate = {
    /** Unique key used to identify the configuration. */
    key: string;

    /** String value for the configuration. */
    value: string;

    /** An optional description explaining the configuration entry. */
    description?: string | null | undefined;
  };

  /**
   * Request body for updating an existing system configuration entry.
   *
   * All fields are optional and may be null to clear values.
   */
  export type IUpdate = {
    /**
     * Updated key of the configuration entry.
     *
     * Optional and can be null.
     */
    key?: string | null | undefined;

    /**
     * Updated value of the configuration entry.
     *
     * Optional and can be null.
     */
    value?: string | null | undefined;

    /**
     * Updated description of the configuration entry.
     *
     * Optional and can be null.
     */
    description?: string | null | undefined;
  };
}
