import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingUnits } from "../../../providers/patchrecipeSharingUnits";
import { getrecipeSharingUnitsId } from "../../../providers/getrecipeSharingUnitsId";

import { IPageIRecipeSharingUnits } from "../../../api/structures/IPageIRecipeSharingUnits";
import { IRecipeSharingUnits } from "../../../api/structures/IRecipeSharingUnits";

@Controller("/recipeSharing/units")
export class RecipesharingUnitsController {
  /**
   * Search and retrieve a filtered, paginated list of measurement units.
   *
   * Retrieve a filtered and paginated list of measurement units from the
   * system. This operation allows users to search and sort units by code, name,
   * or abbreviation.
   *
   * Units are standardized labels for ingredient measurements, consistent with
   * the recipe sharing backend's requirements for precision in ingredient
   * quantities.
   *
   * Security considerations include read access typically available to
   * authenticated users or public depending on system policy.
   *
   * The response contains unit summary information optimized for listing
   * purposes.
   *
   * This operation interfaces with the recipe_sharing_units table, ensuring
   * accurate reflection of units stored in the database.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for unit filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRecipeSharingUnits.IRequest,
  ): Promise<IPageIRecipeSharingUnits.ISummary> {
    try {
      return await patchrecipeSharingUnits({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific measurement unit by ID.
   *
   * Retrieve detailed information of a measurement unit identified by its
   * unique ID.
   *
   * This operation ensures users obtain complete unit details including code,
   * full name, and abbreviation.
   *
   * Access control for detailed information may require authenticated user
   * roles.
   *
   * The operation corresponds with the recipe_sharing_units table structure in
   * the Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the measurement unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingUnits> {
    try {
      return await getrecipeSharingUnitsId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
