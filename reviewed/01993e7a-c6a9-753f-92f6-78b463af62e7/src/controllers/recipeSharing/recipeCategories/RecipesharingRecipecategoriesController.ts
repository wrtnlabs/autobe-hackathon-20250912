import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingRecipeCategories } from "../../../providers/patchrecipeSharingRecipeCategories";
import { getrecipeSharingRecipeCategoriesRecipeCategoryId } from "../../../providers/getrecipeSharingRecipeCategoriesRecipeCategoryId";

import { IPageIRecipeSharingRecipeCategory } from "../../../api/structures/IPageIRecipeSharingRecipeCategory";
import { IRecipeSharingRecipeCategory } from "../../../api/structures/IRecipeSharingRecipeCategory";

@Controller("/recipeSharing/recipeCategories")
export class RecipesharingRecipecategoriesController {
  /**
   * Search and retrieve a filtered, paginated list of recipe categories.
   *
   * Retrieve a filtered and paginated list of recipe categories stored in the
   * system. This operation enables clients to search and browse categories by
   * filtering on attributes such as category_type and name.
   *
   * Users can receive partial lists or full pages of category summaries. The
   * system indexes category names for efficient partial/match searches.
   *
   * Security permissions ensure this endpoint is publicly accessible as
   * category browsing is a common operation for recipe discovery.
   *
   * The recipe_sharing_recipe_categories table contains recipe category
   * definitions such as cuisine types, diet categories, and difficulty levels
   * with descriptive metadata.
   *
   * This operation is foundational for client UIs to present categorization
   * options for recipes and to enable tagging and filter-based browsing.
   *
   * Robust error handling is in place to handle filtering parameters and ensure
   * that invalid inputs yield clear errors.
   *
   * This API supports integration with tagging and recipe search modules by
   * providing category data.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for recipe category
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: IRecipeSharingRecipeCategory.IRequest,
  ): Promise<IPageIRecipeSharingRecipeCategory.ISummary> {
    try {
      return await patchrecipeSharingRecipeCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific recipe category by ID.
   *
   * Retrieve detailed information about a specific recipe category by its
   * unique identifier.
   *
   * This operation supports client UI components that require full category
   * details for display or editing.
   *
   * Security considerations ensure that category data can be publicly accessed
   * for browsing purposes.
   *
   * The recipe_sharing_recipe_categories table stores categorized recipe
   * information to enable filtering and tagging of recipes. Clients use this
   * endpoint to obtain metadata for specific categories.
   *
   * If the requested category does not exist, the operation returns a not found
   * error.
   *
   * No request body is required for this GET operation.
   *
   * @param connection
   * @param recipeCategoryId Unique identifier of the recipe category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recipeCategoryId")
  public async at(
    @TypedParam("recipeCategoryId")
    recipeCategoryId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRecipeCategory> {
    try {
      return await getrecipeSharingRecipeCategoriesRecipeCategoryId({
        recipeCategoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
