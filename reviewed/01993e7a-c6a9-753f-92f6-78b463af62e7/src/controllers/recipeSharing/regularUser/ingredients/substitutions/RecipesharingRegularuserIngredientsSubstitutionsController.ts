import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingRegularUserIngredientsIngredientIdSubstitutions } from "../../../../../providers/patchrecipeSharingRegularUserIngredientsIngredientIdSubstitutions";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { getrecipeSharingRegularUserIngredientsIngredientIdSubstitutionsSubstitutionId } from "../../../../../providers/getrecipeSharingRegularUserIngredientsIngredientIdSubstitutionsSubstitutionId";

import { IPageIRecipeSharingIngredientSubstitution } from "../../../../../api/structures/IPageIRecipeSharingIngredientSubstitution";
import { IRecipeSharingIngredientSubstitution } from "../../../../../api/structures/IRecipeSharingIngredientSubstitution";

@Controller(
  "/recipeSharing/regularUser/ingredients/:ingredientId/substitutions",
)
export class RecipesharingRegularuserIngredientsSubstitutionsController {
  /**
   * List available substitutions for a specified ingredient.
   *
   * This endpoint retrieves a paginated list of ingredient substitutions for a
   * specific ingredient identified by ingredientId.
   *
   * The request body supports filtering and pagination criteria. The response
   * returns a paginated list of substitution summaries.
   *
   * Only users with regularUser or premiumUser roles may access.
   *
   * Related endpoints provide substitution details, creation, update, and
   * deletion capabilities.
   *
   * Errors include 404 if the ingredient is not found or 403 if the user is
   * unauthorized.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @param body Substitution search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexIngredientSubstitutions(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingIngredientSubstitution.IRequest,
  ): Promise<IPageIRecipeSharingIngredientSubstitution.ISummary> {
    try {
      return await patchrecipeSharingRegularUserIngredientsIngredientIdSubstitutions(
        {
          regularUser,
          ingredientId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific ingredient substitution.
   *
   * This endpoint returns detailed information about a specific ingredient
   * substitution.
   *
   * Path parameters ingredientId and substitutionId are required to identify
   * the substitution.
   *
   * No request body is needed.
   *
   * Response contains the full substitution record.
   *
   * Access is limited to users with regularUser or premiumUser roles.
   *
   * Related operations cover substitution listing, creation, update, and
   * deletion.
   *
   * Errors include 404 not found and 403 unauthorized.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @param substitutionId Unique identifier of the target substitution
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":substitutionId")
  public async atIngredientSubstitution(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedParam("substitutionId")
    substitutionId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingIngredientSubstitution> {
    try {
      return await getrecipeSharingRegularUserIngredientsIngredientIdSubstitutionsSubstitutionId(
        {
          regularUser,
          ingredientId,
          substitutionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
