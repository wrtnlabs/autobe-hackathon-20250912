import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserReviewsReviewIdVotes } from "../../../../../providers/postrecipeSharingRegularUserReviewsReviewIdVotes";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserReviewsReviewIdVotes } from "../../../../../providers/patchrecipeSharingRegularUserReviewsReviewIdVotes";
import { getrecipeSharingRegularUserReviewsReviewIdVotesVoteId } from "../../../../../providers/getrecipeSharingRegularUserReviewsReviewIdVotesVoteId";
import { putrecipeSharingRegularUserReviewsReviewIdVotesVoteId } from "../../../../../providers/putrecipeSharingRegularUserReviewsReviewIdVotesVoteId";
import { deleterecipeSharingRegularUserReviewsReviewIdVotesVoteId } from "../../../../../providers/deleterecipeSharingRegularUserReviewsReviewIdVotesVoteId";

import { IRecipeSharingReviewVote } from "../../../../../api/structures/IRecipeSharingReviewVote";
import { IPageIRecipeSharingReviewVote } from "../../../../../api/structures/IPageIRecipeSharingReviewVote";

@Controller("/recipeSharing/regularUser/reviews/:reviewId/votes")
export class RecipesharingRegularuserReviewsVotesController {
  /**
   * Create a helpfulness vote for a review.
   *
   * This operation allows authorized users to cast a helpfulness vote on a
   * given review specified by reviewId. The vote includes a boolean field
   * indicating the helpfulness.
   *
   * Only one vote per user per review is allowed, but users may update their
   * vote.
   *
   * The request body must include the helpfulness status. Authentication
   * ensures valid user association.
   *
   * Related operations include retrieving existing votes and deleting votes.
   *
   * @param connection
   * @param reviewId Unique identifier of the review to vote on
   * @param body Helpfulness vote data to create
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewVote.ICreate,
  ): Promise<IRecipeSharingReviewVote> {
    try {
      return await postrecipeSharingRegularUserReviewsReviewIdVotes({
        regularUser,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated list of helpfulness votes for a review.
   *
   * This operation fetches a filtered, paginated list of all review helpfulness
   * votes linked to a particular review identified by reviewId. Each vote
   * indicates if a user found the review helpful.
   *
   * Clients can paginate responses and optionally filter votes via the request
   * body parameters.
   *
   * Access to this endpoint is restricted to authorized users to protect review
   * privacy and integrity.
   *
   * This operation enables display of collective feedback on reviews,
   * supporting user decision-making and moderation.
   *
   * Related endpoints include retrieving individual votes and creating or
   * deleting votes.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review
   * @param body Filtering and pagination parameters for review votes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewVote.IRequest,
  ): Promise<IPageIRecipeSharingReviewVote> {
    try {
      return await patchrecipeSharingRegularUserReviewsReviewIdVotes({
        regularUser,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific helpfulness vote on a review.
   *
   * This endpoint returns detailed information about a specific helpfulness
   * vote identified by voteId, associated with a particular review identified
   * by reviewId.
   *
   * The returned vote data includes the helpful status of the vote, user
   * identity, and timestamps.
   *
   * Access is secured and restricted to authenticated users.
   *
   * This operation supports UI functionality for showing vote details and
   * administrative review processes.
   *
   * Related endpoints cover vote creation, listing, and deletion.
   *
   * @param connection
   * @param reviewId Unique identifier of the review
   * @param voteId Unique identifier of the helpfulness vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingReviewVote> {
    try {
      return await getrecipeSharingRegularUserReviewsReviewIdVotesVoteId({
        regularUser,
        reviewId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a helpfulness vote on a review.
   *
   * Update a specific helpfulness vote on a recipe review identified by voteId
   * and associated with reviewId.
   *
   * This operation updates the helpfulness flag indicating whether the vote
   * marks the review as helpful or not. Only the user who made the vote can
   * update it, and the operation requires authentication.
   *
   * This operation interacts directly with the recipe_sharing_review_votes
   * table in the Prisma schema, modifying the 'helpful' boolean field. The user
   * ID and review ID in the path parameters ensure the vote record's correct
   * targeting.
   *
   * Appropriate validations include ensuring the vote belongs to the
   * authenticated user and the vote ID corresponds to an existing record.
   *
   * This update operation returns the updated review vote details.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review
   * @param voteId Unique identifier of the target vote
   * @param body Data to update a review vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async updateVote(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewVote.IUpdate,
  ): Promise<IRecipeSharingReviewVote> {
    try {
      return await putrecipeSharingRegularUserReviewsReviewIdVotesVoteId({
        regularUser,
        reviewId,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a helpfulness vote on a review.
   *
   * Delete a helpfulness vote on a recipe review, identified by voteId and
   * reviewId.
   *
   * This operation permanently removes the vote record from the database,
   * disallowing recovery.
   *
   * Only the owner of the vote, an authenticated user, may perform this
   * deletion.
   *
   * The operation requires reviewId and voteId as path parameters to ensure the
   * correct vote is deleted.
   *
   * No request body or response body is included for this operation.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review
   * @param voteId Unique identifier of the target vote
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async eraseVote(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserReviewsReviewIdVotesVoteId({
        regularUser,
        reviewId,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
