import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserMealPlans } from "../../../../providers/postrecipeSharingRegularUserMealPlans";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserMealPlans } from "../../../../providers/patchrecipeSharingRegularUserMealPlans";
import { getrecipeSharingRegularUserMealPlansMealPlanId } from "../../../../providers/getrecipeSharingRegularUserMealPlansMealPlanId";
import { putrecipeSharingRegularUserMealPlansMealPlanId } from "../../../../providers/putrecipeSharingRegularUserMealPlansMealPlanId";
import { deleterecipeSharingRegularUserMealPlansMealPlanId } from "../../../../providers/deleterecipeSharingRegularUserMealPlansMealPlanId";

import { IRecipeSharingMealPlan } from "../../../../api/structures/IRecipeSharingMealPlan";
import { IPageIRecipeSharingMealPlans } from "../../../../api/structures/IPageIRecipeSharingMealPlans";
import { IRecipeSharingMealPlans } from "../../../../api/structures/IRecipeSharingMealPlans";

@Controller("/recipeSharing/regularUser/mealPlans")
export class RecipesharingRegularuserMealplansController {
  /**
   * Create a new meal plan for a user in the system. Requires providing the
   * owner's user ID, a unique meal plan name, and an optional description.
   *
   * Validations include ensuring the uniqueness of the meal plan name for the
   * given owner.
   *
   * Upon successful creation, the meal plan is recorded with timestamps for
   * auditing.
   *
   * Only regular and premium authenticated users authorized.
   *
   * Errors occur for duplicate meal plan names per user or invalid inputs.
   *
   * This operation supports user meal scheduling and planning functionality.
   *
   * @param connection
   * @param body Meal plan creation data including ownerUserId, name and
   *   optional description
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingMealPlan.ICreate,
  ): Promise<IRecipeSharingMealPlan> {
    try {
      return await postrecipeSharingRegularUserMealPlans({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List user's meal plans with filtering and pagination.
   *
   * Search and retrieve a paginated list of meal plans for the authenticated
   * user. Supports filtering, sorting, and pagination via the request body.
   *
   * Meal plans associate recipes to calendar dates and meal slots and belong to
   * a specific user.
   *
   * The result returns meal plan summaries optimized for list views.
   *
   * Only meal plans owned by the requesting user are returned.
   *
   * Security measures ensure data privacy between users.
   *
   * Typical usage involves client-side page browsing and filtering.
   *
   * Errors return appropriate messages when filtering parameters are invalid.
   *
   * Response includes pagination metadata and the list of meal plans matching
   * the criteria.
   *
   * @param connection
   * @param body Search parameters and pagination options for meal plans
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchMealPlans(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingMealPlans.IRequest,
  ): Promise<IPageIRecipeSharingMealPlans.ISummary> {
    try {
      return await patchrecipeSharingRegularUserMealPlans({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve meal plan details by ID.
   *
   * Get detailed information of a specific meal plan identified by mealPlanId.
   *
   * This includes the meal plan metadata and its associated recipe entries
   * scheduling recipes to specific dates and meal slots.
   *
   * Access is restricted to the owner of the meal plan for privacy.
   *
   * Returns the meal plan with its recipes for client display and interaction.
   *
   * Errors occur if the meal plan does not exist or the user is unauthorized.
   *
   * This operation supports reading with full detail.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the target meal plan
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mealPlanId")
  public async atMealPlan(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingMealPlans> {
    try {
      return await getrecipeSharingRegularUserMealPlansMealPlanId({
        regularUser,
        mealPlanId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing meal plan by ID.
   *
   * Update the details of an existing meal plan such as name or description.
   * The mealPlanId path parameter specifies the target meal plan.
   *
   * Request body contains updated information, and only regular or premium
   * users owning the meal plan have authorization to update.
   *
   * The operation verifies the uniqueness of the name per owner and updates
   * timestamps.
   *
   * Error handling covers invalid mealPlanId, unauthorized access, or
   * conflicting meal plan names.
   *
   * Supports dynamic meal plan modification.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan to update
   * @param body Updated meal plan data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mealPlanId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingMealPlan.IUpdate,
  ): Promise<IRecipeSharingMealPlan> {
    try {
      return await putrecipeSharingRegularUserMealPlansMealPlanId({
        regularUser,
        mealPlanId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing meal plan by ID.
   *
   * Permanently delete a meal plan by ID. The mealPlanId path parameter
   * identifies the meal plan to delete.
   *
   * This operation ensures only authorized regular and premium users can delete
   * their meal plans.
   *
   * Deleted records cannot be recovered.
   *
   * Errors return for invalid IDs or unauthorized access.
   *
   * Supports meal plan lifecycle management via removal.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mealPlanId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserMealPlansMealPlanId({
        regularUser,
        mealPlanId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
