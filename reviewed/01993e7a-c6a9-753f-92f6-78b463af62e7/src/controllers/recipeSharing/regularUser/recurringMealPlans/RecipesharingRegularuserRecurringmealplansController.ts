import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserRecurringMealPlans } from "../../../../providers/postrecipeSharingRegularUserRecurringMealPlans";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserRecurringMealPlans } from "../../../../providers/patchrecipeSharingRegularUserRecurringMealPlans";
import { getrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId } from "../../../../providers/getrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId";
import { putrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId } from "../../../../providers/putrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId";
import { deleterecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId } from "../../../../providers/deleterecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId";

import { IRecipeSharingRecurringMealPlan } from "../../../../api/structures/IRecipeSharingRecurringMealPlan";
import { IPageIRecipeSharingRecurringMealPlans } from "../../../../api/structures/IPageIRecipeSharingRecurringMealPlans";
import { IRecipeSharingRecurringMealPlans } from "../../../../api/structures/IRecipeSharingRecurringMealPlans";

@Controller("/recipeSharing/regularUser/recurringMealPlans")
export class RecipesharingRegularuserRecurringmealplansController {
  /**
   * Create a new recurring meal plan for the authenticated regular user with
   * detailed recurrence scheduling. The input must define the plan's name,
   * recurrence pattern (e.g., weekly), start date, and optional end date.
   *
   * The system validates uniqueness of the plan name per user and logical
   * consistency of dates.
   *
   * Successful creation results in returning the stored meal plan record,
   * enabling immediate further use in scheduling interfaces.
   *
   * Access control ensures only authenticated regular users can create plans,
   * and no duplicate names exist.
   *
   * @param connection
   * @param body Recurring meal plan creation details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRecurringMealPlan.ICreate,
  ): Promise<IRecipeSharingRecurringMealPlan> {
    try {
      return await postrecipeSharingRegularUserRecurringMealPlans({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a list of user's recurring meal plans.
   *
   * Retrieve a filtered and paginated list of recurring meal plans belonging to
   * the authenticated regular user. This endpoint enables users to view their
   * recurring meal schedules, including patterns such as weekly or monthly
   * cycles, along with start and optional end dates.
   *
   * Security considerations restrict access to authenticated regular users
   * only, ensuring that users can access only their own recurring meal plans.
   * The request supports various filters such as by name, recurrence pattern,
   * and active periods.
   *
   * This operation directly maps to the recipe_sharing_recurring_meal_plans
   * table in the Prisma schema, incorporating all relevant columns and their
   * relationships. Soft deletion is respected via the deleted_at column, so
   * only active plans are typically shown.
   *
   * Usage scenarios include viewing existing recurring plans for editing,
   * monitoring upcoming meal cycles, and managing subscription-based meal
   * scheduling features.
   *
   * Error handling includes returning appropriate messages for unauthorized
   * access and invalid query parameters. Pagination ensures that response sizes
   * remain manageable.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for recurring meal
   *   plans
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRecurringMealPlans.IRequest,
  ): Promise<IPageIRecipeSharingRecurringMealPlans> {
    try {
      return await patchrecipeSharingRegularUserRecurringMealPlans({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed recurring meal plan information.
   *
   * Fetch comprehensive details about a single recurring meal plan identified
   * by its unique ID. This includes information about its recurrence pattern
   * (e.g., weekly, monthly), start date, optional end date, and descriptive
   * metadata.
   *
   * Access is restricted to the plan owner or authorized regular users. The
   * plan must exist and not be deleted.
   *
   * This operation supports interfaces where regular users view or modify
   * existing recurring meal plans, facilitating meal scheduling and planning.
   *
   * Error scenarios handled include not found errors for invalid or deleted IDs
   * and access violations preventing unauthorized viewing.
   *
   * @param connection
   * @param recurringMealPlanId Unique identifier of the target recurring meal
   *   plan
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recurringMealPlanId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recurringMealPlanId")
    recurringMealPlanId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRecurringMealPlan> {
    try {
      return await getrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId(
        {
          regularUser,
          recurringMealPlanId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing recurring meal plan by ID with new scheduling details.
   * Allows changing the plan's name, recurrence pattern, start and optional end
   * dates, and description.
   *
   * The operation validates ownership and verifies the plan exists and is
   * active.
   *
   * Successful operations return the updated plan for immediate client
   * synchronization.
   *
   * Access controls prevent updates by unauthorized regular users or to deleted
   * plans.
   *
   * Errors return suitable HTTP status codes and messages for not found,
   * unauthorized, and validation errors.
   *
   * @param connection
   * @param recurringMealPlanId Unique identifier of the target recurring meal
   *   plan
   * @param body Recurring meal plan update details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":recurringMealPlanId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recurringMealPlanId")
    recurringMealPlanId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRecurringMealPlan.IUpdate,
  ): Promise<IRecipeSharingRecurringMealPlan> {
    try {
      return await putrecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId(
        {
          regularUser,
          recurringMealPlanId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a recurring meal plan.
   *
   * Permanently deletes a recurring meal plan from the system identified by the
   * recurringMealPlanId path parameter.
   *
   * This action removes the record from the database entirely and cannot be
   * undone.
   *
   * Access is restricted to authenticated users with the "regularUser" role.
   * The implementation should verify the userâ€™s permission to delete the
   * specific meal plan.
   *
   * The recurring meal plan data includes ownership, recurrence pattern, time
   * boundaries, and audit timestamps as defined in the
   * recipe_sharing_recurring_meal_plans table schema.
   *
   * @param connection
   * @param recurringMealPlanId Unique identifier of the recurring meal plan to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":recurringMealPlanId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recurringMealPlanId")
    recurringMealPlanId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserRecurringMealPlansRecurringMealPlanId(
        {
          regularUser,
          recurringMealPlanId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
