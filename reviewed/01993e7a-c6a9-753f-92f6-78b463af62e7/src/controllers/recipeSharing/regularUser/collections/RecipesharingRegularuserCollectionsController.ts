import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getrecipeSharingRegularUserCollectionsCollectionId } from "../../../../providers/getrecipeSharingRegularUserCollectionsCollectionId";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { putrecipeSharingRegularUserCollectionsCollectionId } from "../../../../providers/putrecipeSharingRegularUserCollectionsCollectionId";
import { deleterecipeSharingRegularUserCollectionsCollectionId } from "../../../../providers/deleterecipeSharingRegularUserCollectionsCollectionId";
import { postrecipeSharingRegularUserCollections } from "../../../../providers/postrecipeSharingRegularUserCollections";
import { patchrecipeSharingRegularUserCollections } from "../../../../providers/patchrecipeSharingRegularUserCollections";

import { IRecipeSharingCollections } from "../../../../api/structures/IRecipeSharingCollections";
import { IPageIRecipeSharingCollections } from "../../../../api/structures/IPageIRecipeSharingCollections";

@Controller("/recipeSharing/regularUser/collections")
export class RecipesharingRegularuserCollectionsController {
  /**
   * Retrieve detailed recipe collection information by collectionId.
   *
   * Retrieve detailed information for a recipe collection using its unique
   * identifier (collectionId). The collection belongs to a user and includes
   * attributes such as name, optional description, creation and update
   * timestamps, and soft deletion timestamp if applicable.
   *
   * Security considerations require that only authenticated users with proper
   * permissions may access this endpoint to protect user data privacy and
   * integrity.
   *
   * The operation relates directly to the recipe_sharing_collections table,
   * which enforces unique collection names per user and supports soft deletion
   * via the deleted_at field.
   *
   * Validation ensures that collectionId is a valid UUID and the collection
   * exists. Proper error handling is expected for non-existent or unauthorized
   * access attempts.
   *
   * This GET endpoint complements collection management APIs, facilitating read
   * access to individual collections.
   *
   * @param connection
   * @param collectionId Unique identifier of the target recipe collection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":collectionId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("collectionId")
    collectionId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingCollections> {
    try {
      return await getrecipeSharingRegularUserCollectionsCollectionId({
        regularUser,
        collectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing collection by ID.
   *
   * Update an existing user collection in the Recipe Sharing backend system.
   * The collection must be identified by the collectionId parameter in the
   * path.
   *
   * This operation allows changing the collection's name and description
   * fields. It verifies the userâ€™s ownership of the collection and ensures the
   * collection is not soft-deleted.
   *
   * The Recipe Sharing system stores collections in the
   * recipe_sharing_collections table, which contains fields such as
   * owner_user_id (linking to the user), name, and optional description. The
   * created_at and updated_at timestamps are managed internally by the system.
   *
   * Authorization is required to ensure only the owner can update their
   * collection.
   *
   * Errors occur if the collection does not exist, is soft-deleted, or the
   * requesting user lacks permission.
   *
   * Successful updates return the updated collection information.
   *
   * @param connection
   * @param collectionId Unique identifier of the target collection
   * @param body Update data for the collection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":collectionId")
  public async updateCollection(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("collectionId")
    collectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingCollections.IUpdate,
  ): Promise<IRecipeSharingCollections> {
    try {
      return await putrecipeSharingRegularUserCollectionsCollectionId({
        regularUser,
        collectionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete user collection permanently.
   *
   * Permanently remove a user collection by its unique identifier. This
   * operation performs a hard delete on the collection record.
   *
   * Ownership verification is required to ensure only the owner user can delete
   * their collection.
   *
   * The system deletes the collection record and all associated references.
   *
   * This operation does not return a response body.
   *
   * Use with caution as deleted records cannot be recovered.
   *
   * @param connection
   * @param collectionId Unique identifier of the target collection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":collectionId")
  public async eraseCollection(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("collectionId")
    collectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserCollectionsCollectionId({
        regularUser,
        collectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new recipe collection for user.
   *
   * Create a new recipe collection for the authenticated user. The creation
   * request body must provide the collection name, and optionally a
   * description.
   *
   * Upon successful insertion, the system returns complete details of the
   * created collection, including timestamps and ownership identifiers.
   *
   * This POST operation enables users to organize recipes via collections to
   * enhance personalization and meal planning.
   *
   * The recipe_sharing_collections table supports soft deletion and enforces
   * unique collection names for each owner.
   *
   * Security ensures that only authenticated regular users may create
   * collections tied to their user ID.
   *
   * @param connection
   * @param body Payload data for creating a new recipe collection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingCollections.ICreate,
  ): Promise<IRecipeSharingCollections> {
    try {
      return await postrecipeSharingRegularUserCollections({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of user recipe collections.
   *
   * Retrieve a paginated list of recipe collections with filtering, searching,
   * and sorting capabilities. Users may provide search criteria such as
   * collection name, creation date ranges, and other filters.
   *
   * Results include paginated collection summaries suitable for UI display.
   * Pagination supports page number, page size, and sorting.
   *
   * Security requires authenticated user access, ensuring only collections
   * belonging to the user are returned.
   *
   * This PATCH operation is crucial for building user interfaces that allow
   * efficient management of multiple recipe collections.
   *
   * The underlying database entity is recipe_sharing_collections, with
   * uniqueness constraints on collection names per user and support for soft
   * deletes.
   *
   * @param connection
   * @param body Request body containing search filters and pagination
   *   parameters for collections
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingCollections.IRequest,
  ): Promise<IPageIRecipeSharingCollections.ISummary> {
    try {
      return await patchrecipeSharingRegularUserCollections({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
