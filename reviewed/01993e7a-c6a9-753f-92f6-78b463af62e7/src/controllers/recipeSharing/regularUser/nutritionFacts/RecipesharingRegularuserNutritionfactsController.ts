import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserNutritionFacts } from "../../../../providers/postrecipeSharingRegularUserNutritionFacts";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { putrecipeSharingRegularUserNutritionFactsNutritionFactId } from "../../../../providers/putrecipeSharingRegularUserNutritionFactsNutritionFactId";
import { deleterecipeSharingRegularUserNutritionFactsNutritionFactId } from "../../../../providers/deleterecipeSharingRegularUserNutritionFactsNutritionFactId";

import { IRecipeSharingNutritionFact } from "../../../../api/structures/IRecipeSharingNutritionFact";

@Controller("/recipeSharing/regularUser/nutritionFacts")
export class RecipesharingRegularuserNutritionfactsController {
  /**
   * Create a new nutrition fact record associated with an ingredient. This POST
   * operation inserts detailed nutritional data such as calories, protein, fat,
   * carbohydrates, fiber, sodium, sugar, vitamins, and minerals into the
   * database. It links the nutrition fact to an existing ingredient via
   * ingredient_id.
   *
   * The system validates that the ingredient exists and that all numeric
   * nutrition values are provided as positive or zero floats where applicable.
   *
   * Only authorized users can create nutrition facts, typically administrative
   * or content management roles.
   *
   * Upon successful creation, the full nutrition fact record is returned.
   *
   * @param connection
   * @param body Information needed to create a nutrition fact
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingNutritionFact.ICreate,
  ): Promise<IRecipeSharingNutritionFact> {
    try {
      return await postrecipeSharingRegularUserNutritionFacts({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a nutrition fact by ID.
   *
   * Update an existing nutrition fact entry by its ID. This PUT operation
   * modifies nutritional data such as calories, protein, carbs, fat, fiber,
   * sodium, sugar, vitamins, and minerals. It requires the nutritionFactId path
   * parameter and a valid update payload reflecting changes.
   *
   * The system performs validation on the updated values and ensures
   * referential integrity with the linked ingredient.
   *
   * Only authorized roles like administrators can update nutrition facts.
   *
   * Returns the updated nutrition fact record after applying changes.
   *
   * @param connection
   * @param nutritionFactId Unique identifier of the nutrition fact to update
   * @param body Updated nutrition fact data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":nutritionFactId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("nutritionFactId")
    nutritionFactId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingNutritionFact.IUpdate,
  ): Promise<IRecipeSharingNutritionFact> {
    try {
      return await putrecipeSharingRegularUserNutritionFactsNutritionFactId({
        regularUser,
        nutritionFactId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a nutrition fact by ID.
   *
   * Delete a nutrition fact record by its unique ID. This operation permanently
   * removes the nutrition fact from the database. Only administrators have
   * permission to delete nutrition facts.
   *
   * The nutritionFactId path parameter is required and must reference an
   * existing nutrition fact record.
   *
   * No response body is returned upon successful deletion.
   *
   * This is a hard delete operation with no recovery after deletion.
   *
   * @param connection
   * @param nutritionFactId Unique identifier of the nutrition fact to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":nutritionFactId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("nutritionFactId")
    nutritionFactId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserNutritionFactsNutritionFactId({
        regularUser,
        nutritionFactId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
