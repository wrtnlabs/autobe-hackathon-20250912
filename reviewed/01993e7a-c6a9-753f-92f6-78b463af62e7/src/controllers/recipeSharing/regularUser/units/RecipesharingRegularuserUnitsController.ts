import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserUnits } from "../../../../providers/postrecipeSharingRegularUserUnits";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { putrecipeSharingRegularUserUnitsId } from "../../../../providers/putrecipeSharingRegularUserUnitsId";

import { IRecipeSharingUnits } from "../../../../api/structures/IRecipeSharingUnits";

@Controller("/recipeSharing/regularUser/units")
export class RecipesharingRegularuserUnitsController {
  /**
   * Create a new measurement unit for ingredient quantity specifications.
   *
   * The operation requires a JSON payload describing the unit code, name, and
   * optional abbreviation.
   *
   * Data validation rejects duplicate codes or names.
   *
   * Successful creation returns the detailed created unit data.
   *
   * This operation corresponds to the recipe_sharing_units table in the Prisma
   * schema.
   *
   * @param connection
   * @param body Creation info of the measurement unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingUnits.ICreate,
  ): Promise<IRecipeSharingUnits> {
    try {
      return await postrecipeSharingRegularUserUnits({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update measurement unit by ID.
   *
   * Update an existing measurement unit identified by ID.
   *
   * Allows changing the unit code, name, and abbreviation as needed.
   *
   * Request includes the path parameter for unit identification and the update
   * payload.
   *
   * Response contains the updated unit details reflecting current database
   * state.
   *
   * Authorization requires regularUser role to ensure data integrity.
   *
   * @param connection
   * @param id Unique identifier of the measurement unit
   * @param body Update info of the measurement unit
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingUnits.IUpdate,
  ): Promise<IRecipeSharingUnits> {
    try {
      return await putrecipeSharingRegularUserUnitsId({
        regularUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
