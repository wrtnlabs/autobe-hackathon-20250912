import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putrecipeSharingRegularUserUserTagsTagId } from "../../../../providers/putrecipeSharingRegularUserUserTagsTagId";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { deleterecipeSharingRegularUserUserTagsTagId } from "../../../../providers/deleterecipeSharingRegularUserUserTagsTagId";
import { postrecipeSharingRegularUserUserTags } from "../../../../providers/postrecipeSharingRegularUserUserTags";
import { patchrecipeSharingRegularUserUserTags } from "../../../../providers/patchrecipeSharingRegularUserUserTags";
import { getrecipeSharingRegularUserUserTagsUserTagId } from "../../../../providers/getrecipeSharingRegularUserUserTagsUserTagId";
import { putrecipeSharingRegularUserUserTagsUserTagId } from "../../../../providers/putrecipeSharingRegularUserUserTagsUserTagId";
import { deleterecipeSharingRegularUserUserTagsUserTagId } from "../../../../providers/deleterecipeSharingRegularUserUserTagsUserTagId";

import { IRecipeSharingUserTags } from "../../../../api/structures/IRecipeSharingUserTags";
import { IPageIRecipeSharingUserTags } from "../../../../api/structures/IPageIRecipeSharingUserTags";

@Controller("/recipeSharing/regularUser/userTags")
export class RecipesharingRegularuserUsertagsController {
  /**
   * Update a user-suggested tag identified by tagId.
   *
   * Update a user-suggested tag for recipes in the system. This operation
   * targets the recipe_sharing_user_tags table, handling user-generated tags
   * pending moderator approval.
   *
   * Users can suggest tags which remain in a pending state until reviewed.
   * Through this API, changes can be made to the suggested name, status (e.g.,
   * pending, approved, rejected), or link the tag to an approved tag record.
   *
   * Security consideration requires only the owning user or moderators with
   * appropriate permissions can update user tags. Updates must adhere to
   * validation rules, ensuring status values correspond to defined moderation
   * states.
   *
   * Related operations include retrieving user tag details and searching user
   * tags with filtering on status.
   *
   * This endpoint uses the HTTP PUT method with the tagId path parameter to
   * specify target user tag.
   *
   * Errors result from invalid tagId, unauthorized access, or bad request
   * payloads.
   *
   * Successful operations return the updated user tag entity details.
   *
   * @param connection
   * @param tagId Identifier of the user tag to update
   * @param body User tag update data including status and suggested name
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async updateUserTag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingUserTags.IUpdate,
  ): Promise<IRecipeSharingUserTags> {
    try {
      return await putrecipeSharingRegularUserUserTagsTagId({
        regularUser,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user-suggested tag by tagId.
   *
   * Delete a user tag suggestion permanently from the database.
   *
   * This operation targets the recipe_sharing_user_tags table and performs a
   * hard delete as per schema constraints.
   *
   * Requires path parameter tagId to identify the user tag record.
   *
   * Authorization restricts deletion rights to owning users and moderators.
   *
   * No request or response body is needed.
   *
   * Errors include invalid ID, unauthorized access, or referential integrity
   * constraints preventing delete.
   *
   * Successful deletion returns no content.
   *
   * @param connection
   * @param tagId Identifier of the user tag to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async eraseUserTag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserUserTagsTagId({
        regularUser,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new user tag suggestion.
   *
   * Create a new user-generated tag suggestion by submitting a payload
   * containing the submitting user ID, optional approved tag ID, suggested tag
   * name, and status representing moderation state. The system stores the
   * suggestion with timestamps. Only authenticated regular users can create tag
   * suggestions. The operation refers strictly to the recipe_sharing_user_tags
   * Prisma DB table.
   *
   * The system enforces uniqueness in tag suggestions and restricts
   * unauthorized tag creation.
   *
   * Related operations include updating and deleting user tag suggestions.
   *
   * Any errors will be returned if validation or authorization fails, or if
   * required fields are missing.
   *
   * @param connection
   * @param body User tag suggestion creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingUserTags.ICreate,
  ): Promise<IRecipeSharingUserTags> {
    try {
      return await postrecipeSharingRegularUserUserTags({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list user-suggested tags.
   *
   * Search and retrieve paginated user-suggested tags.
   *
   * This operation returns user tag suggestions in the recipe_sharing_user_tags
   * table matching the given search criteria.
   *
   * Supports filtering by status and other attributes. Includes pagination and
   * sorting.
   *
   * Results are paged and contain summary details for efficient listing.
   *
   * No path parameters.
   *
   * Requires authentication with user role.
   *
   * Response is paginated user tag summaries.
   *
   * @param connection
   * @param body Search criteria for user tags
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchUserTags(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingUserTags.IRequest,
  ): Promise<IPageIRecipeSharingUserTags.ISummary> {
    try {
      return await patchrecipeSharingRegularUserUserTags({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed user tag information by ID.
   *
   * Get detailed information of a user-generated tag suggestion by ID.
   *
   * This operation queries the recipe_sharing_user_tags table for the specified
   * tagId.
   *
   * Returns detailed information including user association, tag names,
   * moderation status, and timestamps.
   *
   * Requires authorization to ensure secure access.
   *
   * No request body is needed.
   *
   * Response contains the full user tag entity.
   *
   * @param connection
   * @param userTagId Unique identifier of the user tag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userTagId")
  public async atUserTag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("userTagId")
    userTagId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingUserTags> {
    try {
      return await getrecipeSharingRegularUserUserTagsUserTagId({
        regularUser,
        userTagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update user tag suggestion by ID.
   *
   * Update user-generated tag suggestion by ID.
   *
   * Authorized users (owners or moderators) can update fields such as
   * suggestedName and status.
   *
   * Authentication as regularUser is required. Validation ensures the
   * uniqueness and valid status inputs.
   *
   * Update timestamps are refreshed.
   *
   * Returns updated entity.
   *
   * Errors if ID not found or unauthorized.
   *
   * Related to create and delete user tag operations.
   *
   * @param connection
   * @param userTagId UUID of the user tag suggestion to update
   * @param body User tag suggestion update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userTagId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("userTagId")
    userTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingUserTags.IUpdate,
  ): Promise<IRecipeSharingUserTags> {
    try {
      return await putrecipeSharingRegularUserUserTagsUserTagId({
        regularUser,
        userTagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete user tag suggestion by ID.
   *
   * Delete user-generated tag suggestion by ID.
   *
   * Only owners (regularUsers) or moderators may delete tag suggestions.
   *
   * This operation is a hard delete removing the record from the database.
   *
   * Returns no content.
   *
   * Errors if tag not found or unauthorized.
   *
   * Relates to tag creation and updating.
   *
   * @param connection
   * @param userTagId UUID of the user tag suggestion to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userTagId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("userTagId")
    userTagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserUserTagsUserTagId({
        regularUser,
        userTagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
