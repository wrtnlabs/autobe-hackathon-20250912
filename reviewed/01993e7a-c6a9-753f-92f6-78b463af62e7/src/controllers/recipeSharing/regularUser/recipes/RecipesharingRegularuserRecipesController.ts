import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserRecipes } from "../../../../providers/postrecipeSharingRegularUserRecipes";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserRecipes } from "../../../../providers/patchrecipeSharingRegularUserRecipes";
import { getrecipeSharingRegularUserRecipesRecipeId } from "../../../../providers/getrecipeSharingRegularUserRecipesRecipeId";
import { putrecipeSharingRegularUserRecipesRecipeId } from "../../../../providers/putrecipeSharingRegularUserRecipesRecipeId";
import { deleterecipeSharingRegularUserRecipesRecipeId } from "../../../../providers/deleterecipeSharingRegularUserRecipesRecipeId";

import { IRecipeSharingRecipes } from "../../../../api/structures/IRecipeSharingRecipes";
import { IPageIRecipeSharingRecipes } from "../../../../api/structures/IPageIRecipeSharingRecipes";

@Controller("/recipeSharing/regularUser/recipes")
export class RecipesharingRegularuserRecipesController {
  /**
   * Create a new recipe.
   *
   * Creates a new recipe entry in the system.
   *
   * Users submit the required recipe details including title, description,
   * ingredients, status, and nutritional information.
   *
   * The operation validates that the title is unique per user and fields meet
   * numeric and formatting constraints.
   *
   * Successful creation returns the full recipe data including assigned IDs and
   * timestamps.
   *
   * This endpoint is essential for user content generation within the platform.
   *
   * @param connection
   * @param body Creation info of the recipe
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRecipes.ICreate,
  ): Promise<IRecipeSharingRecipes> {
    try {
      return await postrecipeSharingRegularUserRecipes({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of recipes.
   *
   * Fetches a paginated list of recipes stored in the system with support for
   * complex search filters.
   *
   * This operation enables users to search for recipes by various criteria
   * including partial title matches, status filtering (e.g., published, draft),
   * and sorted results.
   *
   * Security considerations ensure that only authenticated users (regular or
   * premium) can access this list. Sensitive recipe information is filtered
   * according to user roles.
   *
   * The operation relates to the recipe_sharing_recipes Prisma DB table,
   * leveraging all searchable fields and supporting pagination for efficient
   * data transmission.
   *
   * Validation rules ensure valid pagination parameters and allowed sorting
   * options.
   *
   * This operation is commonly used prior to fetching detailed recipe
   * information through the detail endpoint.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for recipe filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRecipes.IRequest,
  ): Promise<IPageIRecipeSharingRecipes.ISummary> {
    try {
      return await patchrecipeSharingRegularUserRecipes({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a recipe by ID.
   *
   * Fetches detailed recipe information by recipe ID.
   *
   * Users must provide a valid recipe UUID to retrieve the details.
   * Authentication ensures that only authorized users access this data.
   *
   * This operation interfaces directly with the Prisma DB
   * recipe_sharing_recipes table and returns all fields necessary for
   * comprehensive recipe display.
   *
   * If the recipe does not exist, an appropriate error response is returned.
   *
   * This fetch is typically followed by update or deletion operations if the
   * user owns the recipe.
   *
   * @param connection
   * @param recipeId Unique identifier of the target recipe
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recipeId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recipeId")
    recipeId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRecipes> {
    try {
      return await getrecipeSharingRegularUserRecipesRecipeId({
        regularUser,
        recipeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing recipe by ID.
   *
   * Updates an existing recipe by ID.
   *
   * Users provide updated recipe information conforming to the schema.
   *
   * The endpoint enforces that only the creator of the recipe can update it.
   *
   * Validation errors are returned if any field is invalid.
   *
   * Successful update returns the full updated recipe data.
   *
   * This operation maintains content accuracy and user ownership.
   *
   * @param connection
   * @param recipeId Unique identifier of the target recipe
   * @param body Update info of the recipe
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":recipeId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recipeId")
    recipeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRecipes.IUpdate,
  ): Promise<IRecipeSharingRecipes> {
    try {
      return await putrecipeSharingRegularUserRecipesRecipeId({
        regularUser,
        recipeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a recipe by recipeId.
   *
   * Deletes a specific recipe identified by recipeId from the
   * recipe_sharing_recipes table. This is a hard delete operation that removes
   * the recipe completely from the database with no recovery possible from this
   * endpoint.
   *
   * Access is restricted to authorized users such as the recipe owner.
   *
   * If the recipe does not exist, a 404 error is returned. Other access and
   * server errors are handled per standard HTTP conventions.
   *
   * This operation complements other recipe management APIs including recipe
   * creation, update, and retrieval.
   *
   * No request body is needed for this DELETE operation, and no response body
   * is returned upon successful execution.
   *
   * @param connection
   * @param recipeId Unique identifier of the recipe to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":recipeId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("recipeId")
    recipeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserRecipesRecipeId({
        regularUser,
        recipeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
