import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putrecipeSharingPremiumUserIngredientsIngredientId } from "../../../../providers/putrecipeSharingPremiumUserIngredientsIngredientId";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { deleterecipeSharingPremiumUserIngredientsIngredientId } from "../../../../providers/deleterecipeSharingPremiumUserIngredientsIngredientId";

import { IRecipeSharingIngredient } from "../../../../api/structures/IRecipeSharingIngredient";

@Controller("/recipeSharing/premiumUser/ingredients/:ingredientId")
export class RecipesharingPremiumuserIngredientsController {
  /**
   * Update details of an ingredient in the recipe_sharing_ingredients table.
   *
   * This endpoint allows updating the details of an existing ingredient by
   * specifying the ingredientId path parameter. The request body must include
   * the updated details such as name and optionally brand. The response returns
   * the updated ingredient record.
   *
   * Users performing this action must have appropriate authorization as either
   * regular or premium users.
   *
   * The operation ensures data validation, uniqueness of ingredient names, and
   * audit timestamp modification. Proper error handling returns 400 for invalid
   * input, 403 for unauthorized access, and 404 if the ingredient does not
   * exist.
   *
   * Other relevant operations include retrieving ingredients, managing
   * substitutions, and deletion.
   *
   * This operation performs a hard update without changing soft deletion flags.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @param body Updated ingredient details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updateIngredient(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingIngredient.IUpdate,
  ): Promise<IRecipeSharingIngredient> {
    try {
      return await putrecipeSharingPremiumUserIngredientsIngredientId({
        premiumUser,
        ingredientId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanent deletion of an ingredient from the recipe_sharing_ingredients
   * table.
   *
   * This endpoint facilitates permanent deletion of an ingredient by
   * ingredientId. The user must have regular or premium authorization.
   *
   * Successful deletion removes the ingredient record from the database
   * completely with no response body.
   *
   * Errors include unauthorized access or non-existent ingredient.
   *
   * Related operations include ingredient retrieval, updates, and substitution
   * management.
   *
   * This is a hard delete ignoring soft delete timestamps.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseIngredient(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingPremiumUserIngredientsIngredientId({
        premiumUser,
        ingredientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
