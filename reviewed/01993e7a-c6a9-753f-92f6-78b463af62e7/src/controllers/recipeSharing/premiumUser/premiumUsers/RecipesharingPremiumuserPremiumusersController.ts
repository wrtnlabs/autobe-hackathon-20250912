import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingPremiumUserPremiumUsers } from "../../../../providers/patchrecipeSharingPremiumUserPremiumUsers";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { getrecipeSharingPremiumUserPremiumUsersId } from "../../../../providers/getrecipeSharingPremiumUserPremiumUsersId";
import { putrecipeSharingPremiumUserPremiumUsersId } from "../../../../providers/putrecipeSharingPremiumUserPremiumUsersId";
import { deleterecipeSharingPremiumUserPremiumUsersId } from "../../../../providers/deleterecipeSharingPremiumUserPremiumUsersId";

import { IPageIRecipeSharingPremiumUser } from "../../../../api/structures/IPageIRecipeSharingPremiumUser";
import { IRecipeSharingPremiumUser } from "../../../../api/structures/IRecipeSharingPremiumUser";

@Controller("/recipeSharing/premiumUser/premiumUsers")
export class RecipesharingPremiumuserPremiumusersController {
  /**
   * Search and retrieve a filtered, paginated list of premium users.
   *
   * Retrieve a paginated list of premium users. This operation supports
   * advanced search filtering, sorting, and pagination. It accesses the
   * recipe_sharing_premiumusers table, applying soft deletion filters to
   * exclude deleted users.
   *
   * Only authenticated users with roles 'regularUser' or 'premiumUser' can
   * access this endpoint. The response includes paginated premium user
   * summaries, allowing client-side listing and management of premium
   * subscribers.
   *
   * Typical use cases include administrative UI to manage premium users and
   * analytics dashboards for subscription tracking.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for premium user
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedBody()
    body: IRecipeSharingPremiumUser.IRequest,
  ): Promise<IPageIRecipeSharingPremiumUser> {
    try {
      return await patchrecipeSharingPremiumUserPremiumUsers({
        premiumUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed premium user information by ID.
   *
   * Retrieve detailed information of a premium user by their unique identifier.
   *
   * This operation fetches all standard profile data from the
   * recipe_sharing_premiumusers record and omits sensitive fields such as
   * password_hash.
   *
   * Authorization checks ensure only users with appropriate access can retrieve
   * this information.
   *
   * If the premium user is soft deleted, the operation will treat the record as
   * non-existent.
   *
   * Proper error responses are issued for missing or inaccessible users.
   *
   * @param connection
   * @param id Target premium user's unique identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingPremiumUser> {
    try {
      return await getrecipeSharingPremiumUserPremiumUsersId({
        premiumUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update premium user details by ID.
   *
   * Update profile details of a premium user.
   *
   * Allows modification of email, username, and premium_since date fields with
   * appropriate validation.
   *
   * This operation is restricted to the user or administrators with specified
   * roles.
   *
   * Password or deletion-related fields cannot be updated through this method.
   *
   * A successful update returns the updated premium user information excluding
   * sensitive credentials.
   *
   * Invalid inputs or permission denials return error responses.
   *
   * @param connection
   * @param id Target premium user's unique identifier (UUID)
   * @param body Profile update data for the premium user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingPremiumUser.IUpdate,
  ): Promise<IRecipeSharingPremiumUser> {
    try {
      return await putrecipeSharingPremiumUserPremiumUsersId({
        premiumUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete premium user by ID.
   *
   * Delete a premium user permanently by their unique identifier.
   *
   * This operation removes the corresponding user record fully from the
   * database.
   *
   * Only users with 'premiumUser' role are authorized to execute this action.
   *
   * Requests to delete non-existent or already removed users will result in
   * error responses.
   *
   * No response content is provided upon successful deletion.
   *
   * Proper error handling maintains system stability and security.
   *
   * @param connection
   * @param id Target premium user's unique identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingPremiumUserPremiumUsersId({
        premiumUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
