import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingPremiumUserReviews } from "../../../../providers/postrecipeSharingPremiumUserReviews";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { patchrecipeSharingPremiumUserReviews } from "../../../../providers/patchrecipeSharingPremiumUserReviews";
import { getrecipeSharingPremiumUserReviewsId } from "../../../../providers/getrecipeSharingPremiumUserReviewsId";
import { putrecipeSharingPremiumUserReviewsId } from "../../../../providers/putrecipeSharingPremiumUserReviewsId";

import { IRecipeSharingReview } from "../../../../api/structures/IRecipeSharingReview";
import { IPageIRecipeSharingReview } from "../../../../api/structures/IPageIRecipeSharingReview";

@Controller("/recipeSharing/premiumUser/reviews")
export class RecipesharingPremiumuserReviewsController {
  /**
   * Create a new recipe sharing review with detailed text associated with a
   * specific recipe and user. The request body must include the author user ID,
   * target recipe ID, and the review contents.
   *
   * The system will validate the input data, ensure required fields are
   * present, and record timestamps. Upon success, it returns the newly created
   * review record.
   *
   * Security measures prevent unauthorized creation and ensure data integrity.
   *
   * @param connection
   * @param body Creation info of the recipe sharing review
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedBody()
    body: IRecipeSharingReview.ICreate,
  ): Promise<IRecipeSharingReview> {
    try {
      return await postrecipeSharingPremiumUserReviews({
        premiumUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of recipe sharing reviews.
   *
   * Retrieve a filtered and paginated list of recipe sharing reviews from the
   * system. This operation supports advanced search capabilities, including
   * filtering by review author, reviewed recipe, review text content, creation
   * and update dates, and review status.
   *
   * The operation returns summarized review data optimized for list display
   * with necessary metadata to support UI rendering and navigation.
   *
   * Security considerations include ensuring that users can only access reviews
   * visible to them according to their role and permissions. Moderators have
   * expanded access to include all reviews regardless of status.
   *
   * This endpoint facilitates managing user-generated recipe reviews,
   * supporting moderation workflows and user interactions. Error scenarios
   * include invalid filter parameters or pagination requests, which should be
   * handled gracefully with meaningful messages.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for recipe sharing
   *   reviews
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedBody()
    body: IRecipeSharingReview.IRequest,
  ): Promise<IPageIRecipeSharingReview.ISummary> {
    try {
      return await patchrecipeSharingPremiumUserReviews({
        premiumUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed recipe sharing review by ID.
   *
   * Retrieve detailed information for a recipe sharing review specified by its
   * unique ID. This includes the authoring user, the reviewed recipe, the
   * review text, creation and update timestamps, and any soft deletion status.
   *
   * The operation ensures that only authorized users can access review details.
   * Moderators have full access to all reviews, whereas regular users can only
   * access visible reviews.
   *
   * If the review does not exist, the system returns a 404 Not Found error.
   * Error handling also includes invalid UUID formats.
   *
   * @param connection
   * @param id Unique identifier of the target review
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingReview> {
    try {
      return await getrecipeSharingPremiumUserReviewsId({
        premiumUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing recipe sharing review by ID.
   *
   * Update an existing recipe sharing review identified by its unique ID. The
   * request body includes fields to modify such as the review text.
   *
   * The system enforces authorization to ensure only the review author or
   * moderators can perform updates. Input validation ensures data correctness
   * and integrity.
   *
   * If the review is deleted or not found, appropriate error responses are
   * returned.
   *
   * @param connection
   * @param id Unique identifier of the target review
   * @param body Update info of the recipe sharing review
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReview.IUpdate,
  ): Promise<IRecipeSharingReview> {
    try {
      return await putrecipeSharingPremiumUserReviewsId({
        premiumUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
