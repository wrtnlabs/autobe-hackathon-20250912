import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putrecipeSharingPremiumUserUserFollowersUserFollowerId } from "../../../../providers/putrecipeSharingPremiumUserUserFollowersUserFollowerId";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { deleterecipeSharingPremiumUserUserFollowersUserFollowerId } from "../../../../providers/deleterecipeSharingPremiumUserUserFollowersUserFollowerId";

import { IRecipeSharingUserFollower } from "../../../../api/structures/IRecipeSharingUserFollower";

@Controller("/recipeSharing/premiumUser/userFollowers/:userFollowerId")
export class RecipesharingPremiumuserUserfollowersController {
  /**
   * Update a user follower relationship by ID.
   *
   * Update the user follower record identified by the provided userFollowerId
   * path parameter. This record represents the follow relationship between one
   * user (the follower) and another user (the followee). The request body
   * contains the new follower and/or followee user IDs with valid UUID format.
   * Only authorized users with the correct roles can perform this update.
   *
   * The updating process checks that the follower and followee users exist and
   * preserves database relations. Upon success, the operation returns the
   * updated user follower information. Errors may occur if the provided
   * identifier does not exist or if the input data fails validation.
   *
   * This API corresponds to the recipe_sharing_user_followers table in the
   * Prisma schema, which defines follower-followee user relations with auditing
   * timestamps.
   *
   * @param connection
   * @param userFollowerId Unique identifier of the user follower relationship
   *   to update
   * @param body User follower update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("userFollowerId")
    userFollowerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingUserFollower.IUpdate,
  ): Promise<IRecipeSharingUserFollower> {
    try {
      return await putrecipeSharingPremiumUserUserFollowersUserFollowerId({
        premiumUser,
        userFollowerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user follower relationship by ID.
   *
   * Delete a user follower record identified by the userFollowerId path
   * parameter. This permanently removes the follower relation between users
   * from the system database.
   *
   * Authorization requires authenticated regular or premium users with
   * permissions to modify their follower links.
   *
   * Upon success, no response body is returned. If the target follower record
   * does not exist, an error is returned.
   *
   * This maps to the recipe_sharing_user_followers table in the Prisma DB
   * schema, which manages social user follower relationships.
   *
   * @param connection
   * @param userFollowerId Unique identifier of the user follower relationship
   *   to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("userFollowerId")
    userFollowerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingPremiumUserUserFollowersUserFollowerId({
        premiumUser,
        userFollowerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
