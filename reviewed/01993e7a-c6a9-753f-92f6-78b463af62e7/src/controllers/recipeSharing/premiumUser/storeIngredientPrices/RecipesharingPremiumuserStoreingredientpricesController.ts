import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingPremiumUserStoreIngredientPrices } from "../../../../providers/postrecipeSharingPremiumUserStoreIngredientPrices";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { putrecipeSharingPremiumUserStoreIngredientPricesStoreIngredientPriceId } from "../../../../providers/putrecipeSharingPremiumUserStoreIngredientPricesStoreIngredientPriceId";

import { IRecipeSharingStoreIngredientPrice } from "../../../../api/structures/IRecipeSharingStoreIngredientPrice";

@Controller("/recipeSharing/premiumUser/storeIngredientPrices")
export class RecipesharingPremiumuserStoreingredientpricesController {
  /**
   * Create a new store ingredient price record.
   *
   * Create a new store ingredient price entry linking an ingredient with a
   * grocery store, specifying price and availability. This endpoint allows
   * authorized users to input current pricing data to support cost tracking and
   * shopping list features.
   *
   * Input validation includes existence of referenced grocery store and
   * ingredient, positive price values, and valid timestamps for last updated.
   *
   * This operation complements the retrieval and update APIs for store
   * ingredient prices.
   *
   * @param connection
   * @param body Store ingredient price creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedBody()
    body: IRecipeSharingStoreIngredientPrice.ICreate,
  ): Promise<IRecipeSharingStoreIngredientPrice> {
    try {
      return await postrecipeSharingPremiumUserStoreIngredientPrices({
        premiumUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update store ingredient price by ID.
   *
   * Update an existing store ingredient price record identified by ID. This
   * allows modification of price, availability, and last updated information to
   * keep data current for shopping and costing features.
   *
   * Input must include the updated fields and the path parameter for the record
   * ID.
   *
   * This operation is related to create and index APIs managing store
   * ingredient prices.
   *
   * Authorization is required for access.
   *
   * @param connection
   * @param storeIngredientPriceId Identifier of the store ingredient price
   *   record to update
   * @param body Store ingredient price update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":storeIngredientPriceId")
  public async update(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("storeIngredientPriceId")
    storeIngredientPriceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingStoreIngredientPrice.IUpdate,
  ): Promise<IRecipeSharingStoreIngredientPrice> {
    try {
      return await putrecipeSharingPremiumUserStoreIngredientPricesStoreIngredientPriceId(
        {
          premiumUser,
          storeIngredientPriceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
