import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingDietCategories } from "../../../providers/patchrecipeSharingDietCategories";
import { getrecipeSharingDietCategoriesId } from "../../../providers/getrecipeSharingDietCategoriesId";

import { IPageIRecipeSharingDietCategories } from "../../../api/structures/IPageIRecipeSharingDietCategories";
import { IRecipeSharingDietCategories } from "../../../api/structures/IRecipeSharingDietCategories";

@Controller("/recipeSharing/dietCategories")
export class RecipesharingDietcategoriesController {
  /**
   * Search and retrieve diet category listings.
   *
   * Retrieve a paginated and optionally filtered list of diet categories.
   *
   * This operation allows querying the 'recipe_sharing_diet_categories' table
   * for diet category entries. Clients can provide filtering parameters such as
   * name search, pagination controls, and sorting options.
   *
   * Results include summaries of diet categories suitable for display in user
   * interfaces.
   *
   * Access is publicly allowed with no authentication required.
   *
   * Validation includes conformance with pagination and filtering criteria.
   *
   * Related operations include retrieving a single diet category by ID and
   * managing categories internally.
   *
   * @param connection
   * @param body Filtering and pagination parameters for diet category search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexDietCategories(
    @TypedBody()
    body: IRecipeSharingDietCategories.IRequest,
  ): Promise<IPageIRecipeSharingDietCategories.ISummary> {
    try {
      return await patchrecipeSharingDietCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single diet category by ID.
   *
   * Get detailed information of a specific diet category by its unique ID.
   *
   * This retrieval operation returns the full details stored in the
   * corresponding entry of the 'recipe_sharing_diet_categories' table,
   * including the code, name, description, and timestamps.
   *
   * No authentication is required for this operation, making it accessible to
   * public clients.
   *
   * Validation ensures the requested ID exists and returns appropriate errors
   * if not.
   *
   * This read operation complements the diet category listing search and
   * supports UI display of diet details.
   *
   * @param connection
   * @param id Unique identifier of the diet category to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atDietCategory(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingDietCategories> {
    try {
      return await getrecipeSharingDietCategoriesId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
