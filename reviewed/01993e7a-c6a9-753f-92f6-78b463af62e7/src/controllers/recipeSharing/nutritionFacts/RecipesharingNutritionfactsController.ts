import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getrecipeSharingNutritionFactsNutritionFactId } from "../../../providers/getrecipeSharingNutritionFactsNutritionFactId";

import { IRecipeSharingNutritionFact } from "../../../api/structures/IRecipeSharingNutritionFact";

@Controller("/recipeSharing/nutritionFacts/:nutritionFactId")
export class RecipesharingNutritionfactsController {
  /**
   * Retrieve a specific nutrition fact by ID.
   *
   * Retrieve detailed nutritional information for a specific nutrition fact
   * entry. This endpoint operates on the recipe_sharing_nutrition_facts
   * database entity, which holds granular nutritional data for ingredients,
   * including macros and micronutrients.
   *
   * Clients can fetch calories, protein, carbohydrates, fat, fiber, sodium,
   * sugar, vitamin A, C, D, iron, and calcium values for the ingredient's
   * nutrition fact by its unique ID.
   *
   * Authentication is not required for this data, making it accessible to
   * public users for nutritional reference.
   *
   * The endpoint requires a valid nutritionFactId path parameter, which must
   * correspond to an existing nutrition fact record.
   *
   * Errors are returned when the ID is invalid or not found.
   *
   * @param connection
   * @param nutritionFactId Unique identifier of the nutrition fact
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("nutritionFactId")
    nutritionFactId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingNutritionFact> {
    try {
      return await getrecipeSharingNutritionFactsNutritionFactId({
        nutritionFactId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
