import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorIngredientsIngredientIdSubstitutions } from "../../../../../providers/postrecipeSharingModeratorIngredientsIngredientIdSubstitutions";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId } from "../../../../../providers/putrecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId";
import { deleterecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId } from "../../../../../providers/deleterecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId";

import { IRecipeSharingIngredientSubstitution } from "../../../../../api/structures/IRecipeSharingIngredientSubstitution";

@Controller("/recipeSharing/moderator/ingredients/:ingredientId/substitutions")
export class RecipesharingModeratorIngredientsSubstitutionsController {
  /**
   * Create a new ingredient substitution for a given ingredient.
   *
   * Create a new ingredient substitution entry for a particular ingredient
   * identified by 'ingredientId'. This substitution defines an alternative
   * ingredient along with a conversion ratio indicating how to adjust
   * quantities when substituting.
   *
   * The substitution must be linked to a valid existing ingredient and an
   * approved substitute ingredient in the system. Users are required to provide
   * the substitute ingredient ID and conversion ratio.
   *
   * Timestamps for creation and update are managed automatically by the system,
   * ensuring accurate audit trails. This operation requires authenticated users
   * with appropriate permissions to add substitutions.
   *
   * Note that the substitution status field exists in the database but its
   * value must be managed by moderation processes and is not set during
   * creation.
   *
   * If substitution with the same ingredient and substitute combination exists,
   * the system rejects duplication.
   *
   * The created substitution can be managed subsequently via update or delete
   * operations.
   *
   * @param connection
   * @param ingredientId ID of the ingredient to add substitution for
   * @param body Information to create an ingredient substitution entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createSubstitution(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingIngredientSubstitution.ICreate,
  ): Promise<IRecipeSharingIngredientSubstitution> {
    try {
      return await postrecipeSharingModeratorIngredientsIngredientIdSubstitutions(
        {
          moderator,
          ingredientId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an ingredient substitution by its ID under a specific ingredient.
   *
   * Update an existing ingredient substitution linked to a given ingredient
   * identified by 'ingredientId' and 'substitutionId'.
   *
   * This allows modification of the substitute ingredient, conversion ratio,
   * and moderation status.
   *
   * Moderation statuses are strict enum values: 'pending', 'approved',
   * 'rejected' must be used exactly.
   *
   * Creation timestamp remains unchanged. Update timestamp updates
   * automatically.
   *
   * This operation requires authenticated admin or moderator role for
   * authorization.
   *
   * Validation ensures the substitution belongs to the specified ingredient and
   * identifiers are valid UUIDs.
   *
   * @param connection
   * @param ingredientId ID of the ingredient to which substitution belongs
   * @param substitutionId ID of the substitution to update
   * @param body Information to update an ingredient substitution entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":substitutionId")
  public async updateSubstitution(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedParam("substitutionId")
    substitutionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingIngredientSubstitution.IUpdate,
  ): Promise<IRecipeSharingIngredientSubstitution> {
    try {
      return await putrecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId(
        {
          moderator,
          ingredientId,
          substitutionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an ingredient substitution by ID.
   *
   * Erase (permanently delete) an ingredient substitution record linked to a
   * specific ingredient.
   *
   * This action removes the substitution entirely from the database with no
   * recovery. It does not soft delete.
   *
   * Authorization requires admin or moderator role.
   *
   * Path parameters must correctly specify the ingredient and substitution IDs.
   *
   * No request body or response body is needed.
   *
   * @param connection
   * @param ingredientId ID of the ingredient linked to the substitution
   * @param substitutionId ID of the ingredient substitution to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":substitutionId")
  public async eraseSubstitution(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedParam("substitutionId")
    substitutionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorIngredientsIngredientIdSubstitutionsSubstitutionId(
        {
          moderator,
          ingredientId,
          substitutionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
