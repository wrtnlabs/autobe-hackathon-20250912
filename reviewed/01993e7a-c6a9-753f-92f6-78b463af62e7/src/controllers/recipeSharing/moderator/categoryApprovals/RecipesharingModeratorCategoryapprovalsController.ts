import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingModeratorCategoryApprovals } from "../../../../providers/patchrecipeSharingModeratorCategoryApprovals";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getrecipeSharingModeratorCategoryApprovalsId } from "../../../../providers/getrecipeSharingModeratorCategoryApprovalsId";
import { putrecipeSharingModeratorCategoryApprovalsId } from "../../../../providers/putrecipeSharingModeratorCategoryApprovalsId";
import { deleterecipeSharingModeratorCategoryApprovalsId } from "../../../../providers/deleterecipeSharingModeratorCategoryApprovalsId";

import { IPageIRecipeSharingCategoryApprovals } from "../../../../api/structures/IPageIRecipeSharingCategoryApprovals";
import { IRecipeSharingCategoryApprovals } from "../../../../api/structures/IRecipeSharingCategoryApprovals";

@Controller("/recipeSharing/moderator/categoryApprovals")
export class RecipesharingModeratorCategoryapprovalsController {
  /**
   * Search and list user-submitted category approvals.
   *
   * Retrieves a list of category approval submissions made by users that are
   * awaiting moderator approval or have been reviewed. This operation supports
   * filtering by category name, approval status (pending, approved, rejected),
   * and submission or review dates, allowing moderators or administrative users
   * to manage category approvals efficiently.
   *
   * Security is enforced by requiring moderator roles to access this data due
   * to its sensitive nature involving user-generated content and moderation
   * processes.
   *
   * This operation corresponds to the recipe_sharing_category_approvals table
   * in the database schema, which stores user-submitted categories or tags
   * pending approval, including submission timestamps and review status.
   *
   * The API supports comprehensive pagination and sorting to handle potentially
   * large numbers of submissions. Errors returned will inform on invalid
   * parameters or authorization issues.
   *
   * @param connection
   * @param body Search parameters for filtering category approvals
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingCategoryApprovals.IRequest,
  ): Promise<IPageIRecipeSharingCategoryApprovals.ISummary> {
    try {
      return await patchrecipeSharingModeratorCategoryApprovals({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a category approval.
   *
   * Fetches detailed data about a category approval request identified by the
   * provided ID. The response includes the category name, approval status,
   * submission timestamp, review timestamp if applicable, and audit metadata.
   * This detailed view enables moderators to assess the submission context and
   * make informed decisions.
   *
   * Access to this endpoint is restricted to users with moderator roles due to
   * the sensitive nature of moderation data.
   *
   * The operation maps to the recipe_sharing_category_approvals table in the
   * Prisma schema, which maintains the record of user-submitted categories
   * pending approval.
   *
   * Invalid IDs or unauthorized access attempts result in appropriate error
   * messages indicating the failure reason.
   *
   * @param connection
   * @param id Unique identifier of the category approval record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingCategoryApprovals> {
    try {
      return await getrecipeSharingModeratorCategoryApprovalsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing category approval request.
   *
   * Allows moderators to modify an existing category approval entry identified
   * by its ID. This includes changing the approval status (pending, approved,
   * rejected), adding review timestamps, and updating any relevant metadata.
   *
   * This endpoint is restricted to moderator users given its critical role in
   * content curation and quality control.
   *
   * The operation corresponds to the recipe_sharing_category_approvals table,
   * updating records that represent user-submitted category suggestions.
   *
   * Inappropriate updates or unauthorized attempts return error messages
   * describing the issue.
   *
   * @param connection
   * @param id Unique identifier of the category approval record to update
   * @param body Updated category approval data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingCategoryApprovals.IUpdate,
  ): Promise<IRecipeSharingCategoryApprovals> {
    try {
      return await putrecipeSharingModeratorCategoryApprovalsId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a category approval request by ID.
   *
   * This API operation permanently deletes a category approval request record
   * from the system by its unique identifier. The category approval record
   * links user-submitted category or tag suggestions pending moderator
   * approval. By calling this endpoint, the specified record is removed
   * entirely from the database and will no longer appear in moderation queues
   * or logs.
   *
   * Only users with the correct authorization roles, such as moderators, should
   * be permitted to perform this deletion, protecting the moderation process's
   * integrity and auditability.
   *
   * The 'id' path parameter specifies the UUID of the target category approval
   * record. If the record does not exist, the server should respond with an
   * appropriate error code.
   *
   * This operation has no request body, and the response contains no content
   * upon successful deletion.
   *
   * This DELETE operation directly manipulates data in the
   * 'recipe_sharing_category_approvals' table from the Prisma schema.
   *
   * @param connection
   * @param id Target category approval request's unique UUID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorCategoryApprovalsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
