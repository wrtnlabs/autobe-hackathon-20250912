import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingModeratorReviewsReviewIdFlags } from "../../../../../providers/patchrecipeSharingModeratorReviewsReviewIdFlags";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { getrecipeSharingModeratorReviewsReviewIdFlagsFlagId } from "../../../../../providers/getrecipeSharingModeratorReviewsReviewIdFlagsFlagId";

import { IPageIRecipeSharingReviewFlag } from "../../../../../api/structures/IPageIRecipeSharingReviewFlag";
import { IRecipeSharingReviewFlag } from "../../../../../api/structures/IRecipeSharingReviewFlag";

@Controller("/recipeSharing/moderator/reviews/:reviewId/flags")
export class RecipesharingModeratorReviewsFlagsController {
  /**
   * List flags on a review.
   *
   * Retrieve a paginated list of flags made on a specific recipe review.
   *
   * This operation supports filtering, sorting, and pagination based on the
   * request body parameters.
   *
   * It interacts with the recipe_sharing_review_flags table linked to the
   * specified reviewId.
   *
   * Only users with moderator roles can access and use this endpoint to review
   * flagged content.
   *
   * The response returns a paginated list of flags with detailed information
   * about each flag, including the reason and the user who flagged the review.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review
   * @param body Filter and pagination parameters for review flags
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexFlags(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewFlag.IRequest,
  ): Promise<IPageIRecipeSharingReviewFlag> {
    try {
      return await patchrecipeSharingModeratorReviewsReviewIdFlags({
        moderator,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get information of a review flag.
   *
   * Get detailed information of a specific flag on a recipe review.
   *
   * This is accessible only to moderator users.
   *
   * The operation requires reviewId and flagId to identify the exact flag.
   *
   * The response returns comprehensive information about the flag record,
   * including the reason, reporter, and timestamps.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review
   * @param flagId Unique identifier of the target flag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":flagId")
  public async atFlag(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingReviewFlag> {
    try {
      return await getrecipeSharingModeratorReviewsReviewIdFlagsFlagId({
        moderator,
        reviewId,
        flagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
