import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorDifficultyLevels } from "../../../../providers/postrecipeSharingModeratorDifficultyLevels";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorDifficultyLevelsId } from "../../../../providers/putrecipeSharingModeratorDifficultyLevelsId";
import { deleterecipeSharingModeratorDifficultyLevelsId } from "../../../../providers/deleterecipeSharingModeratorDifficultyLevelsId";

import { IRecipeSharingDifficultyLevels } from "../../../../api/structures/IRecipeSharingDifficultyLevels";

@Controller("/recipeSharing/moderator/difficultyLevels")
export class RecipesharingModeratorDifficultylevelsController {
  /**
   * Create new difficulty level.
   *
   * Create a new difficulty level record with specified attributes such as
   * code, name, and description.
   *
   * The operation ensures uniqueness of the code.
   *
   * This requires authorization since it modifies system classification data.
   *
   * After creation, the new difficulty level data is returned with its full
   * details and timestamps.
   *
   * Validation errors will be returned if uniqueness or required fields
   * constraints fail.
   *
   * @param connection
   * @param body Creation data for difficulty level
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingDifficultyLevels.ICreate,
  ): Promise<IRecipeSharingDifficultyLevels> {
    try {
      return await postrecipeSharingModeratorDifficultyLevels({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing difficulty level.
   *
   * Update an existing difficulty level record by ID.
   *
   * Allows changing code, name, and description fields, maintaining system
   * classifications up to date.
   *
   * Authorization is required.
   *
   * Returns the updated difficulty level entity.
   *
   * Validation errors may occur if constraints such as uniqueness of code are
   * violated.
   *
   * @param connection
   * @param id Unique identifier of the difficulty level to update
   * @param body Update data for difficulty level
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingDifficultyLevels.IUpdate,
  ): Promise<IRecipeSharingDifficultyLevels> {
    try {
      return await putrecipeSharingModeratorDifficultyLevelsId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a difficulty level by ID.
   *
   * Soft delete a difficulty level by its ID by setting its deleted_at
   * timestamp.
   *
   * This operation prevents the difficulty level from appearing in active
   * queries but retains it in database for audit and recovery.
   *
   * Requires moderator role authorization.
   *
   * No response body is returned.
   *
   * Error handling includes invalid ID or unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the difficulty level to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorDifficultyLevelsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
