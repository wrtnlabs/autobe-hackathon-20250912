import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getrecipeSharingModeratorGroceryStoresGroceryStoreId } from "../../../../providers/getrecipeSharingModeratorGroceryStoresGroceryStoreId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorGroceryStoresGroceryStoreId } from "../../../../providers/putrecipeSharingModeratorGroceryStoresGroceryStoreId";
import { deleterecipeSharingModeratorGroceryStoresGroceryStoreId } from "../../../../providers/deleterecipeSharingModeratorGroceryStoresGroceryStoreId";
import { postrecipeSharingModeratorGroceryStores } from "../../../../providers/postrecipeSharingModeratorGroceryStores";

import { IRecipeSharingGroceryStore } from "../../../../api/structures/IRecipeSharingGroceryStore";

@Controller("/recipeSharing/moderator/groceryStores")
export class RecipesharingModeratorGrocerystoresController {
  /**
   * Retrieve grocery store information by ID.
   *
   * Retrieve detailed information for a grocery store by its unique identifier
   * (groceryStoreId). This operation returns all relevant details including the
   * store's name, address, phone number, and website URL from the
   * recipe_sharing_grocery_stores table.
   *
   * Access to this endpoint is restricted to authorized moderators to protect
   * sensitive business data. Soft-deleted grocery stores (those with a
   * deleted_at timestamp) are excluded from results.
   *
   * Proper error handling includes responses for non-existent or deleted store
   * IDs. The endpoint supports shopping list cost optimization and ingredient
   * availability checks.
   *
   * This operation is a GET method at /groceryStores/{groceryStoreId} and
   * returns a full grocery store entity matching the ID.
   *
   * @param connection
   * @param groceryStoreId Unique identifier of the grocery store
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":groceryStoreId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("groceryStoreId")
    groceryStoreId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingGroceryStore> {
    try {
      return await getrecipeSharingModeratorGroceryStoresGroceryStoreId({
        moderator,
        groceryStoreId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update grocery store information by ID.
   *
   * Update details of a grocery store identified by groceryStoreId. Fields such
   * as name, address, phone, and website URL can be modified. This operation is
   * authorized only for moderators.
   *
   * Validation checks ensure the store exists and the updates meet all
   * constraints. Returns the updated grocery store entity fully reflecting
   * current data.
   *
   * This is a PUT operation at /groceryStores/{groceryStoreId} targeting the
   * recipe_sharing_grocery_stores table.
   *
   * @param connection
   * @param groceryStoreId Unique identifier of the grocery store to update
   * @param body Update info of the grocery store
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":groceryStoreId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("groceryStoreId")
    groceryStoreId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingGroceryStore.IUpdate,
  ): Promise<IRecipeSharingGroceryStore> {
    try {
      return await putrecipeSharingModeratorGroceryStoresGroceryStoreId({
        moderator,
        groceryStoreId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete grocery store by ID.
   *
   * Delete a grocery store by its unique groceryStoreId. This hard delete is
   * irreversible and removes the grocery store from the system's records.
   *
   * Only moderators have authorization to perform this destructive action.
   * Deletion impacts ingredient pricing and availability tracking.
   *
   * This DELETE /groceryStores/{groceryStoreId} endpoint corresponds to the
   * recipe_sharing_grocery_stores Prisma table and must confirm the store's
   * existence before deletion.
   *
   * Post-deletion, the store data cannot be restored.
   *
   * @param connection
   * @param groceryStoreId Unique identifier of the grocery store to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":groceryStoreId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("groceryStoreId")
    groceryStoreId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorGroceryStoresGroceryStoreId({
        moderator,
        groceryStoreId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create new grocery store.
   *
   * Create a new grocery store with required name and optional address, phone,
   * and website URL fields. This operation is authorized for moderators and is
   * essential for expanding the list of stores used in ingredient cost
   * tracking.
   *
   * On successful creation, the complete grocery store object including
   * system-generated fields such as id and timestamps is returned. This
   * management action helps maintain up-to-date grocery store data.
   *
   * This endpoint POST /groceryStores operates on the
   * recipe_sharing_grocery_stores table and complies with soft delete
   * conventions.
   *
   * @param connection
   * @param body Creation info of the grocery store
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingGroceryStore.ICreate,
  ): Promise<IRecipeSharingGroceryStore> {
    try {
      return await postrecipeSharingModeratorGroceryStores({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
