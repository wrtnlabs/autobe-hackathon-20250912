import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorModeratorActions } from "../../../../providers/postrecipeSharingModeratorModeratorActions";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchrecipeSharingModeratorModeratorActions } from "../../../../providers/patchrecipeSharingModeratorModeratorActions";
import { getrecipeSharingModeratorModeratorActionsId } from "../../../../providers/getrecipeSharingModeratorModeratorActionsId";
import { putrecipeSharingModeratorModeratorActionsId } from "../../../../providers/putrecipeSharingModeratorModeratorActionsId";
import { deleterecipeSharingModeratorModeratorActionsId } from "../../../../providers/deleterecipeSharingModeratorModeratorActionsId";

import { IRecipeSharingModeratorActions } from "../../../../api/structures/IRecipeSharingModeratorActions";
import { IPageIRecipeSharingFlagQueue } from "../../../../api/structures/IPageIRecipeSharingFlagQueue";
import { IRecipeSharingFlagQueue } from "../../../../api/structures/IRecipeSharingFlagQueue";

@Controller("/recipeSharing/moderator/moderatorActions")
export class RecipesharingModeratorModeratoractionsController {
  /**
   * Create a new moderator action record documenting the moderation activity
   * performed.
   *
   * The request must specify the moderator ID, the type of action taken, the
   * target entity ID, and optional comments describing the operation.
   *
   * This is essential for maintaining an audit trail of all moderation
   * decisions and actions taken on flagged reviews or category approvals.
   *
   * Only authorized moderators can perform this operation.
   *
   * The system timestamps are applied automatically and do not require client
   * input.
   *
   * The response returns the full created moderator action entity.
   *
   * Errors are triggered if required fields are missing or invalid.
   *
   * @param connection
   * @param body Moderator action creation details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingModeratorActions.ICreate,
  ): Promise<IRecipeSharingModeratorActions> {
    try {
      return await postrecipeSharingModeratorModeratorActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve flag queue entries for moderation.
   *
   * This API endpoint allows moderators to search, filter, paginate, and sort
   * flag queue entries used in moderation workflows. It supports complex search
   * criteria defined in the request body, such as filtering by status, flag
   * reason, report date ranges, and reporter user ID.
   *
   * The system returns a paginated list of flag queue entries matching the
   * criteria, including relevant details like review IDs, reporter IDs, reason
   * for flags, and timestamps.
   *
   * Security ensures only moderators can access this data.
   *
   * Errors include invalid query parameters or unauthorized access.
   *
   * This operation facilitates effective moderation by enabling moderators to
   * retrieve and manage the flag queue in a scalable and efficient manner.
   *
   * @param connection
   * @param body Search and filter criteria for flag queue entries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingFlagQueue.IRequest,
  ): Promise<IPageIRecipeSharingFlagQueue> {
    try {
      return await patchrecipeSharingModeratorModeratorActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific moderator action by ID.
   *
   * Retrieve a specific moderator action by its unique identifier in the recipe
   * sharing backend moderation system.
   *
   * This operation returns detailed information of the moderation action
   * including the moderator who performed it, the exact action type, target
   * entity, timestamps, and any comments added by the moderator. It supports
   * audit and compliance by providing immutable logs of moderation activities.
   *
   * Access control ensures only authorized moderators can access this data. The
   * response includes all significant fields maintained in the
   * 'recipe_sharing_moderator_actions' Prisma table such as 'moderator_id',
   * 'action_type', 'target_id', 'action_timestamp', and audit fields like
   * 'created_at' and 'updated_at'.
   *
   * No request body is needed for this GET operation.
   *
   * Errors such as invalid or nonexistent IDs return appropriate HTTP error
   * responses.
   *
   * @param connection
   * @param id Unique identifier of the moderator action to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingModeratorActions> {
    try {
      return await getrecipeSharingModeratorModeratorActionsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a moderator action by ID.
   *
   * Update an existing moderator action by its ID.
   *
   * Allows modification of action details and comments while preserving audit
   * compliance.
   *
   * Only authorized moderators can perform updates.
   *
   * The system manages timestamps for creation and updates.
   *
   * The response provides the updated moderator action object.
   *
   * Errors occur if the ID is invalid or update data fails validation.
   *
   * @param connection
   * @param id Unique identifier of the moderator action to update
   * @param body Moderator action update details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingModeratorActions.IUpdate,
  ): Promise<IRecipeSharingModeratorActions> {
    try {
      return await putrecipeSharingModeratorModeratorActionsId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a moderator action by ID.
   *
   * Delete a moderator action from the system by its unique ID.
   *
   * This permanently removes the audit log entry for the moderation activity.
   *
   * Only authorized moderators can execute this operation.
   *
   * No request body or response body is needed.
   *
   * Errors occur if the specified ID does not exist.
   *
   * This is a hard delete operation removing the record entirely.
   *
   * @param connection
   * @param id Unique identifier of the moderator action to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorModeratorActionsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
