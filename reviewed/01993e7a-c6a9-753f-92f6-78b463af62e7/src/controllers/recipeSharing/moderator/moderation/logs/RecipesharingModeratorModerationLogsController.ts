import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingModeratorModerationLogs } from "../../../../../providers/patchrecipeSharingModeratorModerationLogs";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { getrecipeSharingModeratorModerationLogsId } from "../../../../../providers/getrecipeSharingModeratorModerationLogsId";

import { IPageIRecipeSharingModerationLog } from "../../../../../api/structures/IPageIRecipeSharingModerationLog";
import { IRecipeSharingModerationLog } from "../../../../../api/structures/IRecipeSharingModerationLog";
import { IRecipeSharingModerationLogs } from "../../../../../api/structures/IRecipeSharingModerationLogs";

@Controller("/recipeSharing/moderator/moderation/logs")
export class RecipesharingModeratorModerationLogsController {
  /**
   * Retrieve paginated list of moderation logs.
   *
   * Retrieve moderation logs for review moderation activities.
   *
   * Includes detailed audit trail for compliance.
   *
   * Accessible only by moderators.
   *
   * Supports pagination, filtering, and search via request body JSON.
   *
   * Returns paginated list of logs.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for moderation logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingModerationLog.IRequest,
  ): Promise<IPageIRecipeSharingModerationLog> {
    try {
      return await patchrecipeSharingModeratorModerationLogs({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed moderation log information by ID.
   *
   * Retrieve detailed information for a moderation log by its unique ID. The
   * log includes moderator details, the action performed (e.g., hide, unhide),
   * optional moderator comments, and timestamps for audit and compliance
   * purposes.
   *
   * Access to this endpoint is restricted to moderators to maintain auditing
   * security.
   *
   * The operation relates directly to the recipe_sharing_moderation_logs table
   * which stores immutable audit trails for moderation actions on flagged
   * reviews.
   *
   * Validations include proper UUID formatting for the log ID and existence
   * checks.
   *
   * This GET operation supports moderator workflows requiring detailed
   * moderation activity audits to ensure transparency and accountability.
   *
   * @param connection
   * @param id Unique identifier of the moderation log
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingModerationLogs> {
    try {
      return await getrecipeSharingModeratorModerationLogsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
