import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchrecipeSharingShoppingLists } from "../../../providers/patchrecipeSharingShoppingLists";

import { IPageIRecipeSharingShoppingList } from "../../../api/structures/IPageIRecipeSharingShoppingList";
import { IRecipeSharingShoppingList } from "../../../api/structures/IRecipeSharingShoppingList";

@Controller("/recipeSharing/shoppingLists")
export class RecipesharingShoppinglistsController {
  /**
   * Search and retrieve paginated shopping lists.
   *
   * Retrieve a filtered and paginated list of shopping lists. Allows searching
   * by name, filtering by owner user ID, and pagination to control result
   * size.
   *
   * Access is publicly available and does not require authentication.
   *
   * The shopping lists correspond to recipe_sharing_shopping_lists records,
   * including name, ownership, timestamps, and soft delete flag.
   *
   * The results contain summary information suitable for list display with
   * minimal details for performance.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for shopping lists
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRecipeSharingShoppingList.IRequest,
  ): Promise<IPageIRecipeSharingShoppingList.ISummary> {
    try {
      return await patchrecipeSharingShoppingLists({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
