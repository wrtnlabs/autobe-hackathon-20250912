import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId } from "../../../../providers/puthealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId";
import { DepartmentheadAuth } from "../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../decorators/payload/DepartmentheadPayload";
import { deletehealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId } from "../../../../providers/deletehealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId";

import { IHealthcarePlatformAnalyticsDashboard } from "../../../../api/structures/IHealthcarePlatformAnalyticsDashboard";

@Controller(
  "/healthcarePlatform/departmentHead/analyticsDashboards/:dashboardId",
)
export class HealthcareplatformDepartmentheadAnalyticsdashboardsController {
  /**
   * Update an existing analytics dashboard's configuration or content
   * (healthcare_platform_analytics_dashboards table).
   *
   * This operation enables authorized users to update the configuration,
   * contents, or metadata of a specific analytics dashboard already created in
   * the system. The target dashboard is referenced by its unique dashboardId,
   * which must exist in the healthcare_platform_analytics_dashboards table.
   * Users can update fields such as dashboard title, description, department
   * association, visibility (public/private), and the JSON widget/layout
   * configuration. Role-based access ensures only the dashboard owner or
   * permitted admins can perform updates.
   *
   * All update attempts are subject to validation for field correctness,
   * concurrency control (optimistic locking as required), and audit logging for
   * traceability. Any immutable, system-controlled, or deleted dashboards are
   * excluded from modification. Error scenarios include invalid dashboard ID,
   * update attempts on non-owned or role-ineligible dashboards, and business
   * validation failures for field values or configuration content.
   *
   * All dashboard update actions are logged for complete compliance
   * traceability and review by audit or organization admin roles.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard being updated.
   * @param body Updated properties for the target analytics dashboard.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.IUpdate,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await puthealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId(
        {
          departmentHead,
          dashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an analytics dashboard (soft delete via deleted_at;
   * healthcare_platform_analytics_dashboards table).
   *
   * When called, this operation soft-deletes an analytics dashboard identified
   * by dashboardId from the healthcare_platform_analytics_dashboards table,
   * rendering it inaccessible in normal workflows but retaining the record for
   * audit, compliance, and possible future restoration. Only users with
   * sufficient privileges (dashboard owner, organization admin, or department
   * head) can delete dashboards.
   *
   * Deletion requests are validated for dashboard existence, user
   * authorization, and that the dashboard is not already deleted or
   * system-locked. The deleted_at field is set to the current timestamp.
   * Attempts to delete non-existent or unowned dashboards result in error
   * responses. This operation is strictly tracked in system audit logs for
   * regulatory and accountability requirements.
   *
   * Dashboards flagged as deleted may be retained per organization policy for a
   * defined retention window. Recovery or permanent deletion processes are
   * managed separately.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard to be soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformDepartmentHeadAnalyticsDashboardsDashboardId(
        {
          departmentHead,
          dashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
