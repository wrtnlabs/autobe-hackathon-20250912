import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformDepartmentHeadKpiSnapshots } from "../../../../providers/patchhealthcarePlatformDepartmentHeadKpiSnapshots";
import { DepartmentheadAuth } from "../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../decorators/payload/DepartmentheadPayload";
import { gethealthcarePlatformDepartmentHeadKpiSnapshotsKpiSnapshotId } from "../../../../providers/gethealthcarePlatformDepartmentHeadKpiSnapshotsKpiSnapshotId";

import { IPageIHealthcarePlatformKpiSnapshot } from "../../../../api/structures/IPageIHealthcarePlatformKpiSnapshot";
import { IHealthcarePlatformKpiSnapshot } from "../../../../api/structures/IHealthcarePlatformKpiSnapshot";

@Controller("/healthcarePlatform/departmentHead/kpiSnapshots")
export class HealthcareplatformDepartmentheadKpisnapshotsController {
  /**
   * Search and paginate KPI snapshot entries (healthcare_platform_kpi_snapshots
   * table).
   *
   * Get a paginated and filterable list of KPI snapshot data points, including
   * value, label, date/time, organization, department, and any linked
   * benchmarks. End users (orgAdmins, department heads, providers with
   * analytics access) use this endpoint to populate dashboards and reports with
   * up-to-date analytics data.
   *
   * Request body allows searching by org/department, KPI name, date range,
   * value ranges, and supports sorting options. Endpoint uses pagination for
   * large result sets. Data is restricted to authorized users/organizations;
   * audit logging includes query parameters and filters.
   *
   * Errors: Invalid search criteria, access violations, and paging/sorting
   * parameter errors are all reported with clear messages. Related endpoints
   * include create/read/update/erase for benchmarks and direct KPI
   * configuration endpoints.
   *
   * @param connection
   * @param body Request body specifying search, filter, and pagination criteria
   *   for KPI snapshots.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedBody()
    body: IHealthcarePlatformKpiSnapshot.IRequest,
  ): Promise<IPageIHealthcarePlatformKpiSnapshot> {
    try {
      return await patchhealthcarePlatformDepartmentHeadKpiSnapshots({
        departmentHead,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch a detailed KPI snapshot by its unique ID (table:
   * healthcare_platform_kpi_snapshots) for analytics and reporting.
   *
   * Retrieve a single KPI snapshot record from the
   * healthcare_platform_kpi_snapshots table using its unique ID. The KPI
   * snapshot includes information about a specific performance indicatorâ€”such
   * as the KPI name, value, label, department and organization linkage,
   * benchmark association, observation time, and computation details for a
   * given reporting period.
   *
   * Authorization and data access are restricted to roles with appropriate
   * analytics or admin privileges, following business rules and organization
   * visibility scope defined in the platform security requirements. The
   * endpoint enforces strict access control, ensuring users can only view KPI
   * snapshots for organizations and departments to which they are affiliated.
   *
   * Error handling covers not-found conditions, permission violations, or
   * requests for deleted/inactive snapshots. This operation is typically paired
   * with listing/search endpoints and may be used in dashboard drilldown
   * routines. Compliance with audit and access log requirements is automatic,
   * as every fetch event will be recorded for compliance and future review.
   *
   * @param connection
   * @param kpiSnapshotId Unique identifier (UUID) of the target KPI snapshot to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":kpiSnapshotId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("kpiSnapshotId")
    kpiSnapshotId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformKpiSnapshot> {
    try {
      return await gethealthcarePlatformDepartmentHeadKpiSnapshotsKpiSnapshotId(
        {
          departmentHead,
          kpiSnapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
