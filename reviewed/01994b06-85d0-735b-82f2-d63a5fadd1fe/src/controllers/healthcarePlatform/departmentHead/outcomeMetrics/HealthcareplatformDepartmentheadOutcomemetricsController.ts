import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformDepartmentHeadOutcomeMetrics } from "../../../../providers/posthealthcarePlatformDepartmentHeadOutcomeMetrics";
import { DepartmentheadAuth } from "../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../decorators/payload/DepartmentheadPayload";
import { patchhealthcarePlatformDepartmentHeadOutcomeMetrics } from "../../../../providers/patchhealthcarePlatformDepartmentHeadOutcomeMetrics";
import { gethealthcarePlatformDepartmentHeadOutcomeMetricsMetricId } from "../../../../providers/gethealthcarePlatformDepartmentHeadOutcomeMetricsMetricId";

import { IHealthcarePlatformOutcomeMetric } from "../../../../api/structures/IHealthcarePlatformOutcomeMetric";
import { IPageIHealthcarePlatformOutcomeMetric } from "../../../../api/structures/IPageIHealthcarePlatformOutcomeMetric";

@Controller("/healthcarePlatform/departmentHead/outcomeMetrics")
export class HealthcareplatformDepartmentheadOutcomemetricsController {
  /**
   * Create a new outcome metric timeseries record in
   * healthcare_platform_outcome_metrics for analytics.
   *
   * Create a new outcome metric record under the
   * healthcare_platform_outcome_metrics table, capturing key performance
   * indicators or quality metrics for organization or department analytics. The
   * submitted data must include metric names, cohort definitions, observed
   * values, timestamps, and association to organizational or departmental
   * scope. All submitted records are validated for duplication, format
   * correctness, and permission scope before saving.
   *
   * On success, the operation returns the detailed created outcome metric for
   * immediate analytics integration. Errors are returned for duplicate record
   * attempts (metric name and observedAt not unique within org/department),
   * malformed cohort definitions, or permission violations. All creations are
   * logged for compliance and quality improvement traceability.
   *
   * @param connection
   * @param body Information for creating a new outcome metric record
   *   (metricName, cohort, value, timestamp, and context).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedBody()
    body: IHealthcarePlatformOutcomeMetric.ICreate,
  ): Promise<IHealthcarePlatformOutcomeMetric> {
    try {
      return await posthealthcarePlatformDepartmentHeadOutcomeMetrics({
        departmentHead,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of outcome metrics for
   * analytics using healthcare_platform_outcome_metrics.
   *
   * Retrieve a paginated and filtered list of outcome metrics defined in the
   * healthcare_platform_outcome_metrics table. This endpoint is foundational
   * for analytics dashboards, organizational performance reviews, and
   * compliance trend analysis. The incoming request supports complex filters,
   * such as organizationId, departmentId, metricName (supports partial/text
   * search), observed_at date range, value threshold filtering, and
   * cohort-based inclusion/exclusion (using cohortDefinition fields). Sorting
   * can be performed on metricName, observed_at, and observedValue.
   *
   * Role-based data access is strictly enforced according to user role,
   * limiting the scope of returned metrics as appropriate (e.g., departmentHead
   * sees only department metrics; organizationAdmin sees all their
   * organization's metrics; systemAdmin sees all). All read access is logged
   * for audit.
   *
   * Pagination and performance must accommodate trends analysis over long time
   * windows. Error handling should address invalid filter criteria, permission
   * violations, or inconsistent search parameters. This operation directly
   * supports quality improvement, regulatory reporting, and benchmarking.
   *
   * @param connection
   * @param body Search/filter and pagination parameters for finding outcome
   *   metrics.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedBody()
    body: IHealthcarePlatformOutcomeMetric.IRequest,
  ): Promise<IPageIHealthcarePlatformOutcomeMetric.ISummary> {
    try {
      return await patchhealthcarePlatformDepartmentHeadOutcomeMetrics({
        departmentHead,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single outcome metric record and its metadata by metricId from
   * healthcare_platform_outcome_metrics.
   *
   * Retrieve the full detail of a specific outcome metric using metricId. This
   * includes metric name, observed value, cohort definition, observed_at
   * timestamp, organizational/department scope, and calculation metadata. The
   * response enables in-depth review, audit, and drill-down for analytics
   * dashboards or compliance workflows.
   *
   * Role-based authorization is required: systemAdmin can access any metric;
   * organizationAdmin is limited to their organization; departmentHead is
   * limited to their department's metrics. If the metricId is invalid, deleted,
   * or the user lacks permissions, an error response is returned for clarity
   * and auditing. This operation is essential for interactive analytics,
   * organizational benchmarking, and regulatory quality tracking.
   *
   * Where applicable, links to related KPI snapshots or benchmark records can
   * be referenced for context.
   *
   * @param connection
   * @param metricId Unique identifier of the outcome metric to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":metricId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("metricId")
    metricId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformOutcomeMetric> {
    try {
      return await gethealthcarePlatformDepartmentHeadOutcomeMetricsMetricId({
        departmentHead,
        metricId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
