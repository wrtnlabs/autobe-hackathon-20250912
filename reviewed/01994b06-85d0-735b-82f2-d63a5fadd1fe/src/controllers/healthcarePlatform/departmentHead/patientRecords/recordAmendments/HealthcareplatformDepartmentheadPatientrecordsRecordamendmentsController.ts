import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments } from "../../../../../providers/posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments";
import { DepartmentheadAuth } from "../../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../../decorators/payload/DepartmentheadPayload";
import { patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments } from "../../../../../providers/patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments";
import { gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId } from "../../../../../providers/gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId";
import { puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId } from "../../../../../providers/puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId";

import { IHealthcarePlatformRecordAmendment } from "../../../../../api/structures/IHealthcarePlatformRecordAmendment";
import { IPageIHealthcarePlatformRecordAmendment } from "../../../../../api/structures/IPageIHealthcarePlatformRecordAmendment";

@Controller(
  "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/recordAmendments",
)
export class HealthcareplatformDepartmentheadPatientrecordsRecordamendmentsController {
  /**
   * Create a new record amendment for a patient record.
   *
   * Create a new amendment to a patient record. Clinical staff, nurses, or
   * compliance officers may initiate an amendment when errors, updates, or
   * regulatory requests are identified. The operation requires a comprehensive
   * payload including type, rationale, before/after values, and related
   * encounter or reviewer if necessary.
   *
   * Security enforcement ensures only users with requisite clinical or
   * compliance roles within the organization/department may submit new
   * amendments. Business logic validates amendment feasibility, duplication,
   * and triggers review if required for certain amendment types (e.g.,
   * diagnosis, allergy). Soft delete markers on the patient record are checked
   * for compliance.
   *
   * Upon success, the operation returns the newly created amendment, which
   * reflects current workflow status (pending, approved, rejected), linkage to
   * the patient and potentially to an EHR encounter, and retains full audit
   * traceability. Failures (validation, permission, or constraint errors) will
   * return detailed reasons, especially in regulatory or review-required cases.
   * This endpoint supports the full amendment workflow lifecycle for medical
   * and audit compliance.
   *
   * @param connection
   * @param patientRecordId Target patient record to which the amendment applies
   * @param body Full amendment creation data, including amendment type,
   *   rationale, old/new state, and optionally encounter or reviewer ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRecordAmendment.ICreate,
  ): Promise<IHealthcarePlatformRecordAmendment> {
    try {
      return await posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments(
        {
          departmentHead,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated index of record amendments for a specific patient
   * record.
   *
   * Retrieve a filtered and paginated index of record amendments for a given
   * patient record. This endpoint allows compliance staff, department heads,
   * and clinical roles to audit the lifecycle of all changes, corrections, or
   * regulatory amendments to the patient's medical record.
   *
   * Security considerations require that users have appropriate RBAC permission
   * to view amendment history for the patient. Access is restricted by role and
   * organizational boundaries. All results are filtered to the requesting
   * user's access rights.
   *
   * The response structure includes paginated amendment data with amendment
   * metadata (type, status, submitter, rationale, old/new values) and can be
   * expanded by role permissions. Amendments under review, pending approval, or
   * rejected will contain their current status for workflow handling. Error
   * handling distinguishes between not found, not authorized, or query
   * constraint violations. If the patient record or amendments are soft
   * deleted, only appropriate admins will see historic data where compliant.
   *
   * This operation aligns with business rules requiring longitudinal
   * traceability and versioned record keeping for all PHI amendments,
   * supporting regulatory audits and clinical workflows.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record to query
   *   amendments for
   * @param body Search, filtering, and pagination criteria for record
   *   amendments linked to the patient record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRecordAmendment.IRequest,
  ): Promise<IPageIHealthcarePlatformRecordAmendment> {
    try {
      return await patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendments(
        {
          departmentHead,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details of a specific record amendment on a patient record.
   *
   * Retrieve full details of a specific record amendment for a patient record.
   * This operation provides clinical, audit, and workflow information required
   * for individual review and regulatory traceability. It exposes amendment
   * metadata (type, rationale, submitter, reviewer, old and new value
   * snapshots, approval status, timestamps, and related encounter), to
   * authorized requesters based on RBAC as configured for audit trail
   * visibility.
   *
   * Access is limited by role, organization, and department scope to ensure
   * privacy and compliance, with error responses if the amendment is not found,
   * the record ID does not match the amendment's patient association, or if the
   * user's permissions are insufficient. If the amendment is in a pending or
   * restricted status, additional review markers will be shown depending on
   * reviewer role.
   *
   * This operation directly supports business rules for amendment audit trail
   * and workflow compliance, empowering end-to-end regulatory review, and is
   * referenced in record update and compliance review flows.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the patient record
   * @param recordAmendmentId Unique identifier for the specific record
   *   amendment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recordAmendmentId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("recordAmendmentId")
    recordAmendmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRecordAmendment> {
    try {
      return await gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId(
        {
          departmentHead,
          patientRecordId,
          recordAmendmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing record amendment entry for a patient record.
   *
   * Update an existing record amendment for a patient record. Used by reviewers
   * (department heads, compliance staff) to approve, reject, or modify
   * rationale, value, or workflow status of a record amendment. Also supports
   * modification of amendment content where business rules allow, e.g.,
   * correction of fields, rationale updates, or reviewer assignment.
   *
   * Authorization is strictly enforced by user role and organizational/dept
   * assignment; only permitted roles may update amendment status or edit
   * content after initial creation. Approval workflows are triggered if the
   * amendment requires further review or additional compliance sign-off.
   * Attempts to update amendments for soft-deleted patient records will be
   * checked for regulatory compliance.
   *
   * Responses confirm updated entity details, workflow status, and audit
   * information. Business rules will prevent modification if amendment is
   * finalized, if the requester is not authorized, or if the update violates
   * compliance logic. Error handling clearly distinguishes between
   * authorization, business rule, and not found errors.
   *
   * @param connection
   * @param patientRecordId Identifier of the linked patient record
   * @param recordAmendmentId Unique identifier of the amendment entry to update
   * @param body Updated amendment data, including rationale, new/old value,
   *   approval, or reviewer info, as permitted by business rules
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":recordAmendmentId")
  public async update(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("recordAmendmentId")
    recordAmendmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRecordAmendment.IUpdate,
  ): Promise<IHealthcarePlatformRecordAmendment> {
    try {
      return await puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdRecordAmendmentsRecordAmendmentId(
        {
          departmentHead,
          patientRecordId,
          recordAmendmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
