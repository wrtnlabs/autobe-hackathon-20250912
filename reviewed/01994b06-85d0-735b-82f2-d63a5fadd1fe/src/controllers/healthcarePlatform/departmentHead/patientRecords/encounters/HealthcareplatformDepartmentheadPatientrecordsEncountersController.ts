import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters } from "../../../../../providers/posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters";
import { DepartmentheadAuth } from "../../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../../decorators/payload/DepartmentheadPayload";
import { patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters } from "../../../../../providers/patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters";
import { gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId } from "../../../../../providers/gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId";
import { puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId } from "../../../../../providers/puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId";

import { IHealthcarePlatformEhrEncounter } from "../../../../../api/structures/IHealthcarePlatformEhrEncounter";
import { IPageIHealthcarePlatformEhrEncounter } from "../../../../../api/structures/IPageIHealthcarePlatformEhrEncounter";

@Controller(
  "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters",
)
export class HealthcareplatformDepartmentheadPatientrecordsEncountersController {
  /**
   * Create a new EHR encounter for a specific patient record.
   *
   * This endpoint allows an authorized clinical user to create a new encounter
   * event for a patient record, writing a new row in the
   * healthcare_platform_ehr_encounters schema. Required input includes
   * encounter type (office_visit, inpatient, telemedicine, emergency, etc.),
   * provider assignment, start/end times, status, and any initial clinical
   * notes or context. The operation enforces all business validation, including
   * role-based initiation checks and regulatory field completeness (e.g.,
   * provider ID, encounter type, clinical summary as applicable).
   *
   * Sensitive logic such as workflow/encounter status, assignment, and audit
   * trail integration are executed in accordance with the business rules cited
   * in the requirements analysis. The endpoint returns the newly created
   * encounter, including the generated encounterId and all initial data fields,
   * for immediate reference by the care team and schedule.
   *
   * This operation is strictly permissioned to clinical roles (doctors, nurses)
   * or organization/department leadership, according to RBAC and
   * patient/department assignment. All creation attempts are logged according
   * to audit/compliance strategy.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record to which the
   *   new encounter will be added.
   * @param body Data required to create a new clinical or administrative EHR
   *   encounter for the patient record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEhrEncounter.ICreate,
  ): Promise<IHealthcarePlatformEhrEncounter> {
    try {
      return await posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters(
        {
          departmentHead,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of patient encounters.
   *
   * This API endpoint allows authorized users to retrieve all EHR encounters
   * for a given patient record as a paginated and searchable list. It
   * references the healthcare_platform_ehr_encounters table and includes
   * parameters such as encounter type (office_visit, telemedicine, inpatient),
   * provider, status, and time window. The operation supports sorting and
   * pagination to efficiently browse extensive encounter histories.
   *
   * Access to this endpoint is restricted based on RBAC and patient consent
   * status, with additional compliance requirements for audit trail and access
   * purpose logging (as described in the schema and regulatory requirements).
   * Sensitive patient data is redacted or filtered depending on the requester's
   * role. The response provides only summary information per encounter for list
   * views; detailed clinical data is available at the encounter detail
   * endpoint. All queries on this resource are indexed for performance and
   * compliance review.
   *
   * The operation fully aligns with the business logic and audit requirements
   * described in the requirements analysis, enforcing privacy, compliance, and
   * role-based data access for longitudinal patient record navigation.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record whose
   *   encounters are being queried.
   * @param body Search and pagination criteria for EHR encounter listing (e.g.,
   *   date ranges, types, providers, status).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEhrEncounter.IRequest,
  ): Promise<IPageIHealthcarePlatformEhrEncounter.ISummary> {
    try {
      return await patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncounters(
        {
          departmentHead,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific patient encounter by ID.
   *
   * This API endpoint allows authorized users to access full details for a
   * single EHR encounter belonging to a patient record, referencing the
   * healthcare_platform_ehr_encounters schema and associated foreign key data
   * (provider, notes, encounter type, timestamps, and audit metadata). The
   * endpoint returns all available structured and narrative data for the
   * encounter, used for medical/legal review, care coordination, and compliance
   * audits.
   *
   * Access controls are enforced by role (medicalDoctor, nurse,
   * organizationAdmin) and on the basis of patient consent and regulatory
   * requirements. Only appropriate users may view detailed records; sensitive
   * or restricted information is filtered for non-clinical requesters. This
   * endpoint complements the encounter index/list operation, providing
   * drill-down detail for a specific clinical event, and triggers access
   * logging/auditing per compliance policy described in the requirements
   * documentation and schema comments.
   *
   * Error handling includes clear responses for unauthorized access, not found,
   * or record lock/workflow conflicts. All detail retrievals are logged for
   * downstream audit, and response schema always matches current EHR encounter
   * detail structure.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record containing
   *   the encounter.
   * @param encounterId Unique identifier of the EHR encounter to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":encounterId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformEhrEncounter> {
    try {
      return await gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId(
        {
          departmentHead,
          patientRecordId,
          encounterId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing EHR encounter for a patient record.
   *
   * This API endpoint allows an authorized user to amend or update an existing
   * EHR encounter for a patient record, identified by patientRecordId and
   * encounterId. The operation references the
   * healthcare_platform_ehr_encounters schema, supporting updates to encounter
   * type, timing, provider assignment, clinical notes, and status. All changes
   * trigger a new version (tracked in EHR versions) and comprehensive audit
   * logging in accordance with business and regulatory policy.
   *
   * Role-based access controls ensure that only clinicians, nurses, or
   * departmental/organizational leadership can perform modification. Validation
   * logic includes status workflow checks (e.g., completed, locked, in-review),
   * field completeness, and approval where applicable. All update attempts are
   * logged with user identity and rationale per the audit/compliance framework.
   * Errors for business rule violations, locked records, or audit holds are
   * returned with actionable remediation.
   *
   * On success, the endpoint returns the updated encounter object reflecting
   * all modifications and the new effective state. This operation is critical
   * for accurate, auditable, and legal recordkeeping as detailed in the
   * requirements documentation and schema.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record containing
   *   the encounter to update.
   * @param encounterId Unique identifier of the EHR encounter to be updated.
   * @param body Fields to amend or update on the existing encounter (type,
   *   timing, status, provider, clinical notes, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":encounterId")
  public async update(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEhrEncounter.IUpdate,
  ): Promise<IHealthcarePlatformEhrEncounter> {
    try {
      return await puthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterId(
        {
          departmentHead,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
