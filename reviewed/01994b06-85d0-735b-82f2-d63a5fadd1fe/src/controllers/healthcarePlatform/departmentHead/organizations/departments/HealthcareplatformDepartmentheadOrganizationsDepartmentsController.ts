import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId } from "../../../../../providers/puthealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId";
import { DepartmentheadAuth } from "../../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../../decorators/payload/DepartmentheadPayload";
import { deletehealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId } from "../../../../../providers/deletehealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId";

import { IHealthcarePlatformDepartment } from "../../../../../api/structures/IHealthcarePlatformDepartment";

@Controller(
  "/healthcarePlatform/departmentHead/organizations/:organizationId/departments/:departmentId",
)
export class HealthcareplatformDepartmentheadOrganizationsDepartmentsController {
  /**
   * Update an existing department entity for a given organization
   * (healthcare_platform_departments table).
   *
   * This endpoint is used by authorized organizational administrators to update
   * the key properties of a department within a healthcare organization.
   * Updates may include altering the department code, display name, status
   * (active, suspended, archived), organizational association, and timestamps.
   * The operation enforces strict auditabilityâ€”every change is recorded with
   * before and after states, as required by compliance policies.
   *
   * Authorization must be checked to ensure only organization admins and
   * department heads with proper rights and current assignments may update this
   * resource. The operation enforces business logic to prevent breaking unique
   * constraints (such as unique (organization_id, code) per department) and
   * forbids modification if the department is currently locked (for audit or
   * legal hold).
   *
   * Full validation logic ensures that department information aligns with its
   * parent organization's policies. Attempts to update deleted, retired, or
   * archived departments are rejected. Success returns the updated department
   * entity with all fields as defined in the Prisma schema. Errors are handled
   * robustly with clear responses for constraint, permission, and not-found
   * failures.
   *
   * @param connection
   * @param organizationId Globally unique identifier of the target organization
   *   in which the department resides.
   * @param departmentId Globally unique identifier of the target department to
   *   update.
   * @param body Fields to update in the department. Must match the updatable
   *   fields as defined in IHealthcarePlatformDepartment.IUpdate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedParam("departmentId")
    departmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDepartment.IUpdate,
  ): Promise<IHealthcarePlatformDepartment> {
    try {
      return await puthealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId(
        {
          departmentHead,
          organizationId,
          departmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a department entity for a given organization
   * (healthcare_platform_departments table) by setting the deleted_at
   * timestamp.
   *
   * This endpoint is intended for use by authorized organization admins and
   * department heads to delete a department from a healthcare organization. It
   * performs either a soft or hard delete based on the presence of a
   * 'deleted_at' column: here, as per the Prisma schema, deleted_at is present,
   * so the operation will set this timestamp instead of physically removing the
   * record to fulfill audit and compliance requirements.
   *
   * The operation validates that the department is not under legal hold or
   * audit lock and that there are no in-progress resources or active
   * assignments that would block deletion. All dependent records are handled
   * per defined referential integrity policies (cascading, restriction, etc.)
   * as specified in the underlying Prisma schema.
   *
   * When successful, the department is marked as deleted (with 'deleted_at'
   * set), effectively removing it from active lists but preserving it for
   * compliance retention and recovery. A robust error handling process informs
   * users if deletion is forbidden, blocked by business logic, or if the
   * department does not exist.
   *
   * @param connection
   * @param organizationId Globally unique identifier of the target
   *   organization.
   * @param departmentId Globally unique identifier of the department to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedParam("departmentId")
    departmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformDepartmentHeadOrganizationsOrganizationIdDepartmentsDepartmentId(
        {
          departmentHead,
          organizationId,
          departmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
