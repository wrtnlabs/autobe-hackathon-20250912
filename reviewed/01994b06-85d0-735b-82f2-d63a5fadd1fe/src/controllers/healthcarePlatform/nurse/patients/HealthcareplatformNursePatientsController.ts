import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformNursePatientsPatientId } from "../../../../providers/gethealthcarePlatformNursePatientsPatientId";
import { NurseAuth } from "../../../../decorators/NurseAuth";
import { NursePayload } from "../../../../decorators/payload/NursePayload";

import { IHealthcarePlatformPatient } from "../../../../api/structures/IHealthcarePlatformPatient";

@Controller("/healthcarePlatform/nurse/patients/:patientId")
export class HealthcareplatformNursePatientsController {
  /**
   * Retrieve a specific patient profile by patientId from
   * healthcare_platform_patients.
   *
   * Retrieve a single patient user profile by specifying the unique patientId.
   * This operation is used to display or process detailed patient information
   * as stored in the healthcare_platform_patients table, including core
   * attributes (email, full_name, date_of_birth, phone, created_at, updated_at,
   * and deleted_at fields). Only active (not soft-deleted) records are
   * returned, and the operation enforces strict tenant data isolationâ€”users can
   * only access patients within their organization context.
   *
   * Security and audit rules require that only roles with appropriate
   * permission, such as medicalDoctor, nurse, organizationAdmin, receptionist,
   * and the patient themselves, can access the profile, with all access events
   * logged for compliance and traceability. Attempts to view patient profiles
   * outside scope or organization boundaries are denied and audited per
   * policy.
   *
   * This GET endpoint is intended for use alongside related API endpoints that
   * reference patients, such as listing their appointments or billing status.
   * It handles errors for not found, unauthorized, or deleted records and
   * surfaces audit trail entries as required for regulatory compliance.
   *
   * @param connection
   * @param patientId Unique identifier of the target patient user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await gethealthcarePlatformNursePatientsPatientId({
        nurse,
        patientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
