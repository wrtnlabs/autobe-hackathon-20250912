import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminComplianceReviews } from "../../../../providers/posthealthcarePlatformSystemAdminComplianceReviews";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminComplianceReviews } from "../../../../providers/patchhealthcarePlatformSystemAdminComplianceReviews";
import { gethealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId } from "../../../../providers/gethealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId";
import { puthealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId } from "../../../../providers/puthealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId";
import { deletehealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId } from "../../../../providers/deletehealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId";

import { IHealthcarePlatformComplianceReview } from "../../../../api/structures/IHealthcarePlatformComplianceReview";
import { IPageIHealthcarePlatformComplianceReview } from "../../../../api/structures/IPageIHealthcarePlatformComplianceReview";

@Controller("/healthcarePlatform/systemAdmin/complianceReviews")
export class HealthcareplatformSystemadminCompliancereviewsController {
  /**
   * Create a new compliance review (healthcare_platform_compliance_reviews
   * table).
   *
   * Create a new compliance review entry to initiate formal audit or compliance
   * review workflows within the healthcare_platform_compliance_reviews table.
   * The operation ensures all required properties are supplied as per
   * schemaâ€”linking to either a legal hold or risk assessment, assigning the
   * reviewer role, providing method and status, and attaching all relevant
   * metadata and initial comments. Only authorized personnel (system or
   * organization admins with compliance privileges) are permitted to use this
   * operation.
   *
   * Security and business rules enforce uniqueness where needed (e.g., only one
   * active compliance review per hold/risk assessment/period), validate
   * reviewer assignments, and capture systematic audit logs for the review's
   * creation. Comprehensive error handling covers domain validation failures
   * and permission issues.
   *
   * Upon successful creation, the complete new compliance review entity is
   * returned, ready for workflow progression and further updates by assigned
   * users.
   *
   * @param connection
   * @param body Data required to create a new compliance review record,
   *   following the IHealthcarePlatformComplianceReview.ICreate request body
   *   specification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceReview.ICreate,
  ): Promise<IHealthcarePlatformComplianceReview> {
    try {
      return await posthealthcarePlatformSystemAdminComplianceReviews({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate compliance review events
   * (healthcare_platform_compliance_reviews).
   *
   * Performs advanced search and retrieval of compliance review records in the
   * healthcarePlatform. This may include reviews for legal holds, risk
   * assessments, periodic audits, regulatory investigations, or internal
   * compliance checks. Users provide a request body specifying complex search
   * filters (review status, type, organization, reviewer, date ranges,
   * outcomes, etc.) and pagination controls.
   *
   * Security: Only users with systemAdmin, organizationAdmin, or
   * compliance-specific roles can access this API. The operation enforces
   * strict filtering to ensure users only see reviews within their organization
   * or department scope. Data is returned in paginated form; each review
   * exposes full audit/compliance metadata.
   *
   * Integration: Often used by compliance teams to aggregate results prior to
   * reporting or regulatory export. Related APIs include legalHold and
   * riskAssessment operations, audit log exports, and notifications for new
   * review findings.
   *
   * @param connection
   * @param body Search/filter and pagination criteria for compliance review
   *   aggregation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceReview.IRequest,
  ): Promise<IPageIHealthcarePlatformComplianceReview> {
    try {
      return await patchhealthcarePlatformSystemAdminComplianceReviews({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a compliance review by its ID
   * (healthcare_platform_compliance_reviews table).
   *
   * Retrieve a single compliance review record by its unique identifier from
   * the healthcare_platform_compliance_reviews table. This operation is
   * intended for users such as compliance officers, organization admins, or
   * assigned reviewers who need full visibility into a particular compliance
   * review's metadata, method, scope, status, and audit trail linkage.
   *
   * Security controls require that the operation is only accessible to users
   * with explicit audit, compliance, or administrative permissions. Every
   * access is logged for traceability and compliance monitoring according to
   * HIPAA and internal audit standards. All fields returned reflect the
   * underlying Prisma schema for the compliance review entity, ensuring that
   * sensitive notes and recommendations are properly presented based on the
   * user's authorization and organizational context.
   *
   * This operation is expected to be used in conjunction with listing endpoints
   * (for browsing reviews) and workflow endpoints (for progressing the review's
   * lifecycle). When the requested record is not found or the caller lacks
   * sufficient permissions, an appropriate error message and audit event are
   * generated.
   *
   * @param connection
   * @param complianceReviewId Unique identifier (UUID) of the compliance review
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceReviewId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceReviewId")
    complianceReviewId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformComplianceReview> {
    try {
      return await gethealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId(
        {
          systemAdmin,
          complianceReviewId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a compliance review record by its ID
   * (healthcare_platform_compliance_reviews table).
   *
   * Update the details of an existing compliance review. This operation is
   * intended for compliance staff, administrators, or assigned reviewers who
   * need to progress a review's workflow, finalize status, document outcome, or
   * add recommendations based on new information.
   *
   * Strong validation logic is applied: only fields permitted by the record's
   * current lifecycle status may be updated, and changes are constrained to
   * avoid accidental loss of regulatory or audit-critical data. Each update
   * triggers a new audit log entry, and all field changes are captured with
   * timestamps.
   *
   * Operation errors include validation for immutable or restricted fields,
   * permission checks, and UUID-based record not-found scenarios.
   *
   * @param connection
   * @param complianceReviewId Unique identifier (UUID) of the compliance review
   *   record to update.
   * @param body Fields to update in the compliance review record, following
   *   IHealthcarePlatformComplianceReview.IUpdate specification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":complianceReviewId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceReviewId")
    complianceReviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformComplianceReview.IUpdate,
  ): Promise<IHealthcarePlatformComplianceReview> {
    try {
      return await puthealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId(
        {
          systemAdmin,
          complianceReviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (soft delete) a compliance review record by ID
   * (healthcare_platform_compliance_reviews table).
   *
   * Soft delete (erase) a compliance review by its unique identifier (UUID).
   * The operation marks the compliance review record as deleted by setting its
   * deleted_at field, without actually removing it from the database. This
   * design aligns with regulatory and audit requirements for data retention and
   * review, ensuring that soft-deleted records remain available for audit but
   * are hidden from standard lists and UIs.
   *
   * The erasure is only permitted for users with explicit
   * administrative/compliance privileges, and every deletion event is logged
   * for compliance review. Soft deleted records can be restored if policy
   * allows, but generally cannot be erased permanently except by explicit
   * compliance processes. Errors generated include non-existent records, lack
   * of sufficient privilege, or attempts to delete reviews that are locked for
   * active legal or regulatory action.
   *
   * @param connection
   * @param complianceReviewId Unique identifier (UUID) of the compliance review
   *   record to erase (soft delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":complianceReviewId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceReviewId")
    complianceReviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminComplianceReviewsComplianceReviewId(
        {
          systemAdmin,
          complianceReviewId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
