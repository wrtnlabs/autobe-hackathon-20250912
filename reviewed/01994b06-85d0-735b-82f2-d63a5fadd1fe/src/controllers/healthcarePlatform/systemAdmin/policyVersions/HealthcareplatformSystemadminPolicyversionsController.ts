import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminPolicyVersions } from "../../../../providers/posthealthcarePlatformSystemAdminPolicyVersions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminPolicyVersions } from "../../../../providers/patchhealthcarePlatformSystemAdminPolicyVersions";
import { gethealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId } from "../../../../providers/gethealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId";
import { puthealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId } from "../../../../providers/puthealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId";
import { deletehealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId } from "../../../../providers/deletehealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId";

import { IHealthcarePlatformPolicyVersion } from "../../../../api/structures/IHealthcarePlatformPolicyVersion";
import { IPageIHealthcarePlatformPolicyVersion } from "../../../../api/structures/IPageIHealthcarePlatformPolicyVersion";

@Controller("/healthcarePlatform/systemAdmin/policyVersions")
export class HealthcareplatformSystemadminPolicyversionsController {
  /**
   * Create a new policy version entry in healthcare_platform_policy_versions
   * for compliance and legal management.
   *
   * Create a new policy version entity. The operation takes full policy version
   * details such as type, version, organization linkage, effective and expire
   * dates, document title, document URI, and (optionally) cryptographic hash
   * for audit. Requests are validated for uniqueness within org/policy scope,
   * timestamp logic (expiry after effectivity), and required fields. Upon
   * successful creation, the new policy version is available for referencing in
   * compliance consents, agreements, and system legal workflows.
   *
   * This API is restricted to compliance officers and system/organization
   * administrators, and all operations are audit-logged. Linked document URIs
   * must be accessible by compliance policy, and policy
   * type/version/organization combinations must be unique as enforced in the
   * Prisma schema. Validation errors return actionable feedback for business
   * and compliance correction. Usage and error events are recorded for
   * regulatory oversight.
   *
   * @param connection
   * @param body Policy version details for additionâ€”including policy type,
   *   version, title, effective/expire dates, URI, and (optionally) hash.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPolicyVersion.ICreate,
  ): Promise<IHealthcarePlatformPolicyVersion> {
    try {
      return await posthealthcarePlatformSystemAdminPolicyVersions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate healthcare policy version records from the compliance
   * catalog (healthcare_platform_policy_versions).
   *
   * Retrieve a filtered and paginated list of policy versions. This endpoint
   * serves compliance, administrative, and audit use cases, empowering users to
   * discover which legal or operational policy versions are active for an
   * organization or department, and supports full-text search on titles and
   * semantic versioning. Sensitive to system-wide, organization- and
   * department-level scoping, this API confirms role permissions per
   * organizational boundaries.
   *
   * All fields from healthcare_platform_policy_versions are exposed for search
   * and display according to the user's role and allowed tenant. Policy
   * versions may be filtered by type, version label, effective or expiration
   * dates, or status (expired, active). If the requesting user is not
   * authorized for a particular organization, the API silently omits restricted
   * data. This search operation supports standard pagination and sorting on
   * date or title fields.
   *
   * Validation ensures query parameters are structurally valid according to
   * schema. System audit logs will record query usage for compliance reporting.
   * Related API operations include: create, update, or retrieve policy version
   * detail. Error responses reflect standard compliance/permission boundaries.
   *
   * @param connection
   * @param body Paginated search, filter, and sort parameters for policy
   *   version listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPolicyVersion.IRequest,
  ): Promise<IPageIHealthcarePlatformPolicyVersion.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminPolicyVersions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch detailed information about a specific healthcare policy version
   * entity from healthcare_platform_policy_versions.
   *
   * Retrieve full details for a policy version by its unique identifier. This
   * includes fields such as policy type, version label, effective and
   * expiration dates, full document URI, hash for audit, and metadata. The data
   * model is mapped directly to the Prisma model
   * healthcare_platform_policy_versions, ensuring audit-grade traceability.
   *
   * Access is granted only to users with appropriate compliance or
   * administrative roles for the organization that owns the policy version.
   * This API is used for legal review, patient consent enforcement, and
   * supporting evidence during regulatory audits. Usage is always logged for
   * compliance tracking.
   *
   * Request validation ensures the version ID format matches UUID standards.
   * Policy version records with restricted access are not displayed to
   * unauthorized users, and the system complies fully with tenant isolation
   * principles.
   *
   * @param connection
   * @param policyVersionId Unique identifier (UUID) of the target policy
   *   version to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":policyVersionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyVersionId")
    policyVersionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPolicyVersion> {
    try {
      return await gethealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId(
        {
          systemAdmin,
          policyVersionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a policy version entry in healthcare_platform_policy_versions,
   * allowing legal/compliance metadata correction and auditability.
   *
   * Update an existing policy version entity by its unique identifier. This
   * operation covers fields such as title, expiration date, document URI, hash,
   * or description, while preserving versioning and regulatory integrity.
   * Validation checks for conflicting versions, window logic (no expiry before
   * effective), and ensures organization/tenant boundaries. Only authorized
   * roles may invoke this endpoint; unauthorized attempts are blocked and
   * logged for compliance.
   *
   * Upon successful update, the policy version record reflects the new
   * metadata, and downstream consent agreements or legal references remain
   * linked to the same immutable version row. All changes are audit-logged.
   * Policy version update is a critical compliance function for ensuring policy
   * documents remain current, accessible, and regulation-ready.
   *
   * @param connection
   * @param policyVersionId Unique identifier (UUID) of the policy version
   *   entity to update.
   * @param body Partial or full update payload for policy version fields:
   *   title, effective window, document URI/hash, and organizational context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":policyVersionId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyVersionId")
    policyVersionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPolicyVersion.IUpdate,
  ): Promise<IHealthcarePlatformPolicyVersion> {
    try {
      return await puthealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId(
        {
          systemAdmin,
          policyVersionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific policy version by policyVersionId from the
   * healthcare_platform_policy_versions table.
   *
   * This API operation provides the ability to permanently remove a policy
   * version entry from the healthcare_platform_policy_versions table. Policy
   * versions track specific legal, regulatory, or business policy documents by
   * organization, and are referenced by patient or staff consents and
   * compliance agreements.
   *
   * When invoked, the operation expects a valid policyVersionId formatted as a
   * UUID to be provided in the route path. Upon execution, the API will target
   * and remove the specified policy version directly from the database.
   *
   * Security considerations mandate that only system or organization
   * administrators with explicit compliance permission may access this endpoint
   * due to the sensitive nature of compliance documentation. Any attempt to
   * erase a policy version that is currently referenced by active consents or
   * agreements may violate auditability or regulatory requirements;
   * implementers should verify referential integrity prior to deletion. The
   * operation implements a hard delete, as the schema does not include a
   * soft-delete field for the policy_versions model.
   *
   * This endpoint is not suitable for retire/archive behavior, which may be
   * implemented in future versions through a deleted_at or similar field, but
   * currently results in full removal of the record. All audit trails and
   * access logs should accurately record the actor, time, and policy details
   * involved in the deletion for compliance purposes.
   *
   * @param connection
   * @param policyVersionId Unique identifier of the policy version to delete
   *   (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":policyVersionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("policyVersionId")
    policyVersionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminPolicyVersionsPolicyVersionId(
        {
          systemAdmin,
          policyVersionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
