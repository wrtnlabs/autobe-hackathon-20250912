import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminLabIntegrations } from "../../../../providers/patchhealthcarePlatformSystemAdminLabIntegrations";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminLabIntegrationsLabIntegrationId } from "../../../../providers/gethealthcarePlatformSystemAdminLabIntegrationsLabIntegrationId";

import { IPageIHealthcarePlatformLabIntegration } from "../../../../api/structures/IPageIHealthcarePlatformLabIntegration";
import { IHealthcarePlatformLabIntegration } from "../../../../api/structures/IHealthcarePlatformLabIntegration";

@Controller("/healthcarePlatform/systemAdmin/labIntegrations")
export class HealthcareplatformSystemadminLabintegrationsController {
  /**
   * Retrieve a paginated, filtered list of lab integration connectors
   * (healthcare_platform_lab_integrations).
   *
   * Returns a paginated and filtered list of lab integration connection
   * definitions (for vendors such as LabCorp, Quest Diagnostics, or custom
   * labs) based on query parameters. This operation reads from the
   * healthcare_platform_lab_integrations table, supporting search and filtering
   * by vendor code, connection status, message format, and organization
   * assignment.
   *
   * Users require appropriate system or organizational privileges, and access
   * will be scoped to lab integrations in their assigned organizations. Results
   * are ordered and paginated according to standard list operation conventions,
   * and the request body can include search text, filter objects, or sorting
   * criteria.
   *
   * This operation is commonly used in administrative dashboards for
   * integration health, audit readiness, and onboarding workflows. It
   * complements individual lab integration detail retrieval, creation, update,
   * and deletion endpoints.
   *
   * @param connection
   * @param body Search and filter criteria for lab integration list retrieval,
   *   such as status, vendor code, organization.id, or
   *   supported_message_format.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLabIntegration.IRequest,
  ): Promise<IPageIHealthcarePlatformLabIntegration.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminLabIntegrations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the details of a specific lab integration connector
   * (healthcare_platform_lab_integrations).
   *
   * Fetches the full configuration and status details for a specific lab
   * integration point, corresponding to a row in the
   * healthcare_platform_lab_integrations table. The result includes lab vendor
   * identity, connection URI, supported formats, status, timestamps, and
   * metadata fields, supporting compliance review, integration setup, and
   * incident investigation.
   *
   * The operation is restricted to administrative users responsible for
   * maintaining or auditing lab connections, and the returned fields must match
   * the schema definition for lab integrations. The endpoint will return an
   * error response if the labIntegrationId does not exist or is not accessible
   * to the requesting user's organization.
   *
   * @param connection
   * @param labIntegrationId Unique identifier of the lab integration to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":labIntegrationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("labIntegrationId")
    labIntegrationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLabIntegration> {
    try {
      return await gethealthcarePlatformSystemAdminLabIntegrationsLabIntegrationId(
        {
          systemAdmin,
          labIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
