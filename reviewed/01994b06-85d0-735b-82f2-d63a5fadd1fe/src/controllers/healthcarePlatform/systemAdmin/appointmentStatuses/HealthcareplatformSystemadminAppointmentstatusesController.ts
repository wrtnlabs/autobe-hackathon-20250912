import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformSystemAdminAppointmentStatusesStatusId } from "../../../../providers/puthealthcarePlatformSystemAdminAppointmentStatusesStatusId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { deletehealthcarePlatformSystemAdminAppointmentStatusesStatusId } from "../../../../providers/deletehealthcarePlatformSystemAdminAppointmentStatusesStatusId";

import { IHealthcarePlatformAppointmentStatus } from "../../../../api/structures/IHealthcarePlatformAppointmentStatus";

@Controller("/healthcarePlatform/systemAdmin/appointmentStatuses/:statusId")
export class HealthcareplatformSystemadminAppointmentstatusesController {
  /**
   * Update an appointment status in healthcare_platform_appointment_statuses
   * table.
   *
   * This operation enables a system administrator or organization administrator
   * to update an appointment status, such as its human-readable label, workflow
   * grouping, or sort priority. It is strictly permissioned and requires that
   * 'statusId' is a valid UUID and the status must exist.
   *
   * If the appointment status is system-reserved, attempts to modify critical
   * codes are subject to further restriction. The operation will reject
   * modifications to non-existent, deleted, or non-schema fields. This is
   * essential for managing visible and operational status codes in complex
   * organizational workflows. Related endpoints include single status retrieval
   * (GET), deletion (DELETE), and status code search (PATCH or GET).
   *
   * @param connection
   * @param statusId Unique identifier of the appointment status to update
   * @param body Updated fields for appointment status, including display name,
   *   business status, or sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentStatus.IUpdate,
  ): Promise<IHealthcarePlatformAppointmentStatus> {
    try {
      return await puthealthcarePlatformSystemAdminAppointmentStatusesStatusId({
        systemAdmin,
        statusId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an appointment status (hard delete) from
   * healthcare_platform_appointment_statuses table.
   *
   * This operation permanently removes an appointment status from the platform,
   * restricted to system administrators and organization administrators. The
   * statusId parameter must be a valid UUID referencing an existing appointment
   * status.
   *
   * This operation is not reversible, and any attempt to delete a non-existent
   * or currently referenced status will be rejected. Associated appointments or
   * business logic using the status code should be reviewed before deletion.
   * Use this only for deprecated custom or misconfigured statuses. Related
   * endpoints include single status retrieval (GET), updating (PUT), and
   * listing all appointment statuses (PATCH/GET).
   *
   * @param connection
   * @param statusId Unique identifier of the appointment status to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminAppointmentStatusesStatusId(
        {
          systemAdmin,
          statusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
