import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminLegalHolds } from "../../../../providers/posthealthcarePlatformSystemAdminLegalHolds";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminLegalHoldsLegalHoldId } from "../../../../providers/puthealthcarePlatformSystemAdminLegalHoldsLegalHoldId";
import { deletehealthcarePlatformSystemAdminLegalHoldsLegalHoldId } from "../../../../providers/deletehealthcarePlatformSystemAdminLegalHoldsLegalHoldId";

import { IHealthcarePlatformLegalHold } from "../../../../api/structures/IHealthcarePlatformLegalHold";

@Controller("/healthcarePlatform/systemAdmin/legalHolds")
export class HealthcareplatformSystemadminLegalholdsController {
  /**
   * Create a new legal hold entry for regulatory, investigatory, or litigation
   * events (healthcare_platform_legal_holds).
   *
   * Creates a new legal hold entry. Healthcare organizations use legal holds
   * when a regulatory, investigatory, or legal event (such as a subpoena,
   * litigation, or compliance audit) requires freezing data. This operation
   * captures all necessary metadata: organization, imposed by, scope type
   * (e.g., patient, org, audit trail), subject entity (if any), business
   * justification for the hold, method (system/manual/legal), current status,
   * effective and expected release dates, and triggers audit and review
   * processes.
   *
   * Compliance implications: Legal holds ensure organizations do not
   * inadvertently delete or modify information subject to legal or regulatory
   * investigation. The operation checks role permissions to ensure only
   * authorized users (admins, compliance personnel) invoke this action. It must
   * capture sufficient context (organization, subject, method, reason, imposed
   * by, status) for full auditability and review.
   *
   * Links to other APIs: The hold can later be updated (PUT), revoked/deleted
   * (DELETE), or have reviews registered via complianceReview APIs. Attempted
   * access to held resources by ordinary users after a hold is created will be
   * denied and logged for auditing. Affected users will be notified by the
   * system via notification APIs.
   *
   * @param connection
   * @param body Details for the new legal hold, including organization id,
   *   affected subject(s), type, reason, imposed by, method, expected scope,
   *   and effective/release dates.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLegalHold.ICreate,
  ): Promise<IHealthcarePlatformLegalHold> {
    try {
      return await posthealthcarePlatformSystemAdminLegalHolds({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing legal hold record (healthcare_platform_legal_holds).
   *
   * Updates a legal hold's properties, such as status
   * (active/released/expired), reason, method, or scope fields. Used by
   * compliance admins or system administrators when a legal hold requirement
   * changesâ€”such as updating release criteria, expanding or narrowing hold
   * scope, or releasing the hold. This operation ensures that all updates are
   * recorded in detail, with audit trails for each change, in compliance with
   * HIPAA/SOC2 obligations for evidence preservation and traceability.
   *
   * Security and authorization: Update privileges are restricted to users with
   * elevated compliance or admin roles. All updates include before/after data
   * in the record audit log. The update is allowed only if the legal hold
   * exists and is not locked/archived.
   *
   * Relationships: This is typically followed by notifications to stakeholders,
   * and triggers workflow changes in downstream data/processes. Errors are
   * raised on attempts to update non-existent/locked legal holds, or for
   * unauthorized users.
   *
   * @param connection
   * @param legalHoldId Unique identifier of the legal hold record to update.
   * @param body Fields to update for the legal hold (status, dates, reason,
   *   method, scope, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":legalHoldId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("legalHoldId")
    legalHoldId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLegalHold.IUpdate,
  ): Promise<IHealthcarePlatformLegalHold> {
    try {
      return await puthealthcarePlatformSystemAdminLegalHoldsLegalHoldId({
        systemAdmin,
        legalHoldId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Archive or erase a legal hold entry (soft delete for audit purposes)
   * (healthcare_platform_legal_holds).
   *
   * Deactivates or archives a legal hold in the system. This action restricts
   * any further use of the hold in enforcing data locks, but preserves the full
   * record for compliance requirements. Actual data removal (hard delete) is
   * only done if permitted by organizational/legal policy; otherwise, the
   * deleted_at field is set for soft deletion (retention in history).
   *
   * Security and compliance: Only systemAdmin or organizationAdmin users may
   * erase legal holds, and the action is always logged with actor, reason, and
   * affected data. The API does not allow deletion of a hold if there are
   * ongoing dependent reviews/investigations unless an explicit override is
   * present. Attempting to erase a non-existent or locked hold results in a
   * permission error. Usage is highly restricted to avoid accidental loss of
   * compliance data.
   *
   * Business process: After erasure, downstream systems are notified to release
   * data locks and update audit records. Compliance staff may be notified as
   * part of the process.
   *
   * @param connection
   * @param legalHoldId Unique identifier of the legal hold record to archive or
   *   erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":legalHoldId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("legalHoldId")
    legalHoldId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminLegalHoldsLegalHoldId({
        systemAdmin,
        legalHoldId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
