import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminDeviceDataIngestions } from "../../../../providers/posthealthcarePlatformSystemAdminDeviceDataIngestions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminDeviceDataIngestions } from "../../../../providers/patchhealthcarePlatformSystemAdminDeviceDataIngestions";
import { gethealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId } from "../../../../providers/gethealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId";
import { puthealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId } from "../../../../providers/puthealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId";
import { deletehealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId } from "../../../../providers/deletehealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId";

import { IHealthcarePlatformDeviceDataIngestion } from "../../../../api/structures/IHealthcarePlatformDeviceDataIngestion";
import { IPageIHealthcarePlatformDeviceDataIngestion } from "../../../../api/structures/IPageIHealthcarePlatformDeviceDataIngestion";

@Controller("/healthcarePlatform/systemAdmin/deviceDataIngestions")
export class HealthcareplatformSystemadminDevicedataingestionsController {
  /**
   * Create a new device data ingestion configuration in
   * healthcare_platform_device_data_ingestions.
   *
   * Create a new device data ingestion configuration in the
   * healthcare_platform_device_data_ingestions table.
   *
   * This operation is intended for technical administrators or platform owners
   * to onboard a new data source or medical device. Users provide all required
   * configuration parameters such as the organization, device type (e.g.,
   * vital_monitor, ECG), endpoint URI, protocol, and any other required
   * operational settings. Once created, this record enables the
   * healthcarePlatform to accept and process device data per configured
   * protocol and security guidelines.
   *
   * Proper validation is enforced: endpoint URI must be unique within the
   * organizational context, and protocol/device_type combinations must follow
   * business logic and supported platform standards. Only roles with
   * administrative or technical authority (typically organizationAdmin or
   * systemAdmin) can perform this operation. Error responses will indicate
   * missing/invalid parameters, or conflicts with existing configurations.
   * Auditing of creation is mandatory for compliance traceability.
   *
   * @param connection
   * @param body Configuration data required to define a new device data
   *   ingestion endpoint (device type, endpoint URI, protocol, status,
   *   organization context).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDeviceDataIngestion.ICreate,
  ): Promise<IHealthcarePlatformDeviceDataIngestion> {
    try {
      return await posthealthcarePlatformSystemAdminDeviceDataIngestions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List device data ingestion integrations with paging and filtering.
   *
   * Retrieve a searchable and paginated list of device data ingestion
   * configurations, filtering by attributes such as organization, device type,
   * protocol, or status. This supports management and inventory of all
   * real-time and streaming health device ingestion points.
   *
   * Security boundaries ensure that only system admins or organization admins
   * with adequate permissions can access and search device ingestion
   * integration data, which may expose sensitive integration endpoints.
   *
   * Supports sorting and filtering for compliance, incident response, or
   * dashboarding purposes. The operation is critical for enabling safe,
   * audited, and reliable device connectivity throughout the healthcare
   * platform.
   *
   * @param connection
   * @param body Search criteria and pagination settings for device data
   *   ingestion integrations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDeviceDataIngestion.IRequest,
  ): Promise<IPageIHealthcarePlatformDeviceDataIngestion> {
    try {
      return await patchhealthcarePlatformSystemAdminDeviceDataIngestions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific device data ingestion configuration by ID from
   * healthcare_platform_device_data_ingestions table.
   *
   * Fetch detailed information for a single device data ingestion configuration
   * from the healthcare_platform_device_data_ingestions table by unique ID.
   *
   * This operation allows internal or technical users (such as
   * organization/system administrators or IT personnel) to view all
   * configuration, protocol, endpoint, status, and last-update details of a
   * device data ingestion integration. This includes verifying device/protocol
   * compatibility, investigating operational status, and ensuring that
   * onboarded ingestion endpoints are compliant and up-to-date as required by
   * technical and compliance workflows.
   *
   * Security considerations ensure that only roles with appropriate system or
   * technical privileges can access details of device integrations, as these
   * often impact data ingress, clinical safety, and auditability. The operation
   * is critical for troubleshooting integration failures, preparing compliance
   * reviews, or auditing device configuration records. If the record ID does
   * not exist or is not accessible due to RBAC, an appropriate error or not
   * found message will be returned.
   *
   * @param connection
   * @param deviceDataIngestionId Unique identifier (UUID) of the device data
   *   ingestion record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deviceDataIngestionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deviceDataIngestionId")
    deviceDataIngestionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDeviceDataIngestion> {
    try {
      return await gethealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId(
        {
          systemAdmin,
          deviceDataIngestionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing device data ingestion configuration by ID in
   * healthcare_platform_device_data_ingestions.
   *
   * Modify an existing device data ingestion integration record by ID in the
   * healthcare_platform_device_data_ingestions table.
   *
   * The operation allows technical administrators to update endpoint URI,
   * supported device type, protocol, status, and other mutable properties. This
   * is typically performed when the medical device is upgraded, endpoint
   * details change, or integration protocol requirements are updated.
   * Comprehensive validation ensures only compatible updates are applied,
   * considering business and compliance rules on data integration.
   *
   * Roles with administrative privileges (e.g., systemAdmin, organizationAdmin)
   * are authorized to use this operation. The operation enforces audit trails,
   * and rejects attempts when the record does not exist or if updates would
   * conflict with uniqueness or protocol support requirements. Errors are
   * reported clearly in case of conflicts, missing records, or validation
   * failures.
   *
   * @param connection
   * @param deviceDataIngestionId Unique identifier (UUID) of the device data
   *   ingestion record to be updated.
   * @param body Properties of the device data ingestion configuration to modify
   *   (endpoint, device type, supported protocol, operational status, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":deviceDataIngestionId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deviceDataIngestionId")
    deviceDataIngestionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDeviceDataIngestion.IUpdate,
  ): Promise<IHealthcarePlatformDeviceDataIngestion> {
    try {
      return await puthealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId(
        {
          systemAdmin,
          deviceDataIngestionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a device data ingestion configuration by ID from
   * healthcare_platform_device_data_ingestions (hard delete).
   *
   * Permanently delete a device data ingestion configuration, specified by its
   * unique ID, from the healthcare_platform_device_data_ingestions table.
   *
   * This operation is used when a device integration is decommissioned, failed,
   * has been replaced, or poses compliance risk. The operation ensures that the
   * configuration and its endpoint are removed from the system, stopping future
   * data flows and maintaining a clean administrative and compliance surface.
   * Deletions are fully reflected in the audit trail as required for medical
   * device compliance and operational accountability.
   *
   * This operation is restricted to roles with high privilege (systemAdmin,
   * organizationAdmin). Attempts to delete a nonexistent or inaccessible record
   * (from wrong organization or insufficient RBAC) will result in error
   * responses specifying the cause. There is no undelete; removal is immediate
   * and permanent within the active database.
   *
   * @param connection
   * @param deviceDataIngestionId Unique identifier (UUID) of the device data
   *   ingestion record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":deviceDataIngestionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deviceDataIngestionId")
    deviceDataIngestionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminDeviceDataIngestionsDeviceDataIngestionId(
        {
          systemAdmin,
          deviceDataIngestionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
