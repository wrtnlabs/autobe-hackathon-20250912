import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId } from "../../../../providers/gethealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId } from "../../../../providers/puthealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId";
import { deletehealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId } from "../../../../providers/deletehealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId";
import { posthealthcarePlatformSystemAdminComplianceAgreements } from "../../../../providers/posthealthcarePlatformSystemAdminComplianceAgreements";

import { IHealthcarePlatformComplianceAgreement } from "../../../../api/structures/IHealthcarePlatformComplianceAgreement";

@Controller("/healthcarePlatform/systemAdmin/complianceAgreements")
export class HealthcareplatformSystemadminComplianceagreementsController {
  /**
   * Get a specific compliance agreement from
   * healthcare_platform_compliance_agreements by ID.
   *
   * This operation retrieves all details for a single compliance agreement,
   * including agreement type, signer, associated organization, policy version,
   * status, signature date and method, expiration, and audit fields. It is
   * based on the healthcare_platform_compliance_agreements table, enabling
   * compliance and administrative personnel to validate that required policies
   * have been signed, and presents adequate context for regulatory review.
   *
   * Sensitive details such as signature method and expiration are returned,
   * supporting full compliance with internal and external audit requirements.
   * Authorization checks ensure only users with appropriate organization or
   * compliance roles may access this endpoint. Related business operations
   * include listing agreements by organization or user and updating agreement
   * status through regulated workflows.
   *
   * Access is strictly controlled according to role matrix and audit policy to
   * ensure that only authorized individuals (e.g., compliance staff, system
   * administrators) can view agreement details for compliance, legal, or
   * administrative review purposes.
   *
   * @param connection
   * @param complianceAgreementId Unique identifier for the compliance agreement
   *   record (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceAgreementId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceAgreementId")
    complianceAgreementId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformComplianceAgreement> {
    try {
      return await gethealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId(
        {
          systemAdmin,
          complianceAgreementId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details for an existing compliance agreement in
   * healthcare_platform_compliance_agreements.
   *
   * This operation modifies one or more fields of an existing compliance
   * agreement record (such as status, method, expiration, or signer metadata)
   * based on its UUID. It is grounded in the
   * healthcare_platform_compliance_agreements schema, allowing for lifecycle
   * events such as withdrawal, update of method, or compliance-driven changes.
   * All updates are strictly controlled, requiring appropriate role-based
   * permissions and organizational context validation.
   *
   * The operation supports only allowable legal amendments (as per business
   * rules): status changes (e.g., from pending to signed or withdrawn),
   * signature update (in the case of method change), or agreement expiry
   * extension/closure. It never allows modification of immutable historical
   * fields or retroactive changes to signed timestamps.
   *
   * Each update request results in a comprehensive audit event in accordance
   * with internal and regulatory requirements. Access is reserved to compliance
   * administrators or system administrators. Operation is tightly integrated
   * with compliance audit and notification workflows.
   *
   * @param connection
   * @param complianceAgreementId UUID of the compliance agreement record to
   *   update.
   * @param body Fields to update in the compliance agreement as per
   *   IHealthcarePlatformComplianceAgreement.IUpdate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":complianceAgreementId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceAgreementId")
    complianceAgreementId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformComplianceAgreement.IUpdate,
  ): Promise<IHealthcarePlatformComplianceAgreement> {
    try {
      return await puthealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId(
        {
          systemAdmin,
          complianceAgreementId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete a compliance agreement
   * (healthcare_platform_compliance_agreements) by ID.
   *
   * This operation physically removes a compliance agreement record from the
   * healthcare_platform_compliance_agreements table based on its UUID. As the
   * table does not contain soft-delete logic (no dedicated deleted_at field in
   * the schema), the operation conducts a permanent, irreversible deletion. Use
   * is strictly limited to situations where business, legal, or compliance
   * requirements mandate removal, often after required retention periods are
   * satisfied or data subject requests under applicable law are validated.
   *
   * Deletion is strictly role-restricted to compliance or system
   * administrators. Business logic and error handling enforce that only
   * authorized users may invoke deletion. Every delete event is written to the
   * audit log for compliance retrieval and reporting.
   *
   * Proper data validation (unique identifier, existence of record, permissible
   * deletion conditions) is always performed prior to removal. Related business
   * operations include review and export of audit logs for regulated data
   * removals.
   *
   * @param connection
   * @param complianceAgreementId UUID of the compliance agreement to be
   *   permanently deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":complianceAgreementId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceAgreementId")
    complianceAgreementId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminComplianceAgreementsComplianceAgreementId(
        {
          systemAdmin,
          complianceAgreementId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new compliance agreement entry in
   * healthcare_platform_compliance_agreements.
   *
   * This operation inserts a new row into
   * healthcare_platform_compliance_agreements, establishing a legally binding
   * agreement record between a user (signer) and the organization under a
   * specified policy version and agreement type. It supports capturing key
   * compliance artifacts such as signature status, method, optional expiry, and
   * audit metadata. Input validation ensures that all required fields are
   * provided, the referenced policy version exists, and the signer meets
   * business requirements for agreement eligibility.
   *
   * Role-based authorization ensures that only staff or technical personnel
   * with legal authority (typically organization administrators or compliance
   * officers) can create new agreements. Policy version linkage enables the
   * platform to reference the correct audited version for subsequent consent or
   * compliance checks. Status, effective/expiration dates, and method fields
   * support a variety of agreement workflows including scheduled renewals and
   * regulatory reporting.
   *
   * Errors are returned for duplicate agreements, invalid references to
   * organizations or policy versions, or permission violations. Operation is
   * auditable for compliance purposes.
   *
   * @param connection
   * @param body Agreement information to be created, as defined by
   *   IHealthcarePlatformComplianceAgreement.ICreate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceAgreement.ICreate,
  ): Promise<IHealthcarePlatformComplianceAgreement> {
    try {
      return await posthealthcarePlatformSystemAdminComplianceAgreements({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
