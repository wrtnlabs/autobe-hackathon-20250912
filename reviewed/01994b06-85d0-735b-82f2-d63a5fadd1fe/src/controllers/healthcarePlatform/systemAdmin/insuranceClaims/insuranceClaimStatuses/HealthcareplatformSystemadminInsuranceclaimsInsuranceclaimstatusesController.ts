import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses } from "../../../../../providers/posthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId } from "../../../../../providers/puthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId";
import { deletehealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId } from "../../../../../providers/deletehealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId";

import { IHealthcarePlatformInsuranceClaimStatus } from "../../../../../api/structures/IHealthcarePlatformInsuranceClaimStatus";

@Controller(
  "/healthcarePlatform/systemAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses",
)
export class HealthcareplatformSystemadminInsuranceclaimsInsuranceclaimstatusesController {
  /**
   * Add a new insurance claim status to an existing claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Adds a new insurance claim status record for a specific insurance claim
   * identified by insuranceClaimId. This operation is intended for
   * authenticated organization admins, billing specialists, or system admins
   * managing insurance claims and workflow tracking.
   *
   * It requires that the insurance claim already exists, and appends a new
   * status event (such as 'submitted', 'denied', 'paid') to facilitate
   * insurance lifecycle management and audit trails. The API validates that the
   * status event is permissible in the current workflow context and logs the
   * action with full metadata, including user identity, timestamp, and payer
   * response codes if provided.
   *
   * Sensitive business logic includes validation of role-based permissions,
   * enforcing correct workflow transitions, and regulatory compliance for
   * claims management. Related APIs include claim update, status history
   * retrieval, and insurance payment integration points. Expected error cases
   * include providing invalid status values, updating non-existent insurance
   * claims, or unauthorized access attempts.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim to which
   *   the status will be added.
   * @param body Details of the insurance claim status event to add to the
   *   specified claim.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaimStatus.ICreate,
  ): Promise<IHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await posthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses(
        {
          systemAdmin,
          insuranceClaimId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing insurance claim status entry in a claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Updates an existing insurance claim status record identified by
   * insuranceClaimStatusId within a specific insurance claim (identified by
   * insuranceClaimId). This API is used by privileged users, such as
   * organization admins and billing specialists, to modify previously submitted
   * claim status eventsâ€”such as updating the status code, clarifying payer
   * response descriptions, or amending recorded payment amounts for
   * reconciliation.
   *
   * The operation enforces strict business rules, ensuring that only authorized
   * roles may perform status corrections, and that any status value updates are
   * permissible within the defined insurance claim workflow. All changes are
   * fully audit-trailed, including before/after values, user identity, and
   * exact timestamps. This operation is critical for maintaining accurate claim
   * status history for compliance, denial management, and appeals. Related APIs
   * include status creation and listing claim status history. Error scenarios
   * include non-existent claim status ID, invalid updates per workflow rules,
   * and unauthorized modification attempts.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim containing
   *   the status to update.
   * @param insuranceClaimStatusId Unique identifier of the insurance claim
   *   status record to update.
   * @param body Updated details for the insurance claim status event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insuranceClaimStatusId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedParam("insuranceClaimStatusId")
    insuranceClaimStatusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaimStatus.IUpdate,
  ): Promise<IHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await puthealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId(
        {
          systemAdmin,
          insuranceClaimId,
          insuranceClaimStatusId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete an insurance claim status event entry from a claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Removes an insurance claim status record for a given claim, specifically
   * targeting a record identified by insuranceClaimStatusId under the claim
   * referenced by insuranceClaimId. This operation is restricted to
   * high-privilege roles (e.g., organization admin or system admin), reflecting
   * the sensitive nature of changing an insurance claim's legal/audit state.
   *
   * The operation executes a hard delete, permanently erasing the status record
   * from the database without a recovery option. All delete actions are
   * captured in the financial audit log, with user attribution and timestamp,
   * to ensure regulatory traceability. Attempting to delete a non-existent or
   * non-owned claim status, or insufficient permissions, will result in an
   * error. Related APIs include status creation, status update, and listing
   * historical statuses.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim from which
   *   the status will be deleted.
   * @param insuranceClaimStatusId Unique identifier of the insurance claim
   *   status record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":insuranceClaimStatusId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedParam("insuranceClaimStatusId")
    insuranceClaimStatusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId(
        {
          systemAdmin,
          insuranceClaimId,
          insuranceClaimStatusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
