import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminMedicaldoctors } from "../../../../providers/posthealthcarePlatformSystemAdminMedicaldoctors";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminMedicaldoctors } from "../../../../providers/patchhealthcarePlatformSystemAdminMedicaldoctors";
import { gethealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId } from "../../../../providers/gethealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId";
import { puthealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId } from "../../../../providers/puthealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId";
import { deletehealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId } from "../../../../providers/deletehealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId";

import { IHealthcarePlatformMedicalDoctor } from "../../../../api/structures/IHealthcarePlatformMedicalDoctor";
import { IPageIHealthcarePlatformMedicalDoctor } from "../../../../api/structures/IPageIHealthcarePlatformMedicalDoctor";

@Controller("/healthcarePlatform/systemAdmin/medicaldoctors")
export class HealthcareplatformSystemadminMedicaldoctorsController {
  /**
   * Create a new medical doctor record (healthcare_platform_medicaldoctors).
   *
   * Create a new medical doctor profile and add them to the healthcare
   * platform. Consumers must supply all mandatory fields as defined by the
   * healthcare_platform_medicaldoctors table, such as email, full name, NPI
   * number, and other professional details. On successful creation, the
   * provider record will be accessible for further assignment to departments,
   * clinical scheduling, or license validation.
   *
   * Only authorized users (system admins or organization admins) can execute
   * this operation. The input request is validated for uniqueness constraints
   * (email, NPI number) and field formats. Business logic may trigger
   * credential verification and onboarding workflows as part of
   * post-processing.
   *
   * Related API operations include updating a doctor's profile, assigning
   * provider to organizations/departments, or starting credential validation
   * sequences. All creation actions are fully audited.
   *
   * @param connection
   * @param body Information required to create a new medical doctor profile,
   *   including required credential and contact fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.ICreate,
  ): Promise<IHealthcarePlatformMedicalDoctor> {
    try {
      return await posthealthcarePlatformSystemAdminMedicaldoctors({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated search/filter for Medical Doctors (table:
   * healthcare_platform_medicaldoctors).
   *
   * This operation enables platform administrators and organization
   * administrators with appropriate privileges to perform advanced, paginated
   * search across the full set of Medical Doctor records in the system. Search
   * may leverage any combination of fields such as email, NPI number, clinical
   * specialty, or name for authentication, administrative assignment, and
   * clinical compliance reporting purposes. Only authorized roles may access
   * these capabilities due to the sensitive nature of provider records and
   * licensure data.
   *
   * The operation supports pagination and flexible filtering, with return
   * structures optimized for administrative dashboards, analytics, and resource
   * management. Secure auditing is ensured for all queries, and access is
   * restricted to prevent inappropriate exposure of credential information.
   * Responses may be filtered based on role scope (system-wide or
   * organization-specific). Error states include invalid search parameters or
   * permission errors. Operation is compliant with regulatory requirements for
   * auditing provider access and credential reviews.
   *
   * @param connection
   * @param body Search criteria and paging/filter options for searching Medical
   *   Doctors
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.IRequest,
  ): Promise<IPageIHealthcarePlatformMedicalDoctor.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminMedicaldoctors({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific medical doctor profile
   * (healthcare_platform_medicaldoctors).
   *
   * Retrieve detailed information about a single medical doctor based on their
   * unique identifier. This operation provides access to the full profile,
   * credentials, and attributes as defined in the
   * healthcare_platform_medicaldoctors table of the Prisma schema, ensuring
   * up-to-date data for authorized consumers.
   *
   * Security considerations demand strict role-based access control, as viewing
   * doctor information is reserved for users with appropriate clinical,
   * administrative, or system-level rights. All access is logged for compliance
   * and audit, and data may be filtered or masked in accordance with
   * organization or regulatory policy.
   *
   * Returned properties include legal name, NPI number, specialty, email,
   * phone, and timestamps for creation, update, and soft deletion status. Any
   * attempt to access a record that is marked deleted or does not exist shall
   * result in an access error. Other business logic such as data masking might
   * apply based on caller's role or organization.
   *
   * Related API operations include searching for providers, updating or
   * deactivating profiles, and credential/license verification. For related
   * actions, refer to provider search and assignment endpoints.
   *
   * @param connection
   * @param medicalDoctorId The unique identifier (UUID) of the target medical
   *   doctor to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":medicalDoctorId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("medicalDoctorId")
    medicalDoctorId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformMedicalDoctor> {
    try {
      return await gethealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId(
        {
          systemAdmin,
          medicalDoctorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing medical doctor profile by ID
   * (healthcare_platform_medicaldoctors).
   *
   * Update an existing medical doctor's profile using their unique identifier.
   * The payload must adhere to the update schema defined for the
   * healthcare_platform_medicaldoctors table, supporting partial or complete
   * edits to fields such as contact info, specialty, or other business
   * attributes.
   *
   * This operation is restricted to system admins and organization admins,
   * subject to RBAC, and all changes are audited for compliance. Depending on
   * the field, updates may trigger downstream business logic such as credential
   * re-validation or workflow assignment.
   *
   * If the specified medical doctor does not exist or is marked as deleted, the
   * operation will return an error response. Related endpoints include creating
   * a provider, viewing details, or deactivating their record. Audit trails
   * will track who made the update, what fields changed, and when.
   *
   * @param connection
   * @param medicalDoctorId The unique identifier (UUID) of the medical doctor
   *   to update.
   * @param body Fields and values to update in the target medical doctor's
   *   profile. Only allowed and non-immutable fields may be modified.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":medicalDoctorId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("medicalDoctorId")
    medicalDoctorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.IUpdate,
  ): Promise<IHealthcarePlatformMedicalDoctor> {
    try {
      return await puthealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId(
        {
          systemAdmin,
          medicalDoctorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a medical doctor record by ID
   * (healthcare_platform_medicaldoctors).
   *
   * Delete (soft delete) a specific medical doctor profile by unique ID.
   * Instead of physically removing the provider record, this operation sets the
   * deleted_at field to indicate logical deletion, in accordance with
   * compliance retention policy. The profile will be excluded from routine
   * queries but retained in the database for audit and recovery purposes.
   *
   * Execution of this operation requires system admin or organization
   * administrator privileges. Business logic checks will prevent deletion if
   * the medical doctor is tied to active clinical assignments, regulatory
   * holds, or ongoing credentialing processes. All deletion actions are
   * recorded in the audit trail, and restoration is possible via dedicated
   * recovery workflows.
   *
   * If the record does not exist or is already deleted, a not found or
   * idempotent success response is returned. Related API operations include
   * restoration, fetching active/deleted doctors, and compliance audit
   * reporting.
   *
   * @param connection
   * @param medicalDoctorId The unique identifier (UUID) of the medical doctor
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":medicalDoctorId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("medicalDoctorId")
    medicalDoctorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminMedicaldoctorsMedicalDoctorId(
        {
          systemAdmin,
          medicalDoctorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
