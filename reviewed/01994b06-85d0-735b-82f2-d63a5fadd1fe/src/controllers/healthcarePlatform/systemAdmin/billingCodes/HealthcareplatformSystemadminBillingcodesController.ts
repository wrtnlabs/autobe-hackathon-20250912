import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformSystemAdminBillingCodesBillingCodeId } from "../../../../providers/puthealthcarePlatformSystemAdminBillingCodesBillingCodeId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { deletehealthcarePlatformSystemAdminBillingCodesBillingCodeId } from "../../../../providers/deletehealthcarePlatformSystemAdminBillingCodesBillingCodeId";

import { IHealthcarePlatformBillingCode } from "../../../../api/structures/IHealthcarePlatformBillingCode";

@Controller("/healthcarePlatform/systemAdmin/billingCodes/:billingCodeId")
export class HealthcareplatformSystemadminBillingcodesController {
  /**
   * Update a billing code's metadata in the healthcarePlatform billing system.
   *
   * Update the properties of a single billing code within the
   * healthcarePlatform system. By specifying the billingCodeId path parameter,
   * authorized administrators can change details such as the billing code's
   * name, code system, description, and active status.
   *
   * This operation enforces audit logging of all changes and restricts access
   * to users with appropriate privileges (e.g., systemAdmin,
   * organizationAdmin). All code modifications are tracked for compliance. Any
   * update must conform to schema requirements, including validation of unique
   * constraints on the code and code_system pair.
   *
   * Security controls include role-based access and full record of update
   * events for possible regulatory review. Related APIs include code creation,
   * listing, and metadata retrieval endpoints.
   *
   * @param connection
   * @param billingCodeId The unique identifier of the billing code to update.
   * @param body Updated properties and metadata for the billing code.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("billingCodeId")
    billingCodeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingCode.IUpdate,
  ): Promise<IHealthcarePlatformBillingCode> {
    try {
      return await puthealthcarePlatformSystemAdminBillingCodesBillingCodeId({
        systemAdmin,
        billingCodeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a billing code from the healthcarePlatform billing code catalog.
   *
   * Permanently delete a billing code from the healthcarePlatform's billing
   * codes catalog. This operation requires the billingCodeId path parameter and
   * is restricted to system-level or organization-level administrative roles.
   *
   * All deletions are audit-logged for compliance and traceability. Once
   * deleted, the billing code cannot be referenced in new invoices or claims,
   * and related business logic will prevent its future use. Attempting to
   * delete an in-use or referenced code should result in a validation error
   * describing dependencies. Access is controlled strictly via authorization
   * roles, and all delete actions are permanently recorded.
   *
   * @param connection
   * @param billingCodeId The unique identifier of the billing code to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("billingCodeId")
    billingCodeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminBillingCodesBillingCodeId(
        {
          systemAdmin,
          billingCodeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
