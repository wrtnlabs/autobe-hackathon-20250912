import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminOrgDepartmentAssignments } from "../../../../providers/posthealthcarePlatformSystemAdminOrgDepartmentAssignments";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminOrgDepartmentAssignments } from "../../../../providers/patchhealthcarePlatformSystemAdminOrgDepartmentAssignments";
import { gethealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId } from "../../../../providers/gethealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId";
import { puthealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId } from "../../../../providers/puthealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId";
import { deletehealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId } from "../../../../providers/deletehealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId";

import { IHealthcarePlatformOrgDepartmentAssignment } from "../../../../api/structures/IHealthcarePlatformOrgDepartmentAssignment";
import { IPageIHealthcarePlatformOrgDepartmentAssignment } from "../../../../api/structures/IPageIHealthcarePlatformOrgDepartmentAssignment";

@Controller("/healthcarePlatform/systemAdmin/orgDepartmentAssignments")
export class HealthcareplatformSystemadminOrgdepartmentassignmentsController {
  /**
   * Create a new organization-department assignment in
   * healthcare_platform_org_department_assignments.
   *
   * Create a new org-department assignment entry to establish structure within
   * the multi-tenant healthcarePlatform system. The request body follows
   * business validation rules from the
   * healthcare_platform_org_department_assignments table and requires: a valid
   * organization ID, department ID, and all assignment metadata for audit.
   *
   * Assignment creation is audited, recording timestamp and user reference for
   * compliance. Only systemAdmins and organizationAdmins are authorized.
   * Related operations for listing and inspecting assignments should be used to
   * verify successful creation. Validation includes enforcement of unique
   * organization-department mapping and checks against soft-deleted/archived
   * organizations or departments.
   *
   * Error handling includes failed validation (e.g., attempting to assign an
   * already linked or deleted org/department), permission errors, and
   * unexpected server failures. On success, full assignment details (per the
   * schema) are returned.
   *
   * @param connection
   * @param body Organization-department assignment information for creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrgDepartmentAssignment.ICreate,
  ): Promise<IHealthcarePlatformOrgDepartmentAssignment> {
    try {
      return await posthealthcarePlatformSystemAdminOrgDepartmentAssignments({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a filtered and paginated list of organization-department assignments
   * from healthcare_platform_org_department_assignments.
   *
   * Retrieve an advanced, paginated list of org-department assignments. This
   * operation utilizes the healthcare_platform_org_department_assignments table
   * comments, specifically focusing on the mapping between organizations and
   * departments for complex organization structure management.
   *
   * The endpoint supports advanced search parameters (such as organization_id,
   * department_id, assignment dates, assignment status) and pagination for
   * handling large datasets. Only users with appropriate organizational or
   * system administrative permissions can access this list, ensuring strict
   * platform RBAC.
   *
   * Returned assignment data includes all auditing fields: unique assignment
   * id, organization info, department info, timestamps for creation and
   * updates, and any soft-delete status for regulatory tracking. Filtering and
   * searching help with daily operational audits and organization restructuring
   * workflows, referencing the business need for compliance and effective
   * management of healthcare hierarchies.
   *
   * This operation is commonly used in conjunction with retrieve (GET by ID),
   * create, and update operations for the
   * healthcare_platform_org_department_assignments entity. Error handling
   * covers invalid filtering parameters, insufficient permissions, and
   * unexpected server errors. Soft-deleted assignments may be optionally
   * excluded depending on business rules, but are included for compliance
   * operations.
   *
   * @param connection
   * @param body Request body specifying filter parameters, pagination, and
   *   sorting for org-department assignment retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrgDepartmentAssignment.IRequest,
  ): Promise<IPageIHealthcarePlatformOrgDepartmentAssignment.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminOrgDepartmentAssignments({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific organization-department assignment by ID from
   * healthcare_platform_org_department_assignments.
   *
   * Get detailed information for a single organization-department assignment
   * from healthcare_platform_org_department_assignments by ID. The primary
   * purpose is to allow privileged users to inspect or review the exact mapping
   * between a specific organization and a department for operational,
   * compliance, or structural management.
   *
   * The endpoint requires a valid orgDepartmentAssignmentId path parameter
   * referencing the assignment's unique identifier (UUID) in the database and
   * returns all relevant fields in the record, including relational references,
   * creation and update audit timestamps, and the soft delete timestamp if
   * applicable.
   *
   * Roles with required permissions (systemAdmin, organizationAdmin) are able
   * to retrieve this information for audit, troubleshooting, or compliance
   * requirements. Related API operations include list, create, and update
   * endpoints for org-department assignments. Error cases include not found,
   * invalid identifier, or unauthorized access.
   *
   * @param connection
   * @param orgDepartmentAssignmentId Unique ID of the organization-department
   *   assignment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orgDepartmentAssignmentId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("orgDepartmentAssignmentId")
    orgDepartmentAssignmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformOrgDepartmentAssignment> {
    try {
      return await gethealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId(
        {
          systemAdmin,
          orgDepartmentAssignmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an organization-department assignment by ID in
   * healthcare_platform_org_department_assignments.
   *
   * Update the details of an existing org-department assignment identified by
   * its unique ID. The request body must include permissible fields as
   * specified by the healthcare_platform_org_department_assignments schema and
   * observe business validation relating to unique organization-department
   * relationships and non-editable fields (as appropriate for compliance).
   *
   * The operation requires the orgDepartmentAssignmentId UUID path parameter
   * and a compliant update request body. Security is enforced allowing only
   * systemAdmin and organizationAdmin users to invoke updates. All changes are
   * audited with timestamps and user references for compliance tracking. Error
   * scenarios include record not found, attempts to update immutable
   * relationships, permission violations, and other validation failures.
   *
   * This API is commonly used alongside list (PATCH), get (GET by ID), and
   * create (POST) endpoints to manage the lifecycle of department structure
   * assignments. It is important to note that unique indices and business logic
   * may prevent creating duplicate active assignments for the same department
   * under one organization.
   *
   * @param connection
   * @param orgDepartmentAssignmentId ID of the organization-department
   *   assignment record to update.
   * @param body Updated organization-department assignment data as per business
   *   rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orgDepartmentAssignmentId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("orgDepartmentAssignmentId")
    orgDepartmentAssignmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformOrgDepartmentAssignment.IUpdate,
  ): Promise<IHealthcarePlatformOrgDepartmentAssignment> {
    try {
      return await puthealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId(
        {
          systemAdmin,
          orgDepartmentAssignmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an organization-to-department assignment
   * (healthcare_platform_org_department_assignments).
   *
   * This operation is designed to permanently delete an
   * organization-to-department assignment within the healthcare platform. By
   * specifying the unique orgDepartmentAssignmentId, administrators can remove
   * the relationship between an organization and a department, reflecting
   * changes in organizational structure or access policies.
   *
   * Security considerations dictate that this operation should only be usable
   * by administrative roles, as deleting such links can have significant
   * impacts on access control, department workflow, and reporting. The
   * underlying Prisma schema model
   * (healthcare_platform_org_department_assignments) tracks such assignments
   * with audit trail timestamps and soft-delete capability, but this operation
   * performs a hard deletion removing the entry entirely from the database.
   *
   * Validation ensures that the specified assignment exists and is not already
   * deleted. Attempts to delete a non-existent or already-deleted assignment
   * yield a clear error. As the operation is destructive, it is related to
   * organization and department management APIs and should be used
   * judiciously.
   *
   * @param connection
   * @param orgDepartmentAssignmentId Unique identifier of the
   *   organization-department assignment to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orgDepartmentAssignmentId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("orgDepartmentAssignmentId")
    orgDepartmentAssignmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminOrgDepartmentAssignmentsOrgDepartmentAssignmentId(
        {
          systemAdmin,
          orgDepartmentAssignmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
