import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminResourceSchedules } from "../../../../providers/patchhealthcarePlatformSystemAdminResourceSchedules";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminResourceSchedulesResourceScheduleId } from "../../../../providers/gethealthcarePlatformSystemAdminResourceSchedulesResourceScheduleId";

import { IPageIHealthcarePlatformResourceSchedule } from "../../../../api/structures/IPageIHealthcarePlatformResourceSchedule";
import { IHealthcarePlatformResourceSchedule } from "../../../../api/structures/IHealthcarePlatformResourceSchedule";

@Controller("/healthcarePlatform/systemAdmin/resourceSchedules")
export class HealthcareplatformSystemadminResourceschedulesController {
  /**
   * List all resource schedules with search and pagination in
   * healthcare_platform_resource_schedules table.
   *
   * Allows system-level or organization-level administrators to list all
   * configured resource schedules, with support for advanced filtering (by
   * organization, resource type or ID, availability windows, recurrence),
   * paging, and sorting. Only non-soft-deleted records will be returned.
   *
   * The response provides schedule metadata needed for administrative decision
   * making and calendar UI construction. Security is enforced by role-based
   * access restriction. Related endpoints include single resource schedule
   * retrieval (GET), creation (POST), update (PUT), and deletion (DELETE).
   *
   * @param connection
   * @param body Resource schedule search and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformResourceSchedule.IRequest,
  ): Promise<IPageIHealthcarePlatformResourceSchedule> {
    try {
      return await patchhealthcarePlatformSystemAdminResourceSchedules({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a single resource schedule in
   * healthcare_platform_resource_schedules table.
   *
   * Permits privileged administrators to view detailed configuration of a
   * specific resource schedule entry identified by resourceScheduleId, which
   * must be a valid UUID. The response includes all resource schedule
   * configuration fields, suitable for display in administrative dashboards,
   * resource auditing, or advanced scheduling logic.
   *
   * If the entry does not exist or has been soft-deleted, an error will be
   * returned. Related endpoints: creation (POST), update (PUT), deletion
   * (DELETE), and schedule list (PATCH/GET).
   *
   * @param connection
   * @param resourceScheduleId Unique identifier of the resource schedule to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":resourceScheduleId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("resourceScheduleId")
    resourceScheduleId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformResourceSchedule> {
    try {
      return await gethealthcarePlatformSystemAdminResourceSchedulesResourceScheduleId(
        {
          systemAdmin,
          resourceScheduleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
