import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminOrganizations } from "../../../../providers/posthealthcarePlatformSystemAdminOrganizations";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminOrganizations } from "../../../../providers/patchhealthcarePlatformSystemAdminOrganizations";
import { gethealthcarePlatformSystemAdminOrganizationsOrganizationId } from "../../../../providers/gethealthcarePlatformSystemAdminOrganizationsOrganizationId";
import { puthealthcarePlatformSystemAdminOrganizationsOrganizationId } from "../../../../providers/puthealthcarePlatformSystemAdminOrganizationsOrganizationId";
import { deletehealthcarePlatformSystemAdminOrganizationsOrganizationId } from "../../../../providers/deletehealthcarePlatformSystemAdminOrganizationsOrganizationId";

import { IHealthcarePlatformOrganization } from "../../../../api/structures/IHealthcarePlatformOrganization";
import { IPageIHealthcarePlatformOrganization } from "../../../../api/structures/IPageIHealthcarePlatformOrganization";

@Controller("/healthcarePlatform/systemAdmin/organizations")
export class HealthcareplatformSystemadminOrganizationsController {
  /**
   * Create a new healthcare organization (tenant onboarding).
   *
   * Creates a new organization entity for use as a top-level tenant. Supply
   * organization code (which must be unique), name, and initial status. This
   * record serves as the parent for all organizational resources, compliance
   * records, and department structures. Mandatory timestamps are established
   * and audit-logged at creation time.
   *
   * The operation is restricted to platform administrators to ensure that only
   * authorized personnel can create new tenants in the system. After creation,
   * downstream assignment flows for staff and configurations can be initiated.
   *
   * All fields in the request and response map directly to the
   * healthcare_platform_organizations schema; no additional properties may be
   * specified. Unique constraint on code is enforced, and violation will return
   * a business logic error.
   *
   * @param connection
   * @param body Payload for new organization creation (unique code, official
   *   name, status).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrganization.ICreate,
  ): Promise<IHealthcarePlatformOrganization> {
    try {
      return await posthealthcarePlatformSystemAdminOrganizations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of healthcare organizations
   * (multi-tenant boundary).
   *
   * Retrieves a filtered and paginated list of healthcare organizations in the
   * system. Users can search based on organization code, name, operational
   * status, and creation or update time, supporting advanced query and sort
   * scenarios. This enables platform admins and organization admins to monitor,
   * manage, and audit organization entities under appropriate compliance
   * restrictions.
   *
   * Security policies ensure access is strictly limited to authorized
   * administrative users; sensitive organizational information is excluded for
   * roles with reduced privileges. Only non-deleted organizations are included
   * unless explicit compliance search is required.
   *
   * Derived from the healthcare_platform_organizations table in the Prisma DB
   * schema; only fields defined in that table are used. Supports integration
   * with role-based application dashboards, onboarding wizards, and compliance
   * reporting workflows.
   *
   * Related endpoints include GET /organizations/{organizationId} for
   * individual organization details, and POST /organizations for new
   * organization creation.
   *
   * @param connection
   * @param body Search request criteria, filter, pagination, and sort
   *   parameters for retrieving healthcare organizations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrganization.IRequest,
  ): Promise<IPageIHealthcarePlatformOrganization.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminOrganizations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single organization's detail record by ID (platform admin view).
   *
   * Retrieves the detailed organization record, including business code, name,
   * current status, creation and last update timestamps. Used for
   * administrative review, compliance, and resource management. This record
   * serves as the master data anchor for all departments, configuration, and
   * RBAC partitioning downstream.
   *
   * Access is limited to authorized system or organization admins according to
   * strict RBAC policies. Sensitive internal data is only available to
   * high-privilege roles. The underlying data is loaded from the
   * healthcare_platform_organizations table, using the provided organizationId
   * as a UUID path parameter.
   *
   * This endpoint is frequently used in conjunction with the organization
   * search or onboarding flows, and appears in organization and compliance
   * dashboards.
   *
   * @param connection
   * @param organizationId UUID of the organization to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformOrganization> {
    try {
      return await gethealthcarePlatformSystemAdminOrganizationsOrganizationId({
        systemAdmin,
        organizationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties of a healthcare organization by ID (platform admin only).
   *
   * Updates the selected organization entity with the supplied properties:
   * code, display name, status. All changes are strictly audited, including
   * actor identity, change timestamps, and before/after data states as required
   * by regulatory compliance. The entity is referenced by the provided
   * organizationId path parameter, which must be a valid UUID.
   *
   * Only system administrators may execute this change, enforcing strict access
   * controls on core tenant information. Unique constraints are applied at the
   * database level for organization code; attempting to set a duplicate code
   * will result in a business logic error. All changes are written to the
   * corresponding Prisma healthcare_platform_organizations table and logged for
   * compliance.
   *
   * No destructive actions are performed; soft-delete and archival are handled
   * by separate workflows. Downstream effects, such as resource and staff
   * assignment updates, are managed asynchronously outside the scope of this
   * endpoint.
   *
   * @param connection
   * @param organizationId UUID of the organization to update.
   * @param body New organization data for updating properties, including name,
   *   code, and status. Only supplied fields are modified.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":organizationId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformOrganization.IUpdate,
  ): Promise<IHealthcarePlatformOrganization> {
    try {
      return await puthealthcarePlatformSystemAdminOrganizationsOrganizationId({
        systemAdmin,
        organizationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently deletes an organization (top-level tenant) by organizationId
   * (UUID) from healthcare_platform_organizations.
   *
   * Permanently remove a healthcare organization identified by its UUID
   * (organizationId) from the healthcarePlatform. The operation targets the
   * healthcare_platform_organizations model, which represents tenants or
   * top-level business entitiesâ€”a critical operation for platform data
   * isolation and compliance.
   *
   * Security: Only users with system-wide admin privileges should perform this
   * operation. All soft-delete logic should be handled by setting `deleted_at`
   * field; however, in situations requiring physical removal for legal
   * compliance, actual data removal is possible.
   *
   * Cascading: The removal detaches or deletes all sub-resources including
   * departments, users, and configurations as per defined Prisma schema
   * relations. It is critical to audit all related business rules and handle
   * orphaned data appropriately.
   *
   * Related: Deletion should trigger an audit log entry and may be referenced
   * by compliance review APIs. Make sure ORM-level cascading actions and
   * historic data retention rules are configured as required by business and
   * regulatory needs.
   *
   * Errors: Attempting to delete a non-existent or already-deleted organization
   * should result in an informative error indicating such state. Ensure proper
   * authorization and auditability of this operation.
   *
   * @param connection
   * @param organizationId Unique identifier of the organization to be deleted
   *   (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":organizationId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminOrganizationsOrganizationId(
        {
          systemAdmin,
          organizationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
