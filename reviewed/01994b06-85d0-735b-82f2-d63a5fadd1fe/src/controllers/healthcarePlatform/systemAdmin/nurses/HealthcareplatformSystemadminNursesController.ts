import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletehealthcarePlatformSystemAdminNursesNurseId } from "../../../../providers/deletehealthcarePlatformSystemAdminNursesNurseId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

@Controller("/healthcarePlatform/systemAdmin/nurses/:nurseId")
export class HealthcareplatformSystemadminNursesController {
  /**
   * Soft delete (archive) a nurse record in healthcare_platform_nurses by ID.
   *
   * This endpoint enables the logical (soft) deletion of a nurse record by its
   * unique identifier. The API marks the nurse as deleted by updating the
   * deleted_at column in the underlying healthcare_platform_nurses table, so
   * the record remains present for future audit, compliance reviews, and
   * potential restoration, as required by industry regulation and business
   * rules.
   *
   * Only administrators with sufficient privileges should be allowed to invoke
   * this operation, as deleting or deactivating staff can have broad
   * operational, clinical, and compliance implications. The action should be
   * captured in audit logs with actor information and timestamp for
   * traceability.
   *
   * This operation is typically used during staff offboarding,
   * compliance-driven deactivation, or resolution of staff transitions.
   * Attempts to delete non-existent or already-deleted records should result in
   * a clear error response and appropriate audit logging for compliance.
   *
   * Related endpoints may include: creating or updating a nurse record, listing
   * all nurses, and reactivating archived staff if business workflow supports
   * it.
   *
   * @param connection
   * @param nurseId Unique identifier of the nurse to delete (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("nurseId")
    nurseId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminNursesNurseId({
        systemAdmin,
        nurseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
