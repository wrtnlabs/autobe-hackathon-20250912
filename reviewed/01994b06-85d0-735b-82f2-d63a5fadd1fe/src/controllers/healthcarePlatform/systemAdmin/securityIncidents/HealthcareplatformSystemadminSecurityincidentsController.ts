import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminSecurityIncidents } from "../../../../providers/patchhealthcarePlatformSystemAdminSecurityIncidents";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminSecurityIncidentsSecurityIncidentId } from "../../../../providers/gethealthcarePlatformSystemAdminSecurityIncidentsSecurityIncidentId";

import { IPageIHealthcarePlatformSecurityIncident } from "../../../../api/structures/IPageIHealthcarePlatformSecurityIncident";
import { IHealthcarePlatformSecurityIncident } from "../../../../api/structures/IHealthcarePlatformSecurityIncident";

@Controller("/healthcarePlatform/systemAdmin/securityIncidents")
export class HealthcareplatformSystemadminSecurityincidentsController {
  /**
   * Search and retrieve a paginated, filterable list of security incidents from
   * healthcare_platform_security_incidents.
   *
   * Retrieve a list of security incidents, including type (e.g., FAILED_LOGIN,
   * PHI_EXFIL, BREACH_SUSPECTED), status (OPEN, INVESTIGATING, RESOLVED, etc.),
   * severity, summary, classification, open/close timestamps, and linked
   * user/organization metadata as permitted by the Prisma schema.
   *
   * The endpoint is intended for platform and organization administrators to
   * monitor security posture, respond to incidents, and document investigative
   * workflows. Filtering supports incident_type, date range, status, and
   * severity. Access is restricted—only appropriate admins may query logs
   * within their organization (systemAdmin can view all records).
   *
   * Security: All accesses to this endpoint are themselves logged in the audit
   * trail, with robust permission checking. Only metadata—never PHI—is shown in
   * results. Works with the single incident detail operation for drill-down.
   *
   * Standard compliant error handling is provided for access restriction,
   * invalid query parameters, or organizational isolation violations.
   *
   * @param connection
   * @param body Parameters for filtering, searching, paginating, and sorting
   *   security incidents.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformSecurityIncident.IRequest,
  ): Promise<IPageIHealthcarePlatformSecurityIncident.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminSecurityIncidents({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific security incident from
   * healthcare_platform_security_incidents by ID.
   *
   * Retrieve the detailed metadata for a specific security incident, including
   * type, status, summary, incident classification, timestamps, severity,
   * user/organization references, and all available incident fields except for
   * PHI data.
   *
   * Access is restricted to privileged system and organization admins for
   * compliance. Each query is logged as an audit event. Not found or forbidden
   * errors are returned for missing or unauthorized securityIncidentId. This
   * endpoint is designed for use in parallel with the security incident search
   * operation to enable incident triage.
   *
   * Records are isolated to the requester's organization unless systemAdmin.
   * All user access is logged per compliance policy.
   *
   * @param connection
   * @param securityIncidentId Unique identifier (UUID) of the security incident
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":securityIncidentId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("securityIncidentId")
    securityIncidentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformSecurityIncident> {
    try {
      return await gethealthcarePlatformSystemAdminSecurityIncidentsSecurityIncidentId(
        {
          systemAdmin,
          securityIncidentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
