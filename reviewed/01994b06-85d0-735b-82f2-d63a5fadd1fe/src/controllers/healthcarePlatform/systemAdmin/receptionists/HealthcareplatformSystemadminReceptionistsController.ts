import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminReceptionists } from "../../../../providers/patchhealthcarePlatformSystemAdminReceptionists";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminReceptionistsReceptionistId } from "../../../../providers/gethealthcarePlatformSystemAdminReceptionistsReceptionistId";

import { IPageIHealthcarePlatformReceptionist } from "../../../../api/structures/IPageIHealthcarePlatformReceptionist";
import { IHealthcarePlatformReceptionist } from "../../../../api/structures/IHealthcarePlatformReceptionist";

@Controller("/healthcarePlatform/systemAdmin/receptionists")
export class HealthcareplatformSystemadminReceptionistsController {
  /**
   * List and search all receptionists with advanced filtering and paging.
   *
   * Search and retrieve a paginated, optionally filtered and sorted list of
   * receptionists from the healthcare_platform_receptionists table. This
   * endpoint supports complex queries for administrative users, including
   * filtering by name, email, creation date, and status per the schema
   * specifications.
   *
   * The system enforces proper permissionsâ€”typically only systemAdmin or
   * organizationAdmin can access all receptionist records. Sensitive
   * receptionist information is returned in adherence with privacy policies and
   * must be handled according to organization policy.
   *
   * Response includes summary data for each receptionist, optimized for
   * management use (e.g., bulk communication, scheduling, access reviews).
   * Errors are surfaced when query parameters are invalid or when
   * authentication is insufficient. Related endpoints include creation, update,
   * and single receptionist detail retrieval for granular user management.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for receptionist list
   *   queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformReceptionist.IRequest,
  ): Promise<IPageIHealthcarePlatformReceptionist.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminReceptionists({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific receptionist from the
   * healthcare_platform_receptionists table.
   *
   * Retrieve the complete profile and status information for a specific
   * receptionist. This operation is used by administrators to verify, audit, or
   * manage an individual receptionist based on their unique identifier.
   * Accessible to systemAdmin or organizationAdmin users, the endpoint fetches
   * all configured fields as described in the schema, including contact
   * information, name, timestamps, and deletion status.
   *
   * Security is enforced, allowing only privileged users to access full
   * receptionist record details. The returned object includes all information
   * needed for downstream actions such as editing, auditing, or account
   * lifecycle management.
   *
   * Validation ensures the receptionist exists and is not deleted; otherwise,
   * an error is reported. This endpoint is foundational for receptionist
   * personnel management and compliance verification within the organization.
   *
   * @param connection
   * @param receptionistId Unique identifier of the receptionist to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":receptionistId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("receptionistId")
    receptionistId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformReceptionist> {
    try {
      return await gethealthcarePlatformSystemAdminReceptionistsReceptionistId({
        systemAdmin,
        receptionistId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
