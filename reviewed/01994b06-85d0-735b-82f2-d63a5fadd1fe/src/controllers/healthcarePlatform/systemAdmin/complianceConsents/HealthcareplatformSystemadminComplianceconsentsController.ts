import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminComplianceConsents } from "../../../../providers/patchhealthcarePlatformSystemAdminComplianceConsents";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminComplianceConsentsComplianceConsentId } from "../../../../providers/gethealthcarePlatformSystemAdminComplianceConsentsComplianceConsentId";

import { IPageIHealthcarePlatformComplianceConsent } from "../../../../api/structures/IPageIHealthcarePlatformComplianceConsent";
import { IHealthcarePlatformComplianceConsent } from "../../../../api/structures/IHealthcarePlatformComplianceConsent";

@Controller("/healthcarePlatform/systemAdmin/complianceConsents")
export class HealthcareplatformSystemadminComplianceconsentsController {
  /**
   * Search and retrieve filtered/paginated compliance consent records for
   * regulatory audit.
   *
   * Retrieve a paginated and filtered list of compliance consent records, which
   * document explicit consent, revocation, and effective dates for patients and
   * staff. Each consent log is tied to an organization and a policy version,
   * and records consent scope, type, status (granted/revoked), and relevant
   * time windows.
   *
   * Advanced search enables administrators to filter by organization, subject,
   * policy, consent type/status, date range, and more. This supports targeted
   * audits, operational reviews, mass compliance check-ups, and dispute
   * investigations. The Prisma schema ensures every consent record is
   * immutable, versioned, and cross-linked to all relevant entities (policy,
   * subject, organization).
   *
   * Strict RBAC and audit logging are enforced to protect personal data and
   * legal compliance. Only users with system administrator or organization
   * administrator roles may access this endpoint, and all search/query actions
   * are recorded in the audit trail. Export of consents may be subject to
   * additional regulatory/policy control.
   *
   * @param connection
   * @param body Search and pagination/filter criteria for compliance consent
   *   audits (organization, subject, consent type, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceConsent.IRequest,
  ): Promise<IPageIHealthcarePlatformComplianceConsent.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminComplianceConsents({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a specific compliance consent record by ID.
   *
   * Retrieve a specific compliance consent record with comprehensive audit
   * details by its unique ID (complianceConsentId). Details include the
   * subject's identity, organization, related policy/version, granted/revoked
   * status, rationale/reason, and all timestamps relevant to consent
   * lifecycle.
   *
   * This API enables compliance, operational, and legal staff to perform
   * detailed audits and resolve disputes around consent status, revocation, or
   * regulatory compliance with policies like HIPAA or GDPR. The Prisma schema
   * ensures traceability for each consent event, allows cross-checks to subject
   * and policy tables, and supports export of full audit records.
   *
   * User access is tightly restricted via RBAC, and all actions are appended to
   * the platform audit log. Use this in conjunction with list/search endpoints
   * for incident review or compliance evidence documentation.
   *
   * @param connection
   * @param complianceConsentId Unique identifier of the compliance consent
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceConsentId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("complianceConsentId")
    complianceConsentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformComplianceConsent> {
    try {
      return await gethealthcarePlatformSystemAdminComplianceConsentsComplianceConsentId(
        {
          systemAdmin,
          complianceConsentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
