import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminTelemedicineSessions } from "../../../../providers/posthealthcarePlatformSystemAdminTelemedicineSessions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId } from "../../../../providers/puthealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId";
import { deletehealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId } from "../../../../providers/deletehealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId";

import { IHealthcarePlatformTelemedicineSession } from "../../../../api/structures/IHealthcarePlatformTelemedicineSession";

@Controller("/healthcarePlatform/systemAdmin/telemedicineSessions")
export class HealthcareplatformSystemadminTelemedicinesessionsController {
  /**
   * Create a new telemedicine session record (TelemedicineSession table) in
   * healthcarePlatform.
   *
   * Create a new telemedicine session for a scheduled appointment. This
   * operation is used by authorized staff or system processes to generate
   * secure telemedicine sessions linked to a specific appointment.
   *
   * During creation, all required information about the appointment, session
   * start/end times, secure access link, and provider/patient associations must
   * be provided. Security controls ensure only authorized roles (such as
   * systemAdmin, organizationAdmin, or medicalDoctor) can invoke this
   * operation. Session creation is logged for audit.
   *
   * On success, the response includes the full session record with join link
   * and timing details, suitable for further integration with video platforms
   * or calendar notifications.
   *
   * @param connection
   * @param body Payload for creating a telemedicine session including
   *   appointment association, times, join link, and recording flag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformTelemedicineSession.ICreate,
  ): Promise<IHealthcarePlatformTelemedicineSession> {
    try {
      return await posthealthcarePlatformSystemAdminTelemedicineSessions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details for a telemedicine session (TelemedicineSession table) by
   * telemedicineSessionId.
   *
   * Update details of an existing telemedicine session such as session
   * start/end times, link, or session recording flag. Only authorized staff
   * (organizationAdmin, medicalDoctor, or systemAdmin) may perform updates, and
   * actions are audited for compliance.
   *
   * The session identifier in the path parameter selects the telemedicine
   * session record to update. The request body must include the fields to be
   * modified as defined in the update schema. This operation supports modifying
   * the session (for example, to reschedule, update links, or change recording
   * preferences) as business workflows require. Auditing ensures tracking of
   * all changes for security and compliance review.
   *
   * @param connection
   * @param telemedicineSessionId Unique identifier (UUID) of the telemedicine
   *   session to be updated.
   * @param body Fields to update in the telemedicine session (times, join link,
   *   session_recorded, etc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":telemedicineSessionId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("telemedicineSessionId")
    telemedicineSessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformTelemedicineSession.IUpdate,
  ): Promise<IHealthcarePlatformTelemedicineSession> {
    try {
      return await puthealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId(
        {
          systemAdmin,
          telemedicineSessionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a telemedicine session by telemedicineSessionId
   * (TelemedicineSession table hard delete).
   *
   * Permanently remove an existing telemedicine session. Only users with
   * systemAdmin, organizationAdmin, or medicalDoctor roles are authorized to
   * perform this action. The operation is audited for compliance purposes.
   *
   * This operation should be used with care, as deleted session records and
   * metadata cannot be restored. Deletion checks may prevent removal if the
   * session is still linked to future appointments or is in use.
   *
   * @param connection
   * @param telemedicineSessionId Unique identifier (UUID) for the telemedicine
   *   session that should be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":telemedicineSessionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("telemedicineSessionId")
    telemedicineSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminTelemedicineSessionsTelemedicineSessionId(
        {
          systemAdmin,
          telemedicineSessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
