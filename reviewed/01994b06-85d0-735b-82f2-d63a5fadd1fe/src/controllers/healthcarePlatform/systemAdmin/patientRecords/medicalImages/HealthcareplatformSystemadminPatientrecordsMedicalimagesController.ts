import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdMedicalImages } from "../../../../../providers/patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdMedicalImages";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

import { IPageIHealthcarePlatformMedicalImage } from "../../../../../api/structures/IPageIHealthcarePlatformMedicalImage";
import { IHealthcarePlatformMedicalImage } from "../../../../../api/structures/IHealthcarePlatformMedicalImage";

@Controller(
  "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/medicalImages",
)
export class HealthcareplatformSystemadminPatientrecordsMedicalimagesController {
  /**
   * Search and retrieve a paginated, filtered list of medical image metadata
   * for a patient's record (healthcare_platform_medical_images table).
   *
   * The endpoint provides paginated, filterable search over all medical image
   * records linked to a patient record, as stored in the
   * healthcare_platform_medical_images table. It supports advanced filtering,
   * full-text search, and sorting by attributes such as upload timestamp, image
   * type, or uploadedBy.
   *
   * Request parameters are supplied in the request body via the
   * IHealthcarePlatformMedicalImage.IRequest DTO. Users with clinical, admin,
   * or audit roles can retrieve imaging metadata but must have appropriate
   * organizational or departmental authorizationâ€”accesses should be fully
   * logged for compliance.
   *
   * Response uses IPageIHealthcarePlatformMedicalImage, returning matching
   * image metadata per search criteria. Images themselves are not returned by
   * this endpoint; use resource-specific download endpoints if implemented. The
   * operation is typically used in clinical review, radiology workflows, or
   * regulatory investigation of imaging compliance and data lifecycle.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record whose
   *   medical images are being queried (UUID).
   * @param body Search and pagination criteria for filtering patient-linked
   *   medical images.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformMedicalImage.IRequest,
  ): Promise<IPageIHealthcarePlatformMedicalImage> {
    try {
      return await patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdMedicalImages(
        {
          systemAdmin,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
