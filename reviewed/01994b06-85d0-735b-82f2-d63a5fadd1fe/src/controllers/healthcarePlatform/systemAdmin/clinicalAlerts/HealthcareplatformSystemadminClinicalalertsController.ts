import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminClinicalAlerts } from "../../../../providers/patchhealthcarePlatformSystemAdminClinicalAlerts";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminClinicalAlertsAlertId } from "../../../../providers/gethealthcarePlatformSystemAdminClinicalAlertsAlertId";
import { puthealthcarePlatformSystemAdminClinicalAlertsAlertId } from "../../../../providers/puthealthcarePlatformSystemAdminClinicalAlertsAlertId";
import { deletehealthcarePlatformSystemAdminClinicalAlertsAlertId } from "../../../../providers/deletehealthcarePlatformSystemAdminClinicalAlertsAlertId";

import { IPageIHealthcarePlatformClinicalAlert } from "../../../../api/structures/IPageIHealthcarePlatformClinicalAlert";
import { IHealthcarePlatformClinicalAlert } from "../../../../api/structures/IHealthcarePlatformClinicalAlert";

@Controller("/healthcarePlatform/systemAdmin/clinicalAlerts")
export class HealthcareplatformSystemadminClinicalalertsController {
  /**
   * Search and paginate clinical alerts generated by the CDS engine in the
   * healthcare_platform_clinical_alerts table.
   *
   * Search and retrieve a paginated list of clinical alert records that have
   * been generated by the healthcare platform's decision support engine. This
   * endpoint accesses the healthcare_platform_clinical_alerts table and
   * provides advanced query capabilities for filtering by alert status (new,
   * viewed, acknowledged, resolved), organization, department, CDS rule ID,
   * user assignment, date/time ranges, and alert type (warning, info, critical,
   * recommendation).
   *
   * The operation supports business logic for role-based visibility, with
   * system admins able to search all alerts, organization admins limited to
   * their organization, and department heads or assigned users able to see
   * alerts scoped to their departments or individuals. The response includes
   * alert details, status, subjects, timestamps, and escalation status.
   * Pagination and sorting options allow efficient access to high-volume alert
   * data. Comprehensive audit trails exist for alert access and search to
   * support HIPAA compliance and incident investigations.
   *
   * Validation ensures the requester has necessary permissions, criteria are
   * well-typed, and search results are filtered per data isolation rules. Error
   * handling covers malformed queries, excessive result sets, and authorization
   * failures.
   *
   * @param connection
   * @param body Search and pagination parameters for querying clinical alerts
   *   including filter criteria by status, organization, department, CDS rule,
   *   type, user, and date/time ranges.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformClinicalAlert.IRequest,
  ): Promise<IPageIHealthcarePlatformClinicalAlert> {
    try {
      return await patchhealthcarePlatformSystemAdminClinicalAlerts({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a clinical alert by alertId from the
   * healthcare_platform_clinical_alerts table.
   *
   * Get detailed information about a specific clinical alert record by its
   * unique alertId. The endpoint provides full data from the
   * healthcare_platform_clinical_alerts table, including summary, detail,
   * status, triggering rule, organization, department, assigned/responsible
   * users, acknowledgment and resolution timestamps, escalation status, and
   * audit-relevant metadata.
   *
   * Permissions are strictly enforced: system admins can retrieve any alert,
   * organization admins are limited to their own org, and department heads or
   * assigned users only see alerts within their department or relevant
   * assignment context. Access to this endpoint is audited for compliance
   * (e.g., HIPAA, SOC 2). The operation validates the alertId, confirms
   * requester authorization, and returns detailed status or error messages for
   * not found or unauthorized access cases. Related business logic for incident
   * post-mortem, compliance, and workflow tracking is supported by this
   * operation.
   *
   * If the alert has been resolved or escalated, additional status and action
   * context is returned to assist investigation and compliance review. Errors
   * are appropriately messaged and logged for audit purposes.
   *
   * @param connection
   * @param alertId Unique identifier (UUID) of the clinical alert record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":alertId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformClinicalAlert> {
    try {
      return await gethealthcarePlatformSystemAdminClinicalAlertsAlertId({
        systemAdmin,
        alertId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the status or detail of a clinical alert by alertId in the
   * healthcare_platform_clinical_alerts table.
   *
   * Update a clinical alert's workflow status, detail text, or
   * escalation/acknowledgement info by alertId. This endpoint applies to
   * records in the healthcare_platform_clinical_alerts table. Only authorized
   * staff (system admin, organization admin, or department head) may update
   * these fields, and field-level validation is enforced. Fields that may be
   * updated include status (to values such as 'acknowledged', 'resolved',
   * 'escalated'), detail/comments, and timestamps for acknowledgment or
   * resolution.
   *
   * Upon status update, the system records a compliance audit event and may
   * trigger further workflow changes, such as escalation to a responsible party
   * or closing an alert. Immutable fields like alert creation timestamp or
   * originating rule are not editable. The operation validates the alertId,
   * request body properties, and user permissions, and provides clear messaging
   * on error or invalid update attempts. Downstream systems consuming alert
   * state (e.g., dashboards) are expected to refresh based on status change.
   *
   * All update attempts (successful or not) are logged for full auditability
   * and compliance reporting.
   *
   * @param connection
   * @param alertId Unique identifier (UUID) of the clinical alert to update.
   * @param body Fields for updating clinical alert status or detail (status,
   *   acknowledgment, resolution, or comments).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":alertId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformClinicalAlert.IUpdate,
  ): Promise<IHealthcarePlatformClinicalAlert> {
    try {
      return await puthealthcarePlatformSystemAdminClinicalAlertsAlertId({
        systemAdmin,
        alertId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a clinical decision support alert by alertId from
   * healthcare_platform_clinical_alerts (hard delete).
   *
   * Delete a clinical decision support alert record from the system using its
   * unique alertId. This operation is typically performed to remove invalid,
   * resolved, or expired CDS alerts from regulatory and audit dashboards after
   * appropriate review. All alert details, including escalation status,
   * acknowledgement timestamps, and associated notification records, will be
   * permanently lost from the database. Regulatory or business policy requires
   * that deleted alerts be clearly referenced in deletion logs and may trigger
   * notification to compliance reviewers depending on system settings.
   *
   * Role-based access control is enforced: only system administrators,
   * compliance officers, or designated organizational administrators can
   * execute this operation. Deletion is permanent, so any recoverability or
   * restoration must be handled at the infrastructure level, not via API. If
   * the alertId does not exist or has already been removed, an error response
   * should be returned with clear messaging for audit and troubleshooting. This
   * endpoint does not support soft deletion, mark-as-archived, or recovery
   * functions.
   *
   * To ensure full compliance, invoking this operation should update the
   * healthcare_platform_audit_logs and relevant link tables as described by the
   * schema. Coordination with active dashboards and alert consumers is strongly
   * recommended before performing mass or programmatic deletions.
   *
   * @param connection
   * @param alertId Unique identifier of the clinical alert to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":alertId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminClinicalAlertsAlertId({
        systemAdmin,
        alertId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
