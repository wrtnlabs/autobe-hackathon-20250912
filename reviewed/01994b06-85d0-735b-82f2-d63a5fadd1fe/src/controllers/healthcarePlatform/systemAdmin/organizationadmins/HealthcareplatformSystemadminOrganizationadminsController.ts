import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminOrganizationadmins } from "../../../../providers/posthealthcarePlatformSystemAdminOrganizationadmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminOrganizationadmins } from "../../../../providers/patchhealthcarePlatformSystemAdminOrganizationadmins";
import { gethealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId } from "../../../../providers/gethealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId";
import { puthealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId } from "../../../../providers/puthealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId";
import { deletehealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId } from "../../../../providers/deletehealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId";

import { IHealthcarePlatformOrganizationAdmin } from "../../../../api/structures/IHealthcarePlatformOrganizationAdmin";
import { IPageIHealthcarePlatformOrganizationadmin } from "../../../../api/structures/IPageIHealthcarePlatformOrganizationadmin";

@Controller("/healthcarePlatform/systemAdmin/organizationadmins")
export class HealthcareplatformSystemadminOrganizationadminsController {
  /**
   * Create a new Organization Admin user account in the
   * healthcare_platform_organizationadmins table.
   *
   * Use this operation to create a new Organization Admin user within the
   * healthcarePlatform system. It inserts a fresh record into
   * healthcare_platform_organizationadmins, assigning required identity,
   * contact, and status fields. Organization Admins are responsible for
   * managing their organization's users, policies, billing, reporting, and
   * compliance operations.
   *
   * The request body must provide a business email, full name, and other
   * required fields as specified in the schema. Optional fields such as phone
   * can also be included. The endpoint enforces uniqueness of email and legal
   * full name as per healthcarePlatform business policies. On successful
   * creation, a new record is returned representing the newly onboarded
   * Organization Admin user.
   *
   * Caller must be a System Admin (or possess equivalent permissions), as
   * OrgAdmin creation is a sensitive platform operation. Input validation,
   * audit logging, and user notification flows are all triggered. Errors are
   * returned on uniqueness violation, invalid input, or insufficient
   * authorization.
   *
   * This operation is designed to be part of onboarding, role assignment, and
   * multi-tenant configuration workflows. It is complemented by search, read,
   * update, and erase endpoints for full organization admin lifecycle
   * management. System-level audit and compliance requirements are enforced for
   * all creation actions.
   *
   * @param connection
   * @param body Account creation details for new Organization Admin user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrganizationAdmin.ICreate,
  ): Promise<IHealthcarePlatformOrganizationAdmin> {
    try {
      return await posthealthcarePlatformSystemAdminOrganizationadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve Organization Admin user records with advanced filtering
   * and pagination.
   *
   * Use this operation to retrieve a filtered, paginated list of Organization
   * Admin accounts within the healthcarePlatform system. This enables global
   * and system administrators to locate, audit, or manage organziational
   * admins, supporting scenarios such as compliance review and bulk updates.
   *
   * The healthcare_platform_organizationadmins schema tracks the identity,
   * contact, and status of each organization admin. Filters available include
   * full name, email, account status, and date range. Results can be sorted and
   * paginated for scalability. Sensitive fields and audit references are
   * protected based on caller's role/privileges.
   *
   * Security rules restrict access to high-privilege roles, ensuring that only
   * authorized actors with platform-wide or compliance responsibilities can
   * request this data. The endpoint supports complex search requirements but
   * does not expose raw credentials or unrelated organizational context
   * details.
   *
   * Error handling ensures invalid filters, pagination errors, or misuse will
   * be rejected with clear feedback. The operation is typically used in
   * conjunction with user detail retrieval and account management endpoints,
   * providing an efficient backbone for administrative workflows.
   *
   * @param connection
   * @param body Filter, pagination, and sorting criteria for Organization Admin
   *   search queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOrganizationAdmin.IRequest,
  ): Promise<IPageIHealthcarePlatformOrganizationadmin.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminOrganizationadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed profile for specific Organization Admin by
   * organizationAdminId.
   *
   * This API returns the detailed profile of a single Organization Admin
   * account from the healthcarePlatform system, including display name, email,
   * status, and contact information. It is based on the
   * healthcare_platform_organizationadmins schema, which governs
   * organization-specific admin users responsible for staff, compliance,
   * billing, and reporting management.
   *
   * Authorization is restricted to privileged roles with business or compliance
   * need. The account is looked up by organizationAdminId (UUID). All returned
   * data respects platform privacy and audit constraints and omits sensitive
   * credential information.
   *
   * The endpoint throws errors for invalid, deleted, or non-existent
   * organizationAdminId records, and is designed to complement organization
   * admin search, creation, and update endpoints. Used in administrative UIs
   * and automated audit/compliance workflows.
   *
   * @param connection
   * @param organizationAdminId Unique identifier (UUID) of the Organization
   *   Admin user to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizationAdminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationAdminId")
    organizationAdminId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformOrganizationAdmin> {
    try {
      return await gethealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId(
        {
          systemAdmin,
          organizationAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an organization administrator
   * (healthcare_platform_organizationadmins) record by its ID.
   *
   * Updates a specific organization administrator's information, including
   * their full legal name, business email, and phone number as stored in the
   * 'healthcare_platform_organizationadmins' table. This operation is subject
   * to strict audit trails and can only be performed by users with suitable
   * privileges within the healthcare organization.
   *
   * On successful update, the response includes all current record fields and
   * verification of the changes. The operation logs the update timestamp and
   * ensures all business compliance workflows related to administrator updates
   * are followed.
   *
   * Validation checks include email uniqueness, required fields, and
   * enforcement of business logic for organization admin privileges. Conflict
   * or access errors return clear business-oriented error messages. Only fields
   * existent in the schema are used or returned. The update can only be
   * performed if the record is not marked as deleted (soft-deleted).
   *
   * @param connection
   * @param organizationAdminId The unique identifier (UUID) of the organization
   *   administrator to update.
   * @param body Payload containing updatable fields for the organization admin,
   *   such as full_name, email, phone.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":organizationAdminId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationAdminId")
    organizationAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformOrganizationAdmin.IUpdate,
  ): Promise<IHealthcarePlatformOrganizationAdmin> {
    try {
      return await puthealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId(
        {
          systemAdmin,
          organizationAdminId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (hard-delete) an organization administrator by ID
   * (healthcare_platform_organizationadmins).
   *
   * Permanently removes the specified organization admin entry from the
   * database, fully erasing associated administrator details. Access is
   * restricted to system or organization administrators with the highest level
   * permissions in the healthcarePlatform.
   *
   * Upon completion, the operation ensures the record can no longer be
   * referenced or recovered and initiates a platform-wide audit log event. All
   * access constraints and dependencies must be resolved before deletion. If
   * the specified record is missing, already deleted, or protected by policy
   * (active assignments or investigatory lock), the operation returns clear
   * error messages.
   *
   * No soft-deletion is performed for this operation, and care should be taken
   * to comply with security and privacy best practices, including audit
   * compliance for privileged actor actions.
   *
   * @param connection
   * @param organizationAdminId The unique identifier (UUID) of the organization
   *   administrator to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":organizationAdminId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("organizationAdminId")
    organizationAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminOrganizationadminsOrganizationAdminId(
        {
          systemAdmin,
          organizationAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
