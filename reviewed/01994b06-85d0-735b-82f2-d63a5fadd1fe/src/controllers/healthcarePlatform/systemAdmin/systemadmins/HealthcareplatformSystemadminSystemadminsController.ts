import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminSystemadmins } from "../../../../providers/posthealthcarePlatformSystemAdminSystemadmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminSystemadmins } from "../../../../providers/patchhealthcarePlatformSystemAdminSystemadmins";
import { gethealthcarePlatformSystemAdminSystemadminsSystemAdminId } from "../../../../providers/gethealthcarePlatformSystemAdminSystemadminsSystemAdminId";
import { puthealthcarePlatformSystemAdminSystemadminsSystemAdminId } from "../../../../providers/puthealthcarePlatformSystemAdminSystemadminsSystemAdminId";
import { deletehealthcarePlatformSystemAdminSystemadminsSystemAdminId } from "../../../../providers/deletehealthcarePlatformSystemAdminSystemadminsSystemAdminId";

import { IHealthcarePlatformSystemAdmin } from "../../../../api/structures/IHealthcarePlatformSystemAdmin";
import { IPageIHealthcarePlatformSystemadmin } from "../../../../api/structures/IPageIHealthcarePlatformSystemadmin";

@Controller("/healthcarePlatform/systemAdmin/systemadmins")
export class HealthcareplatformSystemadminSystemadminsController {
  /**
   * Create a new system administrator (healthcare_platform_systemadmins).
   *
   * Create a new system administrator account to manage the healthcarePlatform
   * system. Only current system admins may create new admin accounts.
   *
   * This operation requires required fields such as email (unique, business
   * domain), full legal name, and may include business phone for account
   * validation/MFA. Upon creation, the admin's created_at and status fields are
   * set per platform defaults. The newly created admin account is returned in
   * full, but without credential hashes or sensitive authentication data.
   *
   * Failure scenarios include uniqueness violations, missing required fields,
   * or permission errors. This is a sensitive endpoint governed by the highest
   * level of audit, requiring that invokers themselves be privileged
   * systemAdmin users.
   *
   * @param connection
   * @param body New system administrator account information (email, full name,
   *   phone)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.ICreate,
  ): Promise<IHealthcarePlatformSystemAdmin> {
    try {
      return await posthealthcarePlatformSystemAdminSystemadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of system administrators
   * (healthcare_platform_systemadmins).
   *
   * Retrieve a list of all system administrator accounts registered in the
   * healthcarePlatform system. This operation allows privileged users to
   * search, filter, and view admins by attributes such as email, full name,
   * phone number, or account creation date.
   *
   * Security is of the utmost importance; this endpoint must be tightly
   * restricted to users with system-level administrative rights, as it exposes
   * platform management accounts. The resulting data includes audit fields,
   * omits sensitive credential hashes, and highlights soft-deleted/inactive
   * accounts as required for audit/compliance reviews.
   *
   * This operation interacts with the healthcare_platform_systemadmins table,
   * leveraging database indexes for fast searching and retrieval. Paginated
   * responses are essential for large platforms with many admins. Error
   * handling includes permission errors for unauthorized access and validation
   * for invalid filters or sort parameters. Related endpoints include system
   * administrator creation, detail retrieval, and updates.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for listing system
   *   admins
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.IRequest,
  ): Promise<IPageIHealthcarePlatformSystemadmin.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminSystemadmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve platform system administrator details by ID
   * (healthcare_platform_systemadmins).
   *
   * Retrieve information about a specific system administrator using their
   * unique ID. This is intended for privileged review or compliance actions.
   *
   * This endpoint provides all stored profile details for the selected admin,
   * including email, full name, phone, timestamps, and soft-deletion status.
   * Credentials or authentication hashes are never returned. Access is limited
   * to users with systemAdmin privileges for security reasons.
   *
   * The operation is built upon the healthcare_platform_systemadmins model and
   * will result in a 404 if no active or soft-deleted matching record is found.
   * Validation includes UUID format for the ID parameter. This endpoint
   * complements the system admin list, creation, and update operations.
   *
   * @param connection
   * @param systemAdminId Unique identifier for the target system administrator
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemAdminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformSystemAdmin> {
    try {
      return await gethealthcarePlatformSystemAdminSystemadminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update platform system administrator profile fields
   * (healthcare_platform_systemadmins).
   *
   * Update non-credential information (such as full name, phone, or status) for
   * an existing system administrator. Only other system admins may make profile
   * changes, ensuring strong compliance and security posture.
   *
   * Core fields such as active/deactivated status, contact phone, and display
   * name may be updated, but credential/authorization settings are managed via
   * separate endpoints/lifecycle. Only systemAdmin users may use this endpoint,
   * and all changes are logged for compliance.
   *
   * The operation validates uniqueness and allowed transitions per business
   * rules and links to audit trail logic. On success, the full updated system
   * admin profile is returned, except for authentication hashes or sensitive
   * information.
   *
   * @param connection
   * @param systemAdminId Unique identifier of the system administrator to
   *   update
   * @param body Updated fields for system administrator profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemAdminId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.IUpdate,
  ): Promise<IHealthcarePlatformSystemAdmin> {
    try {
      return await puthealthcarePlatformSystemAdminSystemadminsSystemAdminId({
        systemAdmin,
        systemAdminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a System Admin account from the
   * healthcare_platform_systemadmins table.
   *
   * This API operation enables the permanent deletion of a System Admin account
   * from the healthcarePlatform system. It is intended for rare,
   * compliance-justified scenarios such as role revocation, security breaches,
   * or organization restructuring. The healthcare_platform_systemadmins table
   * records superuser identity and contact information, and is central to
   * platform-wide operations.
   *
   * Authorization is limited to other System Admins and service owner roles.
   * The deletion process is logged for forensic audit purposes, removing the
   * record and breaking all associated assignments. The operation does not
   * cascade to lower-privilege user types and must carefully respect
   * referential integrity. Deletion is irreversible, and all access by the user
   * is immediately revoked.
   *
   * Error handling includes rejection if the systemAdminId is invalid, the
   * account is already deleted, or referential integrity is at risk. This
   * endpoint is complementary to account deactivation endpoints and should be
   * used with caution, only in scenarios where full removal is
   * business-mandated.
   *
   * The operation is tracked in compliance and audit logs for platform-wide
   * monitoring. Records are permanently removed from the database, not simply
   * marked as deleted. Manual internal review and clearance may be required
   * before invocation.
   *
   * @param connection
   * @param systemAdminId Unique identifier (UUID) of the target System Admin to
   *   be permanently deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemAdminId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminSystemadminsSystemAdminId(
        {
          systemAdmin,
          systemAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
