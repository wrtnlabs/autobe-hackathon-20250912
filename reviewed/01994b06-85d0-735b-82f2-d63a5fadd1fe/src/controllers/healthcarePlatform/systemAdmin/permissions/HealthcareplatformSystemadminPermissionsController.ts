import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminPermissions } from "../../../../providers/posthealthcarePlatformSystemAdminPermissions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminPermissions } from "../../../../providers/patchhealthcarePlatformSystemAdminPermissions";
import { gethealthcarePlatformSystemAdminPermissionsPermissionId } from "../../../../providers/gethealthcarePlatformSystemAdminPermissionsPermissionId";
import { puthealthcarePlatformSystemAdminPermissionsPermissionId } from "../../../../providers/puthealthcarePlatformSystemAdminPermissionsPermissionId";
import { deletehealthcarePlatformSystemAdminPermissionsPermissionId } from "../../../../providers/deletehealthcarePlatformSystemAdminPermissionsPermissionId";

import { IHealthcarePlatformPermission } from "../../../../api/structures/IHealthcarePlatformPermission";
import { IPageIHealthcarePlatformPermission } from "../../../../api/structures/IPageIHealthcarePlatformPermission";

@Controller("/healthcarePlatform/systemAdmin/permissions")
export class HealthcareplatformSystemadminPermissionsController {
  /**
   * Create a new permission entry in the healthcare_platform_permissions table.
   *
   * Creates a new permission in the system RBAC database by accepting details
   * such as code, name, description, scope_type, and status. The POST request
   * validates all required fields and implements uniqueness checks (e.g.,
   * code/scope_type pair) as enforced in the Prisma schema. All permission
   * creation actions are strictly limited to users with 'systemAdmin' role to
   * prevent unauthorized privilege escalation or RBAC modifications.
   *
   * On successful creation, the detailed permission record is returned. If the
   * provided code or scope_type is not unique, or input validation fails, an
   * error is returned. Related operations include viewing, updating, listing,
   * or deleting permissions as part of RBAC configuration and audit routines.
   * All creation events must be audit-logged for compliance.
   *
   * @param connection
   * @param body Fields required for creation of a permission definition.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPermission.ICreate,
  ): Promise<IHealthcarePlatformPermission> {
    try {
      return await posthealthcarePlatformSystemAdminPermissions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Filter, search, and paginate RBAC permission definitions for mapping.
   *
   * Retrieve a paginated and filtered list of available RBAC permissions in the
   * system. Permissions define discrete actionable functions or scopes granted
   * to roles. This endpoint supports advanced filtering by permission code,
   * name, scope_type, and status to allow administrators to understand, review,
   * and manage available permissions.
   *
   * Security: This operation is limited to authenticated system or organization
   * administrators, ensuring only privileged users can review and map system
   * permissions. Business logic enforces role-based restrictions per the
   * organization context, as defined in the Prisma schema.
   *
   * Relationship: Permissions retrieved via this operation are mapped to roles
   * using the roles interface. Permission status, description, and allowed
   * scope_type are included in the response for administrators to perform
   * accurate role-based mapping and audits.
   *
   * Validation: Filtering supports partial and case-insensitive matching.
   * Results are paginated for large systems; administrators should use
   * pagination controls for efficient data discovery. Attempting to access
   * without required RBAC context returns a 403 error.
   *
   * This operation is typically used as a precursor to the assignment or update
   * of role permissions in organization or platform setup workflows.
   *
   * @param connection
   * @param body Filter, search, and pagination parameters for permission
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPermission.IRequest,
  ): Promise<IPageIHealthcarePlatformPermission.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminPermissions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific permission definition from the
   * healthcare_platform_permissions table.
   *
   * Retrieves information for a single permission, identified by its unique
   * permissionId. This permission may be associated with a given scope such as
   * platform, organization, or department, and includes all fields defined in
   * the permissions table, such as code, name, description, scope_type, and
   * status.
   *
   * Only authorized users with platform or organization-level administrative
   * rights may view permission definitions to prevent unauthorized enumeration
   * of sensitive permission codes. Path parameter validation must ensure a
   * valid UUID is supplied. Returns the full permission record if found, or an
   * appropriate error if not found or access is denied.
   *
   * Permission records are foundational to the system's RBAC design and may be
   * referenced by role/permission assignment features. Related operations
   * include listing all permissions, creating new permissions, updating
   * existing permissions, and deleting permissions.
   *
   * @param connection
   * @param permissionId Unique identifier for the permission record to retrieve
   *   (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":permissionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("permissionId")
    permissionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPermission> {
    try {
      return await gethealthcarePlatformSystemAdminPermissionsPermissionId({
        systemAdmin,
        permissionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing permission entry in the healthcare_platform_permissions
   * table.
   *
   * Updates the definition of a specific permission identified by permissionId.
   * All updates are restricted to users with 'systemAdmin' rights to prevent
   * unauthorized RBAC manipulation. Update requests allow changes to any of the
   * modifiable fields as per the schema and require validation that the new
   * code/scope_type pair remains unique.
   *
   * The underlying implementation should handle both full and partial updates,
   * but as per the design, PUT is used for full updates of the permission
   * entry. Returns the updated permission object upon success. Errors arise if
   * the permissionId is not found, validation fails, or uniqueness constraints
   * are violated. All updates must be recorded in the audit log for compliance
   * tracking.
   *
   * @param connection
   * @param permissionId Target permission's unique identifier (UUID format).
   * @param body All modifiable fields for the targeted permission (code, name,
   *   description, scope_type, status, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":permissionId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("permissionId")
    permissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPermission.IUpdate,
  ): Promise<IHealthcarePlatformPermission> {
    try {
      return await puthealthcarePlatformSystemAdminPermissionsPermissionId({
        systemAdmin,
        permissionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a permission entry from the healthcare_platform_permissions
   * table.
   *
   * Marks a permission as deleted by setting the deleted_at timestamp, allowing
   * for logical removal from access control flows while maintaining historical
   * and compliance traceability. This operation enforces all business
   * constraints regarding deletion, including preventing deletion of
   * permissions currently assigned to roles. Strictly limited to 'systemAdmin'
   * role users. If the permission cannot be deleted due to policy, the
   * operation returns an error with an explanatory message.
   *
   * This operation is part of the permission lifecycle management and must
   * ensure all relevant references and audit trails remain intact. The actual
   * record remains available for compliance retrieval as required by enterprise
   * healthcare audit policy.
   *
   * @param connection
   * @param permissionId Unique identifier for the permission entry to be
   *   deleted (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":permissionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("permissionId")
    permissionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminPermissionsPermissionId({
        systemAdmin,
        permissionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
