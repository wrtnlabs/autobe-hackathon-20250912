import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminUserLicenseVerifications } from "../../../../providers/patchhealthcarePlatformSystemAdminUserLicenseVerifications";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminUserLicenseVerificationsUserLicenseVerificationId } from "../../../../providers/gethealthcarePlatformSystemAdminUserLicenseVerificationsUserLicenseVerificationId";

import { IPageIHealthcarePlatformUserLicenseVerification } from "../../../../api/structures/IPageIHealthcarePlatformUserLicenseVerification";
import { IHealthcarePlatformUserLicenseVerification } from "../../../../api/structures/IHealthcarePlatformUserLicenseVerification";

@Controller("/healthcarePlatform/systemAdmin/userLicenseVerifications")
export class HealthcareplatformSystemadminUserlicenseverificationsController {
  /**
   * Search and retrieve a paginated list of professional user license
   * verifications.
   *
   * Retrieve a paginated, filtered list of professional license verification
   * records for users in the healthcarePlatform. The operation queries the
   * healthcare_platform_user_license_verifications table, supporting advanced
   * filtering by user, user_type (e.g., medicaldoctor/nurse/technician),
   * verification status (valid/suspended/etc), and license type. The endpoint
   * allows compliance officers and administrators to proactively monitor
   * licensure status, revalidation requirements, and identify irregularities or
   * at-risk credentials.
   *
   * Access to this endpoint may be audit-logged and rate-limited due to the
   * sensitivity of licensure data. Appropriate business validation is required
   * to only expose responses to those with permission to moderate
   * users/validate credentials in organizational scope. The operation should
   * enforce pagination, search, and sorting. The response includes summary
   * information for each license verification, as well as pagination meta-data
   * for UI display or bulk review.
   *
   * @param connection
   * @param body Search filters and pagination for license verification records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformUserLicenseVerification.IRequest,
  ): Promise<IPageIHealthcarePlatformUserLicenseVerification.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminUserLicenseVerifications({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific user license verification record by ID.
   *
   * Retrieve all details for a specific user professional license verification
   * record, given its unique ID. This operation reads the
   * healthcare_platform_user_license_verifications table and exposes all data
   * for the identified record, including user, user_type, license number and
   * type, current and prior verification status, and audit trail fields such as
   * dates and outcomes.
   *
   * This endpoint is used in compliance review, user audit, or for credential
   * revalidation workflows. Only authorized compliance or administrative staff
   * may access the detail, and all requests are logged for audit. The operation
   * must enforce UUID format and reply with a clear error if the record is
   * missing or access is not permitted. Related APIs include list, create, and
   * update for license verification records.
   *
   * @param connection
   * @param userLicenseVerificationId UUID of the license verification record to
   *   retrieve, from healthcare_platform_user_license_verifications.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userLicenseVerificationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userLicenseVerificationId")
    userLicenseVerificationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformUserLicenseVerification> {
    try {
      return await gethealthcarePlatformSystemAdminUserLicenseVerificationsUserLicenseVerificationId(
        {
          systemAdmin,
          userLicenseVerificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
