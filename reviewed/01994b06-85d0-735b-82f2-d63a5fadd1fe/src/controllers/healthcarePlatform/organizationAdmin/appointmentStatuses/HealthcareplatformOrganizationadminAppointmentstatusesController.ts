import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminAppointmentStatuses } from "../../../../providers/posthealthcarePlatformOrganizationAdminAppointmentStatuses";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminAppointmentStatuses } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAppointmentStatuses";
import { gethealthcarePlatformOrganizationAdminAppointmentStatusesStatusId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAppointmentStatusesStatusId";
import { puthealthcarePlatformOrganizationAdminAppointmentStatusesStatusId } from "../../../../providers/puthealthcarePlatformOrganizationAdminAppointmentStatusesStatusId";
import { deletehealthcarePlatformOrganizationAdminAppointmentStatusesStatusId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminAppointmentStatusesStatusId";

import { IHealthcarePlatformAppointmentStatus } from "../../../../api/structures/IHealthcarePlatformAppointmentStatus";
import { IPageIHealthcarePlatformAppointmentStatus } from "../../../../api/structures/IPageIHealthcarePlatformAppointmentStatus";

@Controller("/healthcarePlatform/organizationAdmin/appointmentStatuses")
export class HealthcareplatformOrganizationadminAppointmentstatusesController {
  /**
   * Create a new appointment status code and configuration in the scheduling
   * system.
   *
   * This API operation enables authorized organization administrators or
   * scheduling staff to create a new appointment status definition. Appointment
   * statuses power the workflow logic of the scheduling subsystem—each status
   * defines a state such as scheduled, confirmed, cancelled, or no-show, and
   * includes both the business code and human label used in the UI.
   *
   * The operation creates a row in the healthcare_platform_appointment_statuses
   * table and accepts a creation DTO with fields such as status_code (unique
   * within the table), display_name, business_status, and sort_order.
   *
   * Security: Only roles with explicit scheduling or organizational permission
   * (organizationAdmin, receptionist) may create appointment statuses. Business
   * rules ensure that the status code is unique and well-formed, that required
   * fields are provided, and that sort_order does not conflict with existing
   * records.
   *
   * Validation: Attempts to create duplicate codes, missing required fields, or
   * illogical business_status/sort_order combinations result in validation
   * errors. The operation is auditable; all creations are tracked as part of
   * configuration change history.
   *
   * On success, the full new status definition is returned.
   *
   * @param connection
   * @param body New appointment status details: unique code, display label,
   *   grouping, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAppointmentStatus.ICreate,
  ): Promise<IHealthcarePlatformAppointmentStatus> {
    try {
      return await posthealthcarePlatformOrganizationAdminAppointmentStatuses({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all appointment statuses in the scheduling module.
   *
   * This API operation allows users with scheduling management privileges to
   * search and retrieve appointment status definitions across the platform.
   * Appointment statuses define the possible states of appointments (e.g.,
   * scheduled, confirmed, canceled, no-show) and are critical for scheduling
   * workflows, UI flow, and business rules enforcement.
   *
   * This operation queries the healthcare_platform_appointment_statuses table,
   * returning paginated and optionally filtered results. Supported filters may
   * include business_status, display_name, or custom sort_order. The operation
   * returns both core codes and user-facing display names.
   *
   * Security: Typically, this endpoint is available to authenticated users
   * (e.g., receptionists, clinical operations staff) to power UI components,
   * dashboard analytics, or business settings screens. No sensitive data is
   * exposed—content is non-PHI but critical for workflow logic.
   *
   * Validation: If filters or sorting parameters are invalid, a validation
   * error is generated. Pagination ensures efficient retrieval even with large
   * status dictionaries. Related endpoints include status creation, update, or
   * detail retrieval per appointment status.
   *
   * @param connection
   * @param body Searching, filtering, or sorting criteria for appointment
   *   statuses (e.g., by status_code, display_name, or order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAppointmentStatus.IRequest,
  ): Promise<IPageIHealthcarePlatformAppointmentStatus.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAppointmentStatuses({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details for a single appointment status identified by statusId.
   *
   * This API operation is used to fetch the detailed definition of a specific
   * appointment status. It returns information such as the workflow code,
   * display label, business grouping (active, closed), and UI sorting order for
   * the status requested by statusId.
   *
   * Access to this operation is typically required by scheduling staff, system
   * administrators, or integration clients needing to understand or validate
   * appointment state flows. The associated table
   * (healthcare_platform_appointment_statuses) acts as the canonical registry
   * for system-wide and organizational status options.
   *
   * Security: There is minimal sensitivity—the data is non-PHI and may be
   * accessible to authenticated reception, admin, and scheduling roles. The
   * operation supports business/operational UI and workflow configuration, and
   * is essential for custom rule-building or display logic in downstream
   * applications.
   *
   * Validation: If statusId does not exist, an error is returned. This endpoint
   * is read-only; updates and creation are managed via separate endpoints.
   *
   * @param connection
   * @param statusId Unique identifier for the target appointment status to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAppointmentStatus> {
    try {
      return await gethealthcarePlatformOrganizationAdminAppointmentStatusesStatusId(
        {
          organizationAdmin,
          statusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an appointment status in healthcare_platform_appointment_statuses
   * table.
   *
   * This operation enables a system administrator or organization administrator
   * to update an appointment status, such as its human-readable label, workflow
   * grouping, or sort priority. It is strictly permissioned and requires that
   * 'statusId' is a valid UUID and the status must exist.
   *
   * If the appointment status is system-reserved, attempts to modify critical
   * codes are subject to further restriction. The operation will reject
   * modifications to non-existent, deleted, or non-schema fields. This is
   * essential for managing visible and operational status codes in complex
   * organizational workflows. Related endpoints include single status retrieval
   * (GET), deletion (DELETE), and status code search (PATCH or GET).
   *
   * @param connection
   * @param statusId Unique identifier of the appointment status to update
   * @param body Updated fields for appointment status, including display name,
   *   business status, or sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":statusId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentStatus.IUpdate,
  ): Promise<IHealthcarePlatformAppointmentStatus> {
    try {
      return await puthealthcarePlatformOrganizationAdminAppointmentStatusesStatusId(
        {
          organizationAdmin,
          statusId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an appointment status (hard delete) from
   * healthcare_platform_appointment_statuses table.
   *
   * This operation permanently removes an appointment status from the platform,
   * restricted to system administrators and organization administrators. The
   * statusId parameter must be a valid UUID referencing an existing appointment
   * status.
   *
   * This operation is not reversible, and any attempt to delete a non-existent
   * or currently referenced status will be rejected. Associated appointments or
   * business logic using the status code should be reviewed before deletion.
   * Use this only for deprecated custom or misconfigured statuses. Related
   * endpoints include single status retrieval (GET), updating (PUT), and
   * listing all appointment statuses (PATCH/GET).
   *
   * @param connection
   * @param statusId Unique identifier of the appointment status to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":statusId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminAppointmentStatusesStatusId(
        {
          organizationAdmin,
          statusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
