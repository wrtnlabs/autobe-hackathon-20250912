import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminDataExportLogs } from "../../../../providers/patchhealthcarePlatformOrganizationAdminDataExportLogs";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminDataExportLogsDataExportLogId } from "../../../../providers/gethealthcarePlatformOrganizationAdminDataExportLogsDataExportLogId";

import { IPageIHealthcarePlatformDataExportLog } from "../../../../api/structures/IPageIHealthcarePlatformDataExportLog";
import { IHealthcarePlatformDataExportLog } from "../../../../api/structures/IHealthcarePlatformDataExportLog";

@Controller("/healthcarePlatform/organizationAdmin/dataExportLogs")
export class HealthcareplatformOrganizationadminDataexportlogsController {
  /**
   * Search and retrieve a filtered, paginated list of data export log events
   * from healthcare_platform_data_export_logs.
   *
   * Retrieve a list of data export logs matching filters such as export type,
   * justification, destination, status, or created date, with full pagination
   * and sorting capabilities.
   *
   * The endpoint is primarily used by systemAdmin and organizationAdmin roles
   * for audit, compliance, and operational review. All responses exclude PHI
   * content and only provide metadata. Filtering parameters include export_type
   * (e.g., EHR_BULK, REPORT), exported_data_scope, status, and date range.
   *
   * Security: Restricted to highly privileged users due to the sensitivity of
   * export operations, and full actions are logged as part of a compliance
   * audit. Query results show only records within the user's organization or
   * the scope of their assignment.
   *
   * Validation: Only queryable fields from the Prisma schema may be filtered.
   * Sort order defaults to recent events.
   *
   * This operation works together with the single log retrieval endpoint for
   * detailed drill-down. Standard errors are returned for access violations,
   * and all access events are audit-logged.
   *
   * @param connection
   * @param body Parameters for data export log filtering, searching,
   *   pagination, and sorting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDataExportLog.IRequest,
  ): Promise<IPageIHealthcarePlatformDataExportLog.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminDataExportLogs({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the details of a data export log record from
   * healthcare_platform_data_export_logs by ID.
   *
   * Retrieve the details for an individual data export log record, including
   * export_type, exported_data_scope, justification, status, timestamp,
   * destination, and file metadata, as permitted by the Prisma schema.
   *
   * This is an audit/compliance-focused endpoint only for privileged users who
   * have access in their org. PHI content or exported files themselves are
   * never returnedâ€”only metadata is shown. Full access event is logged, and
   * invalid/missing dataExportLogId returns a not found error.
   *
   * Works together with the data export log search operation. If the record is
   * not visible to the user's scope, returns a forbidden error. All lookup
   * events are audit-logged.
   *
   * @param connection
   * @param dataExportLogId The unique identifier (UUID) of the data export log
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dataExportLogId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dataExportLogId")
    dataExportLogId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDataExportLog> {
    try {
      return await gethealthcarePlatformOrganizationAdminDataExportLogsDataExportLogId(
        {
          organizationAdmin,
          dataExportLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
