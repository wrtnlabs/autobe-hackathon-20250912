import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminResourceSchedules } from "../../../../providers/posthealthcarePlatformOrganizationAdminResourceSchedules";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminResourceSchedules } from "../../../../providers/patchhealthcarePlatformOrganizationAdminResourceSchedules";
import { gethealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId } from "../../../../providers/gethealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId";
import { puthealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId } from "../../../../providers/puthealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId";
import { deletehealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId";

import { IHealthcarePlatformResourceSchedule } from "../../../../api/structures/IHealthcarePlatformResourceSchedule";
import { IPageIHealthcarePlatformResourceSchedule } from "../../../../api/structures/IPageIHealthcarePlatformResourceSchedule";

@Controller("/healthcarePlatform/organizationAdmin/resourceSchedules")
export class HealthcareplatformOrganizationadminResourceschedulesController {
  /**
   * Create a new resource schedule for provider/room/equipment availability
   * (healthcare_platform_resource_schedules).
   *
   * Creates a new resource schedule for a provider, room, or equipment in a
   * healthcare organization. This is a key administrative capability and is
   * restricted to scheduling admins or org-level staff as per RBAC rules.
   * Resource schedules define the available hours and recurrence for
   * organizational assets.
   *
   * The operation corresponds to the healthcare_platform_resource_schedules
   * table, utilizing fields such as resource_type, resource_id,
   * available_start_time, available_end_time, recurrence_pattern, and
   * exception_dates. The system ensures no overlapping schedules for the same
   * resource and that all times fall within organization-wide calendar
   * constraints.
   *
   * Security checks ensure only properly assigned roles can execute this
   * operation; the audit trail will store the responsible user and timestamp.
   * Related endpoints for updating or deleting resource schedules can be used
   * for lifecycle management. Error handling includes uniqueness validation and
   * overlap detection, with business logic enforcing time and policy
   * compliance.
   *
   * @param connection
   * @param body Request body describing the resource, available time windows,
   *   and recurrence/exception details for the resource schedule.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformResourceSchedule.ICreate,
  ): Promise<IHealthcarePlatformResourceSchedule> {
    try {
      return await posthealthcarePlatformOrganizationAdminResourceSchedules({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all resource schedules with search and pagination in
   * healthcare_platform_resource_schedules table.
   *
   * Allows system-level or organization-level administrators to list all
   * configured resource schedules, with support for advanced filtering (by
   * organization, resource type or ID, availability windows, recurrence),
   * paging, and sorting. Only non-soft-deleted records will be returned.
   *
   * The response provides schedule metadata needed for administrative decision
   * making and calendar UI construction. Security is enforced by role-based
   * access restriction. Related endpoints include single resource schedule
   * retrieval (GET), creation (POST), update (PUT), and deletion (DELETE).
   *
   * @param connection
   * @param body Resource schedule search and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformResourceSchedule.IRequest,
  ): Promise<IPageIHealthcarePlatformResourceSchedule> {
    try {
      return await patchhealthcarePlatformOrganizationAdminResourceSchedules({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a single resource schedule in
   * healthcare_platform_resource_schedules table.
   *
   * Permits privileged administrators to view detailed configuration of a
   * specific resource schedule entry identified by resourceScheduleId, which
   * must be a valid UUID. The response includes all resource schedule
   * configuration fields, suitable for display in administrative dashboards,
   * resource auditing, or advanced scheduling logic.
   *
   * If the entry does not exist or has been soft-deleted, an error will be
   * returned. Related endpoints: creation (POST), update (PUT), deletion
   * (DELETE), and schedule list (PATCH/GET).
   *
   * @param connection
   * @param resourceScheduleId Unique identifier of the resource schedule to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":resourceScheduleId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("resourceScheduleId")
    resourceScheduleId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformResourceSchedule> {
    try {
      return await gethealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId(
        {
          organizationAdmin,
          resourceScheduleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update resource schedule details (healthcare_platform_resource_schedules)
   * by ID.
   *
   * Updates an existing resource schedule identified by resourceScheduleId,
   * allowing modification of the available start/end times, resource
   * assignment, recurrence pattern, and exceptions. This endpoint is critical
   * for adapting room/provider/equipment schedules as operational needs
   * change.
   *
   * This operation is tied to the healthcare_platform_resource_schedules table
   * and requires resourceScheduleId as a path parameter. Input structure
   * follows IHealthcarePlatformResourceSchedule.IUpdate. Uniqueness and overlap
   * rules are strictly checked, and changes are logged in the organizationâ€™s
   * audit history.
   *
   * Security is enforced so only appropriate org-level scheduling staff can
   * perform updates. Validation logic prevents overlapping time slots or policy
   * violations. This may be used in combination with the erase operation for
   * full lifecycle resource management. Errors are returned if an update would
   * cause an invalid state.
   *
   * @param connection
   * @param resourceScheduleId UUID of the resource schedule to update.
   * @param body Update details and properties for the target resource schedule.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":resourceScheduleId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("resourceScheduleId")
    resourceScheduleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformResourceSchedule.IUpdate,
  ): Promise<IHealthcarePlatformResourceSchedule> {
    try {
      return await puthealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId(
        {
          organizationAdmin,
          resourceScheduleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a resource schedule
   * (healthcare_platform_resource_schedules) by ID.
   *
   * Deletes an existing resource schedule identified by resourceScheduleId.
   * This is a hard delete operation, removing the schedule record and
   * disallowing further use in booking logic. Directly manipulates the
   * healthcare_platform_resource_schedules table. No request body is needed.
   *
   * Appropriate for administrative staff needing to retire or clean up outdated
   * provider, room, or equipment availabilities. Security policies ensure only
   * authorized users at the organization level may erase schedules. The system
   * will log who performed the deletion for auditing purposes. Any dependent
   * scheduled appointments must be handled or migrated by upstream business
   * logic.
   *
   * Errors are returned if the schedule does not exist or if deletion is not
   * permitted due to policy or integrations.
   *
   * @param connection
   * @param resourceScheduleId UUID of the resource schedule to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":resourceScheduleId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("resourceScheduleId")
    resourceScheduleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminResourceSchedulesResourceScheduleId(
        {
          organizationAdmin,
          resourceScheduleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
