import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBillingInvoices } from "../../../../providers/posthealthcarePlatformOrganizationAdminBillingInvoices";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBillingInvoices } from "../../../../providers/patchhealthcarePlatformOrganizationAdminBillingInvoices";
import { gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId } from "../../../../providers/gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId";
import { puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId } from "../../../../providers/puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId";
import { deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId";

import { IHealthcarePlatformBillingInvoice } from "../../../../api/structures/IHealthcarePlatformBillingInvoice";
import { IPageIHealthcarePlatformBillingInvoice } from "../../../../api/structures/IPageIHealthcarePlatformBillingInvoice";

@Controller("/healthcarePlatform/organizationAdmin/billingInvoices")
export class HealthcareplatformOrganizationadminBillinginvoicesController {
  /**
   * Create a new billing invoice (IHealthcarePlatformBillingInvoice).
   *
   * Create a new billing invoice in the healthcare platform system according to
   * business, audit, and compliance requirements.
   *
   * Users with appropriate billing or administrative permissions can issue an
   * invoice for a given patient and linked encounter. The operation covers all
   * schema-defined invoice fields including patient, encounter, organization,
   * status, due date, and line itemization.
   *
   * Creation of billing invoices requires patient identity, organization
   * context, currency, status, and total amount. If required fields are missing
   * or invalid (such as duplicate invoice_number in the organization), the
   * operation will return a business error and will not create the invoice.
   * Successful creation will result in a new invoice record and trigger
   * financial audit logging.
   *
   * This API does not permit arbitrary user invoice creation; permission checks
   * are enforced strictly for compliance.
   *
   * @param connection
   * @param body Data for creating a new billing invoice
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingInvoice.ICreate,
  ): Promise<IHealthcarePlatformBillingInvoice> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingInvoices({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate billing invoices (BillingInvoices table) by business
   * filters for finance/admin roles.
   *
   * Search and retrieve billing invoice records in a paginated, filterable
   * manner. Only users with systemAdmin, organizationAdmin, or departmentHead
   * roles can access invoice listings in their organization context.
   *
   * Query criteria can include invoice status, patient, due date range,
   * organization, and more as defined in the request schema. Pagination ensures
   * scalable access for large financial datasets. Invoice summary info is
   * returned for display in dashboards or list views, with links to detailed
   * records for drill-down.
   *
   * Security enforces strict access isolation by organization; invoices cannot
   * be retrieved across tenant boundaries. Sensitive financial data is only
   * included with appropriate roles and audit logs are maintained for all
   * accesses.
   *
   * @param connection
   * @param body Advanced search parameters and pagination for billing invoice
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingInvoice.IRequest,
  ): Promise<IPageIHealthcarePlatformBillingInvoice.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBillingInvoices({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific billing invoice by ID
   * (IHealthcarePlatformBillingInvoice).
   *
   * Retrieve a healthcare platform billing invoice using the unique invoice ID.
   *
   * This endpoint operates on the healthcare_platform_billing_invoices table
   * and returns details including patient, encounter, status, amounts, and
   * organization context, as defined in the Prisma schema. Permission checks
   * ensure that only authorized users (such as organization admins, billing
   * staff, or the invoiced patient) can access the full invoice details,
   * honoring data isolation and auditability requirements according to
   * healthcare compliance policy.
   *
   * Sensitive invoice information will only be provided to callers with valid
   * scopeâ€”it is not available to general public access. Audit logs are
   * generated for all access to this resource, in line with financial
   * compliance standards.
   *
   * If the invoice is deleted or the user lacks permission, an appropriate
   * error will be returned.
   *
   * @param connection
   * @param billingInvoiceId UUID of the target billing invoice to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingInvoiceId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingInvoice> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId(
        {
          organizationAdmin,
          billingInvoiceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a billing invoice by ID (IHealthcarePlatformBillingInvoice).
   *
   * Update billing invoice information for a specified invoice record in the
   * system. This allows for corrections, payment posting, status changes, and
   * business policy updates.
   *
   * Only users with appropriate billing or admin permissions may update
   * invoices. All updates are subject to business rules, auditability, and
   * compliance requirements; edits may be restricted if the invoice has been
   * soft-deleted, is finalized in audit, or conflicts with financial
   * regulations.
   *
   * Update actions are fully logged for compliance, and only permissible fields
   * may be changed by business users. An error will be returned if an attempt
   * is made to edit fields in violation of schema constraints or policy.
   *
   * @param connection
   * @param billingInvoiceId UUID of the target billing invoice to update
   * @param body Updated invoice information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingInvoiceId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingInvoice.IUpdate,
  ): Promise<IHealthcarePlatformBillingInvoice> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId(
        {
          organizationAdmin,
          billingInvoiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a billing invoice by ID (IHealthcarePlatformBillingInvoice).
   *
   * Soft-delete a billing invoice in the healthcare platform by marking its
   * deleted_at column. The underlying record remains in the database for
   * compliance and audit requirements, but will be excluded from standard
   * queries and reporting.
   *
   * Only authorized organization administrators or system administrators may
   * perform this action. The operation does not physically remove the record to
   * ensure auditability and regulatory compliance, particularly in financial
   * contexts.
   *
   * If the record is already deleted or does not exist, an error will be
   * returned. Deletion actions are logged for traceability.
   *
   * @param connection
   * @param billingInvoiceId UUID of the invoice to soft-delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingInvoiceId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceId(
        {
          organizationAdmin,
          billingInvoiceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
