import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments } from "../../../../../providers/posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments } from "../../../../../providers/patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments";
import { gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId } from "../../../../../providers/gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId";
import { puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId } from "../../../../../providers/puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId";
import { deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId } from "../../../../../providers/deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId";

import { IHealthcarePlatformBillingPayment } from "../../../../../api/structures/IHealthcarePlatformBillingPayment";
import { IPageIHealthcarePlatformBillingPayment } from "../../../../../api/structures/IPageIHealthcarePlatformBillingPayment";

@Controller(
  "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPayments",
)
export class HealthcareplatformOrganizationadminBillinginvoicesBillingpaymentsController {
  /**
   * Create a new billing payment for a billing invoice
   * (healthcare_platform_billing_payments).
   *
   * Adds a new payment record for the specified billing invoice. This API is
   * used when payments (by patient, insurer, or other payer) are received and
   * need to be formally recorded against an invoice. Required information
   * includes payment amount, currency, status, method, and date, with all
   * entries validated for accuracy and compliance.
   *
   * On creation, the payment is fully linked to the invoice and subject to all
   * data retention, audit, and reconciliation logic enforced by the platform.
   * Financial audit logs are automatically generated, and all creation attempts
   * are validated for duplicate, overpayment, or misattributed payments.
   *
   * Typically restricted to finance staff (organizationAdmin) with all actions
   * logged for compliance. The API enforces business rules such as not
   * exceeding invoice totals and ensuring the invoice is in a payable state.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice to which
   *   the new payment will be attached
   * @param body Details required to create a billing payment including payee,
   *   payment method, amount, date, and status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPayment.ICreate,
  ): Promise<IHealthcarePlatformBillingPayment> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments(
        {
          organizationAdmin,
          billingInvoiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve billing payments for a billing invoice
   * (healthcare_platform_billing_payments).
   *
   * Search and retrieve a paginated list of billing payment records linked to a
   * specific billing invoice. This API supports comprehensive filtering by
   * payment status, date range, currency, payee, and other dimensions for
   * financial audits and account management.
   *
   * Response contains payment summary data, including transaction details,
   * amounts, and reconciliation status. The query operation is optimized for
   * audit trail purposes, compliance reporting, and patient or administrative
   * review of payments applied to an invoice.
   *
   * Access is typically granted to finance staff (organizationAdmin, billing)
   * and all accesses are logged for both security and compliance purposes.
   * Supports business logic for missed, failed, or partially successful
   * payments and includes pagination/sorting as necessary for financial
   * reporting dashboards.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice for which
   *   payment search is conducted
   * @param body Criteria for searching billing payments, supporting filters
   *   such as payment status, date ranges, amount, and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPayment.IRequest,
  ): Promise<IPageIHealthcarePlatformBillingPayment.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPayments(
        {
          organizationAdmin,
          billingInvoiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a billing payment by ID for a billing invoice
   * (healthcare_platform_billing_payments).
   *
   * Fetches detailed information for a single billing payment record under a
   * particular invoice. This endpoint is used by finance staff and organization
   * administrators to view transaction details, audit status, payer/payee data,
   * method used, status, and all metadata required for audit and compliance
   * reviews.
   *
   * The response includes transaction record, payee, payment method, any
   * reconciliation data, posting and update timestamps, and any related
   * reference numbers or memos. The endpoint validates the linkage between the
   * invoice and payment record before returning details.
   *
   * Access is typically limited to organization-admin roles to maintain
   * financial security and protect PHI. Response is optimized for audit,
   * compliance, and reporting, with all accesses logged appropriately for
   * traceability.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice to which
   *   the payment belongs
   * @param billingPaymentId Unique identifier of the billing payment to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingPaymentId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentId")
    billingPaymentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingPayment> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment record for a billing invoice
   * (healthcare_platform_billing_payments table) in the healthcare platform.
   *
   * This operation allows authorized billing, finance, or administrative staff
   * to update a specific payment entry for a billing invoice. Example use cases
   * include correcting payment status (e.g., posted, voided, returned),
   * updating memo fields for audit traceability, or correcting the payment
   * amount after reconciliation with patient/insurer or financial records.
   *
   * Role-based access control must be enforced strictly. Only users with proper
   * privileges (e.g., organizationAdmin, billingStaff) may perform this update.
   * All changes are audit-logged with before/after state, reason, and user
   * identity for compliance with HIPAA and SOC2 financial audit trail
   * standards. Attempts to modify immutable or locked payment fields (e.g.,
   * when a payment is completely reconciled, refunded, or under investigation)
   * should be rejected with descriptive errors.
   *
   * Schema adherence is mandatory: only allowed fields can be updated, and data
   * validation (format, allowable transitions) is required. Foreign keys (such
   * as payment method, invoice ID) cannot be reassigned via update; attempts to
   * do so should be blocked. This operation is related to payment record
   * creation and payment record retrieval operations. If errors occur, details
   * should include constraint violation or permission cause.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice to which
   *   this payment belongs.
   * @param billingPaymentId Unique identifier of the billing payment record to
   *   update.
   * @param body Data to update existing billing payment record (amount, memo,
   *   status, payment method, date, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingPaymentId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentId")
    billingPaymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPayment.IUpdate,
  ): Promise<IHealthcarePlatformBillingPayment> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently deletes a billing payment record from a billing invoice
   * (healthcare_platform_billing_payments table) in the healthcare platform.
   *
   * This operation enables authorized administrative users to permanently
   * delete a billing payment record from the system, as long as it is not
   * locked, reconciled, posted, or otherwise restricted by audit policies.
   * Common use cases include correction of accidental double entry, removal of
   * test data, or elimination of erroneous payment receipts before they become
   * part of a permanent financial/audit record.
   *
   * Strict role enforcement is required: only organizationAdmin or
   * billingSuperuser roles may erase payments, and a detailed audit message
   * must be recorded for all deletion events. The operation validates the
   * payment's state before deletion—if the record has been posted, audited, or
   * is linked to a final invoice closeout, the erase operation must be denied
   * to preserve compliance. Soft deletion is not used; this is a hard delete
   * per schema.
   *
   * Related endpoints include payment creation, payment update, and payment
   * retrieval for auditing purposes. Error responses specify the reason for
   * deletion prohibition (e.g., already reconciled or under historical audit
   * hold).
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice to which
   *   the payment belongs.
   * @param billingPaymentId Unique identifier of the billing payment record to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingPaymentId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentId")
    billingPaymentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentsBillingPaymentId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
