import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminInsurancePolicies } from "../../../../providers/posthealthcarePlatformOrganizationAdminInsurancePolicies";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminInsurancePolicies } from "../../../../providers/patchhealthcarePlatformOrganizationAdminInsurancePolicies";
import { gethealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId } from "../../../../providers/gethealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId";
import { puthealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId } from "../../../../providers/puthealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId";
import { deletehealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId";

import { IHealthcarePlatformInsurancePolicy } from "../../../../api/structures/IHealthcarePlatformInsurancePolicy";
import { IPageIHealthcarePlatformInsurancePolicy } from "../../../../api/structures/IPageIHealthcarePlatformInsurancePolicy";

@Controller("/healthcarePlatform/organizationAdmin/insurancePolicies")
export class HealthcareplatformOrganizationadminInsurancepoliciesController {
  /**
   * Create a new insurance policy record in the insurance_policies table.
   *
   * This API endpoint creates a new insurance policy record for a patient in
   * the organization context. The caller must provide all required fields as
   * per the Prisma schemaâ€”these include patient_id, organization_id,
   * policy_number, payer_name, coverage dates, plan_type, and policy_status.
   * The request payload is validated to confirm uniqueness of organization_id,
   * policy_number, and payer_name, in line with Prisma constraints. On
   * successful creation, the API returns the new insurance policy object in its
   * entirety. Security and RBAC are enforced: only organization-admin, billing,
   * or specifically permitted roles can create new insurance policies, and
   * patient_id/organization_id provided must be within their assigned scope.
   * Duplicate or invalid entries trigger a validation error with a suitable
   * message. All creations generate an audit record for compliance. Related
   * operations include retrieval (GET), update (PUT), and deleting (DELETE) of
   * policies.
   *
   * @param connection
   * @param body Insurance policy creation payload, matching writable fields in
   *   the Prisma schema. Must include patient, organization, policy details,
   *   coverage dates, and plan type/status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsurancePolicy.ICreate,
  ): Promise<IHealthcarePlatformInsurancePolicy> {
    try {
      return await posthealthcarePlatformOrganizationAdminInsurancePolicies({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List, filter, and page insurance policy records
   * (healthcare_platform_insurance_policies) for an organization.
   *
   * Retrieve a filtered and paginated list of insurance policy records,
   * supporting advanced querying by patient, policy status, payer, coverage
   * dates, and plan type. This is primarily used by organization administrators
   * to monitor, report, and manage insurance policies associated with their
   * patients and organization.
   *
   * The operation accesses the healthcare_platform_insurance_policies table,
   * leveraging available indices for efficient search and business operations.
   * All results are isolated to the active organization context, and include
   * only policies not marked as deleted.
   *
   * Only organization administrators may execute this operation. Audit logs are
   * recorded for all insurance policy queries to support regulatory review,
   * privacy tracking, and business intelligence. Pagination, sorting, and
   * field-based search are available based on the
   * IHealthcarePlatformInsurancePolicy.IRequest DTO schema.
   *
   * @param connection
   * @param body Search and filtering parameters for insurance policy listing,
   *   including patient, payer, policy status, dates, and plan types.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsurancePolicy.IRequest,
  ): Promise<IPageIHealthcarePlatformInsurancePolicy> {
    try {
      return await patchhealthcarePlatformOrganizationAdminInsurancePolicies({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed insurance policy information by ID from the
   * insurance_policies table.
   *
   * This API operation retrieves the complete data for a single insurance
   * policy, given its unique insurancePolicyId (a string UUID as per Prisma
   * schema). This is critical for workflows where users must review a patient's
   * insurance information for coverage checks, claim preparation, or billing
   * purposes. The operation references the
   * healthcare_platform_insurance_policies table and ensures that only policies
   * where deleted_at is null are available. RBAC is enforced, so users can only
   * access policies pertaining to their permitted organization context and role
   * (e.g., billing staff, admin, authorized clinicians). The response includes
   * all relevant policy metadata and joins (e.g., patient and organization
   * identifiers) but never exposes sensitive internal notes or audit fields
   * unless user permissions allow. In the event an insurance policy is missing
   * or inaccessible, a 404 or suitable business error is returned. This
   * operation is often accessed in conjunction with patient detail retrieval or
   * encounter/billing query flows.
   *
   * Care is taken to ensure that only non-deleted policies are returned, and
   * users cannot see policies outside their organization scope or for which
   * they lack the proper role-based permissions, as defined in the overall
   * multi-tenant platform security policy.
   *
   * @param connection
   * @param insurancePolicyId Unique identifier of the target insurance policy
   *   (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":insurancePolicyId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformInsurancePolicy> {
    try {
      return await gethealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId(
        {
          organizationAdmin,
          insurancePolicyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing insurance policy record by its ID.
   *
   * This API endpoint allows an authorized user to update details on an
   * existing insurance policy, identified by insurancePolicyId (UUID).
   * Updatable fields include payer name, coverage period, plan type, policy
   * status, and other business metadata as per the Prisma schema. The request
   * body must follow the IHealthcarePlatformInsurancePolicy.IUpdate DTO
   * specification, and validations ensure that no duplicate
   * policy_number/payer/organization combination is produced. The update
   * operation is permitted only for organization administrators or suitably
   * authorized billing staff operating within their assigned organization.
   * Attempts to update deleted or non-existent policies result in a business
   * validation error or 404. Upon success, the updated insurance policy object
   * is returned. All changes are audit logged for HIPAA and regulatory
   * compliance. This operation is typically used in routine insurance updates,
   * corrections, or during patient record management by administrative users.
   *
   * @param connection
   * @param insurancePolicyId Unique identifier of the target insurance policy
   *   (UUID format).
   * @param body Update payload specifying mutable fields on an insurance
   *   policy. Must match the Prisma schema and validation constraints.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insurancePolicyId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsurancePolicy.IUpdate,
  ): Promise<IHealthcarePlatformInsurancePolicy> {
    try {
      return await puthealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId(
        {
          organizationAdmin,
          insurancePolicyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase an insurance policy record by its ID from the
   * insurance_policies table.
   *
   * This API endpoint permanently deletes an insurance policy record, removing
   * it from the healthcare_platform_insurance_policies database table if
   * allowed by business and regulatory logic (i.e., not under legal hold or
   * required for retention). Authorized users can execute this operation for
   * policies within their organization only, and only when no regulatory
   * retention prevents deletion. The operation performs a hard delete: the row
   * is removed, and references to the record are cleared in compliance with all
   * foreign key and business relationship rules. RBAC is enforced so only
   * organization admins or appropriately privileged staff can access this
   * functionality. Audit logs are captured with full context for security and
   * compliance investigation. Attempts to delete non-existent or out-of-scope
   * records return a business error or 404. Care is taken to prevent
   * unauthorized or accidental deletion of important insurance data. This
   * operation is used in data correction, duplicate cleanup, or record
   * management workflows. Related operations include policy creation, update,
   * and retrieval.
   *
   * @param connection
   * @param insurancePolicyId Unique identifier of the insurance policy to
   *   delete (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":insurancePolicyId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminInsurancePoliciesInsurancePolicyId(
        {
          organizationAdmin,
          insurancePolicyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
