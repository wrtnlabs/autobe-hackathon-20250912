import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId } from "../../../../providers/gethealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { puthealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId } from "../../../../providers/puthealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId";
import { deletehealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId";
import { posthealthcarePlatformOrganizationAdminBillingPaymentMethods } from "../../../../providers/posthealthcarePlatformOrganizationAdminBillingPaymentMethods";

import { IHealthcarePlatformBillingPaymentMethod } from "../../../../api/structures/IHealthcarePlatformBillingPaymentMethod";

@Controller("/healthcarePlatform/organizationAdmin/billingPaymentMethods")
export class HealthcareplatformOrganizationadminBillingpaymentmethodsController {
  /**
   * Retrieve detailed information for a specific billing payment method
   * (healthcare_platform_billing_payment_methods table) in the healthcare
   * platform.
   *
   * Retrieves the detailed record for a specified billing payment method based
   * on its unique identifier. Typical usage scenarios include updating payment
   * method configuration in administrative screens, validating patient payment
   * options during invoicing, and supporting payment processing backend
   * workflows. Returns all non-sensitive fields of the payment method entity as
   * defined in the schema.
   *
   * This operation enforces role-based access, disallowing unauthorized users
   * from accessing inactive or non-permitted methods (such as those under
   * configuration or audit hold). Linked operations include payment method
   * listing, updating, and assignment to billing processes.
   *
   * Any attempt to access a nonexistent or restricted payment method returns an
   * appropriate authorization or not found error.
   *
   * @param connection
   * @param billingPaymentMethodId Unique identifier of the billing payment
   *   method to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingPaymentMethodId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingPaymentMethodId")
    billingPaymentMethodId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingPaymentMethod> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId(
        {
          organizationAdmin,
          billingPaymentMethodId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details or activation status of a billing payment method
   * (healthcare_platform_billing_payment_methods) by ID.
   *
   * Update an existing billing payment method for an organization by its unique
   * ID. Fields that can be updated include provider name, integration details,
   * active or disabled status, and other configuration fields per business
   * requirements.
   *
   * All updates are fully audited and only available to users with
   * 'organizationAdmin' privileges. Attempts to change method type to a
   * duplicate combination or to reference an unknown payment method will result
   * in a validation error. This operation strictly validates that the record
   * exists and belongs to the user's organization context before applying
   * changes.
   *
   * Provides granular control over payment options for staff and patients, with
   * immediate effect on payment acceptance within the organization. PCI
   * compliance and data security standards are enforced at all times.
   *
   * @param connection
   * @param billingPaymentMethodId The unique identifier of the target billing
   *   payment method to update.
   * @param body Update parameters for an existing billing payment method, such
   *   as provider, integration settings, or enabled status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingPaymentMethodId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingPaymentMethodId")
    billingPaymentMethodId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPaymentMethod.IUpdate,
  ): Promise<IHealthcarePlatformBillingPaymentMethod> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId(
        {
          organizationAdmin,
          billingPaymentMethodId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an existing billing payment method
   * (healthcare_platform_billing_payment_methods) by ID.
   *
   * Soft-delete a billing payment method by its unique ID, marking the
   * deleted_at timestamp for compliance retention. This disables the payment
   * method for all new invoice and payment workflows within the organization,
   * while maintaining data for audit and regulatory review.
   *
   * Only organization administrators may perform this action. Attempts to
   * delete non-existent or already-deleted methods return an appropriate error
   * response. Associated financial records remain unaffected.
   *
   * The operation enforces strict organizational isolation and audits all
   * deletion requests as required for PCI and healthcare compliance. Deleted
   * payment methods can be reviewed by administrators via audit logs or
   * admin-only list views.
   *
   * @param connection
   * @param billingPaymentMethodId The unique identifier of the target billing
   *   payment method to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingPaymentMethodId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingPaymentMethodId")
    billingPaymentMethodId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingPaymentMethodsBillingPaymentMethodId(
        {
          organizationAdmin,
          billingPaymentMethodId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new billing payment method record
   * (healthcare_platform_billing_payment_methods) for an organization.
   *
   * Create and register a new billing payment method for a specific
   * organization. This includes information such as method type (credit card,
   * ACH, insurance, etc.), optional provider name, integration details for
   * payment gateways, activation status, and links to the parent organization
   * for data isolation.
   *
   * Upon creation, the method is available for invoice and payment flows within
   * the organization. All created payment methods are subject to organizational
   * policy and may be edited or deactivated later. Audit trails are maintained
   * for all configuration changes.
   *
   * Sensitive provider/integration information is securely handled and returned
   * only as necessary. Security rules require that only users with the
   * 'organizationAdmin' role can create new billing payment methods. Attempting
   * to register a duplicate method type/provider will return a validation
   * error. All inputs are strictly validated per business and PCI
   * requirements.
   *
   * @param connection
   * @param body Creation parameters for a billing payment method, including
   *   type, provider, integration settings, and activation status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingPaymentMethod.ICreate,
  ): Promise<IHealthcarePlatformBillingPaymentMethod> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingPaymentMethods(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
