import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminTechnicians } from "../../../../providers/posthealthcarePlatformOrganizationAdminTechnicians";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminTechnicians } from "../../../../providers/patchhealthcarePlatformOrganizationAdminTechnicians";
import { gethealthcarePlatformOrganizationAdminTechniciansTechnicianId } from "../../../../providers/gethealthcarePlatformOrganizationAdminTechniciansTechnicianId";
import { puthealthcarePlatformOrganizationAdminTechniciansTechnicianId } from "../../../../providers/puthealthcarePlatformOrganizationAdminTechniciansTechnicianId";
import { deletehealthcarePlatformOrganizationAdminTechniciansTechnicianId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminTechniciansTechnicianId";

import { IHealthcarePlatformTechnician } from "../../../../api/structures/IHealthcarePlatformTechnician";
import { IPageIHealthcarePlatformTechnician } from "../../../../api/structures/IPageIHealthcarePlatformTechnician";

@Controller("/healthcarePlatform/organizationAdmin/technicians")
export class HealthcareplatformOrganizationadminTechniciansController {
  /**
   * Create a new technician record in healthcare_platform_technicians.
   *
   * Onboard a new technician by submitting the required data fields—business
   * email (must be unique), full legal name, professional license number (also
   * unique), and other optional details such as specialty and phone. Data is
   * validated against schema requirements and business rules (such as license
   * uniqueness and format) before insertion.
   *
   * New technician creation actions are restricted to HR personnel, department
   * heads, or organization administrators with appropriate permissions. All new
   * records are tracked in audit logs with the creating user, timestamp, and
   * all input data for future review and compliance checks.
   *
   * If creation fails due to duplication or validation issues, an appropriate
   * error with remediation details is returned. Related endpoints include
   * updating existing technicians, deactivating staff records, and searching
   * the technician directory for recently added users.
   *
   * @param connection
   * @param body Technician staff creation data.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformTechnician.ICreate,
  ): Promise<IHealthcarePlatformTechnician> {
    try {
      return await posthealthcarePlatformOrganizationAdminTechnicians({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate the list of technicians in
   * healthcare_platform_technicians.
   *
   * Use this endpoint to search for and list all technician records in the
   * system, applying advanced filtering by fields such as full name, license
   * number, specialty, creation date, current status, or other business
   * attributes present in the underlying schema. Sorting and pagination allow
   * organization administrators to efficiently manage large rosters of
   * technical clinical staff.
   *
   * Security is enforced via role-based access control, allowing only
   * authorized administrative users to access the full technician directory.
   * Output does not include any sensitive personal data unless explicitly
   * permitted by organizational or regulatory policy. Access logs should be
   * maintained for all invocation of this endpoint as it may contain personally
   * identifiable and credential information.
   *
   * Input is validated according to the request DTO, and all results returned
   * are derived exclusively from the healthcare_platform_technicians table,
   * joined with related roles or assignments if needed for presentation
   * purposes. This operation is typically used by organization administrators,
   * department heads, or HR/compliance staff.
   *
   * @param connection
   * @param body Search, filter, and pagination request for technician staff
   *   records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformTechnician.IRequest,
  ): Promise<IPageIHealthcarePlatformTechnician.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminTechnicians({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a technician record in healthcare_platform_technicians by ID.
   *
   * Retrieve the full profile of a specific technician by UUID. This operation
   * queries the healthcare_platform_technicians entity, returning all defined
   * fields such as full name, license number, specialty, contact info, creation
   * and update chronology, and current status as specified in the schema.
   *
   * This endpoint is restricted to administrative or HR-level users as it can
   * expose sensitive or regulated credential and contact data. All access
   * attempts are logged for compliance and audit purposes.
   *
   * Related endpoints include listing technicians, creating or updating staff
   * records, and managing staff role assignments. Errors are returned if the
   * technicianId does not exist or if the user lacks the necessary privileges.
   *
   * @param connection
   * @param technicianId Unique identifier of the technician to retrieve (UUID
   *   format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":technicianId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("technicianId")
    technicianId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformTechnician> {
    try {
      return await gethealthcarePlatformOrganizationAdminTechniciansTechnicianId(
        {
          organizationAdmin,
          technicianId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a technician's profile in the healthcare_platform_technicians table.
   *
   * Update the information of an existing technician within the
   * healthcarePlatform. This operation is essential when any of the
   * technician's attributes—such as contact details, specialty, or credential
   * data—need to be revised for accuracy, regulatory compliance, or
   * organizational changes.
   *
   * Security safeguards ensure that only users with adequate privileges (e.g.,
   * systemAdmin, organizationAdmin) can modify technician records. All updates
   * are logged for audit and compliance. Technicians' data supports workforce
   * management, scheduling, and technical workflow assignment throughout the
   * system.
   *
   * Modification of key properties like license_number or specialty may trigger
   * regulatory verification and must comply with unique and current standards
   * as described in the schema. Data updates here may affect downstream
   * scheduling/resource assignments and compliance audits. Error handling
   * includes validation of field formats and detection of conflicts (e.g.,
   * duplicate emails or license numbers).
   *
   * Related endpoints may provide technician listing and detail retrieval for
   * broader admin workflows. This operation is fundamental to ongoing staff
   * record maintenance and auditability.
   *
   * @param connection
   * @param technicianId Unique identifier of the technician to be updated.
   * @param body Fields and updated property values for the technician record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":technicianId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("technicianId")
    technicianId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformTechnician.IUpdate,
  ): Promise<IHealthcarePlatformTechnician> {
    try {
      return await puthealthcarePlatformOrganizationAdminTechniciansTechnicianId(
        {
          organizationAdmin,
          technicianId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a technician from the healthcare_platform_technicians
   * table.
   *
   * Erase a technician from the healthcarePlatform system by targeting the
   * unique technicianId. This operation either marks the record as deleted by
   * setting deleted_at (for audit trail and compliance preservation) or removes
   * the record if no soft-delete is implemented.
   *
   * Technician deletions are restricted to high-privilege users. All actions
   * are recorded in compliance logs for traceability. Deletion may impact
   * scheduling, workflow assignment, and overall organizational staffing
   * configuration. Proper error handling ensures attempts to erase non-existent
   * or already-deleted technicians are flagged for review.
   *
   * This action is generally irreversible and must abide by business policies
   * regarding historical data retention. Attempting to remove active or
   * referenced technicians may result in constraint errors or blocked requests.
   * Related endpoints include technician creation, information update, and
   * detail retrieval.
   *
   * @param connection
   * @param technicianId Unique identifier for the technician to be removed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":technicianId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("technicianId")
    technicianId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminTechniciansTechnicianId(
        {
          organizationAdmin,
          technicianId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
