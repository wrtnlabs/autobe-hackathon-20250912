import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminIntegrationLogs } from "../../../../providers/patchhealthcarePlatformOrganizationAdminIntegrationLogs";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminIntegrationLogsIntegrationLogId } from "../../../../providers/gethealthcarePlatformOrganizationAdminIntegrationLogsIntegrationLogId";

import { IPageIHealthcarePlatformIntegrationLog } from "../../../../api/structures/IPageIHealthcarePlatformIntegrationLog";
import { IHealthcarePlatformIntegrationLog } from "../../../../api/structures/IHealthcarePlatformIntegrationLog";

@Controller("/healthcarePlatform/organizationAdmin/integrationLogs")
export class HealthcareplatformOrganizationadminIntegrationlogsController {
  /**
   * Search and retrieve filtered/paginated integration logs for monitoring and
   * audit.
   *
   * Retrieve a filtered and paginated list of integration logs that record all
   * integration-related status, success, error, or event messages for this
   * healthcare platform. This API supports complex search, sorting, and
   * filtering across all log attributes, including integration_type (such as
   * 'emr', 'lab', 'pharmacy', 'insurance', 'device'), event_status, event_code,
   * organization, and flexible date/time ranges.
   *
   * Advanced auditing and troubleshooting are supported: administrators and
   * technical teams can quickly locate integration failures, performance
   * issues, or external system outages, supporting rapid forensic analysis and
   * operational troubleshooting. The Prisma schema ensures every log entry is
   * uniquely linked to the relevant organization and includes severity,
   * timestamp, and context information for regulatory and support compliance.
   *
   * Security and access are tightly controlled. This endpoint is restricted to
   * platform/system administrators and organization administrators with
   * integration monitoring responsibility. All access and query actions are
   * themselves logged to an audit trail. Results can be exported for offline
   * compliance review.
   *
   * This API should be combined with detailed event and incident views, which
   * show full information for each log entry (e.g., via GET
   * /integrationLogs/{integrationLogId}) for root-cause analysis and
   * cross-referencing related events.
   *
   * @param connection
   * @param body Search and pagination criteria for integration log filtering
   *   (type, status, organization, date range, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformIntegrationLog.IRequest,
  ): Promise<IPageIHealthcarePlatformIntegrationLog.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminIntegrationLogs({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a specific integration log event by ID.
   *
   * Retrieve a single, fully detailed integration log event using its unique
   * log ID (integrationLogId). The detail includes type of integration, status,
   * related error messages, payload links, context data, timestamps, severity
   * indicators, and any attached troubleshooting or remediation notes.
   *
   * This endpoint is used by system and organization administrators to review
   * the root cause and full context of technical events, system-monitoring
   * incidents, integration failures, and audit-log triggers. The Prisma
   * IntegrationLog model ensures traceable linkage to organizations and event
   * context, which is required for regulatory audits when incidents or external
   * system failures are investigated.
   *
   * Strict security and audit controls apply: access is limited to technical
   * and admin staff with incident investigation responsibility. All read access
   * actions are themselves logged in the platform's audit trail. The details
   * revealed can support service restoration, external partner escalation, and
   * compliance reporting.
   *
   * @param connection
   * @param integrationLogId Unique identifier of the integration log record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":integrationLogId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("integrationLogId")
    integrationLogId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformIntegrationLog> {
    try {
      return await gethealthcarePlatformOrganizationAdminIntegrationLogsIntegrationLogId(
        {
          organizationAdmin,
          integrationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
