import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminLocaleSettings } from "../../../../providers/posthealthcarePlatformOrganizationAdminLocaleSettings";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminLocaleSettings } from "../../../../providers/patchhealthcarePlatformOrganizationAdminLocaleSettings";
import { gethealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId } from "../../../../providers/gethealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId";
import { puthealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId } from "../../../../providers/puthealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId";
import { deletehealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId";

import { IHealthcarePlatformLocaleSettings } from "../../../../api/structures/IHealthcarePlatformLocaleSettings";
import { IPageIHealthcarePlatformLocaleSettings } from "../../../../api/structures/IPageIHealthcarePlatformLocaleSettings";

@Controller("/healthcarePlatform/organizationAdmin/localeSettings")
export class HealthcareplatformOrganizationadminLocalesettingsController {
  /**
   * Create a new locale setting entry in the
   * healthcare_platform_locale_settings table.
   *
   * This operation enables a system or organization administrator to create a
   * new locale setting, specifying details like language code, timezone, date
   * and time format preferences, and number formatting rules. Locale settings
   * affect how users in the relevant organization or department experience
   * date/time, number, and language localization within the platform.
   *
   * Business logic enforces that only one active locale setting per
   * organization/department combination exists. Attempting to create a
   * duplicate will result in a validation error. All creation events are
   * audited, with user identity, configuration values, and timestamp recorded
   * for compliance.
   *
   * Only authorized roles may invoke this operation. The operation requires
   * robust input validation to ensure supported languages, valid timezone
   * values, and proper date/number formatting conventions in accordance with
   * business and compliance requirements.
   *
   * @param connection
   * @param body The configuration and attributes for the new locale setting,
   *   including language, timezone, and formatting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLocaleSettings.ICreate,
  ): Promise<IHealthcarePlatformLocaleSettings> {
    try {
      return await posthealthcarePlatformOrganizationAdminLocaleSettings({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate locale settings in healthcare_platform_locale_settings.
   *
   * Retrieve a filtered, paginated list of locale settings for organizations
   * and departments. This operation enables platform and organization
   * administrators to search for locale preferences by organization or
   * department ID, supported language (such as en-US or es-ES), timezone, or
   * formatting standards. It supports advanced search, sorting, and pagination
   * to facilitate management of localization and scheduling policies across
   * multi-tenant and multinational environments.
   *
   * The endpoint ensures that only users with administrative privileges can
   * access the full spectrum of locale settings and that sensitive
   * configuration details are managed in compliance with data
   * privacy/operational policy. The response includes summary fields
   * appropriate for list views and allows further detail queries by record ID
   * through related endpoints.
   *
   * This operation is crucial for maintaining regionally aware behaviors in
   * notifications, reporting, and user display settings across diverse clinical
   * and operational domains.
   *
   * @param connection
   * @param body Search and pagination parameters for locating locale settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLocaleSettings.IRequest,
  ): Promise<IPageIHealthcarePlatformLocaleSettings.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminLocaleSettings({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific locale setting by its UUID from the
   * healthcare_platform_locale_settings table.
   *
   * This operation fetches a single locale setting record by its unique
   * identifier. It is particularly useful in administrative or configuration UX
   * flows, where a user needs to review, audit, or validate the locale settings
   * for an organization or department.
   *
   * Role-specific access control is enforced. Only system administrators,
   * organization administrators, or users with explicit
   * organization/department-level privileges are permitted to invoke this
   * operation. The locale setting includes detailed regional options such as
   * language, timezone, date and time formats, and number formatting, which
   * dictate how the platform delivers localized content to users.
   *
   * Authorization and audit trails for this operation are enforced as per
   * compliance and business policy. Error handling includes not-found,
   * forbidden, or access violation responses if the locale setting does not
   * exist, is deleted, or is outside the requesting user's scope. This
   * operation depends on proper RBAC mapping and the user's organizational
   * context.
   *
   * @param connection
   * @param localeSettingId The unique identifier (UUID) for the locale setting
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":localeSettingId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("localeSettingId")
    localeSettingId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLocaleSettings> {
    try {
      return await gethealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId(
        {
          organizationAdmin,
          localeSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a locale setting in the healthcare_platform_locale_settings table by
   * its UUID.
   *
   * With this operation, system or organization administrators can revise an
   * existing locale setting record for an organization or department, such as
   * changing language, timezone, or other localization preferences. The
   * endpoint validates that the update does not create more than one active
   * locale setting for the same scope and that all setting values conform to
   * supported formats.
   *
   * All updates are recorded in the audit trail, including who performed the
   * change, the old values, and the time of the update. Security and RBAC
   * requirements stipulate that only users with appropriate organizational or
   * departmental privileges may invoke this operation. If the record does not
   * exist, is deleted, or is not within scope, the operation will return an
   * error.
   *
   * The response provides the new state of the locale setting after update,
   * with all updated attributes. Careful validation and conflict checking are
   * critical to maintain platform integrity and localization coherence.
   *
   * @param connection
   * @param localeSettingId The unique identifier (UUID) for the locale setting
   *   to update.
   * @param body Updated attributes and configuration for the locale setting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":localeSettingId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("localeSettingId")
    localeSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLocaleSettings.IUpdate,
  ): Promise<IHealthcarePlatformLocaleSettings> {
    try {
      return await puthealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId(
        {
          organizationAdmin,
          localeSettingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft-delete) a locale setting from the
   * healthcare_platform_locale_settings table by UUID.
   *
   * This operation allows system or organization administrators to delete an
   * existing locale setting entry by its unique ID, marking it as deleted
   * through the deleted_at field instead of removing it entirely. This supports
   * regulatory, business audit, and data retention requirements, and enables
   * organizations to maintain a compliance-grade record of all locale
   * configuration changes.
   *
   * Only authorized users may execute deletions, and logic is enforced to
   * prevent deletion of required or default settings. All deletion events are
   * logged in the audit trail, with the initiator and timestamp for
   * compliance.
   *
   * Attempting to delete a non-existent, already deleted, or out-of-scope
   * locale setting returns a not-found error; attempting to remove a
   * required/default setting returns a business logic error. All delete
   * operations should ensure that soft deletion is handled as per the table's
   * deleted_at semantics for compliance and potential restoration
   * requirements.
   *
   * @param connection
   * @param localeSettingId The unique identifier (UUID) for the locale setting
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":localeSettingId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("localeSettingId")
    localeSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminLocaleSettingsLocaleSettingId(
        {
          organizationAdmin,
          localeSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
