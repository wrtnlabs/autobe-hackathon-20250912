import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminRiskAssessments } from "../../../../providers/posthealthcarePlatformOrganizationAdminRiskAssessments";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminRiskAssessments } from "../../../../providers/patchhealthcarePlatformOrganizationAdminRiskAssessments";
import { gethealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId } from "../../../../providers/gethealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId";
import { puthealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId } from "../../../../providers/puthealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId";
import { deletehealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId";

import { IHealthcarePlatformRiskAssessment } from "../../../../api/structures/IHealthcarePlatformRiskAssessment";
import { IPageIHealthcarePlatformRiskAssessment } from "../../../../api/structures/IPageIHealthcarePlatformRiskAssessment";

@Controller("/healthcarePlatform/organizationAdmin/riskAssessments")
export class HealthcareplatformOrganizationadminRiskassessmentsController {
  /**
   * Create a new risk assessment record in the
   * healthcare_platform_risk_assessments table.
   *
   * Create a new risk assessment entry in the
   * healthcare_platform_risk_assessments table based on the supplied details.
   * Risk assessments document compliance, operational, or technical risk
   * reviews performed by or on behalf of an organization or department.
   *
   * This endpoint allows authorized users (compliance, platform, or
   * organization administrators) to submit new assessments covering type,
   * status, methodology, scope, findings, level, analysis period, and
   * recommendations. Input is validated according to the
   * IHealthcarePlatformRiskAssessment.ICreate schema and includes all necessary
   * metadata required for subsequent audit or reporting workflows.
   *
   * Upon successful processing, the new risk assessment is stored and returned
   * in the response body. Post-creation, the record is available for auditing,
   * reporting, updating, and assignment of reviews as dictated by compliance
   * policy.
   *
   * Proper audit logging of the creation actor, timestamp, and context is
   * mandatory to meet regulatory and internal business requirements. Related
   * operations include updating or retrieving specific assessments, and listing
   * all assessments for compliance tracking.
   *
   * @param connection
   * @param body Details required to create a new risk assessment record,
   *   including scope, methodology, risk findings, assessment window, and
   *   recommendations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformRiskAssessment.ICreate,
  ): Promise<IHealthcarePlatformRiskAssessment> {
    try {
      return await posthealthcarePlatformOrganizationAdminRiskAssessments({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of risk assessments from
   * healthcare_platform_risk_assessments.
   *
   * Retrieve a filtered, paginated, and searchable list of risk assessments
   * from the healthcare_platform_risk_assessments table. Risk assessments
   * document compliance and operational security review carried out by
   * organizations or departments, capturing risk level, findings,
   * recommendations, period, and assigned assessors.
   *
   * This operation allows compliance officers, organization administrators, and
   * auditors to search and review ongoing or historical assessments. Users can
   * specify organization context, time window, status, department, risk level,
   * and other metadata through the request body, which follows the
   * IHealthcarePlatformRiskAssessment.IRequest schema.
   *
   * The response is a paginated collection of summary records, offering both
   * high-level insight and the ability to drill into detailed risk assessment
   * content as required. Supports slice pagination and sort order
   * customization. Sensitive findings are visible only to authorized roles per
   * compliance policy; audit logging ensures visibility into access and search
   * patterns.
   *
   * Closely related actions include retrieving the full details of a specific
   * risk assessment, creating new risk assessments, or updating existing ones.
   * Proper access controls and audit trails must be enforced at all times,
   * especially for assessments related to breaches, regulatory audits, or
   * containing high-privilege findings.
   *
   * @param connection
   * @param body Search and filtering parameters for querying organizational or
   *   departmental risk assessments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformRiskAssessment.IRequest,
  ): Promise<IPageIHealthcarePlatformRiskAssessment.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminRiskAssessments({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full, detailed information for a specific risk assessment by
   * riskAssessmentId.
   *
   * Retrieve complete details about a specific risk assessment from the
   * healthcare_platform_risk_assessments table using its unique
   * riskAssessmentId (UUID). Risk assessments are compliance, audit, or
   * operational security reviews performed at organization or department level,
   * covering methodology, risk level, time window, findings, and
   * recommendations.
   *
   * This operation is primarily used by compliance teams, organization
   * administrators, or designated reviewers for in-depth investigation of
   * findings, validation of compliance policies, or preparation for external
   * audit. The API response includes the full record, with all captured
   * metadata, period, status, and context as defined in
   * IHealthcarePlatformRiskAssessment.
   *
   * Security measures must ensure that only users with the appropriate
   * compliance, admin, or audit permission may access this record, especially
   * assessments that include sensitive or regulated information.
   *
   * This endpoint supplements risk assessment listing/search operations and is
   * used in conjunction with risk assessment creation, update, or review
   * endpoints to support the full compliance lifecycle.
   *
   * @param connection
   * @param riskAssessmentId Unique identifier of the risk assessment record to
   *   retrieve (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":riskAssessmentId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("riskAssessmentId")
    riskAssessmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRiskAssessment> {
    try {
      return await gethealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId(
        {
          organizationAdmin,
          riskAssessmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing HealthcarePlatformRiskAssessment entity by
   * riskAssessmentId.
   *
   * This operation enables authorized users to update a risk assessment entity
   * in the healthcarePlatform database. The risk assessment record tracks the
   * organization's audit and risk posture, covering fields such as assessment
   * type, methodology, window, risk level, status, and recommendations.
   *
   * The update is restricted to privileged roles (e.g., organization admins,
   * compliance staff) and is fully auditableâ€”every change is recorded with a
   * timestamp and associated user ID for compliance. Inputs undergo validation
   * against business rules, such as permissible status transitions (e.g., from
   * in_progress to completed), appropriate date windows, and risk level values.
   * The operation integrates with the department and organization context,
   * ensuring isolation by security scope.
   *
   * Related operations include retrieval (GET) for risk assessments and
   * periodic reporting of assessment outcomes. Error handling enforces
   * permission checks, input validation, and appropriate response for conflicts
   * or invalid state changes.
   *
   * @param connection
   * @param riskAssessmentId Unique identifier of the target risk assessment to
   *   update.
   * @param body Fields and values to update in the risk assessment record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":riskAssessmentId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("riskAssessmentId")
    riskAssessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRiskAssessment.IUpdate,
  ): Promise<IHealthcarePlatformRiskAssessment> {
    try {
      return await puthealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId(
        {
          organizationAdmin,
          riskAssessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a HealthcarePlatformRiskAssessment entity by
   * riskAssessmentId.
   *
   * This operation permanently deletes a risk assessment entity from the
   * healthcarePlatform database by its unique identifier.
   *
   * Unlike a soft-delete, the record is entirely removed from the persistent
   * data store and cannot be recovered. Deletion is authorized only for
   * privileged roles, such as organization admins, and the operation ensures
   * the action is tracked for full audit support. Permissions are strictly
   * enforced, and attempts to delete non-existent or already removed records
   * will yield appropriate error responses.
   *
   * No soft-delete or retention period is supported, as the schema lacks
   * soft-delete indicators.
   *
   * @param connection
   * @param riskAssessmentId Unique identifier of the target risk assessment to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":riskAssessmentId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("riskAssessmentId")
    riskAssessmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminRiskAssessmentsRiskAssessmentId(
        {
          organizationAdmin,
          riskAssessmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
