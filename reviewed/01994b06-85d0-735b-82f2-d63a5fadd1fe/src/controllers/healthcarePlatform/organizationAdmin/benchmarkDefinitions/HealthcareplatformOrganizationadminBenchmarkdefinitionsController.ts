import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBenchmarkDefinitions } from "../../../../providers/posthealthcarePlatformOrganizationAdminBenchmarkDefinitions";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBenchmarkDefinitions } from "../../../../providers/patchhealthcarePlatformOrganizationAdminBenchmarkDefinitions";
import { gethealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId } from "../../../../providers/gethealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId";
import { puthealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId } from "../../../../providers/puthealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId";
import { deletehealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId";

import { IHealthcarePlatformBenchmarkDefinition } from "../../../../api/structures/IHealthcarePlatformBenchmarkDefinition";
import { IPageIHealthcarePlatformBenchmarkDefinition } from "../../../../api/structures/IPageIHealthcarePlatformBenchmarkDefinition";

@Controller("/healthcarePlatform/organizationAdmin/benchmarkDefinitions")
export class HealthcareplatformOrganizationadminBenchmarkdefinitionsController {
  /**
   * Create a new analytics benchmark definition
   * (healthcare_platform_benchmark_definitions table).
   *
   * Create a benchmark definition record, supporting analytics, reporting, and
   * outcomes comparison for healthcare organizations. The endpoint is used
   * mainly by systemAdmins and orgAdmins to define or update targets for
   * outcome metrics, KPIs, or other analytic normalization needs.
   *
   * Security considerations: Only systemAdmins and organizationAdmins with
   * active status can use this operation; bench marks may affect quality
   * reporting and should be version controlled. The endpoint validates
   * uniqueness by organization and benchmark_code.
   *
   * The database model mandates required fields such as organization_id
   * (optional for global), benchmark_code (unique within org), value, unit,
   * label, effective_start_at, and supports optional description and
   * effective_end_at. Proper type and validation are enforced per the schema.
   *
   * Errors: Duplicate codes, invalid or missing organization links, invalid
   * dates, or missing mandatory fields will cause errors. Related endpoints are
   * available for updating and deleting benchmarks.
   *
   * @param connection
   * @param body Benchmark creation payload with required organization, code,
   *   value, unit, and effective start/end dates.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBenchmarkDefinition.ICreate,
  ): Promise<IHealthcarePlatformBenchmarkDefinition> {
    try {
      return await posthealthcarePlatformOrganizationAdminBenchmarkDefinitions({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search available benchmark definitions for healthcare
   * KPI/analytics reporting.
   *
   * Search and retrieve a filtered and paginated list of benchmark definitions
   * for clinical/operational analytics from the
   * healthcare_platform_benchmark_definitions table. Benchmarks define target
   * values, thresholds, and comparators for organizational or department-level
   * KPIsâ€”for example, national average readmission rates, infection benchmarks,
   * etc. Supported request filter parameters include organization_id, code,
   * label, value range, unit, effective start/end, and logical status. The
   * PATCH method is used to accommodate complex and extensible filtering logic,
   * plus scalable pagination and sorting.
   *
   * This endpoint enforces that the requesting user has analytics dashboard,
   * system admin, or organization admin rights for any organization whose
   * benchmarks they query. Access to global or cross-organization benchmarks is
   * restricted, unless specifically permitted. Returned data includes summaries
   * optimized for dashboard and comparative reporting. Results may be large, so
   * clients must honor pagination metadata and consider cache usage for
   * invariant benchmarks.
   *
   * Related APIs: detail GET (for full record), create/put (for adding or
   * updating), and delete (for stewardship or deprecation workflows). All
   * access and search filters are logged for compliance and audit purposes.
   *
   * @param connection
   * @param body Filter and pagination criteria for benchmark search
   *   (IHealthcarePlatformBenchmarkDefinition.IRequest).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBenchmarkDefinition.IRequest,
  ): Promise<IPageIHealthcarePlatformBenchmarkDefinition.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBenchmarkDefinitions(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full detail of a benchmark definition
   * (IHealthcarePlatformBenchmarkDefinition) by benchmarkId.
   *
   * Retrieve the full detail of a single benchmark definition for healthcare
   * analytics by supplying its unique benchmarkId (UUID). Benchmarks represent
   * static or evolving reference points for assessment of key performance
   * indicators (KPIs), such as clinical or operational targets. The Prisma
   * schema for healthcare_platform_benchmark_definitions provides all
   * structured and descriptive columns: benchmark_code, label, description,
   * value, unit, effective dates, organization ownership, etc. This endpoint
   * enforces that only users with analytics, reporting, or high-level
   * organization/system admin rights may access organization-specific or global
   * benchmarks. Common use cases include populating dashboards with reference
   * targets, running comparative audits, or presenting compliance context
   * within analytics applications. All access is logged for audit purposes, and
   * errors are generated if an invalid or unauthorized benchmarkId is supplied.
   * Related endpoints include PATCH /benchmarkDefinitions for filtered lists
   * and PUT/POST for stewardship workflows.
   *
   * @param connection
   * @param benchmarkId The unique identifier (UUID) for the benchmark
   *   definition record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":benchmarkId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("benchmarkId")
    benchmarkId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBenchmarkDefinition> {
    try {
      return await gethealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId(
        {
          organizationAdmin,
          benchmarkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing benchmark definition
   * (healthcare_platform_benchmark_definitions table).
   *
   * Update an existing benchmark definition record to change its metadata or
   * business value. Only systemAdmin and organizationAdmin with adequate
   * privileges may execute this operation; operation enforces full validation
   * and audit compliance.
   *
   * The operation requires the benchmarkId as path parameter, referencing the
   * primary key. Update fields include label, benchmark_code, value, unit,
   * effective_start_at, effective_end_at, and description. The logic enforces
   * uniqueness, valid data ranges, and may perform partial updates while
   * tracking the updated_at timestamp.
   *
   * If the benchmark is organization-scoped, the caller must be in the same
   * organization. Errors arise if benchmarkId is missing/not found, data fails
   * constraints, or the user lacks permission. Audited for compliance. Related
   * endpoints: benchmark create and delete.
   *
   * @param connection
   * @param benchmarkId The unique identifier of the benchmark definition to
   *   update.
   * @param body Payload to update benchmark definition fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":benchmarkId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("benchmarkId")
    benchmarkId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBenchmarkDefinition.IUpdate,
  ): Promise<IHealthcarePlatformBenchmarkDefinition> {
    try {
      return await puthealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId(
        {
          organizationAdmin,
          benchmarkId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an analytics benchmark definition entry
   * (healthcare_platform_benchmark_definitions table).
   *
   * Delete a benchmark definition record by unique ID. This operation is
   * restricted to systemAdmins and organizationAdmins, with validation to
   * ensure the benchmark is in the correct organizational context.
   *
   * If model supports soft delete (as per deleted_at), the record is marked
   * deleted but retained for compliance audit; otherwise, the removal is hard
   * delete. Operation enforces referential integrity and prevents removal if
   * the benchmark is used by active KPIs.
   *
   * Security: Only privileged roles (systemAdmin, organizationAdmin) can
   * delete, and all deletions are logged. Related operations: create and update
   * for benchmarks.
   *
   * @param connection
   * @param benchmarkId The unique identifier of the benchmark definition to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":benchmarkId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("benchmarkId")
    benchmarkId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBenchmarkDefinitionsBenchmarkId(
        {
          organizationAdmin,
          benchmarkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
