import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminComplianceConsents } from "../../../../providers/posthealthcarePlatformOrganizationAdminComplianceConsents";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminComplianceConsents } from "../../../../providers/patchhealthcarePlatformOrganizationAdminComplianceConsents";
import { gethealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId } from "../../../../providers/gethealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId";
import { puthealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId } from "../../../../providers/puthealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId";
import { deletehealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId";

import { IHealthcarePlatformComplianceConsent } from "../../../../api/structures/IHealthcarePlatformComplianceConsent";
import { IPageIHealthcarePlatformComplianceConsent } from "../../../../api/structures/IPageIHealthcarePlatformComplianceConsent";

@Controller("/healthcarePlatform/organizationAdmin/complianceConsents")
export class HealthcareplatformOrganizationadminComplianceconsentsController {
  /**
   * Create a new compliance consent for a user or patient under a specific
   * organization and policy version.
   *
   * This operation allows creation of an explicit, auditable consent entry for
   * a subject (typically a patient, but staff consents are also modeled) within
   * a healthcare organization. Consents are narrowly scoped, versioned, and can
   * be revoked later. The record links to the organization, a specific policy
   * version, the type of consent, and—if applicable—a subject user ID. The
   * operation includes the nature of the consent, grant/revocation timestamps,
   * and an optional expiry.
   *
   * Security is critical: only users with appropriate privileges (e.g.,
   * orgAdmin, compliance officers) can create consents on another's behalf, and
   * audit logs are created for each event. The system checks for duplicate
   * consents on the same subject/policy/version/type before creation.
   * Compliance with HIPAA and other regulatory frameworks is enforced at the
   * workflow and audit levels.
   *
   * On error, e.g., non-existent policy version or organization, or conflicting
   * active consent for the same scope/type, the API returns appropriate error
   * messages for remediation.
   *
   * Consent records are append-only (never hard deleted), and creation events
   * are fully logged for traceability. Downstream systems use these records to
   * enforce data access restrictions and rights across the platform.
   *
   * @param connection
   * @param body Compliance consent creation info: organization, subject, policy
   *   version, consent type, status, and timestamp.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceConsent.ICreate,
  ): Promise<IHealthcarePlatformComplianceConsent> {
    try {
      return await posthealthcarePlatformOrganizationAdminComplianceConsents({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve filtered/paginated compliance consent records for
   * regulatory audit.
   *
   * Retrieve a paginated and filtered list of compliance consent records, which
   * document explicit consent, revocation, and effective dates for patients and
   * staff. Each consent log is tied to an organization and a policy version,
   * and records consent scope, type, status (granted/revoked), and relevant
   * time windows.
   *
   * Advanced search enables administrators to filter by organization, subject,
   * policy, consent type/status, date range, and more. This supports targeted
   * audits, operational reviews, mass compliance check-ups, and dispute
   * investigations. The Prisma schema ensures every consent record is
   * immutable, versioned, and cross-linked to all relevant entities (policy,
   * subject, organization).
   *
   * Strict RBAC and audit logging are enforced to protect personal data and
   * legal compliance. Only users with system administrator or organization
   * administrator roles may access this endpoint, and all search/query actions
   * are recorded in the audit trail. Export of consents may be subject to
   * additional regulatory/policy control.
   *
   * @param connection
   * @param body Search and pagination/filter criteria for compliance consent
   *   audits (organization, subject, consent type, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformComplianceConsent.IRequest,
  ): Promise<IPageIHealthcarePlatformComplianceConsent.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminComplianceConsents({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a specific compliance consent record by ID.
   *
   * Retrieve a specific compliance consent record with comprehensive audit
   * details by its unique ID (complianceConsentId). Details include the
   * subject's identity, organization, related policy/version, granted/revoked
   * status, rationale/reason, and all timestamps relevant to consent
   * lifecycle.
   *
   * This API enables compliance, operational, and legal staff to perform
   * detailed audits and resolve disputes around consent status, revocation, or
   * regulatory compliance with policies like HIPAA or GDPR. The Prisma schema
   * ensures traceability for each consent event, allows cross-checks to subject
   * and policy tables, and supports export of full audit records.
   *
   * User access is tightly restricted via RBAC, and all actions are appended to
   * the platform audit log. Use this in conjunction with list/search endpoints
   * for incident review or compliance evidence documentation.
   *
   * @param connection
   * @param complianceConsentId Unique identifier of the compliance consent
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceConsentId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("complianceConsentId")
    complianceConsentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformComplianceConsent> {
    try {
      return await gethealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId(
        {
          organizationAdmin,
          complianceConsentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or revoke a compliance consent entry by unique ID (consent
   * revocation or meta update).
   *
   * This operation supports modifying an existing compliance consent record by
   * ID. Typical updates include the revocation of consent (setting
   * granted=false and a revocation timestamp/reason), updating expiration, or
   * modifying descriptive fields. The endpoint checks for the existence and
   * active status of the target record and verifies all changes against
   * compliance/audit requirements.
   *
   * Permission to update a consent is generally limited to organization
   * administrators and compliance staff, and all changes are fully audit-logged
   * with timestamp and user context. Revocation workflows specifically require
   * reason logging for traceability. You cannot change the organization, policy
   * version, or subject once a consent is created; only status and meta fields
   * are updatable.
   *
   * If the specified consent does not exist or the update would violate
   * uniqueness constraints, an error is returned. Successful updates propagate
   * to all systems checking consent for authorization and compliance.
   *
   * All changes are appended to the audit trail for reporting and regulatory
   * compliance. No updates are allowed if the consent is hard-deleted or past
   * expiry.
   *
   * @param connection
   * @param complianceConsentId Unique identifier for the compliance consent
   *   record to update.
   * @param body Updated consent info: revoke (granted=false), set revocation
   *   timestamp/reason, or update expiry/meta.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":complianceConsentId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("complianceConsentId")
    complianceConsentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformComplianceConsent.IUpdate,
  ): Promise<IHealthcarePlatformComplianceConsent> {
    try {
      return await puthealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId(
        {
          organizationAdmin,
          complianceConsentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (erase) a compliance consent by ID (soft delete with audit
   * trail).
   *
   * This operation allows organization administrators or compliance officers to
   * logically delete or revoke a compliance consent, marking it as deleted
   * (soft-deleted). No hard deletion is performed per legal requirements. The
   * consent is no longer considered active for subsequent authorization, and
   * downstream workflows will treat it as revoked or voided.
   *
   * A full audit log is generated for erasure/revocation, and the operation
   * checks that the record exists, is not already deleted, and is not past its
   * expiry (if any). Deletion is only allowed by users with appropriate
   * permissions and is tracked for compliance reporting.
   *
   * Attempting to erase a non-existent or already deleted/revoked consent will
   * return a business error. All erasure events are strictly audited and
   * reportable for regulators.
   *
   * Records are retained in the system and can be exported for compliance
   * purposes, but will no longer be active in access/authorization decisions.
   *
   * @param connection
   * @param complianceConsentId Unique identifier for the compliance consent
   *   record to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":complianceConsentId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("complianceConsentId")
    complianceConsentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminComplianceConsentsComplianceConsentId(
        {
          organizationAdmin,
          complianceConsentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
