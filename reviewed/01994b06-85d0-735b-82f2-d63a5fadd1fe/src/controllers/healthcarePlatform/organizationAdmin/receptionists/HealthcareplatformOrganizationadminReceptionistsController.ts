import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminReceptionists } from "../../../../providers/posthealthcarePlatformOrganizationAdminReceptionists";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminReceptionists } from "../../../../providers/patchhealthcarePlatformOrganizationAdminReceptionists";
import { gethealthcarePlatformOrganizationAdminReceptionistsReceptionistId } from "../../../../providers/gethealthcarePlatformOrganizationAdminReceptionistsReceptionistId";
import { puthealthcarePlatformOrganizationAdminReceptionistsReceptionistId } from "../../../../providers/puthealthcarePlatformOrganizationAdminReceptionistsReceptionistId";
import { deletehealthcarePlatformOrganizationAdminReceptionistsReceptionistId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminReceptionistsReceptionistId";

import { IHealthcarePlatformReceptionist } from "../../../../api/structures/IHealthcarePlatformReceptionist";
import { IPageIHealthcarePlatformReceptionist } from "../../../../api/structures/IPageIHealthcarePlatformReceptionist";

@Controller("/healthcarePlatform/organizationAdmin/receptionists")
export class HealthcareplatformOrganizationadminReceptionistsController {
  /**
   * Create a new receptionist account in healthcare_platform_receptionists.
   *
   * Creates a new receptionist account in the healthcarePlatform system.
   * Receptionist users are responsible for appointment scheduling, patient
   * check-in/out, and non-clinical desk operations.
   *
   * The operation validates uniqueness of the email address and requires
   * admin-level permission, as receptionist creation impacts scheduling and
   * front-desk workflows. Created accounts include legal name, business email,
   * (optional) contact number, and are auditable via creation timestamp and
   * system logs.
   *
   * Key fields and business rules are defined in the Prisma schema's
   * healthcare_platform_receptionists model: the 'email' field must be unique;
   * 'full_name' is required for identification/notifications;
   * 'created_at'/'updated_at' are set automatically. Soft-delete and archival
   * for compliance is enabled via 'deleted_at'.
   *
   * Appropriate error handling is enforced for duplicate accounts and missing
   * required fields. This endpoint is typically used by organization
   * administrators. Related operations include updating or deleting a
   * receptionist, or listing all currently active receptionists.
   *
   * @param connection
   * @param body Information required to create a new healthcarePlatform
   *   receptionist
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformReceptionist.ICreate,
  ): Promise<IHealthcarePlatformReceptionist> {
    try {
      return await posthealthcarePlatformOrganizationAdminReceptionists({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all receptionists with advanced filtering and paging.
   *
   * Search and retrieve a paginated, optionally filtered and sorted list of
   * receptionists from the healthcare_platform_receptionists table. This
   * endpoint supports complex queries for administrative users, including
   * filtering by name, email, creation date, and status per the schema
   * specifications.
   *
   * The system enforces proper permissionsâ€”typically only systemAdmin or
   * organizationAdmin can access all receptionist records. Sensitive
   * receptionist information is returned in adherence with privacy policies and
   * must be handled according to organization policy.
   *
   * Response includes summary data for each receptionist, optimized for
   * management use (e.g., bulk communication, scheduling, access reviews).
   * Errors are surfaced when query parameters are invalid or when
   * authentication is insufficient. Related endpoints include creation, update,
   * and single receptionist detail retrieval for granular user management.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for receptionist list
   *   queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformReceptionist.IRequest,
  ): Promise<IPageIHealthcarePlatformReceptionist.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminReceptionists({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific receptionist from the
   * healthcare_platform_receptionists table.
   *
   * Retrieve the complete profile and status information for a specific
   * receptionist. This operation is used by administrators to verify, audit, or
   * manage an individual receptionist based on their unique identifier.
   * Accessible to systemAdmin or organizationAdmin users, the endpoint fetches
   * all configured fields as described in the schema, including contact
   * information, name, timestamps, and deletion status.
   *
   * Security is enforced, allowing only privileged users to access full
   * receptionist record details. The returned object includes all information
   * needed for downstream actions such as editing, auditing, or account
   * lifecycle management.
   *
   * Validation ensures the receptionist exists and is not deleted; otherwise,
   * an error is reported. This endpoint is foundational for receptionist
   * personnel management and compliance verification within the organization.
   *
   * @param connection
   * @param receptionistId Unique identifier of the receptionist to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":receptionistId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("receptionistId")
    receptionistId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformReceptionist> {
    try {
      return await gethealthcarePlatformOrganizationAdminReceptionistsReceptionistId(
        {
          organizationAdmin,
          receptionistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing receptionist account by receptionistId in
   * healthcare_platform_receptionists.
   *
   * Updates data for an existing receptionist in the healthcarePlatform,
   * including fields such as full_name, phone, and potentially other
   * organization-specific attributes. The receptionistId path parameter
   * identifies the specific account.
   *
   * Business logic ensures the integrity of data: only authorized
   * administrators (systemAdmin or organizationAdmin) can update receptionist
   * details, and any modification is tracked via updated_at and audit logging.
   * The operation enforces that email remains unique (if updatable) and checks
   * for proper formatting of phone numbers. Attempts to update non-existent
   * accounts or with invalid data yield clear error messages.
   *
   * The receptionist schema as defined in Prisma supports soft deletion via
   * deleted_at and tracking of all creation/update times. Related API
   * operations are receptionist creation and deletion.
   *
   * @param connection
   * @param receptionistId Unique identifier of the target receptionist
   * @param body Updated information for the receptionist user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":receptionistId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("receptionistId")
    receptionistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformReceptionist.IUpdate,
  ): Promise<IHealthcarePlatformReceptionist> {
    try {
      return await puthealthcarePlatformOrganizationAdminReceptionistsReceptionistId(
        {
          organizationAdmin,
          receptionistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a receptionist account by receptionistId (hard delete)
   * in healthcare_platform_receptionists.
   *
   * Permanently deletes the specified receptionist entry from the database
   * (hard delete, not soft). The receptionistId path parameter selects the
   * target account. Only organization or system-level administrators can
   * execute this operation.
   *
   * All deletions are subject to compliance and data retention policy. If the
   * account is linked to ongoing workflows or must be retained for audit, the
   * system will block deletion and issue a clear business error. The operation
   * returns no response body upon success, providing only standard HTTP status
   * confirmation.
   *
   * Deletion is logged in system audit trails for regulatory compliance.
   * Associated scheduling records should be reassigned or reviewed prior to
   * deletion. Related operations include creation and updating of receptionist
   * records.
   *
   * @param connection
   * @param receptionistId Unique identifier of the receptionist to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":receptionistId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("receptionistId")
    receptionistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminReceptionistsReceptionistId(
        {
          organizationAdmin,
          receptionistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
