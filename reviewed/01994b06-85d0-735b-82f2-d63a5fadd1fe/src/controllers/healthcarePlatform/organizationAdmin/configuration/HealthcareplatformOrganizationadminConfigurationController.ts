import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminConfiguration } from "../../../../providers/posthealthcarePlatformOrganizationAdminConfiguration";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminConfiguration } from "../../../../providers/patchhealthcarePlatformOrganizationAdminConfiguration";
import { gethealthcarePlatformOrganizationAdminConfigurationConfigurationId } from "../../../../providers/gethealthcarePlatformOrganizationAdminConfigurationConfigurationId";
import { puthealthcarePlatformOrganizationAdminConfigurationConfigurationId } from "../../../../providers/puthealthcarePlatformOrganizationAdminConfigurationConfigurationId";
import { deletehealthcarePlatformOrganizationAdminConfigurationConfigurationId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminConfigurationConfigurationId";

import { IHealthcarePlatformConfiguration } from "../../../../api/structures/IHealthcarePlatformConfiguration";
import { IPageIHealthcarePlatformConfiguration } from "../../../../api/structures/IPageIHealthcarePlatformConfiguration";

@Controller("/healthcarePlatform/organizationAdmin/configuration")
export class HealthcareplatformOrganizationadminConfigurationController {
  /**
   * Create a new configuration record in the healthcare_platform_configuration
   * table.
   *
   * Create a new configuration setting in the healthcarePlatform. The
   * configuration may be specific to an organization (if organization_id is
   * provided), or global for all tenants (if omitted/null). Administrators
   * define the configuration key, its value, and provide a human-readable
   * description of its impact or business purpose. This API restricts creation
   * to operational and technical settings—storing clinical or PHI data here is
   * not supported and may result in validation errors.
   *
   * Appropriate permissions are required to invoke this API, typically platform
   * administrators or organization administrators with configuration
   * privileges. The configuration key must be unique per organization; attempts
   * to duplicate will result in an error. The newly created configuration can
   * be updated or soft-deleted later through related endpoints.
   *
   * On success, the new configuration record is returned, including its
   * system-generated UUID, creation and update timestamps, and all supplied
   * fields. Timestamps assist in tracking configuration changes for audit and
   * rollback. This endpoint is integral for supporting tenant-level
   * customizing, feature flags, business logic toggles, and compliance-related
   * technical parameters.
   *
   * @param connection
   * @param body Details of the configuration to be created, including optional
   *   organization, key, value, and description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformConfiguration.ICreate,
  ): Promise<IHealthcarePlatformConfiguration> {
    try {
      return await posthealthcarePlatformOrganizationAdminConfiguration({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate configuration records
   * (healthcare_platform_configuration).
   *
   * Enables platform/system administrators and authorized organization
   * administrators to retrieve a filtered, paginated list of configuration
   * records for the entire platform or by tenant. Supports advanced searching
   * on configuration keys, values, and organizational scoping.
   *
   * This endpoint powers configuration UI screens, platform policy review, and
   * operational troubleshooting. Search criteria may include key patterns,
   * partial matches, and date filtering based on changed/created/updated
   * timestamps. Authorization and filtering respect tenant boundaries, and only
   * system-wide global configs or the caller's organization are shown per user
   * privileges.
   *
   * The returned records are suitable for admin console views and configuration
   * audit workflows. Related endpoints include individual configuration
   * get/update by id. All access events are audit-logged for compliance.
   * Improper or unauthorized queries result in explicit errors and no data
   * leakage across tenant boundaries.
   *
   * @param connection
   * @param body Search and filter options for configuration retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformConfiguration.IRequest,
  ): Promise<IPageIHealthcarePlatformConfiguration> {
    try {
      return await patchhealthcarePlatformOrganizationAdminConfiguration({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single configuration record by id
   * (healthcare_platform_configuration).
   *
   * Allows a platform/system admin or an authorized org admin to retrieve a
   * specific configuration setting by its unique ID. This supports admin UI
   * detail screens, platform/business logic injection, and real-time
   * verification of organization or global settings.
   *
   * Retrieved records are filtered by organizational scope and permission;
   * system admins may access global and tenant-owned configs, while org admins
   * only see their own org's configs. Related endpoints include
   * list/index/search and configuration update endpoints. Attempts to access
   * non-existent or unauthorized configuration IDs result in explicit
   * compliance error responses. All access attempts are audit-logged for
   * regulatory review and security investigation.
   *
   * @param connection
   * @param configurationId Unique identifier for the configuration record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":configurationId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformConfiguration> {
    try {
      return await gethealthcarePlatformOrganizationAdminConfigurationConfigurationId(
        {
          organizationAdmin,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a configuration record by UUID in the
   * healthcare_platform_configuration table.
   *
   * Update an existing configuration setting identified by its UUID. Only
   * organization or system administrators are permitted to invoke this API, and
   * upon execution, the system ensures that the configuration key and target
   * organization uniqueness constraints are enforced. The operation allows
   * updating fields such as key, value, or description, but prohibits clinical
   * or PHI values.
   *
   * The update operation will only affect active (non-soft-deleted) records.
   * Attempts to modify keys/values resulting in logic conflicts (such as
   * duplicate key/org pairs) will trigger error responses. All updates are
   * timestamped for audit purposes. This API is primarily used for technical,
   * operational, and business logic settings that may require periodic
   * modification due to policy or feature changes.
   *
   * The modified configuration record is returned—including its updated fields
   * and audit timestamps—enabling downstream systems to react to updated
   * configurations as needed.
   *
   * @param connection
   * @param configurationId UUID of the configuration setting to update.
   * @param body New values for key, value, or description of the configuration
   *   setting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":configurationId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformConfiguration.IUpdate,
  ): Promise<IHealthcarePlatformConfiguration> {
    try {
      return await puthealthcarePlatformOrganizationAdminConfigurationConfigurationId(
        {
          organizationAdmin,
          configurationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a configuration record by UUID, using the deleted_at field for
   * compliance.
   *
   * Soft-delete a configuration setting by marking its deleted_at field
   * (logical deletion), ensuring the entry is excluded from active
   * configuration queries but retained in the database for audit/compliance.
   * This operation is limited to active configuration records and cannot be
   * applied to already-deleted records. The delete action is restricted to
   * users with appropriate privileges and will be fully audited, including
   * deletion timestamp and the deleting user's identity.
   *
   * Soft-deleted configurations do not participate in business or operational
   * logic but remain available for audit and possible restoration as per
   * compliance and business policy. Permanent deletion from the table is not
   * supported from the API to ensure regulatory compliance for audit, rollback,
   * or post-mortem purposes.
   *
   * @param connection
   * @param configurationId UUID of the configuration setting to be
   *   soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":configurationId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("configurationId")
    configurationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminConfigurationConfigurationId(
        {
          organizationAdmin,
          configurationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
