import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses } from "../../../../../providers/posthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses } from "../../../../../providers/patchhealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses";
import { gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId } from "../../../../../providers/gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId";
import { puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId } from "../../../../../providers/puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId";
import { deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId } from "../../../../../providers/deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId";

import { IHealthcarePlatformInsuranceClaimStatus } from "../../../../../api/structures/IHealthcarePlatformInsuranceClaimStatus";
import { IPageIHealthcarePlatformInsuranceClaimStatus } from "../../../../../api/structures/IPageIHealthcarePlatformInsuranceClaimStatus";

@Controller(
  "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses",
)
export class HealthcareplatformOrganizationadminInsuranceclaimsInsuranceclaimstatusesController {
  /**
   * Add a new insurance claim status to an existing claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Adds a new insurance claim status record for a specific insurance claim
   * identified by insuranceClaimId. This operation is intended for
   * authenticated organization admins, billing specialists, or system admins
   * managing insurance claims and workflow tracking.
   *
   * It requires that the insurance claim already exists, and appends a new
   * status event (such as 'submitted', 'denied', 'paid') to facilitate
   * insurance lifecycle management and audit trails. The API validates that the
   * status event is permissible in the current workflow context and logs the
   * action with full metadata, including user identity, timestamp, and payer
   * response codes if provided.
   *
   * Sensitive business logic includes validation of role-based permissions,
   * enforcing correct workflow transitions, and regulatory compliance for
   * claims management. Related APIs include claim update, status history
   * retrieval, and insurance payment integration points. Expected error cases
   * include providing invalid status values, updating non-existent insurance
   * claims, or unauthorized access attempts.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim to which
   *   the status will be added.
   * @param body Details of the insurance claim status event to add to the
   *   specified claim.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaimStatus.ICreate,
  ): Promise<IHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await posthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses(
        {
          organizationAdmin,
          insuranceClaimId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List, search, and paginate insurance claim status history for a given
   * insurance claim.
   *
   * The endpoint allows users, typically billing/evidence staff or organization
   * admins, to retrieve a filtered and paginated list of insurance claim status
   * records for a given insurance claim by supplying the insuranceClaimId path
   * parameter. The status histories are sourced from the
   * healthcare_platform_insurance_claim_statuses table, which logs all changes
   * and state transitions in the insurance claim's workflow, including
   * submission, acceptance, denial, payment, and appeals.
   *
   * The request body permits specifying search criteria, page size, page
   * number, sorting fields, and additional filters to efficiently review claim
   * life cycle and status history. Results are always scoped to the insurance
   * claim and organization context, respecting data privacy and compliance
   * boundaries. The response delivers a paginated array of status entries
   * (code, description, timestamps, and payment amounts). This operation
   * upholds business requirements for traceability and auditability of all
   * claim-related events, facilitating compliance reviews and appeals
   * workflows.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the parent insurance claim for
   *   which statuses are being retrieved.
   * @param body Search, filter, and pagination criteria for insurance claim
   *   statuses. Structure follows
   *   IHealthcarePlatformInsuranceClaimStatus.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaimStatus.IRequest,
  ): Promise<IPageIHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await patchhealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatuses(
        {
          organizationAdmin,
          insuranceClaimId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single insurance claim status entry by IDs.
   *
   * Use this operation to retrieve the complete details of a specific status
   * entry (such as a key transition, appeal result, or payment update) within
   * an insurance claim's lifecycle. The path parameters insuranceClaimId and
   * insuranceClaimStatusId uniquely identify the parent claim and the status
   * entry within the healthcare_platform_insurance_claim_statuses table.
   *
   * The response includes all fields for the claim status, such as status_code
   * (e.g., submitted, approved, denied, needs_info), status_description,
   * payment_amount (if relevant), timestamps, and reference to the updating
   * user if available. This single-record retrieval is used for drill-down
   * display, workflow step audit, or regulatory review processes. Access to
   * this data is restricted to authorized billing admins and must be audited
   * for data access compliance. Errors are returned if the record cannot be
   * found or does not belong to the requester's organization.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the parent insurance claim.
   * @param insuranceClaimStatusId Unique identifier of the insurance claim
   *   status entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":insuranceClaimStatusId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedParam("insuranceClaimStatusId")
    insuranceClaimStatusId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId(
        {
          organizationAdmin,
          insuranceClaimId,
          insuranceClaimStatusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing insurance claim status entry in a claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Updates an existing insurance claim status record identified by
   * insuranceClaimStatusId within a specific insurance claim (identified by
   * insuranceClaimId). This API is used by privileged users, such as
   * organization admins and billing specialists, to modify previously submitted
   * claim status eventsâ€”such as updating the status code, clarifying payer
   * response descriptions, or amending recorded payment amounts for
   * reconciliation.
   *
   * The operation enforces strict business rules, ensuring that only authorized
   * roles may perform status corrections, and that any status value updates are
   * permissible within the defined insurance claim workflow. All changes are
   * fully audit-trailed, including before/after values, user identity, and
   * exact timestamps. This operation is critical for maintaining accurate claim
   * status history for compliance, denial management, and appeals. Related APIs
   * include status creation and listing claim status history. Error scenarios
   * include non-existent claim status ID, invalid updates per workflow rules,
   * and unauthorized modification attempts.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim containing
   *   the status to update.
   * @param insuranceClaimStatusId Unique identifier of the insurance claim
   *   status record to update.
   * @param body Updated details for the insurance claim status event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insuranceClaimStatusId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedParam("insuranceClaimStatusId")
    insuranceClaimStatusId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaimStatus.IUpdate,
  ): Promise<IHealthcarePlatformInsuranceClaimStatus> {
    try {
      return await puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId(
        {
          organizationAdmin,
          insuranceClaimId,
          insuranceClaimStatusId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete an insurance claim status event entry from a claim
   * (healthcare_platform_insurance_claim_statuses).
   *
   * Removes an insurance claim status record for a given claim, specifically
   * targeting a record identified by insuranceClaimStatusId under the claim
   * referenced by insuranceClaimId. This operation is restricted to
   * high-privilege roles (e.g., organization admin or system admin), reflecting
   * the sensitive nature of changing an insurance claim's legal/audit state.
   *
   * The operation executes a hard delete, permanently erasing the status record
   * from the database without a recovery option. All delete actions are
   * captured in the financial audit log, with user attribution and timestamp,
   * to ensure regulatory traceability. Attempting to delete a non-existent or
   * non-owned claim status, or insufficient permissions, will result in an
   * error. Related APIs include status creation, status update, and listing
   * historical statuses.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim from which
   *   the status will be deleted.
   * @param insuranceClaimStatusId Unique identifier of the insurance claim
   *   status record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":insuranceClaimStatusId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedParam("insuranceClaimStatusId")
    insuranceClaimStatusId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimIdInsuranceClaimStatusesInsuranceClaimStatusId(
        {
          organizationAdmin,
          insuranceClaimId,
          insuranceClaimStatusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
