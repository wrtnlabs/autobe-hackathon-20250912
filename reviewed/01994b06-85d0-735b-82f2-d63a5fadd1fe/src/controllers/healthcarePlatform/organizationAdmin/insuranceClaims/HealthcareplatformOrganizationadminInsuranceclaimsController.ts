import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminInsuranceClaims } from "../../../../providers/posthealthcarePlatformOrganizationAdminInsuranceClaims";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminInsuranceClaims } from "../../../../providers/patchhealthcarePlatformOrganizationAdminInsuranceClaims";
import { gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId } from "../../../../providers/gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId";
import { puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId } from "../../../../providers/puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId";
import { deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId";

import { IHealthcarePlatformInsuranceClaim } from "../../../../api/structures/IHealthcarePlatformInsuranceClaim";
import { IPageIHealthcarePlatformInsuranceClaim } from "../../../../api/structures/IPageIHealthcarePlatformInsuranceClaim";

@Controller("/healthcarePlatform/organizationAdmin/insuranceClaims")
export class HealthcareplatformOrganizationadminInsuranceclaimsController {
  /**
   * Create a new insurance claim record for a specified policy/invoice in
   * healthcare_platform_insurance_claims.
   *
   * Initiate a new insurance claim record, linked to a specific insurance
   * policy and invoice, to support submission for insurance reimbursement or
   * settlement. Users provide all necessary identifying and claim value data,
   * including policy and invoice references, claimed totals, service/encounter
   * dates, and any supplementary payer information.
   *
   * The operation validates business rules, such as required policy and invoice
   * relationships, duplicate claim prevention, amount integrity, and regulatory
   * completeness (e.g., ICD-10, CPT linkages as required by jurisdiction). Once
   * created, the claim is tracked through its life cycle by status, with all
   * actions audited for compliance. This operation is limited to authorized
   * billing and financial staff with permission to initiate new claims. Error
   * scenarios encompass pre-existing open claims for the invoice, mismatched
   * policy/patient, missing required fields, or breach of regulatory/billing
   * rules.
   *
   * This creation endpoint should be paired with claim update/status, detail
   * retrieval, and bulk search endpoints for full workflow implementation.
   *
   * @param connection
   * @param body Creation details for the new insurance claim, including
   *   policy/invoice link, amounts, service date(s), and payer details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaim.ICreate,
  ): Promise<IHealthcarePlatformInsuranceClaim> {
    try {
      return await posthealthcarePlatformOrganizationAdminInsuranceClaims({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filtered list of insurance claim records
   * from healthcare_platform_insurance_claims.
   *
   * Retrieve a filtered and paginated list of insurance claim records from the
   * system for authorized financial and billing users. This operation supports
   * advanced search by claim status, insurance policy, invoice number, service
   * date range, payer response status, and organization scope, allowing for
   * precise financial reconciliation and compliance review.
   *
   * Complex filtering and sorting enable users to segment results by claim life
   * cycle—such as active, pending, denied, paid, or appealed claims. Pagination
   * settings support large result sets, suitable for dashboard views and report
   * exports.
   *
   * Security controls ensure that users see only claims in their permitted
   * organizational or departmental scope, with PHI redacted as required. Error
   * handling includes search validation, empty result handling, and permission
   * enforcement. This search complements detail and summary retrieval
   * endpoints, as well as invoice and payment search APIs.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination settings for querying
   *   insurance claims.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaim.IRequest,
  ): Promise<IPageIHealthcarePlatformInsuranceClaim.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminInsuranceClaims({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch full details of an insurance claim record by claim ID from
   * healthcare_platform_insurance_claims.
   *
   * Fetch full details on a specified insurance claim record, including claim
   * status, associated invoice, insurance policy, claimed amounts, payer
   * responses, and life cycle audit data. The returned information supports
   * billing and compliance workflows, such as claim adjudication, status
   * reviews, denial appeals, and regulatory audits.
   *
   * The API enforces role-based access control, restricting visibility to
   * claims within the user's authorized organizational or departmental scope.
   * Data fields may include claim number, policy and invoice references,
   * service dates, submission status, response codes, payment information, and
   * audit trail fields for compliance. This endpoint is intended for use by
   * organization administrative and billing staff requiring case-by-case
   * analysis. Handling includes not found, permission denied, and PHI masking
   * error scenarios. This endpoint should be used in conjunction with search
   * and summary endpoints for claim management workflows.
   *
   * @param connection
   * @param insuranceClaimId UUID identifying the insurance claim record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":insuranceClaimId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformInsuranceClaim> {
    try {
      return await gethealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId(
        {
          organizationAdmin,
          insuranceClaimId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing insurance claim record in the
   * healthcare_platform_insurance_claims table.
   *
   * The purpose of this operation is to allow authorized billing or admin roles
   * to update an existing insurance claim, as represented by the
   * healthcare_platform_insurance_claims Prisma table, which holds insurance
   * claim submission records. The request must include the claim identifier
   * (insuranceClaimId) and an object of mutable claim fields. Immutable
   * properties, like claim_number and linkages to invoice/policy, cannot be
   * changed by this operation. Strict validation applies, only permitting
   * updates that reflect permitted transitions (e.g., changing submission
   * status, updating payer responses, modifying claim payment amounts).
   *
   * All updates are logged with full audit trails, including the identity of
   * the user making the change, the previous state, and the updated state.
   * Fields required for regulatory compliance, like last_payer_response_code
   * and submission_status, must not be left blank. Logic must check for
   * business transitions, e.g., only permitted status changes (submitted →
   * accepted/denied/paid) are allowed, and payment updates should match invoice
   * reconciliations.
   *
   * Any modification may trigger additional side effects: recalculating billing
   * status, updating analytics, or triggering compliance workflows if claim
   * status changes to denied or paid. Attempts to update deleted or archived
   * claims must be rejected with an error. Related APIs include the PATCH
   * /insuranceClaims endpoint for claim search and the GET
   * /insuranceClaims/{insuranceClaimId} endpoint for claim detail retrieval.
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim to update.
   * @param body Data fields to update within the insurance claim. Only
   *   non-immutable fields may be supplied. Follows
   *   IHealthcarePlatformInsuranceClaim.IUpdate structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insuranceClaimId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceClaim.IUpdate,
  ): Promise<IHealthcarePlatformInsuranceClaim> {
    try {
      return await puthealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId(
        {
          organizationAdmin,
          insuranceClaimId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (mark deleted) an insurance claim by insuranceClaimId, with
   * full audit compliance.
   *
   * Use this operation to delete (soft-delete) an insurance claim entity from
   * the healthcare_platform_insurance_claims table by providing the
   * insuranceClaimId path parameter. This sets the deleted_at timestamp in the
   * record, ensuring auditability and retention for compliance purposes.
   *
   * Deletion is only permitted if the claim is not in a paid or finalized
   * status, following business logic that prohibits deleting claims after
   * settlement. Attempts to delete such claims must result in a proper error
   * with a description of the business rule conflict. All deletes are logged
   * for regulatory and audit purposes. The operation may affect related billing
   * or financial audit workflows downstream, so it must only be allowed when it
   * won't jeopardize compliance or cause reconciliation issues.
   *
   * This operation is tightly controlled by security and compliance rules.
   * Related endpoints include GET /insuranceClaims/{insuranceClaimId} for
   * retrieval, and PATCH /insuranceClaims for searching claims history
   * (including soft-deleted claims when permitted).
   *
   * @param connection
   * @param insuranceClaimId Unique identifier of the insurance claim to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":insuranceClaimId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("insuranceClaimId")
    insuranceClaimId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminInsuranceClaimsInsuranceClaimId(
        {
          organizationAdmin,
          insuranceClaimId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
