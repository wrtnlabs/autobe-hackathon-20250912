import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId } from "../../../../providers/puthealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { deletehealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId";

import { IHealthcarePlatformOrganizationAdmin } from "../../../../api/structures/IHealthcarePlatformOrganizationAdmin";

@Controller(
  "/healthcarePlatform/organizationAdmin/organizationadmins/:organizationAdminId",
)
export class HealthcareplatformOrganizationadminOrganizationadminsController {
  /**
   * Update an organization administrator
   * (healthcare_platform_organizationadmins) record by its ID.
   *
   * Updates a specific organization administrator's information, including
   * their full legal name, business email, and phone number as stored in the
   * 'healthcare_platform_organizationadmins' table. This operation is subject
   * to strict audit trails and can only be performed by users with suitable
   * privileges within the healthcare organization.
   *
   * On successful update, the response includes all current record fields and
   * verification of the changes. The operation logs the update timestamp and
   * ensures all business compliance workflows related to administrator updates
   * are followed.
   *
   * Validation checks include email uniqueness, required fields, and
   * enforcement of business logic for organization admin privileges. Conflict
   * or access errors return clear business-oriented error messages. Only fields
   * existent in the schema are used or returned. The update can only be
   * performed if the record is not marked as deleted (soft-deleted).
   *
   * @param connection
   * @param organizationAdminId The unique identifier (UUID) of the organization
   *   administrator to update.
   * @param body Payload containing updatable fields for the organization admin,
   *   such as full_name, email, phone.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationAdminId")
    organizationAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformOrganizationAdmin.IUpdate,
  ): Promise<IHealthcarePlatformOrganizationAdmin> {
    try {
      return await puthealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId(
        {
          organizationAdmin,
          organizationAdminId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (hard-delete) an organization administrator by ID
   * (healthcare_platform_organizationadmins).
   *
   * Permanently removes the specified organization admin entry from the
   * database, fully erasing associated administrator details. Access is
   * restricted to system or organization administrators with the highest level
   * permissions in the healthcarePlatform.
   *
   * Upon completion, the operation ensures the record can no longer be
   * referenced or recovered and initiates a platform-wide audit log event. All
   * access constraints and dependencies must be resolved before deletion. If
   * the specified record is missing, already deleted, or protected by policy
   * (active assignments or investigatory lock), the operation returns clear
   * error messages.
   *
   * No soft-deletion is performed for this operation, and care should be taken
   * to comply with security and privacy best practices, including audit
   * compliance for privileged actor actions.
   *
   * @param connection
   * @param organizationAdminId The unique identifier (UUID) of the organization
   *   administrator to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationAdminId")
    organizationAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminOrganizationadminsOrganizationAdminId(
        {
          organizationAdmin,
          organizationAdminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
