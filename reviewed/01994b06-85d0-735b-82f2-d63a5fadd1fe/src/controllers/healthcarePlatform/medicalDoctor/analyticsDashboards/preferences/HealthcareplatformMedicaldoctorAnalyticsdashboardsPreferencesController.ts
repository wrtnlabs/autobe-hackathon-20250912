import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferences } from "../../../../../providers/posthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferences";
import { MedicaldoctorAuth } from "../../../../../decorators/MedicaldoctorAuth";
import { MedicaldoctorPayload } from "../../../../../decorators/payload/MedicaldoctorPayload";
import { puthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId } from "../../../../../providers/puthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId";
import { deletehealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId } from "../../../../../providers/deletehealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId";

import { IHealthcarePlatformDashboardPreference } from "../../../../../api/structures/IHealthcarePlatformDashboardPreference";

@Controller(
  "/healthcarePlatform/medicalDoctor/analyticsDashboards/:dashboardId/preferences",
)
export class HealthcareplatformMedicaldoctorAnalyticsdashboardsPreferencesController {
  /**
   * Create a new analytics dashboard preferences record
   * (IHealthcarePlatformDashboardPreference) for a specific dashboard.
   *
   * Creates a new preference record for dashboard customization, storing
   * user-specific settings such as theme, layout, filters, widget
   * configuration, and last-view state for the given dashboardId parameter. The
   * operation writes to the healthcare_platform_dashboard_preferences table,
   * tying the new record to the requesting user and the dashboard specified by
   * the path parameter. Authorization is required to ensure the user owns or
   * has been granted edit access to the dashboard. The request body must follow
   * the IHealthcarePlatformDashboardPreference.ICreate schema, including the
   * necessary configuration parameters for preferences creation. On success,
   * the operation returns the newly created
   * IHealthcarePlatformDashboardPreference object, reflecting all
   * user-specified settings and the dashboard association. Error handling
   * includes validation for dashboard existence, permission checks, and
   * duplicate profile handling where a preference already exists for the
   * user/dashboard combination.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the user preferences are being created.
   * @param body User's dashboard preference configuration data for creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDashboardPreference.ICreate,
  ): Promise<IHealthcarePlatformDashboardPreference> {
    try {
      return await posthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferences(
        {
          medicalDoctor,
          dashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update analytics dashboard preferences
   * (IHealthcarePlatformDashboardPreference) for a specific dashboard and
   * preference.
   *
   * Updates an existing preference record for dashboard customization, allowing
   * users to change saved settings like theme, dashboard layout, widget
   * configuration, and personal filter states for the identified dashboard and
   * preferenceId. The operation mandates authorization to ensure that only the
   * preference owner or users with matching permissions can update the
   * settings. The request body follows the
   * IHealthcarePlatformDashboardPreference.IUpdate schema, specifying the exact
   * configuration updates desired. The operation writes to the
   * healthcare_platform_dashboard_preferences table, ensuring audit logs are
   * maintained for all changes as per compliance requirements. On success, it
   * returns the updated IHealthcarePlatformDashboardPreference object,
   * reflecting the new state. Validation handles dashboard and preference
   * existence, authorization checks, and ensures no other preference is
   * overwritten by mistake.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the user preference is being updated.
   * @param preferenceId The unique identifier for the user dashboard preference
   *   record to update.
   * @param body Dashboard preferences configuration changes to update (partial
   *   or full).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":preferenceId")
  public async update(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDashboardPreference.IUpdate,
  ): Promise<IHealthcarePlatformDashboardPreference> {
    try {
      return await puthealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId(
        {
          medicalDoctor,
          dashboardId,
          preferenceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (soft-delete) dashboard preferences
   * (IHealthcarePlatformDashboardPreference) for a given dashboard and
   * preference.
   *
   * Permanently disables a user or organization's dashboard preference settings
   * by marking the specified preference record as deleted via the deleted_at
   * column in the healthcare_platform_dashboard_preferences table (soft
   * delete). This disables all customizations for the specified dashboard until
   * a new preference is created. Authorization is required to ensure only the
   * owner or designated admin can erase the preference record. Successful
   * response returns no content. Validation includes existence checks for both
   * dashboard and preferenceId, as well as proper permission enforcement. If
   * preference is already deleted, the operation is idempotent and returns
   * success.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the preference is erased.
   * @param preferenceId The unique identifier for the user dashboard preference
   *   record to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":preferenceId")
  public async erase(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformMedicalDoctorAnalyticsDashboardsDashboardIdPreferencesPreferenceId(
        {
          medicalDoctor,
          dashboardId,
          preferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
