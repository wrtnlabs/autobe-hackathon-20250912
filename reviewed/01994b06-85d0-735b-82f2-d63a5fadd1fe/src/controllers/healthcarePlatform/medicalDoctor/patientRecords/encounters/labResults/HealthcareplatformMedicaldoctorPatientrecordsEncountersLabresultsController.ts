import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults } from "../../../../../../providers/posthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults";
import { MedicaldoctorAuth } from "../../../../../../decorators/MedicaldoctorAuth";
import { MedicaldoctorPayload } from "../../../../../../decorators/payload/MedicaldoctorPayload";
import { patchhealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults } from "../../../../../../providers/patchhealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults";
import { gethealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId } from "../../../../../../providers/gethealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId";
import { puthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId } from "../../../../../../providers/puthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId";

import { IHealthcarePlatformLabResult } from "../../../../../../api/structures/IHealthcarePlatformLabResult";
import { IPageIHealthcarePlatformLabResult } from "../../../../../../api/structures/IPageIHealthcarePlatformLabResult";

@Controller(
  "/healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/encounters/:encounterId/labResults",
)
export class HealthcareplatformMedicaldoctorPatientrecordsEncountersLabresultsController {
  /**
   * Create a new laboratory result for a specific encounter and patient record.
   *
   * This endpoint allows for the creation of a new lab result record in the
   * healthcare_platform_lab_results table for a given patient record and
   * clinical encounter. Both patientRecordId and encounterId path parameters
   * must be provided and are validated as UUIDs, ensuring accurate clinical
   * linkage.
   *
   * Only users with clinical, technical, or administrative authority (as
   * defined by RBAC and the business logic) may submit new lab results. Lab
   * results may arrive via manual data entry or API-driven integration with
   * external laboratory information systems. The request body provides all
   * necessary fields, including test identifiers, result values, result flags,
   * lab provider, and relevant result and status metadata from the schema.
   * Validation and business rules enforce that the encounter and patient record
   * exist and are active, and that laboratory integration rules are followed.
   * Audit logs and compliance workflows are triggered on creation.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record for which to
   *   create the lab result
   * @param encounterId Unique identifier of the encounter for which to create
   *   the lab result
   * @param body Full data required to create a new laboratory result record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLabResult.ICreate,
  ): Promise<IHealthcarePlatformLabResult> {
    try {
      return await posthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults(
        {
          medicalDoctor,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated laboratory results for a specific encounter
   * and patient record.
   *
   * This API operation retrieves a filtered, paginated list of laboratory
   * results for a given patient record and related clinical encounter (visit,
   * admission, telemedicine, etc.), leveraging the
   * healthcare_platform_lab_results table as described in the Prisma schema.
   * The user must specify both the patientRecordId and encounterId in the path;
   * both IDs are validated as UUIDs, ensuring correct parent-child relationship
   * and data isolation.
   *
   * The request body provides complex search parameters, allowing filtering by
   * test name, result flag (e.g., normal/abnormal/critical), result status
   * (pending, completed), and date/time range of the result, as well as lab
   * integration provider when applicable. Paginated responses include summary
   * fields suitable for list views and navigation to detailed records.
   *
   * Security and authorization checks ensure only properly scoped users are
   * able to view laboratory results for patients within organizations,
   * departments, or assignments as per RBAC definitions. Audit logging is
   * executed for access, and access is denied if the requestor lacks necessary
   * permissions or patient consent. The operation is suitable for dashboards,
   * clinical review screens, or audit purposes.
   *
   * @param connection
   * @param patientRecordId The unique identifier of the patient record for
   *   which to retrieve lab results
   * @param encounterId The unique identifier of the EHR encounter linked to the
   *   requested lab results
   * @param body Search criteria, pagination, and filter options for lab result
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLabResult.IRequest,
  ): Promise<IPageIHealthcarePlatformLabResult.ISummary> {
    try {
      return await patchhealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResults(
        {
          medicalDoctor,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed laboratory result by ID for a given patient record and
   * encounter.
   *
   * This API operation returns the full detail of a laboratory result entity,
   * using the healthcare_platform_lab_results table, as indicated by the
   * labResultId path parameter. The patientRecordId and encounterId ensure
   * proper scoping and data isolation. The lab result includes metadata such as
   * test name, result values, clinical flags (normal/abnormal/critical),
   * integration/provenance information, and all structured result fields as per
   * the schema definition.
   *
   * Authorization checks guarantee only users with appropriate clinical,
   * technical, or department-level roles may access this sensitive result, and
   * audit logs are maintained for every access event. If the user does not have
   * permission, the operation will return an access denied response. Security
   * and compliance mechanisms are enforced according to the RBAC and record
   * privacy logic.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the parent patient record
   * @param encounterId Unique identifier for the parent EHR encounter
   * @param labResultId Unique identifier of the laboratory result to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":labResultId")
  public async at(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedParam("labResultId")
    labResultId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLabResult> {
    try {
      return await gethealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId(
        {
          medicalDoctor,
          patientRecordId,
          encounterId,
          labResultId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing laboratory result for a patient record and encounter.
   *
   * This endpoint applies to the healthcare_platform_lab_results entity and
   * allows authorized users to update the details of a laboratory result
   * previously recorded for a specific patient and clinical encounter. The
   * operation requires valid UUIDs for patientRecordId, encounterId, and
   * labResultId, ensuring the correct entity context.
   *
   * The request body provides all fields eligible for update, including changes
   * to result values, flags, outcome status, and attached lab integration
   * details, as specified in the schema. Authorization controls designate only
   * clinical, technical, or supervisory staff to perform updates, and strict
   * audit logging records each modification. Validation ensures that
   * modifications do not violate workflow locks (e.g., finalized results may be
   * read-only), that the patient and encounter exist and are active, and that
   * updates are appropriately attributed for compliance.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record
   * @param encounterId Unique identifier of the EHR encounter
   * @param labResultId Unique identifier of the laboratory result to update
   * @param body Payload with fields and values to update in the target
   *   laboratory result
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":labResultId")
  public async update(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedParam("labResultId")
    labResultId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLabResult.IUpdate,
  ): Promise<IHealthcarePlatformLabResult> {
    try {
      return await puthealthcarePlatformMedicalDoctorPatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId(
        {
          medicalDoctor,
          patientRecordId,
          encounterId,
          labResultId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
