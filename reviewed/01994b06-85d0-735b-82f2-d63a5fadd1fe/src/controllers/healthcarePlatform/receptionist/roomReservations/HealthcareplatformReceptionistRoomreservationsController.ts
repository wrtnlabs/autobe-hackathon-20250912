import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformReceptionistRoomReservationsRoomReservationId } from "../../../../providers/gethealthcarePlatformReceptionistRoomReservationsRoomReservationId";
import { ReceptionistAuth } from "../../../../decorators/ReceptionistAuth";
import { ReceptionistPayload } from "../../../../decorators/payload/ReceptionistPayload";
import { puthealthcarePlatformReceptionistRoomReservationsRoomReservationId } from "../../../../providers/puthealthcarePlatformReceptionistRoomReservationsRoomReservationId";
import { deletehealthcarePlatformReceptionistRoomReservationsRoomReservationId } from "../../../../providers/deletehealthcarePlatformReceptionistRoomReservationsRoomReservationId";
import { posthealthcarePlatformReceptionistRoomReservations } from "../../../../providers/posthealthcarePlatformReceptionistRoomReservations";

import { IHealthcarePlatformRoomReservation } from "../../../../api/structures/IHealthcarePlatformRoomReservation";

@Controller("/healthcarePlatform/receptionist/roomReservations")
export class HealthcareplatformReceptionistRoomreservationsController {
  /**
   * Retrieve detailed information on a room reservation
   * (healthcare_platform_room_reservations).
   *
   * This API endpoint allows users to retrieve complete details of a specific
   * room reservation by its unique identifier. Room reservations in the system
   * support operational and clinical scheduling, including appointments,
   * maintenance, cleaning, and admin activities.
   *
   * Security considerations: Only users with appropriate privileges (e.g.,
   * admins, scheduling staff) may access this data. All access is audited for
   * compliance. Returned data includes the room reference, time window,
   * reservation type, appointment connection (if present), and modification
   * audit timestamps.
   *
   * Room reservations are linked to the organization's resource registry but
   * are not deleted when the resource is decommissioned, ensuring historical
   * reporting. Errors occur when the roomReservationId does not exist or the
   * user does not have access rights, with a clear 404/403 error structure.
   * Soft deleted reservations are not returned by default.
   *
   * @param connection
   * @param roomReservationId Unique identifier of the target room reservation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roomReservationId")
  public async at(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("roomReservationId")
    roomReservationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRoomReservation> {
    try {
      return await gethealthcarePlatformReceptionistRoomReservationsRoomReservationId(
        {
          receptionist,
          roomReservationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing room reservation
   * (healthcare_platform_room_reservations).
   *
   * Allows scheduling staff to update the attributes of a specific room
   * reservation, such as reservation time, room assignment, reservation type,
   * or linkage to appointment.
   *
   * Security considerations: Only system admins, organization admins,
   * department heads, or receptionists may update a room reservation, and all
   * actions are audited for compliance and resource conflict review.
   *
   * Validation: If the update would create a conflict (double-booking or
   * violating lead/cancel window) or the reservation no longer exists, the
   * system returns a 400/404 error. Successful updates reflect the new
   * resource/booked window and audit timestamps. Soft-deleted reservations
   * cannot be updated.
   *
   * The endpoint references the healthcare_platform_room_reservations schema
   * and validates against all schema-defined relations to ensure referential
   * integrity.
   *
   * @param connection
   * @param roomReservationId Unique identifier of the room reservation to
   *   update
   * @param body Updated data for the room reservation, including new timing,
   *   resource, or appointment connectivity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":roomReservationId")
  public async update(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("roomReservationId")
    roomReservationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRoomReservation.IUpdate,
  ): Promise<IHealthcarePlatformRoomReservation> {
    try {
      return await puthealthcarePlatformReceptionistRoomReservationsRoomReservationId(
        {
          receptionist,
          roomReservationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a room reservation by ID (healthcare_platform_room_reservations).
   *
   * The API endpoint allows authorized users (admins, department heads,
   * receptionists) to delete an existing room reservation by unique ID. This
   * action marks the reservation as deleted for compliance-mandated record
   * retention (soft delete semantics, setting 'deleted_at').
   *
   * Security: Only users with scheduling roles may perform this operation, and
   * all actions are audit-logged with reference to actor, timestamp, and
   * affected resource.
   *
   * Successful erasure results in the record becoming unavailable to standard
   * queries. Attempts to delete a nonexistent or already deleted reservation
   * return a 404.
   *
   * Related operations: Room reservation search, room scheduling, and audit log
   * inspection may reference the same entity for organizational workflows and
   * compliance controls.
   *
   * @param connection
   * @param roomReservationId Unique identifier of the room reservation to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":roomReservationId")
  public async erase(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("roomReservationId")
    roomReservationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformReceptionistRoomReservationsRoomReservationId(
        {
          receptionist,
          roomReservationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new room reservation (healthcare_platform_room_reservations).
   *
   * This API creates a new reservation for a physical room within an
   * organization, supporting workflows including appointment booking,
   * maintenance blocking, and event management. The request provides room,
   * time, type, and optional appointment linkage.
   *
   * Security considerations: Only scheduling-capable roles (system admin,
   * organization admin, department head, receptionist) may invoke this
   * operation; audit logs record reservation details, actor, and rationale.
   *
   * Validation includes preventing double-bookings, enforcing minimum
   * lead/cancel times, and checking room/resource existence. Errors include
   * invalid time windows, permission issues, or pre-existing reservation
   * conflict. On success, the full reservation details are returned for further
   * workflow integration and dashboard purposes.
   *
   * @param connection
   * @param body Details for new room reservation entry, including room,
   *   schedule, and reservation type.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedBody()
    body: IHealthcarePlatformRoomReservation.ICreate,
  ): Promise<IHealthcarePlatformRoomReservation> {
    try {
      return await posthealthcarePlatformReceptionistRoomReservations({
        receptionist,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
