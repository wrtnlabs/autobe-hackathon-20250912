import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists } from "../../../../../providers/posthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists";
import { ReceptionistAuth } from "../../../../../decorators/ReceptionistAuth";
import { ReceptionistPayload } from "../../../../../decorators/payload/ReceptionistPayload";
import { patchhealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists } from "../../../../../providers/patchhealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists";
import { gethealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId } from "../../../../../providers/gethealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId";
import { puthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId } from "../../../../../providers/puthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId";
import { deletehealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId } from "../../../../../providers/deletehealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId";

import { IHealthcarePlatformAppointmentWaitlist } from "../../../../../api/structures/IHealthcarePlatformAppointmentWaitlist";
import { IPageIHealthcarePlatformAppointmentWaitlist } from "../../../../../api/structures/IPageIHealthcarePlatformAppointmentWaitlist";

@Controller(
  "/healthcarePlatform/receptionist/appointments/:appointmentId/waitlists",
)
export class HealthcareplatformReceptionistAppointmentsWaitlistsController {
  /**
   * Add a waitlist entry for a patient to a specific appointment (join
   * waitlist).
   *
   * Create a new waitlist entry for a patient on a particular appointment.
   * Patients may self-join the waitlist for an appointment that is currently
   * full; authorized staff can add patients on their behalf in accordance with
   * scheduling policy.
   *
   * Business rules validate that a patient cannot be waitlisted more than once
   * per appointment, and that organization, department, and appointment status
   * permit further waitlisting. All creation events are properly audited, with
   * join time and current status set per schema documentation. Sensitive
   * patient information, if present in the request, is only processed by
   * authorized roles.
   *
   * Implements compliance with organizational scheduling policies and privacy
   * protections, with all events creating audit logs as enforced by the
   * healthcare platform's business rules. Errors are returned if the
   * appointment does not permit further waitlisting or if business policy is
   * violated.
   *
   * @param connection
   * @param appointmentId Unique identifier for the target appointment where
   *   waitlisting is requested.
   * @param body Patient and contextual information needed to join the waitlist.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.ICreate,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await posthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists(
        {
          receptionist,
          appointmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the waitlist for a given appointment from the appointment
   * waitlists table.
   *
   * Retrieve the waitlist for a specified appointment on the healthcare
   * platform, returning a paginated, filtered list of users waiting for a slot.
   * The operation supports advanced query features such as sorting by join time
   * or status and filtering by patient or waitlist entry status.
   *
   * Authorization is enforced according to organization, department, or patient
   * context, ensuring callers see only the waitlist entries they are permitted
   * to access under strict RBAC. Patients only see their own status, while
   * appropriate staff (receptionists, nurses, admins) can view the entire list
   * for coordination purposes. Sensitive patient identifiers are filtered
   * according to user role.
   *
   * As per schema documentation, this retrieves the
   * `healthcare_platform_appointment_waitlists` related to an `appointmentId`,
   * providing audit and compliance features so that data access is properly
   * monitored and restricted. Pagination ensures performant retrieval even for
   * busy time slots. Handling includes validation of appointmentId and clear
   * error signaling for restricted access.
   *
   * @param connection
   * @param appointmentId Unique identifier of the appointment for which to
   *   retrieve the waitlist.
   * @param body Query and pagination/filter parameters for searching the
   *   waitlist.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.IRequest,
  ): Promise<IPageIHealthcarePlatformAppointmentWaitlist.ISummary> {
    try {
      return await patchhealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlists(
        {
          receptionist,
          appointmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific appointment waitlist entry.
   *
   * Retrieve detailed information for an individual appointment waitlist entry,
   * including patient, join time, current status (active, promoted, removed),
   * and relevant patient metadata where authorized. Sensitive fields are
   * presented only to authorized roles per privacy and compliance constraints.
   *
   * User permissions are strictly enforcedâ€”patients can only view their own
   * waitlist entries, while organization and department staff with appropriate
   * scheduling or administrative roles (e.g., receptionist, department head)
   * can access any entry within their allowed scope. Every access is logged and
   * auditable to support HIPAA/data compliance.
   *
   * Handles validation on appointmentId and waitlistId, returns appropriate
   * error messages for invalid, restricted, or not found entries. This is a
   * single-resource GET operation referencing
   * healthcare_platform_appointment_waitlists as described in the Prisma schema
   * and ERD.
   *
   * @param connection
   * @param appointmentId Unique identifier for the appointment containing the
   *   waitlist.
   * @param waitlistId Unique identifier of the waitlist entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":waitlistId")
  public async at(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedParam("waitlistId")
    waitlistId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await gethealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId(
        {
          receptionist,
          appointmentId,
          waitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Edit a specific waitlist entry for an appointment.
   *
   * Update a specific entry on an appointment's waitlist, such as by changing
   * status (e.g., promoted when a slot opens, or removed on patient/clinic
   * action), updating rationale, or other permissible fields per system
   * business rules. The operation is carefully restricted under RBAC; only
   * staff with authority or the patient for their own record may make changes.
   *
   * All changes are audited to satisfy compliance, and unauthorized edits
   * result in clear business errors. Validates presence of both appointmentId
   * and waitlistId, enforces that edits are permitted by current status and
   * complies with privacy and safety rules consistent with Prisma model
   * documentation.
   *
   * Operation references the `healthcare_platform_appointment_waitlists` table
   * and its relationships; all successful changes generate audit logs and
   * enforce any derived business policy such as automatic removal from
   * waitlists on promotion.
   *
   * @param connection
   * @param appointmentId Unique identifier for the appointment containing the
   *   waitlist entry.
   * @param waitlistId Unique identifier of the waitlist entry to update.
   * @param body Fields to update on the waitlist entry, including
   *   status/rationale.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":waitlistId")
  public async update(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedParam("waitlistId")
    waitlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.IUpdate,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await puthealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId(
        {
          receptionist,
          appointmentId,
          waitlistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a patient waitlist entry from a specific appointment (hard delete,
   * Scheduling).
   *
   * This API operation is used to delete (hard erase) a patient's waitlist
   * entry from a specific appointment's waitlist in the healthcarePlatform
   * system.
   *
   * It is primarily intended for administrative staff, receptionists, or system
   * automations where a patient no longer needs to remain on the waitlist
   * (e.g., patient schedules elsewhere, is promoted, or cancels their
   * interest). The operation ensures compliance by fully removing the waitlist
   * record from the healthcare_platform_appointment_waitlists table, which does
   * not feature a soft delete markerâ€”deletion is permanent and cannot be
   * recovered.
   *
   * Security considerations: Only authorized staff or automation with
   * sufficient privileges may perform this operation. The action is auditable
   * and would typically be recorded in the platformâ€™s audit log under
   * appointment management workflows.
   *
   * Validation/business rules: Attempting to erase a non-existent or
   * already-deleted waitlistId yields a suitable error response. Erasures
   * associated with active appointments (still scheduled) are permitted;
   * removing waitlist entries for past/canceled appointments may have further
   * policy or audit consequences as per organizational configuration.
   *
   * Related operations: Staff may query all waitlist entries for an appointment
   * before erasing or remove multiple via separate API calls. This operation
   * only affects the targeted waitlist record for a given appointment.
   *
   * @param connection
   * @param appointmentId Unique identifier of the target appointment for which
   *   the waitlist entry should be removed.
   * @param waitlistId Unique identifier of the patient's waitlist entry to be
   *   deleted for the given appointment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":waitlistId")
  public async erase(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedParam("waitlistId")
    waitlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformReceptionistAppointmentsAppointmentIdWaitlistsWaitlistId(
        {
          receptionist,
          appointmentId,
          waitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
