import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformPatientBillingInvoicesBillingInvoiceId } from "../../../../providers/gethealthcarePlatformPatientBillingInvoicesBillingInvoiceId";
import { PatientAuth } from "../../../../decorators/PatientAuth";
import { PatientPayload } from "../../../../decorators/payload/PatientPayload";

import { IHealthcarePlatformBillingInvoice } from "../../../../api/structures/IHealthcarePlatformBillingInvoice";

@Controller("/healthcarePlatform/patient/billingInvoices/:billingInvoiceId")
export class HealthcareplatformPatientBillinginvoicesController {
  /**
   * Retrieve a specific billing invoice by ID
   * (IHealthcarePlatformBillingInvoice).
   *
   * Retrieve a healthcare platform billing invoice using the unique invoice ID.
   *
   * This endpoint operates on the healthcare_platform_billing_invoices table
   * and returns details including patient, encounter, status, amounts, and
   * organization context, as defined in the Prisma schema. Permission checks
   * ensure that only authorized users (such as organization admins, billing
   * staff, or the invoiced patient) can access the full invoice details,
   * honoring data isolation and auditability requirements according to
   * healthcare compliance policy.
   *
   * Sensitive invoice information will only be provided to callers with valid
   * scopeâ€”it is not available to general public access. Audit logs are
   * generated for all access to this resource, in line with financial
   * compliance standards.
   *
   * If the invoice is deleted or the user lacks permission, an appropriate
   * error will be returned.
   *
   * @param connection
   * @param billingInvoiceId UUID of the target billing invoice to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingInvoice> {
    try {
      return await gethealthcarePlatformPatientBillingInvoicesBillingInvoiceId({
        patient,
        billingInvoiceId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
