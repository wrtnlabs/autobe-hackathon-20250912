import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformPatientAppointments } from "../../../../providers/patchhealthcarePlatformPatientAppointments";
import { PatientAuth } from "../../../../decorators/PatientAuth";
import { PatientPayload } from "../../../../decorators/payload/PatientPayload";
import { gethealthcarePlatformPatientAppointmentsAppointmentId } from "../../../../providers/gethealthcarePlatformPatientAppointmentsAppointmentId";

import { IPageIHealthcarePlatformAppointment } from "../../../../api/structures/IPageIHealthcarePlatformAppointment";
import { IHealthcarePlatformAppointment } from "../../../../api/structures/IHealthcarePlatformAppointment";

@Controller("/healthcarePlatform/patient/appointments")
export class HealthcareplatformPatientAppointmentsController {
  /**
   * Search and paginate appointments across providers, patients, and
   * departments (healthcare_platform_appointments).
   *
   * Search, paginate, and filter scheduled appointments in the system. The
   * healthcare_platform_appointments schema enables robust querying by
   * provider, patient, organization, department, date range, appointment type,
   * resource, and more. Filtering logic enforces role-based data access
   * boundaries—doctors, nurses can see appointments relevant to their patients
   * or department, receptionists can view organizational schedules, and
   * patients can query their own slots only.
   *
   * The request body allows for compound filters, sorting (by start_time,
   * status, provider, etc.), and pagination (page number, page size, result
   * window). Business logic ensures that only users with proper assignment and
   * role may query appointments. Attempting to view or search schedules outside
   * one's organizational or patient scope is denied with a clear error. Privacy
   * and data minimization constraints are observed throughout.
   *
   * Audit logging records filter usage and all access events for compliance.
   * The response includes paginated appointment summaries (without PHI)
   * suitable for calendar views or dashboard widgets. Full appointment details
   * require additional API calls where permitted. This operation is suitable
   * for integration with both staff-oriented and patient self-service
   * scheduling interfaces.
   *
   * @param connection
   * @param body Search, filtering, and pagination parameters for appointments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PatientAuth()
    patient: PatientPayload,
    @TypedBody()
    body: IHealthcarePlatformAppointment.IRequest,
  ): Promise<IPageIHealthcarePlatformAppointment.ISummary> {
    try {
      return await patchhealthcarePlatformPatientAppointments({
        patient,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch detailed information for a specific appointment by ID
   * (healthcare_platform_appointments).
   *
   * Retrieve full detail for a single appointment event. The
   * healthcare_platform_appointments table captures all scheduling
   * details—organization, department, provider, patient, room/equipment,
   * status, time window, and description. User access is strictly controlled:
   * only assigned provider, patient, or authorized staff roles may fetch
   * appointment data.
   *
   * The path parameter appointmentId uniquely identifies the appointment to
   * retrieve. The system enforces RBAC/organizational boundaries, ensuring
   * patients only see their own appointment details, providers see theirs, and
   * admins/receptionists have wider access. Business logic may redact or
   * minimize PHI in patient-facing responses.
   *
   * Audit logs are created for each access to appointment details in accordance
   * with regulatory requirements. Related operations include PATCH
   * /appointments for searching, and PUT/DELETE for update/deletion. This
   * operation returns the appointment record in detail if authorized, or an
   * error if not permitted.
   *
   * @param connection
   * @param appointmentId Unique identifier of the appointment event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":appointmentId")
  public async at(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAppointment> {
    try {
      return await gethealthcarePlatformPatientAppointmentsAppointmentId({
        patient,
        appointmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
