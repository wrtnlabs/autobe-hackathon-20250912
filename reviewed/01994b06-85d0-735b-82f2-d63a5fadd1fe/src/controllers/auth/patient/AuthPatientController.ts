import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthPatientJoin } from "../../../providers/postauthPatientJoin";
import { postauthPatientLogin } from "../../../providers/postauthPatientLogin";
import { postauthPatientRefresh } from "../../../providers/postauthPatientRefresh";

import { IHealthcarePlatformPatient } from "../../../api/structures/IHealthcarePlatformPatient";

@Controller("/auth/patient")
export class AuthPatientController {
  /**
   * Register a new patient in healthcare_platform_patients and authorize via
   * join.
   *
   * Register a new patient account (healthcare_platform_patients) and issue the
   * initial authorization token set (JWT and refresh) for platform access.
   * Enforces unique email, required fields, and password policy or SSO logic
   * through healthcare_platform_user_authentications. Triggers compliance audit
   * trail on success, linking created patient to
   * healthcare_platform_user_org_assignments and initializing
   * notification/channel preferences. Response structure uses
   * IHealthcarePlatformPatient.IAuthorized for token and identity details.
   * Security warning: initial credentials are securely hashed and audit entries
   * are created for registration, per HIPAA. Registration is subject to
   * organizational consent and may require email or identity verification via a
   * separate step if enabled by policy. Patient status is set to active upon
   * success, pending further verification if business logic so dictates. All
   * exception cases (duplication, violation of password/identity policy) yield
   * explicit error responses. Related endpoints: /auth/patient/login,
   * /auth/patient/refresh.
   *
   * @param connection
   * @param body Information required for new patient registration, including
   *   identity and authentication fields; must match
   *   IHealthcarePlatformPatient.IJoin schema.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IHealthcarePlatformPatient.IJoin,
  ): Promise<IHealthcarePlatformPatient.IAuthorized> {
    try {
      return await postauthPatientJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a patient and authorize via /auth/patient/login; update
   * healthcare_platform_auth_sessions.
   *
   * Authenticate a patient account (healthcare_platform_patients) via
   * email/password or SSO; issue new authorization tokens (JWT & refresh) if
   * credentials are valid and patient status is active. Uses
   * healthcare_platform_user_authentications for credential validation; logs
   * all attempts for compliance. Returns IHealthcarePlatformPatient.IAuthorized
   * structure on successful login. Patient status and lockout policy are
   * enforced to prevent unauthorized access after repeated failures or account
   * suspension. Related endpoints: /auth/patient/join for registration,
   * /auth/patient/refresh for session continuation. All error and security
   * events are audit-logged.
   *
   * @param connection
   * @param body Patient login/request credentials and authentication provider
   *   selection. Follows IHealthcarePlatformPatient.ILogin structure.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IHealthcarePlatformPatient.ILogin,
  ): Promise<IHealthcarePlatformPatient.IAuthorized> {
    try {
      return await postauthPatientLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh and renew authentication tokens for an active patient session in
   * healthcare_platform_auth_sessions.
   *
   * Allows a patient (healthcare_platform_patients) to obtain new authorization
   * tokens given a valid refresh token. Refresh token and session mapping is
   * validated via healthcare_platform_auth_sessions. Returns a new
   * IHealthcarePlatformPatient.IAuthorized structure if successful, else logs
   * error and returns explicit session invalid/expired response. Full audit of
   * session activity for HIPAA compliance. Organizational security policies may
   * enforce session expiration, forced logout, or consent review during
   * refresh. Related API: /auth/patient/login (primary authentication). On any
   * anomaly, system logs a security event for compliance monitoring.
   *
   * @param connection
   * @param body Payload to request new tokens with a valid refresh token;
   *   structure per IHealthcarePlatformPatient.IRefresh.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IHealthcarePlatformPatient.IRefresh,
  ): Promise<IHealthcarePlatformPatient.IAuthorized> {
    try {
      return await postauthPatientRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
