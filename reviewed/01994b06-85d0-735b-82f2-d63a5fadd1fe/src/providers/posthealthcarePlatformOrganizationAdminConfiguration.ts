import jwt from "jsonwebtoken";
import { MyGlobal } from "../MyGlobal";
import typia, { tags } from "typia";
import { Prisma } from "@prisma/client";
import { v4 } from "uuid";
import { toISOStringSafe } from "../util/toISOStringSafe";
import { IHealthcarePlatformConfiguration } from "@ORGANIZATION/PROJECT-api/lib/structures/IHealthcarePlatformConfiguration";
import { OrganizationadminPayload } from "../decorators/payload/OrganizationadminPayload";

/**
 * Create a new configuration record in the healthcare_platform_configuration
 * table.
 *
 * This operation allows an organization administrator to create a new
 * configuration setting within their organization's scope in the healthcare
 * platform. The configuration key must be unique within the organization. This
 * endpoint permits only operational and technical settings; clinical or PHI
 * data is not allowed. Timestamps and unique identifier are generated by the
 * platform.
 *
 * - Organization id is mandatory for org admin context, and only organization
 *   admins may call this endpoint.
 * - Throws error if required context is missing or duplicate configuration found.
 * - All date and uuid fields are provided as branded strings; no native Date or
 *   type assertions are used.
 *
 * @param props - The input payload containing the authenticated organization
 *   admin and configuration properties
 * @param props.organizationAdmin - Authenticated organization admin context
 * @param props.body - Configuration creation details (must include organization
 *   id)
 * @returns The created configuration entity, with all DTO-compliant and branded
 *   fields populated
 * @throws {Error} If the organization id is missing or invalid, or a duplicate
 *   configuration exists for the same key/org
 */
export async function posthealthcarePlatformOrganizationAdminConfiguration(props: {
  organizationAdmin: OrganizationadminPayload;
  body: IHealthcarePlatformConfiguration.ICreate;
}): Promise<IHealthcarePlatformConfiguration> {
  const { organizationAdmin, body } = props;
  // Organization context is required for admin-level configuration creation
  if (
    body.healthcare_platform_organization_id === undefined ||
    body.healthcare_platform_organization_id === null
  ) {
    throw new Error(
      "Organization context (healthcare_platform_organization_id) is required to create a configuration as organization admin.",
    );
  }

  // Uniqueness validation: key/org must not already exist
  const existing =
    await MyGlobal.prisma.healthcare_platform_configuration.findFirst({
      where: {
        key: body.key,
        healthcare_platform_organization_id:
          body.healthcare_platform_organization_id,
      },
    });
  if (existing) {
    throw new Error(
      "A configuration with this key already exists for the specified organization.",
    );
  }

  const generatedId = v4();
  const now = toISOStringSafe(new Date());

  // Create the configuration entity
  const created =
    await MyGlobal.prisma.healthcare_platform_configuration.create({
      data: {
        id: generatedId,
        healthcare_platform_organization_id:
          body.healthcare_platform_organization_id,
        key: body.key,
        value: body.value,
        description: body.description,
        created_at: now,
        updated_at: now,
      },
    });

  // Prepare deleted_at value for DTO conformance
  let deletedAt: (string & tags.Format<"date-time">) | null | undefined =
    undefined;
  if (created.deleted_at !== undefined && created.deleted_at !== null) {
    deletedAt = toISOStringSafe(created.deleted_at);
  }

  // Return full DTO-compliant entity (all dates as branded strings, all required/optional fields mapped exactly)
  return {
    id: created.id,
    healthcare_platform_organization_id:
      created.healthcare_platform_organization_id ?? undefined,
    key: created.key,
    value: created.value,
    description: created.description,
    created_at: toISOStringSafe(created.created_at),
    updated_at: toISOStringSafe(created.updated_at),
    deleted_at: deletedAt,
  };
}
