import { tags } from "typia";

/**
 * Entity representing a scheduled notification/reminder for an appointment.
 * Includes details for timing, delivery, recipient, and status tracking. Used
 * in appointment modules for real-time and audit tracking of all reminders sent
 * to patients or staff.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformAppointmentReminder = {
  /** Unique identifier for the appointment reminder. Always a UUID. */
  id: string & tags.Format<"uuid">;

  /** Reference to the related appointment (UUID). */
  appointment_id: string & tags.Format<"uuid">;

  /**
   * Scheduled time for this reminder to be sent. Must be a valid ISO
   * 8601/RFC3339 date-time string.
   */
  reminder_time: string & tags.Format<"date-time">;

  /**
   * Type of recipient for this reminder. Example values: 'patient',
   * 'provider', or 'both'.
   */
  recipient_type: string;

  /** UUID of the reminder target user (may be patient/staff/etc). */
  recipient_id: string & tags.Format<"uuid">;

  /**
   * Channel through which the reminder will be delivered. Examples: 'email',
   * 'sms', 'in_app'.
   */
  delivery_channel: string;

  /** Status code of reminder delivery: 'sent', 'pending', 'failed', etc. */
  delivery_status: string;

  /** Timestamp when the reminder was created (RFC3339/ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to this reminder (RFC3339/ISO 8601). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformAppointmentReminder {
  /**
   * Request body for querying appointment reminder records, supporting
   * filtering by various reminder fields and paginating/sorting result set
   * for UI. Used for advanced reminder monitoring, resend, audit, or staff
   * review.
   *
   * Fields should follow API usage conventionsâ€”filter and range queries may
   * be left unset if not used. Sorting controls behavior of paged results.
   * Organization-level and appointment-level filtering is supported for
   * strict data isolation and monitoring. Any property may be omitted to
   * default to no filter/sort for respective field.
   */
  export type IRequest = {
    /** Target appointment UUID whose reminders are being queried. */
    appointment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter results by recipient type (e.g., 'patient', 'provider',
     * 'staff'), if set.
     */
    recipient_type?: string | undefined;

    /** Filter reminder entries for a single recipient user, if set. */
    recipient_id?: (string & tags.Format<"uuid">) | undefined;

    /** Limit results by channel (e.g., 'email', 'sms', 'in_app', etc.). */
    delivery_channel?: string | undefined;

    /**
     * Filter reminders by delivery status (e.g., 'sent', 'pending',
     * 'failed').
     */
    delivery_status?: string | undefined;

    /** Return reminders scheduled at or after this ISO UTC time. */
    reminder_time_from?: (string & tags.Format<"date-time">) | undefined;

    /** Return reminders scheduled at or before this ISO UTC time. */
    reminder_time_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page index for paginated results (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field to sort results by (e.g., 'reminder_time', 'created_at'). */
    sort_by?: string | undefined;

    /** Direction for sorting the result set; must be 'asc' or 'desc'. */
    sort_direction?: "asc" | "desc" | undefined;
  };

  /**
   * POST payload for creating an appointment reminder. Includes all fields
   * required to schedule a reminder for an appointment by
   * recipient/channel/time.
   */
  export type ICreate = {
    /** Scheduled send time of the reminder (ISO 8601/RFC3339). */
    reminder_time: string & tags.Format<"date-time">;

    /** Type of reminder recipient (e.g., patient, provider, both). */
    recipient_type: string;

    /** UUID of the recipient (user, patient, staff). */
    recipient_id: string & tags.Format<"uuid">;

    /**
     * Notification channel to use for this reminder ('email', 'sms',
     * 'in_app').
     */
    delivery_channel: string;
  };

  /**
   * PATCH/PUT payload to update an existing appointment reminder. Fields are
   * optional and may be supplied singly or in combination. Only supplied
   * values are updated.
   */
  export type IUpdate = {
    /** If supplied, updates the scheduled time for this reminder. */
    reminder_time?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If supplied, changes the recipient type (e.g., 'patient',
     * 'provider').
     */
    recipient_type?: string | undefined;

    /** If supplied, changes the target user for the reminder. */
    recipient_id?: (string & tags.Format<"uuid">) | undefined;

    /** If supplied, changes the delivery channel for this reminder. */
    delivery_channel?: string | undefined;

    /**
     * If supplied, changes the technical delivery status of this reminder
     * ('sent', 'failed', etc.).
     */
    delivery_status?: string | undefined;
  };
}
