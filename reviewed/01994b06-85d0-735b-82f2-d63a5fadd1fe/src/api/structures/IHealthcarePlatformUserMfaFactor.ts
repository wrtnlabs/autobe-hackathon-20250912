import { tags } from "typia";

/**
 * Represents a multi-factor authentication (MFA) factor for a user - such as
 * TOTP app, SMS, email, etc. Based on healthcare_platform_user_mfa_factors
 * table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformUserMfaFactor = {
  /** Unique MFA factor record identifier */
  id: string & tags.Format<"uuid">;

  /** User to whom this MFA factor belongs */
  user_id: string & tags.Format<"uuid">;

  /** User type for MFA mapping (systemadmin, orgadmin, etc). */
  user_type: string;

  /** Type of MFA factor (totp, sms, email, webauthn, backup). */
  factor_type: string;

  /** Encoded/hashed value or configuration for the MFA factor. */
  factor_value: string;

  /** Sort order/priority (lower = primary). */
  priority: number & tags.Type<"int32">;

  /** Whether the MFA factor is enabled or not. */
  is_active: boolean;

  /** Creation timestamp (ISO8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp (ISO8601). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformUserMfaFactor {
  /**
   * Query parameters for listing/searching MFA factors for users. Optional
   * fields are for flexible filtering and pagination. Used in admin portals
   * and audit views.
   */
  export type IRequest = {
    /** Search by user UUID. */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Type of user/actor row (systemadmin, orgadmin, etc). */
    user_type?: string | undefined;

    /** Type of MFA factor (totp, sms, email, webauthn, backup). */
    factor_type?: string | undefined;

    /** Whether the MFA factor is currently enabled. */
    is_active?: boolean | undefined;

    /** Restrict query to MFA factors created after this time. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Restrict query to MFA factors created before this time. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination, 1-indexed. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Sort field/direction (e.g. 'created_at:desc'). */
    sort?: string | undefined;
  };

  /**
   * Payload for creating a new multi-factor authentication (MFA) factor for a
   * user. Used by admin and onboarding APIs.
   */
  export type ICreate = {
    /** User to whom this MFA factor will be assigned. */
    user_id: string & tags.Format<"uuid">;

    /** User/actor type for MFA context (systemadmin, orgadmin, etc.). */
    user_type: string;

    /**
     * Type of MFA factor, must be one of supported system values (e.g.,
     * totp, sms, email, webauthn, backup).
     */
    factor_type: string;

    /**
     * MFA secret, hash, or registration detail (encoded/encrypted as per
     * factor type).
     */
    factor_value: string;

    /** Sort order for MFA challenge; 0=primary. */
    priority: number & tags.Type<"int32">;

    /** Whether MFA is enabled upon creation. */
    is_active: boolean;
  };

  /**
   * Update fields for a user MFA factor
   * (healthcare_platform_user_mfa_factors).
   *
   * Allows partial changes to type, value, priority, activation, or audit
   * fields; other properties immutable.
   */
  export type IUpdate = {
    /**
     * Type of MFA factor (e.g., totp, sms, email, webauthn, backup).
     * Optional update.
     */
    factor_type?: string | undefined;

    /** Encoded value or key for MFA factor. Optional update. */
    factor_value?: string | undefined;

    /**
     * Sort priority/order for MFA challenge (lower is higher priority).
     * Optional update.
     */
    priority?: (number & tags.Type<"int32">) | undefined;

    /** Indicate if this factor is enabled for challenge. Optional update. */
    is_active?: boolean | undefined;

    /** Last modification time (ISO8601). Optional, system generated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
