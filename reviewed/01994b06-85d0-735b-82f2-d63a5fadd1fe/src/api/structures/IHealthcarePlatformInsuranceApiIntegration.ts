import { tags } from "typia";

/**
 * Insurance API integration connector entity â€” details for organization-payer
 * connection and supported transaction types, with audit and status fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformInsuranceApiIntegration = {
  /** Unique identifier for insurance API integration configuration. */
  id: string & tags.Format<"uuid">;

  /** Organization scope for this API connector. */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /** Insurance payer or clearinghouse code (e.g. UHC, Aetna, etc). */
  insurance_vendor_code: string;

  /** API endpoint for insurance eligibility/claim submissions. */
  connection_uri: string;

  /**
   * Comma-separated supported transaction types for this connector (e.g.
   * eligibility,claims,realtime).
   */
  supported_transaction_types: string;

  /** Integration status (active, test, failed, etc). */
  status: string;

  /** Record/entity creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp (null = active). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformInsuranceApiIntegration {
  /**
   * Search/filter for insurance API integration connectors, accepting paging,
   * sort, org, vendor code, status, and supported transaction types.
   */
  export type IRequest = {
    /**
     * Organization UUID. Optional filter to restrict to a particular
     * organization.
     */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /** Insurance company/payer code (e.g. Aetna, UHC, etc). */
    insurance_vendor_code?: string | undefined;

    /** Status filter (e.g. 'active', 'test', 'failed'). */
    status?: string | undefined;

    /**
     * Comma-separated transaction types supported by the integration (e.g.
     * 'eligibility,claims').
     */
    supported_transaction_types?: string | undefined;

    /** Pagination: results page (starts at 1). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: number of results per page. */
    page_size?: (number & tags.Type<"int32">) | undefined;

    /** Sort field (e.g., 'created_at DESC'). */
    sort?: string | undefined;
  };

  /**
   * Schema for creating a new insurance API integration configuration for an
   * organization. All fields are required.
   */
  export type ICreate = {
    /**
     * The unique organization to which this integration applies. Must be a
     * valid UUID.
     */
    organization_id: string & tags.Format<"uuid">;

    /**
     * Insurance payer or clearinghouse code (e.g., 'UHC', 'Aetna',
     * 'Humana').
     */
    insurance_vendor_code: string;

    /** API endpoint for real-time eligibility or claim submission. */
    connection_uri: string;

    /** Comma-separated types (e.g., 'eligibility,claims,realtime'). */
    supported_transaction_types: string;

    /** Connector status, such as 'active','test','failed'. */
    status: string;
  };

  /**
   * Update schema for insurance API integration. Partial updates supported.
   * All fields optional.
   */
  export type IUpdate = {
    /**
     * Insurance payer or clearinghouse code (e.g., 'UHC', 'Aetna',
     * 'Humana').
     */
    insurance_vendor_code?: string | undefined;

    /** API endpoint for real-time eligibility or claim submission. */
    connection_uri?: string | undefined;

    /** Comma-separated types (e.g., 'eligibility,claims,realtime'). */
    supported_transaction_types?: string | undefined;

    /** Connector status, such as 'active','test','failed'. */
    status?: string | undefined;
  };
}
