import { tags } from "typia";

/**
 * Detailed appointment entity representing a scheduled event between
 * provider(s) and patient in the healthcarePlatform. This type maps directly to
 * the `healthcare_platform_appointments` table in the schema.
 *
 * Includes all business, clinical, and scheduling fields including links to
 * organization, department, provider/user assignment, patient, status,
 * resource/room, start/end time, and associated metadata. The schedule window
 * (start_time to end_time) uses strict ISO8601 UTC format. Soft deletion is
 * exposed via nullable `deleted_at` property for compliance and audit
 * boundaries.
 *
 * Relationships to patient, provider, status and resources are always
 * represented by unique system UUID identifiers; all such relationships must be
 * externally validated on write workflows. Appointment recurrence and notes
 * fields (optional) support advanced scheduling logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformAppointment = {
  /** Unique identifier of the appointment event as a system UUID. */
  id: string & tags.Format<"uuid">;

  /**
   * References the organization (tenant) where this appointment event is
   * scheduled.
   */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /**
   * Optional department within the organization; may be null for org-level
   * bookings.
   */
  healthcare_platform_department_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * UUID of the provider's user assignment (must be valid provider in
   * platform).
   */
  provider_id: string & tags.Format<"uuid">;

  /** UUID of the patient assigned to this appointment. */
  patient_id: string & tags.Format<"uuid">;

  /**
   * References appointment status configuration (scheduled, confirmed,
   * cancelled, etc.).
   */
  status_id: string & tags.Format<"uuid">;

  /** Optional reference to the reserved room for this appointment. */
  room_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Optional reference to reserved equipment for this appointment. */
  equipment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of appointment; e.g. 'in-person', 'telemedicine', or other
   * business-supported types.
   */
  appointment_type: string;

  /** Start time (inclusive) in ISO 8601 UTC. */
  start_time: string & tags.Format<"date-time">;

  /** End time (exclusive) in ISO 8601 UTC. */
  end_time: string & tags.Format<"date-time">;

  /**
   * Optional human-readable title for the appointment. Used for display in
   * user/staff calendar UI.
   */
  title?: string | null | undefined;

  /**
   * Optional additional instructions, pre-visit notes, or context for
   * encounter, visible to staff/patient.
   */
  description?: string | null | undefined;

  /**
   * Optional recurrence rule string in RFC 5545 (e.g., RRULE:... syntax) for
   * recurring appointment series.
   */
  recurrence_rule?: string | null | undefined;

  /** Timestamp of appointment event creation in ISO 8601 UTC. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update for this appointment in ISO 8601 UTC. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion (archival) marker. Null if active; non-null if appointment
   * is archived for compliance, not available to active UI/workflow.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformAppointment {
  /**
   * Request body schema for searching, filtering, and paginating
   * appointments. Used in staff, patient, and admin portals for robust
   * scheduling workflows. All filters are optional; query may combine zero or
   * more for complex search scenarios. Ownership or acting user identity is
   * never set by client in requests.
   */
  export type IRequest = {
    /**
     * Filter appointments by assigned provider (user_org_assignment.id).
     * Only permitted in filter/search by users with RBAC assignment to view
     * provider-level data; NEVER accepted for creation or acting user
     * assignment.
     */
    provider_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appointments by patient reference. Used to search appointments
     * by patient, not to assign patient ownership in requests.
     */
    patient_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by appointment status (scheduled, cancelled, confirmed, etc;
     * foreign key to status table).
     */
    status_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of appointment (in-person, telemedicine), as defined by
     * appointment record.
     */
    appointment_type?: string | undefined;

    /** Lower bound for start_time, filtered in ISO 8601 format. */
    start_time_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for start_time (ISO 8601). */
    start_time_to?: (string & tags.Format<"date-time">) | undefined;

    /** Lower bound for end_time filter window. */
    end_time_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for end_time filter window. */
    end_time_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Limit to appointments in the given organization (platform
     * admin/superuser only context for cross-org or system use).
     */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter to appointments in a specific department (for org/department
     * admin role usage).
     */
    department_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appointments by assigned room if applicable (resource
     * registry/room assignment).
     */
    room_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appointments by equipment usage, if scheduled for
     * diagnostic/support resources.
     */
    equipment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Sort field and order specifier (e.g., 'start_time:desc',
     * 'status_id:asc').
     */
    sort?: string | undefined;

    /** Page number for paginated results. Must be >= 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Page size for paginated results (optional, platform default enforced
     * if omitted).
     */
    page_size?: (number & tags.Type<"int32">) | undefined;

    /**
     * Free-text search keyword for appointment title, notes, or participant
     * info for discovery/analytics use.
     */
    keyword?: string | undefined;
  };

  /**
   * Request body for creating a new appointment in the healthcarePlatform.
   * All required business and scheduling fields directly correspond to the
   * healthcare_platform_appointments model. Entity references (organization,
   * department, provider, patient, status, resources) all use UUID string
   * identifiers.
   *
   * Optional fields for department, room, equipment, title, description, and
   * recurrence_rule are allowed to supply additional display or scheduling
   * details as defined by the business logic. All datetime fields use ISO
   * 8601 UTC format. Recurrence_rule is optional and adheres to RFC 5545
   * syntax for recurring events.
   */
  export type ICreate = {
    /** The target organization (tenant) for the new appointment. */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Optional department/context for the appointmentâ€”null if not
     * department-scoped.
     */
    healthcare_platform_department_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** UUID of the provider assigned for the appointment. */
    provider_id: string & tags.Format<"uuid">;

    /** Patient assigned to this appointment. */
    patient_id: string & tags.Format<"uuid">;

    /**
     * Status for the appointment as configured in platform scheduling (e.g.
     * scheduled, confirmed, no-show, etc).
     */
    status_id: string & tags.Format<"uuid">;

    /** Optional room resource identifier for the appointment, else null. */
    room_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional equipment allocation for this appointment, else null. */
    equipment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of appointment. Business rules may check for valid
     * platform-supported types (e.g., 'in-person', 'telemedicine', custom
     * defined per org).
     */
    appointment_type: string;

    /** Start time (inclusive) in ISO 8601 UTC. */
    start_time: string & tags.Format<"date-time">;

    /** End time (exclusive) in ISO 8601 UTC. */
    end_time: string & tags.Format<"date-time">;

    /** Optional appointment title for display purposes. */
    title?: string | null | undefined;

    /** Optional additional notes/description/context for staff/patient. */
    description?: string | null | undefined;

    /**
     * Optional recurrence rule, using RFC 5545 RRULE syntax for recurring
     * series.
     */
    recurrence_rule?: string | null | undefined;
  };

  /**
   * Request body for updating an existing appointment. This partial-update
   * structure supports patching any mutable field of a
   * healthcare_platform_appointments record.
   *
   * Fields not supplied are left unchanged. UUID references, start/end times,
   * and business fields must meet validation/range requirements as per
   * creation. All optional fields (null if not being updated).
   */
  export type IUpdate = {
    /**
     * Updated organization context for the appointment if moving the
     * booking.
     */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /**
     * Department context for appointment, updated if departmental shift
     * required.
     */
    healthcare_platform_department_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Update to newly assigned provider for the appointment. */
    provider_id?: (string & tags.Format<"uuid">) | undefined;

    /** Update target patient for appointment. */
    patient_id?: (string & tags.Format<"uuid">) | undefined;

    /** Change appointment status, such as to confirmed, cancelled, etc. */
    status_id?: (string & tags.Format<"uuid">) | undefined;

    /** Modify assigned room, or null to remove room assignment. */
    room_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Modify assigned equipment, or null to remove equipment assignment. */
    equipment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Change type (in-person/telemedicine/custom) for the appointment. */
    appointment_type?: string | undefined;

    /** Reschedule start time for this event. */
    start_time?: (string & tags.Format<"date-time">) | undefined;

    /** Reschedule end time for this event. */
    end_time?: (string & tags.Format<"date-time">) | undefined;

    /** Edit appointment title or remove by setting null. */
    title?: string | null | undefined;

    /** Modify or clear appointment description/context. */
    description?: string | null | undefined;

    /** Edit recurrence rule; null to remove. */
    recurrence_rule?: string | null | undefined;
  };

  /**
   * Summary schema definition for an appointment record in the
   * HealthcarePlatform scheduling table.
   *
   * Optimized for list/calendar displays, analytics, and secure cross-user
   * handoff. Field descriptions map to and clarify the related Prisma schema
   * columns in business-focused, compliance-ready English.
   *
   * Optional fields included (title, description, department ID), with all
   * required properties clearly outlined for regulatory validation and safe
   * scheduling workflows.
   */
  export type ISummary = {
    /**
     * Appointment record unique identifier. Used for lookups, scheduling
     * logic, and calendar integration.
     *
     * @prisma: id String @id
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of owning organization for this appointment (used for tenant
     * isolation and analytics).
     *
     * @prisma: healthcare_platform_organization_id String @db.Uuid
     */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Optional department to which this appointment is assigned. Used for
     * internal routing, analytics, and access separation.
     *
     * @prisma: healthcare_platform_department_id String? @db.Uuid
     */
    healthcare_platform_department_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Unique identifier for the provider assigned (doctor, PA, staff).
     *
     * @prisma: provider_id String @db.Uuid
     */
    provider_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the patient scheduled for the appointment.
     *
     * @prisma: patient_id String @db.Uuid
     */
    patient_id: string & tags.Format<"uuid">;

    /**
     * Status identifier referencing workflow status in appointment status
     * table (e.g., scheduled, completed, cancelled).
     *
     * @prisma: status_id String @db.Uuid
     */
    status_id: string & tags.Format<"uuid">;

    /**
     * Appointment start datetime (ISO8601, timezone inclusive).
     *
     * @prisma: start_time DateTime @db.Timestamptz
     */
    start_time: string & tags.Format<"date-time">;

    /**
     * Appointment end datetime. Required for scheduling, analytics, and
     * compliance.
     *
     * @prisma: end_time DateTime @db.Timestamptz
     */
    end_time: string & tags.Format<"date-time">;

    /**
     * Type of appointment (e.g., in-person, telemedicine, followup).
     *
     * @prisma: appointment_type String
     */
    appointment_type: string;

    /**
     * Appointment display title (optional; provided for calendar/list UI
     * use). Typically clinician, location, or service summary.
     *
     * @prisma: title String?
     */
    title?: string | null | undefined;

    /**
     * Optional free-text notes/description for this appointment
     * (instructions, requests, etc).
     *
     * @prisma: description String?
     */
    description?: string | null | undefined;
  };
}
