import { tags } from "typia";

/**
 * Full record schema for a clinical medical image. Returned by detailed
 * operations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformMedicalImage = {
  /** Unique identifier of the medical image record. */
  id: string & tags.Format<"uuid">;

  /** Parent EHR encounter to which the image is attached. */
  ehr_encounter_id: string & tags.Format<"uuid">;

  /** ID of the technician who uploaded the image. */
  uploaded_by_user_id: string & tags.Format<"uuid">;

  /** Classification of the image (e.g., DICOM, JPEG, PNG). */
  image_type: string;

  /** Permanent or presigned URI for the clinical image file. */
  image_uri: string;

  /** (Optional) Technical metadata (e.g., DICOM tags, study/series info). */
  image_metadata_json?: string | null | undefined;

  /** Timestamp when image record was created. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformMedicalImage {
  /**
   * Paginated, filterable request type for searching medical images related
   * to a patient record. Mapped from healthcare_platform_medical_images and
   * supports role/department scoping.
   */
  export type IRequest = {
    /** UUID referencing patient record. Optional filter. */
    patient_record_id?: string | undefined;

    /** UUID referencing EHR encounter. Optional filter. */
    ehr_encounter_id?: string | undefined;

    /** Image (file) type: DICOM, JPEG, PNG, etc. Optional filter. */
    image_type?: string | undefined;

    /** UUID of image uploader (technician). Optional filter. */
    uploaded_by_user_id?: string | undefined;

    /** Filter by image creation date, start range (ISO 8601). */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by image creation end date (ISO 8601). */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Sort order string (e.g., 'created_at DESC'). Optional. */
    sort?: string | undefined;

    /** Page number (pagination). Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Page size (pagination). Optional. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Request payload schema for uploading and linking a new medical image to
   * an EHR encounter. Used by technicians (or clinical staff) to persist
   * newly acquired or imported clinical images. All fields except
   * image_metadata_json are required. image_metadata_json is optional for
   * extended technical metadata.
   */
  export type ICreate = {
    /**
     * UUID for the parent EHR encounter to which this image will be
     * attached.
     */
    ehr_encounter_id: string & tags.Format<"uuid">;

    /** UUID for the technician uploading the image. */
    uploaded_by_user_id: string & tags.Format<"uuid">;

    /** Type of image (e.g., 'DICOM', 'JPEG', 'PNG'). */
    image_type: string;

    /** Permanent/presigned URI of the uploaded image file. */
    image_uri: string;

    /**
     * (Optional) Stringified metadata such as DICOM tags, acquisition
     * parameters, or study/series information.
     */
    image_metadata_json?: string | null | undefined;
  };

  /**
   * Schema for patch/update of a medical image's metadata after the initial
   * upload (not the file itself). All fields are optional. Used in workflows
   * for technical correction, reclassification, or completion of missing
   * metadata. Only metadata fields are editable; image_uri and uploader
   * cannot be changed.
   */
  export type IUpdate = {
    /**
     * Type of image for classification/correction (e.g., 'DICOM', 'JPEG',
     * etc.).
     */
    image_type?: string | undefined;

    /**
     * Updated stringified metadata such as DICOM tags, series, or encoding
     * details.
     */
    image_metadata_json?: string | null | undefined;
  };

  /**
   * Summary/digest schema for medical image list results or paginated
   * containers. Contains only safe fields for list or dashboard display.
   */
  export type ISummary = {
    /** Unique identifier of the medical image. */
    id: string & tags.Format<"uuid">;

    /** EHR encounter context for this image. */
    ehr_encounter_id: string & tags.Format<"uuid">;

    /** Uploaderâ€™s user/actor ID. */
    uploaded_by_user_id: string & tags.Format<"uuid">;

    /** Short code or label for the image type (e.g., DICOM, JPEG, etc.). */
    image_type: string;

    /** Medical image upload timestamp. */
    created_at: string & tags.Format<"date-time">;
  };
}
