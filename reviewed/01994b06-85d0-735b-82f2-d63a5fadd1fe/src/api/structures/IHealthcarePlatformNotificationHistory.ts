import { tags } from "typia";

/**
 * Represents a single notification delivery history record for audit, delivery
 * status tracking, and SLA/incident analysis. (Schema from
 * healthcare_platform_notification_history table.)
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformNotificationHistory = {
  /**
   * Unique identifier for the notification history event, as found in the
   * healthcare_platform_notification_history table.
   */
  id: string & tags.Format<"uuid">;

  /** ID of the parent notification event this history record belongs to. */
  notification_id: string & tags.Format<"uuid">;

  /**
   * Describes the type of history event (e.g., delivered, failed,
   * acknowledged, snoozed, escalated, retried, etc.).
   */
  event_type: string;

  /**
   * Timestamp for when the delivery attempt or status event was recorded. ISO
   * 8601 format.
   */
  event_time: string & tags.Format<"date-time">;

  /**
   * Delivery channel via which the notification/event was attempted (e.g.,
   * email, sms, in_app, push, phone_call, postal, fax).
   */
  delivery_channel: string;

  /**
   * Delivery status at the time of the event (e.g., sent, failed,
   * acknowledged, snoozed, escalated, delivered).
   */
  delivery_status: string;

  /**
   * Extended information or failure message, such as error text or user agent
   * involved in the attempt. May contain payload snapshot or operational
   * info.
   */
  details?: string | undefined;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformNotificationHistory {
  /**
   * Search and filtering options for retrieving notification delivery history
   * records.
   *
   * - All fields are optional, and when provided, each is used as a filter or
   *   window.
   * - Used for operational review, compliance, audit, and troubleshooting of
   *   notification delivery flows.
   */
  export type IRequest = {
    /** Filter by parent notification unique identifier (uuid, optional). */
    notificationId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by event type (delivered, failed, retried, acknowledged,
     * snoozed, bounced, escalated, etc.), optional.
     */
    eventType?: string | undefined;

    /** Filter by delivery status after this event, optional. */
    deliveryStatus?: string | undefined;

    /**
     * Filter by delivery channel (email, sms, in_app, push, etc.),
     * optional.
     */
    deliveryChannel?: string | undefined;

    /** Start of event time window (ISO 8601 date-time, optional). */
    eventTimeFrom?: (string & tags.Format<"date-time">) | undefined;

    /** End of event time window (ISO 8601 date-time, optional). */
    eventTimeTo?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by recipient user or staff id (uuid, optional). */
    recipientId?: (string & tags.Format<"uuid">) | undefined;

    /** Page number for pagination (optional, default is 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page (optional, default is 50). */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /** Field to sort results by (optional). */
    sortField?: string | undefined;

    /** 'asc' or 'desc' for result sorting order (optional). */
    sortOrder?: "asc" | "desc" | undefined;
  };

  /**
   * Summary view of notification delivery history record. Used for page-list
   * response types and auditing UIs, omitting large detail/info fields.
   */
  export type ISummary = {
    /** History event ID. */
    id: string & tags.Format<"uuid">;

    /** Parent notification ID. */
    notification_id: string & tags.Format<"uuid">;

    /** Event type for the notification history. */
    event_type: string;

    /** Timestamp of the event. */
    event_time: string & tags.Format<"date-time">;

    /** Notification delivery channel. */
    delivery_channel: string;

    /** Delivery status at event time. */
    delivery_status: string;
  };
}
