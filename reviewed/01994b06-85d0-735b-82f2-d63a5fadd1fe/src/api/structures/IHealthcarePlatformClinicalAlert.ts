import { tags } from "typia";

/**
 * Clinical alert record generated from decision support rules, audit/compliance
 * workflows, or operational events. Contains metadata, status, workflow
 * tracking, actor assignments, and full audit trail context. Alerts are scoped
 * to tenants and departments for strict RBAC and compliance purposes. Fields
 * are designed for security, analytics, and regulatory reporting as required by
 * HIPAA and safety standards.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformClinicalAlert = {
  /**
   * Unique identifier for the clinical alert record. This acts as the primary
   * key in the database and is critical for audit log traceability and
   * referencing the alert in workflow escalation and analytics operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the clinical decision support rule that
   * triggered this alert. Indicates the specific rule logic and configuration
   * responsible for generating the alert event.
   */
  decision_support_rule_id: string & tags.Format<"uuid">;

  /**
   * Optional user ID for the actor who triggered the alert, if applicable
   * (nullable). Used for individual audit trails, direct assignment, or
   * tracking provider/escalation workflows. May be null for system-generated
   * alerts.
   */
  triggered_by_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID identifying the organization responsible for this clinical alert.
   * Used for multi-tenant data partitioning and compliance scope.
   */
  organization_id: string & tags.Format<"uuid">;

  /**
   * Nullable department UUID that further scopes the alert to a department
   * within an organization (for departmental analytics, compliance, or role
   * partitioning).
   */
  department_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type or classification of the alert (e.g., warning, error,
   * recommendation, info, compliance). Supports workflow branching, display,
   * and severity prioritization.
   */
  alert_type: string;

  /**
   * Short summary describing the entity, event, or workflow context for this
   * alert (e.g., "Critical Lab Value", "Expiring Medication", etc). This
   * field powers list views, dashboards, and targeted filtering for staff
   * roles.
   */
  subject_summary: string;

  /**
   * (Nullable) Detailed description or content of the alert. Can contain
   * structured/narrative content, rationale, clinical guidelines, or
   * escalation information. This may be omitted for alerts with minimal
   * detail.
   */
  detail?: string | null | undefined;

  /**
   * Workflow status of the alert (e.g., new, viewed, acknowledged, resolved,
   * escalated, closed), supporting compliance and audit trail state
   * transitions. Used for task management and alert lifecycle tracking.
   */
  status: string;

  /**
   * Optional date-time timestamp representing acknowledgement time by a user
   * (or automated process). Used for compliance review and time-to-action
   * analytics.
   */
  acknowledged_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Optional date-time timestamp representing when the alert was resolved or
   * closed. Drives metrics for alert closure and regulatory compliance.
   */
  resolved_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp of the alert record in ISO 8601 format. Used for
   * audit, trend analytics, and alert timeline displays.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp of the alert record. Critical for tracking workflow
   * progress, compliance reviews, or escalations.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Date-time when the alert was soft deleted, or null if active. Used for
   * compliance retention and audit cleanup logic.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformClinicalAlert {
  /**
   * Request object for searching or filtering paginated clinical alerts in
   * the CDS alert table. Supports RBAC filters, department/org context,
   * trigger rule narrowing, status and time window combing, public/privacy
   * limiting, and pagination controls necessary for real-time dashboard and
   * compliance reporting.
   */
  export type IRequest = {
    /**
     * Restrict alert search to a specific organization. Used for
     * RBAC/org-scoped dashboards. Optional.
     */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter to a specific department context, if only changing or
     * reviewing within one clinical domain. Optional.
     */
    department_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter to clinical alerts triggered by a specific decision support
     * rule id. Useful for reviewing rule efficacy or incident rates.
     * Optional.
     */
    decision_support_rule_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Business/clinical category of alert – such as 'warning', 'error',
     * 'recommendation', etc. Used to filter alert types for risk review or
     * severity dashboards. Optional.
     */
    alert_type?: string | undefined;

    /**
     * Partial text search across alert summary/subject lines. Use for rapid
     * filtering/triage. Optional.
     */
    subject_summary?: string | undefined;

    /**
     * Workflow state — e.g., 'new', 'viewed', 'acknowledged', 'resolved',
     * 'escalated'. Used to filter action-state, open incident dashboards,
     * or measure responsiveness. Optional.
     */
    status?: string | undefined;

    /**
     * ISO 8601 datetime (UTC) – only return alerts created or occurring
     * after this timestamp. Supports time-window analysis, incident review,
     * or compliance sampling. Optional.
     */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 datetime (UTC) – only return alerts created before (or up
     * to) this timestamp, allowing open/closed window business analytics.
     * Optional.
     */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If true, return only org- or department-public alerts (vs those
     * restricted to role/assignment/audit users). Used for public dashboard
     * workflows. Optional.
     */
    is_public?: boolean | undefined;

    /**
     * Page number for pagination (1-based). Required for paginated UI
     * search. Optional; default is 1.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Max results per page (pagination). Optional; defaults based on
     * platform configuration, usually 50 or 100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort ordering key (created_at, status, alert_type, etc.). Optional,
     * supports UI dashboard consistency and reporting sorting.
     */
    sort?: string | undefined;
  };

  /**
   * Request DTO for updating a clinical alert record. All properties are
   * optional; setting properties triggers workflow propagation across status,
   * detail, and audit fields as permitted by compliance policy.
   */
  export type IUpdate = {
    /**
     * Workflow status of the alert after modification (e.g., acknowledged,
     * resolved, escalated). Force workflow propagation in compliance, task
     * management, or operational dashboards.
     */
    status?: string | undefined;

    /**
     * Updated or added detailed information for the alert, supporting
     * compliance annotation, workflow rationales, or corrective action
     * notes.
     */
    detail?: string | undefined;

    /**
     * (Nullable) New acknowledgement timestamp if the alert is being
     * acknowledged in this update event. Used for compliance event time
     * tracking.
     */
    acknowledged_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * (Nullable) New resolve/closure timestamp if the alert is being
     * completed by this update. Enables measurement of time-to-close and
     * compliance calculations.
     */
    resolved_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
