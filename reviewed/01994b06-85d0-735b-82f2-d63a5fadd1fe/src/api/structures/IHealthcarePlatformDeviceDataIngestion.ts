import { tags } from "typia";

/**
 * Device data ingestion connector record as stored in the system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformDeviceDataIngestion = {
  /** Unique identifier. */
  id: string & tags.Format<"uuid">;

  /** Owning organization UUID. */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /** Ingested device/system type (e.g., 'vital_monitor', 'ecg'). */
  device_type: string;

  /** Device data endpoint URI. */
  ingest_endpoint_uri: string;

  /** Communication protocol (e.g., 'HL7','FHIR','custom'). */
  supported_protocol: string;

  /** Current operational status (e.g., 'ready','pending','error'). */
  status: string;

  /** Creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp (ISO 8601 or null). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformDeviceDataIngestion {
  /**
   * Request structure for paginated/search queries of device data ingestion
   * integrations for listing, filtering, and dashboard/operations support.
   */
  export type IRequest = {
    /** Optional filter for organization context (UUID). */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** Optional filter for device type/category. */
    device_type?: string | undefined;

    /** Optional filter for supported device integration protocol. */
    supported_protocol?: string | undefined;

    /**
     * Optional operational status filter (e.g., 'ready', 'pending',
     * 'error').
     */
    status?: string | undefined;

    /** Page number for pagination (starting at 1). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Desired number of records per page. */
    page_size?: (number & tags.Type<"int32">) | undefined;

    /** Sort order (e.g., 'created_at desc'). */
    sort?: string | undefined;
  };

  /**
   * Request structure for creating a new healthcare platform device data
   * ingestion configuration. Defines the core endpoint and integration
   * metadata required to register a new device stream for a healthcare
   * organization. This enables secure, compliant ingestion of clinical or
   * technical data from external devices or systems.
   */
  export type ICreate = {
    /**
     * UUID of the organization to which this device ingestion configuration
     * belongs. Must reference a valid organization in the system.
     */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Type or category of device being ingested (e.g., 'vital_monitor',
     * 'ecg', 'infusion_pump'). Use names as per organizational policy.
     */
    device_type: string;

    /**
     * The secure URI for the medical device data ingestion endpoint. Must
     * be a valid URI (TCP, HTTPS, MQTT, etc.) and conform to platform
     * security policy.
     */
    ingest_endpoint_uri: string;

    /**
     * Protocol used for ingestion (e.g., 'HL7', 'FHIR', 'MQTT', 'custom').
     * Must be recognized by the ingestion system.
     */
    supported_protocol: string;

    /**
     * Current status of the ingestion endpoint (e.g., 'ready', 'pending',
     * 'error').
     */
    status: string;
  };

  /**
   * Update structure for modifying an existing device data ingestion record.
   * Allows for partial updates (PATCH semantics) to operational state or
   * connectivity for a device endpoint. All changes are tracked for
   * compliance and must respect org/integration policies.
   */
  export type IUpdate = {
    /**
     * (Optional) Update device type/category (e.g., 'ecg',
     * 'vital_monitor'). Must conform to org/device master list.
     */
    device_type?: string | undefined;

    /**
     * (Optional) Update the endpoint URI for data ingestion. Must be a
     * valid, reachable URI.
     */
    ingest_endpoint_uri?: string | undefined;

    /**
     * (Optional) Update protocol for ingestion (e.g., 'HL7', 'FHIR'). Only
     * permitted values allowed per system configuration.
     */
    supported_protocol?: string | undefined;

    /**
     * (Optional) Update the status of the ingestion endpoint (e.g., to
     * 'ready', 'error').
     */
    status?: string | undefined;

    /**
     * Optional. ISO date-time to soft delete the configuration, or null to
     * reactivate.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary representation of a device data ingestion integration for
   * paged/index/search views. Includes only the most critical identification,
   * operational, and status fields.
   */
  export type ISummary = {
    /** Unique identifier. */
    id: string & tags.Format<"uuid">;

    /**
     * Type/category of device being ingested (e.g., 'vital_monitor',
     * 'ecg').
     */
    device_type: string;

    /** Device data endpoint URI. */
    ingest_endpoint_uri: string;

    /** Communication protocol (e.g., 'HL7','FHIR','custom'). */
    supported_protocol: string;

    /** Current operational status (e.g., 'ready','pending','error'). */
    status: string;

    /** Creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Last update timestamp. */
    updated_at: string & tags.Format<"date-time">;
  };
}
