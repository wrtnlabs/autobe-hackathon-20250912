import { tags } from "typia";

/**
 * Insurance policy entity record with all required database fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformInsurancePolicy = {
  /** Primary Key (UUID). */
  id: string & tags.Format<"uuid">;

  /** Policyholder (patient/user) entity. */
  patient_id: string & tags.Format<"uuid">;

  /** Owning organization for this policy. */
  organization_id: string & tags.Format<"uuid">;

  /** Policy number, as provided by payer. */
  policy_number: string;

  /** Insurance company/payer name (Aetna, BlueCross, etc). */
  payer_name: string;

  /** Payer group/panel number. */
  group_number?: string | null | undefined;

  /** Coverage effective date (YYYY-MM-DD). */
  coverage_start_date: string & tags.Format<"date">;

  /** Coverage end/expiration date (YYYY-MM-DD), null if active. */
  coverage_end_date?: (string & tags.Format<"date">) | null | undefined;

  /**
   * Type/kind of insurance: commercial, medicare, medicaid, self-pay,
   * worker_comp, auto, etc.
   */
  plan_type: string;

  /** Status of the policy: active, inactive, expired, pending verification. */
  policy_status: string;

  /** Creation timestamp (ISO8601 date-time). */
  created_at: string & tags.Format<"date-time">;

  /** Most recent update. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion field; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformInsurancePolicy {
  /** Search and filter for insurance policies, with pagination. */
  export type IRequest = {
    /** Search by policy number (full or partial). */
    policy_number?: string | undefined;

    /** Filter by payer name (full or partial). */
    payer_name?: string | undefined;

    /** Patient user reference (UUID). */
    patient_id?: string | undefined;

    /** Organization reference (UUID). */
    organization_id?: string | undefined;

    /** Policy status: active, expired, pending, etc. */
    policy_status?: string | undefined;

    /** Filter by plan type: commercial, medicare, self-pay, medicaid, etc. */
    plan_type?: string | undefined;

    /** Filter: coverage start date on/after (YYYY-MM-DD). */
    coverage_start_from?: (string & tags.Format<"date">) | undefined;

    /** Filter: coverage start date on/before (YYYY-MM-DD). */
    coverage_start_to?: (string & tags.Format<"date">) | undefined;

    /** Filter: coverage end date on/after (YYYY-MM-DD). */
    coverage_end_from?: (string & tags.Format<"date">) | undefined;

    /** Filter: coverage end date on/before (YYYY-MM-DD). */
    coverage_end_to?: (string & tags.Format<"date">) | undefined;

    /** Paging: page number (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Paging: records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sort by field (e.g., created_at, policy_number, payer_name, status). */
    sort?: string | undefined;

    /** Sort order (asc or desc). */
    order?: "asc" | "desc" | undefined;
  };

  /** Request body payload for creating a new insurance policy record. */
  export type ICreate = {
    /** Policyholder (patient/user) entity (UUID). */
    patient_id: string & tags.Format<"uuid">;

    /**
     * Owning organization for this policy (UUID, required per tenancy
     * isolation).
     */
    organization_id: string & tags.Format<"uuid">;

    /** Policy number as provided by payer. */
    policy_number: string;

    /** Insurance company/payer name (Aetna, BlueCross, etc). */
    payer_name: string;

    /** Payer group/panel number (optional). */
    group_number?: string | null | undefined;

    /** Coverage effective date (YYYY-MM-DD). */
    coverage_start_date: string & tags.Format<"date">;

    /** Coverage end/expiration date (YYYY-MM-DD, may be null if active). */
    coverage_end_date?: (string & tags.Format<"date">) | null | undefined;

    /** Type of insurance: commercial, medicare, medicaid, self-pay, etc. */
    plan_type: string;

    /** Policy status: active, inactive, expired, pending verification. */
    policy_status: string;
  };

  /**
   * Update operation for insurance policy records. All fields optional, only
   * include those being changed.
   */
  export type IUpdate = {
    /**
     * External/business policy number as provided by payer/insurer.
     * Optional update.
     */
    policy_number?: string | undefined;

    /**
     * Insurance company/payer name (Aetna, BlueCross, etc). Optional
     * update.
     */
    payer_name?: string | undefined;

    /**
     * Payer group/panel number. Used for batch eligibility or claims where
     * applicable. Optional for update.
     */
    group_number?: string | null | undefined;

    /**
     * Coverage effective date. Business use for eligibility logic. ISO8601
     * string.
     */
    coverage_start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Coverage end/expiration date; null if still active as of record.
     * ISO8601 string or null.
     */
    coverage_end_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Type/kind of insurance (e.g., commercial, medicare, medicaid,
     * self-pay, worker_comp, auto, etc). Optional update.
     */
    plan_type?: string | undefined;

    /**
     * Status of the policy (e.g., active, inactive, expired, pending
     * verification). Optional update.
     */
    policy_status?: string | undefined;
  };
}
