import { tags } from "typia";

/**
 * A posted or recorded billing payment, linked to a billing invoice. Used in
 * audit, account management, and reconciliation. Contains payer, method,
 * status, audit windows, and all required metadata. Designed for financial
 * audit and regulatory workflows in healthcare billing contexts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformBillingPayment = {
  /** UUID primary key of the payment record. */
  id: string & tags.Format<"uuid">;

  /** UUID of the parent billing invoice. */
  invoice_id: string & tags.Format<"uuid">;

  /**
   * UUID of the user/entity paying the invoice, nullable if payment is by
   * insurance or non-record-linked actor.
   */
  payee_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** UUID of the payment method (e.g., credit card, insurance, etc). */
  payment_method_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Amount of the payment, to two decimal places, in invoice currency. */
  amount: number;

  /** Currency code in ISO 4217 format (e.g., USD, EUR, etc). */
  currency: string;

  /**
   * Bank/transaction/check/reference number for payment reconciliation, if
   * available.
   */
  reference_number?: string | null | undefined;

  /** When payment was received (ISO 8601). */
  payment_date: string & tags.Format<"date-time">;

  /** Free-text note or memo associated with payment. */
  memo?: string | null | undefined;

  /**
   * Current payment status. E.g.: 'posted', 'pending', 'voided', 'refunded',
   * etc.
   */
  status: string;

  /** ISO 8601 datetime when payment was created. */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 datetime for last payment record update. */
  updated_at: string & tags.Format<"date-time">;

  /** ISO 8601 datetime if payment was soft-deleted, null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformBillingPayment {
  /**
   * Filter/search request format for retrieving billing payment records. All
   * properties are optional and may be combined. Used by finance/billing
   * workflows to slice and page through payment history.
   */
  export type IRequest = {
    /**
     * Status values filter (array of status enums, e.g., 'posted',
     * 'pending', 'voided', etc.).
     */
    status?: string[] | undefined;

    /** Start and end ISO 8601 datetime range for payment_date filtering. */
    payment_date_range?:
      | ((string & tags.Format<"date-time">)[] &
          tags.MinItems<2> &
          tags.MaxItems<2>)
      | undefined;

    /** Minimum payment amount (inclusive) filter. */
    min_amount?: number | undefined;

    /** Maximum payment amount (inclusive) filter. */
    max_amount?: number | undefined;

    /** Filter by payment currency/currencies (e.g., 'USD', ['USD','EUR']). */
    currency?: string | string[] | undefined;

    /** Name, email, or identifier of payment actor (optional). */
    payee?: string | undefined;

    /** Limit number of returned records for pagination. */
    limit?: number | undefined;

    /** Pagination page number. */
    page?: number | undefined;

    /** Pagination offset (used for skip calculation). */
    offset?: number | undefined;
  };

  /**
   * Request body for creating a billing payment (posting or recording a
   * patient/insurer payment against an invoice). Required fields include
   * invoice_id, amount, currency, payment_date. All fields must align with
   * regulatory, financial audit, and capability requirements.
   */
  export type ICreate = {
    /** UUID of the billing invoice to which this payment is applied. */
    invoice_id: string & tags.Format<"uuid">;

    /**
     * UUID of paying user/entity; optional for insurer or non-record-linked
     * payer.
     */
    payee_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** UUID of the payment method (credit, insurance, check, etc.). */
    payment_method_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Payment amount (e.g., 120.00 for $120 USD). */
    amount: number;

    /** Currency code (ISO 4217: USD, EUR, etc.). */
    currency: string;

    /** Check, reference, or bank transaction number. */
    reference_number?: string | null | undefined;

    /**
     * ISO 8601 datetime when payment was made (recorded, received, or
     * posted).
     */
    payment_date: string & tags.Format<"date-time">;

    /** Free-text or context note for the payment. */
    memo?: string | null | undefined;

    /**
     * Initial payment status (posted, pending); business logic will update
     * as needed.
     */
    status?: string | undefined;
  };

  /**
   * Update payment record properties for an invoice payment event. Supports
   * updating amount, payment status, payment method, and memo for staff/admin
   * reconciliation.
   */
  export type IUpdate = {
    /** Amount paid/posted for the payment (must not exceed invoice total). */
    amount?: number | undefined;

    /**
     * Status of payment (e.g. posted, pending, voided, disputed, refunded,
     * etc. Business-controlled list).
     */
    status?: string | undefined;

    /** ID of the payment method used for this payment. */
    payment_method_id?: (string & tags.Format<"uuid">) | undefined;

    /** Any staff or patient-facing memo/comment for reconciliation. */
    memo?: string | undefined;

    /**
     * The date/time when payment was posted/updated; may be used for
     * backdating offline payments.
     */
    payment_date?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary information for a billing payment record for minimal listing in
   * invoices/payments context.
   */
  export type ISummary = {
    /** Unique identifier for the billing payment record. */
    id: string & tags.Format<"uuid">;

    /** Reference to the parent invoice for this payment. */
    invoice_id: string & tags.Format<"uuid">;

    /** Actual payment amount for this record. */
    amount: number;

    /** Current payment status (e.g., 'posted', 'pending', 'voided', etc). */
    status: string;

    /** Date and time when payment was made or recorded (ISO 8601 datetime). */
    payment_date: string & tags.Format<"date-time">;

    /** Three-letter currency code (e.g., 'USD').' */
    currency: string;

    /** Reference to payment method used (nullable if not applicable). */
    payment_method_id?: (string & tags.Format<"uuid">) | null | undefined;
  };
}
