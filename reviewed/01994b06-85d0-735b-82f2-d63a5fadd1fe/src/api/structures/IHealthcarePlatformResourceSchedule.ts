import { tags } from "typia";

/**
 * Represents a resource's scheduled available time window for appointments,
 * room/equipment booking, or provider scheduling in a multi-tenant SaaS
 * healthcare setting. Critical for managing resource allocation, preventing
 * double-booking, enforcing business policy, and supporting compliance
 * requirements in organizational calendars.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformResourceSchedule = {
  /**
   * Unique identifier for the resource schedule entry. Must be a valid UUID
   * string. Maps to the primary key in the
   * healthcare_platform_resource_schedules table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the owning organization. Enforces strict multi-tenant
   * resource boundary. Maps to healthcare_platform_organizations.id.
   */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /**
   * Type/category of resource (e.g., provider, room, equipment). Dictates how
   * scheduling/availability logic is enforced.
   */
  resource_type: string;

  /**
   * Polymorphic resource UUID. Points to the specific provider, room, or
   * equipment instance to be scheduled.
   */
  resource_id: string & tags.Format<"uuid">;

  /**
   * Start of the availability window in 24-hour or ISO8601 time format.
   * Example: '09:00' or '2024-06-20T09:00:00+09:00'. Required.
   */
  available_start_time: string;

  /**
   * End of the availability window in 24-hour or ISO8601 time format.
   * Example: '18:00' or '2024-06-20T18:00:00+09:00'. Required.
   */
  available_end_time: string;

  /**
   * Recurrence pattern for the schedule (iCal, JSON or custom). Example:
   * RRULE string. Nullable.
   */
  recurrence_pattern?: string | null | undefined;

  /**
   * Blackout (holiday, maintenance) dates as string or JSON. Example:
   * '["2025-07-04"]'. Nullable.
   */
  exception_dates?: string | null | undefined;

  /**
   * Creation timestamp in ISO 8601 format. UTC or timezone-aware. Set by the
   * system.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for schedule record in ISO 8601 format. Set by the
   * system.
   */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion timestamp if the record has been archived. Nullable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformResourceSchedule {
  /**
   * Request schema for searching/filtering resource schedules (working
   * hours/availability of providers, rooms, or equipment) in the healthcare
   * platform. Used for both system admin and organization admin advanced
   * queries across resource scheduling, with all fields as optional filters
   * (null or omitted for no filter on that field). Pagination, filtering, and
   * sorting are included for scalable multi-tenant search and reporting
   * workflows.
   */
  export type IRequest = {
    /**
     * Unique identifier of the organization to which the resource schedule
     * belongs. Useful for filtering schedules by organization in a
     * multi-tenant context.
     */
    organization_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The type/category of resource (e.g., provider, room, equipment). Used
     * for polymorphic filtering of different scheduled assets in the
     * healthcare platform.
     */
    resource_type?: string | null | undefined;

    /**
     * Unique identifier of the resource (provider, room, or equipment) for
     * which the schedule is defined. Allows fine-grained filtering by
     * specific asset.
     */
    resource_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Lower bound (inclusive) filter for the available resource start time.
     * Typically formatted as HH:mm (e.g., 09:00). Used to find schedules
     * starting after a certain time.
     */
    available_start_time_from?:
      | (string & tags.Format<"time">)
      | null
      | undefined;

    /**
     * Upper bound (inclusive) filter for the available resource start time.
     * Typically formatted as HH:mm (e.g., 18:00). Used to find schedules
     * starting before a certain time.
     */
    available_start_time_to?: (string & tags.Format<"time">) | null | undefined;

    /**
     * Lower bound (inclusive) filter for the available resource end time.
     * Typically formatted as HH:mm. Used for searching schedules ending
     * after a specific threshold.
     */
    available_end_time_from?: (string & tags.Format<"time">) | null | undefined;

    /**
     * Upper bound (inclusive) filter for the available resource end time.
     * Typically formatted as HH:mm. Used for searching schedules ending
     * before a specific threshold.
     */
    available_end_time_to?: (string & tags.Format<"time">) | null | undefined;

    /**
     * Filter for schedules matching a recurrence pattern specification
     * (iCal, JSON, CRON, or other expression depending on implementation).
     * Allows filtering regular/recurrent availabilities.
     */
    recurrence_pattern?: string | null | undefined;

    /**
     * Filter on blacklist/exception dates encoded as a string or JSON
     * array, identifying schedules that include (or avoid) given dates
     * (e.g., holidays, maintenance days).
     */
    exception_dates?: string | null | undefined;

    /**
     * Filter by status of the schedule entry (active, suspended, deleted,
     * etc.). Typically used in admin or operations dashboards.
     */
    status?: string | null | undefined;

    /**
     * Page number for paginated resource schedule search results. Defaults
     * to 1 if not provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of items to return per page in search results.
     * Defaults to 20, maximum of 1000.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>)
      | null
      | undefined;

    /**
     * Sorting order of results, e.g., 'available_start_time ASC',
     * 'resource_type DESC'. Follows the backend's accepted syntax for
     * complex sorting.
     */
    sort?: string | null | undefined;
  };

  /**
   * Payload for creating a new resource schedule. Specifies the organization,
   * resource, availability window, and optional recurrence/exception rules
   * for bookings.
   */
  export type ICreate = {
    /**
     * UUID referencing the owning organization for this resource schedule.
     * Required.
     */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Type/category of resource to be scheduled (provider, room,
     * equipment). Required.
     */
    resource_type: string;

    /**
     * Polymorphic UUID of the resource (provider, room, equipment, etc) to
     * be scheduled. Required.
     */
    resource_id: string & tags.Format<"uuid">;

    /**
     * Start time for the resource availability window (24-hour or ISO8601
     * time). Example: '09:00' or '2024-06-20T09:00:00+09:00'. Required.
     */
    available_start_time: string;

    /**
     * End time for the resource availability window (24-hour or ISO8601
     * time). Example: '18:00' or '2024-06-20T18:00:00+09:00'. Required.
     */
    available_end_time: string;

    /**
     * Recurrence rule for the schedule (RRULE string, JSON, or custom).
     * Optional; leave null if not recurring.
     */
    recurrence_pattern?: string | null | undefined;

    /**
     * Dates for holiday/maintenance/blackout (string or JSON array).
     * Optional; null if not specified.
     */
    exception_dates?: string | null | undefined;
  };

  /**
   * Payload for updating an existing resource schedule. All fields optional;
   * omitted fields remain unchanged. Use explicit null for properties to
   * remove or unset fields.
   */
  export type IUpdate = {
    /**
     * Type/category of resource. Optional; can update if changing the class
     * of scheduled resource.
     */
    resource_type?: string | undefined;

    /**
     * Polymorphic resource UUID. Optional; allows changing the scheduled
     * resource instance.
     */
    resource_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * New start time for the availability window (24-hour or ISO8601).
     * Optional for partial update.
     */
    available_start_time?: string | undefined;

    /**
     * New end time for the availability window (24-hour or ISO8601).
     * Optional for partial update.
     */
    available_end_time?: string | undefined;

    /**
     * Recurrence rule for the updated schedule; RRULE, JSON, or custom.
     * Null disables recurrence.
     */
    recurrence_pattern?: string | null | undefined;

    /**
     * Update for the blackout/exception dates, holiday/maintenance. Null
     * disables.
     */
    exception_dates?: string | null | undefined;

    /** If set, marks the record as deleted/archived (ISO8601 or null). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
