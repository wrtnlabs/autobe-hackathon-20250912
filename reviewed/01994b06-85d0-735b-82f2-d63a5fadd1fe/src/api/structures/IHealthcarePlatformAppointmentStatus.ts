import { tags } from "typia";

/**
 * Represents a possible status for appointments in the healthcare platform.
 * Used for workflow transitions, UI display, and filtering.
 *
 * Business rules: status_code must be unique, display_name is shown to users.
 * The business_status distinguishes active/closed states for logic. sort_order
 * defines sorting position.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformAppointmentStatus = {
  /**
   * Unique identifier for this appointment status. Must be a valid UUID as
   * per Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique status code for the appointment (e.g. scheduled, cancelled). Must
   * be unique in the appointment_statuses table.
   */
  status_code: string;

  /**
   * UI/business label for the status (e.g. 'Scheduled', 'Completed',
   * 'No-show').
   */
  display_name: string;

  /**
   * Workflow grouping for the status (optional). E.g. 'active', 'closed'. Can
   * be null.
   */
  business_status?: string | null | undefined;

  /** Integer order for business/UI sorting. Used to control display order. */
  sort_order: number & tags.Type<"int32">;
};
export namespace IHealthcarePlatformAppointmentStatus {
  /**
   * Search request schema for querying and paginating appointment status
   * codes/types. All properties are optional by default.
   */
  export type IRequest = {
    /**
     * Query on specific appointment status code (e.g. 'scheduled',
     * 'cancelled').
     */
    status_code?: string | undefined;

    /**
     * Partial or case-insensitive search on the display name (e.g.
     * 'Confirmed', 'No-show').
     */
    display_name?: string | undefined;

    /** Query on the business status grouping (e.g. 'active', 'closed'). */
    business_status?: string | undefined;

    /** Order to sort the status codes or for custom sorting operations. */
    sort_order?: (number & tags.Type<"int32">) | undefined;

    /** Page number for paginated results. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of records per page for pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Object used for creating a new appointment status. Only schema-defined
   * fields are present. status_code must be unique. display_name is
   * user-facing. business_status optional. sort_order required.
   */
  export type ICreate = {
    /** Unique status code for creation. Used in database and workflow logic. */
    status_code: string;

    /** Business/UI label for the appointment status. */
    display_name: string;

    /** Optional workflow grouping for the status. */
    business_status?: string | null | undefined;

    /** Order for UI/business logic sorting. */
    sort_order: number & tags.Type<"int32">;
  };

  /**
   * Update object for appointment statuses. Only updatable fields included -
   * display_name, business_status, sort_order. status_code and id are
   * immutable.
   */
  export type IUpdate = {
    /** Updated label for status (optional). */
    display_name?: string | undefined;

    /** Optional updated workflow grouping. */
    business_status?: string | null | undefined;

    /** Updated sorting order (optional). */
    sort_order?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary entry for appointment status for display in workflow and
   * configuration interfaces.
   */
  export type ISummary = {
    /** Unique identifier for the appointment status entity. */
    id: string & tags.Format<"uuid">;

    /**
     * Canonical code (system-unique) for this appointment status (e.g.
     * scheduled, confirmed, cancelled).
     */
    status_code: string;

    /** Human-readable label for appointment status. */
    display_name: string;

    /**
     * Workflow grouping or business status (e.g. active, closed). May be
     * null.
     */
    business_status?: string | null | undefined;

    /** Ordering value for UI/business logic (lower values sort first). */
    sort_order: number & tags.Type<"int32">;
  };
}
