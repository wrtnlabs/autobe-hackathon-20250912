import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLabResult } from "../../../../../../structures/IHealthcarePlatformLabResult";
import { IPageIHealthcarePlatformLabResult } from "../../../../../../structures/IPageIHealthcarePlatformLabResult";

/**
 * Search and retrieve paginated laboratory results for a specific encounter and
 * patient record.
 *
 * This API operation retrieves a filtered, paginated list of laboratory results
 * for a given patient record and related clinical encounter (visit, admission,
 * telemedicine, etc.), leveraging the healthcare_platform_lab_results table as
 * described in the Prisma schema. The user must specify both the
 * patientRecordId and encounterId in the path; both IDs are validated as UUIDs,
 * ensuring correct parent-child relationship and data isolation.
 *
 * The request body provides complex search parameters, allowing filtering by
 * test name, result flag (e.g., normal/abnormal/critical), result status
 * (pending, completed), and date/time range of the result, as well as lab
 * integration provider when applicable. Paginated responses include summary
 * fields suitable for list views and navigation to detailed records.
 *
 * Security and authorization checks ensure only properly scoped users are able
 * to view laboratory results for patients within organizations, departments, or
 * assignments as per RBAC definitions. Audit logging is executed for access,
 * and access is denied if the requestor lacks necessary permissions or patient
 * consent. The operation is suitable for dashboards, clinical review screens,
 * or audit purposes.
 *
 * @param props.connection
 * @param props.patientRecordId The unique identifier of the patient record for
 *   which to retrieve lab results
 * @param props.encounterId The unique identifier of the EHR encounter linked to
 *   the requested lab results
 * @param props.body Search criteria, pagination, and filter options for lab
 *   result retrieval
 * @path /healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/labResults
 * @accessor api.functional.healthcarePlatform.nurse.patientRecords.encounters.labResults.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the patient record for which to retrieve lab
     * results
     */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the EHR encounter linked to the requested
     * lab results
     */
    encounterId: string & tags.Format<"uuid">;

    /**
     * Search criteria, pagination, and filter options for lab result
     * retrieval
     */
    body: IHealthcarePlatformLabResult.IRequest;
  };
  export type Body = IHealthcarePlatformLabResult.IRequest;
  export type Response = IPageIHealthcarePlatformLabResult.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/labResults",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/nurse/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults`;
  export const random = (): IPageIHealthcarePlatformLabResult.ISummary =>
    typia.random<IPageIHealthcarePlatformLabResult.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed laboratory result by ID for a given patient record and
 * encounter.
 *
 * This API operation returns the full detail of a laboratory result entity,
 * using the healthcare_platform_lab_results table, as indicated by the
 * labResultId path parameter. The patientRecordId and encounterId ensure proper
 * scoping and data isolation. The lab result includes metadata such as test
 * name, result values, clinical flags (normal/abnormal/critical),
 * integration/provenance information, and all structured result fields as per
 * the schema definition.
 *
 * Authorization checks guarantee only users with appropriate clinical,
 * technical, or department-level roles may access this sensitive result, and
 * audit logs are maintained for every access event. If the user does not have
 * permission, the operation will return an access denied response. Security and
 * compliance mechanisms are enforced according to the RBAC and record privacy
 * logic.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the parent patient record
 * @param props.encounterId Unique identifier for the parent EHR encounter
 * @param props.labResultId Unique identifier of the laboratory result to
 *   retrieve
 * @path /healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId
 * @accessor api.functional.healthcarePlatform.nurse.patientRecords.encounters.labResults.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent EHR encounter */
    encounterId: string & tags.Format<"uuid">;

    /** Unique identifier of the laboratory result to retrieve */
    labResultId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLabResult;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/nurse/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults/${encodeURIComponent(props.labResultId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabResult =>
    typia.random<IHealthcarePlatformLabResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("labResultId")(() => typia.assert(props.labResultId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
