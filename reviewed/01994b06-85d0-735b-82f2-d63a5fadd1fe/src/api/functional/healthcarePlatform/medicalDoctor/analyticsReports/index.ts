import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAnalyticsReport } from "../../../../structures/IHealthcarePlatformAnalyticsReport";
import { IPageIHealthcarePlatformAnalyticsReport } from "../../../../structures/IPageIHealthcarePlatformAnalyticsReport";

/**
 * Search and retrieve paginated analytics report records
 * (IHealthcarePlatformAnalyticsReport) with filters and sorting.
 *
 * Retrieves a filtered, paginated list of analytics report definitions to which
 * the user has access, based on search, filter, and sort criteria specified in
 * the request body. Operates on the healthcare_platform_analytics_reports table
 * and is used to provide users with access to analytics configuration,
 * reporting dashboards, and organization/department-scoped reports. The
 * IHealthcarePlatformAnalyticsReport.IRequest request body enables deliberate
 * querying for report name, creator, department, and status, as well as
 * supports pagination and sorting. The results are returned as an
 * IPageIHealthcarePlatformAnalyticsReport, providing all attributes suitable
 * for reporting UIs. Authorization may include any authenticated user with
 * analytics/report permissions in the organization or platform. Error handling
 * includes validation of query parameters, enforcement of RBAC/data scope, and
 * paginated output for large result sets.
 *
 * @param props.connection
 * @param props.body Search, filter, pagination, and sort configuration for
 *   analytics reports.
 * @path /healthcarePlatform/medicalDoctor/analyticsReports
 * @accessor api.functional.healthcarePlatform.medicalDoctor.analyticsReports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, pagination, and sort configuration for analytics
     * reports.
     */
    body: IHealthcarePlatformAnalyticsReport.IRequest;
  };
  export type Body = IHealthcarePlatformAnalyticsReport.IRequest;
  export type Response = IPageIHealthcarePlatformAnalyticsReport;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/medicalDoctor/analyticsReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/medicalDoctor/analyticsReports";
  export const random = (): IPageIHealthcarePlatformAnalyticsReport =>
    typia.random<IPageIHealthcarePlatformAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
