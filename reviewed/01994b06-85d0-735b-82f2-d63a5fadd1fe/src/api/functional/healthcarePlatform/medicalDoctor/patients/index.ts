import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformPatient } from "../../../../structures/IHealthcarePlatformPatient";

/**
 * Retrieve a specific patient profile by patientId from
 * healthcare_platform_patients.
 *
 * Retrieve a single patient user profile by specifying the unique patientId.
 * This operation is used to display or process detailed patient information as
 * stored in the healthcare_platform_patients table, including core attributes
 * (email, full_name, date_of_birth, phone, created_at, updated_at, and
 * deleted_at fields). Only active (not soft-deleted) records are returned, and
 * the operation enforces strict tenant data isolationâ€”users can only access
 * patients within their organization context.
 *
 * Security and audit rules require that only roles with appropriate permission,
 * such as medicalDoctor, nurse, organizationAdmin, receptionist, and the
 * patient themselves, can access the profile, with all access events logged for
 * compliance and traceability. Attempts to view patient profiles outside scope
 * or organization boundaries are denied and audited per policy.
 *
 * This GET endpoint is intended for use alongside related API endpoints that
 * reference patients, such as listing their appointments or billing status. It
 * handles errors for not found, unauthorized, or deleted records and surfaces
 * audit trail entries as required for regulatory compliance.
 *
 * @param props.connection
 * @param props.patientId Unique identifier of the target patient user.
 * @path /healthcarePlatform/medicalDoctor/patients/:patientId
 * @accessor api.functional.healthcarePlatform.medicalDoctor.patients.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target patient user. */
    patientId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformPatient;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/medicalDoctor/patients/:patientId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/medicalDoctor/patients/${encodeURIComponent(props.patientId ?? "null")}`;
  export const random = (): IHealthcarePlatformPatient =>
    typia.random<IHealthcarePlatformPatient>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientId")(() => typia.assert(props.patientId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
