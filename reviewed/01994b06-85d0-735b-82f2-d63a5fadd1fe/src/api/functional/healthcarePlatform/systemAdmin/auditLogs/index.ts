import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAuditLog } from "../../../../structures/IHealthcarePlatformAuditLog";
import { IPageIHealthcarePlatformAuditLog } from "../../../../structures/IPageIHealthcarePlatformAuditLog";

/**
 * Search and retrieve a paginated, filterable list of audit logs for compliance
 * and security audit.
 *
 * Retrieve a list of audit logs, enabling compliance staff, auditors, or system
 * administrators to monitor, investigate, and export records of user and system
 * actions. This operation supports complex search criteria, such as actor,
 * organization, action_type, date ranges, and business entities affected,
 * supporting both broad and fine-grained investigations required by HIPAA, SOC
 * 2, and internal policy.
 *
 * Security is paramount; only authorized roles may access full records, with
 * query responses restricted by organization and permission scope. Sensitive
 * context is subject to redaction for non-privileged users. The operation
 * leverages the healthcare_platform_audit_logs Prisma table, incorporating
 * primary, foreign key, and time indexing for high-performance queries. Results
 * can be further filtered by related entities or action context, with sorting
 * by date, severity, or actor. Implementation includes comprehensive error
 * handling for invalid filters, unauthorized access attempts, and ensures
 * soft-deleted records (if any) are excluded from standard result sets.
 *
 * This operation is essential for compliance audits, breach review, and
 * retrospective security incident analysis, working together with per-item
 * retrieval endpoints and export operations for regulatory reporting.
 * Pagination is supported to manage large result sets efficiently.
 *
 * @param props.connection
 * @param props.body Search and filter criteria, including action types, actor,
 *   organization, date range, entity type, pagination, and sorting options.
 * @path /healthcarePlatform/systemAdmin/auditLogs
 * @accessor api.functional.healthcarePlatform.systemAdmin.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria, including action types, actor,
     * organization, date range, entity type, pagination, and sorting
     * options.
     */
    body: IHealthcarePlatformAuditLog.IRequest;
  };
  export type Body = IHealthcarePlatformAuditLog.IRequest;
  export type Response = IPageIHealthcarePlatformAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/auditLogs";
  export const random = (): IPageIHealthcarePlatformAuditLog.ISummary =>
    typia.random<IPageIHealthcarePlatformAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed audit log entry by auditLogId for forensic investigation
 * or compliance review.
 *
 * Fetch a detailed audit log entry by unique auditLogId for focused compliance,
 * audit, or security analysis.
 *
 * The operation provides full event context, including actor, organization,
 * action_type, related entity, IP address, and structured event metadata. Only
 * users with high-level audit or administrative roles may access complete
 * entries, and records are filtered by organization where necessary to ensure
 * tenant data isolation. Fields containing sensitive context may be redacted
 * based on role privileges.
 *
 * Designed for integration with list/search endpoints, this operation enables
 * drill-down on suspicious or significant events, documentation of forensic
 * results, and access for compliance reporting workflows. Detailed error
 * handling is implemented for invalid IDs, access violations, or non-existent
 * records, returning appropriate error responses. This is frequently used
 * together with audit log search, incident management, and export workflows.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier of the audit log entry to retrieve.
 * @path /healthcarePlatform/systemAdmin/auditLogs/:auditLogId
 * @accessor api.functional.healthcarePlatform.systemAdmin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IHealthcarePlatformAuditLog =>
    typia.random<IHealthcarePlatformAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
