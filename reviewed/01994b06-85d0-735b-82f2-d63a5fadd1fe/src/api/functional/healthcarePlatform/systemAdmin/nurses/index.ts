import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Soft delete (archive) a nurse record in healthcare_platform_nurses by ID.
 *
 * This endpoint enables the logical (soft) deletion of a nurse record by its
 * unique identifier. The API marks the nurse as deleted by updating the
 * deleted_at column in the underlying healthcare_platform_nurses table, so the
 * record remains present for future audit, compliance reviews, and potential
 * restoration, as required by industry regulation and business rules.
 *
 * Only administrators with sufficient privileges should be allowed to invoke
 * this operation, as deleting or deactivating staff can have broad operational,
 * clinical, and compliance implications. The action should be captured in audit
 * logs with actor information and timestamp for traceability.
 *
 * This operation is typically used during staff offboarding, compliance-driven
 * deactivation, or resolution of staff transitions. Attempts to delete
 * non-existent or already-deleted records should result in a clear error
 * response and appropriate audit logging for compliance.
 *
 * Related endpoints may include: creating or updating a nurse record, listing
 * all nurses, and reactivating archived staff if business workflow supports
 * it.
 *
 * @param props.connection
 * @param props.nurseId Unique identifier of the nurse to delete (UUID format).
 * @path /healthcarePlatform/systemAdmin/nurses/:nurseId
 * @accessor api.functional.healthcarePlatform.systemAdmin.nurses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the nurse to delete (UUID format). */
    nurseId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/nurses/:nurseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/nurses/${encodeURIComponent(props.nurseId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nurseId")(() => typia.assert(props.nurseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
