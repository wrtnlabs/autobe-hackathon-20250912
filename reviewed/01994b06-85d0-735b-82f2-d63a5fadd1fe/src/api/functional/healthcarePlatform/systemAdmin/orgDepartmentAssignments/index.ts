import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformOrgDepartmentAssignment } from "../../../../structures/IHealthcarePlatformOrgDepartmentAssignment";
import { IPageIHealthcarePlatformOrgDepartmentAssignment } from "../../../../structures/IPageIHealthcarePlatformOrgDepartmentAssignment";

/**
 * Create a new organization-department assignment in
 * healthcare_platform_org_department_assignments.
 *
 * Create a new org-department assignment entry to establish structure within
 * the multi-tenant healthcarePlatform system. The request body follows business
 * validation rules from the healthcare_platform_org_department_assignments
 * table and requires: a valid organization ID, department ID, and all
 * assignment metadata for audit.
 *
 * Assignment creation is audited, recording timestamp and user reference for
 * compliance. Only systemAdmins and organizationAdmins are authorized. Related
 * operations for listing and inspecting assignments should be used to verify
 * successful creation. Validation includes enforcement of unique
 * organization-department mapping and checks against soft-deleted/archived
 * organizations or departments.
 *
 * Error handling includes failed validation (e.g., attempting to assign an
 * already linked or deleted org/department), permission errors, and unexpected
 * server failures. On success, full assignment details (per the schema) are
 * returned.
 *
 * @param props.connection
 * @param props.body Organization-department assignment information for
 *   creation.
 * @path /healthcarePlatform/systemAdmin/orgDepartmentAssignments
 * @accessor api.functional.healthcarePlatform.systemAdmin.orgDepartmentAssignments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Organization-department assignment information for creation. */
    body: IHealthcarePlatformOrgDepartmentAssignment.ICreate;
  };
  export type Body = IHealthcarePlatformOrgDepartmentAssignment.ICreate;
  export type Response = IHealthcarePlatformOrgDepartmentAssignment;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/orgDepartmentAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/orgDepartmentAssignments";
  export const random = (): IHealthcarePlatformOrgDepartmentAssignment =>
    typia.random<IHealthcarePlatformOrgDepartmentAssignment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a filtered and paginated list of organization-department assignments from
 * healthcare_platform_org_department_assignments.
 *
 * Retrieve an advanced, paginated list of org-department assignments. This
 * operation utilizes the healthcare_platform_org_department_assignments table
 * comments, specifically focusing on the mapping between organizations and
 * departments for complex organization structure management.
 *
 * The endpoint supports advanced search parameters (such as organization_id,
 * department_id, assignment dates, assignment status) and pagination for
 * handling large datasets. Only users with appropriate organizational or system
 * administrative permissions can access this list, ensuring strict platform
 * RBAC.
 *
 * Returned assignment data includes all auditing fields: unique assignment id,
 * organization info, department info, timestamps for creation and updates, and
 * any soft-delete status for regulatory tracking. Filtering and searching help
 * with daily operational audits and organization restructuring workflows,
 * referencing the business need for compliance and effective management of
 * healthcare hierarchies.
 *
 * This operation is commonly used in conjunction with retrieve (GET by ID),
 * create, and update operations for the
 * healthcare_platform_org_department_assignments entity. Error handling covers
 * invalid filtering parameters, insufficient permissions, and unexpected server
 * errors. Soft-deleted assignments may be optionally excluded depending on
 * business rules, but are included for compliance operations.
 *
 * @param props.connection
 * @param props.body Request body specifying filter parameters, pagination, and
 *   sorting for org-department assignment retrieval.
 * @path /healthcarePlatform/systemAdmin/orgDepartmentAssignments
 * @accessor api.functional.healthcarePlatform.systemAdmin.orgDepartmentAssignments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request body specifying filter parameters, pagination, and sorting
     * for org-department assignment retrieval.
     */
    body: IHealthcarePlatformOrgDepartmentAssignment.IRequest;
  };
  export type Body = IHealthcarePlatformOrgDepartmentAssignment.IRequest;
  export type Response =
    IPageIHealthcarePlatformOrgDepartmentAssignment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/orgDepartmentAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/orgDepartmentAssignments";
  export const random =
    (): IPageIHealthcarePlatformOrgDepartmentAssignment.ISummary =>
      typia.random<IPageIHealthcarePlatformOrgDepartmentAssignment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific organization-department assignment by ID from
 * healthcare_platform_org_department_assignments.
 *
 * Get detailed information for a single organization-department assignment from
 * healthcare_platform_org_department_assignments by ID. The primary purpose is
 * to allow privileged users to inspect or review the exact mapping between a
 * specific organization and a department for operational, compliance, or
 * structural management.
 *
 * The endpoint requires a valid orgDepartmentAssignmentId path parameter
 * referencing the assignment's unique identifier (UUID) in the database and
 * returns all relevant fields in the record, including relational references,
 * creation and update audit timestamps, and the soft delete timestamp if
 * applicable.
 *
 * Roles with required permissions (systemAdmin, organizationAdmin) are able to
 * retrieve this information for audit, troubleshooting, or compliance
 * requirements. Related API operations include list, create, and update
 * endpoints for org-department assignments. Error cases include not found,
 * invalid identifier, or unauthorized access.
 *
 * @param props.connection
 * @param props.orgDepartmentAssignmentId Unique ID of the
 *   organization-department assignment to retrieve.
 * @path /healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.orgDepartmentAssignments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the organization-department assignment to retrieve. */
    orgDepartmentAssignmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformOrgDepartmentAssignment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/orgDepartmentAssignments/${encodeURIComponent(props.orgDepartmentAssignmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformOrgDepartmentAssignment =>
    typia.random<IHealthcarePlatformOrgDepartmentAssignment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orgDepartmentAssignmentId")(() =>
        typia.assert(props.orgDepartmentAssignmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an organization-department assignment by ID in
 * healthcare_platform_org_department_assignments.
 *
 * Update the details of an existing org-department assignment identified by its
 * unique ID. The request body must include permissible fields as specified by
 * the healthcare_platform_org_department_assignments schema and observe
 * business validation relating to unique organization-department relationships
 * and non-editable fields (as appropriate for compliance).
 *
 * The operation requires the orgDepartmentAssignmentId UUID path parameter and
 * a compliant update request body. Security is enforced allowing only
 * systemAdmin and organizationAdmin users to invoke updates. All changes are
 * audited with timestamps and user references for compliance tracking. Error
 * scenarios include record not found, attempts to update immutable
 * relationships, permission violations, and other validation failures.
 *
 * This API is commonly used alongside list (PATCH), get (GET by ID), and create
 * (POST) endpoints to manage the lifecycle of department structure assignments.
 * It is important to note that unique indices and business logic may prevent
 * creating duplicate active assignments for the same department under one
 * organization.
 *
 * @param props.connection
 * @param props.orgDepartmentAssignmentId ID of the organization-department
 *   assignment record to update.
 * @param props.body Updated organization-department assignment data as per
 *   business rules.
 * @path /healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.orgDepartmentAssignments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the organization-department assignment record to update. */
    orgDepartmentAssignmentId: string & tags.Format<"uuid">;

    /**
     * Updated organization-department assignment data as per business
     * rules.
     */
    body: IHealthcarePlatformOrgDepartmentAssignment.IUpdate;
  };
  export type Body = IHealthcarePlatformOrgDepartmentAssignment.IUpdate;
  export type Response = IHealthcarePlatformOrgDepartmentAssignment;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/orgDepartmentAssignments/${encodeURIComponent(props.orgDepartmentAssignmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformOrgDepartmentAssignment =>
    typia.random<IHealthcarePlatformOrgDepartmentAssignment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orgDepartmentAssignmentId")(() =>
        typia.assert(props.orgDepartmentAssignmentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an organization-to-department assignment
 * (healthcare_platform_org_department_assignments).
 *
 * This operation is designed to permanently delete an
 * organization-to-department assignment within the healthcare platform. By
 * specifying the unique orgDepartmentAssignmentId, administrators can remove
 * the relationship between an organization and a department, reflecting changes
 * in organizational structure or access policies.
 *
 * Security considerations dictate that this operation should only be usable by
 * administrative roles, as deleting such links can have significant impacts on
 * access control, department workflow, and reporting. The underlying Prisma
 * schema model (healthcare_platform_org_department_assignments) tracks such
 * assignments with audit trail timestamps and soft-delete capability, but this
 * operation performs a hard deletion removing the entry entirely from the
 * database.
 *
 * Validation ensures that the specified assignment exists and is not already
 * deleted. Attempts to delete a non-existent or already-deleted assignment
 * yield a clear error. As the operation is destructive, it is related to
 * organization and department management APIs and should be used judiciously.
 *
 * @param props.connection
 * @param props.orgDepartmentAssignmentId Unique identifier of the
 *   organization-department assignment to delete.
 * @path /healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.orgDepartmentAssignments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the organization-department assignment to
     * delete.
     */
    orgDepartmentAssignmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/orgDepartmentAssignments/:orgDepartmentAssignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/orgDepartmentAssignments/${encodeURIComponent(props.orgDepartmentAssignmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orgDepartmentAssignmentId")(() =>
        typia.assert(props.orgDepartmentAssignmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
