import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRiskAssessment } from "../../../../structures/IHealthcarePlatformRiskAssessment";
import { IPageIHealthcarePlatformRiskAssessment } from "../../../../structures/IPageIHealthcarePlatformRiskAssessment";

/**
 * Create a new risk assessment record in the
 * healthcare_platform_risk_assessments table.
 *
 * Create a new risk assessment entry in the
 * healthcare_platform_risk_assessments table based on the supplied details.
 * Risk assessments document compliance, operational, or technical risk reviews
 * performed by or on behalf of an organization or department.
 *
 * This endpoint allows authorized users (compliance, platform, or organization
 * administrators) to submit new assessments covering type, status, methodology,
 * scope, findings, level, analysis period, and recommendations. Input is
 * validated according to the IHealthcarePlatformRiskAssessment.ICreate schema
 * and includes all necessary metadata required for subsequent audit or
 * reporting workflows.
 *
 * Upon successful processing, the new risk assessment is stored and returned in
 * the response body. Post-creation, the record is available for auditing,
 * reporting, updating, and assignment of reviews as dictated by compliance
 * policy.
 *
 * Proper audit logging of the creation actor, timestamp, and context is
 * mandatory to meet regulatory and internal business requirements. Related
 * operations include updating or retrieving specific assessments, and listing
 * all assessments for compliance tracking.
 *
 * @param props.connection
 * @param props.body Details required to create a new risk assessment record,
 *   including scope, methodology, risk findings, assessment window, and
 *   recommendations.
 * @path /healthcarePlatform/systemAdmin/riskAssessments
 * @accessor api.functional.healthcarePlatform.systemAdmin.riskAssessments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details required to create a new risk assessment record, including
     * scope, methodology, risk findings, assessment window, and
     * recommendations.
     */
    body: IHealthcarePlatformRiskAssessment.ICreate;
  };
  export type Body = IHealthcarePlatformRiskAssessment.ICreate;
  export type Response = IHealthcarePlatformRiskAssessment;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/riskAssessments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/riskAssessments";
  export const random = (): IHealthcarePlatformRiskAssessment =>
    typia.random<IHealthcarePlatformRiskAssessment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of risk assessments from
 * healthcare_platform_risk_assessments.
 *
 * Retrieve a filtered, paginated, and searchable list of risk assessments from
 * the healthcare_platform_risk_assessments table. Risk assessments document
 * compliance and operational security review carried out by organizations or
 * departments, capturing risk level, findings, recommendations, period, and
 * assigned assessors.
 *
 * This operation allows compliance officers, organization administrators, and
 * auditors to search and review ongoing or historical assessments. Users can
 * specify organization context, time window, status, department, risk level,
 * and other metadata through the request body, which follows the
 * IHealthcarePlatformRiskAssessment.IRequest schema.
 *
 * The response is a paginated collection of summary records, offering both
 * high-level insight and the ability to drill into detailed risk assessment
 * content as required. Supports slice pagination and sort order customization.
 * Sensitive findings are visible only to authorized roles per compliance
 * policy; audit logging ensures visibility into access and search patterns.
 *
 * Closely related actions include retrieving the full details of a specific
 * risk assessment, creating new risk assessments, or updating existing ones.
 * Proper access controls and audit trails must be enforced at all times,
 * especially for assessments related to breaches, regulatory audits, or
 * containing high-privilege findings.
 *
 * @param props.connection
 * @param props.body Search and filtering parameters for querying organizational
 *   or departmental risk assessments.
 * @path /healthcarePlatform/systemAdmin/riskAssessments
 * @accessor api.functional.healthcarePlatform.systemAdmin.riskAssessments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filtering parameters for querying organizational or
     * departmental risk assessments.
     */
    body: IHealthcarePlatformRiskAssessment.IRequest;
  };
  export type Body = IHealthcarePlatformRiskAssessment.IRequest;
  export type Response = IPageIHealthcarePlatformRiskAssessment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/riskAssessments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/riskAssessments";
  export const random = (): IPageIHealthcarePlatformRiskAssessment.ISummary =>
    typia.random<IPageIHealthcarePlatformRiskAssessment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full, detailed information for a specific risk assessment by
 * riskAssessmentId.
 *
 * Retrieve complete details about a specific risk assessment from the
 * healthcare_platform_risk_assessments table using its unique riskAssessmentId
 * (UUID). Risk assessments are compliance, audit, or operational security
 * reviews performed at organization or department level, covering methodology,
 * risk level, time window, findings, and recommendations.
 *
 * This operation is primarily used by compliance teams, organization
 * administrators, or designated reviewers for in-depth investigation of
 * findings, validation of compliance policies, or preparation for external
 * audit. The API response includes the full record, with all captured metadata,
 * period, status, and context as defined in IHealthcarePlatformRiskAssessment.
 *
 * Security measures must ensure that only users with the appropriate
 * compliance, admin, or audit permission may access this record, especially
 * assessments that include sensitive or regulated information.
 *
 * This endpoint supplements risk assessment listing/search operations and is
 * used in conjunction with risk assessment creation, update, or review
 * endpoints to support the full compliance lifecycle.
 *
 * @param props.connection
 * @param props.riskAssessmentId Unique identifier of the risk assessment record
 *   to retrieve (UUID format).
 * @path /healthcarePlatform/systemAdmin/riskAssessments/:riskAssessmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.riskAssessments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the risk assessment record to retrieve (UUID
     * format).
     */
    riskAssessmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRiskAssessment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/riskAssessments/:riskAssessmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/riskAssessments/${encodeURIComponent(props.riskAssessmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformRiskAssessment =>
    typia.random<IHealthcarePlatformRiskAssessment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("riskAssessmentId")(() =>
        typia.assert(props.riskAssessmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
