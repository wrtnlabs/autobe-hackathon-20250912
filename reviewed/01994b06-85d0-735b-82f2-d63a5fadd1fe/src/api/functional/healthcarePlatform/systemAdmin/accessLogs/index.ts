import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAccessLog } from "../../../../structures/IHealthcarePlatformAccessLog";
import { IPageIHealthcarePlatformAccessLog } from "../../../../structures/IPageIHealthcarePlatformAccessLog";

/**
 * Search and retrieve a paginated, filterable list of access logs for
 * compliance and access reporting.
 *
 * Search and retrieve access logs, enabling compliance, administrative, and
 * audit staff to track all read/view access events on sensitive system
 * resources such as EHR, patient records, and business-critical configurations.
 * This operation supports advanced query parameters for actor (user),
 * organization, resource type, resource ID, purpose, IP, and access date range,
 * with the ability to paginate and sort results by any indexed field.
 *
 * Security and privacy are enforced by restricting data returned based on the
 * caller's authorization roles and organization boundaries. Sensitive fields,
 * such as access justification, may be masked for non-privileged users. This
 * operation relies on the healthcare_platform_access_logs table, supporting
 * investigation, breach review, and regulatory reporting. Full audit trails of
 * access attempts, including user, resource, purpose, and network origin, are
 * available for eligible roles. Edge-case handling includes soft-deletion
 * filtering and robust query validation.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for searching access logs,
 *   supporting actor, organization, resource type, access purpose, date range,
 *   and sorting options.
 * @path /healthcarePlatform/systemAdmin/accessLogs
 * @accessor api.functional.healthcarePlatform.systemAdmin.accessLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination criteria for searching access logs, supporting
     * actor, organization, resource type, access purpose, date range, and
     * sorting options.
     */
    body: IHealthcarePlatformAccessLog.IRequest;
  };
  export type Body = IHealthcarePlatformAccessLog.IRequest;
  export type Response = IPageIHealthcarePlatformAccessLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/accessLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/accessLogs";
  export const random = (): IPageIHealthcarePlatformAccessLog.ISummary =>
    typia.random<IPageIHealthcarePlatformAccessLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific access log entry by accessLogId for audit and
 * investigative review.
 *
 * Retrieve detailed information for a specific access log entry by its
 * accessLogId. The record contains the actor/user, organization, resource type,
 * resource ID, access purpose, IP address, and timestamp. Only users with
 * systemAdmin or organizationAdmin roles may access full detail, with
 * enforcement of tenant boundaries to ensure that cross-org access is
 * prevented.
 *
 * This operation is intended for investigative workflows when list or search
 * queries indicate suspicious or critical accesses. It allows drill-down for
 * user activity analysis, breach investigations, or verification of access
 * appropriateness. Robust error handling returns clear responses on invalid
 * accessLogId, access denial, or records not found. Used together with access
 * log search endpoints and incident response operations.
 *
 * @param props.connection
 * @param props.accessLogId Unique identifier of the access log entry to
 *   retrieve.
 * @path /healthcarePlatform/systemAdmin/accessLogs/:accessLogId
 * @accessor api.functional.healthcarePlatform.systemAdmin.accessLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the access log entry to retrieve. */
    accessLogId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAccessLog;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/accessLogs/:accessLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/accessLogs/${encodeURIComponent(props.accessLogId ?? "null")}`;
  export const random = (): IHealthcarePlatformAccessLog =>
    typia.random<IHealthcarePlatformAccessLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("accessLogId")(() => typia.assert(props.accessLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
