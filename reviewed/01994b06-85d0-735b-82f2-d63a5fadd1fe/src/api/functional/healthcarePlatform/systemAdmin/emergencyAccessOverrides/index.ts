import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformEmergencyAccessOverride } from "../../../../structures/IHealthcarePlatformEmergencyAccessOverride";
import { IPageIHealthcarePlatformEmergencyAccessOverride } from "../../../../structures/IPageIHealthcarePlatformEmergencyAccessOverride";

/**
 * Searches and retrieves a filtered, paginated list of emergency access
 * override records for compliance and audit review.
 *
 * This operation is used for compliance reviews, regulatory audits, and
 * internal investigations to track all instances of emergency access override
 * events, commonly known as 'break-the-glass' scenarios, across the
 * healthcarePlatform system.
 *
 * Each record in the healthcare_platform_emergency_access_overrides table logs
 * the user, organization, access scope, justification, window of override, and
 * post-event review status. Use this API to query by multiple filters
 * (organization, user ID, date range, review status, override scope),
 * supporting advanced search requirements. Permission to use this endpoint is
 * typically reserved for systemAdmin, organizationAdmin, and compliance auditor
 * roles.
 *
 * The operation supports full pagination and advanced sorting (e.g., timestamp,
 * urgency, review status), returning rich details necessary for investigation
 * and regulatory reporting. Requesting users must have privileged audit
 * permissions. The result set is strictly filtered to the user's granted
 * organizations/departments.
 *
 * @param props.connection
 * @param props.body Search filters, pagination, and sorting options for
 *   querying emergency access override logs, including organization, user,
 *   scope, status, date range, and review fields.
 * @path /healthcarePlatform/systemAdmin/emergencyAccessOverrides
 * @accessor api.functional.healthcarePlatform.systemAdmin.emergencyAccessOverrides.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, pagination, and sorting options for querying
     * emergency access override logs, including organization, user, scope,
     * status, date range, and review fields.
     */
    body: IHealthcarePlatformEmergencyAccessOverride.IRequest;
  };
  export type Body = IHealthcarePlatformEmergencyAccessOverride.IRequest;
  export type Response = IPageIHealthcarePlatformEmergencyAccessOverride;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/emergencyAccessOverrides",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/emergencyAccessOverrides";
  export const random = (): IPageIHealthcarePlatformEmergencyAccessOverride =>
    typia.random<IPageIHealthcarePlatformEmergencyAccessOverride>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieves full details for a specific emergency access override audit record
 * by its ID.
 *
 * This operation allows compliance officers, organization admins, and system
 * administrators to view the full, detailed information of a single emergency
 * access override record, identified by emergencyAccessOverrideId.
 *
 * The record contains all fields mandated by regulatory and business rules:
 * user identity, role, justification, accessed data scope, override period,
 * review/revocation metadata, and cross-references to related audit events. It
 * is used in post-incident workflow to verify proper compliance, procedural
 * justification, and to document the responsible reviewer's actions.
 *
 * The returned data supports legal review, security investigation, and detailed
 * compliance documentation, consistent with the
 * healthcare_platform_emergency_access_overrides schema, including all
 * timestamps, reason fields, and outcome metrics. Query is strictly authorized
 * to privileged auditing roles, with access scope enforcement implemented in
 * backend logic.
 *
 * @param props.connection
 * @param props.emergencyAccessOverrideId Unique identifier (UUID) of the
 *   emergency access override record to retrieve.
 * @path /healthcarePlatform/systemAdmin/emergencyAccessOverrides/:emergencyAccessOverrideId
 * @accessor api.functional.healthcarePlatform.systemAdmin.emergencyAccessOverrides.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the emergency access override record to
     * retrieve.
     */
    emergencyAccessOverrideId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformEmergencyAccessOverride;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/emergencyAccessOverrides/:emergencyAccessOverrideId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/emergencyAccessOverrides/${encodeURIComponent(props.emergencyAccessOverrideId ?? "null")}`;
  export const random = (): IHealthcarePlatformEmergencyAccessOverride =>
    typia.random<IHealthcarePlatformEmergencyAccessOverride>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("emergencyAccessOverrideId")(() =>
        typia.assert(props.emergencyAccessOverrideId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
