import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformReminder } from "../../../../structures/IHealthcarePlatformReminder";
import { IPageIHealthcarePlatformReminder } from "../../../../structures/IPageIHealthcarePlatformReminder";

/**
 * Create a new scheduled reminder for user or staff.
 *
 * Create a new reminder entry for future delivery, specifying recipient, type,
 * scheduled delivery window, and message/payload.
 *
 * Used by staff, providers, or system automation to set up reminders for
 * clinical, compliance, appointment, or medication flows. Enforces
 * organizational and role scoping, audit logging, and validation of
 * recipient/channel compatibility. Fails if schedule is invalid, recipient is
 * not found, or the user lacks authorization.
 *
 * This endpoint writes to the healthcare_platform_reminders table and triggers
 * downstream notification or escalation workflows as per system policy. Related
 * endpoints include search/list reminders and detailed reminder retrieval.
 *
 * @param props.connection
 * @param props.body The information required to create a new scheduled
 *   reminder, including target, type, payload, schedule, and delivery
 *   metadata.
 * @path /healthcarePlatform/systemAdmin/reminders
 * @accessor api.functional.healthcarePlatform.systemAdmin.reminders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The information required to create a new scheduled reminder,
     * including target, type, payload, schedule, and delivery metadata.
     */
    body: IHealthcarePlatformReminder.ICreate;
  };
  export type Body = IHealthcarePlatformReminder.ICreate;
  export type Response = IHealthcarePlatformReminder;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/reminders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/reminders";
  export const random = (): IHealthcarePlatformReminder =>
    typia.random<IHealthcarePlatformReminder>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list reminders with filter, sorting, and pagination.
 *
 * Obtain a filtered and paginated list of reminders stored in the platform,
 * filtered by user role and query parameters.
 *
 * The reminders system is responsible for delivering scheduled notifications to
 * users and staff (e.g., appointment, compliance, medication). This operation
 * enables searching, filtering, and sorting reminders according to criteria
 * such as recipient, status, time window, delivery outcome, and organization
 * context, supporting bulk reminder management or analytics. Authorization is
 * typically required for any user account able to view reminders in their
 * organization scope; compliance and privacy rules apply.
 *
 * This endpoint operates on the healthcare_platform_reminders table, returning
 * reminder summaries and supporting paging through large volumes of data.
 * Related endpoints include single reminder fetch and reminder creation.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for retrieving reminders
 *   (recipient, status, scheduled window, etc.) with pagination and sorting.
 * @path /healthcarePlatform/systemAdmin/reminders
 * @accessor api.functional.healthcarePlatform.systemAdmin.reminders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter parameters for retrieving reminders (recipient,
     * status, scheduled window, etc.) with pagination and sorting.
     */
    body: IHealthcarePlatformReminder.IRequest;
  };
  export type Body = IHealthcarePlatformReminder.IRequest;
  export type Response = IPageIHealthcarePlatformReminder.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/reminders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/reminders";
  export const random = (): IPageIHealthcarePlatformReminder.ISummary =>
    typia.random<IPageIHealthcarePlatformReminder.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single reminder by ID (detail view).
 *
 * Retrieve the full details for a specified reminder ID, including recipient,
 * type/class, delivery schedule, status, notification channel, and lifecycle
 * history.
 *
 * This operation allows users with valid access rights to inspect a reminder
 * record by its unique UUID, supporting user portals, compliance review, or
 * troubleshooting workflows. It ensures that PHI or sensitive notification
 * content is only accessible to users authorized by organizational or
 * role-based policy.
 *
 * This endpoint operates on the healthcare_platform_reminders table and
 * includes detailed reminder fields. Audit or compliance logs may require
 * additional review when accessing sensitive reminder data. Related operations
 * include listing reminders and creating new scheduled reminders.
 *
 * @param props.connection
 * @param props.reminderId The unique identifier (UUID) of the reminder to
 *   fetch.
 * @path /healthcarePlatform/systemAdmin/reminders/:reminderId
 * @accessor api.functional.healthcarePlatform.systemAdmin.reminders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the reminder to fetch. */
    reminderId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformReminder;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/reminders/:reminderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/reminders/${encodeURIComponent(props.reminderId ?? "null")}`;
  export const random = (): IHealthcarePlatformReminder =>
    typia.random<IHealthcarePlatformReminder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reminderId")(() => typia.assert(props.reminderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing healthcare platform reminder (reminderId) in the
 * healthcare_platform_reminders table.
 *
 * The update operation is designed for scenarios where reminder details such as
 * delivery time, message content, reminder type, or delivery channel must be
 * changed — for example, when patient follow-up schedules change, staff
 * coverage is updated, or a business policy requires adjustments. The operation
 * requires that the caller has the necessary permission for the targeted
 * reminder (patient, staff, or organization context). It supports all reminder
 * fields except immutable system audit fields and can be invoked by patients,
 * staff, or automation depending on access rights. All changes are strictly
 * recorded for audit, and business logic prevents update of reminders where
 * business rules require completion or archival (e.g., compliance holds,
 * completed reminders, scheduled medication reminders delivered). If a reminder
 * is already soft-deleted, the operation returns an appropriate error. The
 * update operation is critical for maintaining accurate reminder schedules,
 * effective communication, and regulatory compliance in healthcare workflows.
 * Responses include the updated reminder object. Error handling covers
 * permission validation, validation of reminder state, and data consistency
 * enforcement. This operation relates directly to the
 * healthcare_platform_reminders table in the Prisma schema.
 *
 * @param props.connection
 * @param props.reminderId Unique identifier of the reminder to update.
 * @param props.body Updated fields for the healthcare platform reminder entity.
 * @path /healthcarePlatform/systemAdmin/reminders/:reminderId
 * @accessor api.functional.healthcarePlatform.systemAdmin.reminders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the reminder to update. */
    reminderId: string & tags.Format<"uuid">;

    /** Updated fields for the healthcare platform reminder entity. */
    body: IHealthcarePlatformReminder.IUpdate;
  };
  export type Body = IHealthcarePlatformReminder.IUpdate;
  export type Response = IHealthcarePlatformReminder;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/reminders/:reminderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/reminders/${encodeURIComponent(props.reminderId ?? "null")}`;
  export const random = (): IHealthcarePlatformReminder =>
    typia.random<IHealthcarePlatformReminder>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reminderId")(() => typia.assert(props.reminderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a healthcare platform reminder (reminderId) from the
 * healthcare_platform_reminders table (sets deleted_at).
 *
 * The erase operation allows authorized users to disable (soft delete) an
 * existing reminder, remove it from active workflow, and ensure the change and
 * rationale are captured in audit logs. Reminders in finalized, active
 * compliance workflows, or those that are already soft-deleted are protected
 * from deletion and return errors if deletion is attempted. Soft deletion means
 * that the reminder is excluded from active queries but preserved for
 * compliance retention and recovery. Role-based access rules enforce that only
 * users with organizational or reminder ownership may execute the operation.
 * Every delete operation is recorded with user, timestamp, and context for
 * audit trail purposes, supporting full lifecycle traceability. This operation
 * concretely supports healthcare_platform_reminders table logic and the
 * foundational business rules set out for regulatory obligations in the
 * domain.
 *
 * @param props.connection
 * @param props.reminderId Unique identifier of the reminder to be deleted.
 * @path /healthcarePlatform/systemAdmin/reminders/:reminderId
 * @accessor api.functional.healthcarePlatform.systemAdmin.reminders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the reminder to be deleted. */
    reminderId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/reminders/:reminderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/reminders/${encodeURIComponent(props.reminderId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reminderId")(() => typia.assert(props.reminderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
