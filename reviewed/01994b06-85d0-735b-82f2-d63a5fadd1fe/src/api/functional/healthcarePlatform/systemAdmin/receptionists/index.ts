import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformReceptionist } from "../../../../structures/IHealthcarePlatformReceptionist";
import { IPageIHealthcarePlatformReceptionist } from "../../../../structures/IPageIHealthcarePlatformReceptionist";

/**
 * List and search all receptionists with advanced filtering and paging.
 *
 * Search and retrieve a paginated, optionally filtered and sorted list of
 * receptionists from the healthcare_platform_receptionists table. This endpoint
 * supports complex queries for administrative users, including filtering by
 * name, email, creation date, and status per the schema specifications.
 *
 * The system enforces proper permissionsâ€”typically only systemAdmin or
 * organizationAdmin can access all receptionist records. Sensitive receptionist
 * information is returned in adherence with privacy policies and must be
 * handled according to organization policy.
 *
 * Response includes summary data for each receptionist, optimized for
 * management use (e.g., bulk communication, scheduling, access reviews). Errors
 * are surfaced when query parameters are invalid or when authentication is
 * insufficient. Related endpoints include creation, update, and single
 * receptionist detail retrieval for granular user management.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for receptionist
 *   list queries.
 * @path /healthcarePlatform/systemAdmin/receptionists
 * @accessor api.functional.healthcarePlatform.systemAdmin.receptionists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for receptionist list
     * queries.
     */
    body: IHealthcarePlatformReceptionist.IRequest;
  };
  export type Body = IHealthcarePlatformReceptionist.IRequest;
  export type Response = IPageIHealthcarePlatformReceptionist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/receptionists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/receptionists";
  export const random = (): IPageIHealthcarePlatformReceptionist.ISummary =>
    typia.random<IPageIHealthcarePlatformReceptionist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific receptionist from the
 * healthcare_platform_receptionists table.
 *
 * Retrieve the complete profile and status information for a specific
 * receptionist. This operation is used by administrators to verify, audit, or
 * manage an individual receptionist based on their unique identifier.
 * Accessible to systemAdmin or organizationAdmin users, the endpoint fetches
 * all configured fields as described in the schema, including contact
 * information, name, timestamps, and deletion status.
 *
 * Security is enforced, allowing only privileged users to access full
 * receptionist record details. The returned object includes all information
 * needed for downstream actions such as editing, auditing, or account lifecycle
 * management.
 *
 * Validation ensures the receptionist exists and is not deleted; otherwise, an
 * error is reported. This endpoint is foundational for receptionist personnel
 * management and compliance verification within the organization.
 *
 * @param props.connection
 * @param props.receptionistId Unique identifier of the receptionist to
 *   retrieve.
 * @path /healthcarePlatform/systemAdmin/receptionists/:receptionistId
 * @accessor api.functional.healthcarePlatform.systemAdmin.receptionists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the receptionist to retrieve. */
    receptionistId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformReceptionist;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/receptionists/:receptionistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/receptionists/${encodeURIComponent(props.receptionistId ?? "null")}`;
  export const random = (): IHealthcarePlatformReceptionist =>
    typia.random<IHealthcarePlatformReceptionist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("receptionistId")(() => typia.assert(props.receptionistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
