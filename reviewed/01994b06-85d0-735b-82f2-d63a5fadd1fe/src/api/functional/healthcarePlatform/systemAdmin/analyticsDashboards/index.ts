import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAnalyticsDashboard } from "../../../../structures/IHealthcarePlatformAnalyticsDashboard";
import { IPageIHealthcarePlatformAnalyticsDashboard } from "../../../../structures/IPageIHealthcarePlatformAnalyticsDashboard";
export * as preferences from "./preferences/index";

/**
 * Create a new analytics dashboard definition.
 *
 * Creates a new analytics dashboard, accepting details from the request body
 * including title, layout/configuration JSON, owning user, organizational and
 * department context, visibility (public/private), and description. The
 * healthcare_platform_analytics_dashboards schema enforces unique constraints
 * per organization and user for active dashboards and validates configuration
 * structure.
 *
 * The operation ensures only authorized roles (systemAdmin, organizationAdmin)
 * may create dashboards, enforcing relevant constraints and business rules for
 * sharing and access control. On success, the endpoint returns the complete
 * analytics dashboard object as stored, which can be used for immediate
 * rendering, editing, or access management. If duplicate constraints are
 * violated or data is invalid, proper error codes and validation messages are
 * returned.
 *
 * Typical workflows supported include the onboarding of new analytics products,
 * automation of dashboards by admin scripts, and business intelligence staff
 * self-service provisioning.
 *
 * @param props.connection
 * @param props.body New analytics dashboard details and configuration to create
 * @path /healthcarePlatform/systemAdmin/analyticsDashboards
 * @accessor api.functional.healthcarePlatform.systemAdmin.analyticsDashboards.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New analytics dashboard details and configuration to create */
    body: IHealthcarePlatformAnalyticsDashboard.ICreate;
  };
  export type Body = IHealthcarePlatformAnalyticsDashboard.ICreate;
  export type Response = IHealthcarePlatformAnalyticsDashboard;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/analyticsDashboards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/analyticsDashboards";
  export const random = (): IHealthcarePlatformAnalyticsDashboard =>
    typia.random<IHealthcarePlatformAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve analytics dashboards with advanced filtering and
 * pagination.
 *
 * This operation allows analytics users, administrators, and business
 * intelligence staff to search for analytics dashboards using a variety of
 * filters and query parameters. The system supports filtering by dashboard
 * owner, organization, department, visibility (public/private), and search by
 * title or description. Pagination and sorting options allow efficient browsing
 * of large sets of dashboards, accommodating scenarios where organizations,
 * departments, or users maintain multiple dashboard variations.
 *
 * The healthcare_platform_analytics_dashboards schema serves as the backing
 * store for these dashboards, tying each to an owner, organization, and
 * optionally a department. Search operations are constrained by user
 * authorization: users may view only dashboards to which they have access (by
 * ownership, organization, public visibility, or department scope). Complex
 * queries and sorting allow integration with analytics administration,
 * dashboard management UIs, and automation for compliance or best practices.
 *
 * The returned data structure is a paginated collection of dashboard summary
 * objects, as defined in the Prisma schema, optimized for quick list rendering
 * and actionable navigation.
 *
 * @param props.connection
 * @param props.body Filtering, search criteria, and pagination parameters for
 *   finding dashboards
 * @path /healthcarePlatform/systemAdmin/analyticsDashboards
 * @accessor api.functional.healthcarePlatform.systemAdmin.analyticsDashboards.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search criteria, and pagination parameters for finding
     * dashboards
     */
    body: IHealthcarePlatformAnalyticsDashboard.IRequest;
  };
  export type Body = IHealthcarePlatformAnalyticsDashboard.IRequest;
  export type Response = IPageIHealthcarePlatformAnalyticsDashboard.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/analyticsDashboards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/analyticsDashboards";
  export const random =
    (): IPageIHealthcarePlatformAnalyticsDashboard.ISummary =>
      typia.random<IPageIHealthcarePlatformAnalyticsDashboard.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific analytics dashboard by its identifier.
 *
 * Fetches the full record of an analytics dashboard specified by the
 * dashboardId path parameter. The healthcare_platform_analytics_dashboards
 * schema holds all metadata and configuration necessary to render dashboards
 * for end users, including dashboard title, description, configuration JSON,
 * owner, visibility, and linkage to organization or department contexts.
 *
 * This endpoint is commonly used in analytics and reporting applications, as
 * well as in administrative workflows managing dashboard access, customization,
 * and sharing. It is crucial for supporting real-time dashboard rendering,
 * editing, copying, and compliance review. Authorization checks restrict access
 * so users may only see dashboards they own or are allowed to view by
 * organizational or department-level policies.
 *
 * @param props.connection
 * @param props.dashboardId Unique identifier of the dashboard to retrieve
 * @path /healthcarePlatform/systemAdmin/analyticsDashboards/:dashboardId
 * @accessor api.functional.healthcarePlatform.systemAdmin.analyticsDashboards.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the dashboard to retrieve */
    dashboardId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAnalyticsDashboard;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/analyticsDashboards/:dashboardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}`;
  export const random = (): IHealthcarePlatformAnalyticsDashboard =>
    typia.random<IHealthcarePlatformAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
