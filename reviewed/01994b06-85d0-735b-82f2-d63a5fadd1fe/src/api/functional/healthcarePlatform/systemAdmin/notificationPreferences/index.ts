import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformNotificationPreference } from "../../../../structures/IHealthcarePlatformNotificationPreference";
import { IPageIHealthcarePlatformNotificationPreference } from "../../../../structures/IPageIHealthcarePlatformNotificationPreference";

/**
 * Create a new notification preference entry
 * (healthcare_platform_notification_preferences table).
 *
 * This API endpoint allows a user or platform administrator to create a
 * notification preference, which determines the method (channel), type, and
 * scope of notifications a user will receive. The
 * healthcare_platform_notification_preferences table stores whether the
 * preference is enabled, what kinds of escalation apply, and any mute or
 * do-not-disturb window for the alerts.
 *
 * Proper validation ensures the combination of (user_id, notification_channel,
 * notification_type) is unique, as enforced by the schema. Users typically
 * manage their own notification preferences, but organizational administrators
 * can manage preferences for their users via elevated privileges.
 *
 * If a preference already exists for the requested combination, the system
 * should return a conflict or ignore duplicates according to business policy.
 * All creations are logged for compliance.
 *
 * On success, the full notification preference record is returned, showing the
 * current settings. This endpoint is foundational to personalized alerting and
 * granular preference control in the healthcare SaaS platform.
 *
 * @param props.connection
 * @param props.body Specification for the notification preference being
 *   created, including channel, notification type, enable/disable state, and
 *   escalation details.
 * @path /healthcarePlatform/systemAdmin/notificationPreferences
 * @accessor api.functional.healthcarePlatform.systemAdmin.notificationPreferences.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Specification for the notification preference being created,
     * including channel, notification type, enable/disable state, and
     * escalation details.
     */
    body: IHealthcarePlatformNotificationPreference.ICreate;
  };
  export type Body = IHealthcarePlatformNotificationPreference.ICreate;
  export type Response = IHealthcarePlatformNotificationPreference;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/notificationPreferences";
  export const random = (): IHealthcarePlatformNotificationPreference =>
    typia.random<IHealthcarePlatformNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of notification preferences
 * (healthcare_platform_notification_preferences table).
 *
 * This API provides a paginated, filtered list of notification preferences
 * across the platform or within a user's context. The
 * healthcare_platform_notification_preferences table tracks per-user or
 * per-organization notification delivery channels, types, statuses
 * (enabled/disabled), mute settings, and escalation policy for each alert
 * type.
 *
 * Request body allows specifying search filters such as channel, type, enabled
 * flag, as well as page size and sorting fields. Only active and relevant
 * notification preferences are returned, according to the requestor's access
 * permissions.
 *
 * Sensitivity: Users should only be able to query their own preferences unless
 * granted administrative rights. Audit logs should record all search/filter
 * accesses for compliance.
 *
 * This functionality helps manage notification blast radius and user
 * communication policy at scale.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for filtering notification
 *   preferences.
 * @path /healthcarePlatform/systemAdmin/notificationPreferences
 * @accessor api.functional.healthcarePlatform.systemAdmin.notificationPreferences.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination criteria for filtering notification
     * preferences.
     */
    body: IHealthcarePlatformNotificationPreference.IRequest;
  };
  export type Body = IHealthcarePlatformNotificationPreference.IRequest;
  export type Response = IPageIHealthcarePlatformNotificationPreference;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/notificationPreferences";
  export const random = (): IPageIHealthcarePlatformNotificationPreference =>
    typia.random<IPageIHealthcarePlatformNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific notification preference by its ID
 * (healthcare_platform_notification_preferences table).
 *
 * This endpoint returns full details for a single notification preference
 * record, identified by notificationPreferenceId. Each notification preference
 * governs whether a user or organization receives a certain type of
 * notification over a particular channel (email, sms, in-app, etc.). The
 * healthcare_platform_notification_preferences table includes preferences for
 * mute windows, escalation handling, and enabled status.
 *
 * Security: Users may only access their own notification preferences unless
 * they have explicit privilege (admin roles). Sensitive or organizational
 * preferences may require elevated permissions. All access to user
 * configuration should be recorded for auditability.
 *
 * This is often used in user profile or notification settings views, and is the
 * foundation for interfaces that allow preference updates. Failure to find the
 * preference returns 404 Not Found.
 *
 * @param props.connection
 * @param props.notificationPreferenceId The unique identifier for the
 *   notification preference to retrieve.
 * @path /healthcarePlatform/systemAdmin/notificationPreferences/:notificationPreferenceId
 * @accessor api.functional.healthcarePlatform.systemAdmin.notificationPreferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier for the notification preference to retrieve. */
    notificationPreferenceId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformNotificationPreference;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/notificationPreferences/:notificationPreferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/notificationPreferences/${encodeURIComponent(props.notificationPreferenceId ?? "null")}`;
  export const random = (): IHealthcarePlatformNotificationPreference =>
    typia.random<IHealthcarePlatformNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationPreferenceId")(() =>
        typia.assert(props.notificationPreferenceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
