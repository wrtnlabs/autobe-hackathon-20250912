import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformUserOrgAssignment } from "../../../../structures/IHealthcarePlatformUserOrgAssignment";
import { IPageIHealthcarePlatformUserOrgAssignment } from "../../../../structures/IPageIHealthcarePlatformUserOrgAssignment";

/**
 * Create a new user-organization assignment
 * (healthcare_platform_user_org_assignments).
 *
 * POST /userOrgAssignments enables system or organization administrators to
 * provision a new user-organization link by creating a row in the
 * healthcare_platform_user_org_assignments Prisma table. This is essential for
 * assigning staff, clinical users, or admin users to an organization context
 * with clearly designated role and assignment metadata.
 *
 * Input validation ensures the referenced user and organization exist, the
 * role_code is valid for the org, and the assignment_status is permissible
 * (e.g., 'active', 'pending'). The operation triggers any onboarding or access
 * provisioning hooks defined in business logic. Audit requirements ensure the
 * assignment is recorded with all relevant metadata for review or compliance.
 *
 * Error handling includes duplicate assignment detection, permission
 * validation, and appropriate feedback for invalid data. This API is related to
 * update, erase, and listing/search endpoints to provide the full RBAC
 * management cycle.
 *
 * @param props.connection
 * @param props.body Required information for assigning a user to an
 *   organization and role.
 * @path /healthcarePlatform/systemAdmin/userOrgAssignments
 * @accessor api.functional.healthcarePlatform.systemAdmin.userOrgAssignments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required information for assigning a user to an organization and
     * role.
     */
    body: IHealthcarePlatformUserOrgAssignment.ICreate;
  };
  export type Body = IHealthcarePlatformUserOrgAssignment.ICreate;
  export type Response = IHealthcarePlatformUserOrgAssignment;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/userOrgAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/userOrgAssignments";
  export const random = (): IHealthcarePlatformUserOrgAssignment =>
    typia.random<IHealthcarePlatformUserOrgAssignment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate user-organization assignment records
 * (healthcare_platform_user_org_assignments).
 *
 * The PATCH /userOrgAssignments endpoint retrieves a filtered, paginated list
 * of user-organization-role assignments from the
 * healthcare_platform_user_org_assignments Prisma model. Administrators and
 * system staff can search, sort, and paginate assignments by user,
 * organization, role code, and assignment status, which is essential for
 * platform-wide RBAC enforcement and audits.
 *
 * The request body supports granular filtering (e.g., users with a specific
 * role within an organization, assignments pending approval, or recently
 * updated links). Security is vital; only users with system, organization, or
 * designated RBAC admin roles can access the full listing, and search results
 * are filtered to the requesting user's scope.
 *
 * Returned records provide summary assignment details (user_id,
 * organization_id, role, status, created/updated timestamps) useful for
 * auditing, onboarding/offboarding, or role review workflows. This operation
 * complements create, update, and erase endpoints for full user access
 * management.
 *
 * @param props.connection
 * @param props.body Filter, sort, and pagination controls for user-organization
 *   assignments search.
 * @path /healthcarePlatform/systemAdmin/userOrgAssignments
 * @accessor api.functional.healthcarePlatform.systemAdmin.userOrgAssignments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, sort, and pagination controls for user-organization
     * assignments search.
     */
    body: IHealthcarePlatformUserOrgAssignment.IRequest;
  };
  export type Body = IHealthcarePlatformUserOrgAssignment.IRequest;
  export type Response = IPageIHealthcarePlatformUserOrgAssignment;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/userOrgAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/userOrgAssignments";
  export const random = (): IPageIHealthcarePlatformUserOrgAssignment =>
    typia.random<IPageIHealthcarePlatformUserOrgAssignment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch details of a specific user-organization assignment
 * (healthcare_platform_user_org_assignments).
 *
 * GET /userOrgAssignments/{userOrgAssignmentId} provides complete details of a
 * user-organization assignment mapping via the
 * healthcare_platform_user_org_assignments Prisma table. It is used by system
 * and organization administrators to audit, review, or verify membership,
 * permission, and RBAC assignment history for a specific user within a tenant.
 *
 * The operation requires a valid UUID for the assignment. It returns assignment
 * metadata (user, organization, role, status, created/updated/deleted
 * timestamps), enabling workflows like offboarding, reassignment, or compliance
 * review. Security checks ensure only authorized staff can view sensitive
 * assignment information, with scope filtering as required by business rules.
 *
 * This operation is closely related to the search (list), create, update, and
 * erase endpoints for assignment management. Error handling includes addressal
 * of invalid, deleted, or non-existent IDs, returning useful HTTP errors.
 *
 * @param props.connection
 * @param props.userOrgAssignmentId Unique identifier for the user-organization
 *   assignment to retrieve.
 * @path /healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.userOrgAssignments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the user-organization assignment to retrieve. */
    userOrgAssignmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformUserOrgAssignment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/userOrgAssignments/${encodeURIComponent(props.userOrgAssignmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformUserOrgAssignment =>
    typia.random<IHealthcarePlatformUserOrgAssignment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userOrgAssignmentId")(() =>
        typia.assert(props.userOrgAssignmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing user-organization assignment
 * (healthcare_platform_user_org_assignments).
 *
 * This endpoint allows authorized staff to update an existing user-organization
 * assignment record in the healthcarePlatform. Multi-tenant healthcare
 * organizations rely on correct, up-to-date mapping of users (system admins,
 * medical staff, support) to their assigned organizations for all RBAC and
 * business logic.
 *
 * On update, only valid, active organization and role_code assignments are
 * allowed, and changes are strictly audit-logged. Business rules enforce single
 * assignment per user-org combination, requiring unique and active assignment
 * status. Role assignments may trigger additional workflows such as credential
 * checks or session invalidation for privilege downgrades. Critical roles
 * (organizationAdmin, departmentHead, medicalDoctor) require additional
 * verification and may affect open patient cases or operational approvals.
 *
 * Attempting to update with an invalid or deactivated role, inactive
 * organization, or conflicting assignment produces explicit validation errors.
 * All changes are tracked in financial, compliance, and core audit logs to
 * support HIPAA and internal investigations. If a user attempts to update a
 * record outside their permission scope or with insufficient privilege, the
 * system denies the update and logs the access attempt.
 *
 * This operation is closely related to userOrgAssignment creation (for
 * onboarding) and deletion/termination endpoints (for offboarding).
 *
 * @param props.connection
 * @param props.userOrgAssignmentId Unique identifier for the user-organization
 *   assignment to update
 * @param props.body Fields and values to update for this userOrgAssignment
 *   record.
 * @path /healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.userOrgAssignments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the user-organization assignment to update */
    userOrgAssignmentId: string & tags.Format<"uuid">;

    /** Fields and values to update for this userOrgAssignment record. */
    body: IHealthcarePlatformUserOrgAssignment.IUpdate;
  };
  export type Body = IHealthcarePlatformUserOrgAssignment.IUpdate;
  export type Response = IHealthcarePlatformUserOrgAssignment;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/userOrgAssignments/${encodeURIComponent(props.userOrgAssignmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformUserOrgAssignment =>
    typia.random<IHealthcarePlatformUserOrgAssignment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userOrgAssignmentId")(() =>
        typia.assert(props.userOrgAssignmentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a user-organization assignment
 * (healthcare_platform_user_org_assignments).
 *
 * Allows an authorized system or organization administrator to remove a
 * user-organization assignment by marking it as deleted (soft delete).
 *
 * Deleting a user-org assignment is a sensitive operation affecting a user's
 * RBAC and business workflow assignments. The endpoint enforces strict business
 * validation to prevent removal of critical assignments unless safely
 * transferable (for example, a department head role cannot be deleted if there
 * are open duties). Attempts to delete non-existent or non-active assignments
 * result in a clear error.
 *
 * All deletions are recorded for audit/compliance review, and access is denied
 * if the acting user lacks sufficient privilege. The operation is related to
 * the update (for role/status changes) and create endpoints (when onboarding
 * new staff or medical users).
 *
 * @param props.connection
 * @param props.userOrgAssignmentId Unique identifier for the user-organization
 *   assignment to be deleted.
 * @path /healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.userOrgAssignments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the user-organization assignment to be deleted. */
    userOrgAssignmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/userOrgAssignments/:userOrgAssignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/userOrgAssignments/${encodeURIComponent(props.userOrgAssignmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userOrgAssignmentId")(() =>
        typia.assert(props.userOrgAssignmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
