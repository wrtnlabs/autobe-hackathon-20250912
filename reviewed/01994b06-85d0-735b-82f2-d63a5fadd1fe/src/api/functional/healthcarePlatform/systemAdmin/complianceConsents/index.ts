import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformComplianceConsent } from "../../../../structures/IHealthcarePlatformComplianceConsent";
import { IPageIHealthcarePlatformComplianceConsent } from "../../../../structures/IPageIHealthcarePlatformComplianceConsent";

/**
 * Search and retrieve filtered/paginated compliance consent records for
 * regulatory audit.
 *
 * Retrieve a paginated and filtered list of compliance consent records, which
 * document explicit consent, revocation, and effective dates for patients and
 * staff. Each consent log is tied to an organization and a policy version, and
 * records consent scope, type, status (granted/revoked), and relevant time
 * windows.
 *
 * Advanced search enables administrators to filter by organization, subject,
 * policy, consent type/status, date range, and more. This supports targeted
 * audits, operational reviews, mass compliance check-ups, and dispute
 * investigations. The Prisma schema ensures every consent record is immutable,
 * versioned, and cross-linked to all relevant entities (policy, subject,
 * organization).
 *
 * Strict RBAC and audit logging are enforced to protect personal data and legal
 * compliance. Only users with system administrator or organization
 * administrator roles may access this endpoint, and all search/query actions
 * are recorded in the audit trail. Export of consents may be subject to
 * additional regulatory/policy control.
 *
 * @param props.connection
 * @param props.body Search and pagination/filter criteria for compliance
 *   consent audits (organization, subject, consent type, etc.)
 * @path /healthcarePlatform/systemAdmin/complianceConsents
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceConsents.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination/filter criteria for compliance consent audits
     * (organization, subject, consent type, etc.)
     */
    body: IHealthcarePlatformComplianceConsent.IRequest;
  };
  export type Body = IHealthcarePlatformComplianceConsent.IRequest;
  export type Response = IPageIHealthcarePlatformComplianceConsent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/complianceConsents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/complianceConsents";
  export const random =
    (): IPageIHealthcarePlatformComplianceConsent.ISummary =>
      typia.random<IPageIHealthcarePlatformComplianceConsent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full detail for a specific compliance consent record by ID.
 *
 * Retrieve a specific compliance consent record with comprehensive audit
 * details by its unique ID (complianceConsentId). Details include the subject's
 * identity, organization, related policy/version, granted/revoked status,
 * rationale/reason, and all timestamps relevant to consent lifecycle.
 *
 * This API enables compliance, operational, and legal staff to perform detailed
 * audits and resolve disputes around consent status, revocation, or regulatory
 * compliance with policies like HIPAA or GDPR. The Prisma schema ensures
 * traceability for each consent event, allows cross-checks to subject and
 * policy tables, and supports export of full audit records.
 *
 * User access is tightly restricted via RBAC, and all actions are appended to
 * the platform audit log. Use this in conjunction with list/search endpoints
 * for incident review or compliance evidence documentation.
 *
 * @param props.connection
 * @param props.complianceConsentId Unique identifier of the compliance consent
 *   record to retrieve.
 * @path /healthcarePlatform/systemAdmin/complianceConsents/:complianceConsentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceConsents.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the compliance consent record to retrieve. */
    complianceConsentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformComplianceConsent;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/complianceConsents/:complianceConsentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/complianceConsents/${encodeURIComponent(props.complianceConsentId ?? "null")}`;
  export const random = (): IHealthcarePlatformComplianceConsent =>
    typia.random<IHealthcarePlatformComplianceConsent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("complianceConsentId")(() =>
        typia.assert(props.complianceConsentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
