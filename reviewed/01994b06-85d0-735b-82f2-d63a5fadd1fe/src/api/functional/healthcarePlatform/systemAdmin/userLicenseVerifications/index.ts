import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformUserLicenseVerification } from "../../../../structures/IHealthcarePlatformUserLicenseVerification";
import { IPageIHealthcarePlatformUserLicenseVerification } from "../../../../structures/IPageIHealthcarePlatformUserLicenseVerification";

/**
 * Search and retrieve a paginated list of professional user license
 * verifications.
 *
 * Retrieve a paginated, filtered list of professional license verification
 * records for users in the healthcarePlatform. The operation queries the
 * healthcare_platform_user_license_verifications table, supporting advanced
 * filtering by user, user_type (e.g., medicaldoctor/nurse/technician),
 * verification status (valid/suspended/etc), and license type. The endpoint
 * allows compliance officers and administrators to proactively monitor
 * licensure status, revalidation requirements, and identify irregularities or
 * at-risk credentials.
 *
 * Access to this endpoint may be audit-logged and rate-limited due to the
 * sensitivity of licensure data. Appropriate business validation is required to
 * only expose responses to those with permission to moderate users/validate
 * credentials in organizational scope. The operation should enforce pagination,
 * search, and sorting. The response includes summary information for each
 * license verification, as well as pagination meta-data for UI display or bulk
 * review.
 *
 * @param props.connection
 * @param props.body Search filters and pagination for license verification
 *   records.
 * @path /healthcarePlatform/systemAdmin/userLicenseVerifications
 * @accessor api.functional.healthcarePlatform.systemAdmin.userLicenseVerifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination for license verification records. */
    body: IHealthcarePlatformUserLicenseVerification.IRequest;
  };
  export type Body = IHealthcarePlatformUserLicenseVerification.IRequest;
  export type Response =
    IPageIHealthcarePlatformUserLicenseVerification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/userLicenseVerifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/userLicenseVerifications";
  export const random =
    (): IPageIHealthcarePlatformUserLicenseVerification.ISummary =>
      typia.random<IPageIHealthcarePlatformUserLicenseVerification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific user license verification record by ID.
 *
 * Retrieve all details for a specific user professional license verification
 * record, given its unique ID. This operation reads the
 * healthcare_platform_user_license_verifications table and exposes all data for
 * the identified record, including user, user_type, license number and type,
 * current and prior verification status, and audit trail fields such as dates
 * and outcomes.
 *
 * This endpoint is used in compliance review, user audit, or for credential
 * revalidation workflows. Only authorized compliance or administrative staff
 * may access the detail, and all requests are logged for audit. The operation
 * must enforce UUID format and reply with a clear error if the record is
 * missing or access is not permitted. Related APIs include list, create, and
 * update for license verification records.
 *
 * @param props.connection
 * @param props.userLicenseVerificationId UUID of the license verification
 *   record to retrieve, from healthcare_platform_user_license_verifications.
 * @path /healthcarePlatform/systemAdmin/userLicenseVerifications/:userLicenseVerificationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.userLicenseVerifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * UUID of the license verification record to retrieve, from
     * healthcare_platform_user_license_verifications.
     */
    userLicenseVerificationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformUserLicenseVerification;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/userLicenseVerifications/:userLicenseVerificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/userLicenseVerifications/${encodeURIComponent(props.userLicenseVerificationId ?? "null")}`;
  export const random = (): IHealthcarePlatformUserLicenseVerification =>
    typia.random<IHealthcarePlatformUserLicenseVerification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userLicenseVerificationId")(() =>
        typia.assert(props.userLicenseVerificationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
