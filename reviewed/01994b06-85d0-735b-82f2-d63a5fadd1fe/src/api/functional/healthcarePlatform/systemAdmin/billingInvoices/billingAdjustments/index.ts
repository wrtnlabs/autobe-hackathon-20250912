import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingAdjustment } from "../../../../../structures/IHealthcarePlatformBillingAdjustment";
import { IPageIHealthcarePlatformBillingAdjustment } from "../../../../../structures/IPageIHealthcarePlatformBillingAdjustment";

/**
 * List all billing adjustments for a given invoice, supporting pagination and
 * filtering.
 *
 * Obtain a paginated list of all billing adjustments applied to the specified
 * billing invoice. The billing adjustments, which may include insurance
 * write-offs, patient discounts, and administrative corrections, are filtered
 * to the target invoice using the billingInvoiceId path parameter. Additional
 * filtering, searching, or sorting may be provided via the request body.
 *
 * Access to this operation is restricted to billing staff, system
 * administrators, and organization administrators. All data is returned in
 * accordance with permission scopes, organizational boundaries, and audit
 * requirements. The operation is essential for financial reconciliation,
 * compliance audits, and patient billing inquiries. Related endpoints include
 * adjustment creation and retrieval.
 *
 * @param props.connection
 * @param props.billingInvoiceId The unique identifier for the invoice whose
 *   adjustments are to be listed.
 * @param props.body Filtering, sorting, and pagination parameters for billing
 *   adjustments.
 * @path /healthcarePlatform/systemAdmin/billingInvoices/:billingInvoiceId/billingAdjustments
 * @accessor api.functional.healthcarePlatform.systemAdmin.billingInvoices.billingAdjustments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier for the invoice whose adjustments are to be
     * listed.
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Filtering, sorting, and pagination parameters for billing
     * adjustments.
     */
    body: IHealthcarePlatformBillingAdjustment.IRequest;
  };
  export type Body = IHealthcarePlatformBillingAdjustment.IRequest;
  export type Response = IPageIHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/billingInvoices/:billingInvoiceId/billingAdjustments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments`;
  export const random = (): IPageIHealthcarePlatformBillingAdjustment =>
    typia.random<IPageIHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single billing adjustment's detailed information for a specific
 * invoice.
 *
 * Fetch complete metadata and details for a single billing adjustment belonging
 * to the specified invoice, identified by both the parent billingInvoiceId and
 * the billingAdjustmentId. Response includes type, value, timestamps,
 * description, and references to impacted items or invoices.
 *
 * Access is limited to systemAdmin and organizationAdmin roles, ensuring only
 * appropriate staff may inspect adjustment records. All requests and resulting
 * actions are fully audit-logged for compliance and regulatory purposes.
 * Related endpoints support adjustment modification and broader invoice/billing
 * review.
 *
 * @param props.connection
 * @param props.billingInvoiceId The unique identifier for the parent invoice of
 *   the adjustment.
 * @param props.billingAdjustmentId The unique identifier for the billing
 *   adjustment to retrieve.
 * @path /healthcarePlatform/systemAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.billingInvoices.billingAdjustments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier for the parent invoice of the adjustment. */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** The unique identifier for the billing adjustment to retrieve. */
    billingAdjustmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments/${encodeURIComponent(props.billingAdjustmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingAdjustment =>
    typia.random<IHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingAdjustmentId")(() =>
        typia.assert(props.billingAdjustmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
