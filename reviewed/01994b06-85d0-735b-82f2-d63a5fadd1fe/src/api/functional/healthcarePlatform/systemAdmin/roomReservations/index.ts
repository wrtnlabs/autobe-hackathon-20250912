import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRoomReservation } from "../../../../structures/IHealthcarePlatformRoomReservation";

/**
 * Retrieve detailed information on a room reservation
 * (healthcare_platform_room_reservations).
 *
 * This API endpoint allows users to retrieve complete details of a specific
 * room reservation by its unique identifier. Room reservations in the system
 * support operational and clinical scheduling, including appointments,
 * maintenance, cleaning, and admin activities.
 *
 * Security considerations: Only users with appropriate privileges (e.g.,
 * admins, scheduling staff) may access this data. All access is audited for
 * compliance. Returned data includes the room reference, time window,
 * reservation type, appointment connection (if present), and modification audit
 * timestamps.
 *
 * Room reservations are linked to the organization's resource registry but are
 * not deleted when the resource is decommissioned, ensuring historical
 * reporting. Errors occur when the roomReservationId does not exist or the user
 * does not have access rights, with a clear 404/403 error structure. Soft
 * deleted reservations are not returned by default.
 *
 * @param props.connection
 * @param props.roomReservationId Unique identifier of the target room
 *   reservation
 * @path /healthcarePlatform/systemAdmin/roomReservations/:roomReservationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roomReservations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target room reservation */
    roomReservationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRoomReservation;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/roomReservations/:roomReservationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/roomReservations/${encodeURIComponent(props.roomReservationId ?? "null")}`;
  export const random = (): IHealthcarePlatformRoomReservation =>
    typia.random<IHealthcarePlatformRoomReservation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roomReservationId")(() =>
        typia.assert(props.roomReservationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing room reservation (healthcare_platform_room_reservations).
 *
 * Allows scheduling staff to update the attributes of a specific room
 * reservation, such as reservation time, room assignment, reservation type, or
 * linkage to appointment.
 *
 * Security considerations: Only system admins, organization admins, department
 * heads, or receptionists may update a room reservation, and all actions are
 * audited for compliance and resource conflict review.
 *
 * Validation: If the update would create a conflict (double-booking or
 * violating lead/cancel window) or the reservation no longer exists, the system
 * returns a 400/404 error. Successful updates reflect the new resource/booked
 * window and audit timestamps. Soft-deleted reservations cannot be updated.
 *
 * The endpoint references the healthcare_platform_room_reservations schema and
 * validates against all schema-defined relations to ensure referential
 * integrity.
 *
 * @param props.connection
 * @param props.roomReservationId Unique identifier of the room reservation to
 *   update
 * @param props.body Updated data for the room reservation, including new
 *   timing, resource, or appointment connectivity
 * @path /healthcarePlatform/systemAdmin/roomReservations/:roomReservationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roomReservations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the room reservation to update */
    roomReservationId: string & tags.Format<"uuid">;

    /**
     * Updated data for the room reservation, including new timing,
     * resource, or appointment connectivity
     */
    body: IHealthcarePlatformRoomReservation.IUpdate;
  };
  export type Body = IHealthcarePlatformRoomReservation.IUpdate;
  export type Response = IHealthcarePlatformRoomReservation;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/roomReservations/:roomReservationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/roomReservations/${encodeURIComponent(props.roomReservationId ?? "null")}`;
  export const random = (): IHealthcarePlatformRoomReservation =>
    typia.random<IHealthcarePlatformRoomReservation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roomReservationId")(() =>
        typia.assert(props.roomReservationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a room reservation by ID (healthcare_platform_room_reservations).
 *
 * The API endpoint allows authorized users (admins, department heads,
 * receptionists) to delete an existing room reservation by unique ID. This
 * action marks the reservation as deleted for compliance-mandated record
 * retention (soft delete semantics, setting 'deleted_at').
 *
 * Security: Only users with scheduling roles may perform this operation, and
 * all actions are audit-logged with reference to actor, timestamp, and affected
 * resource.
 *
 * Successful erasure results in the record becoming unavailable to standard
 * queries. Attempts to delete a nonexistent or already deleted reservation
 * return a 404.
 *
 * Related operations: Room reservation search, room scheduling, and audit log
 * inspection may reference the same entity for organizational workflows and
 * compliance controls.
 *
 * @param props.connection
 * @param props.roomReservationId Unique identifier of the room reservation to
 *   delete
 * @path /healthcarePlatform/systemAdmin/roomReservations/:roomReservationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roomReservations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the room reservation to delete */
    roomReservationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/roomReservations/:roomReservationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/roomReservations/${encodeURIComponent(props.roomReservationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roomReservationId")(() =>
        typia.assert(props.roomReservationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new room reservation (healthcare_platform_room_reservations).
 *
 * This API creates a new reservation for a physical room within an
 * organization, supporting workflows including appointment booking, maintenance
 * blocking, and event management. The request provides room, time, type, and
 * optional appointment linkage.
 *
 * Security considerations: Only scheduling-capable roles (system admin,
 * organization admin, department head, receptionist) may invoke this operation;
 * audit logs record reservation details, actor, and rationale.
 *
 * Validation includes preventing double-bookings, enforcing minimum lead/cancel
 * times, and checking room/resource existence. Errors include invalid time
 * windows, permission issues, or pre-existing reservation conflict. On success,
 * the full reservation details are returned for further workflow integration
 * and dashboard purposes.
 *
 * @param props.connection
 * @param props.body Details for new room reservation entry, including room,
 *   schedule, and reservation type.
 * @path /healthcarePlatform/systemAdmin/roomReservations
 * @accessor api.functional.healthcarePlatform.systemAdmin.roomReservations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details for new room reservation entry, including room, schedule, and
     * reservation type.
     */
    body: IHealthcarePlatformRoomReservation.ICreate;
  };
  export type Body = IHealthcarePlatformRoomReservation.ICreate;
  export type Response = IHealthcarePlatformRoomReservation;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/roomReservations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/roomReservations";
  export const random = (): IHealthcarePlatformRoomReservation =>
    typia.random<IHealthcarePlatformRoomReservation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
