import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformTelemedicineSession } from "../../../../structures/IHealthcarePlatformTelemedicineSession";

/**
 * Create a new telemedicine session record (TelemedicineSession table) in
 * healthcarePlatform.
 *
 * Create a new telemedicine session for a scheduled appointment. This operation
 * is used by authorized staff or system processes to generate secure
 * telemedicine sessions linked to a specific appointment.
 *
 * During creation, all required information about the appointment, session
 * start/end times, secure access link, and provider/patient associations must
 * be provided. Security controls ensure only authorized roles (such as
 * systemAdmin, organizationAdmin, or medicalDoctor) can invoke this operation.
 * Session creation is logged for audit.
 *
 * On success, the response includes the full session record with join link and
 * timing details, suitable for further integration with video platforms or
 * calendar notifications.
 *
 * @param props.connection
 * @param props.body Payload for creating a telemedicine session including
 *   appointment association, times, join link, and recording flag.
 * @path /healthcarePlatform/systemAdmin/telemedicineSessions
 * @accessor api.functional.healthcarePlatform.systemAdmin.telemedicineSessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload for creating a telemedicine session including appointment
     * association, times, join link, and recording flag.
     */
    body: IHealthcarePlatformTelemedicineSession.ICreate;
  };
  export type Body = IHealthcarePlatformTelemedicineSession.ICreate;
  export type Response = IHealthcarePlatformTelemedicineSession;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/telemedicineSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/telemedicineSessions";
  export const random = (): IHealthcarePlatformTelemedicineSession =>
    typia.random<IHealthcarePlatformTelemedicineSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details for a telemedicine session (TelemedicineSession table) by
 * telemedicineSessionId.
 *
 * Update details of an existing telemedicine session such as session start/end
 * times, link, or session recording flag. Only authorized staff
 * (organizationAdmin, medicalDoctor, or systemAdmin) may perform updates, and
 * actions are audited for compliance.
 *
 * The session identifier in the path parameter selects the telemedicine session
 * record to update. The request body must include the fields to be modified as
 * defined in the update schema. This operation supports modifying the session
 * (for example, to reschedule, update links, or change recording preferences)
 * as business workflows require. Auditing ensures tracking of all changes for
 * security and compliance review.
 *
 * @param props.connection
 * @param props.telemedicineSessionId Unique identifier (UUID) of the
 *   telemedicine session to be updated.
 * @param props.body Fields to update in the telemedicine session (times, join
 *   link, session_recorded, etc)
 * @path /healthcarePlatform/systemAdmin/telemedicineSessions/:telemedicineSessionId
 * @accessor api.functional.healthcarePlatform.systemAdmin.telemedicineSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the telemedicine session to be updated. */
    telemedicineSessionId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the telemedicine session (times, join link,
     * session_recorded, etc)
     */
    body: IHealthcarePlatformTelemedicineSession.IUpdate;
  };
  export type Body = IHealthcarePlatformTelemedicineSession.IUpdate;
  export type Response = IHealthcarePlatformTelemedicineSession;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/telemedicineSessions/:telemedicineSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/telemedicineSessions/${encodeURIComponent(props.telemedicineSessionId ?? "null")}`;
  export const random = (): IHealthcarePlatformTelemedicineSession =>
    typia.random<IHealthcarePlatformTelemedicineSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("telemedicineSessionId")(() =>
        typia.assert(props.telemedicineSessionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a telemedicine session by telemedicineSessionId
 * (TelemedicineSession table hard delete).
 *
 * Permanently remove an existing telemedicine session. Only users with
 * systemAdmin, organizationAdmin, or medicalDoctor roles are authorized to
 * perform this action. The operation is audited for compliance purposes.
 *
 * This operation should be used with care, as deleted session records and
 * metadata cannot be restored. Deletion checks may prevent removal if the
 * session is still linked to future appointments or is in use.
 *
 * @param props.connection
 * @param props.telemedicineSessionId Unique identifier (UUID) for the
 *   telemedicine session that should be deleted.
 * @path /healthcarePlatform/systemAdmin/telemedicineSessions/:telemedicineSessionId
 * @accessor api.functional.healthcarePlatform.systemAdmin.telemedicineSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) for the telemedicine session that should be
     * deleted.
     */
    telemedicineSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/telemedicineSessions/:telemedicineSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/telemedicineSessions/${encodeURIComponent(props.telemedicineSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("telemedicineSessionId")(() =>
        typia.assert(props.telemedicineSessionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
