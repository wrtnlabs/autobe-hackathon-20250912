import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRole } from "../../../../structures/IHealthcarePlatformRole";
import { IPageIHealthcarePlatformRole } from "../../../../structures/IPageIHealthcarePlatformRole";

/**
 * Create a new RBAC role (platform/org/department) in healthcarePlatform.
 *
 * Create a new role in the healthcarePlatform, which may apply at the platform,
 * organization, or department scope, and is used for mapping permissions,
 * controlling access, and managing role-based security. Roles created through
 * this endpoint support hierarchical access models and support all compliance
 * and audit requirements as described in the Prisma schema.
 *
 * Security: Only system administrators can create new top-level roles, while
 * organization administrators may create organization or department specific
 * roles, subject to business logic constraints and compliance reviews. Role
 * codes must be unique within their scope. Care must be taken to avoid
 * accidental creation of redundant or conflicting roles.
 *
 * Relationships: The role entity is referenced from user assignments and
 * defines boundaries for all permission grants and business rule enforcement.
 * Changes may impact user access and workflow eligibility across the system.
 *
 * Validation and Business Logic: Code and name fields are required; scope_type
 * must be one of the supported RBAC segmentation types; status should reflect
 * intended operational state; creation and update timestamps are managed by the
 * system. After creation, roles are available for assignment to users or
 * business operations.
 *
 * Related Operations: Role creation is often performed prior to bulk user
 * onboarding, permission mapping, or organization setup. Ensure that
 * permissions are mapped for the new role via the permissions endpoint.
 *
 * @param props.connection
 * @param props.body Data required to define the new RBAC role, including code,
 *   display name, scope level, and operational status.
 * @path /healthcarePlatform/systemAdmin/roles
 * @accessor api.functional.healthcarePlatform.systemAdmin.roles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to define the new RBAC role, including code, display
     * name, scope level, and operational status.
     */
    body: IHealthcarePlatformRole.ICreate;
  };
  export type Body = IHealthcarePlatformRole.ICreate;
  export type Response = IHealthcarePlatformRole;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/roles";
  export const random = (): IHealthcarePlatformRole =>
    typia.random<IHealthcarePlatformRole>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate the list of roles in the platform
 * (healthcare_platform_roles table).
 *
 * This endpoint provides advanced search capabilities for listing roles managed
 * by the platform. Users can apply flexible search criteria, sort results by
 * creation date, name, or code, and paginate through potentially large result
 * sets. The request body allows detailed filtering on properties such as code,
 * name, scope_type (platform, organization, department), and status (active,
 * retired, system-only, archived), reflecting the RBAC policy structure
 * outlined in the Prisma schema.
 *
 * Results support organization-scoped queries and can be restricted or ordered
 * by scope and status as necessary for administrative management of roles.
 * Performance is optimized for filtered, paginated retrieval and integrates
 * role-based access control logic to ensure users only view roles within their
 * permitted administrative scope.
 *
 * The output is a paginated container (IPageIHealthcarePlatformRole.ISummary)
 * suitable for management UI and auditing functions. Errors related to invalid
 * filters or lack of permission are clearly reported.
 *
 * @param props.connection
 * @param props.body Role search and pagination parameters as described by
 *   IHealthcarePlatformRole.IRequest.
 * @path /healthcarePlatform/systemAdmin/roles
 * @accessor api.functional.healthcarePlatform.systemAdmin.roles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Role search and pagination parameters as described by
     * IHealthcarePlatformRole.IRequest.
     */
    body: IHealthcarePlatformRole.IRequest;
  };
  export type Body = IHealthcarePlatformRole.IRequest;
  export type Response = IPageIHealthcarePlatformRole.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/roles";
  export const random = (): IPageIHealthcarePlatformRole.ISummary =>
    typia.random<IPageIHealthcarePlatformRole.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific role entity by ID (healthcare_platform_roles
 * table).
 *
 * This endpoint enables platform and organizational administrators to retrieve
 * full details about a specific role by its unique identifier (roleId). The
 * output includes all fields annotated in the healthcare_platform_roles Prisma
 * schema, such as the role's code, display name, scope_type (platform,
 * organization, department), current status, and creation/update timestamps.
 *
 * Access to this endpoint is governed by administrative privileges as outlined
 * in the RBAC configuration. The operation is essential for reviewing and
 * confirming role definitions, ensuring compliance with RBAC policies, and
 * providing source-of-truth data for audits. Errors are returned when access is
 * denied or the role is not found.
 *
 * @param props.connection
 * @param props.roleId Globally unique identifier of the role to retrieve.
 * @path /healthcarePlatform/systemAdmin/roles/:roleId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Globally unique identifier of the role to retrieve. */
    roleId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRole;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/roles/:roleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/roles/${encodeURIComponent(props.roleId ?? "null")}`;
  export const random = (): IHealthcarePlatformRole =>
    typia.random<IHealthcarePlatformRole>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleId")(() => typia.assert(props.roleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing RBAC role's display name, status, or description.
 *
 * Update mutable fields of a role entity, specifically supporting changes to
 * name, status, and display information. Use case includes correcting
 * nomenclature, retiring a role, or activating a dormant RBAC definition. Role
 * codes and scope_type are immutable after creation for security and compliance
 * reasons, as enforcing these constraints is critical for auditable identity
 * and access management.
 *
 * Security: Only system administrators or organization administrators at the
 * appropriate scope may perform updates. The operation checks for reference
 * integrity to prevent updates that would violate downstream RBAC or workflow
 * dependencies.
 *
 * Relationship and Impact: This change is reflected in all RBAC assignments,
 * permissions, and workflow authorizations tied to the updated role. Inactive
 * or retired roles may not be reassigned to users post-update, but all
 * historical audit/use information is retained as per Prisma schema guidelines
 * and regulatory compliance.
 *
 * Validation: All updates must comply with input validation logic—name and
 * status fields must not be empty and status must match allowed business
 * values. Attempting to change locked fields (code/scope_type) will result in
 * validation errors.
 *
 * Error Handling: If the roleId does not reference a valid existing role, the
 * operation will return a 404 error; business rules violation or malformed
 * update details will cause 400 validation errors.
 *
 * @param props.connection
 * @param props.roleId Unique identifier for the RBAC role to update.
 * @param props.body Fields to update for the target RBAC role (name, status,
 *   description). Code and scope_type are immutable.
 * @path /healthcarePlatform/systemAdmin/roles/:roleId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the RBAC role to update. */
    roleId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the target RBAC role (name, status,
     * description). Code and scope_type are immutable.
     */
    body: IHealthcarePlatformRole.IUpdate;
  };
  export type Body = IHealthcarePlatformRole.IUpdate;
  export type Response = IHealthcarePlatformRole;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/roles/:roleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/roles/${encodeURIComponent(props.roleId ?? "null")}`;
  export const random = (): IHealthcarePlatformRole =>
    typia.random<IHealthcarePlatformRole>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleId")(() => typia.assert(props.roleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove an unassigned RBAC role from the healthcarePlatform
 * system.
 *
 * Permanently delete a role record from the healthcarePlatform. This operation
 * enforces reference checks to guarantee the role is not assigned or in use
 * before removal; attempts to delete assigned or active roles will result in
 * error responses. Roles eligible for deletion are completely removed from
 * system access lists and cannot be restored—this operation is a hard delete,
 * not a soft delete, according to the Prisma schema. All audit trails of role
 * usage persist per the system's compliance policies.
 *
 * Security: Erasure of roles can only be performed by a system administrator.
 * This is typically a maintenance operation for deprecated or erroneous roles
 * no longer required by business logic, and is subject to strict audit
 * requirements.
 *
 * Relationship: If a role is referenced, deletion triggers validation errors.
 * Deletion of unreferenced roles has no impact on audit logs or historical
 * access.
 *
 * Error Handling: Deleting a non-existent role, or any role still in use,
 * results in 4XX error codes and descriptive error responses, in line with
 * strict compliance enforcement demands.
 *
 * @param props.connection
 * @param props.roleId Unique identifier of the RBAC role to delete.
 * @path /healthcarePlatform/systemAdmin/roles/:roleId
 * @accessor api.functional.healthcarePlatform.systemAdmin.roles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the RBAC role to delete. */
    roleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/roles/:roleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/roles/${encodeURIComponent(props.roleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleId")(() => typia.assert(props.roleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
