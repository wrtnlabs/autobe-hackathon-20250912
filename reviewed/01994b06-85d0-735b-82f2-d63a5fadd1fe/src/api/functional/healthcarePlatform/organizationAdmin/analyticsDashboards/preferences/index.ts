import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDashboardPreference } from "../../../../../structures/IHealthcarePlatformDashboardPreference";
import { IPageIHealthcarePlatformDashboardPreference } from "../../../../../structures/IPageIHealthcarePlatformDashboardPreference";

/**
 * Create a new analytics dashboard preferences record
 * (IHealthcarePlatformDashboardPreference) for a specific dashboard.
 *
 * Creates a new preference record for dashboard customization, storing
 * user-specific settings such as theme, layout, filters, widget configuration,
 * and last-view state for the given dashboardId parameter. The operation writes
 * to the healthcare_platform_dashboard_preferences table, tying the new record
 * to the requesting user and the dashboard specified by the path parameter.
 * Authorization is required to ensure the user owns or has been granted edit
 * access to the dashboard. The request body must follow the
 * IHealthcarePlatformDashboardPreference.ICreate schema, including the
 * necessary configuration parameters for preferences creation. On success, the
 * operation returns the newly created IHealthcarePlatformDashboardPreference
 * object, reflecting all user-specified settings and the dashboard association.
 * Error handling includes validation for dashboard existence, permission
 * checks, and duplicate profile handling where a preference already exists for
 * the user/dashboard combination.
 *
 * @param props.connection
 * @param props.dashboardId The unique identifier of the analytics dashboard for
 *   which the user preferences are being created.
 * @param props.body User's dashboard preference configuration data for
 *   creation.
 * @path /healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsDashboards.preferences.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the analytics dashboard for which the user
     * preferences are being created.
     */
    dashboardId: string & tags.Format<"uuid">;

    /** User's dashboard preference configuration data for creation. */
    body: IHealthcarePlatformDashboardPreference.ICreate;
  };
  export type Body = IHealthcarePlatformDashboardPreference.ICreate;
  export type Response = IHealthcarePlatformDashboardPreference;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}/preferences`;
  export const random = (): IHealthcarePlatformDashboardPreference =>
    typia.random<IHealthcarePlatformDashboardPreference>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate dashboard preferences for a specific analytics dashboard
 * (healthcare_platform_dashboard_preferences table).
 *
 * This operation fetches a paginated, possibly filtered list of user preference
 * records associated with a specific analytics dashboard, referenced by
 * dashboardId. It reads from the healthcare_platform_dashboard_preferences
 * table and returns a list of matching preference objects, supporting advanced
 * search, sorting, and pagination through the request body.
 *
 * Security is enforced such that only the dashboard owner, admins, or users
 * with proper assignment can access preference data for the dashboard. Input
 * request parameters allow filtering by userId, search keywords, or custom
 * metadata contained in the preferences. The response pages and sorts results
 * based on standard fields like last_viewed_at, created_at, or updated_at.
 *
 * All access is logged for audit purposes. Attempts to fetch preferences for
 * non-existent or inaccessible dashboards return business validation errors.
 *
 * @param props.connection
 * @param props.dashboardId Unique identifier of the dashboard whose preferences
 *   are being queried.
 * @param props.body Filter, search, and pagination parameters for dashboard
 *   preference retrieval.
 * @path /healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsDashboards.preferences.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the dashboard whose preferences are being
     * queried.
     */
    dashboardId: string & tags.Format<"uuid">;

    /**
     * Filter, search, and pagination parameters for dashboard preference
     * retrieval.
     */
    body: IHealthcarePlatformDashboardPreference.IRequest;
  };
  export type Body = IHealthcarePlatformDashboardPreference.IRequest;
  export type Response = IPageIHealthcarePlatformDashboardPreference;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}/preferences`;
  export const random = (): IPageIHealthcarePlatformDashboardPreference =>
    typia.random<IPageIHealthcarePlatformDashboardPreference>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific dashboard preference object by dashboardId and
 * preferenceId (healthcare_platform_dashboard_preferences table).
 *
 * Provides detailed information about a single userâ€™s dashboard preference
 * settings, identified by preferenceId and associated with a specific
 * dashboardId. It queries healthcare_platform_dashboard_preferences, ensuring
 * the record exists, that the requester is authorized (dashboard owner,
 * assigned user, or admin), and returns the full preference object.
 *
 * Error conditions include missing or mismatched dashboard and preference IDs,
 * unauthorized access, or if the preference has been deleted. Data returned
 * supports user experience personalization, auditing, and preference management
 * requirements.
 *
 * The operation is audited; all retrievals are tracked for compliance and
 * outlier monitoring. Related APIs include preference search/list (PATCH
 * /analyticsDashboards/{dashboardId}/preferences) and update operations.
 *
 * @param props.connection
 * @param props.dashboardId Unique identifier of the dashboard to which the
 *   preference belongs.
 * @param props.preferenceId Unique identifier of the dashboard preference being
 *   retrieved.
 * @path /healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsDashboards.preferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the dashboard to which the preference belongs. */
    dashboardId: string & tags.Format<"uuid">;

    /** Unique identifier of the dashboard preference being retrieved. */
    preferenceId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformDashboardPreference;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}/preferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): IHealthcarePlatformDashboardPreference =>
    typia.random<IHealthcarePlatformDashboardPreference>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update analytics dashboard preferences
 * (IHealthcarePlatformDashboardPreference) for a specific dashboard and
 * preference.
 *
 * Updates an existing preference record for dashboard customization, allowing
 * users to change saved settings like theme, dashboard layout, widget
 * configuration, and personal filter states for the identified dashboard and
 * preferenceId. The operation mandates authorization to ensure that only the
 * preference owner or users with matching permissions can update the settings.
 * The request body follows the IHealthcarePlatformDashboardPreference.IUpdate
 * schema, specifying the exact configuration updates desired. The operation
 * writes to the healthcare_platform_dashboard_preferences table, ensuring audit
 * logs are maintained for all changes as per compliance requirements. On
 * success, it returns the updated IHealthcarePlatformDashboardPreference
 * object, reflecting the new state. Validation handles dashboard and preference
 * existence, authorization checks, and ensures no other preference is
 * overwritten by mistake.
 *
 * @param props.connection
 * @param props.dashboardId The unique identifier of the analytics dashboard for
 *   which the user preference is being updated.
 * @param props.preferenceId The unique identifier for the user dashboard
 *   preference record to update.
 * @param props.body Dashboard preferences configuration changes to update
 *   (partial or full).
 * @path /healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsDashboards.preferences.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the analytics dashboard for which the user
     * preference is being updated.
     */
    dashboardId: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the user dashboard preference record to
     * update.
     */
    preferenceId: string & tags.Format<"uuid">;

    /**
     * Dashboard preferences configuration changes to update (partial or
     * full).
     */
    body: IHealthcarePlatformDashboardPreference.IUpdate;
  };
  export type Body = IHealthcarePlatformDashboardPreference.IUpdate;
  export type Response = IHealthcarePlatformDashboardPreference;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}/preferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): IHealthcarePlatformDashboardPreference =>
    typia.random<IHealthcarePlatformDashboardPreference>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase (soft-delete) dashboard preferences
 * (IHealthcarePlatformDashboardPreference) for a given dashboard and
 * preference.
 *
 * Permanently disables a user or organization's dashboard preference settings
 * by marking the specified preference record as deleted via the deleted_at
 * column in the healthcare_platform_dashboard_preferences table (soft delete).
 * This disables all customizations for the specified dashboard until a new
 * preference is created. Authorization is required to ensure only the owner or
 * designated admin can erase the preference record. Successful response returns
 * no content. Validation includes existence checks for both dashboard and
 * preferenceId, as well as proper permission enforcement. If preference is
 * already deleted, the operation is idempotent and returns success.
 *
 * @param props.connection
 * @param props.dashboardId The unique identifier of the analytics dashboard for
 *   which the preference is erased.
 * @param props.preferenceId The unique identifier for the user dashboard
 *   preference record to erase.
 * @path /healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsDashboards.preferences.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the analytics dashboard for which the
     * preference is erased.
     */
    dashboardId: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the user dashboard preference record to
     * erase.
     */
    preferenceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences/:preferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}/preferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
