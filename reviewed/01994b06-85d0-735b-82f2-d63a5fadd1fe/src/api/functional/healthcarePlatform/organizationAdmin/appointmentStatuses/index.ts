import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAppointmentStatus } from "../../../../structures/IHealthcarePlatformAppointmentStatus";
import { IPageIHealthcarePlatformAppointmentStatus } from "../../../../structures/IPageIHealthcarePlatformAppointmentStatus";

/**
 * Create a new appointment status code and configuration in the scheduling
 * system.
 *
 * This API operation enables authorized organization administrators or
 * scheduling staff to create a new appointment status definition. Appointment
 * statuses power the workflow logic of the scheduling subsystem—each status
 * defines a state such as scheduled, confirmed, cancelled, or no-show, and
 * includes both the business code and human label used in the UI.
 *
 * The operation creates a row in the healthcare_platform_appointment_statuses
 * table and accepts a creation DTO with fields such as status_code (unique
 * within the table), display_name, business_status, and sort_order.
 *
 * Security: Only roles with explicit scheduling or organizational permission
 * (organizationAdmin, receptionist) may create appointment statuses. Business
 * rules ensure that the status code is unique and well-formed, that required
 * fields are provided, and that sort_order does not conflict with existing
 * records.
 *
 * Validation: Attempts to create duplicate codes, missing required fields, or
 * illogical business_status/sort_order combinations result in validation
 * errors. The operation is auditable; all creations are tracked as part of
 * configuration change history.
 *
 * On success, the full new status definition is returned.
 *
 * @param props.connection
 * @param props.body New appointment status details: unique code, display label,
 *   grouping, and sort order.
 * @path /healthcarePlatform/organizationAdmin/appointmentStatuses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointmentStatuses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New appointment status details: unique code, display label, grouping,
     * and sort order.
     */
    body: IHealthcarePlatformAppointmentStatus.ICreate;
  };
  export type Body = IHealthcarePlatformAppointmentStatus.ICreate;
  export type Response = IHealthcarePlatformAppointmentStatus;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/appointmentStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/appointmentStatuses";
  export const random = (): IHealthcarePlatformAppointmentStatus =>
    typia.random<IHealthcarePlatformAppointmentStatus>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search all appointment statuses in the scheduling module.
 *
 * This API operation allows users with scheduling management privileges to
 * search and retrieve appointment status definitions across the platform.
 * Appointment statuses define the possible states of appointments (e.g.,
 * scheduled, confirmed, canceled, no-show) and are critical for scheduling
 * workflows, UI flow, and business rules enforcement.
 *
 * This operation queries the healthcare_platform_appointment_statuses table,
 * returning paginated and optionally filtered results. Supported filters may
 * include business_status, display_name, or custom sort_order. The operation
 * returns both core codes and user-facing display names.
 *
 * Security: Typically, this endpoint is available to authenticated users (e.g.,
 * receptionists, clinical operations staff) to power UI components, dashboard
 * analytics, or business settings screens. No sensitive data is exposed—content
 * is non-PHI but critical for workflow logic.
 *
 * Validation: If filters or sorting parameters are invalid, a validation error
 * is generated. Pagination ensures efficient retrieval even with large status
 * dictionaries. Related endpoints include status creation, update, or detail
 * retrieval per appointment status.
 *
 * @param props.connection
 * @param props.body Searching, filtering, or sorting criteria for appointment
 *   statuses (e.g., by status_code, display_name, or order).
 * @path /healthcarePlatform/organizationAdmin/appointmentStatuses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointmentStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Searching, filtering, or sorting criteria for appointment statuses
     * (e.g., by status_code, display_name, or order).
     */
    body: IHealthcarePlatformAppointmentStatus.IRequest;
  };
  export type Body = IHealthcarePlatformAppointmentStatus.IRequest;
  export type Response = IPageIHealthcarePlatformAppointmentStatus.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/appointmentStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/appointmentStatuses";
  export const random =
    (): IPageIHealthcarePlatformAppointmentStatus.ISummary =>
      typia.random<IPageIHealthcarePlatformAppointmentStatus.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details for a single appointment status identified by statusId.
 *
 * This API operation is used to fetch the detailed definition of a specific
 * appointment status. It returns information such as the workflow code, display
 * label, business grouping (active, closed), and UI sorting order for the
 * status requested by statusId.
 *
 * Access to this operation is typically required by scheduling staff, system
 * administrators, or integration clients needing to understand or validate
 * appointment state flows. The associated table
 * (healthcare_platform_appointment_statuses) acts as the canonical registry for
 * system-wide and organizational status options.
 *
 * Security: There is minimal sensitivity—the data is non-PHI and may be
 * accessible to authenticated reception, admin, and scheduling roles. The
 * operation supports business/operational UI and workflow configuration, and is
 * essential for custom rule-building or display logic in downstream
 * applications.
 *
 * Validation: If statusId does not exist, an error is returned. This endpoint
 * is read-only; updates and creation are managed via separate endpoints.
 *
 * @param props.connection
 * @param props.statusId Unique identifier for the target appointment status to
 *   retrieve.
 * @path /healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointmentStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target appointment status to retrieve. */
    statusId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAppointmentStatus;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentStatus =>
    typia.random<IHealthcarePlatformAppointmentStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an appointment status in healthcare_platform_appointment_statuses
 * table.
 *
 * This operation enables a system administrator or organization administrator
 * to update an appointment status, such as its human-readable label, workflow
 * grouping, or sort priority. It is strictly permissioned and requires that
 * 'statusId' is a valid UUID and the status must exist.
 *
 * If the appointment status is system-reserved, attempts to modify critical
 * codes are subject to further restriction. The operation will reject
 * modifications to non-existent, deleted, or non-schema fields. This is
 * essential for managing visible and operational status codes in complex
 * organizational workflows. Related endpoints include single status retrieval
 * (GET), deletion (DELETE), and status code search (PATCH or GET).
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the appointment status to update
 * @param props.body Updated fields for appointment status, including display
 *   name, business status, or sort order.
 * @path /healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointmentStatuses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the appointment status to update */
    statusId: string & tags.Format<"uuid">;

    /**
     * Updated fields for appointment status, including display name,
     * business status, or sort order.
     */
    body: IHealthcarePlatformAppointmentStatus.IUpdate;
  };
  export type Body = IHealthcarePlatformAppointmentStatus.IUpdate;
  export type Response = IHealthcarePlatformAppointmentStatus;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentStatus =>
    typia.random<IHealthcarePlatformAppointmentStatus>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an appointment status (hard delete) from
 * healthcare_platform_appointment_statuses table.
 *
 * This operation permanently removes an appointment status from the platform,
 * restricted to system administrators and organization administrators. The
 * statusId parameter must be a valid UUID referencing an existing appointment
 * status.
 *
 * This operation is not reversible, and any attempt to delete a non-existent or
 * currently referenced status will be rejected. Associated appointments or
 * business logic using the status code should be reviewed before deletion. Use
 * this only for deprecated custom or misconfigured statuses. Related endpoints
 * include single status retrieval (GET), updating (PUT), and listing all
 * appointment statuses (PATCH/GET).
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the appointment status to delete
 * @path /healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointmentStatuses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the appointment status to delete */
    statusId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/appointmentStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
