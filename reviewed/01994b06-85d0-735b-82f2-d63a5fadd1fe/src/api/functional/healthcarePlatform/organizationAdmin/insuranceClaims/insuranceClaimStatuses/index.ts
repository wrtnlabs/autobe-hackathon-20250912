import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformInsuranceClaimStatus } from "../../../../../structures/IHealthcarePlatformInsuranceClaimStatus";
import { IPageIHealthcarePlatformInsuranceClaimStatus } from "../../../../../structures/IPageIHealthcarePlatformInsuranceClaimStatus";

/**
 * Add a new insurance claim status to an existing claim
 * (healthcare_platform_insurance_claim_statuses).
 *
 * Adds a new insurance claim status record for a specific insurance claim
 * identified by insuranceClaimId. This operation is intended for authenticated
 * organization admins, billing specialists, or system admins managing insurance
 * claims and workflow tracking.
 *
 * It requires that the insurance claim already exists, and appends a new status
 * event (such as 'submitted', 'denied', 'paid') to facilitate insurance
 * lifecycle management and audit trails. The API validates that the status
 * event is permissible in the current workflow context and logs the action with
 * full metadata, including user identity, timestamp, and payer response codes
 * if provided.
 *
 * Sensitive business logic includes validation of role-based permissions,
 * enforcing correct workflow transitions, and regulatory compliance for claims
 * management. Related APIs include claim update, status history retrieval, and
 * insurance payment integration points. Expected error cases include providing
 * invalid status values, updating non-existent insurance claims, or
 * unauthorized access attempts.
 *
 * @param props.connection
 * @param props.insuranceClaimId Unique identifier of the insurance claim to
 *   which the status will be added.
 * @param props.body Details of the insurance claim status event to add to the
 *   specified claim.
 * @path /healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insuranceClaims.insuranceClaimStatuses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the insurance claim to which the status will be
     * added.
     */
    insuranceClaimId: string & tags.Format<"uuid">;

    /**
     * Details of the insurance claim status event to add to the specified
     * claim.
     */
    body: IHealthcarePlatformInsuranceClaimStatus.ICreate;
  };
  export type Body = IHealthcarePlatformInsuranceClaimStatus.ICreate;
  export type Response = IHealthcarePlatformInsuranceClaimStatus;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insuranceClaims/${encodeURIComponent(props.insuranceClaimId ?? "null")}/insuranceClaimStatuses`;
  export const random = (): IHealthcarePlatformInsuranceClaimStatus =>
    typia.random<IHealthcarePlatformInsuranceClaimStatus>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insuranceClaimId")(() =>
        typia.assert(props.insuranceClaimId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List, search, and paginate insurance claim status history for a given
 * insurance claim.
 *
 * The endpoint allows users, typically billing/evidence staff or organization
 * admins, to retrieve a filtered and paginated list of insurance claim status
 * records for a given insurance claim by supplying the insuranceClaimId path
 * parameter. The status histories are sourced from the
 * healthcare_platform_insurance_claim_statuses table, which logs all changes
 * and state transitions in the insurance claim's workflow, including
 * submission, acceptance, denial, payment, and appeals.
 *
 * The request body permits specifying search criteria, page size, page number,
 * sorting fields, and additional filters to efficiently review claim life cycle
 * and status history. Results are always scoped to the insurance claim and
 * organization context, respecting data privacy and compliance boundaries. The
 * response delivers a paginated array of status entries (code, description,
 * timestamps, and payment amounts). This operation upholds business
 * requirements for traceability and auditability of all claim-related events,
 * facilitating compliance reviews and appeals workflows.
 *
 * @param props.connection
 * @param props.insuranceClaimId Unique identifier of the parent insurance claim
 *   for which statuses are being retrieved.
 * @param props.body Search, filter, and pagination criteria for insurance claim
 *   statuses. Structure follows
 *   IHealthcarePlatformInsuranceClaimStatus.IRequest.
 * @path /healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insuranceClaims.insuranceClaimStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the parent insurance claim for which statuses
     * are being retrieved.
     */
    insuranceClaimId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination criteria for insurance claim statuses.
     * Structure follows IHealthcarePlatformInsuranceClaimStatus.IRequest.
     */
    body: IHealthcarePlatformInsuranceClaimStatus.IRequest;
  };
  export type Body = IHealthcarePlatformInsuranceClaimStatus.IRequest;
  export type Response = IPageIHealthcarePlatformInsuranceClaimStatus;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insuranceClaims/${encodeURIComponent(props.insuranceClaimId ?? "null")}/insuranceClaimStatuses`;
  export const random = (): IPageIHealthcarePlatformInsuranceClaimStatus =>
    typia.random<IPageIHealthcarePlatformInsuranceClaimStatus>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insuranceClaimId")(() =>
        typia.assert(props.insuranceClaimId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single insurance claim status entry by IDs.
 *
 * Use this operation to retrieve the complete details of a specific status
 * entry (such as a key transition, appeal result, or payment update) within an
 * insurance claim's lifecycle. The path parameters insuranceClaimId and
 * insuranceClaimStatusId uniquely identify the parent claim and the status
 * entry within the healthcare_platform_insurance_claim_statuses table.
 *
 * The response includes all fields for the claim status, such as status_code
 * (e.g., submitted, approved, denied, needs_info), status_description,
 * payment_amount (if relevant), timestamps, and reference to the updating user
 * if available. This single-record retrieval is used for drill-down display,
 * workflow step audit, or regulatory review processes. Access to this data is
 * restricted to authorized billing admins and must be audited for data access
 * compliance. Errors are returned if the record cannot be found or does not
 * belong to the requester's organization.
 *
 * @param props.connection
 * @param props.insuranceClaimId Unique identifier of the parent insurance
 *   claim.
 * @param props.insuranceClaimStatusId Unique identifier of the insurance claim
 *   status entry to retrieve.
 * @path /healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insuranceClaims.insuranceClaimStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent insurance claim. */
    insuranceClaimId: string & tags.Format<"uuid">;

    /** Unique identifier of the insurance claim status entry to retrieve. */
    insuranceClaimStatusId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformInsuranceClaimStatus;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/insuranceClaims/${encodeURIComponent(props.insuranceClaimId ?? "null")}/insuranceClaimStatuses/${encodeURIComponent(props.insuranceClaimStatusId ?? "null")}`;
  export const random = (): IHealthcarePlatformInsuranceClaimStatus =>
    typia.random<IHealthcarePlatformInsuranceClaimStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insuranceClaimId")(() =>
        typia.assert(props.insuranceClaimId),
      );
      assert.param("insuranceClaimStatusId")(() =>
        typia.assert(props.insuranceClaimStatusId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing insurance claim status entry in a claim
 * (healthcare_platform_insurance_claim_statuses).
 *
 * Updates an existing insurance claim status record identified by
 * insuranceClaimStatusId within a specific insurance claim (identified by
 * insuranceClaimId). This API is used by privileged users, such as organization
 * admins and billing specialists, to modify previously submitted claim status
 * events—such as updating the status code, clarifying payer response
 * descriptions, or amending recorded payment amounts for reconciliation.
 *
 * The operation enforces strict business rules, ensuring that only authorized
 * roles may perform status corrections, and that any status value updates are
 * permissible within the defined insurance claim workflow. All changes are
 * fully audit-trailed, including before/after values, user identity, and exact
 * timestamps. This operation is critical for maintaining accurate claim status
 * history for compliance, denial management, and appeals. Related APIs include
 * status creation and listing claim status history. Error scenarios include
 * non-existent claim status ID, invalid updates per workflow rules, and
 * unauthorized modification attempts.
 *
 * @param props.connection
 * @param props.insuranceClaimId Unique identifier of the insurance claim
 *   containing the status to update.
 * @param props.insuranceClaimStatusId Unique identifier of the insurance claim
 *   status record to update.
 * @param props.body Updated details for the insurance claim status event.
 * @path /healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insuranceClaims.insuranceClaimStatuses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the insurance claim containing the status to
     * update.
     */
    insuranceClaimId: string & tags.Format<"uuid">;

    /** Unique identifier of the insurance claim status record to update. */
    insuranceClaimStatusId: string & tags.Format<"uuid">;

    /** Updated details for the insurance claim status event. */
    body: IHealthcarePlatformInsuranceClaimStatus.IUpdate;
  };
  export type Body = IHealthcarePlatformInsuranceClaimStatus.IUpdate;
  export type Response = IHealthcarePlatformInsuranceClaimStatus;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insuranceClaims/${encodeURIComponent(props.insuranceClaimId ?? "null")}/insuranceClaimStatuses/${encodeURIComponent(props.insuranceClaimStatusId ?? "null")}`;
  export const random = (): IHealthcarePlatformInsuranceClaimStatus =>
    typia.random<IHealthcarePlatformInsuranceClaimStatus>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insuranceClaimId")(() =>
        typia.assert(props.insuranceClaimId),
      );
      assert.param("insuranceClaimStatusId")(() =>
        typia.assert(props.insuranceClaimStatusId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete an insurance claim status event entry from a claim
 * (healthcare_platform_insurance_claim_statuses).
 *
 * Removes an insurance claim status record for a given claim, specifically
 * targeting a record identified by insuranceClaimStatusId under the claim
 * referenced by insuranceClaimId. This operation is restricted to
 * high-privilege roles (e.g., organization admin or system admin), reflecting
 * the sensitive nature of changing an insurance claim's legal/audit state.
 *
 * The operation executes a hard delete, permanently erasing the status record
 * from the database without a recovery option. All delete actions are captured
 * in the financial audit log, with user attribution and timestamp, to ensure
 * regulatory traceability. Attempting to delete a non-existent or non-owned
 * claim status, or insufficient permissions, will result in an error. Related
 * APIs include status creation, status update, and listing historical
 * statuses.
 *
 * @param props.connection
 * @param props.insuranceClaimId Unique identifier of the insurance claim from
 *   which the status will be deleted.
 * @param props.insuranceClaimStatusId Unique identifier of the insurance claim
 *   status record to be deleted.
 * @path /healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insuranceClaims.insuranceClaimStatuses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the insurance claim from which the status will
     * be deleted.
     */
    insuranceClaimId: string & tags.Format<"uuid">;

    /** Unique identifier of the insurance claim status record to be deleted. */
    insuranceClaimStatusId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/insuranceClaims/:insuranceClaimId/insuranceClaimStatuses/:insuranceClaimStatusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/insuranceClaims/${encodeURIComponent(props.insuranceClaimId ?? "null")}/insuranceClaimStatuses/${encodeURIComponent(props.insuranceClaimStatusId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insuranceClaimId")(() =>
        typia.assert(props.insuranceClaimId),
      );
      assert.param("insuranceClaimStatusId")(() =>
        typia.assert(props.insuranceClaimStatusId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
