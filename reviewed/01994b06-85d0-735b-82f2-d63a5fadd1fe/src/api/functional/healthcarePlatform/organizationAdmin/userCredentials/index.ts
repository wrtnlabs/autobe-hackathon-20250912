import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformUserCredential } from "../../../../structures/IHealthcarePlatformUserCredential";
import { IPageIHealthcarePlatformUserCredential } from "../../../../structures/IPageIHealthcarePlatformUserCredential";

/**
 * Archive a new user credential value record in the
 * healthcare_platform_user_credentials table.
 *
 * This operation allows system or organization administrators to archive a new
 * credential for any user or actor covered by the healthcarePlatform's
 * authentication system. The request captures user_id, user_type (systemAdmin,
 * orgAdmin, etc.), credential_type (password, sso, certificate, webauthn,
 * etc.), credential_hash (the credential value, typically hashed), and relevant
 * timestamps.
 *
 * Archiving user credentials supports regulatory mandates, SSO rotation
 * policies, and password reuse prevention. Credential archive entries are
 * append-only and must never be edited after creation. Sensitive values, such
 * as credential_hash, must be handled securely; cleartext must never be
 * allowed. All creation events are logged to the audit trail for security and
 * compliance needs.
 *
 * Attempting to create a credential archive entry for a non-existent or
 * unauthorized user must result in a compliance-audited error. Only authorized
 * systemAdmin or organizationAdmin roles should be allowed to use this
 * endpoint.
 *
 * @param props.connection
 * @param props.body Credential record including user_id, credential type, and
 *   credential hash.
 * @path /healthcarePlatform/organizationAdmin/userCredentials
 * @accessor api.functional.healthcarePlatform.organizationAdmin.userCredentials.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Credential record including user_id, credential type, and credential
     * hash.
     */
    body: IHealthcarePlatformUserCredential.ICreate;
  };
  export type Body = IHealthcarePlatformUserCredential.ICreate;
  export type Response = IHealthcarePlatformUserCredential;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/userCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/userCredentials";
  export const random = (): IHealthcarePlatformUserCredential =>
    typia.random<IHealthcarePlatformUserCredential>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate archived user credential records in the
 * healthcare_platform_user_credentials table (hashes never exposed).
 *
 * This operation allows authorized system or organization administrators to
 * perform an advanced query over the user credential history stored in the
 * healthcare_platform_user_credentials table. These records support compliance,
 * regulatory, and incident response audits and should never contain or expose
 * sensitive credential material such as hashes. Any returned record must omit
 * credential_hash fields, and access is strictly limited to privileged
 * administrative roles. Non-authorized access attempts should be denied and
 * tracked in the system's audit log. This operation is crucial for meeting
 * HIPAA, SOC 2, and organizational audit requirements, with a focus on security
 * and auditability.
 *
 * @param props.connection
 * @param props.body Filter and pagination options for searching archived user
 *   credentials.
 * @path /healthcarePlatform/organizationAdmin/userCredentials
 * @accessor api.functional.healthcarePlatform.organizationAdmin.userCredentials.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination options for searching archived user
     * credentials.
     */
    body: IHealthcarePlatformUserCredential.IRequest;
  };
  export type Body = IHealthcarePlatformUserCredential.IRequest;
  export type Response = IPageIHealthcarePlatformUserCredential.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/userCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/userCredentials";
  export const random = (): IPageIHealthcarePlatformUserCredential.ISummary =>
    typia.random<IPageIHealthcarePlatformUserCredential.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of an archived user credential entry by its ID from the
 * healthcare_platform_user_credentials table. Never expose hashes in API
 * responses.
 *
 * This operation provides secure, role-restricted access to an individual
 * archived user credential entry in the healthcare_platform_user_credentials
 * table, identified by userCredentialId (UUID). Credential archives support
 * security, compliance, and rollback workflows; API consumers must never
 * receive sensitive credential_hash fields in any response. This endpoint is
 * for use by administrative and security audit roles only, and all operations
 * must be logged for compliance. Unauthorized or inappropriate access attempts
 * should be denied with audit warning.
 *
 * @param props.connection
 * @param props.userCredentialId Unique identifier for the archived user
 *   credential record to retrieve.
 * @path /healthcarePlatform/organizationAdmin/userCredentials/:userCredentialId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.userCredentials.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier for the archived user credential record to
     * retrieve.
     */
    userCredentialId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformUserCredential;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/userCredentials/:userCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/userCredentials/${encodeURIComponent(props.userCredentialId ?? "null")}`;
  export const random = (): IHealthcarePlatformUserCredential =>
    typia.random<IHealthcarePlatformUserCredential>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userCredentialId")(() =>
        typia.assert(props.userCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
