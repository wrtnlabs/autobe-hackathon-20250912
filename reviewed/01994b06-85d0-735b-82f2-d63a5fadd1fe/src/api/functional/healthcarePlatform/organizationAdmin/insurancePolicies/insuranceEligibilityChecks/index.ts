import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformInsuranceEligibilityCheck } from "../../../../../structures/IHealthcarePlatformInsuranceEligibilityCheck";
import { IPageIHealthcarePlatformInsuranceEligibilityCheck } from "../../../../../structures/IPageIHealthcarePlatformInsuranceEligibilityCheck";

/**
 * Create a new insurance eligibility check entry
 * (healthcare_platform_insurance_eligibility_checks).
 *
 * Creates a new eligibility check transaction against a payer for the specified
 * insurance policy. Authorized billing or admin staff use this endpoint to
 * trigger and record eligibility verifications for billing, claims, or
 * scheduling workflows. The endpoint will store information about who performed
 * the check, response from the payer, and all related outcome data.
 *
 * This operation requires validation of the request body per business rules:
 * the insurancePolicyId must match an active policy, the staff performing the
 * check must have billing permission, and the payer details must be properly
 * populated for audit/compliance reporting. All created records are appended
 * for regulatory trace and support appeals or appeals audit. The endpoint
 * enforces data isolation by policy and organization.
 *
 * @param props.connection
 * @param props.insurancePolicyId Unique insurance policy ID under which the
 *   eligibility check is created.
 * @param props.body Eligibility check and payer response details for creation.
 * @path /healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insurancePolicies.insuranceEligibilityChecks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique insurance policy ID under which the eligibility check is
     * created.
     */
    insurancePolicyId: string & tags.Format<"uuid">;

    /** Eligibility check and payer response details for creation. */
    body: IHealthcarePlatformInsuranceEligibilityCheck.ICreate;
  };
  export type Body = IHealthcarePlatformInsuranceEligibilityCheck.ICreate;
  export type Response = IHealthcarePlatformInsuranceEligibilityCheck;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insurancePolicies/${encodeURIComponent(props.insurancePolicyId ?? "null")}/insuranceEligibilityChecks`;
  export const random = (): IHealthcarePlatformInsuranceEligibilityCheck =>
    typia.random<IHealthcarePlatformInsuranceEligibilityCheck>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insurancePolicyId")(() =>
        typia.assert(props.insurancePolicyId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve all insurance eligibility checks for a policy
 * (healthcare_platform_insurance_eligibility_checks).
 *
 * Retrieve a paginated, filtered list of insurance eligibility checks
 * associated with a single insurance policy. This enables billing staff,
 * admins, or authorized users to review all eligibility verification
 * transactions for a patient or payer within a particular policy, supporting
 * regulatory audits and appeals.
 *
 * Results can be filtered by status, performed_by_id, check timestamp range,
 * and payer response details. Pagination and sorting allow practical review of
 * large eligibility check histories. Security enforces that only users with the
 * proper billing, admin, or compliance roles can access the detailed
 * eligibility check data for the given insurance policy.
 *
 * This query joins the insurance policy context for data isolation and
 * compliance enforcement and draws on
 * healthcare_platform_insurance_eligibility_checks (filtered by
 * insurancePolicyId).
 *
 * @param props.connection
 * @param props.insurancePolicyId Unique identifier of the insurance policy
 *   whose eligibility checks are being searched.
 * @param props.body Search parameters, filters, sort, and pagination criteria
 *   for eligibility checks under the policy.
 * @path /healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insurancePolicies.insuranceEligibilityChecks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the insurance policy whose eligibility checks
     * are being searched.
     */
    insurancePolicyId: string & tags.Format<"uuid">;

    /**
     * Search parameters, filters, sort, and pagination criteria for
     * eligibility checks under the policy.
     */
    body: IHealthcarePlatformInsuranceEligibilityCheck.IRequest;
  };
  export type Body = IHealthcarePlatformInsuranceEligibilityCheck.IRequest;
  export type Response = IPageIHealthcarePlatformInsuranceEligibilityCheck;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insurancePolicies/${encodeURIComponent(props.insurancePolicyId ?? "null")}/insuranceEligibilityChecks`;
  export const random = (): IPageIHealthcarePlatformInsuranceEligibilityCheck =>
    typia.random<IPageIHealthcarePlatformInsuranceEligibilityCheck>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insurancePolicyId")(() =>
        typia.assert(props.insurancePolicyId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single insurance eligibility check record
 * (healthcare_platform_insurance_eligibility_checks).
 *
 * Returns a detailed record of one insurance eligibility check performed for a
 * given policy. This is used for auditing eligibility verification, claims
 * processing, or payer dispute review by authorized staff or admins.
 *
 * The operation enforces access to eligibility check details only for users
 * with billing or administrative authority for accounts within the given
 * insurance policy's organization. It references the
 * healthcare_platform_insurance_eligibility_checks schema and policy context
 * for strict data isolation and compliance.
 *
 * Properties include the eligibility check's status, timestamp, response from
 * payer, outcome, and relationships to staff, policy, and claim records. The
 * endpoint is strictly read-only and logs all access events in audit trails.
 *
 * @param props.connection
 * @param props.insurancePolicyId Unique identifier of the insurance policy
 *   whose eligibility check is returned.
 * @param props.insuranceEligibilityCheckId Unique identifier for the
 *   eligibility check record being retrieved.
 * @path /healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insurancePolicies.insuranceEligibilityChecks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the insurance policy whose eligibility check is
     * returned.
     */
    insurancePolicyId: string & tags.Format<"uuid">;

    /** Unique identifier for the eligibility check record being retrieved. */
    insuranceEligibilityCheckId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformInsuranceEligibilityCheck;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/insurancePolicies/${encodeURIComponent(props.insurancePolicyId ?? "null")}/insuranceEligibilityChecks/${encodeURIComponent(props.insuranceEligibilityCheckId ?? "null")}`;
  export const random = (): IHealthcarePlatformInsuranceEligibilityCheck =>
    typia.random<IHealthcarePlatformInsuranceEligibilityCheck>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insurancePolicyId")(() =>
        typia.assert(props.insurancePolicyId),
      );
      assert.param("insuranceEligibilityCheckId")(() =>
        typia.assert(props.insuranceEligibilityCheckId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing insurance eligibility check record
 * (healthcare_platform_insurance_eligibility_checks).
 *
 * Updates selected metadata or review status of a single insurance eligibility
 * check record for a given insurance policy. This is used primarily by billing
 * or compliance staff to update audit-relevant fields, error corrections, or
 * status flags after appeal, review, or payer feedback workflows.
 *
 * Update rules enforce business constraints: only certain fields may be updated
 * (dependent on audit policies), and the staff making updates must have
 * billing/admin/compliance rights for the organization assigned to the policy.
 * All changes are strictly recorded in the audit trail. The operation
 * references the healthcare_platform_insurance_eligibility_checks schema,
 * matching insuranceEligibilityCheckId and insurancePolicyId for data isolation
 * and regulatory compliance. On success, the updated eligibility check record
 * is returned.
 *
 * @param props.connection
 * @param props.insurancePolicyId Unique insurance policy ID whose eligibility
 *   check is being updated.
 * @param props.insuranceEligibilityCheckId Unique identifier for the
 *   eligibility check being updated.
 * @param props.body Property updates permitted under billing/compliance policy
 *   for eligibility check.
 * @path /healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insurancePolicies.insuranceEligibilityChecks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique insurance policy ID whose eligibility check is being updated. */
    insurancePolicyId: string & tags.Format<"uuid">;

    /** Unique identifier for the eligibility check being updated. */
    insuranceEligibilityCheckId: string & tags.Format<"uuid">;

    /**
     * Property updates permitted under billing/compliance policy for
     * eligibility check.
     */
    body: IHealthcarePlatformInsuranceEligibilityCheck.IUpdate;
  };
  export type Body = IHealthcarePlatformInsuranceEligibilityCheck.IUpdate;
  export type Response = IHealthcarePlatformInsuranceEligibilityCheck;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/insurancePolicies/${encodeURIComponent(props.insurancePolicyId ?? "null")}/insuranceEligibilityChecks/${encodeURIComponent(props.insuranceEligibilityCheckId ?? "null")}`;
  export const random = (): IHealthcarePlatformInsuranceEligibilityCheck =>
    typia.random<IHealthcarePlatformInsuranceEligibilityCheck>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insurancePolicyId")(() =>
        typia.assert(props.insurancePolicyId),
      );
      assert.param("insuranceEligibilityCheckId")(() =>
        typia.assert(props.insuranceEligibilityCheckId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an insurance eligibility check record for a specific
 * insurance policy from healthcare_platform_insurance_eligibility_checks
 * table.
 *
 * This API endpoint allows for the permanent removal of an insurance
 * eligibility check record identified by its unique ID for a specific insurance
 * policy. Insurance eligibility checks are associated with a patient's
 * insurance policy and are critical for ensuring compliance prior to billing
 * and clinical encounters.
 *
 * Removal should be used sparingly and typically only by users with elevated
 * privileges, such as billing administrators or compliance officers, and only
 * when the record was entered in error or regulation permits its removal. This
 * action is a hard delete, meaning the record is completely removed from the
 * database and cannot be recovered through normal means.
 *
 * All deletions should be audited and logged for compliance purposes, and
 * business logic may restrict deletions if the record is associated with
 * completed billing or claim transactions. Related operations include listing
 * eligibility checks, retrieving a specific check, or reviewing the audit trail
 * for deletion. Error scenarios include attempts to delete non-existent
 * records, records linked to immutable financial transactions, or insufficient
 * user permissions.
 *
 * @param props.connection
 * @param props.insurancePolicyId UUID of the insurance policy associated with
 *   the eligibility check to delete.
 * @param props.insuranceEligibilityCheckId UUID of the insurance eligibility
 *   check record to delete.
 * @path /healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.insurancePolicies.insuranceEligibilityChecks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * UUID of the insurance policy associated with the eligibility check to
     * delete.
     */
    insurancePolicyId: string & tags.Format<"uuid">;

    /** UUID of the insurance eligibility check record to delete. */
    insuranceEligibilityCheckId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks/:insuranceEligibilityCheckId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/insurancePolicies/${encodeURIComponent(props.insurancePolicyId ?? "null")}/insuranceEligibilityChecks/${encodeURIComponent(props.insuranceEligibilityCheckId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("insurancePolicyId")(() =>
        typia.assert(props.insurancePolicyId),
      );
      assert.param("insuranceEligibilityCheckId")(() =>
        typia.assert(props.insuranceEligibilityCheckId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
