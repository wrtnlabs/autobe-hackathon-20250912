import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLabResult } from "../../../../../../structures/IHealthcarePlatformLabResult";
import { IPageIHealthcarePlatformLabResult } from "../../../../../../structures/IPageIHealthcarePlatformLabResult";

/**
 * Create a new laboratory result for a specific encounter and patient record.
 *
 * This endpoint allows for the creation of a new lab result record in the
 * healthcare_platform_lab_results table for a given patient record and clinical
 * encounter. Both patientRecordId and encounterId path parameters must be
 * provided and are validated as UUIDs, ensuring accurate clinical linkage.
 *
 * Only users with clinical, technical, or administrative authority (as defined
 * by RBAC and the business logic) may submit new lab results. Lab results may
 * arrive via manual data entry or API-driven integration with external
 * laboratory information systems. The request body provides all necessary
 * fields, including test identifiers, result values, result flags, lab
 * provider, and relevant result and status metadata from the schema. Validation
 * and business rules enforce that the encounter and patient record exist and
 * are active, and that laboratory integration rules are followed. Audit logs
 * and compliance workflows are triggered on creation.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record for
 *   which to create the lab result
 * @param props.encounterId Unique identifier of the encounter for which to
 *   create the lab result
 * @param props.body Full data required to create a new laboratory result record
 * @path /healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults
 * @accessor api.functional.healthcarePlatform.organizationAdmin.patientRecords.encounters.labResults.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the patient record for which to create the lab
     * result
     */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the encounter for which to create the lab result */
    encounterId: string & tags.Format<"uuid">;

    /** Full data required to create a new laboratory result record */
    body: IHealthcarePlatformLabResult.ICreate;
  };
  export type Body = IHealthcarePlatformLabResult.ICreate;
  export type Response = IHealthcarePlatformLabResult;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults`;
  export const random = (): IHealthcarePlatformLabResult =>
    typia.random<IHealthcarePlatformLabResult>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated laboratory results for a specific encounter and
 * patient record.
 *
 * This API operation retrieves a filtered, paginated list of laboratory results
 * for a given patient record and related clinical encounter (visit, admission,
 * telemedicine, etc.), leveraging the healthcare_platform_lab_results table as
 * described in the Prisma schema. The user must specify both the
 * patientRecordId and encounterId in the path; both IDs are validated as UUIDs,
 * ensuring correct parent-child relationship and data isolation.
 *
 * The request body provides complex search parameters, allowing filtering by
 * test name, result flag (e.g., normal/abnormal/critical), result status
 * (pending, completed), and date/time range of the result, as well as lab
 * integration provider when applicable. Paginated responses include summary
 * fields suitable for list views and navigation to detailed records.
 *
 * Security and authorization checks ensure only properly scoped users are able
 * to view laboratory results for patients within organizations, departments, or
 * assignments as per RBAC definitions. Audit logging is executed for access,
 * and access is denied if the requestor lacks necessary permissions or patient
 * consent. The operation is suitable for dashboards, clinical review screens,
 * or audit purposes.
 *
 * @param props.connection
 * @param props.patientRecordId The unique identifier of the patient record for
 *   which to retrieve lab results
 * @param props.encounterId The unique identifier of the EHR encounter linked to
 *   the requested lab results
 * @param props.body Search criteria, pagination, and filter options for lab
 *   result retrieval
 * @path /healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults
 * @accessor api.functional.healthcarePlatform.organizationAdmin.patientRecords.encounters.labResults.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the patient record for which to retrieve lab
     * results
     */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the EHR encounter linked to the requested
     * lab results
     */
    encounterId: string & tags.Format<"uuid">;

    /**
     * Search criteria, pagination, and filter options for lab result
     * retrieval
     */
    body: IHealthcarePlatformLabResult.IRequest;
  };
  export type Body = IHealthcarePlatformLabResult.IRequest;
  export type Response = IPageIHealthcarePlatformLabResult.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults`;
  export const random = (): IPageIHealthcarePlatformLabResult.ISummary =>
    typia.random<IPageIHealthcarePlatformLabResult.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed laboratory result by ID for a given patient record and
 * encounter.
 *
 * This API operation returns the full detail of a laboratory result entity,
 * using the healthcare_platform_lab_results table, as indicated by the
 * labResultId path parameter. The patientRecordId and encounterId ensure proper
 * scoping and data isolation. The lab result includes metadata such as test
 * name, result values, clinical flags (normal/abnormal/critical),
 * integration/provenance information, and all structured result fields as per
 * the schema definition.
 *
 * Authorization checks guarantee only users with appropriate clinical,
 * technical, or department-level roles may access this sensitive result, and
 * audit logs are maintained for every access event. If the user does not have
 * permission, the operation will return an access denied response. Security and
 * compliance mechanisms are enforced according to the RBAC and record privacy
 * logic.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the parent patient record
 * @param props.encounterId Unique identifier for the parent EHR encounter
 * @param props.labResultId Unique identifier of the laboratory result to
 *   retrieve
 * @path /healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.patientRecords.encounters.labResults.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent EHR encounter */
    encounterId: string & tags.Format<"uuid">;

    /** Unique identifier of the laboratory result to retrieve */
    labResultId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLabResult;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults/${encodeURIComponent(props.labResultId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabResult =>
    typia.random<IHealthcarePlatformLabResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("labResultId")(() => typia.assert(props.labResultId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing laboratory result for a patient record and encounter.
 *
 * This endpoint applies to the healthcare_platform_lab_results entity and
 * allows authorized users to update the details of a laboratory result
 * previously recorded for a specific patient and clinical encounter. The
 * operation requires valid UUIDs for patientRecordId, encounterId, and
 * labResultId, ensuring the correct entity context.
 *
 * The request body provides all fields eligible for update, including changes
 * to result values, flags, outcome status, and attached lab integration
 * details, as specified in the schema. Authorization controls designate only
 * clinical, technical, or supervisory staff to perform updates, and strict
 * audit logging records each modification. Validation ensures that
 * modifications do not violate workflow locks (e.g., finalized results may be
 * read-only), that the patient and encounter exist and are active, and that
 * updates are appropriately attributed for compliance.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record
 * @param props.encounterId Unique identifier of the EHR encounter
 * @param props.labResultId Unique identifier of the laboratory result to update
 * @param props.body Payload with fields and values to update in the target
 *   laboratory result
 * @path /healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.patientRecords.encounters.labResults.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the EHR encounter */
    encounterId: string & tags.Format<"uuid">;

    /** Unique identifier of the laboratory result to update */
    labResultId: string & tags.Format<"uuid">;

    /**
     * Payload with fields and values to update in the target laboratory
     * result
     */
    body: IHealthcarePlatformLabResult.IUpdate;
  };
  export type Body = IHealthcarePlatformLabResult.IUpdate;
  export type Response = IHealthcarePlatformLabResult;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults/${encodeURIComponent(props.labResultId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabResult =>
    typia.random<IHealthcarePlatformLabResult>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("labResultId")(() => typia.assert(props.labResultId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently deletes a laboratory result from a patient's encounter
 * (healthcare_platform_lab_results).
 *
 * Deletes a specific clinical laboratory result for a given encounter within a
 * patient record, permanently removing it from the database and making it
 * unavailable for future access, analytics, or compliance reporting.
 *
 * This is a permanent operation which does not support soft-deletion, and
 * therefore must be tightly controlled with proper audit logging. If the record
 * is under legal hold or currently referenced in an open compliance
 * investigation, the operation will fail. Permissions must be restricted to
 * users with explicit administrative or clinical delete privileges, and all
 * actions must be appended to the healthcare_platform_record_audit_trails for
 * PHI lifecycle tracking.
 *
 * Related APIs: retrieval and search endpoints for lab results, audit log
 * creation endpoints, and compliance/legal hold enforcement APIs.
 *
 * Error handling: returns not found if the resource is missing, and forbidden
 * if the user lacks appropriate permissions or the record is locked for
 * compliance retention. All errors must be logged for audit purposes.
 *
 * @param props.connection
 * @param props.patientRecordId Target patient's record ID
 * @param props.encounterId Target EHR encounter ID
 * @param props.labResultId Lab result UUID to hard-delete
 * @path /healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.patientRecords.encounters.labResults.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target patient's record ID */
    patientRecordId: string & tags.Format<"uuid">;

    /** Target EHR encounter ID */
    encounterId: string & tags.Format<"uuid">;

    /** Lab result UUID to hard-delete */
    labResultId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/patientRecords/:patientRecordId/encounters/:encounterId/labResults/:labResultId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/labResults/${encodeURIComponent(props.labResultId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("labResultId")(() => typia.assert(props.labResultId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
