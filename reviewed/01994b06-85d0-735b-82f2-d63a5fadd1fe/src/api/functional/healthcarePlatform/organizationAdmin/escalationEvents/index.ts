import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformEscalationEvent } from "../../../../structures/IHealthcarePlatformEscalationEvent";
import { IPageIHealthcarePlatformEscalationEvent } from "../../../../structures/IPageIHealthcarePlatformEscalationEvent";

/**
 * Create a new escalation event record in
 * healthcare_platform_escalation_events.
 *
 * Create a new escalation event for an actionable alert, SLA violation,
 * compliance workflow, or regulatory notification. The endpoint facilitates the
 * creation of escalation records in response to time-critical or
 * critical-urgency incidents, assigning the case to a responsible user or role,
 * defining the escalation type (e.g. breach, compliance_required,
 * business_policy), setting escalation level (e.g. critical, urgent), deadline,
 * and tracking disposition. The operation ensures business and compliance rules
 * are enforced by validating all required fields for escalation event creation
 * and managing notification triggers or follow-up actions as configured. Audit
 * trails record the creation for regulatory requirements.
 *
 * @param props.connection
 * @param props.body Parameters and escalation metadata for escalation event
 *   creation, including notification reference, escalation target, type, level,
 *   deadline, and summary.
 * @path /healthcarePlatform/organizationAdmin/escalationEvents
 * @accessor api.functional.healthcarePlatform.organizationAdmin.escalationEvents.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Parameters and escalation metadata for escalation event creation,
     * including notification reference, escalation target, type, level,
     * deadline, and summary.
     */
    body: IHealthcarePlatformEscalationEvent.ICreate;
  };
  export type Body = IHealthcarePlatformEscalationEvent.ICreate;
  export type Response = IHealthcarePlatformEscalationEvent;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/escalationEvents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/escalationEvents";
  export const random = (): IHealthcarePlatformEscalationEvent =>
    typia.random<IHealthcarePlatformEscalationEvent>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of escalation events from the
 * healthcare_platform_escalation_events table.
 *
 * Retrieve a filtered and paginated list of escalation events from the
 * healthcarePlatform escalation registry. Each escalation event documents when
 * an actionable incident or SLA breach has required notification and escalated
 * attention, as defined in the healthcare_platform_escalation_events table.
 * This registry supports workflows for compliance, incident response, critical
 * notification follow-up, and operational audit. The operation enables
 * filtering by status (e.g. open, in_progress, resolved, expired), escalation
 * type (e.g. sla_violation, breach), escalation level (e.g. normal, urgent,
 * critical), deadline, assigned user/role, and resolution outcome, leveraging
 * indices for efficient lookup.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for escalation
 *   event filtering.
 * @path /healthcarePlatform/organizationAdmin/escalationEvents
 * @accessor api.functional.healthcarePlatform.organizationAdmin.escalationEvents.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for escalation event
     * filtering.
     */
    body: IHealthcarePlatformEscalationEvent.IRequest;
  };
  export type Body = IHealthcarePlatformEscalationEvent.IRequest;
  export type Response = IPageIHealthcarePlatformEscalationEvent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/escalationEvents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/escalationEvents";
  export const random = (): IPageIHealthcarePlatformEscalationEvent.ISummary =>
    typia.random<IPageIHealthcarePlatformEscalationEvent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific escalation event in
 * healthcare_platform_escalation_events.
 *
 * Retrieve details of a specific escalation event by its unique identifier
 * (escalationEventId) from the escalation events registry. This operation
 * exposes the full escalation event record for operational audit, compliance
 * review, or workflow status checks. Fields returned include escalation type
 * (e.g. sla_violation, breach, compliance_required), escalation level (normal,
 * urgent, critical), associated user/role, creation and deadline timestamps,
 * current resolution status, and complete audit trail linkage. Access is
 * tightly restricted, with fine-grained authorization allowing only designated
 * compliance or administrator roles to view sensitive escalation event data.
 *
 * @param props.connection
 * @param props.escalationEventId Unique identifier for the escalation event to
 *   retrieve.
 * @path /healthcarePlatform/organizationAdmin/escalationEvents/:escalationEventId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.escalationEvents.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the escalation event to retrieve. */
    escalationEventId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformEscalationEvent;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/escalationEvents/:escalationEventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/escalationEvents/${encodeURIComponent(props.escalationEventId ?? "null")}`;
  export const random = (): IHealthcarePlatformEscalationEvent =>
    typia.random<IHealthcarePlatformEscalationEvent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationEventId")(() =>
        typia.assert(props.escalationEventId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing escalation event in healthcare_platform_escalation_events.
 *
 * Update selected fields on an escalation event, such as assignment, escalation
 * level, type, deadline, status, and resolution notes. Used for progressing an
 * escalation through workflow stages (assignment, handling, closure), modifying
 * responder, marking resolution, or adding compliance-related annotations.
 * Enforces validation of field changes, captures audit trail, and triggers
 * notifications or workflow actions if the escalation is resolved or advanced.
 * This maintains synchronous visibility and accountability for prioritized
 * incidents across organizations.
 *
 * @param props.connection
 * @param props.escalationEventId Unique identifier of the escalation event to
 *   update.
 * @param props.body Fields to update for the escalation event, including
 *   assignment, escalation metadata, status, resolution notes, and deadlines.
 * @path /healthcarePlatform/organizationAdmin/escalationEvents/:escalationEventId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.escalationEvents.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the escalation event to update. */
    escalationEventId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the escalation event, including assignment,
     * escalation metadata, status, resolution notes, and deadlines.
     */
    body: IHealthcarePlatformEscalationEvent.IUpdate;
  };
  export type Body = IHealthcarePlatformEscalationEvent.IUpdate;
  export type Response = IHealthcarePlatformEscalationEvent;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/escalationEvents/:escalationEventId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/escalationEvents/${encodeURIComponent(props.escalationEventId ?? "null")}`;
  export const random = (): IHealthcarePlatformEscalationEvent =>
    typia.random<IHealthcarePlatformEscalationEvent>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("escalationEventId")(() =>
        typia.assert(props.escalationEventId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
