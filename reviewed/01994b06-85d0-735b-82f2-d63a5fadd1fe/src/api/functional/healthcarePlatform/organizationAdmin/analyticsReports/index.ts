import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAnalyticsReport } from "../../../../structures/IHealthcarePlatformAnalyticsReport";
import { IPageIHealthcarePlatformAnalyticsReport } from "../../../../structures/IPageIHealthcarePlatformAnalyticsReport";

/**
 * Create a new analytics report definition in the
 * healthcare_platform_analytics_reports table.
 *
 * Allows authorized organization administrators to define and register a new
 * analytics report template for use in dashboards, business intelligence, or
 * compliance processing. The POST operation creates a record in the
 * healthcare_platform_analytics_reports table, assigning template
 * configuration, naming, activation state, and visibility scope (organization,
 * department, or user level) according to the Prisma schema fields.
 *
 * Security validation ensures only users with appropriate privileges can create
 * reports for their organization or department, with automatic attribution of
 * creator identity and timestamps per the schema. The operation supports audit
 * trails, versioning, and business governance for analytics/reporting
 * workflows. Reports created are immediately available for further refinement,
 * attachment to dashboards, and role-based analytics export. Error handling
 * covers name uniqueness, permission boundaries, and JSON validation errors for
 * config fields.
 *
 * This operation is complemented by GET /analyticsReports/{reportId} for detail
 * retrieval and PUT /analyticsReports/{reportId} for template updates.
 *
 * @param props.connection
 * @param props.body Required fields for creating an analytics report, including
 *   name, description, configuration, and access control.
 * @path /healthcarePlatform/organizationAdmin/analyticsReports
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsReports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required fields for creating an analytics report, including name,
     * description, configuration, and access control.
     */
    body: IHealthcarePlatformAnalyticsReport.ICreate;
  };
  export type Body = IHealthcarePlatformAnalyticsReport.ICreate;
  export type Response = IHealthcarePlatformAnalyticsReport;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/analyticsReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/analyticsReports";
  export const random = (): IHealthcarePlatformAnalyticsReport =>
    typia.random<IHealthcarePlatformAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated analytics report records
 * (IHealthcarePlatformAnalyticsReport) with filters and sorting.
 *
 * Retrieves a filtered, paginated list of analytics report definitions to which
 * the user has access, based on search, filter, and sort criteria specified in
 * the request body. Operates on the healthcare_platform_analytics_reports table
 * and is used to provide users with access to analytics configuration,
 * reporting dashboards, and organization/department-scoped reports. The
 * IHealthcarePlatformAnalyticsReport.IRequest request body enables deliberate
 * querying for report name, creator, department, and status, as well as
 * supports pagination and sorting. The results are returned as an
 * IPageIHealthcarePlatformAnalyticsReport, providing all attributes suitable
 * for reporting UIs. Authorization may include any authenticated user with
 * analytics/report permissions in the organization or platform. Error handling
 * includes validation of query parameters, enforcement of RBAC/data scope, and
 * paginated output for large result sets.
 *
 * @param props.connection
 * @param props.body Search, filter, pagination, and sort configuration for
 *   analytics reports.
 * @path /healthcarePlatform/organizationAdmin/analyticsReports
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsReports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, pagination, and sort configuration for analytics
     * reports.
     */
    body: IHealthcarePlatformAnalyticsReport.IRequest;
  };
  export type Body = IHealthcarePlatformAnalyticsReport.IRequest;
  export type Response = IPageIHealthcarePlatformAnalyticsReport;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/analyticsReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/analyticsReports";
  export const random = (): IPageIHealthcarePlatformAnalyticsReport =>
    typia.random<IPageIHealthcarePlatformAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific analytics report by ID from
 * healthcare_platform_analytics_reports table.
 *
 * Retrieve an analytics report template's complete metadata and configuration
 * JSON given its reportId. This operation supports compliance and business
 * workflows by exposing all information about a specific analytics report,
 * including its assigned organization and department, creator user reference,
 * and internal configuration fields as stored in the
 * healthcare_platform_analytics_reports Prisma model.
 *
 * Security is enforced so that only users in the relevant
 * organization/departments, or with sufficient privilege (admin, dashboard
 * owner), may read this resource. The returned information is suitable for
 * debugging, auditing, or rendering report details in the application UI.
 * Unauthorized users receive appropriate access denied errors that are also
 * logged for audit review. All field references and values are aligned with the
 * Prisma model, with audit compliance metadata included as appropriate.
 *
 * This operation is read-only and should be used in conjunction with PATCH
 * /analyticsReports for list searching or GET /analyticsDashboards for
 * dashboard-level operations.
 *
 * @param props.connection
 * @param props.reportId Unique identifier (UUID) of the target analytics
 *   report.
 * @path /healthcarePlatform/organizationAdmin/analyticsReports/:reportId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsReports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target analytics report. */
    reportId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAnalyticsReport;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/analyticsReports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/analyticsReports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IHealthcarePlatformAnalyticsReport =>
    typia.random<IHealthcarePlatformAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update specific analytics report configuration or metadata by reportId in the
 * healthcare_platform_analytics_reports table.
 *
 * Allows authorized organization administrators to update the details,
 * configuration, and template of an existing analytics report, as uniquely
 * identified by reportId. This operation accesses the
 * healthcare_platform_analytics_reports Prisma model to support updates to key
 * fields, such as the report name, configuration JSON, description, department
 * assignment, and active status. Audit trails and full versioning are enforced
 * per business and compliance policy.
 *
 * Security validation restricts access to administrators within the appropriate
 * organization, ensuring that changes are recorded with attribution and
 * timestamp. Operations are subject to validation for name uniqueness, correct
 * configuration JSON syntactic correctness, and permission checks based on the
 * department and organization scope. All update attempts (successful or denied)
 * are recorded for audit tracking and compliance review.
 *
 * Transactional error handling is implemented for concurrency conflicts,
 * invalid updates, or restricted status changes. This operation works in
 * conjunction with GET /analyticsReports/{reportId} for retrieving current
 * values and PATCH /analyticsReports for report search.
 *
 * @param props.connection
 * @param props.reportId Unique identifier (UUID) of the analytics report to
 *   update.
 * @param props.body Updated fields for the analytics report, including
 *   configuration, metadata, and scope.
 * @path /healthcarePlatform/organizationAdmin/analyticsReports/:reportId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsReports.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the analytics report to update. */
    reportId: string & tags.Format<"uuid">;

    /**
     * Updated fields for the analytics report, including configuration,
     * metadata, and scope.
     */
    body: IHealthcarePlatformAnalyticsReport.IUpdate;
  };
  export type Body = IHealthcarePlatformAnalyticsReport.IUpdate;
  export type Response = IHealthcarePlatformAnalyticsReport;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/analyticsReports/:reportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/analyticsReports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): IHealthcarePlatformAnalyticsReport =>
    typia.random<IHealthcarePlatformAnalyticsReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an analytics report by reportId from the
 * healthcare_platform_analytics_reports table (hard delete).
 *
 * Enables authorized organization administrators to delete a specific analytics
 * report, as identified by reportId, from the platform. This operation performs
 * a hard delete of the analytics report record in the
 * healthcare_platform_analytics_reports Prisma table and immediately removes
 * its dashboard/reporting presence in business workflows.
 *
 * Compliance, audit, and business policy are strictly enforced—attempts to
 * delete reports that are locked or referenced in regulatory or active
 * analytics workflows will raise an error and log the incident for review.
 * Every delete action is recorded in the audit trail for compliance and
 * accountability. Hard delete is performed as no soft delete field is present
 * in this Prisma schema for analytics reports.
 *
 * The operation completes the report lifecycle together with POST (create), PUT
 * (update), GET (retrieve), and PATCH (search) endpoints.
 *
 * @param props.connection
 * @param props.reportId Unique identifier (UUID) for the analytics report to be
 *   removed.
 * @path /healthcarePlatform/organizationAdmin/analyticsReports/:reportId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.analyticsReports.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) for the analytics report to be removed. */
    reportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/analyticsReports/:reportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/analyticsReports/${encodeURIComponent(props.reportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reportId")(() => typia.assert(props.reportId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
