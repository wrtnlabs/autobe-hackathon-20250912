import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformOrganizationAdmin } from "../../../../structures/IHealthcarePlatformOrganizationAdmin";

/**
 * Update an organization administrator (healthcare_platform_organizationadmins)
 * record by its ID.
 *
 * Updates a specific organization administrator's information, including their
 * full legal name, business email, and phone number as stored in the
 * 'healthcare_platform_organizationadmins' table. This operation is subject to
 * strict audit trails and can only be performed by users with suitable
 * privileges within the healthcare organization.
 *
 * On successful update, the response includes all current record fields and
 * verification of the changes. The operation logs the update timestamp and
 * ensures all business compliance workflows related to administrator updates
 * are followed.
 *
 * Validation checks include email uniqueness, required fields, and enforcement
 * of business logic for organization admin privileges. Conflict or access
 * errors return clear business-oriented error messages. Only fields existent in
 * the schema are used or returned. The update can only be performed if the
 * record is not marked as deleted (soft-deleted).
 *
 * @param props.connection
 * @param props.organizationAdminId The unique identifier (UUID) of the
 *   organization administrator to update.
 * @param props.body Payload containing updatable fields for the organization
 *   admin, such as full_name, email, phone.
 * @path /healthcarePlatform/organizationAdmin/organizationadmins/:organizationAdminId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.organizationadmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier (UUID) of the organization administrator to
     * update.
     */
    organizationAdminId: string & tags.Format<"uuid">;

    /**
     * Payload containing updatable fields for the organization admin, such
     * as full_name, email, phone.
     */
    body: IHealthcarePlatformOrganizationAdmin.IUpdate;
  };
  export type Body = IHealthcarePlatformOrganizationAdmin.IUpdate;
  export type Response = IHealthcarePlatformOrganizationAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/organizationadmins/:organizationAdminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/organizationadmins/${encodeURIComponent(props.organizationAdminId ?? "null")}`;
  export const random = (): IHealthcarePlatformOrganizationAdmin =>
    typia.random<IHealthcarePlatformOrganizationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationAdminId")(() =>
        typia.assert(props.organizationAdminId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase (hard-delete) an organization administrator by ID
 * (healthcare_platform_organizationadmins).
 *
 * Permanently removes the specified organization admin entry from the database,
 * fully erasing associated administrator details. Access is restricted to
 * system or organization administrators with the highest level permissions in
 * the healthcarePlatform.
 *
 * Upon completion, the operation ensures the record can no longer be referenced
 * or recovered and initiates a platform-wide audit log event. All access
 * constraints and dependencies must be resolved before deletion. If the
 * specified record is missing, already deleted, or protected by policy (active
 * assignments or investigatory lock), the operation returns clear error
 * messages.
 *
 * No soft-deletion is performed for this operation, and care should be taken to
 * comply with security and privacy best practices, including audit compliance
 * for privileged actor actions.
 *
 * @param props.connection
 * @param props.organizationAdminId The unique identifier (UUID) of the
 *   organization administrator to erase.
 * @path /healthcarePlatform/organizationAdmin/organizationadmins/:organizationAdminId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.organizationadmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier (UUID) of the organization administrator to
     * erase.
     */
    organizationAdminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/organizationadmins/:organizationAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/organizationadmins/${encodeURIComponent(props.organizationAdminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationAdminId")(() =>
        typia.assert(props.organizationAdminId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
