import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformFinancialAuditLog } from "../../../../structures/IHealthcarePlatformFinancialAuditLog";
import { IPageIHealthcarePlatformFinancialAuditLog } from "../../../../structures/IPageIHealthcarePlatformFinancialAuditLog";

/**
 * List/search paginated financial audit logs
 * (healthcare_platform_financial_audit_logs).
 *
 * Allows authorized users to search and retrieve a paginated list of financial
 * audit logs, which record all significant financial, billing, and insurance
 * actions across organizations. Supports filtering by organization, entity type
 * (invoice, payment, claim), user, action, and time range.
 *
 * This operation serves compliance, internal audit, and financial reporting
 * needs, supporting detailed forensic investigation into billing, adjustment,
 * or insurance claim workflows. All returned entries conform to regulatory
 * audit standards, and access may be further filtered based on role-based
 * scoping. Related operations include detailed audit log retrieval,
 * entity-based audit reporting, and export endpoints. Expected errors include
 * insufficient permissions or invalid query filters.
 *
 * @param props.connection
 * @param props.body Criteria and pagination for searching financial audit logs.
 * @path /healthcarePlatform/organizationAdmin/financialAuditLogs
 * @accessor api.functional.healthcarePlatform.organizationAdmin.financialAuditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Criteria and pagination for searching financial audit logs. */
    body: IHealthcarePlatformFinancialAuditLog.IRequest;
  };
  export type Body = IHealthcarePlatformFinancialAuditLog.IRequest;
  export type Response = IPageIHealthcarePlatformFinancialAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/financialAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/financialAuditLogs";
  export const random = (): IPageIHealthcarePlatformFinancialAuditLog =>
    typia.random<IPageIHealthcarePlatformFinancialAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a financial audit log entry by ID from
 * healthcare_platform_financial_audit_logs.
 *
 * Fetches the complete details of a single financial audit log record specified
 * by the financialAuditLogId path parameter. This operation enables authorized
 * compliance, billing, or system administrator users to review the exact
 * nature, context, and status of a financial audit event. The
 * healthcare_platform_financial_audit_logs schema holds audit records for
 * invoice creation, modification, payments, adjustments, claim submissions, and
 * other significant financial activities.
 *
 * Each audit log entry contains references to the affected entity (invoice,
 * claim, payment, etc.), associated organization, user who performed the
 * action, audit action type (such as create, update, access, delete), and a
 * human-readable action description. The operation is critical for compliance
 * with business rules and regulatory mandates, supporting review,
 * investigation, and traceability for all financial and insurance operations in
 * the system.
 *
 * Authorization is strictly enforced: only users with appropriate roles
 * (systemAdmin or organizationAdmin) may access audit details, and all access
 * is logged for further review purposes. The returned data structure mirrors
 * the entity as defined in the Prisma schema, exposing all primary audit
 * properties.
 *
 * @param props.connection
 * @param props.financialAuditLogId Unique identifier of the audit log entry to
 *   retrieve
 * @path /healthcarePlatform/organizationAdmin/financialAuditLogs/:financialAuditLogId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.financialAuditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve */
    financialAuditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformFinancialAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/financialAuditLogs/:financialAuditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/financialAuditLogs/${encodeURIComponent(props.financialAuditLogId ?? "null")}`;
  export const random = (): IHealthcarePlatformFinancialAuditLog =>
    typia.random<IHealthcarePlatformFinancialAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("financialAuditLogId")(() =>
        typia.assert(props.financialAuditLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
