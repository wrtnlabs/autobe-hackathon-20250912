import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDepartmentHead } from "../../../../structures/IHealthcarePlatformDepartmentHead";
import { IPageIHealthcarePlatformDepartmenthead } from "../../../../structures/IPageIHealthcarePlatformDepartmenthead";

/**
 * Create a new Department Head in the healthcare platform (table:
 * healthcare_platform_departmentheads).
 *
 * This operation is used to create a new Department Head representing clinical
 * or operational leadership within an existing healthcare organization.
 * Department Heads are responsible for scheduling, performance management, and
 * approvals within their domain. Department Heads must provide a
 * business-verified email address for compliance purposes, and can have an
 * optional phone number for notifications and alerting. The creation process
 * enforces unique email and business-legal identity, reflected in the system's
 * audit logs for onboarding and compliance validation.
 *
 * Security and permissions are enforced so that only organization-level
 * administrators or system administrators may onboard Department Heads. The new
 * Department Head record is linked to broader RBAC and department assignment
 * workflows, but assignment to specific departments and organizations is
 * handled separately from this creation process to ensure clean separation of
 * concerns and auditability. Error responses include unique constraint
 * violations (non-unique email) and insufficient permissions.
 *
 * Operation integration is critical for multi-tenant environments. All
 * Department Head records support soft deletion and full auditability for role
 * onboarding changes, meeting all business rules for clinical administration.
 *
 * @param props.connection
 * @param props.body Information required to create a new Department Head
 *   (email, full name, optional phone)
 * @path /healthcarePlatform/organizationAdmin/departmentheads
 * @accessor api.functional.healthcarePlatform.organizationAdmin.departmentheads.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create a new Department Head (email, full
     * name, optional phone)
     */
    body: IHealthcarePlatformDepartmentHead.ICreate;
  };
  export type Body = IHealthcarePlatformDepartmentHead.ICreate;
  export type Response = IHealthcarePlatformDepartmentHead;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/departmentheads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/departmentheads";
  export const random = (): IHealthcarePlatformDepartmentHead =>
    typia.random<IHealthcarePlatformDepartmentHead>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list department heads (healthcare_platform_departmentheads), with
 * pagination and filters.
 *
 * Retrieves a filtered and paginated list of department heads, leveraging the
 * 'healthcare_platform_departmentheads' schema. The request body can contain
 * search parameters such as partial name match, email keyword, and
 * creation/update timeframe filters.
 *
 * The returned page contains department head summary or detail records,
 * supporting list display, selection, and bulk assignment workflows for
 * administrators. Result metadata includes total items, page size, and
 * pagination state.
 *
 * Access is restricted to users with system or organizational admin privileges,
 * enabling them to manage, review, and audit department head assignments. All
 * searches are logged for compliance and visibility. If filters produce no
 * results, the response is an empty page dataset.
 *
 * @param props.connection
 * @param props.body Query and filter parameters for searching department heads.
 * @path /healthcarePlatform/organizationAdmin/departmentheads
 * @accessor api.functional.healthcarePlatform.organizationAdmin.departmentheads.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Query and filter parameters for searching department heads. */
    body: IHealthcarePlatformDepartmentHead.IRequest;
  };
  export type Body = IHealthcarePlatformDepartmentHead.IRequest;
  export type Response = IPageIHealthcarePlatformDepartmenthead;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/departmentheads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/departmentheads";
  export const random = (): IPageIHealthcarePlatformDepartmenthead =>
    typia.random<IPageIHealthcarePlatformDepartmenthead>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a department head's full record by ID
 * (healthcare_platform_departmentheads).
 *
 * Fetches the full record for a single department head, as specified by their
 * unique identifier, from the department heads dataset. Used for audits, staff
 * management, or organizational workflow reviews, the operation returns data
 * such as full legal name, email, phone, and timestamps.
 *
 * Access is restricted by RBAC; only admins or platform roles may view this
 * information in accordance with compliance and privacy policy. The operation
 * logs access for regulatory review. If the record is missing or deleted, an
 * error is returned with clear messaging around staff record status.
 *
 * @param props.connection
 * @param props.departmentHeadId The unique identifier (UUID) of the department
 *   head to retrieve.
 * @path /healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.departmentheads.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the department head to retrieve. */
    departmentHeadId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformDepartmentHead;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/departmentheads/${encodeURIComponent(props.departmentHeadId ?? "null")}`;
  export const random = (): IHealthcarePlatformDepartmentHead =>
    typia.random<IHealthcarePlatformDepartmentHead>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentHeadId")(() =>
        typia.assert(props.departmentHeadId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update business details of a Department Head record (table:
 * healthcare_platform_departmentheads).
 *
 * This operation enables authorized platform or organization administrators to
 * update key details of a Department Head, including business-verified email,
 * full name, and optional phone number. Changes are validated for uniqueness
 * (notably for email), business logic compliance, and consistency with
 * organization role policies.
 *
 * Security validation ensures that only authorized roles—specifically
 * Organization Admins or System Admins—can modify Department Head records. All
 * updates are recorded in the system's audit log, allowing for retrospective
 * review of clinical leadership changes for compliance, regulatory, or legal
 * investigation. The operation does not handle department reassignments or role
 * escalations, which are managed through separate APIs. Error responses cover
 * missing Department Head, unique constraint violations, and permission
 * errors.
 *
 * The endpoint maintains conformance with RBAC best practices and supports all
 * business certification requirements for leadership role management in
 * healthcare organizations.
 *
 * @param props.connection
 * @param props.departmentHeadId Unique identifier for the Department Head to
 *   update
 * @param props.body Updated data for the Department Head (may include email,
 *   full name, phone)
 * @path /healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.departmentheads.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the Department Head to update */
    departmentHeadId: string & tags.Format<"uuid">;

    /**
     * Updated data for the Department Head (may include email, full name,
     * phone)
     */
    body: IHealthcarePlatformDepartmentHead.IUpdate;
  };
  export type Body = IHealthcarePlatformDepartmentHead.IUpdate;
  export type Response = IHealthcarePlatformDepartmentHead;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/departmentheads/${encodeURIComponent(props.departmentHeadId ?? "null")}`;
  export const random = (): IHealthcarePlatformDepartmentHead =>
    typia.random<IHealthcarePlatformDepartmentHead>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentHeadId")(() =>
        typia.assert(props.departmentHeadId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a Department Head by ID (table:
 * healthcare_platform_departmentheads).
 *
 * This operation allows privileged administrators (organizationAdmin and
 * systemAdmin) to perform permanent removal of a Department Head from the
 * healthcare platform. Hard deletion is enforced due to the lack of an explicit
 * soft-delete ('deleted_at') column in the
 * 'healthcare_platform_departmentheads' schema. This operation is restricted to
 * ensure only highly privileged users can execute irreversible deletions, and
 * all actions are logged in the system's audit trails for legal and compliance
 * purposes.
 *
 * Care must be taken before deletion to avoid orphaning organizational
 * department assignments. Pre-deletion checks are recommended in the front-end
 * or service layer. No content is returned upon success, only a standard
 * confirmation code. Attempting to delete a non-existent record will result in
 * a meaningful error message and audit logging. Operation does not affect
 * related department or user assignments, which must be handled independently.
 *
 * @param props.connection
 * @param props.departmentHeadId Unique identifier of the Department Head to
 *   delete
 * @path /healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.departmentheads.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the Department Head to delete */
    departmentHeadId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/departmentheads/:departmentHeadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/departmentheads/${encodeURIComponent(props.departmentHeadId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentHeadId")(() =>
        typia.assert(props.departmentHeadId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
