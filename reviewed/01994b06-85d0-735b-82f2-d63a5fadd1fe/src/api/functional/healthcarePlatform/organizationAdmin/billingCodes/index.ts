import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingCode } from "../../../../structures/IHealthcarePlatformBillingCode";
import { IPageIHealthcarePlatformBillingCode } from "../../../../structures/IPageIHealthcarePlatformBillingCode";

/**
 * Create a new billing code entry (healthcare_platform_billing_codes table).
 *
 * This API operation enables authorized billing and administrative users to add
 * a new billing code to the core reference table,
 * healthcare_platform_billing_codes. Typical use cases include adding new CPT
 * or ICD-10 codes, custom fee schedule items, or legacy codes needed for
 * regulatory reporting or historical reconciliation.
 *
 * The POST request body collects all mandatory and optional code fields (per
 * Prisma schema): code, code_system, name, description, active flag, and
 * reference metadata. Uniqueness of code/code_system is enforced according to
 * schema constraints. Upon success, the new code record is returned in full,
 * accessible for subsequent use in invoice items or claims.
 *
 * This operation is secured to organizationAdmin or similarly privileged roles.
 * Validation logic ensures correct format for code, code system, and all string
 * fields, and may block duplicate entries or codes marked inactive. Creation
 * errors may include violation of uniqueness, missing required values, or
 * business logic mismatches.
 *
 * This endpoint is essential for maintaining the organization's billing/charge
 * master and code mapping catalog, in compliance with financial controls and
 * regulatory reporting policies.
 *
 * @param props.connection
 * @param props.body Properties required to create a new billing code (code,
 *   code_system, name, etc.) as defined in the Prisma schema.
 * @path /healthcarePlatform/organizationAdmin/billingCodes
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingCodes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Properties required to create a new billing code (code, code_system,
     * name, etc.) as defined in the Prisma schema.
     */
    body: IHealthcarePlatformBillingCode.ICreate;
  };
  export type Body = IHealthcarePlatformBillingCode.ICreate;
  export type Response = IHealthcarePlatformBillingCode;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/billingCodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/billingCodes";
  export const random = (): IHealthcarePlatformBillingCode =>
    typia.random<IHealthcarePlatformBillingCode>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list billing codes with filter, sort, and pagination
 * (healthcare_platform_billing_codes table).
 *
 * This API operation provides a paginated, filterable search of all billing
 * codes available in the healthcare_platform_billing_codes table. Results
 * include all required attributes for each code such as code, code_system,
 * name, description, and active status, supporting both clinical and financial
 * workflows.
 *
 * Intended for use by organization administrators, billing managers, or
 * clinical informaticists who need to reference, select, or maintain valid code
 * lists for invoicing, claims, and external reporting. The response type
 * delivers summary detail for each code and includes metadata for UI filtering,
 * pagination, and search-as-you-type functions.
 *
 * Security should ensure only authorized administrative or clinical staff have
 * access to the full code library, if required by organization policy. Business
 * rules support filtering by code system (CPT, ICD-10, etc), code name or
 * partial match, active/inactive status, and custom sort orders. Unusual
 * queries or bulk extracting large code sets for regulatory scrutiny are
 * rate-limited and logged under audit policies.
 *
 * Error conditions include malformed filter syntax, invalid pagination
 * parameters, or unrecognized code systems. The business implementation
 * references the description fields from Prisma schema to ensure field and
 * relationship accuracy.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for billing code lookup
 *   (filter, sort, page, pageSize, code_system, active, etc)
 * @path /healthcarePlatform/organizationAdmin/billingCodes
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingCodes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for billing code lookup (filter,
     * sort, page, pageSize, code_system, active, etc)
     */
    body: IHealthcarePlatformBillingCode.IRequest;
  };
  export type Body = IHealthcarePlatformBillingCode.IRequest;
  export type Response = IPageIHealthcarePlatformBillingCode.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/billingCodes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/billingCodes";
  export const random = (): IPageIHealthcarePlatformBillingCode.ISummary =>
    typia.random<IPageIHealthcarePlatformBillingCode.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific billing code
 * (healthcare_platform_billing_codes table).
 *
 * This API operation retrieves all available details for a single billing code,
 * identified by billingCodeId, from the healthcare_platform_billing_codes
 * table. It is used by billing admins, organization administrators, or clinical
 * coders to review characteristics, definition, code system origin (CPT,
 * ICD-10, etc), description, status, and usage policies as configured for the
 * organization.
 *
 * Security and audit policies enforce that only authorized users can access
 * code details, especially for internal or legacy custom codes. The operation
 * supports drill-down from code lookup UIs or coding worklists, and is
 * essential for reviewing code eligibility before use in invoice line items,
 * claims, or reporting.
 *
 * Error responses occur if the code is not found, is archived, or the user
 * lacks sufficient privileges. Related operations include code search (PATCH
 * /billingCodes) and code creation or edit (POST/PUT). All fields in the
 * response strictly match those documented in the Prisma schema.
 *
 * @param props.connection
 * @param props.billingCodeId Unique identifier for the target billing code
 *   (UUID format)
 * @path /healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingCodes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target billing code (UUID format) */
    billingCodeId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingCode;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingCodes/${encodeURIComponent(props.billingCodeId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingCode =>
    typia.random<IHealthcarePlatformBillingCode>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingCodeId")(() => typia.assert(props.billingCodeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a billing code's metadata in the healthcarePlatform billing system.
 *
 * Update the properties of a single billing code within the healthcarePlatform
 * system. By specifying the billingCodeId path parameter, authorized
 * administrators can change details such as the billing code's name, code
 * system, description, and active status.
 *
 * This operation enforces audit logging of all changes and restricts access to
 * users with appropriate privileges (e.g., systemAdmin, organizationAdmin). All
 * code modifications are tracked for compliance. Any update must conform to
 * schema requirements, including validation of unique constraints on the code
 * and code_system pair.
 *
 * Security controls include role-based access and full record of update events
 * for possible regulatory review. Related APIs include code creation, listing,
 * and metadata retrieval endpoints.
 *
 * @param props.connection
 * @param props.billingCodeId The unique identifier of the billing code to
 *   update.
 * @param props.body Updated properties and metadata for the billing code.
 * @path /healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingCodes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the billing code to update. */
    billingCodeId: string & tags.Format<"uuid">;

    /** Updated properties and metadata for the billing code. */
    body: IHealthcarePlatformBillingCode.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingCode.IUpdate;
  export type Response = IHealthcarePlatformBillingCode;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingCodes/${encodeURIComponent(props.billingCodeId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingCode =>
    typia.random<IHealthcarePlatformBillingCode>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingCodeId")(() => typia.assert(props.billingCodeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a billing code from the healthcarePlatform billing code catalog.
 *
 * Permanently delete a billing code from the healthcarePlatform's billing codes
 * catalog. This operation requires the billingCodeId path parameter and is
 * restricted to system-level or organization-level administrative roles.
 *
 * All deletions are audit-logged for compliance and traceability. Once deleted,
 * the billing code cannot be referenced in new invoices or claims, and related
 * business logic will prevent its future use. Attempting to delete an in-use or
 * referenced code should result in a validation error describing dependencies.
 * Access is controlled strictly via authorization roles, and all delete actions
 * are permanently recorded.
 *
 * @param props.connection
 * @param props.billingCodeId The unique identifier of the billing code to
 *   delete.
 * @path /healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingCodes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the billing code to delete. */
    billingCodeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/billingCodes/:billingCodeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingCodes/${encodeURIComponent(props.billingCodeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingCodeId")(() => typia.assert(props.billingCodeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
