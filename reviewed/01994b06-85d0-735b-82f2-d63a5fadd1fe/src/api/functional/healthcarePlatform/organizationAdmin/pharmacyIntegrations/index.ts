import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformPharmacyIntegration } from "../../../../structures/IHealthcarePlatformPharmacyIntegration";
import { IPageIHealthcarePlatformPharmacyIntegration } from "../../../../structures/IPageIHealthcarePlatformPharmacyIntegration";

/**
 * Create a new pharmacy integration for the organization
 * (healthcare_platform_pharmacy_integrations).
 *
 * This operation creates a new row in the
 * healthcare_platform_pharmacy_integrations table, representing a new pharmacy
 * network or e-prescribing integration for the organization. The request body
 * must include all required configuration properties, such as the pharmacy
 * vendor code, connection URI, protocol, and operational status.
 *
 * This API is typically called by an organizationAdmin or a systemAdmin when
 * onboarding a new pharmacy network (such as Surescripts or NCPDP) or
 * configuring access to a custom or partner pharmacy provider for prescription
 * workflows.
 *
 * The system validates input for uniqueness per organization and
 * pharmacy_vendor_code, prevents duplicate active connectors, and ensures field
 * constraints such as connection URI format and allowed protocol types are met.
 * Any audit or compliance triggers (such as change tracking for regulated
 * connections) are enforced in provider logic.
 *
 * Error responses include validation failure (400), duplication (409), and
 * insufficient permission (403). Newly created integrations are available for
 * immediate use, but full connectivity status may be pending external
 * validation or credentialing steps. Sensitive credentials are not directly
 * stored in this table, only connection metadata and mapping. All actions are
 * audit-logged for security and compliance traceability.
 *
 * @param props.connection
 * @param props.body Pharmacy integration configuration and connection details
 * @path /healthcarePlatform/organizationAdmin/pharmacyIntegrations
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyIntegrations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Pharmacy integration configuration and connection details */
    body: IHealthcarePlatformPharmacyIntegration.ICreate;
  };
  export type Body = IHealthcarePlatformPharmacyIntegration.ICreate;
  export type Response = IHealthcarePlatformPharmacyIntegration;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/pharmacyIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/pharmacyIntegrations";
  export const random = (): IHealthcarePlatformPharmacyIntegration =>
    typia.random<IHealthcarePlatformPharmacyIntegration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list pharmacy integration connectors for an organization
 * (healthcare_platform_pharmacy_integrations table).
 *
 * Query and paginate pharmacy integration configurations for a healthcare
 * organization. The endpoint returns connector records as defined in the
 * healthcare_platform_pharmacy_integrations schema, including vendor
 * identifier, connection URI, supported communication protocol, operational
 * status, and audit timestamps.
 *
 * This API assists administrators, compliance staff, and operations teams in
 * verifying the readiness and health of pharmacy integrations, tracking which
 * vendors are configured, and diagnosing network or credential issues.
 *
 * Filters and pagination parameters support large/complex organizations, and
 * only users with administrative role for the organization can access results,
 * preserving compliance with integration configuration sensitivity. The
 * endpoint fits into a broader suite of integration management and audit APIs.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for pharmacy integration
 *   configuration search.
 * @path /healthcarePlatform/organizationAdmin/pharmacyIntegrations
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyIntegrations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination parameters for pharmacy integration
     * configuration search.
     */
    body: IHealthcarePlatformPharmacyIntegration.IRequest;
  };
  export type Body = IHealthcarePlatformPharmacyIntegration.IRequest;
  export type Response = IPageIHealthcarePlatformPharmacyIntegration;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/pharmacyIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/pharmacyIntegrations";
  export const random = (): IPageIHealthcarePlatformPharmacyIntegration =>
    typia.random<IPageIHealthcarePlatformPharmacyIntegration>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get configuration details for a specific pharmacy integration by ID
 * (healthcare_platform_pharmacy_integrations).
 *
 * This operation returns all configuration details for the given pharmacy
 * integration record, as defined in the
 * healthcare_platform_pharmacy_integrations table. The primary purpose is to
 * enable organization administrators or IT/security staff to view provider
 * credentials, endpoint URIs, communication protocols, and status for
 * integration with external pharmacy systems such as Surescripts or NCPDP.
 *
 * With a valid pharmacyIntegrationId, the endpoint returns information
 * including the pharmacy vendor code, connection URI, supported protocol, and
 * the operational status of the integration. It does not expose or return
 * sensitive secrets, only connection metadata and linkage for deployment and
 * monitoring.
 *
 * Access is restricted to users with configuration or integration management
 * privilegesâ€”typically orgAdmin or systemAdmin. Unauthorized users will receive
 * an access denied response with a corresponding audit log entry. The endpoint
 * will validate the pharmacyIntegrationId as a UUID and return a 404 error if
 * not found. Integrations that are logically deleted (soft deleted via
 * deleted_at) are excluded unless specifically requested by audit workflows.
 *
 * @param props.connection
 * @param props.pharmacyIntegrationId Unique identifier of the pharmacy
 *   integration record (UUID)
 * @path /healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyIntegrations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the pharmacy integration record (UUID) */
    pharmacyIntegrationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformPharmacyIntegration;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/pharmacyIntegrations/${encodeURIComponent(props.pharmacyIntegrationId ?? "null")}`;
  export const random = (): IHealthcarePlatformPharmacyIntegration =>
    typia.random<IHealthcarePlatformPharmacyIntegration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pharmacyIntegrationId")(() =>
        typia.assert(props.pharmacyIntegrationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a pharmacy integration by ID
 * (healthcare_platform_pharmacy_integrations).
 *
 * This operation updates the specified pharmacy integration record, as
 * identified by pharmacyIntegrationId, in the
 * healthcare_platform_pharmacy_integrations table. The request body includes
 * new configuration values such as updated endpoint URI, protocol, status, or
 * vendor code.
 *
 * It is used by organization or system administrators when pharmacy network
 * partners change protocols, connection settings, or undergo operational
 * changes. Inputs are validated for allowed values, URI correctness, and
 * duplicate active status (cannot activate the same
 * pharmacy_vendor_code/integration more than once per organization).
 *
 * The operation enforces audit logging and may trigger compliance notifications
 * if changes affect regulated connectivity or impact e-prescribing workflows.
 * Unauthorized or insufficient permission attempts are denied with appropriate
 * error responses. Soft-deleted integrations cannot be updated unless restored
 * first. A successful update returns the new configuration object; operations
 * are subject to all normal validation and business logic constraints.
 *
 * @param props.connection
 * @param props.pharmacyIntegrationId Unique identifier of the pharmacy
 *   integration record (UUID) to update
 * @param props.body Fields to update for the pharmacy integration
 * @path /healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyIntegrations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the pharmacy integration record (UUID) to update */
    pharmacyIntegrationId: string & tags.Format<"uuid">;

    /** Fields to update for the pharmacy integration */
    body: IHealthcarePlatformPharmacyIntegration.IUpdate;
  };
  export type Body = IHealthcarePlatformPharmacyIntegration.IUpdate;
  export type Response = IHealthcarePlatformPharmacyIntegration;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/pharmacyIntegrations/${encodeURIComponent(props.pharmacyIntegrationId ?? "null")}`;
  export const random = (): IHealthcarePlatformPharmacyIntegration =>
    typia.random<IHealthcarePlatformPharmacyIntegration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pharmacyIntegrationId")(() =>
        typia.assert(props.pharmacyIntegrationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a pharmacy integration by ID
 * (healthcare_platform_pharmacy_integrations).
 *
 * This operation marks a pharmacy integration as deleted by setting its
 * deleted_at timestamp to the current time, as performed in the
 * healthcare_platform_pharmacy_integrations table. No physical data is removed,
 * preserving the configuration for compliance audit and recovery if necessary.
 *
 * Only organizationAdmin or systemAdmin roles may delete a pharmacy
 * integration; other access attempts are denied with a 403 error and audit log
 * entry. Deleting an integration immediately removes it from all active
 * connection, e-prescribe, and sync workflows, and may propagate disconnect or
 * alert actions elsewhere in the system. Attempts to delete already-deleted or
 * non-existent records result in a 404 Not Found error.
 *
 * Hard physical deletion is not permitted by compliance policy; this operation
 * performs a soft delete only (institutional record retention enforcement). All
 * deletes are audit-logged, and associated credential/secrets storage should be
 * invalidated elsewhere as needed. Recovery of deleted configurations may
 * require additional compliance workflow steps.
 *
 * @param props.connection
 * @param props.pharmacyIntegrationId Unique identifier of the pharmacy
 *   integration record (UUID) to delete
 * @path /healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyIntegrations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the pharmacy integration record (UUID) to delete */
    pharmacyIntegrationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/pharmacyIntegrations/:pharmacyIntegrationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/pharmacyIntegrations/${encodeURIComponent(props.pharmacyIntegrationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pharmacyIntegrationId")(() =>
        typia.assert(props.pharmacyIntegrationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
