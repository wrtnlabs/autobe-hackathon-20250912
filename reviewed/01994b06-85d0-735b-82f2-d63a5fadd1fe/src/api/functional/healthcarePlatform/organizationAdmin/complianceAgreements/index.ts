import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformComplianceAgreement } from "../../../../structures/IHealthcarePlatformComplianceAgreement";
import { IPageIHealthcarePlatformComplianceAgreement } from "../../../../structures/IPageIHealthcarePlatformComplianceAgreement";

/**
 * Search and paginate compliance agreements by filter, returning audit-ready
 * summaries.
 *
 * The search operation allows auditors, compliance staff, or administrators to
 * review compliance agreements (official documents signed by patients or staff)
 * according to various business and audit criteria. Supported filters include
 * organization, policy version, signer, agreement type, status, date signed,
 * and expiration range. Pagination and sorting are standard for large
 * compliance datasets (e.g., paged by date signed or status).
 *
 * Only users with appropriate regulatory/audit roles are permitted access, with
 * all queries logged for compliance reporting. The endpoint is not used for
 * consent search (separate entity with different audit requirements). Search
 * criteria must comply with privacy and regulatory scope: non-compliance users
 * cannot see organization-wide or cross-tenant agreements.
 *
 * Error handling includes invalid filters, empty results, or permission
 * failures. Successful queries return a page of
 * IHealthcarePlatformComplianceAgreement.ISummary data, with pagination
 * metadata and total count.
 *
 * This operation fully respects all data privacy, role-based control, and
 * compliance auditing rules at the platform and org level.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for compliance agreement search
 *   with pagination and sorting.
 * @path /healthcarePlatform/organizationAdmin/complianceAgreements
 * @accessor api.functional.healthcarePlatform.organizationAdmin.complianceAgreements.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for compliance agreement search with
     * pagination and sorting.
     */
    body: IHealthcarePlatformComplianceAgreement.IRequest;
  };
  export type Body = IHealthcarePlatformComplianceAgreement.IRequest;
  export type Response = IPageIHealthcarePlatformComplianceAgreement.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/complianceAgreements",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/complianceAgreements";
  export const random =
    (): IPageIHealthcarePlatformComplianceAgreement.ISummary =>
      typia.random<IPageIHealthcarePlatformComplianceAgreement.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
