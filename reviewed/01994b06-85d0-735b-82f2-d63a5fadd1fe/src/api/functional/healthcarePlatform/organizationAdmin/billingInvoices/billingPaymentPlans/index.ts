import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingPaymentPlan } from "../../../../../structures/IHealthcarePlatformBillingPaymentPlan";
import { IPageIHealthcarePlatformBillingPaymentPlan } from "../../../../../structures/IPageIHealthcarePlatformBillingPaymentPlan";

/**
 * Create a new payment plan tied to a specific billing invoice.
 *
 * Create and associate a new payment plan for a specific billing invoice.
 * Authorized users (organizationAdmin or billing staff) can specify terms such
 * as amount, schedule, and plan type (self-pay, insurance, deferred, etc.). The
 * operation validates inputs for permissible plan types and business rules,
 * ensures no conflicting or duplicate active payment plans exist, and persists
 * the new plan entry in healthcare_platform_billing_payment_plans. Audit
 * logging of the operation captures user, terms, created plan, and relevant
 * invoice linkage. If validation fails (e.g., duplicate plan, invalid data, or
 * insufficient authorization), errors are returned and failed attempts are
 * logged for incident review.
 *
 * Related endpoints: PATCH to search/list payment plans, GET by paymentPlanId
 * to retrieve details. All creations trigger compliance audit trail on the
 * finance log table.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier for the target billing
 *   invoice to which the payment plan will be associated
 * @param props.body Complete payment plan creation data, including type,
 *   schedule, amount, and terms, for the designated billing invoice.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingPaymentPlans.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier for the target billing invoice to which the payment
     * plan will be associated
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Complete payment plan creation data, including type, schedule,
     * amount, and terms, for the designated billing invoice.
     */
    body: IHealthcarePlatformBillingPaymentPlan.ICreate;
  };
  export type Body = IHealthcarePlatformBillingPaymentPlan.ICreate;
  export type Response = IHealthcarePlatformBillingPaymentPlan;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingPaymentPlans`;
  export const random = (): IHealthcarePlatformBillingPaymentPlan =>
    typia.random<IHealthcarePlatformBillingPaymentPlan>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of payment plans for a billing invoice.
 *
 * Retrieve a filtered, paginated list of payment plans tied to a specific
 * billing invoice. This endpoint provides advanced search and pagination,
 * allowing billing staff to review all existing payment plans for an invoice,
 * including active, completed, or defaulted schedules. Filtering options may
 * include plan type, status, start/end dates, and outstanding amounts. Security
 * controls ensure only authorized billing or administrative users (such as
 * organizationAdmin roles) can access detailed financial records, with all
 * accesses recorded in the healthcare_platform_financial_audit_logs for
 * traceability and compliance.
 *
 * Related operations: use GET
 * /billingInvoices/{billingInvoiceId}/billingPaymentPlans/{billingPaymentPlanId}
 * to retrieve a single payment plan by identifier, or POST to create a new plan
 * for the invoice. All retrievals should respect data isolation and role-based
 * access as configured for the tenant/organization. Errors are logged for
 * attempted unauthorized access or invalid invoice references.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier for the target billing
 *   invoice
 * @param props.body Search and filter criteria for retrieving payment plans
 *   associated with a billing invoice, supporting pagination and sorting.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingPaymentPlans.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the target billing invoice */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Search and filter criteria for retrieving payment plans associated
     * with a billing invoice, supporting pagination and sorting.
     */
    body: IHealthcarePlatformBillingPaymentPlan.IRequest;
  };
  export type Body = IHealthcarePlatformBillingPaymentPlan.IRequest;
  export type Response = IPageIHealthcarePlatformBillingPaymentPlan.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingPaymentPlans`;
  export const random =
    (): IPageIHealthcarePlatformBillingPaymentPlan.ISummary =>
      typia.random<IPageIHealthcarePlatformBillingPaymentPlan.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific payment plan for a billing invoice by ID.
 *
 * Retrieve detailed information for a single payment plan linked to a specific
 * billing invoice. This operation returns all fields for the payment plan, such
 * as terms, status, total amount, installment schedule, and associated audit
 * history. Access is limited to users with elevated billing or admin rights
 * (organizationAdmin role), and all retrievals trigger audit log entries in
 * healthcare_platform_financial_audit_logs. If the payment plan does not exist
 * for the given invoice, or access is denied, appropriate error handling and
 * compliance alerts are triggered.
 *
 * The payment plan is uniquely identified by its paymentPlanId within the
 * context of the billingInvoiceId. Related endpoints: use PATCH
 * /billingInvoices/{billingInvoiceId}/billingPaymentPlans for searching lists
 * or POST to create new payment plans. Data visibility is strictly enforced by
 * organization and record status.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier for the target billing
 *   invoice
 * @param props.billingPaymentPlanId Unique identifier for the payment plan
 *   associated with the billing invoice
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingPaymentPlans.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target billing invoice */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the payment plan associated with the billing
     * invoice
     */
    billingPaymentPlanId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingPaymentPlan;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingPaymentPlans/${encodeURIComponent(props.billingPaymentPlanId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingPaymentPlan =>
    typia.random<IHealthcarePlatformBillingPaymentPlan>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingPaymentPlanId")(() =>
        typia.assert(props.billingPaymentPlanId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment plan associated with a billing invoice.
 *
 * Update the details of a payment plan linked to a specific billing invoice.
 * The update operation allows authorized users to modify allowable aspects of
 * the payment plan, such as terms, schedule, status, or description, according
 * to business constraints and financial compliance. Prior to update, validation
 * ensures the plan is in an updatable state (i.e., not completed or defaulted),
 * the changes do not conflict with other active payments, and audit logging of
 * the change is enforced. All modifications are appended to the
 * healthcare_platform_financial_audit_logs.
 *
 * If update fails due to invalid status, data, or permissions, the endpoint
 * returns errors and compliance incident logs. The paymentPlanId and
 * billingInvoiceId parameters uniquely identify the plan to update. For
 * creation, use POST to the same collection endpoint.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier for the billing invoice to
 *   which the payment plan belongs
 * @param props.billingPaymentPlanId Unique identifier for the specific payment
 *   plan to be updated
 * @param props.body Fields and updated values for the payment plan, as allowed
 *   by business and compliance rules.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingPaymentPlans.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier for the billing invoice to which the payment plan
     * belongs
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific payment plan to be updated */
    billingPaymentPlanId: string & tags.Format<"uuid">;

    /**
     * Fields and updated values for the payment plan, as allowed by
     * business and compliance rules.
     */
    body: IHealthcarePlatformBillingPaymentPlan.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingPaymentPlan.IUpdate;
  export type Response = IHealthcarePlatformBillingPaymentPlan;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingPaymentPlans/${encodeURIComponent(props.billingPaymentPlanId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingPaymentPlan =>
    typia.random<IHealthcarePlatformBillingPaymentPlan>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingPaymentPlanId")(() =>
        typia.assert(props.billingPaymentPlanId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a billing payment plan from a billing invoice
 * (healthcare_platform_billing_payment_plans).
 *
 * Deletes a billing payment plan linked to a given billing invoice. This
 * endpoint is utilized when a financial agreement for payment installments or
 * scheduled settlements must be removed, such as when a patient switches to a
 * different payment method, or the invoice is paid in full. To prevent
 * compliance or audit issues, only plans that are not active or have not yet
 * had payments initiated may be deleted, and all actions are logged for
 * regulatory compliance.
 *
 * The endpoint checks the existence and relationship of both the
 * billingInvoiceId and billingPaymentPlanId provided. If successful, the
 * billing payment plan record is permanently removed from the database, with
 * financial audit logs updated accordingly.
 *
 * Authorization is restricted to finance roles, such as organizationAdmin or
 * higher, and the operation is logged for audit/compliance traceability.
 * Deleted payment plans cannot be restored except through backup restoration or
 * legal request.
 *
 * Errors include attempts to delete plans with active payments, nonexistent
 * records, or insufficient permissions.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier of the billing invoice to
 *   which the payment plan belongs
 * @param props.billingPaymentPlanId Unique identifier of the billing payment
 *   plan to be deleted
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingPaymentPlans.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the billing invoice to which the payment plan
     * belongs
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** Unique identifier of the billing payment plan to be deleted */
    billingPaymentPlanId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans/:billingPaymentPlanId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingPaymentPlans/${encodeURIComponent(props.billingPaymentPlanId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingPaymentPlanId")(() =>
        typia.assert(props.billingPaymentPlanId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
