import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingAdjustment } from "../../../../../structures/IHealthcarePlatformBillingAdjustment";
import { IPageIHealthcarePlatformBillingAdjustment } from "../../../../../structures/IPageIHealthcarePlatformBillingAdjustment";

/**
 * Create a billing adjustment for a given invoice
 * (healthcare_platform_billing_adjustments).
 *
 * This API operation allows authorized billing or administrative staff to
 * create a new billing adjustment for a specific invoice identified by the
 * billingInvoiceId path parameter. The healthcare_platform_billing_adjustments
 * table logs every adjustment applied at the invoice or item level, such as
 * discounts, charity write-offs, error corrections, or special policy-based
 * adjustments. This operation requires the client to specify details such as
 * the adjustment type, description, and adjustment amount, as well as
 * associating the adjustment with the correct invoice or billing item through
 * request data. Input validation ensures compliance with business policy (e.g.,
 * adjustment must not exceed invoice total without proper authorization,
 * reasons must be provided for audit, and discounts follow organizational
 * policy).
 *
 * The endpoint adheres to financial compliance standards for traceability and
 * audit trails. Only users with proper billing privileges may invoke this
 * operation, and all adjustments are subject to downstream audit logging and
 * review. Soft deletion of adjustments exists for compliance, allowing audit
 * review of removed or reversed adjustments. Related APIs include POST
 * /billingInvoices (invoice creation), and GET/PATCH endpoints for invoice and
 * item overview, forming part of a comprehensive billing lifecycle.
 *
 * Any error such as unauthorized access, missing required fields, or business
 * rule violations (like amount out of bounds, missing rationale, or invalid
 * adjustment type for context) will be met with detailed validation errors.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier of the target billing invoice
 *   to which the adjustment will be applied.
 * @param props.body Detailed information of the billing adjustment to be
 *   created for the target invoice, following
 *   IHealthcarePlatformBillingAdjustment.ICreate structure.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingAdjustments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target billing invoice to which the
     * adjustment will be applied.
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Detailed information of the billing adjustment to be created for the
     * target invoice, following
     * IHealthcarePlatformBillingAdjustment.ICreate structure.
     */
    body: IHealthcarePlatformBillingAdjustment.ICreate;
  };
  export type Body = IHealthcarePlatformBillingAdjustment.ICreate;
  export type Response = IHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments`;
  export const random = (): IHealthcarePlatformBillingAdjustment =>
    typia.random<IHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all billing adjustments for a given invoice, supporting pagination and
 * filtering.
 *
 * Obtain a paginated list of all billing adjustments applied to the specified
 * billing invoice. The billing adjustments, which may include insurance
 * write-offs, patient discounts, and administrative corrections, are filtered
 * to the target invoice using the billingInvoiceId path parameter. Additional
 * filtering, searching, or sorting may be provided via the request body.
 *
 * Access to this operation is restricted to billing staff, system
 * administrators, and organization administrators. All data is returned in
 * accordance with permission scopes, organizational boundaries, and audit
 * requirements. The operation is essential for financial reconciliation,
 * compliance audits, and patient billing inquiries. Related endpoints include
 * adjustment creation and retrieval.
 *
 * @param props.connection
 * @param props.billingInvoiceId The unique identifier for the invoice whose
 *   adjustments are to be listed.
 * @param props.body Filtering, sorting, and pagination parameters for billing
 *   adjustments.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingAdjustments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier for the invoice whose adjustments are to be
     * listed.
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Filtering, sorting, and pagination parameters for billing
     * adjustments.
     */
    body: IHealthcarePlatformBillingAdjustment.IRequest;
  };
  export type Body = IHealthcarePlatformBillingAdjustment.IRequest;
  export type Response = IPageIHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments`;
  export const random = (): IPageIHealthcarePlatformBillingAdjustment =>
    typia.random<IPageIHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single billing adjustment's detailed information for a specific
 * invoice.
 *
 * Fetch complete metadata and details for a single billing adjustment belonging
 * to the specified invoice, identified by both the parent billingInvoiceId and
 * the billingAdjustmentId. Response includes type, value, timestamps,
 * description, and references to impacted items or invoices.
 *
 * Access is limited to systemAdmin and organizationAdmin roles, ensuring only
 * appropriate staff may inspect adjustment records. All requests and resulting
 * actions are fully audit-logged for compliance and regulatory purposes.
 * Related endpoints support adjustment modification and broader invoice/billing
 * review.
 *
 * @param props.connection
 * @param props.billingInvoiceId The unique identifier for the parent invoice of
 *   the adjustment.
 * @param props.billingAdjustmentId The unique identifier for the billing
 *   adjustment to retrieve.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingAdjustments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier for the parent invoice of the adjustment. */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** The unique identifier for the billing adjustment to retrieve. */
    billingAdjustmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments/${encodeURIComponent(props.billingAdjustmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingAdjustment =>
    typia.random<IHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingAdjustmentId")(() =>
        typia.assert(props.billingAdjustmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing billing adjustment for a specific invoice
 * (healthcare_platform_billing_adjustments).
 *
 * This operation enables authorized organization administrators or billing
 * staff to modify details of an existing billing adjustment tied to a specific
 * invoice. By specifying both the billingInvoiceId and billingAdjustmentId path
 * parameters, the user identifies the exact adjustment to update. The request
 * body supports updates for fields such as adjustment type, description, and
 * amount, with validation enforcing audit compliance: required reasons for
 * adjustment, limits on value changes, and consistency with financial policies
 * (such as not exceeding invoice total or backdating without rationale).
 *
 * Only authenticated staff holding the organizationAdmin role (or equivalent)
 * can invoke this API. The system maintains a revision/audit trail to ensure
 * all updates are historical and reviewable, thus preserving compliance.
 * Attempts to edit non-editable fields (e.g., invoice_id) or adjustments that
 * are already soft-deleted/archived are rejected with validation errors and
 * detailed audit logging. Related API paths include creation and deletion of
 * adjustments, with this endpoint enabling correction or clarification
 * workflows for open invoices.
 *
 * Errors such as insufficient privilege, invalid adjustment status, or data
 * validation failures are clearly reported and audited for organizational
 * accountability.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier of the billing invoice to
 *   which the adjustment belongs.
 * @param props.billingAdjustmentId Unique identifier of the billing adjustment
 *   to be updated.
 * @param props.body New values for the billing adjustment fields to update,
 *   using IHealthcarePlatformBillingAdjustment.IUpdate structure.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingAdjustments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the billing invoice to which the adjustment
     * belongs.
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** Unique identifier of the billing adjustment to be updated. */
    billingAdjustmentId: string & tags.Format<"uuid">;

    /**
     * New values for the billing adjustment fields to update, using
     * IHealthcarePlatformBillingAdjustment.IUpdate structure.
     */
    body: IHealthcarePlatformBillingAdjustment.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingAdjustment.IUpdate;
  export type Response = IHealthcarePlatformBillingAdjustment;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments/${encodeURIComponent(props.billingAdjustmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingAdjustment =>
    typia.random<IHealthcarePlatformBillingAdjustment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingAdjustmentId")(() =>
        typia.assert(props.billingAdjustmentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (archive) an existing billing adjustment for a billing invoice
 * (healthcare_platform_billing_adjustments).
 *
 * This API operation allows an authorized organization administrator or billing
 * staff member to remove (soft-delete) a billing adjustment entry linked to a
 * specific invoice. Both the billingInvoiceId and billingAdjustmentId path
 * parameters are required to precisely target the appropriate adjustment.
 * Instead of a hard delete, the operation sets the deleted_at timestamp,
 * ensuring the adjustment remains archived for downstream audit, regulatory
 * review, or compliance recovery per organizational policy. No data loss
 * occurs, and downstream reports and workflows adjust to exclude soft-deleted
 * adjustments.
 *
 * Security and privilege checks ensure only users with the organizationAdmin
 * role and appropriate billing permissions can execute this operation. Any
 * attempts to remove already archived adjustments, adjust non-existent records,
 * or bypass audit logging are rejected and logged for compliance. Related
 * workflow APIs include adjustment creation and update for full billing
 * lifecycle control.
 *
 * Clear error responses are provided in the event of privilege violations,
 * missing records, or audit failures. The operation integrates with the
 * platform’s overall compliance and retention framework, supporting robust
 * traceability.
 *
 * @param props.connection
 * @param props.billingInvoiceId Unique identifier of the billing invoice to
 *   which the adjustment belongs.
 * @param props.billingAdjustmentId Unique identifier of the billing adjustment
 *   to be archived (soft-deleted).
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.billingAdjustments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the billing invoice to which the adjustment
     * belongs.
     */
    billingInvoiceId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the billing adjustment to be archived
     * (soft-deleted).
     */
    billingAdjustmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingAdjustments/:billingAdjustmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}/billingAdjustments/${encodeURIComponent(props.billingAdjustmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.param("billingAdjustmentId")(() =>
        typia.assert(props.billingAdjustmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
