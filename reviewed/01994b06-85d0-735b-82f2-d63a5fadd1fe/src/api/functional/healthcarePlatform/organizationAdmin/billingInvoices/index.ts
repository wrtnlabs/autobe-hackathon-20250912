import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingInvoice } from "../../../../structures/IHealthcarePlatformBillingInvoice";
import { IPageIHealthcarePlatformBillingInvoice } from "../../../../structures/IPageIHealthcarePlatformBillingInvoice";
export * as billingItems from "./billingItems/index";
export * as billingAdjustments from "./billingAdjustments/index";
export * as billingPaymentPlans from "./billingPaymentPlans/index";
export * as billingPayments from "./billingPayments/index";

/**
 * Create a new billing invoice (IHealthcarePlatformBillingInvoice).
 *
 * Create a new billing invoice in the healthcare platform system according to
 * business, audit, and compliance requirements.
 *
 * Users with appropriate billing or administrative permissions can issue an
 * invoice for a given patient and linked encounter. The operation covers all
 * schema-defined invoice fields including patient, encounter, organization,
 * status, due date, and line itemization.
 *
 * Creation of billing invoices requires patient identity, organization context,
 * currency, status, and total amount. If required fields are missing or invalid
 * (such as duplicate invoice_number in the organization), the operation will
 * return a business error and will not create the invoice. Successful creation
 * will result in a new invoice record and trigger financial audit logging.
 *
 * This API does not permit arbitrary user invoice creation; permission checks
 * are enforced strictly for compliance.
 *
 * @param props.connection
 * @param props.body Data for creating a new billing invoice
 * @path /healthcarePlatform/organizationAdmin/billingInvoices
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data for creating a new billing invoice */
    body: IHealthcarePlatformBillingInvoice.ICreate;
  };
  export type Body = IHealthcarePlatformBillingInvoice.ICreate;
  export type Response = IHealthcarePlatformBillingInvoice;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/billingInvoices";
  export const random = (): IHealthcarePlatformBillingInvoice =>
    typia.random<IHealthcarePlatformBillingInvoice>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate billing invoices (BillingInvoices table) by business
 * filters for finance/admin roles.
 *
 * Search and retrieve billing invoice records in a paginated, filterable
 * manner. Only users with systemAdmin, organizationAdmin, or departmentHead
 * roles can access invoice listings in their organization context.
 *
 * Query criteria can include invoice status, patient, due date range,
 * organization, and more as defined in the request schema. Pagination ensures
 * scalable access for large financial datasets. Invoice summary info is
 * returned for display in dashboards or list views, with links to detailed
 * records for drill-down.
 *
 * Security enforces strict access isolation by organization; invoices cannot be
 * retrieved across tenant boundaries. Sensitive financial data is only included
 * with appropriate roles and audit logs are maintained for all accesses.
 *
 * @param props.connection
 * @param props.body Advanced search parameters and pagination for billing
 *   invoice retrieval.
 * @path /healthcarePlatform/organizationAdmin/billingInvoices
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search parameters and pagination for billing invoice
     * retrieval.
     */
    body: IHealthcarePlatformBillingInvoice.IRequest;
  };
  export type Body = IHealthcarePlatformBillingInvoice.IRequest;
  export type Response = IPageIHealthcarePlatformBillingInvoice.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/billingInvoices";
  export const random = (): IPageIHealthcarePlatformBillingInvoice.ISummary =>
    typia.random<IPageIHealthcarePlatformBillingInvoice.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific billing invoice by ID
 * (IHealthcarePlatformBillingInvoice).
 *
 * Retrieve a healthcare platform billing invoice using the unique invoice ID.
 *
 * This endpoint operates on the healthcare_platform_billing_invoices table and
 * returns details including patient, encounter, status, amounts, and
 * organization context, as defined in the Prisma schema. Permission checks
 * ensure that only authorized users (such as organization admins, billing
 * staff, or the invoiced patient) can access the full invoice details, honoring
 * data isolation and auditability requirements according to healthcare
 * compliance policy.
 *
 * Sensitive invoice information will only be provided to callers with valid
 * scopeâ€”it is not available to general public access. Audit logs are generated
 * for all access to this resource, in line with financial compliance
 * standards.
 *
 * If the invoice is deleted or the user lacks permission, an appropriate error
 * will be returned.
 *
 * @param props.connection
 * @param props.billingInvoiceId UUID of the target billing invoice to retrieve
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target billing invoice to retrieve */
    billingInvoiceId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingInvoice;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingInvoice =>
    typia.random<IHealthcarePlatformBillingInvoice>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a billing invoice by ID (IHealthcarePlatformBillingInvoice).
 *
 * Update billing invoice information for a specified invoice record in the
 * system. This allows for corrections, payment posting, status changes, and
 * business policy updates.
 *
 * Only users with appropriate billing or admin permissions may update invoices.
 * All updates are subject to business rules, auditability, and compliance
 * requirements; edits may be restricted if the invoice has been soft-deleted,
 * is finalized in audit, or conflicts with financial regulations.
 *
 * Update actions are fully logged for compliance, and only permissible fields
 * may be changed by business users. An error will be returned if an attempt is
 * made to edit fields in violation of schema constraints or policy.
 *
 * @param props.connection
 * @param props.billingInvoiceId UUID of the target billing invoice to update
 * @param props.body Updated invoice information
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target billing invoice to update */
    billingInvoiceId: string & tags.Format<"uuid">;

    /** Updated invoice information */
    body: IHealthcarePlatformBillingInvoice.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingInvoice.IUpdate;
  export type Response = IHealthcarePlatformBillingInvoice;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingInvoice =>
    typia.random<IHealthcarePlatformBillingInvoice>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a billing invoice by ID (IHealthcarePlatformBillingInvoice).
 *
 * Soft-delete a billing invoice in the healthcare platform by marking its
 * deleted_at column. The underlying record remains in the database for
 * compliance and audit requirements, but will be excluded from standard queries
 * and reporting.
 *
 * Only authorized organization administrators or system administrators may
 * perform this action. The operation does not physically remove the record to
 * ensure auditability and regulatory compliance, particularly in financial
 * contexts.
 *
 * If the record is already deleted or does not exist, an error will be
 * returned. Deletion actions are logged for traceability.
 *
 * @param props.connection
 * @param props.billingInvoiceId UUID of the invoice to soft-delete
 * @path /healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingInvoices.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the invoice to soft-delete */
    billingInvoiceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
