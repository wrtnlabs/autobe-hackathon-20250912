import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDeviceDataIngestion } from "../../../../structures/IHealthcarePlatformDeviceDataIngestion";
import { IPageIHealthcarePlatformDeviceDataIngestion } from "../../../../structures/IPageIHealthcarePlatformDeviceDataIngestion";

/**
 * Create a new device data ingestion configuration in
 * healthcare_platform_device_data_ingestions.
 *
 * Create a new device data ingestion configuration in the
 * healthcare_platform_device_data_ingestions table.
 *
 * This operation is intended for technical administrators or platform owners to
 * onboard a new data source or medical device. Users provide all required
 * configuration parameters such as the organization, device type (e.g.,
 * vital_monitor, ECG), endpoint URI, protocol, and any other required
 * operational settings. Once created, this record enables the
 * healthcarePlatform to accept and process device data per configured protocol
 * and security guidelines.
 *
 * Proper validation is enforced: endpoint URI must be unique within the
 * organizational context, and protocol/device_type combinations must follow
 * business logic and supported platform standards. Only roles with
 * administrative or technical authority (typically organizationAdmin or
 * systemAdmin) can perform this operation. Error responses will indicate
 * missing/invalid parameters, or conflicts with existing configurations.
 * Auditing of creation is mandatory for compliance traceability.
 *
 * @param props.connection
 * @param props.body Configuration data required to define a new device data
 *   ingestion endpoint (device type, endpoint URI, protocol, status,
 *   organization context).
 * @path /healthcarePlatform/organizationAdmin/deviceDataIngestions
 * @accessor api.functional.healthcarePlatform.organizationAdmin.deviceDataIngestions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Configuration data required to define a new device data ingestion
     * endpoint (device type, endpoint URI, protocol, status, organization
     * context).
     */
    body: IHealthcarePlatformDeviceDataIngestion.ICreate;
  };
  export type Body = IHealthcarePlatformDeviceDataIngestion.ICreate;
  export type Response = IHealthcarePlatformDeviceDataIngestion;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/deviceDataIngestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/deviceDataIngestions";
  export const random = (): IHealthcarePlatformDeviceDataIngestion =>
    typia.random<IHealthcarePlatformDeviceDataIngestion>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List device data ingestion integrations with paging and filtering.
 *
 * Retrieve a searchable and paginated list of device data ingestion
 * configurations, filtering by attributes such as organization, device type,
 * protocol, or status. This supports management and inventory of all real-time
 * and streaming health device ingestion points.
 *
 * Security boundaries ensure that only system admins or organization admins
 * with adequate permissions can access and search device ingestion integration
 * data, which may expose sensitive integration endpoints.
 *
 * Supports sorting and filtering for compliance, incident response, or
 * dashboarding purposes. The operation is critical for enabling safe, audited,
 * and reliable device connectivity throughout the healthcare platform.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination settings for device data
 *   ingestion integrations
 * @path /healthcarePlatform/organizationAdmin/deviceDataIngestions
 * @accessor api.functional.healthcarePlatform.organizationAdmin.deviceDataIngestions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination settings for device data ingestion
     * integrations
     */
    body: IHealthcarePlatformDeviceDataIngestion.IRequest;
  };
  export type Body = IHealthcarePlatformDeviceDataIngestion.IRequest;
  export type Response = IPageIHealthcarePlatformDeviceDataIngestion;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/deviceDataIngestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/deviceDataIngestions";
  export const random = (): IPageIHealthcarePlatformDeviceDataIngestion =>
    typia.random<IPageIHealthcarePlatformDeviceDataIngestion>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific device data ingestion configuration by ID from
 * healthcare_platform_device_data_ingestions table.
 *
 * Fetch detailed information for a single device data ingestion configuration
 * from the healthcare_platform_device_data_ingestions table by unique ID.
 *
 * This operation allows internal or technical users (such as
 * organization/system administrators or IT personnel) to view all
 * configuration, protocol, endpoint, status, and last-update details of a
 * device data ingestion integration. This includes verifying device/protocol
 * compatibility, investigating operational status, and ensuring that onboarded
 * ingestion endpoints are compliant and up-to-date as required by technical and
 * compliance workflows.
 *
 * Security considerations ensure that only roles with appropriate system or
 * technical privileges can access details of device integrations, as these
 * often impact data ingress, clinical safety, and auditability. The operation
 * is critical for troubleshooting integration failures, preparing compliance
 * reviews, or auditing device configuration records. If the record ID does not
 * exist or is not accessible due to RBAC, an appropriate error or not found
 * message will be returned.
 *
 * @param props.connection
 * @param props.deviceDataIngestionId Unique identifier (UUID) of the device
 *   data ingestion record.
 * @path /healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.deviceDataIngestions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the device data ingestion record. */
    deviceDataIngestionId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformDeviceDataIngestion;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/deviceDataIngestions/${encodeURIComponent(props.deviceDataIngestionId ?? "null")}`;
  export const random = (): IHealthcarePlatformDeviceDataIngestion =>
    typia.random<IHealthcarePlatformDeviceDataIngestion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deviceDataIngestionId")(() =>
        typia.assert(props.deviceDataIngestionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing device data ingestion configuration by ID in
 * healthcare_platform_device_data_ingestions.
 *
 * Modify an existing device data ingestion integration record by ID in the
 * healthcare_platform_device_data_ingestions table.
 *
 * The operation allows technical administrators to update endpoint URI,
 * supported device type, protocol, status, and other mutable properties. This
 * is typically performed when the medical device is upgraded, endpoint details
 * change, or integration protocol requirements are updated. Comprehensive
 * validation ensures only compatible updates are applied, considering business
 * and compliance rules on data integration.
 *
 * Roles with administrative privileges (e.g., systemAdmin, organizationAdmin)
 * are authorized to use this operation. The operation enforces audit trails,
 * and rejects attempts when the record does not exist or if updates would
 * conflict with uniqueness or protocol support requirements. Errors are
 * reported clearly in case of conflicts, missing records, or validation
 * failures.
 *
 * @param props.connection
 * @param props.deviceDataIngestionId Unique identifier (UUID) of the device
 *   data ingestion record to be updated.
 * @param props.body Properties of the device data ingestion configuration to
 *   modify (endpoint, device type, supported protocol, operational status,
 *   etc.).
 * @path /healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.deviceDataIngestions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the device data ingestion record to be
     * updated.
     */
    deviceDataIngestionId: string & tags.Format<"uuid">;

    /**
     * Properties of the device data ingestion configuration to modify
     * (endpoint, device type, supported protocol, operational status,
     * etc.).
     */
    body: IHealthcarePlatformDeviceDataIngestion.IUpdate;
  };
  export type Body = IHealthcarePlatformDeviceDataIngestion.IUpdate;
  export type Response = IHealthcarePlatformDeviceDataIngestion;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/deviceDataIngestions/${encodeURIComponent(props.deviceDataIngestionId ?? "null")}`;
  export const random = (): IHealthcarePlatformDeviceDataIngestion =>
    typia.random<IHealthcarePlatformDeviceDataIngestion>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deviceDataIngestionId")(() =>
        typia.assert(props.deviceDataIngestionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a device data ingestion configuration by ID from
 * healthcare_platform_device_data_ingestions (hard delete).
 *
 * Permanently delete a device data ingestion configuration, specified by its
 * unique ID, from the healthcare_platform_device_data_ingestions table.
 *
 * This operation is used when a device integration is decommissioned, failed,
 * has been replaced, or poses compliance risk. The operation ensures that the
 * configuration and its endpoint are removed from the system, stopping future
 * data flows and maintaining a clean administrative and compliance surface.
 * Deletions are fully reflected in the audit trail as required for medical
 * device compliance and operational accountability.
 *
 * This operation is restricted to roles with high privilege (systemAdmin,
 * organizationAdmin). Attempts to delete a nonexistent or inaccessible record
 * (from wrong organization or insufficient RBAC) will result in error responses
 * specifying the cause. There is no undelete; removal is immediate and
 * permanent within the active database.
 *
 * @param props.connection
 * @param props.deviceDataIngestionId Unique identifier (UUID) of the device
 *   data ingestion record to be deleted.
 * @path /healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.deviceDataIngestions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) of the device data ingestion record to be
     * deleted.
     */
    deviceDataIngestionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/deviceDataIngestions/:deviceDataIngestionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/deviceDataIngestions/${encodeURIComponent(props.deviceDataIngestionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deviceDataIngestionId")(() =>
        typia.assert(props.deviceDataIngestionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
