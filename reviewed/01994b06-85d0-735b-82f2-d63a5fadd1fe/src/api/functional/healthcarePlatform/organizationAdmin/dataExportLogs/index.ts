import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDataExportLog } from "../../../../structures/IHealthcarePlatformDataExportLog";
import { IPageIHealthcarePlatformDataExportLog } from "../../../../structures/IPageIHealthcarePlatformDataExportLog";

/**
 * Search and retrieve a filtered, paginated list of data export log events from
 * healthcare_platform_data_export_logs.
 *
 * Retrieve a list of data export logs matching filters such as export type,
 * justification, destination, status, or created date, with full pagination and
 * sorting capabilities.
 *
 * The endpoint is primarily used by systemAdmin and organizationAdmin roles for
 * audit, compliance, and operational review. All responses exclude PHI content
 * and only provide metadata. Filtering parameters include export_type (e.g.,
 * EHR_BULK, REPORT), exported_data_scope, status, and date range.
 *
 * Security: Restricted to highly privileged users due to the sensitivity of
 * export operations, and full actions are logged as part of a compliance audit.
 * Query results show only records within the user's organization or the scope
 * of their assignment.
 *
 * Validation: Only queryable fields from the Prisma schema may be filtered.
 * Sort order defaults to recent events.
 *
 * This operation works together with the single log retrieval endpoint for
 * detailed drill-down. Standard errors are returned for access violations, and
 * all access events are audit-logged.
 *
 * @param props.connection
 * @param props.body Parameters for data export log filtering, searching,
 *   pagination, and sorting.
 * @path /healthcarePlatform/organizationAdmin/dataExportLogs
 * @accessor api.functional.healthcarePlatform.organizationAdmin.dataExportLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Parameters for data export log filtering, searching, pagination, and
     * sorting.
     */
    body: IHealthcarePlatformDataExportLog.IRequest;
  };
  export type Body = IHealthcarePlatformDataExportLog.IRequest;
  export type Response = IPageIHealthcarePlatformDataExportLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/dataExportLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/dataExportLogs";
  export const random = (): IPageIHealthcarePlatformDataExportLog.ISummary =>
    typia.random<IPageIHealthcarePlatformDataExportLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get the details of a data export log record from
 * healthcare_platform_data_export_logs by ID.
 *
 * Retrieve the details for an individual data export log record, including
 * export_type, exported_data_scope, justification, status, timestamp,
 * destination, and file metadata, as permitted by the Prisma schema.
 *
 * This is an audit/compliance-focused endpoint only for privileged users who
 * have access in their org. PHI content or exported files themselves are never
 * returnedâ€”only metadata is shown. Full access event is logged, and
 * invalid/missing dataExportLogId returns a not found error.
 *
 * Works together with the data export log search operation. If the record is
 * not visible to the user's scope, returns a forbidden error. All lookup events
 * are audit-logged.
 *
 * @param props.connection
 * @param props.dataExportLogId The unique identifier (UUID) of the data export
 *   log record to retrieve.
 * @path /healthcarePlatform/organizationAdmin/dataExportLogs/:dataExportLogId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.dataExportLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier (UUID) of the data export log record to
     * retrieve.
     */
    dataExportLogId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformDataExportLog;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/dataExportLogs/:dataExportLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/dataExportLogs/${encodeURIComponent(props.dataExportLogId ?? "null")}`;
  export const random = (): IHealthcarePlatformDataExportLog =>
    typia.random<IHealthcarePlatformDataExportLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataExportLogId")(() =>
        typia.assert(props.dataExportLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
