import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformNurse } from "../../../../structures/IHealthcarePlatformNurse";
import { IPageIHealthcarePlatformNurse } from "../../../../structures/IPageIHealthcarePlatformNurse";

/**
 * Create a new nurse staff account in the healthcare_platform_nurses table.
 *
 * Allows privileged organization administrators or department heads to register
 * new nurses into the healthcarePlatform. The required properties are validated
 * against the healthcare_platform_nurses schema: a business email (unique),
 * full legal name, state-issued license number (unique for compliance),
 * specialty (optional), phone contact (optional), and any additional structured
 * fields required for business onboarding or audit. Creates metadata such as
 * timestamps and initial status (e.g., 'active' or 'pending').
 *
 * Business logic applies strong email and license number uniqueness
 * checks—duplicate entries trigger meaningful error messages. Creation events
 * are fully audited, including the actor initiating creation. Any relationship
 * mapping to departments or initial assignment is enforced per business rules.
 *
 * Upon success, the operation responds with the full nurse record, confirming
 * all stored properties.
 *
 * @param props.connection
 * @param props.body Nurse profile information required for creation (email,
 *   name, license, etc).
 * @path /healthcarePlatform/organizationAdmin/nurses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.nurses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Nurse profile information required for creation (email, name,
     * license, etc).
     */
    body: IHealthcarePlatformNurse.ICreate;
  };
  export type Body = IHealthcarePlatformNurse.ICreate;
  export type Response = IHealthcarePlatformNurse;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/nurses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/organizationAdmin/nurses";
  export const random = (): IHealthcarePlatformNurse =>
    typia.random<IHealthcarePlatformNurse>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of nurses from the
 * healthcarePlatform system (healthcare_platform_nurses table).
 *
 * This operation enables organizational stakeholders to access a comprehensive
 * index of nurses registered in the healthcarePlatform system. Utilizing the
 * healthcare_platform_nurses schema, it supports highly granular filtering and
 * search—by name, license, email, status, department, and speciality. Results
 * are paginated, facilitating large rosters and regulatory reporting needs.
 *
 * Security is enforced via strict authorization: only those with appropriate
 * privileges (for example, organizationAdmin or departmentHead) can access
 * non-anonymized nurse lists. Result details are limited according to role; PHI
 * and sensitive contact details are exposed only to roles with proper
 * clearance. Rate limiting and audit logging are implemented to deter misuse
 * and provide traceability.
 *
 * Implemented pagination allows scalable listing suitable for dashboards or
 * onboarding flows. Query logic adheres to organizational and department-level
 * isolation, in compliance with HIPAA and internal data governance. The
 * endpoint handles edge cases such as inactive, deleted, or pending account
 * states, and provides actionable errors for permission violations or invalid
 * query syntax.
 *
 * @param props.connection
 * @param props.body Filtering, searching, and pagination options for nurse
 *   index retrieval.
 * @path /healthcarePlatform/organizationAdmin/nurses
 * @accessor api.functional.healthcarePlatform.organizationAdmin.nurses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, searching, and pagination options for nurse index
     * retrieval.
     */
    body: IHealthcarePlatformNurse.IRequest;
  };
  export type Body = IHealthcarePlatformNurse.IRequest;
  export type Response = IPageIHealthcarePlatformNurse.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/nurses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/organizationAdmin/nurses";
  export const random = (): IPageIHealthcarePlatformNurse.ISummary =>
    typia.random<IPageIHealthcarePlatformNurse.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed nurse profile by nurseId from the
 * healthcare_platform_nurses table.
 *
 * Fetches a single nurse's complete record from the healthcarePlatform, as
 * defined in the healthcare_platform_nurses table. This includes unique ID,
 * business email, legal full name, license/certification number, specialty,
 * phone number, and audit metadata.
 *
 * Authorization is enforced so that only organization administrators,
 * department heads, and staff with specific permissions may view sensitive or
 * identifying staff information. Access attempts are logged for compliance. If
 * a nurse's record is deactivated (soft-deleted), the operation will return an
 * error or indicate account status accordingly.
 *
 * This endpoint plays a key role in HR, compliance, and clinical scheduling
 * interfaces, providing a consistent data source for profile viewing,
 * onboarding, or credentialing verification workflows. Error handling
 * gracefully manages lookup failures, permission violations, and invalid
 * UUIDs.
 *
 * @param props.connection
 * @param props.nurseId The unique identifier (UUID) of the target nurse to
 *   retrieve.
 * @path /healthcarePlatform/organizationAdmin/nurses/:nurseId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.nurses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the target nurse to retrieve. */
    nurseId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformNurse;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/nurses/:nurseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/nurses/${encodeURIComponent(props.nurseId ?? "null")}`;
  export const random = (): IHealthcarePlatformNurse =>
    typia.random<IHealthcarePlatformNurse>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nurseId")(() => typia.assert(props.nurseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update nurse staff member profile information in healthcare_platform_nurses
 * by nurseId.
 *
 * Enables authorized organizationAdmin or departmentHead to update profile
 * attributes of a nurse in the healthcare_platform_nurses table. Input payload
 * is validated for field-level constraints, including email uniqueness, license
 * number validity, and business process permissions (e.g., only certain fields
 * modifiable post-onboarding). All updates are timestamped, and the actor's ID
 * is logged for audit.
 *
 * Role checks restrict who can update which fields; attempts to alter immutable
 * properties or modify inactive/deleted records will fail with detailed error
 * feedback. The newly updated nurse profile is returned on success, reflecting
 * all changes; sensitive data exposure is limited based on actor's
 * permissions.
 *
 * This operation is essential for HR change requests, compliance credential
 * updates, or clinical staff onboarding adjustments. Edge cases (e.g., lockouts
 * or inactive status) are handled with actionable error responses.
 *
 * @param props.connection
 * @param props.nurseId UUID of the nurse account to update.
 * @param props.body Fields and values for nurse profile update.
 * @path /healthcarePlatform/organizationAdmin/nurses/:nurseId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.nurses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the nurse account to update. */
    nurseId: string & tags.Format<"uuid">;

    /** Fields and values for nurse profile update. */
    body: IHealthcarePlatformNurse.IUpdate;
  };
  export type Body = IHealthcarePlatformNurse.IUpdate;
  export type Response = IHealthcarePlatformNurse;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/nurses/:nurseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/nurses/${encodeURIComponent(props.nurseId ?? "null")}`;
  export const random = (): IHealthcarePlatformNurse =>
    typia.random<IHealthcarePlatformNurse>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nurseId")(() => typia.assert(props.nurseId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (archive) a nurse record in healthcare_platform_nurses by ID.
 *
 * This endpoint enables the logical (soft) deletion of a nurse record by its
 * unique identifier. The API marks the nurse as deleted by updating the
 * deleted_at column in the underlying healthcare_platform_nurses table, so the
 * record remains present for future audit, compliance reviews, and potential
 * restoration, as required by industry regulation and business rules.
 *
 * Only administrators with sufficient privileges should be allowed to invoke
 * this operation, as deleting or deactivating staff can have broad operational,
 * clinical, and compliance implications. The action should be captured in audit
 * logs with actor information and timestamp for traceability.
 *
 * This operation is typically used during staff offboarding, compliance-driven
 * deactivation, or resolution of staff transitions. Attempts to delete
 * non-existent or already-deleted records should result in a clear error
 * response and appropriate audit logging for compliance.
 *
 * Related endpoints may include: creating or updating a nurse record, listing
 * all nurses, and reactivating archived staff if business workflow supports
 * it.
 *
 * @param props.connection
 * @param props.nurseId Unique identifier of the nurse to delete (UUID format).
 * @path /healthcarePlatform/organizationAdmin/nurses/:nurseId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.nurses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the nurse to delete (UUID format). */
    nurseId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/nurses/:nurseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/nurses/${encodeURIComponent(props.nurseId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nurseId")(() => typia.assert(props.nurseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
