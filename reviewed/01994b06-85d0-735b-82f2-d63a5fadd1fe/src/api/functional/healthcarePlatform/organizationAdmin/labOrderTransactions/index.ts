import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLabOrderTransaction } from "../../../../structures/IHealthcarePlatformLabOrderTransaction";
import { IPageIHealthcarePlatformLabOrderTransaction } from "../../../../structures/IPageIHealthcarePlatformLabOrderTransaction";

/**
 * Retrieve/search laboratory order transactions with advanced filters and
 * pagination (healthcare_platform_lab_order_transactions table).
 *
 * The endpoint supports complex search and reporting on all lab order
 * submission events within the system. Administrators and authorized staff can
 * filter by organization, lab integration, order status, time boundaries, and
 * more. Pagination and sorting are provided for large result sets. Only
 * administrators and authorized technical support users should access this
 * endpoint, as the data can include PHI, audit information, and delivery
 * telemetry important to laboratory workflows. The operation returns a
 * paginated result structure, and integrates with the system's broader
 * reporting and troubleshooting infrastructure. Validation ensures only
 * accessible and non-deleted records are returned, and filters are sanitized
 * for system security.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for querying lab order
 *   transactions.
 * @path /healthcarePlatform/organizationAdmin/labOrderTransactions
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labOrderTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter criteria for querying lab order transactions. */
    body: IHealthcarePlatformLabOrderTransaction.IRequest;
  };
  export type Body = IHealthcarePlatformLabOrderTransaction.IRequest;
  export type Response = IPageIHealthcarePlatformLabOrderTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/labOrderTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/labOrderTransactions";
  export const random = (): IPageIHealthcarePlatformLabOrderTransaction =>
    typia.random<IPageIHealthcarePlatformLabOrderTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific lab order transaction detail by labOrderTransactionId
 * (healthcare_platform_lab_order_transactions table).
 *
 * Retrieve a detailed laboratory order transaction record using the unique
 * labOrderTransactionId. This information is vital for verifying the status,
 * timestamps (requested, transmitted, acknowledged), error or status messages,
 * and reconciliation with upstream lab systems. The operation references the
 * healthcare_platform_lab_order_transactions Prisma schema, which includes
 * fields for organization, lab integration, and external references.
 *
 * API consumers must possess appropriate roles (such as staff assigned to the
 * organization) due to the presence of sensitive audit and operational data.
 * Security controls should align with organizational RBAC policies and audit
 * requirements. Laboratories, compliance officers, and technical teams may use
 * this API for diagnostics and regulatory traceability.
 *
 * In case the transaction is not found or the provided identifier is invalid,
 * the API will return a standard not-found or validation error. Errors in
 * underlying integration (such as network or authentication errors with the lab
 * system) will surface through status and message fields, aiding in
 * troubleshooting. This endpoint works in conjunction with broader query
 * endpoints for lab order transaction search, reporting, and analytics.
 *
 * @param props.connection
 * @param props.labOrderTransactionId Lab order transaction record's unique
 *   identifier (UUID)
 * @path /healthcarePlatform/organizationAdmin/labOrderTransactions/:labOrderTransactionId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labOrderTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Lab order transaction record's unique identifier (UUID) */
    labOrderTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLabOrderTransaction;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/labOrderTransactions/:labOrderTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/labOrderTransactions/${encodeURIComponent(props.labOrderTransactionId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabOrderTransaction =>
    typia.random<IHealthcarePlatformLabOrderTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("labOrderTransactionId")(() =>
        typia.assert(props.labOrderTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
