import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformPatientRecord } from "../../../../structures/IHealthcarePlatformPatientRecord";

/**
 * Create a new patient record in healthcare_platform_patient_records table.
 *
 * This endpoint allows for creating a new patient record within a specified
 * organization (and optionally mapped department), as defined by the
 * 'healthcare_platform_patient_records' table. Required fields include patient
 * user reference, full legal name, date of birth, demographic data in JSON
 * format if available, and business status. Optional fields such as external
 * patient number, gender, and department ID support advanced mapping or
 * integration needs. Timestamps for creation and updates are managed by the
 * system.
 *
 * Roles allowed to use this operation are tightly regulated: patient creation
 * can be performed by the organization's admin staff, clinical staff with
 * patient onboarding permissions, or by authorized receptionists during intake.
 * The business logic validates all required fields, checks for duplicate
 * assignments by patient_user_id, and applies organizational data isolation
 * rules. A successfully created record is returned for further use in EHR
 * flows, appointment booking, or regulatory workflows.
 *
 * If records are created for patients already active, appropriate errors or
 * contextual data (e.g., merging, archival logic) are triggered to align with
 * platform business rules. All creation actions are audit logged for regulatory
 * compliance and incident investigation.
 *
 * @param props.connection
 * @param props.body Data required to create a new patient record, including
 *   user reference, demographics, and business metadata.
 * @path /healthcarePlatform/receptionist/patientRecords
 * @accessor api.functional.healthcarePlatform.receptionist.patientRecords.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to create a new patient record, including user
     * reference, demographics, and business metadata.
     */
    body: IHealthcarePlatformPatientRecord.ICreate;
  };
  export type Body = IHealthcarePlatformPatientRecord.ICreate;
  export type Response = IHealthcarePlatformPatientRecord;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/receptionist/patientRecords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/receptionist/patientRecords";
  export const random = (): IHealthcarePlatformPatientRecord =>
    typia.random<IHealthcarePlatformPatientRecord>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
