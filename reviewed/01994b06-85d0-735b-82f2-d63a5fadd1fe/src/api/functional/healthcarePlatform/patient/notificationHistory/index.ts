import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformNotificationHistory } from "../../../../structures/IHealthcarePlatformNotificationHistory";
import { IPageIHealthcarePlatformNotificationHistory } from "../../../../structures/IPageIHealthcarePlatformNotificationHistory";

/**
 * Search and filter notification delivery history
 * (healthcare_platform_notification_history table).
 *
 * This endpoint provides a mechanism to search and retrieve system notification
 * history events. Each event details an attempt or outcome (delivered, failed,
 * retried, acknowledged, escalated, etc.) associated with notification delivery
 * through various channels (email, SMS, in-app, push). The operation allows
 * filtering by user, organization, date range, delivery channel, notification
 * type, delivery status, and acknowledgment outcome.
 *
 * Pagination and full-text search are available to support browsing large
 * volumes of notification events in high-activity organizations. API clients
 * must have appropriate authorization to view notification history for self or,
 * in the case of administrators, their organization's users.
 *
 * Error handling includes protection against data leakage across org
 * boundaries, improper filter use, or exceeding rate limits for bulk history
 * export. This operation supports audit, SLA verification, and compliance
 * workflows to ensure reliable communication and traceability of critical
 * events in the system.
 *
 * Related endpoints include individual notification history view (GET),
 * notification summary stats, and notification resend/retry operations (if
 * permitted).
 *
 * @param props.connection
 * @param props.body Search and filter criteria for notification delivery
 *   history, including user/org, date range, delivery channel, status, and
 *   notification type, as well as pagination parameters.
 * @path /healthcarePlatform/patient/notificationHistory
 * @accessor api.functional.healthcarePlatform.patient.notificationHistory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for notification delivery history,
     * including user/org, date range, delivery channel, status, and
     * notification type, as well as pagination parameters.
     */
    body: IHealthcarePlatformNotificationHistory.IRequest;
  };
  export type Body = IHealthcarePlatformNotificationHistory.IRequest;
  export type Response = IPageIHealthcarePlatformNotificationHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/patient/notificationHistory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/patient/notificationHistory";
  export const random = (): IPageIHealthcarePlatformNotificationHistory =>
    typia.random<IPageIHealthcarePlatformNotificationHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single notification delivery history event
 * (healthcare_platform_notification_history table).
 *
 * This endpoint retrieves the details of an individual notification history
 * event, including the delivery/acknowledgment status, delivery channel,
 * recipient/user, associated notification event, timestamps, and extended
 * delivery outcome metadata. It is used by users to audit notification receipt
 * or by admins to investigate communication status for SLA/incident reporting.
 *
 * Authorization logic ensures that only properly privileged users (self,
 * organization admin, patient) can view notification delivery history within
 * their org boundaries.
 *
 * Typical errors include referencing non-existent or unauthorized event IDs, or
 * attempts to access another organization's data.
 *
 * Related operations include retrieving notification details, delivery status
 * (PATCH), or related escalation event/context for auditing communication
 * escalation and response compliance.
 *
 * @param props.connection
 * @param props.notificationHistoryId Unique identifier for the notification
 *   delivery history event to retrieve.
 * @path /healthcarePlatform/patient/notificationHistory/:notificationHistoryId
 * @accessor api.functional.healthcarePlatform.patient.notificationHistory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier for the notification delivery history event to
     * retrieve.
     */
    notificationHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformNotificationHistory;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/patient/notificationHistory/:notificationHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/patient/notificationHistory/${encodeURIComponent(props.notificationHistoryId ?? "null")}`;
  export const random = (): IHealthcarePlatformNotificationHistory =>
    typia.random<IHealthcarePlatformNotificationHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationHistoryId")(() =>
        typia.assert(props.notificationHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
