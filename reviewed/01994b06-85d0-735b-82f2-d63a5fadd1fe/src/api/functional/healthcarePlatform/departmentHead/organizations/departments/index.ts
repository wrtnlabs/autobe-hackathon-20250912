import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDepartment } from "../../../../../structures/IHealthcarePlatformDepartment";

/**
 * Update an existing department entity for a given organization
 * (healthcare_platform_departments table).
 *
 * This endpoint is used by authorized organizational administrators to update
 * the key properties of a department within a healthcare organization. Updates
 * may include altering the department code, display name, status (active,
 * suspended, archived), organizational association, and timestamps. The
 * operation enforces strict auditabilityâ€”every change is recorded with before
 * and after states, as required by compliance policies.
 *
 * Authorization must be checked to ensure only organization admins and
 * department heads with proper rights and current assignments may update this
 * resource. The operation enforces business logic to prevent breaking unique
 * constraints (such as unique (organization_id, code) per department) and
 * forbids modification if the department is currently locked (for audit or
 * legal hold).
 *
 * Full validation logic ensures that department information aligns with its
 * parent organization's policies. Attempts to update deleted, retired, or
 * archived departments are rejected. Success returns the updated department
 * entity with all fields as defined in the Prisma schema. Errors are handled
 * robustly with clear responses for constraint, permission, and not-found
 * failures.
 *
 * @param props.connection
 * @param props.organizationId Globally unique identifier of the target
 *   organization in which the department resides.
 * @param props.departmentId Globally unique identifier of the target department
 *   to update.
 * @param props.body Fields to update in the department. Must match the
 *   updatable fields as defined in IHealthcarePlatformDepartment.IUpdate.
 * @path /healthcarePlatform/departmentHead/organizations/:organizationId/departments/:departmentId
 * @accessor api.functional.healthcarePlatform.departmentHead.organizations.departments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Globally unique identifier of the target organization in which the
     * department resides.
     */
    organizationId: string & tags.Format<"uuid">;

    /** Globally unique identifier of the target department to update. */
    departmentId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the department. Must match the updatable fields
     * as defined in IHealthcarePlatformDepartment.IUpdate.
     */
    body: IHealthcarePlatformDepartment.IUpdate;
  };
  export type Body = IHealthcarePlatformDepartment.IUpdate;
  export type Response = IHealthcarePlatformDepartment;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/departmentHead/organizations/:organizationId/departments/:departmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/organizations/${encodeURIComponent(props.organizationId ?? "null")}/departments/${encodeURIComponent(props.departmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformDepartment =>
    typia.random<IHealthcarePlatformDepartment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationId")(() => typia.assert(props.organizationId));
      assert.param("departmentId")(() => typia.assert(props.departmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a department entity for a given organization
 * (healthcare_platform_departments table) by setting the deleted_at timestamp.
 *
 * This endpoint is intended for use by authorized organization admins and
 * department heads to delete a department from a healthcare organization. It
 * performs either a soft or hard delete based on the presence of a 'deleted_at'
 * column: here, as per the Prisma schema, deleted_at is present, so the
 * operation will set this timestamp instead of physically removing the record
 * to fulfill audit and compliance requirements.
 *
 * The operation validates that the department is not under legal hold or audit
 * lock and that there are no in-progress resources or active assignments that
 * would block deletion. All dependent records are handled per defined
 * referential integrity policies (cascading, restriction, etc.) as specified in
 * the underlying Prisma schema.
 *
 * When successful, the department is marked as deleted (with 'deleted_at' set),
 * effectively removing it from active lists but preserving it for compliance
 * retention and recovery. A robust error handling process informs users if
 * deletion is forbidden, blocked by business logic, or if the department does
 * not exist.
 *
 * @param props.connection
 * @param props.organizationId Globally unique identifier of the target
 *   organization.
 * @param props.departmentId Globally unique identifier of the department to be
 *   deleted.
 * @path /healthcarePlatform/departmentHead/organizations/:organizationId/departments/:departmentId
 * @accessor api.functional.healthcarePlatform.departmentHead.organizations.departments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Globally unique identifier of the target organization. */
    organizationId: string & tags.Format<"uuid">;

    /** Globally unique identifier of the department to be deleted. */
    departmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/departmentHead/organizations/:organizationId/departments/:departmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/organizations/${encodeURIComponent(props.organizationId ?? "null")}/departments/${encodeURIComponent(props.departmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationId")(() => typia.assert(props.organizationId));
      assert.param("departmentId")(() => typia.assert(props.departmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
