import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformVital } from "../../../../../../structures/IHealthcarePlatformVital";
import { IPageIHealthcarePlatformVital } from "../../../../../../structures/IPageIHealthcarePlatformVital";

/**
 * Create a new patient vital sign entry for an encounter
 * (healthcare_platform_vitals).
 *
 * Creates a new vital sign entry (e.g., heart rate, respiratory rate, blood
 * pressure, temperature) for a patient as part of a specific EHR encounter. The
 * request body provides the vital type, value, unit, measurement timestamp, and
 * attribution to the recording nurse or clinician.
 *
 * Clinical business logic validates that measurement values and units conform
 * to acceptable medical standards and that the provider has current assignment
 * to the given encounter. The resulting entry is available immediately for
 * charts, trend analysis, analytics, and PHI audit trail. Access restricted to
 * nurses, doctors, and applicable department heads.
 *
 * Error handling includes forbidden when context/role is insufficient, not
 * found if record/encounter is missing, and input validation errors for
 * improper value/unit/type. All create attempts are logged for audit/compliance
 * reporting.
 *
 * @param props.connection
 * @param props.patientRecordId Patient record's unique identifier
 * @param props.encounterId EHR encounter ID for the vitals entry
 * @param props.body Information for new vital sign entry in patient encounter
 *   (type, value, measured_at, clinical attribution, etc.)
 * @path /healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals
 * @accessor api.functional.healthcarePlatform.departmentHead.patientRecords.encounters.vitals.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Patient record's unique identifier */
    patientRecordId: string & tags.Format<"uuid">;

    /** EHR encounter ID for the vitals entry */
    encounterId: string & tags.Format<"uuid">;

    /**
     * Information for new vital sign entry in patient encounter (type,
     * value, measured_at, clinical attribution, etc.)
     */
    body: IHealthcarePlatformVital.ICreate;
  };
  export type Body = IHealthcarePlatformVital.ICreate;
  export type Response = IHealthcarePlatformVital;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/vitals`;
  export const random = (): IHealthcarePlatformVital =>
    typia.random<IHealthcarePlatformVital>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filterable list of patient vital sign
 * entries for an encounter (healthcare_platform_vitals).
 *
 * Retrieves a filtered and paginated list of vital sign entries for a patient
 * encounter, allowing clinicians and staff to search, sort, and analyze vital
 * data by type, value, measurement timestamp, and recording nurse.
 *
 * The request body supports detailed filtering and complex searches, with
 * options such as measurement intervals, value ranges, and vital type
 * specificity. The response includes paginated vital entry data, and role-based
 * filtering is applied to ensure organizational/departmental boundaries are
 * respected.
 *
 * Security: Only users in care roles (medical doctor, nurse, department head)
 * with organizational context are allowed access. All data retrievals are
 * recorded in audit logs for compliance and incident review.
 *
 * Error handling includes forbidden for lack of privileges, not found for
 * invalid encounter or record IDs, and paginated empty results when no vitals
 * match the criteria.
 *
 * @param props.connection
 * @param props.patientRecordId Target patient record's ID
 * @param props.encounterId EHR encounter ID, parent to vitals
 * @param props.body Search, filter, and pagination parameters for vitals
 *   retrieval in the encounter context
 * @path /healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals
 * @accessor api.functional.healthcarePlatform.departmentHead.patientRecords.encounters.vitals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target patient record's ID */
    patientRecordId: string & tags.Format<"uuid">;

    /** EHR encounter ID, parent to vitals */
    encounterId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination parameters for vitals retrieval in the
     * encounter context
     */
    body: IHealthcarePlatformVital.IRequest;
  };
  export type Body = IHealthcarePlatformVital.IRequest;
  export type Response = IPageIHealthcarePlatformVital;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/vitals`;
  export const random = (): IPageIHealthcarePlatformVital =>
    typia.random<IPageIHealthcarePlatformVital>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific patient vital entry for an encounter
 * (healthcare_platform_vitals).
 *
 * Retrieves a single vital sign record (i.e., distinct entry for temperature,
 * blood pressure, or other vital) from a given patient encounter, using the
 * record UUID as lookup.
 *
 * Used for chart review, correction workflows, or clinical interventions. The
 * response contains all fields associated with the vital sign, with full detail
 * and attribution. Role-based filtering ensures that only staff responsible for
 * or assigned to the encounter may access the resource, and all views are
 * PHI-audited.
 *
 * Errors: not found if any path parameter does not exist, forbidden for
 * scope/permission failure, and audit log creation for all data access events.
 * Related endpoints: vitals list, vitals update, and patient encounter
 * summary.
 *
 * @param props.connection
 * @param props.patientRecordId Target patient record's ID
 * @param props.encounterId EHR encounter ID
 * @param props.vitalId Unique identifier for the vital entry
 * @path /healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals/:vitalId
 * @accessor api.functional.healthcarePlatform.departmentHead.patientRecords.encounters.vitals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target patient record's ID */
    patientRecordId: string & tags.Format<"uuid">;

    /** EHR encounter ID */
    encounterId: string & tags.Format<"uuid">;

    /** Unique identifier for the vital entry */
    vitalId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformVital;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals/:vitalId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/vitals/${encodeURIComponent(props.vitalId ?? "null")}`;
  export const random = (): IHealthcarePlatformVital =>
    typia.random<IHealthcarePlatformVital>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("vitalId")(() => typia.assert(props.vitalId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
