import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformEhrVersion } from "../../../../../../structures/IHealthcarePlatformEhrVersion";
import { IPageIHealthcarePlatformEhrVersion } from "../../../../../../structures/IPageIHealthcarePlatformEhrVersion";

/**
 * List/filter all EHR version snapshots for a patient encounter with paging and
 * access control.
 *
 * This endpoint allows a secure, paginated, and filterable listing of all EHR
 * version snapshots associated with a particular patient's clinical encounter.
 * It serves the healthcare_platform_ehr_versions table and supports advanced
 * queries, including date filtering, submitted by, and update reason.
 *
 * Security considerations require that requesting users have appropriate
 * role-based access (e.g., doctor for the encounter, nurse with assignment,
 * department head, compliance officer). All access is logged for compliance,
 * and sensitive information is filtered by role scope. Pagination and advanced
 * search parameters are supported in the request body for efficient chart
 * review, legal audits, or clinical investigations.
 *
 * Business logic enforces that only records linked to the provided patient and
 * encounter are included in the result, and error handling covers unauthorized
 * access, not found, or out-of-scope query attempts. Operations related are
 * retrieving a specific version, amending records, and reviewing version
 * history for compliance review.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the patient's record.
 * @param props.encounterId Unique identifier for the EHR encounter.
 * @param props.body Search, filter, and pagination options for EHR version
 *   snapshot listing.
 * @path /healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/ehrVersions
 * @accessor api.functional.healthcarePlatform.departmentHead.patientRecords.encounters.ehrVersions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the patient's record. */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the EHR encounter. */
    encounterId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination options for EHR version snapshot
     * listing.
     */
    body: IHealthcarePlatformEhrVersion.IRequest;
  };
  export type Body = IHealthcarePlatformEhrVersion.IRequest;
  export type Response = IPageIHealthcarePlatformEhrVersion;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/ehrVersions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/ehrVersions`;
  export const random = (): IPageIHealthcarePlatformEhrVersion =>
    typia.random<IPageIHealthcarePlatformEhrVersion>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific EHR version snapshot for a patient encounter by version
 * number.
 *
 * This endpoint enables authorized users to fetch the complete data for an
 * individual EHR version, as identified by patient record ID, encounter ID, and
 * version number. Each EHR version captures point-in-time clinical information
 * and reasoning for updates.
 *
 * Role-based access control determines the extent of viewable data, with
 * doctors (for their patients/encounters), nurses (within their scope),
 * department heads, and system administrators permitted to view. All retrievals
 * are logged in the audit trail for compliance requirements, and invalid or
 * unauthorized requests are appropriately denied with detailed error messages.
 *
 * Business rules require that all identifiers are valid and present, and
 * attempts to retrieve unlinked or non-existent versions result in 404 errors.
 * Related operations include listing all versions or comparing version
 * histories for patient safety and legal purposes.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the patient's record.
 * @param props.encounterId Unique identifier for the EHR encounter.
 * @param props.versionNumber EHR version sequence number to retrieve.
 * @path /healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/ehrVersions/:versionNumber
 * @accessor api.functional.healthcarePlatform.departmentHead.patientRecords.encounters.ehrVersions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the patient's record. */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the EHR encounter. */
    encounterId: string & tags.Format<"uuid">;

    /** EHR version sequence number to retrieve. */
    versionNumber: number & tags.Type<"int32">;
  };
  export type Response = IHealthcarePlatformEhrVersion;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/ehrVersions/:versionNumber",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/encounters/${encodeURIComponent(props.encounterId ?? "null")}/ehrVersions/${encodeURIComponent(props.versionNumber ?? "null")}`;
  export const random = (): IHealthcarePlatformEhrVersion =>
    typia.random<IHealthcarePlatformEhrVersion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("encounterId")(() => typia.assert(props.encounterId));
      assert.param("versionNumber")(() => typia.assert(props.versionNumber));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
