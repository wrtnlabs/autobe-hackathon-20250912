import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformPatient } from "../../../structures/IHealthcarePlatformPatient";

/**
 * Register a new patient in healthcare_platform_patients and authorize via
 * join.
 *
 * Register a new patient account (healthcare_platform_patients) and issue the
 * initial authorization token set (JWT and refresh) for platform access.
 * Enforces unique email, required fields, and password policy or SSO logic
 * through healthcare_platform_user_authentications. Triggers compliance audit
 * trail on success, linking created patient to
 * healthcare_platform_user_org_assignments and initializing
 * notification/channel preferences. Response structure uses
 * IHealthcarePlatformPatient.IAuthorized for token and identity details.
 * Security warning: initial credentials are securely hashed and audit entries
 * are created for registration, per HIPAA. Registration is subject to
 * organizational consent and may require email or identity verification via a
 * separate step if enabled by policy. Patient status is set to active upon
 * success, pending further verification if business logic so dictates. All
 * exception cases (duplication, violation of password/identity policy) yield
 * explicit error responses. Related endpoints: /auth/patient/login,
 * /auth/patient/refresh.
 *
 * @param props.connection
 * @param props.body Information required for new patient registration,
 *   including identity and authentication fields; must match
 *   IHealthcarePlatformPatient.IJoin schema.
 * @setHeader token.access Authorization
 *
 * @path /auth/patient/join
 * @accessor api.functional.auth.patient.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Information required for new patient registration, including identity
     * and authentication fields; must match
     * IHealthcarePlatformPatient.IJoin schema.
     */
    body: IHealthcarePlatformPatient.IJoin;
  };
  export type Body = IHealthcarePlatformPatient.IJoin;
  export type Response = IHealthcarePlatformPatient.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/patient/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/patient/join";
  export const random = (): IHealthcarePlatformPatient.IAuthorized =>
    typia.random<IHealthcarePlatformPatient.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a patient and authorize via /auth/patient/login; update
 * healthcare_platform_auth_sessions.
 *
 * Authenticate a patient account (healthcare_platform_patients) via
 * email/password or SSO; issue new authorization tokens (JWT & refresh) if
 * credentials are valid and patient status is active. Uses
 * healthcare_platform_user_authentications for credential validation; logs all
 * attempts for compliance. Returns IHealthcarePlatformPatient.IAuthorized
 * structure on successful login. Patient status and lockout policy are enforced
 * to prevent unauthorized access after repeated failures or account suspension.
 * Related endpoints: /auth/patient/join for registration, /auth/patient/refresh
 * for session continuation. All error and security events are audit-logged.
 *
 * @param props.connection
 * @param props.body Patient login/request credentials and authentication
 *   provider selection. Follows IHealthcarePlatformPatient.ILogin structure.
 * @setHeader token.access Authorization
 *
 * @path /auth/patient/login
 * @accessor api.functional.auth.patient.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Patient login/request credentials and authentication provider
     * selection. Follows IHealthcarePlatformPatient.ILogin structure.
     */
    body: IHealthcarePlatformPatient.ILogin;
  };
  export type Body = IHealthcarePlatformPatient.ILogin;
  export type Response = IHealthcarePlatformPatient.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/patient/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/patient/login";
  export const random = (): IHealthcarePlatformPatient.IAuthorized =>
    typia.random<IHealthcarePlatformPatient.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh and renew authentication tokens for an active patient session in
 * healthcare_platform_auth_sessions.
 *
 * Allows a patient (healthcare_platform_patients) to obtain new authorization
 * tokens given a valid refresh token. Refresh token and session mapping is
 * validated via healthcare_platform_auth_sessions. Returns a new
 * IHealthcarePlatformPatient.IAuthorized structure if successful, else logs
 * error and returns explicit session invalid/expired response. Full audit of
 * session activity for HIPAA compliance. Organizational security policies may
 * enforce session expiration, forced logout, or consent review during refresh.
 * Related API: /auth/patient/login (primary authentication). On any anomaly,
 * system logs a security event for compliance monitoring.
 *
 * @param props.connection
 * @param props.body Payload to request new tokens with a valid refresh token;
 *   structure per IHealthcarePlatformPatient.IRefresh.
 * @setHeader token.access Authorization
 *
 * @path /auth/patient/refresh
 * @accessor api.functional.auth.patient.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Payload to request new tokens with a valid refresh token; structure
     * per IHealthcarePlatformPatient.IRefresh.
     */
    body: IHealthcarePlatformPatient.IRefresh;
  };
  export type Body = IHealthcarePlatformPatient.IRefresh;
  export type Response = IHealthcarePlatformPatient.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/patient/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/patient/refresh";
  export const random = (): IHealthcarePlatformPatient.IAuthorized =>
    typia.random<IHealthcarePlatformPatient.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
