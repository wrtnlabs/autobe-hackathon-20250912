import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformReceptionist } from "../../../structures/IHealthcarePlatformReceptionist";

/**
 * Register a new receptionist and issue initial JWT tokens
 * (healthcare_platform_receptionists).
 *
 * This endpoint allows a new receptionist user to register an account on the
 * healthcarePlatform by providing required fields such as email and full_name.
 * Registration is subject to unique email enforcement and triggers creation of
 * a new receptionist entity in the 'healthcare_platform_receptionists' table.
 * Upon successful registration, a JWT token pair (access and refresh) is
 * issued, enabling authenticated participation in appointment management and
 * non-clinical administrative workflows.
 *
 * Passwords and initial authentication credentials are written to the
 * cross-entity 'healthcare_platform_user_authentications' table. Regulatory
 * compliance is enforced via audit trails, and RBAC policies ensure the new
 * receptionist is granted only member-level, logistics-related permissions.
 * Duplicate email validation is strictly enforced.
 *
 * This endpoint is accessible without authentication but is audited in
 * compliance logs. It integrates with subsequent security operations (login,
 * password reset, MFA enablement) required for production deployment.
 *
 * Security is enforced according to organizational policies and best practices
 * for healthcare data onboarding. Failed registrations (e.g., duplicate,
 * missing required fields) are returned with specific error codes and do not
 * result in persistent entities.
 *
 * This endpoint should be paired with the login and refresh endpoints to enable
 * a complete authentication lifecycle for receptionists.
 *
 * @param props.connection
 * @param props.body Receptionist registration data for account creation
 * @setHeader token.access Authorization
 *
 * @path /auth/receptionist/join
 * @accessor api.functional.auth.receptionist.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Receptionist registration data for account creation */
    body: IHealthcarePlatformReceptionist.ICreate;
  };
  export type Body = IHealthcarePlatformReceptionist.ICreate;
  export type Response = IHealthcarePlatformReceptionist.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/receptionist/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/receptionist/join";
  export const random = (): IHealthcarePlatformReceptionist.IAuthorized =>
    typia.random<IHealthcarePlatformReceptionist.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a receptionist and issue JWT tokens
 * (healthcare_platform_receptionists).
 *
 * This endpoint allows a receptionist with an existing account to authenticate
 * to the healthcarePlatform using credentials stored in the
 * 'healthcare_platform_receptionists' and
 * 'healthcare_platform_user_authentications' tables. It verifies the provided
 * password or external authentication provider and, on success, returns a JWT
 * access/refresh token pair for use in member-level administrative workflows.
 *
 * Authentication is denied for inactive or deleted receptionist accounts, and
 * all failed attempts are logged for compliance and security monitoring.
 * Credentials are validated against records with strict enforcement of account
 * status, RBAC policies, and audit trail requirements.
 *
 * Repeated failed logins may trigger account lockout or security incidents
 * according to the organization's security posture.
 *
 * Use this endpoint as part of the core receptionist sign-in flow, typically
 * following initial 'join' registration. Pair with the refresh endpoint to
 * enable seamless session continuity.
 *
 * @param props.connection
 * @param props.body Receptionist login credential data
 * @setHeader token.access Authorization
 *
 * @path /auth/receptionist/login
 * @accessor api.functional.auth.receptionist.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Receptionist login credential data */
    body: IHealthcarePlatformReceptionist.ILogin;
  };
  export type Body = IHealthcarePlatformReceptionist.ILogin;
  export type Response = IHealthcarePlatformReceptionist.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/receptionist/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/receptionist/login";
  export const random = (): IHealthcarePlatformReceptionist.IAuthorized =>
    typia.random<IHealthcarePlatformReceptionist.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh a receptionist's JWT tokens (healthcare_platform_auth_sessions).
 *
 * This endpoint allows an authenticated receptionist to refresh their access
 * token using a valid refresh token. It looks up the receptionist's session in
 * 'healthcare_platform_auth_sessions', ensuring the refresh token is still
 * valid and active. If successful, new JWT credentials are returned, extending
 * access for ongoing member-level administrative tasks.
 *
 * Token refresh is denied if the underlying receptionist account is inactive or
 * deleted, or if the refresh token is expired or revoked. All operations are
 * strictly audit logged for compliance, enabling full traceability of
 * authentication lifecycle events.
 *
 * This endpoint supports seamless session continuity for receptionist users and
 * should always be paired with the login endpoint for initial sign-in flows. It
 * is unavailable to unauthenticated or invalid sessions.
 *
 * @param props.connection
 * @param props.body Credentials required to refresh receptionist access token
 * @setHeader token.access Authorization
 *
 * @path /auth/receptionist/refresh
 * @accessor api.functional.auth.receptionist.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Credentials required to refresh receptionist access token */
    body: IHealthcarePlatformReceptionist.IRefresh;
  };
  export type Body = IHealthcarePlatformReceptionist.IRefresh;
  export type Response = IHealthcarePlatformReceptionist.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/receptionist/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/receptionist/refresh";
  export const random = (): IHealthcarePlatformReceptionist.IAuthorized =>
    typia.random<IHealthcarePlatformReceptionist.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
