import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestJoin } from "../../../providers/postauthGuestJoin";
import { GuestAuth } from "../../../decorators/GuestAuth";
import { GuestPayload } from "../../../decorators/payload/GuestPayload";
import { postauthGuestRefresh } from "../../../providers/postauthGuestRefresh";

import { ISubscriptionRenewalGuardianGuest } from "../../../api/structures/ISubscriptionRenewalGuardianGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Create guest user account for registration in Subscription Renewal Guardian
   * backend.
   *
   * This API endpoint supports guest user registration (join) for the
   * Subscription Renewal Guardian backend. It allows unauthenticated guests to
   * create a new guest account by submitting their email address. The operation
   * creates a new record in the `subscription_renewal_guardian_guest` table,
   * which stores guest user emails and timestamps (created_at, updated_at).
   * This operation is a public endpoint that does not require authentication
   * and enables new guest accounts' creation to issue temporary or initial
   * credentials needed to access the system. This is fundamental for onboarding
   * guest users before they become members or admins. The guest's email is
   * validated and stored securely to protect confidentiality. Related
   * operations include login and token refresh for guests in maintaining
   * temporary access.
   *
   * @param connection
   * @param body Request body for guest registration including email address.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianGuest.ICreate,
  ): Promise<ISubscriptionRenewalGuardianGuest.IAuthorized> {
    try {
      return await postauthGuestJoin({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh temporary access token for guest user.
   *
   * Supports token refresh for guest users in Subscription Renewal Guardian.
   * Requires a valid refresh token associated with a guest account stored in
   * `subscription_renewal_guardian_guest`. The operation securely renews access
   * tokens to maintain session continuity. It is a protected endpoint requiring
   * a refresh token and enables guests to keep temporary authorized access
   * without needing to login repeatedly. Related to guest join and login
   * operations for lifecycle management.
   *
   * @param connection
   * @param body Request body carrying valid refresh token for guest user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @GuestAuth()
    guest: GuestPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianGuest.IRefresh,
  ): Promise<ISubscriptionRenewalGuardianGuest.IAuthorized> {
    try {
      return await postauthGuestRefresh({
        guest,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
