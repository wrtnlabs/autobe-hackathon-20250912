import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthUserJoin } from "../../../providers/postauthUserJoin";
import { UserAuth } from "../../../decorators/UserAuth";
import { UserPayload } from "../../../decorators/payload/UserPayload";
import { postauthUserLogin } from "../../../providers/postauthUserLogin";
import { postauthUserRefresh } from "../../../providers/postauthUserRefresh";

import { ISubscriptionRenewalGuardianUser } from "../../../api/structures/ISubscriptionRenewalGuardianUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * User registration (join) operation for subscription_renewal_guardian_user
   * role table.
   *
   * Register a new user account with email and password credentials for
   * Subscription Renewal Guardian users. This endpoint creates the account and
   * returns authorization tokens upon successful registration.
   *
   * The operation references the subscription_renewal_guardian_user table where
   * email and password_hash fields are stored. Emails are unique. Passwords are
   * securely hashed before storage.
   *
   * The request requires email and password information.
   *
   * On success, it returns authorization information confirming initial login
   * status.
   *
   * This endpoint is public and intended for new user registrations only.
   *
   * It should be paired with `/auth/user/login` and `/auth/user/refresh` for
   * full authentication lifecycle.
   *
   * Password complexity and security policies should be enforced at validation
   * layers.
   *
   * Errors on duplicate email or validation failures must be handled
   * appropriately.
   *
   * @param connection
   * @param body User join request parameters including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianUser.IJoin,
  ): Promise<ISubscriptionRenewalGuardianUser.IAuthorized> {
    try {
      return await postauthUserJoin({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * User login operation for subscription_renewal_guardian_user role table.
   *
   * Authenticate registered user credentials for Subscription Renewal Guardian
   * and return authorization tokens upon successful login.
   *
   * References subscription_renewal_guardian_user table for email and password
   * verification.
   *
   * It is public and used for existing user sign-in.
   *
   * On success, returns JWT tokens that include user ID and role.
   *
   * Failed authentication returns clear errors for invalid credentials.
   *
   * This endpoint should be used together with `/auth/user/join` and
   * `/auth/user/refresh`.
   *
   * Password verification is done securely using hashing.
   *
   * @param connection
   * @param body User login credentials with email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianUser.ILogin,
  ): Promise<ISubscriptionRenewalGuardianUser.IAuthorized> {
    try {
      return await postauthUserLogin({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Token refresh operation for subscription_renewal_guardian_user role table.
   *
   * Refresh JWT access token for authenticated users in Subscription Renewal
   * Guardian using valid refresh token.
   *
   * References subscription_renewal_guardian_user table for identity
   * verification.
   *
   * Requires valid refresh token for renewal.
   *
   * Returns updated authorization tokens on success.
   *
   * This endpoint is protected and authorized only for logged-in users.
   *
   * Complements `join` and `login` endpoints for token lifecycle management.
   *
   * @param connection
   * @param body Refresh token request payload.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianUser.IRefresh,
  ): Promise<ISubscriptionRenewalGuardianUser.IAuthorized> {
    try {
      return await postauthUserRefresh({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
