import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { ISubscriptionRenewalGuardianAdmin } from "../../../api/structures/ISubscriptionRenewalGuardianAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Admin registration endpoint for new administrators based on
   * subscription_renewal_guardian_admin table.
   *
   * Register a new admin account in the system by providing valid email and
   * password credentials. The operation validates input against the
   * subscription_renewal_guardian_admin table structure and stores a hashed
   * password for security. Upon successful registration, it issues JWT tokens
   * representing authenticated sessions.
   *
   * This operation leverages the unique constraint on email to prevent
   * duplicate admin accounts.
   *
   * Expected to be called publicly by unauthenticated requests to allow new
   * admin registration under controlled conditions.
   *
   * Related operations are login and refresh for full authentication lifecycle
   * management.
   *
   * Security notes: Passwords are stored only as salted hashes.
   *
   * Strict validation of email and password strength must be enforced on the
   * client side or upstream.
   *
   * This operation does not support guest or user registration, only admin
   * accounts.
   *
   * This serves as the entry point for admin authentication lifecycle.
   *
   * @param connection
   * @param body Payload to create a new admin account. Includes email and
   *   password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.ICreate,
  ): Promise<ISubscriptionRenewalGuardianAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin login endpoint authenticating credentials and issuing JWT tokens.
   *
   * Authenticate an admin user with email and password credentials. This
   * validates the credentials against stored hashed passwords in
   * subscription_renewal_guardian_admin.
   *
   * On successful validation, returns JWT tokens for session management.
   *
   * Failed attempts return standard authentication error codes.
   *
   * This endpoint is public to allow admin login attempts.
   *
   * Secured by password hash validations and rate limiting mechanisms.
   *
   * This endpoint excludes guest or standard user authentication.
   *
   * @param connection
   * @param body Admin login credentials including email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.ILogin,
  ): Promise<ISubscriptionRenewalGuardianAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin token refresh endpoint to renew JWT access tokens.
   *
   * Refresh an admin user's JWT access token using a valid refresh token.
   *
   * This ensures that authenticated admin users can maintain session continuity
   * without relogin.
   *
   * Refresh tokens are validated for expiration and revocation.
   *
   * Failed attempts due to invalid or expired tokens return appropriate error
   * responses.
   *
   * This endpoint requires existing authentication with a refresh token.
   *
   * Part of the admin authentication lifecycle alongside join and login
   * endpoints.
   *
   * @param connection
   * @param body Request payload containing the refresh token for renewing
   *   access.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.IRefresh,
  ): Promise<ISubscriptionRenewalGuardianAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
