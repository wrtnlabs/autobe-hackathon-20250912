import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { ISubscriptionRenewalGuardianGuest } from "../../../../api/structures/ISubscriptionRenewalGuardianGuest";

@Controller("/subscriptionRenewalGuardian/user/guests/:id")
export class SubscriptionrenewalguardianUserGuestsController {
  /**
   * Update guest user by ID.
   *
   * Update details of an existing guest user identified by their UUID. This
   * operation targets the subscription_renewal_guardian_guest entity.
   *
   * The endpoint requires authentication to prevent unauthorized modifications
   * and enforces that only the owning process may update guest information.
   * Fields updatable include the guest email. Audit timestamps are updated
   * automatically.
   *
   * Errors include not found (if guest ID does not exist) and validation errors
   * for invalid input.
   *
   * The system guarantees data integrity by restricting updates on guest
   * records and tracking changes via timestamps.
   *
   * @param connection
   * @param id Guest user's unique identifier (UUID)
   * @param body Guest user partial update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianGuest.IUpdate,
  ): Promise<ISubscriptionRenewalGuardianGuest> {
    id;
    body;
    return typia.random<ISubscriptionRenewalGuardianGuest>();
  }

  /**
   * Delete guest user by ID.
   *
   * Delete a guest user by their unique identifier (UUID). This permanently
   * removes the guest record from the database.
   *
   * This operation is restricted to authorized users to protect against
   * unauthorized data removal. Successful execution results in no content being
   * returned.
   *
   * Clients should handle cases where the guest record does not exist or
   * deletion fails due to constraints.
   *
   * @param connection
   * @param id Guest user's unique identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
