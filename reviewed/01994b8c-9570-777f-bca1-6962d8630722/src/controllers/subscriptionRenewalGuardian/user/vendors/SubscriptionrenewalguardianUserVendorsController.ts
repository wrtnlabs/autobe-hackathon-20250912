import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postsubscriptionRenewalGuardianUserVendors } from "../../../../providers/postsubscriptionRenewalGuardianUserVendors";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patchsubscriptionRenewalGuardianUserVendors } from "../../../../providers/patchsubscriptionRenewalGuardianUserVendors";
import { getsubscriptionRenewalGuardianUserVendorsVendorId } from "../../../../providers/getsubscriptionRenewalGuardianUserVendorsVendorId";
import { putsubscriptionRenewalGuardianUserVendorsVendorId } from "../../../../providers/putsubscriptionRenewalGuardianUserVendorsVendorId";

import { ISubscriptionRenewalGuardianVendors } from "../../../../api/structures/ISubscriptionRenewalGuardianVendors";
import { IPageISubscriptionRenewalGuardianVendors } from "../../../../api/structures/IPageISubscriptionRenewalGuardianVendors";

@Controller("/subscriptionRenewalGuardian/user/vendors")
export class SubscriptionrenewalguardianUserVendorsController {
  /**
   * Create a new vendor with a unique name.
   *
   * Create a new vendor record with a unique name. The vendor name uniqueness
   * is enforced at the database level.
   *
   * Security considerations include restricting access to authenticated users
   * who may create vendors only for their account.
   *
   * The request must include vendor name as specified in the DTO. Timestamp
   * fields are managed by the system.
   *
   * Validation will reject duplicates or missing data.
   *
   * On success, the full vendor record including its UUID and timestamps will
   * be returned.
   *
   * Related operations include vendor retrieval, update, and deletion.
   *
   * @param connection
   * @param body Vendor creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianVendors.ICreate,
  ): Promise<ISubscriptionRenewalGuardianVendors> {
    try {
      return await postsubscriptionRenewalGuardianUserVendors({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve subscription vendors.
   *
   * Search and retrieve a filtered, paginated list of subscription service
   * vendors in the system. This operation supports advanced filtering and
   * pagination using request body parameters, allowing clients to search
   * vendors by name and include soft-deleted records if authorized.
   *
   * The vendors are uniquely identified by their names and include metadata
   * such as creation and update timestamps.
   *
   * This endpoint is secured to allow only authenticated users to access vendor
   * listings.
   *
   * Clients can use this endpoint to build lists or auto-complete selections
   * for subscription vendor associations.
   *
   * @param connection
   * @param body Vendor search criteria and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianVendors.IRequest,
  ): Promise<IPageISubscriptionRenewalGuardianVendors.ISummary> {
    try {
      return await patchsubscriptionRenewalGuardianUserVendors({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific vendor's detailed information.
   *
   * Retrieve details of a specific vendor by vendorId from the Vendors table.
   * This operation fetches all information stored about the vendor, including
   * name, creation date, update date, and if applicable, soft deletion
   * timestamp.
   *
   * Security and Permissions: Only authenticated users with user role may
   * access this data for their vendors. Admin roles with read permissions also
   * allowed.
   *
   * The vendor is uniquely identified by a UUID, which is passed as a path
   * parameter vendorId. The response body returns a detailed vendor object with
   * relevant fields.
   *
   * Validation includes ensuring vendorId is a valid UUID string corresponding
   * to an existing vendor record. Error responses will be provided if vendor
   * not found or unauthorized access.
   *
   * Related Operations: Vendors create, update, and delete operations
   * complement this read operation.
   *
   * Expected behavior: On success, returns vendor detailed info. On failure,
   * returns 404 or 403 errors.
   *
   * @param connection
   * @param vendorId Unique identifier of the target vendor
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":vendorId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("vendorId")
    vendorId: string & tags.Format<"uuid">,
  ): Promise<ISubscriptionRenewalGuardianVendors> {
    try {
      return await getsubscriptionRenewalGuardianUserVendorsVendorId({
        user,
        vendorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing vendor's information, typically modifying the vendor
   * name. The vendor is identified by vendorId path parameter.
   *
   * Access is restricted to authenticated users with permission to update
   * vendors.
   *
   * Validation prevents duplicate names and invalid parameters.
   *
   * Response returns updated vendor details.
   *
   * Related operations include vendor creation and deletion.
   *
   * Error responses for not found or unauthorized access.
   *
   * @param connection
   * @param vendorId Unique identifier of the vendor to update
   * @param body Vendor update information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":vendorId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("vendorId")
    vendorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianVendors.IUpdate,
  ): Promise<ISubscriptionRenewalGuardianVendors> {
    try {
      return await putsubscriptionRenewalGuardianUserVendorsVendorId({
        user,
        vendorId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a vendor by setting deleted_at timestamp.
   *
   * Soft delete an existing vendor identified by vendorId by setting its
   * deleted_at timestamp.
   *
   * Access is restricted to authenticated users.
   *
   * No request body is needed.
   *
   * On success, the record is marked deleted and no content returned.
   *
   * Related operations include vendor creation, update, and retrieval.
   *
   * Error handling for invalid vendorId or unauthorized access included.
   *
   * @param connection
   * @param vendorId Unique identifier of the vendor to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":vendorId")
  public async erase(
    @TypedParam("vendorId")
    vendorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    vendorId;
    return typia.random<void>();
  }
}
