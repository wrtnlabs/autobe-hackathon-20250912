import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings } from "../../../../../providers/postsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { patchsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings } from "../../../../../providers/patchsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings";
import { getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId } from "../../../../../providers/getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId";
import { putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId } from "../../../../../providers/putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId";
import { deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId } from "../../../../../providers/deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId";

import { ISubscriptionRenewalGuardianReminderSetting } from "../../../../../api/structures/ISubscriptionRenewalGuardianReminderSetting";
import { IPageISubscriptionRenewalGuardianReminderSetting } from "../../../../../api/structures/IPageISubscriptionRenewalGuardianReminderSetting";

@Controller(
  "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings",
)
export class SubscriptionrenewalguardianUserSubscriptionsRemindersettingsController {
  /**
   * Create a new reminder setting for a subscription specified by
   * subscriptionId.
   *
   * Input request body includes days_before and channel.
   *
   * Accessible only by users with 'user' role.
   *
   * Returns the created reminder setting entity.
   *
   * Validation enforces uniqueness on (subscription_id, days_before).
   *
   * Errors include validation failure or unique constraint violation.
   *
   * @param connection
   * @param subscriptionId UUID of the subscription
   * @param body Reminder setting creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianReminderSetting.ICreate,
  ): Promise<ISubscriptionRenewalGuardianReminderSetting> {
    try {
      return await postsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings(
        {
          user,
          subscriptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List reminder settings for subscription.
   *
   * List reminder settings linked to subscription identified by subscriptionId.
   * Supports pagination and filtering.
   *
   * Available only to users with 'user' authorization role for their own
   * subscriptions.
   *
   * Returns paginated summaries of reminder settings.
   *
   * Request body specifies filtering and pagination parameters.
   *
   * @param connection
   * @param subscriptionId UUID of the subscription
   * @param body Filter and pagination parameters for reminder settings query
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianReminderSetting.IRequest,
  ): Promise<IPageISubscriptionRenewalGuardianReminderSetting.ISummary> {
    try {
      return await patchsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettings(
        {
          user,
          subscriptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get reminder setting details by ID.
   *
   * Get detailed reminder setting identified by reminderSettingId for
   * subscription identified by subscriptionId.
   *
   * Accessible to users with 'user' authorization role only.
   *
   * Returns full reminder setting data.
   *
   * HTTP 404 if reminder not found. HTTP 401 for unauthorized access.
   *
   * @param connection
   * @param subscriptionId UUID of the subscription
   * @param reminderSettingId UUID of the reminder setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reminderSettingId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedParam("reminderSettingId")
    reminderSettingId: string & tags.Format<"uuid">,
  ): Promise<ISubscriptionRenewalGuardianReminderSetting> {
    try {
      return await getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId(
        {
          user,
          subscriptionId,
          reminderSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a reminder setting for a subscription.
   *
   * This PUT operation updates the reminder setting for a subscription. It
   * requires both subscriptionId and reminderSettingId to identify the exact
   * reminder setting to be updated.
   *
   * The reminder setting consists of the number of days before renewal when a
   * reminder should be sent, and the communication channel which can be either
   * EMAIL or NONE.
   *
   * Only authenticated users with role 'user' are authorized to update reminder
   * settings linked to their own subscriptions.
   *
   * The system maintains uniqueness on the combination of subscription and
   * days_before to prevent duplicate reminders. Updates must comply with these
   * constraints.
   *
   * If successful, the updated reminder setting details are returned.
   * Validation errors, authorization failures, or uniqueness conflicts are
   * appropriately handled.
   *
   * @param connection
   * @param subscriptionId Target subscription's ID
   * @param reminderSettingId Target reminder setting's ID
   * @param body Updated reminder setting information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reminderSettingId")
  public async updateReminderSetting(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedParam("reminderSettingId")
    reminderSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianReminderSetting.IUpdate,
  ): Promise<ISubscriptionRenewalGuardianReminderSetting> {
    try {
      return await putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId(
        {
          user,
          subscriptionId,
          reminderSettingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a reminder setting for a subscription.
   *
   * This DELETE operation removes a reminder setting for a subscription
   * permanently. Both subscriptionId and reminderSettingId must be specified
   * for precise targeting.
   *
   * Only users with 'user' role may delete their own reminder settings.
   *
   * No request body is required.
   *
   * Upon success, no content is returned.
   *
   * Errors such as unauthorized access or missing resources are handled with
   * appropriate HTTP status codes.
   *
   * @param connection
   * @param subscriptionId Target subscription's ID
   * @param reminderSettingId Target reminder setting's ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reminderSettingId")
  public async eraseReminderSetting(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedParam("reminderSettingId")
    reminderSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionIdReminderSettingsReminderSettingId(
        {
          user,
          subscriptionId,
          reminderSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
