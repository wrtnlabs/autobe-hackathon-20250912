import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postsubscriptionRenewalGuardianUserSubscriptions } from "../../../../providers/postsubscriptionRenewalGuardianUserSubscriptions";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patchsubscriptionRenewalGuardianUserSubscriptions } from "../../../../providers/patchsubscriptionRenewalGuardianUserSubscriptions";
import { getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId } from "../../../../providers/getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId";
import { putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId } from "../../../../providers/putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId";
import { deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionId } from "../../../../providers/deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionId";

import { ISubscriptionRenewalGuardianSubscription } from "../../../../api/structures/ISubscriptionRenewalGuardianSubscription";
import { IPageISubscriptionRenewalGuardianSubscriptions } from "../../../../api/structures/IPageISubscriptionRenewalGuardianSubscriptions";
import { ISubscriptionRenewalGuardianSubscriptions } from "../../../../api/structures/ISubscriptionRenewalGuardianSubscriptions";

@Controller("/subscriptionRenewalGuardian/user/subscriptions")
export class SubscriptionrenewalguardianUserSubscriptionsController {
  /**
   * Create a new subscription for the authenticated user.
   *
   * This operation accepts subscription creation data, validates it against
   * business rules, and stores the new subscription in the database. It
   * calculates the next_renewal_at field automatically from started_at and
   * billing_cycle according to the business logic.
   *
   * Uniqueness constraints on (user_id, vendor_id, plan_name) are enforced.
   *
   * Only authenticated users with user role can create subscriptions.
   *
   * No soft delete mechanisms apply; this is a hard create operation.
   *
   * Request Body:
   *
   * - Subscription creation data as
   *   ISubscriptionRenewalGuardianSubscription.ICreate.
   *
   * Response Body:
   *
   * - Newly created subscription including calculated fields.
   *
   * Path Parameters:
   *
   * - None.
   *
   * Security:
   *
   * - Authentication and ownership verified by JWT.
   *
   * This operation is core to user subscription lifecycle management.
   *
   * @param connection
   * @param body Subscription creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianSubscription.ICreate,
  ): Promise<ISubscriptionRenewalGuardianSubscription> {
    try {
      return await postsubscriptionRenewalGuardianUserSubscriptions({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of subscriptions.
   *
   * This operation allows users to retrieve a filtered and paginated list of
   * their subscriptions from the subscription_renewal_guardian_subscriptions
   * table.
   *
   * Users may specify search criteria in the request body such as filtering by
   * status (ACTIVE, PAUSED, CANCELED), vendor, plan name, or date ranges for
   * next_renewal_at. Pagination is supported via standard limit and offset
   * parameters.
   *
   * Security considerations ensure only the authenticated user's subscriptions
   * are returned unless the requester has admin role with read-only access to
   * all users' subscriptions.
   *
   * The response returns a paginated list of subscription summaries with
   * essential properties for display in UI lists.
   *
   * This operation is critical for enabling users to manage and monitor their
   * subscriptions efficiently.
   *
   * Parameters:
   *
   * - No path parameters.
   *
   * Request Body:
   *
   * - ISubscriptionRenewalGuardianSubscriptions.IRequest: search, filter,
   *   pagination parameters.
   *
   * Response Body:
   *
   * - IPageISubscriptionRenewalGuardianSubscriptions.ISummary: paginated
   *   subscription summaries.
   *
   * Authorization:
   *
   * - Roles: user, admin (both can access but with data filtering logic).
   *
   * Expected errors:
   *
   * - 401 Unauthorized if unauthenticated.
   * - 400 Bad Request for invalid filters.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for subscriptions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ISubscriptionRenewalGuardianSubscriptions.IRequest,
  ): Promise<IPageISubscriptionRenewalGuardianSubscriptions.ISummary> {
    try {
      return await patchsubscriptionRenewalGuardianUserSubscriptions({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed subscription information by ID.
   *
   * Retrieve detailed information of a subscription by its ID.
   *
   * This operation fetches the subscription identified by subscriptionId from
   * the subscription_renewal_guardian_subscriptions table. It includes
   * comprehensive details such as plan name, status, billing cycle, renewal
   * dates, amount, currency, notes, and related vendor and reminder settings.
   *
   * Security ensures that only the owner user or an admin can access the
   * subscription details.
   *
   * Path Parameters:
   *
   * - SubscriptionId: UUID of the subscription to retrieve.
   *
   * This operation is essential for viewing full subscription details in a
   * dedicated UI screen.
   *
   * @param connection
   * @param subscriptionId Unique identifier of the subscription to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subscriptionId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<ISubscriptionRenewalGuardianSubscription> {
    try {
      return await getsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId(
        {
          user,
          subscriptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update subscription by ID.
   *
   * Update an existing subscription identified by subscriptionId.
   *
   * Allows modification of subscription fields except primary key and immutable
   * fields. Validates input and business rules, recalculates next_renewal_at if
   * necessary.
   *
   * Updates are forbidden on CANCELED subscriptions to enforce terminal state.
   *
   * Path Parameters:
   *
   * - SubscriptionId: UUID of the subscription to update.
   *
   * Request Body:
   *
   * - ISubscriptionRenewalGuardianSubscription.IUpdate containing fields to
   *   update.
   *
   * Response Body:
   *
   * - Updated subscription details.
   *
   * Authorization ensures only the owner user can update their subscription.
   *
   * This enables users to maintain their subscription information accurately
   * throughout its lifecycle.
   *
   * @param connection
   * @param subscriptionId Unique identifier of the subscription to update
   * @param body Subscription update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":subscriptionId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianSubscription.IUpdate,
  ): Promise<ISubscriptionRenewalGuardianSubscription> {
    try {
      return await putsubscriptionRenewalGuardianUserSubscriptionsSubscriptionId(
        {
          user,
          subscriptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a subscription by ID.
   *
   * Delete a subscription identified by subscriptionId. Only authorized users
   * with role 'user' can perform this operation. The subscription identified by
   * UUID subscriptionId is removed permanently from the system.
   *
   * This operation requires no request body and produces no response body.
   *
   * HTTP 404 returned if subscription not found or user unauthorized. HTTP 401
   * returned if user not authenticated.
   *
   * @param connection
   * @param subscriptionId UUID of the subscription to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":subscriptionId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletesubscriptionRenewalGuardianUserSubscriptionsSubscriptionId(
        {
          user,
          subscriptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
