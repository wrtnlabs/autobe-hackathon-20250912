import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { ISubscriptionRenewalGuardianAdmin } from "../../../../api/structures/ISubscriptionRenewalGuardianAdmin";
import { IPageISubscriptionRenewalGuardianAdmin } from "../../../../api/structures/IPageISubscriptionRenewalGuardianAdmin";

@Controller("/subscriptionRenewalGuardian/admin/admins")
export class SubscriptionrenewalguardianAdminAdminsController {
  /**
   * Create a new subscriptionRenewalGuardianAdmin account.
   *
   * This POST operation creates a new subscriptionRenewalGuardianAdmin record.
   *
   * It requires a request body with all necessary fields for creation.
   *
   * Only users with admin role may perform this operation.
   *
   * The response contains the created admin entity data.
   *
   * Standard validation and error handling apply for duplicate emails or
   * invalid inputs.
   *
   * @param connection
   * @param body Creation data for a new subscriptionRenewalGuardianAdmin
   *   account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAdmin(
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.ICreate,
  ): Promise<ISubscriptionRenewalGuardianAdmin> {
    body;
    return typia.random<ISubscriptionRenewalGuardianAdmin>();
  }

  /**
   * Search and list subscriptionRenewalGuardianAdmin accounts with pagination
   * and filters.
   *
   * This PATCH operation lists subscriptionRenewalGuardianAdmin entities from
   * the database with support for advanced filtering, search, pagination, and
   * sorting.
   *
   * It returns a paginated summary list optimized for admin overviews.
   *
   * Access is restricted to users with admin role privileges.
   *
   * No path parameters are required.
   *
   * Request body contains search filters, pagination parameters such as limit
   * and offset.
   *
   * Response body contains paginated summary data of admins.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for admin filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexAdmins(
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.IRequest,
  ): Promise<IPageISubscriptionRenewalGuardianAdmin.ISummary> {
    body;
    return typia.random<IPageISubscriptionRenewalGuardianAdmin.ISummary>();
  }

  /**
   * Retrieve a single subscriptionRenewalGuardianAdmin by UUID id.
   *
   * This GET operation returns detailed information about a single
   * subscriptionRenewalGuardianAdmin identified by UUID id.
   *
   * Only accessible by authenticated users with admin role.
   *
   * The response includes all properties of the admin entity as defined in the
   * database schema.
   *
   * The id path parameter uniquely identifies the admin account.
   *
   * No request body is required.
   *
   * Standard error handling applies for non-existent or unauthorized requests.
   *
   * @param connection
   * @param id Unique identifier of the admin to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atAdmin(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ISubscriptionRenewalGuardianAdmin> {
    id;
    return typia.random<ISubscriptionRenewalGuardianAdmin>();
  }

  /**
   * Update administrator account by ID.
   *
   * Update an existing administrator account by specifying its unique UUID
   * identifier. This operation allows changing the admin's email and/or
   * password hash while maintaining the created_at record. The updated_at
   * timestamp is set to the current update time. The system enforces uniqueness
   * of email across all admins to prevent conflicts.
   *
   * Only authorized users with admin privileges can perform this update
   * operation.
   *
   * This endpoint operates on the subscription_renewal_guardian_admin table in
   * the PostgreSQL database.
   *
   * Invalid inputs such as duplicate emails or incorrect UUID format will
   * trigger validation errors. Proper error handling returns descriptive
   * messages and status codes.
   *
   * This operation is distinct from creating or deleting admin accounts and
   * solely manages updates for existing entries.
   *
   * @param connection
   * @param id Unique identifier of the administrator to update
   * @param body Update payload for subscription renewal guardian administrator
   *   account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ISubscriptionRenewalGuardianAdmin.IUpdate,
  ): Promise<ISubscriptionRenewalGuardianAdmin> {
    id;
    body;
    return typia.random<ISubscriptionRenewalGuardianAdmin>();
  }

  /**
   * Delete administrator account by ID.
   *
   * Deletes the administrator account corresponding to the specified UUID. This
   * operation permanently removes the record from the database and cannot be
   * undone.
   *
   * Only authorized administrators may perform this deletion.
   *
   * The operation validates the ID format and existence before deletion and
   * returns appropriate status codes for success or failure.
   *
   * No response body is returned upon successful deletion.
   *
   * This function corresponds to the subscription_renewal_guardian_admin
   * database table.
   *
   * @param connection
   * @param id Unique identifier of the administrator to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    id;
    return typia.random<void>();
  }
}
