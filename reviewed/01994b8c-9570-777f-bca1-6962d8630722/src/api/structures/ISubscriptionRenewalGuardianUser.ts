import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * User accounts representing authenticated individuals who can manage their own
 * subscriptions, vendors, and reminder settings. Includes secure authentication
 * fields such as email and password hash. Primary key is UUID `id`. Contains
 * audit timestamps for creation and updates.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Identity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISubscriptionRenewalGuardianUser = {
  /**
   * Primary Key.
   *
   * UUID string to uniquely identify the user account.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's unique email address used for login and identification.
   *
   * Must be unique across all users.
   */
  email: string;

  /**
   * Hashed password for secure authentication.
   *
   * NEVER included in response types for security.
   */
  password_hash: string;

  /**
   * Timestamp when the user account was created.
   *
   * Stored as UTC ISO 8601 string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user account was last updated.
   *
   * Stored as UTC ISO 8601 string.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ISubscriptionRenewalGuardianUser {
  /**
   * Request body for registering a new user account. Includes mandatory email
   * and plaintext password for join process. Password will be hashed on
   * server side.
   */
  export type IJoin = {
    /** Unique email address for the user. */
    email: string;

    /** User's plaintext password to be hashed securely. */
    password: string;
  };

  /** Request body for login operation with email and password. */
  export type ILogin = {
    /** User login email. */
    email: string;

    /** Plaintext password for authentication. */
    password: string;
  };

  /**
   * Request body for token refresh operation. Typically includes the refresh
   * token.
   */
  export type IRefresh = {
    /** Refresh token string issued at login or join. */
    refresh_token: string;
  };

  /**
   * Response body for authorization containing user id and token info.
   * Provides the authenticated user's unique identifier and an authorization
   * token object (e.g., JWT).
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated user. */
    id: string & tags.Format<"uuid">;

    /**
     * User's unique email address used for login and identification.
     *
     * Must be unique across all users.
     */
    email: string;

    /**
     * Hashed password for secure authentication.
     *
     * NEVER included in response types for security.
     */
    password_hash: string;

    /**
     * Timestamp when the user account was created.
     *
     * Stored as UTC ISO 8601 string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the user account was last updated.
     *
     * Stored as UTC ISO 8601 string.
     */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request parameters for listing users with pagination and optional
   * filtering.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per a page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Email address filter. Exact or partial match for user emails. */
    search_email?: string | undefined;

    /** Filter to match users created before this DateTime (ISO 8601 format). */
    search_created_before?: (string & tags.Format<"date-time">) | undefined;

    /** Filter to match users created after this DateTime (ISO 8601 format). */
    search_created_after?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Request body for creating a new subscription renewal guardian user
   * account.
   *
   * Includes required email and hashed password fields for registration.
   *
   * Passwords must be properly hashed before storage.
   */
  export type ICreate = {
    /**
     * User's unique email address.
     *
     * Required for user registration.
     */
    email: string;

    /**
     * Plain text password to be hashed securely before storage.
     *
     * Must follow password complexity policies.
     */
    password_hash: string;
  };

  /**
   * Request body for updating an existing subscription renewal guardian user
   * account.
   *
   * All fields optional; password hash and email can be updated with proper
   * validations.
   *
   * The updated_at timestamp is managed by the system and is optional.
   */
  export type IUpdate = {
    /**
     * User's unique email address.
     *
     * Optional for update; if provided, must remain unique.
     */
    email?: string | null | undefined;

    /**
     * New hashed password.
     *
     * Optional for update. Must be properly hashed before storing.
     */
    password_hash?: string | null | undefined;

    /**
     * The last time the user was updated.
     *
     * Optional and readonly; usually set by the system.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
