import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin accounts with read-only access to all usersâ€™ subscription data.
 * Includes login credentials and audit timestamps.
 *
 * Primary key is UUID `id`.
 *
 * Email must be unique across admins.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISubscriptionRenewalGuardianAdmin = {
  /**
   * Primary Key.
   *
   * Unique identifier of the admin account.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Administrator's unique email address.
   *
   * Must be a unique string.
   */
  email: string;

  /**
   * Hashed password string for admin authentication.
   *
   * Stored securely and never exposed.
   */
  password_hash: string;

  /**
   * Timestamp of account creation.
   *
   * Stored as ISO8601 string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last account update.
   *
   * Stored as ISO8601 string.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ISubscriptionRenewalGuardianAdmin {
  /** Payload to create a new SubscriptionRenewalGuardianAdmin account. */
  export type ICreate = {
    /** Administrator's unique email address. */
    email: string;

    /** Hashed password for admin authentication. */
    password_hash: string;
  };

  /** Credentials for administrator login. */
  export type ILogin = {
    /** Administrator's unique email address. */
    email: string;

    /**
     * Password in plain text sent from client, to be hashed and compared in
     * backend.
     */
    password: string;
  };

  /** Refresh token payload for administrator. */
  export type IRefresh = {
    /** Refresh token string to obtain a new access token. */
    refresh_token: string;
  };

  /** Authorization response containing JWT token for administrator. */
  export type IAuthorized = {
    /** Unique identifier of the authenticated admin user. */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator's unique email address.
     *
     * Must be a unique string.
     */
    email: string;

    /**
     * Hashed password string for admin authentication.
     *
     * Stored securely and never exposed.
     */
    password_hash: string;

    /**
     * Timestamp of account creation.
     *
     * Stored as ISO8601 string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last account update.
     *
     * Stored as ISO8601 string.
     */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request to search and filter SubscriptionRenewalGuardianAdmin accounts. */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /** Limitation of records per a page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Default<100> & tags.Minimum<0>)
      | undefined;

    /** Search filter for email. */
    email?: string | undefined;
  };

  /**
   * Properties used to update an admin user account. All fields are optional
   * to allow partial updates.
   */
  export type IUpdate = {
    /**
     * Unique email address to update for the admin.
     *
     * Optional, must be unique if provided.
     */
    email?: string | undefined;

    /**
     * Password hash string for updating admin password.
     *
     * Optional, stored securely.
     */
    password_hash?: string | undefined;
  };

  /**
   * Summary representation of an admin account with essential non-sensitive
   * fields.
   */
  export type ISummary = {
    /** Unique identifier of the admin account */
    id: string & tags.Format<"uuid">;

    /** Unique email address of the admin */
    email: string;

    /** Account creation timestamp */
    created_at: string & tags.Format<"date-time">;

    /** Account last update timestamp */
    updated_at: string & tags.Format<"date-time">;
  };
}
