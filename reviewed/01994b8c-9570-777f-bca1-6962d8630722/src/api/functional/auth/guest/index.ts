import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianGuest } from "../../../structures/ISubscriptionRenewalGuardianGuest";

/**
 * Create guest user account for registration in Subscription Renewal Guardian
 * backend.
 *
 * This API endpoint supports guest user registration (join) for the
 * Subscription Renewal Guardian backend. It allows unauthenticated guests to
 * create a new guest account by submitting their email address. The operation
 * creates a new record in the `subscription_renewal_guardian_guest` table,
 * which stores guest user emails and timestamps (created_at, updated_at). This
 * operation is a public endpoint that does not require authentication and
 * enables new guest accounts' creation to issue temporary or initial
 * credentials needed to access the system. This is fundamental for onboarding
 * guest users before they become members or admins. The guest's email is
 * validated and stored securely to protect confidentiality. Related operations
 * include login and token refresh for guests in maintaining temporary access.
 *
 * @param props.connection
 * @param props.body Request body for guest registration including email
 *   address.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Request body for guest registration including email address. */
    body: ISubscriptionRenewalGuardianGuest.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianGuest.ICreate;
  export type Response = ISubscriptionRenewalGuardianGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): ISubscriptionRenewalGuardianGuest.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh temporary access token for guest user.
 *
 * Supports token refresh for guest users in Subscription Renewal Guardian.
 * Requires a valid refresh token associated with a guest account stored in
 * `subscription_renewal_guardian_guest`. The operation securely renews access
 * tokens to maintain session continuity. It is a protected endpoint requiring a
 * refresh token and enables guests to keep temporary authorized access without
 * needing to login repeatedly. Related to guest join and login operations for
 * lifecycle management.
 *
 * @param props.connection
 * @param props.body Request body carrying valid refresh token for guest user.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Request body carrying valid refresh token for guest user. */
    body: ISubscriptionRenewalGuardianGuest.IRefresh;
  };
  export type Body = ISubscriptionRenewalGuardianGuest.IRefresh;
  export type Response = ISubscriptionRenewalGuardianGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): ISubscriptionRenewalGuardianGuest.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
