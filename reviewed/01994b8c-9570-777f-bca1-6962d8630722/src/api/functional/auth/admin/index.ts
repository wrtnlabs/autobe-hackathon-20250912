import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianAdmin } from "../../../structures/ISubscriptionRenewalGuardianAdmin";

/**
 * Admin registration endpoint for new administrators based on
 * subscription_renewal_guardian_admin table.
 *
 * Register a new admin account in the system by providing valid email and
 * password credentials. The operation validates input against the
 * subscription_renewal_guardian_admin table structure and stores a hashed
 * password for security. Upon successful registration, it issues JWT tokens
 * representing authenticated sessions.
 *
 * This operation leverages the unique constraint on email to prevent duplicate
 * admin accounts.
 *
 * Expected to be called publicly by unauthenticated requests to allow new admin
 * registration under controlled conditions.
 *
 * Related operations are login and refresh for full authentication lifecycle
 * management.
 *
 * Security notes: Passwords are stored only as salted hashes.
 *
 * Strict validation of email and password strength must be enforced on the
 * client side or upstream.
 *
 * This operation does not support guest or user registration, only admin
 * accounts.
 *
 * This serves as the entry point for admin authentication lifecycle.
 *
 * @param props.connection
 * @param props.body Payload to create a new admin account. Includes email and
 *   password.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Payload to create a new admin account. Includes email and password. */
    body: ISubscriptionRenewalGuardianAdmin.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.ICreate;
  export type Response = ISubscriptionRenewalGuardianAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): ISubscriptionRenewalGuardianAdmin.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin login endpoint authenticating credentials and issuing JWT tokens.
 *
 * Authenticate an admin user with email and password credentials. This
 * validates the credentials against stored hashed passwords in
 * subscription_renewal_guardian_admin.
 *
 * On successful validation, returns JWT tokens for session management.
 *
 * Failed attempts return standard authentication error codes.
 *
 * This endpoint is public to allow admin login attempts.
 *
 * Secured by password hash validations and rate limiting mechanisms.
 *
 * This endpoint excludes guest or standard user authentication.
 *
 * @param props.connection
 * @param props.body Admin login credentials including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login credentials including email and password. */
    body: ISubscriptionRenewalGuardianAdmin.ILogin;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.ILogin;
  export type Response = ISubscriptionRenewalGuardianAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): ISubscriptionRenewalGuardianAdmin.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin token refresh endpoint to renew JWT access tokens.
 *
 * Refresh an admin user's JWT access token using a valid refresh token.
 *
 * This ensures that authenticated admin users can maintain session continuity
 * without relogin.
 *
 * Refresh tokens are validated for expiration and revocation.
 *
 * Failed attempts due to invalid or expired tokens return appropriate error
 * responses.
 *
 * This endpoint requires existing authentication with a refresh token.
 *
 * Part of the admin authentication lifecycle alongside join and login
 * endpoints.
 *
 * @param props.connection
 * @param props.body Request payload containing the refresh token for renewing
 *   access.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Request payload containing the refresh token for renewing access. */
    body: ISubscriptionRenewalGuardianAdmin.IRefresh;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.IRefresh;
  export type Response = ISubscriptionRenewalGuardianAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): ISubscriptionRenewalGuardianAdmin.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
