import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianUser } from "../../../structures/ISubscriptionRenewalGuardianUser";

/**
 * User registration (join) operation for subscription_renewal_guardian_user
 * role table.
 *
 * Register a new user account with email and password credentials for
 * Subscription Renewal Guardian users. This endpoint creates the account and
 * returns authorization tokens upon successful registration.
 *
 * The operation references the subscription_renewal_guardian_user table where
 * email and password_hash fields are stored. Emails are unique. Passwords are
 * securely hashed before storage.
 *
 * The request requires email and password information.
 *
 * On success, it returns authorization information confirming initial login
 * status.
 *
 * This endpoint is public and intended for new user registrations only.
 *
 * It should be paired with `/auth/user/login` and `/auth/user/refresh` for full
 * authentication lifecycle.
 *
 * Password complexity and security policies should be enforced at validation
 * layers.
 *
 * Errors on duplicate email or validation failures must be handled
 * appropriately.
 *
 * @param props.connection
 * @param props.body User join request parameters including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** User join request parameters including email and password. */
    body: ISubscriptionRenewalGuardianUser.IJoin;
  };
  export type Body = ISubscriptionRenewalGuardianUser.IJoin;
  export type Response = ISubscriptionRenewalGuardianUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): ISubscriptionRenewalGuardianUser.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * User login operation for subscription_renewal_guardian_user role table.
 *
 * Authenticate registered user credentials for Subscription Renewal Guardian
 * and return authorization tokens upon successful login.
 *
 * References subscription_renewal_guardian_user table for email and password
 * verification.
 *
 * It is public and used for existing user sign-in.
 *
 * On success, returns JWT tokens that include user ID and role.
 *
 * Failed authentication returns clear errors for invalid credentials.
 *
 * This endpoint should be used together with `/auth/user/join` and
 * `/auth/user/refresh`.
 *
 * Password verification is done securely using hashing.
 *
 * @param props.connection
 * @param props.body User login credentials with email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** User login credentials with email and password. */
    body: ISubscriptionRenewalGuardianUser.ILogin;
  };
  export type Body = ISubscriptionRenewalGuardianUser.ILogin;
  export type Response = ISubscriptionRenewalGuardianUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): ISubscriptionRenewalGuardianUser.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Token refresh operation for subscription_renewal_guardian_user role table.
 *
 * Refresh JWT access token for authenticated users in Subscription Renewal
 * Guardian using valid refresh token.
 *
 * References subscription_renewal_guardian_user table for identity
 * verification.
 *
 * Requires valid refresh token for renewal.
 *
 * Returns updated authorization tokens on success.
 *
 * This endpoint is protected and authorized only for logged-in users.
 *
 * Complements `join` and `login` endpoints for token lifecycle management.
 *
 * @param props.connection
 * @param props.body Refresh token request payload.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload. */
    body: ISubscriptionRenewalGuardianUser.IRefresh;
  };
  export type Body = ISubscriptionRenewalGuardianUser.IRefresh;
  export type Response = ISubscriptionRenewalGuardianUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): ISubscriptionRenewalGuardianUser.IAuthorized =>
    typia.random<ISubscriptionRenewalGuardianUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
