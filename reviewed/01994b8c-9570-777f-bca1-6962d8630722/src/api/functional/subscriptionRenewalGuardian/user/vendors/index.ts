import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianVendors } from "../../../../structures/ISubscriptionRenewalGuardianVendors";
import { IPageISubscriptionRenewalGuardianVendors } from "../../../../structures/IPageISubscriptionRenewalGuardianVendors";

/**
 * Create a new vendor with a unique name.
 *
 * Create a new vendor record with a unique name. The vendor name uniqueness is
 * enforced at the database level.
 *
 * Security considerations include restricting access to authenticated users who
 * may create vendors only for their account.
 *
 * The request must include vendor name as specified in the DTO. Timestamp
 * fields are managed by the system.
 *
 * Validation will reject duplicates or missing data.
 *
 * On success, the full vendor record including its UUID and timestamps will be
 * returned.
 *
 * Related operations include vendor retrieval, update, and deletion.
 *
 * @param props.connection
 * @param props.body Vendor creation information
 * @path /subscriptionRenewalGuardian/user/vendors
 * @accessor api.functional.subscriptionRenewalGuardian.user.vendors.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Vendor creation information */
    body: ISubscriptionRenewalGuardianVendors.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianVendors.ICreate;
  export type Response = ISubscriptionRenewalGuardianVendors;

  export const METADATA = {
    method: "POST",
    path: "/subscriptionRenewalGuardian/user/vendors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/user/vendors";
  export const random = (): ISubscriptionRenewalGuardianVendors =>
    typia.random<ISubscriptionRenewalGuardianVendors>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve subscription vendors.
 *
 * Search and retrieve a filtered, paginated list of subscription service
 * vendors in the system. This operation supports advanced filtering and
 * pagination using request body parameters, allowing clients to search vendors
 * by name and include soft-deleted records if authorized.
 *
 * The vendors are uniquely identified by their names and include metadata such
 * as creation and update timestamps.
 *
 * This endpoint is secured to allow only authenticated users to access vendor
 * listings.
 *
 * Clients can use this endpoint to build lists or auto-complete selections for
 * subscription vendor associations.
 *
 * @param props.connection
 * @param props.body Vendor search criteria and pagination parameters
 * @path /subscriptionRenewalGuardian/user/vendors
 * @accessor api.functional.subscriptionRenewalGuardian.user.vendors.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Vendor search criteria and pagination parameters */
    body: ISubscriptionRenewalGuardianVendors.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianVendors.IRequest;
  export type Response = IPageISubscriptionRenewalGuardianVendors.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/user/vendors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/user/vendors";
  export const random = (): IPageISubscriptionRenewalGuardianVendors.ISummary =>
    typia.random<IPageISubscriptionRenewalGuardianVendors.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific vendor's detailed information.
 *
 * Retrieve details of a specific vendor by vendorId from the Vendors table.
 * This operation fetches all information stored about the vendor, including
 * name, creation date, update date, and if applicable, soft deletion
 * timestamp.
 *
 * Security and Permissions: Only authenticated users with user role may access
 * this data for their vendors. Admin roles with read permissions also allowed.
 *
 * The vendor is uniquely identified by a UUID, which is passed as a path
 * parameter vendorId. The response body returns a detailed vendor object with
 * relevant fields.
 *
 * Validation includes ensuring vendorId is a valid UUID string corresponding to
 * an existing vendor record. Error responses will be provided if vendor not
 * found or unauthorized access.
 *
 * Related Operations: Vendors create, update, and delete operations complement
 * this read operation.
 *
 * Expected behavior: On success, returns vendor detailed info. On failure,
 * returns 404 or 403 errors.
 *
 * @param props.connection
 * @param props.vendorId Unique identifier of the target vendor
 * @path /subscriptionRenewalGuardian/user/vendors/:vendorId
 * @accessor api.functional.subscriptionRenewalGuardian.user.vendors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target vendor */
    vendorId: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianVendors;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/user/vendors/:vendorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/vendors/${encodeURIComponent(props.vendorId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianVendors =>
    typia.random<ISubscriptionRenewalGuardianVendors>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("vendorId")(() => typia.assert(props.vendorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing vendor's information, typically modifying the vendor name.
 * The vendor is identified by vendorId path parameter.
 *
 * Access is restricted to authenticated users with permission to update
 * vendors.
 *
 * Validation prevents duplicate names and invalid parameters.
 *
 * Response returns updated vendor details.
 *
 * Related operations include vendor creation and deletion.
 *
 * Error responses for not found or unauthorized access.
 *
 * @param props.connection
 * @param props.vendorId Unique identifier of the vendor to update
 * @param props.body Vendor update information
 * @path /subscriptionRenewalGuardian/user/vendors/:vendorId
 * @accessor api.functional.subscriptionRenewalGuardian.user.vendors.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the vendor to update */
    vendorId: string & tags.Format<"uuid">;

    /** Vendor update information */
    body: ISubscriptionRenewalGuardianVendors.IUpdate;
  };
  export type Body = ISubscriptionRenewalGuardianVendors.IUpdate;
  export type Response = ISubscriptionRenewalGuardianVendors;

  export const METADATA = {
    method: "PUT",
    path: "/subscriptionRenewalGuardian/user/vendors/:vendorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/vendors/${encodeURIComponent(props.vendorId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianVendors =>
    typia.random<ISubscriptionRenewalGuardianVendors>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("vendorId")(() => typia.assert(props.vendorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a vendor by setting deleted_at timestamp.
 *
 * Soft delete an existing vendor identified by vendorId by setting its
 * deleted_at timestamp.
 *
 * Access is restricted to authenticated users.
 *
 * No request body is needed.
 *
 * On success, the record is marked deleted and no content returned.
 *
 * Related operations include vendor creation, update, and retrieval.
 *
 * Error handling for invalid vendorId or unauthorized access included.
 *
 * @param props.connection
 * @param props.vendorId Unique identifier of the vendor to delete
 * @path /subscriptionRenewalGuardian/user/vendors/:vendorId
 * @accessor api.functional.subscriptionRenewalGuardian.user.vendors.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the vendor to delete */
    vendorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/subscriptionRenewalGuardian/user/vendors/:vendorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/vendors/${encodeURIComponent(props.vendorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("vendorId")(() => typia.assert(props.vendorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
