import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianGuest } from "../../../../structures/ISubscriptionRenewalGuardianGuest";

/**
 * Update guest user by ID.
 *
 * Update details of an existing guest user identified by their UUID. This
 * operation targets the subscription_renewal_guardian_guest entity.
 *
 * The endpoint requires authentication to prevent unauthorized modifications
 * and enforces that only the owning process may update guest information.
 * Fields updatable include the guest email. Audit timestamps are updated
 * automatically.
 *
 * Errors include not found (if guest ID does not exist) and validation errors
 * for invalid input.
 *
 * The system guarantees data integrity by restricting updates on guest records
 * and tracking changes via timestamps.
 *
 * @param props.connection
 * @param props.id Guest user's unique identifier (UUID)
 * @param props.body Guest user partial update payload
 * @path /subscriptionRenewalGuardian/user/guests/:id
 * @accessor api.functional.subscriptionRenewalGuardian.user.guests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Guest user's unique identifier (UUID) */
    id: string & tags.Format<"uuid">;

    /** Guest user partial update payload */
    body: ISubscriptionRenewalGuardianGuest.IUpdate;
  };
  export type Body = ISubscriptionRenewalGuardianGuest.IUpdate;
  export type Response = ISubscriptionRenewalGuardianGuest;

  export const METADATA = {
    method: "PUT",
    path: "/subscriptionRenewalGuardian/user/guests/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianGuest =>
    typia.random<ISubscriptionRenewalGuardianGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete guest user by ID.
 *
 * Delete a guest user by their unique identifier (UUID). This permanently
 * removes the guest record from the database.
 *
 * This operation is restricted to authorized users to protect against
 * unauthorized data removal. Successful execution results in no content being
 * returned.
 *
 * Clients should handle cases where the guest record does not exist or deletion
 * fails due to constraints.
 *
 * @param props.connection
 * @param props.id Guest user's unique identifier (UUID)
 * @path /subscriptionRenewalGuardian/user/guests/:id
 * @accessor api.functional.subscriptionRenewalGuardian.user.guests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Guest user's unique identifier (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/subscriptionRenewalGuardian/user/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
