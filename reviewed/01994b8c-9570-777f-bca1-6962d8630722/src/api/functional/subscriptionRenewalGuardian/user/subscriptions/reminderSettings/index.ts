import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianReminderSetting } from "../../../../../structures/ISubscriptionRenewalGuardianReminderSetting";
import { IPageISubscriptionRenewalGuardianReminderSetting } from "../../../../../structures/IPageISubscriptionRenewalGuardianReminderSetting";

/**
 * Create a new reminder setting for a subscription specified by subscriptionId.
 *
 * Input request body includes days_before and channel.
 *
 * Accessible only by users with 'user' role.
 *
 * Returns the created reminder setting entity.
 *
 * Validation enforces uniqueness on (subscription_id, days_before).
 *
 * Errors include validation failure or unique constraint violation.
 *
 * @param props.connection
 * @param props.subscriptionId UUID of the subscription
 * @param props.body Reminder setting creation data
 * @path /subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.reminderSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the subscription */
    subscriptionId: string & tags.Format<"uuid">;

    /** Reminder setting creation data */
    body: ISubscriptionRenewalGuardianReminderSetting.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianReminderSetting.ICreate;
  export type Response = ISubscriptionRenewalGuardianReminderSetting;

  export const METADATA = {
    method: "POST",
    path: "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/reminderSettings`;
  export const random = (): ISubscriptionRenewalGuardianReminderSetting =>
    typia.random<ISubscriptionRenewalGuardianReminderSetting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List reminder settings for subscription.
 *
 * List reminder settings linked to subscription identified by subscriptionId.
 * Supports pagination and filtering.
 *
 * Available only to users with 'user' authorization role for their own
 * subscriptions.
 *
 * Returns paginated summaries of reminder settings.
 *
 * Request body specifies filtering and pagination parameters.
 *
 * @param props.connection
 * @param props.subscriptionId UUID of the subscription
 * @param props.body Filter and pagination parameters for reminder settings
 *   query
 * @path /subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.reminderSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the subscription */
    subscriptionId: string & tags.Format<"uuid">;

    /** Filter and pagination parameters for reminder settings query */
    body: ISubscriptionRenewalGuardianReminderSetting.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianReminderSetting.IRequest;
  export type Response =
    IPageISubscriptionRenewalGuardianReminderSetting.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/reminderSettings`;
  export const random =
    (): IPageISubscriptionRenewalGuardianReminderSetting.ISummary =>
      typia.random<IPageISubscriptionRenewalGuardianReminderSetting.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get reminder setting details by ID.
 *
 * Get detailed reminder setting identified by reminderSettingId for
 * subscription identified by subscriptionId.
 *
 * Accessible to users with 'user' authorization role only.
 *
 * Returns full reminder setting data.
 *
 * HTTP 404 if reminder not found. HTTP 401 for unauthorized access.
 *
 * @param props.connection
 * @param props.subscriptionId UUID of the subscription
 * @param props.reminderSettingId UUID of the reminder setting
 * @path /subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.reminderSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the subscription */
    subscriptionId: string & tags.Format<"uuid">;

    /** UUID of the reminder setting */
    reminderSettingId: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianReminderSetting;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/reminderSettings/${encodeURIComponent(props.reminderSettingId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianReminderSetting =>
    typia.random<ISubscriptionRenewalGuardianReminderSetting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.param("reminderSettingId")(() =>
        typia.assert(props.reminderSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a reminder setting for a subscription.
 *
 * This PUT operation updates the reminder setting for a subscription. It
 * requires both subscriptionId and reminderSettingId to identify the exact
 * reminder setting to be updated.
 *
 * The reminder setting consists of the number of days before renewal when a
 * reminder should be sent, and the communication channel which can be either
 * EMAIL or NONE.
 *
 * Only authenticated users with role 'user' are authorized to update reminder
 * settings linked to their own subscriptions.
 *
 * The system maintains uniqueness on the combination of subscription and
 * days_before to prevent duplicate reminders. Updates must comply with these
 * constraints.
 *
 * If successful, the updated reminder setting details are returned. Validation
 * errors, authorization failures, or uniqueness conflicts are appropriately
 * handled.
 *
 * @param props.connection
 * @param props.subscriptionId Target subscription's ID
 * @param props.reminderSettingId Target reminder setting's ID
 * @param props.body Updated reminder setting information
 * @path /subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.reminderSettings.updateReminderSetting
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateReminderSetting(
  connection: IConnection,
  props: updateReminderSetting.Props,
): Promise<updateReminderSetting.Response> {
  return true === connection.simulate
    ? updateReminderSetting.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateReminderSetting.METADATA,
          path: updateReminderSetting.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateReminderSetting {
  export type Props = {
    /** Target subscription's ID */
    subscriptionId: string & tags.Format<"uuid">;

    /** Target reminder setting's ID */
    reminderSettingId: string & tags.Format<"uuid">;

    /** Updated reminder setting information */
    body: ISubscriptionRenewalGuardianReminderSetting.IUpdate;
  };
  export type Body = ISubscriptionRenewalGuardianReminderSetting.IUpdate;
  export type Response = ISubscriptionRenewalGuardianReminderSetting;

  export const METADATA = {
    method: "PUT",
    path: "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/reminderSettings/${encodeURIComponent(props.reminderSettingId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianReminderSetting =>
    typia.random<ISubscriptionRenewalGuardianReminderSetting>();
  export const simulate = (
    connection: IConnection,
    props: updateReminderSetting.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateReminderSetting.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.param("reminderSettingId")(() =>
        typia.assert(props.reminderSettingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a reminder setting for a subscription.
 *
 * This DELETE operation removes a reminder setting for a subscription
 * permanently. Both subscriptionId and reminderSettingId must be specified for
 * precise targeting.
 *
 * Only users with 'user' role may delete their own reminder settings.
 *
 * No request body is required.
 *
 * Upon success, no content is returned.
 *
 * Errors such as unauthorized access or missing resources are handled with
 * appropriate HTTP status codes.
 *
 * @param props.connection
 * @param props.subscriptionId Target subscription's ID
 * @param props.reminderSettingId Target reminder setting's ID
 * @path /subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.reminderSettings.eraseReminderSetting
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseReminderSetting(
  connection: IConnection,
  props: eraseReminderSetting.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseReminderSetting.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseReminderSetting.METADATA,
          path: eraseReminderSetting.path(props),
          status: null,
        },
      );
}
export namespace eraseReminderSetting {
  export type Props = {
    /** Target subscription's ID */
    subscriptionId: string & tags.Format<"uuid">;

    /** Target reminder setting's ID */
    reminderSettingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/subscriptionRenewalGuardian/user/subscriptions/:subscriptionId/reminderSettings/:reminderSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}/reminderSettings/${encodeURIComponent(props.reminderSettingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseReminderSetting.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseReminderSetting.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.param("reminderSettingId")(() =>
        typia.assert(props.reminderSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
