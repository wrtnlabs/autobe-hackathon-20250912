import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianSubscription } from "../../../../../structures/ISubscriptionRenewalGuardianSubscription";
import { IPageISubscriptionRenewalGuardianSubscription } from "../../../../../structures/IPageISubscriptionRenewalGuardianSubscription";

/**
 * List upcoming active subscription renewals with pagination.
 *
 * This PATCH operation retrieves a paginated list of upcoming active
 * subscription renewals for the authenticated user.
 *
 * The listing excludes subscriptions with status PAUSED or CANCELED to focus on
 * actionable renewals.
 *
 * Pagination parameters limit and offset control the returned data volume.
 *
 * The service requires authentication with role 'user' to ensure users only see
 * their own subscriptions.
 *
 * This endpoint is essential for providing renewal notifications and
 * subscription management UI components.
 *
 * Errors like unauthorized access or invalid parameters produce appropriate
 * HTTP error responses.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for upcoming
 *   renewals
 * @path /subscriptionRenewalGuardian/user/subscriptions/upcomingRenewals
 * @accessor api.functional.subscriptionRenewalGuardian.user.subscriptions.upcomingRenewals.indexUpcomingRenewals
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexUpcomingRenewals(
  connection: IConnection,
  props: indexUpcomingRenewals.Props,
): Promise<indexUpcomingRenewals.Response> {
  return true === connection.simulate
    ? indexUpcomingRenewals.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexUpcomingRenewals.METADATA,
          path: indexUpcomingRenewals.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexUpcomingRenewals {
  export type Props = {
    /** Search criteria and pagination parameters for upcoming renewals */
    body: ISubscriptionRenewalGuardianSubscription.IUpcomingRenewalsRequest;
  };
  export type Body =
    ISubscriptionRenewalGuardianSubscription.IUpcomingRenewalsRequest;
  export type Response = IPageISubscriptionRenewalGuardianSubscription.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/user/subscriptions/upcomingRenewals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/subscriptionRenewalGuardian/user/subscriptions/upcomingRenewals";
  export const random =
    (): IPageISubscriptionRenewalGuardianSubscription.ISummary =>
      typia.random<IPageISubscriptionRenewalGuardianSubscription.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexUpcomingRenewals.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexUpcomingRenewals.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
