import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianUser } from "../../../../structures/ISubscriptionRenewalGuardianUser";

/**
 * Retrieve detailed subscription renewal guardian user information by ID.
 *
 * Retrieve detailed subscription renewal guardian user information by user ID.
 * This operation fetches the user record including all available properties
 * except the password hash for security.
 *
 * The retrieval requires a valid user ID path parameter in UUID format.
 * Authorization is restricted to administrators and the user themselves. The
 * data source is the subscription_renewal_guardian_user table as defined in the
 * Prisma schema.
 *
 * This endpoint validates the path parameter format and handles errors
 * gracefully in the case of missing or unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target subscription renewal guardian
 *   user
 * @path /subscriptionRenewalGuardian/user/users/:id
 * @accessor api.functional.subscriptionRenewalGuardian.user.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target subscription renewal guardian user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianUser;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/user/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianUser =>
    typia.random<ISubscriptionRenewalGuardianUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing subscription renewal guardian user by ID.
 *
 * Update details of an existing subscription renewal guardian user by user ID.
 * This operation excludes password hash in response and requires a valid UUID
 * format path parameter.
 *
 * It enforces strict validation on inputs such as email format and uniqueness.
 * Authorization ensures only the owner user can update their details.
 * Timestamps are managed automatically.
 *
 * Errors are returned for invalid or unauthorized requests.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target subscription renewal guardian
 *   user
 * @param props.body Update information for an existing subscription renewal
 *   guardian user
 * @path /subscriptionRenewalGuardian/user/users/:id
 * @accessor api.functional.subscriptionRenewalGuardian.user.users.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target subscription renewal guardian user */
    id: string & tags.Format<"uuid">;

    /** Update information for an existing subscription renewal guardian user */
    body: ISubscriptionRenewalGuardianUser.IUpdate;
  };
  export type Body = ISubscriptionRenewalGuardianUser.IUpdate;
  export type Response = ISubscriptionRenewalGuardianUser;

  export const METADATA = {
    method: "PUT",
    path: "/subscriptionRenewalGuardian/user/users/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/user/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianUser =>
    typia.random<ISubscriptionRenewalGuardianUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user account by UUID id.
 *
 * This DELETE operation targets the subscription_renewal_guardian_user table,
 * facilitating removal of a user account by its unique UUID id.
 *
 * Only authenticated users can perform this operation on their own account to
 * comply with data privacy.
 *
 * The operation permanently removes the user's record from the user accounts
 * table, deleting all associated subscription data due to cascade rules.
 *
 * This endpoint does not require a request body. The path parameter 'id'
 * represents the UUID of the user to be deleted.
 *
 * An authorization check ensures only the owner or system admin may delete the
 * user.
 *
 * No response body is returned upon successful deletion.
 *
 * Errors such as unauthorized access or invalid user ID are handled accordingly
 * with standard HTTP status codes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user to delete
 * @path /subscriptionRenewalGuardian/user/users/:id
 * @accessor api.functional.subscriptionRenewalGuardian.user.users.eraseUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseUser(
  connection: IConnection,
  props: eraseUser.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseUser.METADATA,
          path: eraseUser.path(props),
          status: null,
        },
      );
}
export namespace eraseUser {
  export type Props = {
    /** Unique identifier of the user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/subscriptionRenewalGuardian/user/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/user/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseUser.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new subscription renewal guardian user account. This operation
 * securely stores authentication details including email and hashed password.
 *
 * Input data is validated to ensure uniqueness of email and proper formatting.
 * Passwords are hashed for security, and all timestamps are set automatically.
 *
 * The operation requires authenticated access for security. On success, the
 * user record excluding password hash is returned.
 *
 * @param props.connection
 * @param props.body Creation information for a new subscription renewal
 *   guardian user
 * @path /subscriptionRenewalGuardian/user/users
 * @accessor api.functional.subscriptionRenewalGuardian.user.users.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for a new subscription renewal guardian user */
    body: ISubscriptionRenewalGuardianUser.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianUser.ICreate;
  export type Response = ISubscriptionRenewalGuardianUser;

  export const METADATA = {
    method: "POST",
    path: "/subscriptionRenewalGuardian/user/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/user/users";
  export const random = (): ISubscriptionRenewalGuardianUser =>
    typia.random<ISubscriptionRenewalGuardianUser>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
