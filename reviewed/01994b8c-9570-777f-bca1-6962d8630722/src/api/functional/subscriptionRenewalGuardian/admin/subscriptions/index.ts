import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianSubscriptions } from "../../../../structures/ISubscriptionRenewalGuardianSubscriptions";
import { IPageISubscriptionRenewalGuardianSubscriptions } from "../../../../structures/IPageISubscriptionRenewalGuardianSubscriptions";
import { ISubscriptionRenewalGuardianSubscription } from "../../../../structures/ISubscriptionRenewalGuardianSubscription";

/**
 * Search and retrieve paginated list of subscriptions.
 *
 * This operation allows users to retrieve a filtered and paginated list of
 * their subscriptions from the subscription_renewal_guardian_subscriptions
 * table.
 *
 * Users may specify search criteria in the request body such as filtering by
 * status (ACTIVE, PAUSED, CANCELED), vendor, plan name, or date ranges for
 * next_renewal_at. Pagination is supported via standard limit and offset
 * parameters.
 *
 * Security considerations ensure only the authenticated user's subscriptions
 * are returned unless the requester has admin role with read-only access to all
 * users' subscriptions.
 *
 * The response returns a paginated list of subscription summaries with
 * essential properties for display in UI lists.
 *
 * This operation is critical for enabling users to manage and monitor their
 * subscriptions efficiently.
 *
 * Parameters:
 *
 * - No path parameters.
 *
 * Request Body:
 *
 * - ISubscriptionRenewalGuardianSubscriptions.IRequest: search, filter,
 *   pagination parameters.
 *
 * Response Body:
 *
 * - IPageISubscriptionRenewalGuardianSubscriptions.ISummary: paginated
 *   subscription summaries.
 *
 * Authorization:
 *
 * - Roles: user, admin (both can access but with data filtering logic).
 *
 * Expected errors:
 *
 * - 401 Unauthorized if unauthenticated.
 * - 400 Bad Request for invalid filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for subscriptions
 * @path /subscriptionRenewalGuardian/admin/subscriptions
 * @accessor api.functional.subscriptionRenewalGuardian.admin.subscriptions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for subscriptions */
    body: ISubscriptionRenewalGuardianSubscriptions.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianSubscriptions.IRequest;
  export type Response =
    IPageISubscriptionRenewalGuardianSubscriptions.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/admin/subscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/admin/subscriptions";
  export const random =
    (): IPageISubscriptionRenewalGuardianSubscriptions.ISummary =>
      typia.random<IPageISubscriptionRenewalGuardianSubscriptions.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed subscription information by ID.
 *
 * Retrieve detailed information of a subscription by its ID.
 *
 * This operation fetches the subscription identified by subscriptionId from the
 * subscription_renewal_guardian_subscriptions table. It includes comprehensive
 * details such as plan name, status, billing cycle, renewal dates, amount,
 * currency, notes, and related vendor and reminder settings.
 *
 * Security ensures that only the owner user or an admin can access the
 * subscription details.
 *
 * Path Parameters:
 *
 * - SubscriptionId: UUID of the subscription to retrieve.
 *
 * This operation is essential for viewing full subscription details in a
 * dedicated UI screen.
 *
 * @param props.connection
 * @param props.subscriptionId Unique identifier of the subscription to retrieve
 * @path /subscriptionRenewalGuardian/admin/subscriptions/:subscriptionId
 * @accessor api.functional.subscriptionRenewalGuardian.admin.subscriptions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the subscription to retrieve */
    subscriptionId: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianSubscription;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/admin/subscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/subscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianSubscription =>
    typia.random<ISubscriptionRenewalGuardianSubscription>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
