import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianUser } from "../../../../structures/ISubscriptionRenewalGuardianUser";
import { IPageISubscriptionRenewalGuardianUser } from "../../../../structures/IPageISubscriptionRenewalGuardianUser";

/**
 * Search and retrieve a filtered, paginated list of subscription renewal
 * guardian users.
 *
 * Retrieve a filtered and paginated list of subscription renewal guardian users
 * from the system. This operation provides advanced search capabilities for
 * finding user accounts based on various criteria including email and creation
 * date.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and offset. User sensitive fields such as password_hash are handled securely
 * and are not exposed.
 *
 * Security considerations include strict authorization roles ensuring only
 * admins may access this data. The data corresponds to the
 * subscription_renewal_guardian_user table as defined in the Prisma schema,
 * including all available user fields except sensitive authentication data.
 *
 * This operation is read-only and intended for administrative users with
 * appropriate permissions. It facilitates system oversight and user
 * management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for subscription
 *   renewal guardian user filtering
 * @path /subscriptionRenewalGuardian/admin/users
 * @accessor api.functional.subscriptionRenewalGuardian.admin.users.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for subscription renewal
     * guardian user filtering
     */
    body: ISubscriptionRenewalGuardianUser.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianUser.IRequest;
  export type Response = IPageISubscriptionRenewalGuardianUser;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/admin/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/admin/users";
  export const random = (): IPageISubscriptionRenewalGuardianUser =>
    typia.random<IPageISubscriptionRenewalGuardianUser>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed subscription renewal guardian user information by ID.
 *
 * Retrieve detailed subscription renewal guardian user information by user ID.
 * This operation fetches the user record including all available properties
 * except the password hash for security.
 *
 * The retrieval requires a valid user ID path parameter in UUID format.
 * Authorization is restricted to administrators and the user themselves. The
 * data source is the subscription_renewal_guardian_user table as defined in the
 * Prisma schema.
 *
 * This endpoint validates the path parameter format and handles errors
 * gracefully in the case of missing or unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target subscription renewal guardian
 *   user
 * @path /subscriptionRenewalGuardian/admin/users/:id
 * @accessor api.functional.subscriptionRenewalGuardian.admin.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target subscription renewal guardian user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianUser;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/admin/users/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/users/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianUser =>
    typia.random<ISubscriptionRenewalGuardianUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
