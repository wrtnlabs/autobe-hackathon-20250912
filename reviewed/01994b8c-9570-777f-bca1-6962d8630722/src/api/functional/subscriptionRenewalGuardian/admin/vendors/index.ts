import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianVendors } from "../../../../structures/ISubscriptionRenewalGuardianVendors";

/**
 * Retrieve a specific vendor's detailed information.
 *
 * Retrieve details of a specific vendor by vendorId from the Vendors table.
 * This operation fetches all information stored about the vendor, including
 * name, creation date, update date, and if applicable, soft deletion
 * timestamp.
 *
 * Security and Permissions: Only authenticated users with user role may access
 * this data for their vendors. Admin roles with read permissions also allowed.
 *
 * The vendor is uniquely identified by a UUID, which is passed as a path
 * parameter vendorId. The response body returns a detailed vendor object with
 * relevant fields.
 *
 * Validation includes ensuring vendorId is a valid UUID string corresponding to
 * an existing vendor record. Error responses will be provided if vendor not
 * found or unauthorized access.
 *
 * Related Operations: Vendors create, update, and delete operations complement
 * this read operation.
 *
 * Expected behavior: On success, returns vendor detailed info. On failure,
 * returns 404 or 403 errors.
 *
 * @param props.connection
 * @param props.vendorId Unique identifier of the target vendor
 * @path /subscriptionRenewalGuardian/admin/vendors/:vendorId
 * @accessor api.functional.subscriptionRenewalGuardian.admin.vendors.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target vendor */
    vendorId: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianVendors;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/admin/vendors/:vendorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/vendors/${encodeURIComponent(props.vendorId ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianVendors =>
    typia.random<ISubscriptionRenewalGuardianVendors>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("vendorId")(() => typia.assert(props.vendorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
