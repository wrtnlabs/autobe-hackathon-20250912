import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianAdmin } from "../../../../structures/ISubscriptionRenewalGuardianAdmin";
import { IPageISubscriptionRenewalGuardianAdmin } from "../../../../structures/IPageISubscriptionRenewalGuardianAdmin";

/**
 * Create a new subscriptionRenewalGuardianAdmin account.
 *
 * This POST operation creates a new subscriptionRenewalGuardianAdmin record.
 *
 * It requires a request body with all necessary fields for creation.
 *
 * Only users with admin role may perform this operation.
 *
 * The response contains the created admin entity data.
 *
 * Standard validation and error handling apply for duplicate emails or invalid
 * inputs.
 *
 * @param props.connection
 * @param props.body Creation data for a new subscriptionRenewalGuardianAdmin
 *   account
 * @path /subscriptionRenewalGuardian/admin/admins
 * @accessor api.functional.subscriptionRenewalGuardian.admin.admins.createAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createAdmin(
  connection: IConnection,
  props: createAdmin.Props,
): Promise<createAdmin.Response> {
  return true === connection.simulate
    ? createAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createAdmin.METADATA,
          path: createAdmin.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createAdmin {
  export type Props = {
    /** Creation data for a new subscriptionRenewalGuardianAdmin account */
    body: ISubscriptionRenewalGuardianAdmin.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.ICreate;
  export type Response = ISubscriptionRenewalGuardianAdmin;

  export const METADATA = {
    method: "POST",
    path: "/subscriptionRenewalGuardian/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/admin/admins";
  export const random = (): ISubscriptionRenewalGuardianAdmin =>
    typia.random<ISubscriptionRenewalGuardianAdmin>();
  export const simulate = (
    connection: IConnection,
    props: createAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createAdmin.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list subscriptionRenewalGuardianAdmin accounts with pagination and
 * filters.
 *
 * This PATCH operation lists subscriptionRenewalGuardianAdmin entities from the
 * database with support for advanced filtering, search, pagination, and
 * sorting.
 *
 * It returns a paginated summary list optimized for admin overviews.
 *
 * Access is restricted to users with admin role privileges.
 *
 * No path parameters are required.
 *
 * Request body contains search filters, pagination parameters such as limit and
 * offset.
 *
 * Response body contains paginated summary data of admins.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for admin
 *   filtering
 * @path /subscriptionRenewalGuardian/admin/admins
 * @accessor api.functional.subscriptionRenewalGuardian.admin.admins.indexAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexAdmins(
  connection: IConnection,
  props: indexAdmins.Props,
): Promise<indexAdmins.Response> {
  return true === connection.simulate
    ? indexAdmins.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexAdmins.METADATA,
          path: indexAdmins.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexAdmins {
  export type Props = {
    /** Search criteria and pagination parameters for admin filtering */
    body: ISubscriptionRenewalGuardianAdmin.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.IRequest;
  export type Response = IPageISubscriptionRenewalGuardianAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/admin/admins";
  export const random = (): IPageISubscriptionRenewalGuardianAdmin.ISummary =>
    typia.random<IPageISubscriptionRenewalGuardianAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexAdmins.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexAdmins.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single subscriptionRenewalGuardianAdmin by UUID id.
 *
 * This GET operation returns detailed information about a single
 * subscriptionRenewalGuardianAdmin identified by UUID id.
 *
 * Only accessible by authenticated users with admin role.
 *
 * The response includes all properties of the admin entity as defined in the
 * database schema.
 *
 * The id path parameter uniquely identifies the admin account.
 *
 * No request body is required.
 *
 * Standard error handling applies for non-existent or unauthorized requests.
 *
 * @param props.connection
 * @param props.id Unique identifier of the admin to retrieve
 * @path /subscriptionRenewalGuardian/admin/admins/:id
 * @accessor api.functional.subscriptionRenewalGuardian.admin.admins.atAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atAdmin(
  connection: IConnection,
  props: atAdmin.Props,
): Promise<atAdmin.Response> {
  return true === connection.simulate
    ? atAdmin.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atAdmin.METADATA,
          path: atAdmin.path(props),
          status: null,
        },
      );
}
export namespace atAdmin {
  export type Props = {
    /** Unique identifier of the admin to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianAdmin;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianAdmin =>
    typia.random<ISubscriptionRenewalGuardianAdmin>();
  export const simulate = (
    connection: IConnection,
    props: atAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atAdmin.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update administrator account by ID.
 *
 * Update an existing administrator account by specifying its unique UUID
 * identifier. This operation allows changing the admin's email and/or password
 * hash while maintaining the created_at record. The updated_at timestamp is set
 * to the current update time. The system enforces uniqueness of email across
 * all admins to prevent conflicts.
 *
 * Only authorized users with admin privileges can perform this update
 * operation.
 *
 * This endpoint operates on the subscription_renewal_guardian_admin table in
 * the PostgreSQL database.
 *
 * Invalid inputs such as duplicate emails or incorrect UUID format will trigger
 * validation errors. Proper error handling returns descriptive messages and
 * status codes.
 *
 * This operation is distinct from creating or deleting admin accounts and
 * solely manages updates for existing entries.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator to update
 * @param props.body Update payload for subscription renewal guardian
 *   administrator account
 * @path /subscriptionRenewalGuardian/admin/admins/:id
 * @accessor api.functional.subscriptionRenewalGuardian.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the administrator to update */
    id: string & tags.Format<"uuid">;

    /**
     * Update payload for subscription renewal guardian administrator
     * account
     */
    body: ISubscriptionRenewalGuardianAdmin.IUpdate;
  };
  export type Body = ISubscriptionRenewalGuardianAdmin.IUpdate;
  export type Response = ISubscriptionRenewalGuardianAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/subscriptionRenewalGuardian/admin/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/subscriptionRenewalGuardian/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianAdmin =>
    typia.random<ISubscriptionRenewalGuardianAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete administrator account by ID.
 *
 * Deletes the administrator account corresponding to the specified UUID. This
 * operation permanently removes the record from the database and cannot be
 * undone.
 *
 * Only authorized administrators may perform this deletion.
 *
 * The operation validates the ID format and existence before deletion and
 * returns appropriate status codes for success or failure.
 *
 * No response body is returned upon successful deletion.
 *
 * This function corresponds to the subscription_renewal_guardian_admin database
 * table.
 *
 * @param props.connection
 * @param props.id Unique identifier of the administrator to delete
 * @path /subscriptionRenewalGuardian/admin/admins/:id
 * @accessor api.functional.subscriptionRenewalGuardian.admin.admins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the administrator to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/subscriptionRenewalGuardian/admin/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
