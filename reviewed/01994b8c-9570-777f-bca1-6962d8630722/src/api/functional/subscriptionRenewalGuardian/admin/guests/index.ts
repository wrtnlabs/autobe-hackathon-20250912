import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianGuest } from "../../../../structures/ISubscriptionRenewalGuardianGuest";
import { IPageISubscriptionRenewalGuardianGuest } from "../../../../structures/IPageISubscriptionRenewalGuardianGuest";

/**
 * Search and retrieve paginated guest users list.
 *
 * Retrieve a filtered and paginated list of guest users. This operation
 * supports search parameters such as email filtering and date ranges for
 * creation or update. The response includes summarized information suitable for
 * administrative user listing purposes.
 *
 * Only users with admin roles are authorized to access this resource.
 *
 * List results support pagination with limit and offset parameters.
 *
 * This operation directly accesses the subscription_renewal_guardian_guest
 * database table.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for guest users
 * @path /subscriptionRenewalGuardian/admin/guests
 * @accessor api.functional.subscriptionRenewalGuardian.admin.guests.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for guest users */
    body: ISubscriptionRenewalGuardianGuest.IRequest;
  };
  export type Body = ISubscriptionRenewalGuardianGuest.IRequest;
  export type Response = IPageISubscriptionRenewalGuardianGuest.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/subscriptionRenewalGuardian/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/admin/guests";
  export const random = (): IPageISubscriptionRenewalGuardianGuest.ISummary =>
    typia.random<IPageISubscriptionRenewalGuardianGuest.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get guest user details by ID.
 *
 * Retrieve detailed information about a specific guest user by their unique ID.
 * Useful for administrative audits or investigations.
 *
 * Accessible only to users with admin authorization roles.
 *
 * Detailed guest data includes email and timestamps for creation and last
 * update.
 *
 * This operation directly maps to the subscription_renewal_guardian_guest
 * database record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the guest user
 * @path /subscriptionRenewalGuardian/admin/guests/:id
 * @accessor api.functional.subscriptionRenewalGuardian.admin.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the guest user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISubscriptionRenewalGuardianGuest;

  export const METADATA = {
    method: "GET",
    path: "/subscriptionRenewalGuardian/admin/guests/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/subscriptionRenewalGuardian/admin/guests/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ISubscriptionRenewalGuardianGuest =>
    typia.random<ISubscriptionRenewalGuardianGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
