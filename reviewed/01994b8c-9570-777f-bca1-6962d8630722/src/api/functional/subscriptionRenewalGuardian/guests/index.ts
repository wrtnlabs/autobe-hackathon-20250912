import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISubscriptionRenewalGuardianGuest } from "../../../structures/ISubscriptionRenewalGuardianGuest";

/**
 * Create a new guest user for registration.
 *
 * This operation registers a new guest user within the system. Guests are
 * unauthenticated users who intend to sign up. The Guest entity records minimal
 * information such as email and timestamps. This API endpoint accepts a JSON
 * payload with at least the guest email. Upon successful creation, it returns
 * the guest record including the generated UUID and audit timestamps.
 *
 * Security considerations note that this endpoint is public and does not
 * require authentication as guests are unauthenticated users by design.
 *
 * The operation directly manipulates the subscription_renewal_guardian_guest
 * table in the database. Validation ensures the email format is correct, and
 * uniqueness constraints at the business logic level are assumed.
 *
 * Clients use this endpoint to initiate the signup process by creating a guest
 * record which can later be converted or associated with a full user account.
 *
 * Errors will be returned if required fields are missing or input formats are
 * invalid. Appropriate HTTP codes and error messages will be used to convey
 * validation failures.
 *
 * @param props.connection
 * @param props.body Guest user creation payload containing email address
 * @path /subscriptionRenewalGuardian/guests
 * @accessor api.functional.subscriptionRenewalGuardian.guests.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Guest user creation payload containing email address */
    body: ISubscriptionRenewalGuardianGuest.ICreate;
  };
  export type Body = ISubscriptionRenewalGuardianGuest.ICreate;
  export type Response = ISubscriptionRenewalGuardianGuest;

  export const METADATA = {
    method: "POST",
    path: "/subscriptionRenewalGuardian/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/subscriptionRenewalGuardian/guests";
  export const random = (): ISubscriptionRenewalGuardianGuest =>
    typia.random<ISubscriptionRenewalGuardianGuest>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
