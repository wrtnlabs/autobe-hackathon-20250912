{"operations":[{"specification":"This API operation provides the endpoint for standard users (role: user) to register a new user account in the Subscription Renewal Guardian system. It creates a new user with email and password credentials that are securely hashed and stored. This registration process issues an authorization token on successful account creation to enable authenticated access. It uses the subscription_renewal_guardian_user table for user data storage and validation.\n\nThe operation is publicly accessible and does not require prior authentication. User input is validated to ensure email uniqueness and proper password hashing for security. The registration endpoint forms the first step for users to access subscription management features.\n\nThis operation complements the login and token refresh operations for full lifecycle authentication and authorization management for members.\n\nSecurity considerations include secure storage of password hashes, avoidance of sensitive data exposure, and returning JWT tokens on successful join only. Validation ensures no duplicate emails exist.\n\nIt is expected that APIs like `/auth/user/login` and `/auth/user/refresh` are used post-registration for subsequent interactions.\n\nMandatory fields are email and password, stored hashed in the database as password_hash.\n\nThe API uses POST method at path `/auth/user/join` with authorizationType `join` and role authorizationRole `user`.","authorizationType":"join","description":"Register a new user account with email and password credentials for Subscription Renewal Guardian users. This endpoint creates the account and returns authorization tokens upon successful registration.\n\nThe operation references the subscription_renewal_guardian_user table where email and password_hash fields are stored. Emails are unique. Passwords are securely hashed before storage.\n\nThe request requires email and password information.\n\nOn success, it returns authorization information confirming initial login status.\n\nThis endpoint is public and intended for new user registrations only.\n\nIt should be paired with `/auth/user/login` and `/auth/user/refresh` for full authentication lifecycle.\n\nPassword complexity and security policies should be enforced at validation layers.\n\nErrors on duplicate email or validation failures must be handled appropriately.\n\n\n","summary":"User registration (join) operation for subscription_renewal_guardian_user role table.","parameters":[],"requestBody":{"description":"User join request parameters including email and password.","typeName":"ISubscriptionRenewalGuardianUser.IJoin"},"responseBody":{"description":"Authorization response containing JWT tokens and user info after successful join.","typeName":"ISubscriptionRenewalGuardianUser.IAuthorized"},"authorizationRole":"user","name":"join","path":"/auth/user/join","method":"post"},{"specification":"This API operation enables the login for registered Subscription Renewal Guardian end users. Users authenticate with their email and password, which are verified against securely stored password hashes in the subscription_renewal_guardian_user table.\n\nSuccessful authentication returns access and refresh tokens as part of authorization information. This operation supports the standard JWT-based minimal authentication scheme with tokens embedding user id and role.\n\nThe login endpoint is public requiring no token but expects valid credentials.\n\nSecurity considerations include protecting against brute force, timing attacks, and secure password handling. Failed login attempts must return HTTP 401 with clear error codes.\n\nThis endpoint complements user join and refresh token operations for a complete authentication lifecycle.\n\nIt uses POST on path `/auth/user/login` with authorizationType `login` and role authorizationRole `user`.","authorizationType":"login","description":"Authenticate registered user credentials for Subscription Renewal Guardian and return authorization tokens upon successful login.\n\nReferences subscription_renewal_guardian_user table for email and password verification.\n\nIt is public and used for existing user sign-in.\n\nOn success, returns JWT tokens that include user ID and role.\n\nFailed authentication returns clear errors for invalid credentials.\n\nThis endpoint should be used together with `/auth/user/join` and `/auth/user/refresh`.\n\nPassword verification is done securely using hashing.\n\n","summary":"User login operation for subscription_renewal_guardian_user role table.","parameters":[],"requestBody":{"description":"User login credentials with email and password.","typeName":"ISubscriptionRenewalGuardianUser.ILogin"},"responseBody":{"description":"Authorization response containing JWT tokens and user info after successful login.","typeName":"ISubscriptionRenewalGuardianUser.IAuthorized"},"authorizationRole":"user","name":"login","path":"/auth/user/login","method":"post"},{"specification":"This API operation allows Subscription Renewal Guardian users to refresh their JWT access tokens using valid refresh tokens. It ensures continuous authenticated access without repeatedly entering credentials.\n\nThe operation references the subscription_renewal_guardian_user table for user identity.\n\nIt requires the caller to present a valid refresh token issued from previous join or login authentication steps.\n\nUpon validation, a new access token with updated expiration is returned.\n\nThis endpoint is protected and requires users to have the `user` role.\n\nThe refresh operation completes the standard JWT lifecycle alongside join and login.\n\nIt is implemented as POST at `/auth/user/refresh` with authorizationType `refresh` and authorizationRole `user`.","authorizationType":"refresh","description":"Refresh JWT access token for authenticated users in Subscription Renewal Guardian using valid refresh token.\n\nReferences subscription_renewal_guardian_user table for identity verification.\n\nRequires valid refresh token for renewal.\n\nReturns updated authorization tokens on success.\n\nThis endpoint is protected and authorized only for logged-in users.\n\nComplements `join` and `login` endpoints for token lifecycle management.\n\n","summary":"Token refresh operation for subscription_renewal_guardian_user role table.","parameters":[],"requestBody":{"description":"Refresh token request payload.","typeName":"ISubscriptionRenewalGuardianUser.IRefresh"},"responseBody":{"description":"New Authorization response with refreshed JWT tokens.","typeName":"ISubscriptionRenewalGuardianUser.IAuthorized"},"authorizationRole":"user","name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"Authentication operations for admin users based on the subscription_renewal_guardian_admin Prisma table.\n\nThis includes:\n- Registration (join) to create a new admin account\n- Login to authenticate admin credentials and issue JWTs\n- Refresh to renew access tokens using a valid refresh token\n\nThese operations use fields: id (UUID), email, password_hash, created_at, updated_at.\n\nThe join operation accepts email and password, creates a new admin record, and returns JWT tokens.\nThe login validates credentials and returns JWT tokens.\nThe refresh validates refresh token and issues new JWT tokens.\n\nAll operations are public except refresh which requires a valid refresh token.\n\nResponse body types follow the pattern: ISubscriptionRenewalGuardianAdmin.IAuthorized","authorizationType":"join","description":"Register a new admin account in the system by providing valid email and password credentials. The operation validates input against the subscription_renewal_guardian_admin table structure and stores a hashed password for security. Upon successful registration, it issues JWT tokens representing authenticated sessions.\n\nThis operation leverages the unique constraint on email to prevent duplicate admin accounts.\n\nExpected to be called publicly by unauthenticated requests to allow new admin registration under controlled conditions.\n\nRelated operations are login and refresh for full authentication lifecycle management.\n\nSecurity notes: Passwords are stored only as salted hashes.\n\nStrict validation of email and password strength must be enforced on the client side or upstream.\n\nThis operation does not support guest or user registration, only admin accounts.\n\nThis serves as the entry point for admin authentication lifecycle.","summary":"Admin registration endpoint for new administrators based on subscription_renewal_guardian_admin table.","parameters":[],"requestBody":{"description":"Payload to create a new admin account. Includes email and password.","typeName":"ISubscriptionRenewalGuardianAdmin.ICreate"},"responseBody":{"description":"Authorized admin session tokens after successful registration.","typeName":"ISubscriptionRenewalGuardianAdmin.IAuthorized"},"authorizationRole":"admin","name":"join","path":"/auth/admin/join","method":"post"},{"specification":"Authenticate an existing admin by validating email and password against subscription_renewal_guardian_admin records.\n\nIf successful, issue JWT tokens to allow subsequent authorized requests. This operation uses the email and password fields of the subscription_renewal_guardian_admin table.\n\nOnly valid existing admin accounts can perform login. The operation is public.\n\nRelated operations are join and refresh.\n\nResponse type follows the expected pattern ISubscriptionRenewalGuardianAdmin.IAuthorized.","authorizationType":"login","description":"Authenticate an admin user with email and password credentials. This validates the credentials against stored hashed passwords in subscription_renewal_guardian_admin.\n\nOn successful validation, returns JWT tokens for session management.\n\nFailed attempts return standard authentication error codes.\n\nThis endpoint is public to allow admin login attempts.\n\nSecured by password hash validations and rate limiting mechanisms.\n\nThis endpoint excludes guest or standard user authentication.","summary":"Admin login endpoint authenticating credentials and issuing JWT tokens.","parameters":[],"requestBody":{"description":"Admin login credentials including email and password.","typeName":"ISubscriptionRenewalGuardianAdmin.ILogin"},"responseBody":{"description":"Authorized admin session tokens after successful login.","typeName":"ISubscriptionRenewalGuardianAdmin.IAuthorized"},"authorizationRole":"admin","name":"login","path":"/auth/admin/login","method":"post"},{"specification":"Refresh the JWT access token for admin users using a valid refresh token.\n\nThe refresh operation validates the current refresh token's integrity and expiration against the token store.\n\nUpon success, new JWT access tokens are issued to continue authenticated sessions.\n\nThis operation requires the user role to be admin and mandates authentication via valid refresh tokens.\n\nIt is part of the continuous authentication lifecycle with join and login.\n\nResponse type follows the ISubscriptionRenewalGuardianAdmin.IAuthorized pattern.","authorizationType":"refresh","description":"Refresh an admin user's JWT access token using a valid refresh token.\n\nThis ensures that authenticated admin users can maintain session continuity without relogin.\n\nRefresh tokens are validated for expiration and revocation.\n\nFailed attempts due to invalid or expired tokens return appropriate error responses.\n\nThis endpoint requires existing authentication with a refresh token.\n\nPart of the admin authentication lifecycle alongside join and login endpoints.","summary":"Admin token refresh endpoint to renew JWT access tokens.","parameters":[],"requestBody":{"description":"Request payload containing the refresh token for renewing access.","typeName":"ISubscriptionRenewalGuardianAdmin.IRefresh"},"responseBody":{"description":"Newly authorized admin session tokens after token refresh.","typeName":"ISubscriptionRenewalGuardianAdmin.IAuthorized"},"authorizationRole":"admin","name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This API operation is for guest users to register (join) in the subscription renewal guardian system. It performs guest account creation by accepting required information (guest email). Registration is a public operation that creates a guest record with the email provided. This operation relates specifically to the `subscription_renewal_guardian_guest` Prisma table, which stores guest user records with email and timestamps. The registration flow issues initial credentials or a token to the guest user upon successful creation. It is a 'join' type authorization operation requiring no prior login.","authorizationType":"join","description":"This API endpoint supports guest user registration (join) for the Subscription Renewal Guardian backend. It allows unauthenticated guests to create a new guest account by submitting their email address. The operation creates a new record in the `subscription_renewal_guardian_guest` table, which stores guest user emails and timestamps (created_at, updated_at). This operation is a public endpoint that does not require authentication and enables new guest accounts' creation to issue temporary or initial credentials needed to access the system. This is fundamental for onboarding guest users before they become members or admins. The guest's email is validated and stored securely to protect confidentiality. Related operations include login and token refresh for guests in maintaining temporary access.","summary":"Create guest user account for registration in Subscription Renewal Guardian backend.","parameters":[],"requestBody":{"description":"Request body for guest registration including email address.","typeName":"ISubscriptionRenewalGuardianGuest.ICreate"},"responseBody":{"description":"Response with authorized guest user information and token.","typeName":"ISubscriptionRenewalGuardianGuest.IAuthorized"},"authorizationRole":"guest","name":"join","path":"/auth/guest/join","method":"post"},{"specification":"This API operation supports token refresh for guest users in Subscription Renewal Guardian. It allows guests holding a valid refresh token to renew their access tokens to maintain temporary session continuity without re-authenticating with credentials. This improves user experience and security by renewing tokens securely. It relates to the `subscription_renewal_guardian_guest` table to validate refresh tokens associated with guest records. The endpoint requires a valid refresh token in request headers or body. It is a 'refresh' type authorization operation intended solely for guest users maintaining token lifecycle management.","authorizationType":"refresh","description":"Supports token refresh for guest users in Subscription Renewal Guardian. Requires a valid refresh token associated with a guest account stored in `subscription_renewal_guardian_guest`. The operation securely renews access tokens to maintain session continuity. It is a protected endpoint requiring a refresh token and enables guests to keep temporary authorized access without needing to login repeatedly. Related to guest join and login operations for lifecycle management.","summary":"Refresh temporary access token for guest user.","parameters":[],"requestBody":{"description":"Request body carrying valid refresh token for guest user.","typeName":"ISubscriptionRenewalGuardianGuest.IRefresh"},"responseBody":{"description":"Response with new authorized guest user token.","typeName":"ISubscriptionRenewalGuardianGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","path":"/auth/guest/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of subscription renewal guardian user accounts. It is associated with the subscription_renewal_guardian_user table in the Prisma schema. Users can search, filter, and paginate through user records in a secure manner. The data returned excludes sensitive authentication information such as password hashes for security. This operation enforces role-based access controls and supports pagination parameters to handle large result sets.","path":"/subscriptionRenewalGuardian/admin/users","method":"patch","summary":"Search and retrieve a filtered, paginated list of subscription renewal guardian users","description":"Retrieve a filtered and paginated list of subscription renewal guardian users from the system. This operation provides advanced search capabilities for finding user accounts based on various criteria including email and creation date.\n\nThe operation supports comprehensive pagination with configurable page sizes and offset. User sensitive fields such as password_hash are handled securely and are not exposed.\n\nSecurity considerations include strict authorization roles ensuring only admins may access this data. The data corresponds to the subscription_renewal_guardian_user table as defined in the Prisma schema, including all available user fields except sensitive authentication data.\n\nThis operation is read-only and intended for administrative users with appropriate permissions. It facilitates system oversight and user management.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for subscription renewal guardian user filtering","typeName":"ISubscriptionRenewalGuardianUser.IRequest"},"responseBody":{"description":"Paginated list of subscription renewal guardian user information matching search criteria","typeName":"IPageISubscriptionRenewalGuardianUser"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves detailed information for a specific subscription renewal guardian user by their unique ID. It accesses the subscription_renewal_guardian_user table from the Prisma schema. The response includes all user fields except sensitive password hashes.\n\nThis endpoint enforces authorization ensuring only administrators or the owner user can access the details. It supports secure retrieval by UUID and returns the user data in a consistent structure.","path":"/subscriptionRenewalGuardian/admin/users/{id}","method":"get","summary":"Retrieve detailed subscription renewal guardian user information by ID","description":"Retrieve detailed subscription renewal guardian user information by user ID. This operation fetches the user record including all available properties except the password hash for security.\n\nThe retrieval requires a valid user ID path parameter in UUID format. Authorization is restricted to administrators and the user themselves. The data source is the subscription_renewal_guardian_user table as defined in the Prisma schema.\n\nThis endpoint validates the path parameter format and handles errors gracefully in the case of missing or unauthorized access.","parameters":[{"name":"id","description":"Unique identifier of the target subscription renewal guardian user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription renewal guardian user detailed information","typeName":"ISubscriptionRenewalGuardianUser"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation retrieves detailed information for a specific subscription renewal guardian user by their unique ID. It accesses the subscription_renewal_guardian_user table from the Prisma schema. The response includes all user fields except sensitive password hashes.\n\nThis endpoint enforces authorization ensuring only administrators or the owner user can access the details. It supports secure retrieval by UUID and returns the user data in a consistent structure.","path":"/subscriptionRenewalGuardian/user/users/{id}","method":"get","summary":"Retrieve detailed subscription renewal guardian user information by ID","description":"Retrieve detailed subscription renewal guardian user information by user ID. This operation fetches the user record including all available properties except the password hash for security.\n\nThe retrieval requires a valid user ID path parameter in UUID format. Authorization is restricted to administrators and the user themselves. The data source is the subscription_renewal_guardian_user table as defined in the Prisma schema.\n\nThis endpoint validates the path parameter format and handles errors gracefully in the case of missing or unauthorized access.","parameters":[{"name":"id","description":"Unique identifier of the target subscription renewal guardian user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription renewal guardian user detailed information","typeName":"ISubscriptionRenewalGuardianUser"},"authorizationType":null,"authorizationRole":"user","name":"at"},{"specification":"This operation creates a new subscription renewal guardian user account. It corresponds to the subscription_renewal_guardian_user table in the Prisma schema. The system securely stores email and hashed password. The creation process validates input fields and enforces uniqueness of email addresses.\n\nThe operation requires role-based authentication and input validation for security reasons. Upon successful creation, the newly created user data is returned, excluding sensitive password hash fields.","path":"/subscriptionRenewalGuardian/user/users","method":"post","summary":"Create a new subscription renewal guardian user","description":"Create a new subscription renewal guardian user account. This operation securely stores authentication details including email and hashed password.\n\nInput data is validated to ensure uniqueness of email and proper formatting. Passwords are hashed for security, and all timestamps are set automatically.\n\nThe operation requires authenticated access for security. On success, the user record excluding password hash is returned.","parameters":[],"requestBody":{"description":"Creation information for a new subscription renewal guardian user","typeName":"ISubscriptionRenewalGuardianUser.ICreate"},"responseBody":{"description":"Information of the newly created subscription renewal guardian user","typeName":"ISubscriptionRenewalGuardianUser"},"authorizationType":null,"authorizationRole":"user","name":"create"},{"specification":"This operation updates an existing subscription renewal guardian user account based on user ID. It corresponds to the subscription_renewal_guardian_user table in the Prisma schema. The operation enforces validation and authorization rules to prevent unauthorized modifications.\n\nInputs validate changes to properties such as email and password hash. No password is returned in response for security reasons. The operation supports updating user information excluding creation timestamp.\n\nAuthorization roles restrict this operation to the owner user for security. The updated user record excluding password hash is returned on success.","path":"/subscriptionRenewalGuardian/user/users/{id}","method":"put","summary":"Update an existing subscription renewal guardian user by ID","description":"Update details of an existing subscription renewal guardian user by user ID. This operation excludes password hash in response and requires a valid UUID format path parameter.\n\nIt enforces strict validation on inputs such as email format and uniqueness. Authorization ensures only the owner user can update their details. Timestamps are managed automatically.\n\nErrors are returned for invalid or unauthorized requests.","parameters":[{"name":"id","description":"Unique identifier of the target subscription renewal guardian user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for an existing subscription renewal guardian user","typeName":"ISubscriptionRenewalGuardianUser.IUpdate"},"responseBody":{"description":"Updated subscription renewal guardian user information","typeName":"ISubscriptionRenewalGuardianUser"},"authorizationType":null,"authorizationRole":"user","name":"update"},{"specification":"This operation deletes a subscriptionRenewalGuardianUser identified by id in the subscription_renewal_guardian_user table. It permanently removes the user's account from the database. Users can only delete their own accounts, and authentication is required. This endpoint supports account deletion functionality, allowing users to remove their personal data entirely. No request body is needed. The user id must be provided as a path parameter using UUID format.","description":"This DELETE operation targets the subscription_renewal_guardian_user table, facilitating removal of a user account by its unique UUID id.\n\nOnly authenticated users can perform this operation on their own account to comply with data privacy.\n\nThe operation permanently removes the user's record from the user accounts table, deleting all associated subscription data due to cascade rules.\n\nThis endpoint does not require a request body. The path parameter 'id' represents the UUID of the user to be deleted.\n\nAn authorization check ensures only the owner or system admin may delete the user.\n\nNo response body is returned upon successful deletion.\n\nErrors such as unauthorized access or invalid user ID are handled accordingly with standard HTTP status codes.","summary":"Delete a user account by UUID id","parameters":[{"name":"id","in":"path","description":"Unique identifier of the user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"eraseUser","path":"/subscriptionRenewalGuardian/user/users/{id}","method":"delete"},{"specification":"This operation retrieves a paginated list of subscriptionRenewalGuardianAdmin accounts from the subscription_renewal_guardian_admin table using complex filters. It supports search, pagination, and sorting parameters encapsulated in the request body. This operation is read-only and accessible only to users with admin role. The response is a paginated summary list of admins.","description":"This PATCH operation lists subscriptionRenewalGuardianAdmin entities from the database with support for advanced filtering, search, pagination, and sorting.\n\nIt returns a paginated summary list optimized for admin overviews.\n\nAccess is restricted to users with admin role privileges.\n\nNo path parameters are required.\n\nRequest body contains search filters, pagination parameters such as limit and offset.\n\nResponse body contains paginated summary data of admins.","summary":"Search and list subscriptionRenewalGuardianAdmin accounts with pagination and filters","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for admin filtering","typeName":"ISubscriptionRenewalGuardianAdmin.IRequest"},"responseBody":{"description":"Paginated list of subscriptionRenewalGuardianAdmin summary data matching search criteria","typeName":"IPageISubscriptionRenewalGuardianAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"indexAdmins","path":"/subscriptionRenewalGuardian/admin/admins","method":"patch"},{"specification":"This operation retrieves a single subscriptionRenewalGuardianAdmin entity by UUID id from the subscription_renewal_guardian_admin table. It provides detailed account information readable only by admin role users. The path parameter 'id' must be passed as UUID format. No request body is needed. The response returns the full admin entity data.","description":"This GET operation returns detailed information about a single subscriptionRenewalGuardianAdmin identified by UUID id.\n\nOnly accessible by authenticated users with admin role.\n\nThe response includes all properties of the admin entity as defined in the database schema.\n\nThe id path parameter uniquely identifies the admin account.\n\nNo request body is required.\n\nStandard error handling applies for non-existent or unauthorized requests.","summary":"Retrieve a single subscriptionRenewalGuardianAdmin by UUID id","parameters":[{"name":"id","in":"path","description":"Unique identifier of the admin to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed subscriptionRenewalGuardianAdmin account information","typeName":"ISubscriptionRenewalGuardianAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"atAdmin","path":"/subscriptionRenewalGuardian/admin/admins/{id}","method":"get"},{"specification":"This operation creates a new subscriptionRenewalGuardianAdmin account in the subscription_renewal_guardian_admin table. The request body must include all necessary creation data adhering to validation rules. This operation is restricted to admin roles, supporting management of admin accounts. The response returns the created detailed admin entity data.","description":"This POST operation creates a new subscriptionRenewalGuardianAdmin record.\n\nIt requires a request body with all necessary fields for creation.\n\nOnly users with admin role may perform this operation.\n\nThe response contains the created admin entity data.\n\nStandard validation and error handling apply for duplicate emails or invalid inputs.","summary":"Create a new subscriptionRenewalGuardianAdmin account","parameters":[],"requestBody":{"description":"Creation data for a new subscriptionRenewalGuardianAdmin account","typeName":"ISubscriptionRenewalGuardianAdmin.ICreate"},"responseBody":{"description":"Created subscriptionRenewalGuardianAdmin account data","typeName":"ISubscriptionRenewalGuardianAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"createAdmin","path":"/subscriptionRenewalGuardian/admin/admins","method":"post"},{"specification":"This operation updates an administrator account's details in the Subscription Renewal Guardian system. It operates on the subscription_renewal_guardian_admin table, which stores read-only admin accounts identified by UUID `id`. The admin has a unique email and a hashed password, with created_at and updated_at timestamps. This API allows updating the admin's email and password hash and updates the updated_at timestamp accordingly. Validation rules must ensure the email is unique across admins, and the password hash is securely stored. This PUT endpoint requires an admin ID as path parameter and expects an update request body with permitted fields. Only authorized roles can perform this operation.","description":"Update an existing administrator account by specifying its unique UUID identifier. This operation allows changing the admin's email and/or password hash while maintaining the created_at record. The updated_at timestamp is set to the current update time. The system enforces uniqueness of email across all admins to prevent conflicts.\n\nOnly authorized users with admin privileges can perform this update operation.\n\nThis endpoint operates on the subscription_renewal_guardian_admin table in the PostgreSQL database.\n\nInvalid inputs such as duplicate emails or incorrect UUID format will trigger validation errors. Proper error handling returns descriptive messages and status codes.\n\nThis operation is distinct from creating or deleting admin accounts and solely manages updates for existing entries.","summary":"Update administrator account by ID","parameters":[{"name":"id","description":"Unique identifier of the administrator to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for subscription renewal guardian administrator account","typeName":"ISubscriptionRenewalGuardianAdmin.IUpdate"},"responseBody":{"description":"Updated administrator account information","typeName":"ISubscriptionRenewalGuardianAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/subscriptionRenewalGuardian/admin/admins/{id}","method":"put"},{"specification":"Permanently deletes an administrator account specified by its unique UUID identifier in the subscription_renewal_guardian_admin table. This hard delete operation removes the record from the database permanently. Only users with admin role are authorized to perform this deletion. The ID parameter is required in the path, and no request body is needed. Deletion is irreversible and all related data associated with this admin (not covered in this operation) is assumed to be handled accordingly by cascading or separate processes.","description":"Deletes the administrator account corresponding to the specified UUID. This operation permanently removes the record from the database and cannot be undone.\n\nOnly authorized administrators may perform this deletion.\n\nThe operation validates the ID format and existence before deletion and returns appropriate status codes for success or failure.\n\nNo response body is returned upon successful deletion.\n\nThis function corresponds to the subscription_renewal_guardian_admin database table.","summary":"Delete administrator account by ID","parameters":[{"name":"id","description":"Unique identifier of the administrator to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/subscriptionRenewalGuardian/admin/admins/{id}","method":"delete"},{"specification":"Retrieves a paginated list of guest user records from the subscription_renewal_guardian_guest table. Guests represent unauthenticated users who can register and login. Each record includes UUID id, email, created_at and updated_at timestamps. This PATCH endpoint supports complex search criteria, filtering, and pagination. It returns a paginated collection of guest user summaries. Typically, this endpoint is accessible by admin roles for user management purposes.","description":"Retrieve a filtered and paginated list of guest users. This operation supports search parameters such as email filtering and date ranges for creation or update. The response includes summarized information suitable for administrative user listing purposes.\n\nOnly users with admin roles are authorized to access this resource.\n\nList results support pagination with limit and offset parameters.\n\nThis operation directly accesses the subscription_renewal_guardian_guest database table.","summary":"Search and retrieve paginated guest users list","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for guest users","typeName":"ISubscriptionRenewalGuardianGuest.IRequest"},"responseBody":{"description":"Paginated list of guest user summaries","typeName":"IPageISubscriptionRenewalGuardianGuest.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"search","path":"/subscriptionRenewalGuardian/admin/guests","method":"patch"},{"specification":"Retrieves detailed information for a single guest user identified by UUID from the subscription_renewal_guardian_guest table. The response includes the guest's id, email, created_at, and updated_at timestamps. This GET endpoint requires the guest user's ID as path parameter. Only authorized admins can access this information for administrative purposes.\n\nErrors for invalid or non-existent IDs are handled gracefully with appropriate HTTP status codes.","description":"Retrieve detailed information about a specific guest user by their unique ID. Useful for administrative audits or investigations.\n\nAccessible only to users with admin authorization roles.\n\nDetailed guest data includes email and timestamps for creation and last update.\n\nThis operation directly maps to the subscription_renewal_guardian_guest database record.","summary":"Get guest user details by ID","parameters":[{"name":"id","description":"Unique identifier of the guest user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed guest user information","typeName":"ISubscriptionRenewalGuardianGuest"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/subscriptionRenewalGuardian/admin/guests/{id}","method":"get"},{"specification":"This operation allows creating a new guest user record to facilitate registration processes within the Subscription Renewal Guardian system. It interfaces with the subscription_renewal_guardian_guest table in the Prisma database, which stores guest user registration or temporary data with fields including an auto-generated UUID primary key, guest email, and audit timestamps for creation and modification events. The operation requires input of just the guest email and returns the created guest record. The system ensures that guest emails are captured correctly to allow subsequent verification or registration continuation steps.","path":"/subscriptionRenewalGuardian/guests","method":"post","summary":"Create a new guest user for registration","description":"This operation registers a new guest user within the system. Guests are unauthenticated users who intend to sign up. The Guest entity records minimal information such as email and timestamps. This API endpoint accepts a JSON payload with at least the guest email. Upon successful creation, it returns the guest record including the generated UUID and audit timestamps.\n\nSecurity considerations note that this endpoint is public and does not require authentication as guests are unauthenticated users by design.\n\nThe operation directly manipulates the subscription_renewal_guardian_guest table in the database. Validation ensures the email format is correct, and uniqueness constraints at the business logic level are assumed.\n\nClients use this endpoint to initiate the signup process by creating a guest record which can later be converted or associated with a full user account.\n\nErrors will be returned if required fields are missing or input formats are invalid. Appropriate HTTP codes and error messages will be used to convey validation failures.","parameters":[],"requestBody":{"description":"Guest user creation payload containing email address","typeName":"ISubscriptionRenewalGuardianGuest.ICreate"},"responseBody":{"description":"Created guest user record","typeName":"ISubscriptionRenewalGuardianGuest"},"authorizationType":null,"authorizationRole":null,"name":"create"},{"specification":"This operation updates an existing guest user's details based on the provided guest ID. It targets the subscription_renewal_guardian_guest table, which holds guest user registration records. The primary key is the guest's UUID 'id'. The update allows modifying properties such as the guest email while automatically updating the audit timestamp 'updated_at'. The operation accepts partial updates but requires the guest ID path parameter to identify the target record.\n\nThe endpoint is typically used to correct or complement guest registration info before full user account creation. Validation ensures the email adheres to proper format.","path":"/subscriptionRenewalGuardian/user/guests/{id}","method":"put","summary":"Update guest user by ID","description":"Update details of an existing guest user identified by their UUID. This operation targets the subscription_renewal_guardian_guest entity.\n\nThe endpoint requires authentication to prevent unauthorized modifications and enforces that only the owning process may update guest information. Fields updatable include the guest email. Audit timestamps are updated automatically.\n\nErrors include not found (if guest ID does not exist) and validation errors for invalid input.\n\nThe system guarantees data integrity by restricting updates on guest records and tracking changes via timestamps.","parameters":[{"name":"id","description":"Guest user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Guest user partial update payload","typeName":"ISubscriptionRenewalGuardianGuest.IUpdate"},"responseBody":{"description":"Updated guest user record","typeName":"ISubscriptionRenewalGuardianGuest"},"authorizationType":null,"authorizationRole":"user","name":"update"},{"specification":"This operation deletes an existing guest user record identified by its UUID from the subscription_renewal_guardian_guest table. The deletion is a hard delete as the schema does not define soft deletion fields for this model. It permanently removes the guest data, freeing system resources and maintaining data cleanliness.\n\nThis endpoint requires authentication to ensure only authorized users or processes perform deletions. The delete action cannot be undone, so clients should confirm before executing it.\n\nThe guest ID is passed as a path parameter, and no request body is necessary. No response body is returned upon successful deletion.\n\nTypical use cases include removing abandoned or invalid guest registrations and cleanup operations.\n\nErrors include not found if the specified guest ID does not exist.","path":"/subscriptionRenewalGuardian/user/guests/{id}","method":"delete","summary":"Delete guest user by ID","description":"Delete a guest user by their unique identifier (UUID). This permanently removes the guest record from the database.\n\nThis operation is restricted to authorized users to protect against unauthorized data removal. Successful execution results in no content being returned.\n\nClients should handle cases where the guest record does not exist or deletion fails due to constraints.","parameters":[{"name":"id","description":"Guest user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase"},{"specification":"Retrieve a paginated and filtered list of vendors from the subscription_renewal_guardian_vendors database table. Vendors represent subscription service providers and are uniquely identified by name. The operation supports complex searching, sorting, and pagination parameters via request body filters.\n\nThis API endpoint is intended for authenticated users managing vendors within their subscription ecosystem. It does not require path parameters but requires a JSON request body containing filter criteria such as name matching (partial or full), inclusion of soft-deleted vendors, pagination size, and offset.\n\nResponse includes a paginated list of vendor summary information, hearing only relevant details for vendor identification and status.\n\nSecurity considerations include authorization to ensure only authorized user roles may query vendor listings. The system prevents exposure of deleted or restricted data based on user permissions.\n\nErrors arise from invalid filter criteria or unauthorized access attempts.\n\nThis operation directly accesses the subscription_renewal_guardian_vendors table, leveraging its unique name constraint and soft deletion timestamp field.","path":"/subscriptionRenewalGuardian/user/vendors","method":"patch","summary":"Search and retrieve subscription vendors","description":"Search and retrieve a filtered, paginated list of subscription service vendors in the system. This operation supports advanced filtering and pagination using request body parameters, allowing clients to search vendors by name and include soft-deleted records if authorized.\n\nThe vendors are uniquely identified by their names and include metadata such as creation and update timestamps.\n\nThis endpoint is secured to allow only authenticated users to access vendor listings.\n\nClients can use this endpoint to build lists or auto-complete selections for subscription vendor associations.","parameters":[],"requestBody":{"description":"Vendor search criteria and pagination parameters","typeName":"ISubscriptionRenewalGuardianVendors.IRequest"},"responseBody":{"description":"Paginated list of vendor summary information matching criteria","typeName":"IPageISubscriptionRenewalGuardianVendors.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index"},{"specification":"This operation retrieves the details of a specific Vendor entity from the subscription_renewal_guardian_vendors table in the PostgreSQL database. It is designed to fetch comprehensive information about a vendor, including its unique identifier, name, timestamps for creation and last update, and soft deletion status. The primary key used to locate the vendor is vendorId, which must be a UUID string.","description":"Retrieve details of a specific vendor by vendorId from the Vendors table. This operation fetches all information stored about the vendor, including name, creation date, update date, and if applicable, soft deletion timestamp.\n\nSecurity and Permissions: Only authenticated users with user role may access this data for their vendors. Admin roles with read permissions also allowed.\n\nThe vendor is uniquely identified by a UUID, which is passed as a path parameter vendorId. The response body returns a detailed vendor object with relevant fields.\n\nValidation includes ensuring vendorId is a valid UUID string corresponding to an existing vendor record. Error responses will be provided if vendor not found or unauthorized access.\n\nRelated Operations: Vendors create, update, and delete operations complement this read operation.\n\nExpected behavior: On success, returns vendor detailed info. On failure, returns 404 or 403 errors.\n","summary":"Retrieve a specific vendor's detailed information","parameters":[{"name":"vendorId","in":"path","description":"Unique identifier of the target vendor","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Vendor detailed information","typeName":"ISubscriptionRenewalGuardianVendors"},"authorizationRoles":["user","admin"],"path":"/subscriptionRenewalGuardian/user/vendors/{vendorId}","method":"get","name":"at","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves the details of a specific Vendor entity from the subscription_renewal_guardian_vendors table in the PostgreSQL database. It is designed to fetch comprehensive information about a vendor, including its unique identifier, name, timestamps for creation and last update, and soft deletion status. The primary key used to locate the vendor is vendorId, which must be a UUID string.","description":"Retrieve details of a specific vendor by vendorId from the Vendors table. This operation fetches all information stored about the vendor, including name, creation date, update date, and if applicable, soft deletion timestamp.\n\nSecurity and Permissions: Only authenticated users with user role may access this data for their vendors. Admin roles with read permissions also allowed.\n\nThe vendor is uniquely identified by a UUID, which is passed as a path parameter vendorId. The response body returns a detailed vendor object with relevant fields.\n\nValidation includes ensuring vendorId is a valid UUID string corresponding to an existing vendor record. Error responses will be provided if vendor not found or unauthorized access.\n\nRelated Operations: Vendors create, update, and delete operations complement this read operation.\n\nExpected behavior: On success, returns vendor detailed info. On failure, returns 404 or 403 errors.\n","summary":"Retrieve a specific vendor's detailed information","parameters":[{"name":"vendorId","in":"path","description":"Unique identifier of the target vendor","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Vendor detailed information","typeName":"ISubscriptionRenewalGuardianVendors"},"authorizationRoles":["user","admin"],"path":"/subscriptionRenewalGuardian/admin/vendors/{vendorId}","method":"get","name":"at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new Vendor entity in the subscription_renewal_guardian_vendors table. It accepts vendor creation data including the unique vendor name. The system enforces uniqueness on the vendor name. It records creation and update timestamps automatically. Soft-deletion field is managed internally and is not expected during creation.\n\nThe operation requires an authenticated user with user role permission to create a new vendor.\n\nOn success, the newly created vendor object is returned with all relevant fields populated.\n\nValidation includes ensuring vendor name is unique and not empty.\n","description":"Create a new vendor record with a unique name. The vendor name uniqueness is enforced at the database level.\n\nSecurity considerations include restricting access to authenticated users who may create vendors only for their account.\n\nThe request must include vendor name as specified in the DTO. Timestamp fields are managed by the system.\n\nValidation will reject duplicates or missing data.\n\nOn success, the full vendor record including its UUID and timestamps will be returned.\n\nRelated operations include vendor retrieval, update, and deletion.\n","summary":"Create a new vendor with a unique name","parameters":[],"requestBody":{"description":"Vendor creation information","typeName":"ISubscriptionRenewalGuardianVendors.ICreate"},"responseBody":{"description":"Detailed vendor information after creation","typeName":"ISubscriptionRenewalGuardianVendors"},"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/vendors","method":"post","name":"create","authorizationRole":"user","authorizationType":null},{"specification":"This operation updates an existing Vendor entity in the subscription_renewal_guardian_vendors table. It allows modifying the vendor name while ensuring it remains unique. The vendor to update is identified by vendorId path parameter.\n\nOnly authenticated users with user role can perform this update.\n\nUpon success, the updated vendor record is returned including creation and modification timestamps.\n\nValidation includes ensuring new vendor name uniqueness and vendorId validity as UUID.\n\nSoft deletion is handled separately; updating a deleted vendor is disallowed.\n","description":"Update an existing vendor's information, typically modifying the vendor name. The vendor is identified by vendorId path parameter.\n\nAccess is restricted to authenticated users with permission to update vendors.\n\nValidation prevents duplicate names and invalid parameters.\n\nResponse returns updated vendor details.\n\nRelated operations include vendor creation and deletion.\n\nError responses for not found or unauthorized access.","summary":"Update an existing vendor's information","parameters":[{"name":"vendorId","in":"path","description":"Unique identifier of the vendor to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Vendor update information","typeName":"ISubscriptionRenewalGuardianVendors.IUpdate"},"responseBody":{"description":"Updated vendor detailed information","typeName":"ISubscriptionRenewalGuardianVendors"},"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/vendors/{vendorId}","method":"put","name":"update","authorizationRole":"user","authorizationType":null},{"specification":"This operation deletes an existing Vendor entity identified by vendorId from the subscription_renewal_guardian_vendors table. The deletion uses a soft delete pattern, setting the deleted_at timestamp instead of permanently removing the record.\n\nOnly authenticated users with user role can perform this deletion.\n\nNo request body is necessary.\n\nUpon success, no response body is returned.\n\nValidation ensures that the vendorId is valid and that the vendor exists.\n\nSoft deletion logic means the record remains in the database but marked as deleted.\n","description":"Soft delete an existing vendor identified by vendorId by setting its deleted_at timestamp.\n\nAccess is restricted to authenticated users.\n\nNo request body is needed.\n\nOn success, the record is marked deleted and no content returned.\n\nRelated operations include vendor creation, update, and retrieval.\n\nError handling for invalid vendorId or unauthorized access included.","summary":"Soft delete a vendor by setting deleted_at timestamp","parameters":[{"name":"vendorId","in":"path","description":"Unique identifier of the vendor to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/vendors/{vendorId}","method":"delete","name":"erase","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of subscriptions belonging to the authenticated user in the SubscriptionRenewalGuardian system. It supports advanced search parameters, filtering by subscription fields such as status, vendor, plan name, renewal dates, and sorting by next renewal date ascending. The operation operates on the subscription_renewal_guardian_subscriptions table from the Prisma schema, returning subscription summaries optimized for list displays.","description":"This operation allows users to retrieve a filtered and paginated list of their subscriptions from the subscription_renewal_guardian_subscriptions table.\n\nUsers may specify search criteria in the request body such as filtering by status (ACTIVE, PAUSED, CANCELED), vendor, plan name, or date ranges for next_renewal_at. Pagination is supported via standard limit and offset parameters.\n\nSecurity considerations ensure only the authenticated user's subscriptions are returned unless the requester has admin role with read-only access to all users' subscriptions.\n\nThe response returns a paginated list of subscription summaries with essential properties for display in UI lists.\n\nThis operation is critical for enabling users to manage and monitor their subscriptions efficiently.\n\nParameters:\n- No path parameters.\n\nRequest Body:\n- ISubscriptionRenewalGuardianSubscriptions.IRequest: search, filter, pagination parameters.\n\nResponse Body:\n- IPageISubscriptionRenewalGuardianSubscriptions.ISummary: paginated subscription summaries.\n\nAuthorization:\n- Roles: user, admin (both can access but with data filtering logic).\n\nExpected errors:\n- 401 Unauthorized if unauthenticated.\n- 400 Bad Request for invalid filters.","summary":"Search and retrieve paginated list of subscriptions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for subscriptions","typeName":"ISubscriptionRenewalGuardianSubscriptions.IRequest"},"responseBody":{"description":"Paginated list of subscription summaries matching search criteria","typeName":"IPageISubscriptionRenewalGuardianSubscriptions.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index","path":"/subscriptionRenewalGuardian/user/subscriptions","method":"patch"},{"specification":"This operation retrieves a filtered and paginated list of subscriptions belonging to the authenticated user in the SubscriptionRenewalGuardian system. It supports advanced search parameters, filtering by subscription fields such as status, vendor, plan name, renewal dates, and sorting by next renewal date ascending. The operation operates on the subscription_renewal_guardian_subscriptions table from the Prisma schema, returning subscription summaries optimized for list displays.","description":"This operation allows users to retrieve a filtered and paginated list of their subscriptions from the subscription_renewal_guardian_subscriptions table.\n\nUsers may specify search criteria in the request body such as filtering by status (ACTIVE, PAUSED, CANCELED), vendor, plan name, or date ranges for next_renewal_at. Pagination is supported via standard limit and offset parameters.\n\nSecurity considerations ensure only the authenticated user's subscriptions are returned unless the requester has admin role with read-only access to all users' subscriptions.\n\nThe response returns a paginated list of subscription summaries with essential properties for display in UI lists.\n\nThis operation is critical for enabling users to manage and monitor their subscriptions efficiently.\n\nParameters:\n- No path parameters.\n\nRequest Body:\n- ISubscriptionRenewalGuardianSubscriptions.IRequest: search, filter, pagination parameters.\n\nResponse Body:\n- IPageISubscriptionRenewalGuardianSubscriptions.ISummary: paginated subscription summaries.\n\nAuthorization:\n- Roles: user, admin (both can access but with data filtering logic).\n\nExpected errors:\n- 401 Unauthorized if unauthenticated.\n- 400 Bad Request for invalid filters.","summary":"Search and retrieve paginated list of subscriptions","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for subscriptions","typeName":"ISubscriptionRenewalGuardianSubscriptions.IRequest"},"responseBody":{"description":"Paginated list of subscription summaries matching search criteria","typeName":"IPageISubscriptionRenewalGuardianSubscriptions.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/subscriptionRenewalGuardian/admin/subscriptions","method":"patch"},{"specification":"This operation retrieves detailed information about a single subscription identified by its subscriptionId. It fetches the subscription record from the subscription_renewal_guardian_subscriptions table, including related vendor and reminder settings. This allows users to view all details of their subscription and related configuration.\n\nSecurity ensures that ordinary users can access only their own subscriptions, while admin users have read-only access to any user's subscription.\n\nParameters:\n- subscriptionId (string, UUID): unique identifier of the subscription to fetch.\n\nResponse:\n- ISubscriptionRenewalGuardianSubscription: Full subscription details including relations.\n\nAuthorization Roles:\n- user, admin (with appropriate data filtering).\n\nErrors:\n- 401 Unauthorized, 404 Not Found if subscription does not exist or access denied.","description":"Retrieve detailed information of a subscription by its ID.\n\nThis operation fetches the subscription identified by subscriptionId from the subscription_renewal_guardian_subscriptions table.\nIt includes comprehensive details such as plan name, status, billing cycle, renewal dates, amount, currency, notes, and related vendor and reminder settings.\n\nSecurity ensures that only the owner user or an admin can access the subscription details.\n\nPath Parameters:\n- subscriptionId: UUID of the subscription to retrieve.\n\nThis operation is essential for viewing full subscription details in a dedicated UI screen.","summary":"Retrieve detailed subscription information by ID","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription detailed information","typeName":"ISubscriptionRenewalGuardianSubscription"},"authorizationType":null,"authorizationRole":"user","name":"at","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}","method":"get"},{"specification":"This operation retrieves detailed information about a single subscription identified by its subscriptionId. It fetches the subscription record from the subscription_renewal_guardian_subscriptions table, including related vendor and reminder settings. This allows users to view all details of their subscription and related configuration.\n\nSecurity ensures that ordinary users can access only their own subscriptions, while admin users have read-only access to any user's subscription.\n\nParameters:\n- subscriptionId (string, UUID): unique identifier of the subscription to fetch.\n\nResponse:\n- ISubscriptionRenewalGuardianSubscription: Full subscription details including relations.\n\nAuthorization Roles:\n- user, admin (with appropriate data filtering).\n\nErrors:\n- 401 Unauthorized, 404 Not Found if subscription does not exist or access denied.","description":"Retrieve detailed information of a subscription by its ID.\n\nThis operation fetches the subscription identified by subscriptionId from the subscription_renewal_guardian_subscriptions table.\nIt includes comprehensive details such as plan name, status, billing cycle, renewal dates, amount, currency, notes, and related vendor and reminder settings.\n\nSecurity ensures that only the owner user or an admin can access the subscription details.\n\nPath Parameters:\n- subscriptionId: UUID of the subscription to retrieve.\n\nThis operation is essential for viewing full subscription details in a dedicated UI screen.","summary":"Retrieve detailed subscription information by ID","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Subscription detailed information","typeName":"ISubscriptionRenewalGuardianSubscription"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/subscriptionRenewalGuardian/admin/subscriptions/{subscriptionId}","method":"get"},{"specification":"This operation creates a new subscription record for the authenticated user. It saves data to the subscription_renewal_guardian_subscriptions table ensuring all business rules:\n- Enforces uniqueness on (user_id, vendor_id, plan_name) to prevent duplicates.\n- Automatically calculates and persists next_renewal_at by advancing started_at by billing_cycle intervals until strictly greater than current time.\n- Validates all fields including billing_cycle ENUM values (DAILY, WEEKLY, MONTHLY, YEARLY), status values (ACTIVE, PAUSED, CANCELED), and currency FORMAT.\n\nRequest Body:\n- ISubscriptionRenewalGuardianSubscription.ICreate: Contains all required data to create subscription except id, created_at, updated_at (system-generated).\n\nResponse Body:\n- ISubscriptionRenewalGuardianSubscription: The newly created subscription with all persisted fields.\n\nAuthorization:\n- user role only, as only authenticated users can create their subscriptions.\n\nErrors:\n- 400 Bad Request for validation failures.\n- 409 Conflict for uniqueness violations.\n- 401 Unauthorized if unauthenticated.","description":"Create a new subscription for the authenticated user.\n\nThis operation accepts subscription creation data, validates it against business rules, and stores the new subscription in the database.\nIt calculates the next_renewal_at field automatically from started_at and billing_cycle according to the business logic.\n\nUniqueness constraints on (user_id, vendor_id, plan_name) are enforced.\n\nOnly authenticated users with user role can create subscriptions.\n\nNo soft delete mechanisms apply; this is a hard create operation.\n\nRequest Body:\n- subscription creation data as ISubscriptionRenewalGuardianSubscription.ICreate.\n\nResponse Body:\n- Newly created subscription including calculated fields.\n\nPath Parameters:\n- None.\n\nSecurity:\n- Authentication and ownership verified by JWT.\n\nThis operation is core to user subscription lifecycle management.","summary":"Create a new subscription","parameters":[],"requestBody":{"description":"Subscription creation data","typeName":"ISubscriptionRenewalGuardianSubscription.ICreate"},"responseBody":{"description":"Newly created subscription information","typeName":"ISubscriptionRenewalGuardianSubscription"},"authorizationType":null,"authorizationRole":"user","name":"create","path":"/subscriptionRenewalGuardian/user/subscriptions","method":"post"},{"specification":"This operation updates an existing subscription identified by subscriptionId.\n\nIt updates fields visible in the IUpdate DTO, validates changes according to business rules, and recalculates next_renewal_at if billing_cycle, started_at, or status changed.\n\nModifications are only allowed if the subscription status is not CANCELED, which is terminal and read-only.\n\nPath Parameters:\n- subscriptionId (UUID): ID of the subscription to update.\n\nRequest Body:\n- ISubscriptionRenewalGuardianSubscription.IUpdate: Fields to update.\n\nResponse Body:\n- The updated subscription record including recalculated fields.\n\nAuthorization Roles:\n- user (owner) only. Admin has read-only access and cannot update.\n\nErrors:\n- 400 Bad Request for validation errors.\n- 409 Conflict if update violates business constraints.\n- 403 Forbidden if subscription is CANCELED.\n- 401 Unauthorized if unauthenticated.","description":"Update an existing subscription identified by subscriptionId.\n\nAllows modification of subscription fields except primary key and immutable fields.\nValidates input and business rules, recalculates next_renewal_at if necessary.\n\nUpdates are forbidden on CANCELED subscriptions to enforce terminal state.\n\nPath Parameters:\n- subscriptionId: UUID of the subscription to update.\n\nRequest Body:\n- ISubscriptionRenewalGuardianSubscription.IUpdate containing fields to update.\n\nResponse Body:\n- Updated subscription details.\n\nAuthorization ensures only the owner user can update their subscription.\n\nThis enables users to maintain their subscription information accurately throughout its lifecycle.","summary":"Update subscription by ID","parameters":[{"name":"subscriptionId","description":"Unique identifier of the subscription to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Subscription update data","typeName":"ISubscriptionRenewalGuardianSubscription.IUpdate"},"responseBody":{"description":"Updated subscription information","typeName":"ISubscriptionRenewalGuardianSubscription"},"authorizationType":null,"authorizationRole":"user","name":"update","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}","method":"put"},{"specification":"This operation deletes a specific subscription from the subscription_renewal_guardian_subscriptions table. It permanently removes the subscription record identified by subscriptionId UUID. Access is restricted to authenticated users with the 'user' role to delete their own subscriptions. No request body or response body is involved. This action cascades deletions to related reminders as per DB constraints.","description":"Delete a subscription identified by subscriptionId. Only authorized users with role 'user' can perform this operation. The subscription identified by UUID subscriptionId is removed permanently from the system.\n\nThis operation requires no request body and produces no response body.\n\nHTTP 404 returned if subscription not found or user unauthorized.\nHTTP 401 returned if user not authenticated.","summary":"Delete a subscription by ID","parameters":[{"name":"subscriptionId","in":"path","description":"UUID of the subscription to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}","method":"delete"},{"specification":"This operation retrieves a pageable list of reminder settings for a given subscription from subscription_renewal_guardian_reminder_settings table. Users with 'user' role can list reminder settings for their own subscription identified by subscriptionId. Supports pagination and filtering according to request body schema ISubscriptionRenewalGuardianReminderSetting.IRequest. Response includes paginated summary of reminders.","description":"List reminder settings linked to subscription identified by subscriptionId. Supports pagination and filtering.\n\nAvailable only to users with 'user' authorization role for their own subscriptions.\n\nReturns paginated summaries of reminder settings.\n\nRequest body specifies filtering and pagination parameters.","summary":"List reminder settings for subscription","parameters":[{"name":"subscriptionId","in":"path","description":"UUID of the subscription","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for reminder settings query","typeName":"ISubscriptionRenewalGuardianReminderSetting.IRequest"},"responseBody":{"description":"Paginated list of reminder settings","typeName":"IPageISubscriptionRenewalGuardianReminderSetting.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}/reminderSettings","method":"patch"},{"specification":"This operation retrieves detailed information of a specific reminder setting identified by reminderSettingId under a subscription subscriptionId from subscription_renewal_guardian_reminder_settings. Authorized users with 'user' role can access only their own reminder settings. Response includes full reminder setting entity.","description":"Get detailed reminder setting identified by reminderSettingId for subscription identified by subscriptionId.\n\nAccessible to users with 'user' authorization role only.\n\nReturns full reminder setting data.\n\nHTTP 404 if reminder not found. HTTP 401 for unauthorized access.","summary":"Get reminder setting details by ID","parameters":[{"name":"subscriptionId","in":"path","description":"UUID of the subscription","schema":{"type":"string","format":"uuid"}},{"name":"reminderSettingId","in":"path","description":"UUID of the reminder setting","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Reminder setting details","typeName":"ISubscriptionRenewalGuardianReminderSetting"},"authorizationType":null,"authorizationRole":"user","name":"at","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}/reminderSettings/{reminderSettingId}","method":"get"},{"specification":"This operation creates a new reminder setting for a subscription in subscription_renewal_guardian_reminder_settings table. Requires subscriptionId as path parameter and request body with days_before and channel fields. Enforces uniqueness on subscription_id and days_before. Accessible only to authenticated users with 'user' role. Response returns the created reminder setting entity.","description":"Create a new reminder setting for a subscription specified by subscriptionId.\n\nInput request body includes days_before and channel.\n\nAccessible only by users with 'user' role.\n\nReturns the created reminder setting entity.\n\nValidation enforces uniqueness on (subscription_id, days_before).\n\nErrors include validation failure or unique constraint violation.","summary":"Create a new reminder setting","parameters":[{"name":"subscriptionId","in":"path","description":"UUID of the subscription","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Reminder setting creation data","typeName":"ISubscriptionRenewalGuardianReminderSetting.ICreate"},"responseBody":{"description":"Created reminder setting entity","typeName":"ISubscriptionRenewalGuardianReminderSetting"},"authorizationType":null,"authorizationRole":"user","name":"create","path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}/reminderSettings","method":"post"},{"specification":"This operation updates a specific reminder setting attached to a subscription in the SubscriptionRenewalGuardian system. It works on the subscription_renewal_guardian_reminder_settings table, uniquely identified by reminderSettingId path parameter and scoped by subscriptionId. The update request allows clients to modify days_before and channel attributes which determine the timing and method of renewal reminders. The system enforces business rules such as uniqueness of days_before per subscription and valid channel values 'EMAIL' or 'NONE'. This operation requires authentication with role 'user' since reminders belong to users' subscriptions.","description":"This PUT operation updates the reminder setting for a subscription. It requires both subscriptionId and reminderSettingId to identify the exact reminder setting to be updated.\n\nThe reminder setting consists of the number of days before renewal when a reminder should be sent, and the communication channel which can be either EMAIL or NONE.\n\nOnly authenticated users with role 'user' are authorized to update reminder settings linked to their own subscriptions.\n\nThe system maintains uniqueness on the combination of subscription and days_before to prevent duplicate reminders. Updates must comply with these constraints.\n\nIf successful, the updated reminder setting details are returned. Validation errors, authorization failures, or uniqueness conflicts are appropriately handled.","summary":"Update a reminder setting for a subscription","parameters":[{"name":"subscriptionId","description":"Target subscription's ID","schema":{"type":"string","format":"uuid"}},{"name":"reminderSettingId","description":"Target reminder setting's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reminder setting information","typeName":"ISubscriptionRenewalGuardianReminderSetting.IUpdate"},"responseBody":{"description":"Updated reminder setting details","typeName":"ISubscriptionRenewalGuardianReminderSetting"},"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}/reminderSettings/{reminderSettingId}","method":"put","authorizationRole":"user","authorizationType":null,"name":"updateReminderSetting"},{"specification":"This operation deletes a specific reminder setting associated with a subscription in the SubscriptionRenewalGuardian system. It targets the subscription_renewal_guardian_reminder_settings table uniquely identified by the reminderSettingId path parameter and scoped by the subscriptionId path parameter. This hard delete operation completely removes the reminder setting from the database, permanently freeing the associated combination of subscription and days_before to allow future re-creation.\n\nOnly authenticated users with role 'user' are authorized to delete their own reminder settings. No request body is needed as the operation is a straightforward delete by ID.\n\nSuccessful operation yields no response body. Authorization, validation, and not found errors are handled appropriately.","description":"This DELETE operation removes a reminder setting for a subscription permanently. Both subscriptionId and reminderSettingId must be specified for precise targeting.\n\nOnly users with 'user' role may delete their own reminder settings.\n\nNo request body is required.\n\nUpon success, no content is returned.\n\nErrors such as unauthorized access or missing resources are handled with appropriate HTTP status codes.","summary":"Delete a reminder setting for a subscription","parameters":[{"name":"subscriptionId","description":"Target subscription's ID","schema":{"type":"string","format":"uuid"}},{"name":"reminderSettingId","description":"Target reminder setting's ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/subscriptions/{subscriptionId}/reminderSettings/{reminderSettingId}","method":"delete","authorizationRole":"user","authorizationType":null,"name":"eraseReminderSetting"},{"specification":"This operation lists upcoming active subscription renewals for the authenticated user within a configurable date range, defaulting to 30 days. It filters subscriptions from the subscription_renewal_guardian_subscriptions table with status ACTIVE, excluding PAUSED or CANCELED. It supports pagination via limit and offset query parameters and sorts results ascending by next_renewal_at.\n\nThe endpoint enables users to manage and be aware of their subscription renewals proactively. Only authenticated users with role 'user' can access this listing.\n\nThe request body enables specifying filtering criteria such as date ranges or pagination.\n\nThe response delivers a paginated list of subscription summaries matching the criteria.","description":"This PATCH operation retrieves a paginated list of upcoming active subscription renewals for the authenticated user.\n\nThe listing excludes subscriptions with status PAUSED or CANCELED to focus on actionable renewals.\n\nPagination parameters limit and offset control the returned data volume.\n\nThe service requires authentication with role 'user' to ensure users only see their own subscriptions.\n\nThis endpoint is essential for providing renewal notifications and subscription management UI components.\n\nErrors like unauthorized access or invalid parameters produce appropriate HTTP error responses.","summary":"List upcoming active subscription renewals with pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for upcoming renewals","typeName":"ISubscriptionRenewalGuardianSubscription.IUpcomingRenewalsRequest"},"responseBody":{"description":"Paginated list of upcoming active subscription renewals","typeName":"IPageISubscriptionRenewalGuardianSubscription.ISummary"},"authorizationRoles":["user"],"path":"/subscriptionRenewalGuardian/user/subscriptions/upcomingRenewals","method":"patch","authorizationRole":"user","authorizationType":null,"name":"indexUpcomingRenewals"}],"components":{"authorization":[{"name":"user","description":"Authenticated standard user who can manage their own subscription data.","kind":"member"},{"name":"admin","description":"Read-only administrator who can view all users' records in the system.","kind":"admin"},{"name":"guest","description":"Unauthenticated user who can register and login.","kind":"guest"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageISubscriptionRenewalGuardianUser":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianUser"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianGuest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianGuest.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianVendors.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianVendors.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianSubscriptions.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianSubscriptions.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianReminderSetting.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianReminderSetting.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISubscriptionRenewalGuardianSubscription.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISubscriptionRenewalGuardianSubscription.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ISubscriptionRenewalGuardianUser.IJoin":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for the user."},"password":{"type":"string","description":"User's plaintext password to be hashed securely."}},"required":["email","password"],"description":"Request body for registering a new user account. Includes mandatory email and plaintext password for join process. Password will be hashed on server side."},"ISubscriptionRenewalGuardianUser.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"User login email."},"password":{"type":"string","description":"Plaintext password for authentication."}},"required":["email","password"],"description":"Request body for login operation with email and password."},"ISubscriptionRenewalGuardianUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string issued at login or join."}},"required":["refresh_token"],"description":"Request body for token refresh operation. Typically includes the refresh token."},"ISubscriptionRenewalGuardianUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user."},"email":{"type":"string","description":"User's unique email address used for login and identification.\n\nMust be unique across all users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication.\n\nNEVER included in response types for security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nStored as UTC ISO 8601 string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated.\n\nStored as UTC ISO 8601 string."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Response body for authorization containing user id and token info. Provides the authenticated user's unique identifier and an authorization token object (e.g., JWT)."},"ISubscriptionRenewalGuardianAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the admin account."},"email":{"type":"string","description":"Administrator's unique email address.\n\nMust be a unique string."},"password_hash":{"type":"string","description":"Hashed password string for admin authentication.\n\nStored securely and never exposed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of account creation.\n\nStored as ISO8601 string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last account update.\n\nStored as ISO8601 string."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Admin accounts with read-only access to all users’ subscription data.\nIncludes login credentials and audit timestamps.\n\nPrimary key is UUID \\`id\\`.\n\nEmail must be unique across admins."},"ISubscriptionRenewalGuardianAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's unique email address."},"password_hash":{"type":"string","description":"Hashed password for admin authentication."}},"required":["email","password_hash"],"description":"Payload to create a new SubscriptionRenewalGuardianAdmin account."},"ISubscriptionRenewalGuardianAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Administrator's unique email address."},"password":{"type":"string","description":"Password in plain text sent from client, to be hashed and compared in backend."}},"required":["email","password"],"description":"Credentials for administrator login."},"ISubscriptionRenewalGuardianAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string to obtain a new access token."}},"required":["refresh_token"],"description":"Refresh token payload for administrator."},"ISubscriptionRenewalGuardianAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the authenticated admin user.","format":"uuid"},"email":{"type":"string","description":"Administrator's unique email address.\n\nMust be a unique string."},"password_hash":{"type":"string","description":"Hashed password string for admin authentication.\n\nStored securely and never exposed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of account creation.\n\nStored as ISO8601 string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last account update.\n\nStored as ISO8601 string."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token for administrator."},"ISubscriptionRenewalGuardianGuest.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Guest user's email address."}},"required":["email"],"description":"Guest user account creation payload.\n\nContains guest email address for registration.\n\nRequired for creating a guest user record.\n\nEmail must be valid."},"ISubscriptionRenewalGuardianGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique guest user id."},"email":{"type":"string","format":"email","description":"Guest user's email address."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","updated_at","token"],"description":"Authorization response containing JWT token for guest user.\n\nReturned after successful authentication or join operations."},"ISubscriptionRenewalGuardianGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to renew authorization."}},"required":["refresh_token"],"description":"Request payload for refreshing JWT tokens using refresh token.\n\nRefresh token is required for authentication renewal."},"ISubscriptionRenewalGuardianGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for paginated requests."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items per page limit."},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter guests by email substring or exact match."}},"required":[],"description":"Request parameters for filtering and paginating guest user list."},"ISubscriptionRenewalGuardianUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page.\n\n@default 100"},"search_email":{"type":"string","description":"Email address filter. Exact or partial match for user emails."},"search_created_before":{"type":"string","format":"date-time","description":"Filter to match users created before this DateTime (ISO 8601 format)."},"search_created_after":{"type":"string","format":"date-time","description":"Filter to match users created after this DateTime (ISO 8601 format)."}},"required":[],"description":"Request parameters for listing users with pagination and optional filtering."},"ISubscriptionRenewalGuardianUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUUID string to uniquely identify the user account."},"email":{"type":"string","description":"User's unique email address used for login and identification.\n\nMust be unique across all users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication.\n\nNEVER included in response types for security."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nStored as UTC ISO 8601 string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated.\n\nStored as UTC ISO 8601 string."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"User accounts representing authenticated individuals who can manage their\nown subscriptions, vendors, and reminder settings. Includes secure\nauthentication fields such as email and password hash. Primary key is\nUUID `id`. Contains audit timestamps for creation and updates.\n\n@namespace Identity\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ISubscriptionRenewalGuardianUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"User's unique email address.\n\nRequired for user registration."},"password_hash":{"type":"string","description":"Plain text password to be hashed securely before storage.\n\nMust follow password complexity policies."}},"required":["email","password_hash"],"description":"Request body for creating a new subscription renewal guardian user account.\n\nIncludes required email and hashed password fields for registration.\n\nPasswords must be properly hashed before storage."},"ISubscriptionRenewalGuardianUser.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User's unique email address.\n\nOptional for update; if provided, must remain unique."},"password_hash":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"New hashed password.\n\nOptional for update.\nMust be properly hashed before storing."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The last time the user was updated.\n\nOptional and readonly; usually set by the system."}},"required":[],"description":"Request body for updating an existing subscription renewal guardian user account.\n\nAll fields optional; password hash and email can be updated with proper validations.\n\nThe updated_at timestamp is managed by the system and is optional."},"ISubscriptionRenewalGuardianAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number.","minimum":0},"limit":{"type":"integer","description":"Limitation of records per a page.","minimum":0,"default":100},"email":{"type":"string","description":"Search filter for email."}},"description":"Request to search and filter SubscriptionRenewalGuardianAdmin accounts.","required":[]},"ISubscriptionRenewalGuardianAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address to update for the admin.\n\nOptional, must be unique if provided."},"password_hash":{"type":"string","description":"Password hash string for updating admin password.\n\nOptional, stored securely."}},"required":[],"description":"Properties used to update an admin user account.\nAll fields are optional to allow partial updates."},"ISubscriptionRenewalGuardianGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the guest user."},"email":{"type":"string","description":"Guest user's email address."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated."}},"required":["id","email","created_at","updated_at"],"description":"Guest users are unauthenticated visitors who can register and login.\nThis table tracks guest registration attempts or temporary data as needed.\n\nPrimary key is UUID \\`id\\`.\n\nCreated and updated timestamps for record maintenance."},"ISubscriptionRenewalGuardianGuest.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Guest user's email address. Must be a valid email format."}},"required":[],"description":"Update of guest user details. Allowed to modify email and timestamps updated_at."},"ISubscriptionRenewalGuardianVendors.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Partial name filter for vendor search. Nullable string."},"include_deleted":{"type":"boolean","description":"Flag whether to include soft-deleted vendors. Nullable boolean."},"limit":{"type":"integer","format":"int64","minimum":0,"description":"Pagination limit. Nullable unsigned integer."},"offset":{"type":"integer","format":"int64","minimum":0,"description":"Pagination offset. Nullable unsigned integer."}},"required":[],"description":"Vendor search request with pagination and filters."},"ISubscriptionRenewalGuardianVendors":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the vendor.\n\nThis ID is the primary key for the subscription renewal guardian vendors."},"name":{"type":"string","description":"Unique vendor name, e.g., Netflix or Spotify.\n\nThis field is used for identifying the subscription service provider.\nMust be unique across all vendors."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vendor record was created.\n\nStored in UTC with time zone."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vendor was last updated.\n\nStored in UTC with time zone."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating when the record was soft deleted.\n\nNull if the vendor is active."}},"required":["id","name","created_at","updated_at"],"description":"Vendor entity representing subscription service providers.\n\nIncludes unique name and timestamps.\n\nSupports soft deletion via deleted_at."},"ISubscriptionRenewalGuardianVendors.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique vendor name."}},"required":["name"],"description":"Vendor creation input. Requires unique name."},"ISubscriptionRenewalGuardianVendors.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the vendor. Must be unique and non-empty."}},"required":["name"],"description":"Vendor update schema. You can update vendor's name only."},"ISubscriptionRenewalGuardianSubscriptions.IRequest":{"type":"object","properties":{"status":{"oneOf":[{"const":"ACTIVE","description":"Filter by status values."},{"const":"PAUSED","description":"Filter by status values."},{"const":"CANCELED","description":"Filter by status values."}],"description":"Filter by status values."},"vendor_id":{"type":"string","format":"uuid","description":"Filter by vendor ID."},"plan_name":{"type":"string","description":"Filter by plan name."},"next_renewal_from":{"type":"string","format":"date-time","description":"Filter by minimum next renewal date."},"next_renewal_to":{"type":"string","format":"date-time","description":"Filter by maximum next renewal date."},"page":{"type":"integer","format":"int32","description":"Pagination parameter: page number."},"limit":{"type":"integer","format":"int32","description":"Pagination parameter: limit of records per page."}},"required":[],"description":"Request schema for filtering subscription list with pagination."},"ISubscriptionRenewalGuardianSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"Belonged user's unique identifier."},"vendor_id":{"type":"string","format":"uuid","description":"Subscribed vendor's unique identifier."},"plan_name":{"type":"string","description":"Name of the subscription plan. Unique per user and vendor."},"billing_cycle":{"oneOf":[{"const":"DAILY","description":"Billing cycle interval."},{"const":"WEEKLY","description":"Billing cycle interval."},{"const":"MONTHLY","description":"Billing cycle interval."},{"const":"YEARLY","description":"Billing cycle interval."}],"description":"Billing cycle interval."},"amount":{"type":"number","format":"double","description":"Subscription amount, must be >= 0."},"currency":{"type":"string","description":"Currency code following ISO 4217 3-letter uppercase format."},"started_at":{"type":"string","format":"date-time","description":"Subscription start date in UTC ISO 8601 format."},"next_renewal_at":{"type":"string","format":"date-time","description":"Next scheduled renewal date in UTC ISO 8601 format."},"status":{"oneOf":[{"const":"ACTIVE","description":"Subscription status."},{"const":"PAUSED","description":"Subscription status."},{"const":"CANCELED","description":"Subscription status."}],"description":"Subscription status."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes about the subscription."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in UTC ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp in UTC ISO 8601 format."}},"required":["id","user_id","vendor_id","plan_name","billing_cycle","amount","currency","started_at","next_renewal_at","status","created_at","updated_at"],"description":"Subscription entity schema."},"ISubscriptionRenewalGuardianSubscription.ICreate":{"type":"object","properties":{"vendor_id":{"type":"string","format":"uuid","description":"Subscribed vendor's unique identifier."},"plan_name":{"type":"string","description":"Name of the subscription plan. Unique per user and vendor."},"billing_cycle":{"oneOf":[{"const":"DAILY","description":"Billing cycle interval."},{"const":"WEEKLY","description":"Billing cycle interval."},{"const":"MONTHLY","description":"Billing cycle interval."},{"const":"YEARLY","description":"Billing cycle interval."}],"description":"Billing cycle interval."},"amount":{"type":"number","format":"double","description":"Subscription amount, must be >= 0."},"currency":{"type":"string","description":"Currency code following ISO 4217 3-letter uppercase format."},"started_at":{"type":"string","format":"date-time","description":"Subscription start date in UTC ISO 8601 format."},"status":{"oneOf":[{"const":"ACTIVE"},{"const":"PAUSED"},{"const":"CANCELED"},{"type":"null"}],"description":"Subscription status."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes about the subscription."}},"required":["vendor_id","plan_name","billing_cycle","amount","currency","started_at"],"description":"Subscription creation schema."},"ISubscriptionRenewalGuardianSubscription.IUpdate":{"type":"object","properties":{"plan_name":{"type":"string","description":"Name of the subscription plan. Unique per user and vendor. Nullable for updates."},"billing_cycle":{"oneOf":[{"const":"DAILY"},{"const":"WEEKLY"},{"const":"MONTHLY"},{"const":"YEARLY"},{"type":"null"}],"description":"Billing cycle interval. Allowed values: DAILY, WEEKLY, MONTHLY, YEARLY. Nullable for updates."},"amount":{"type":"number","description":"Subscription amount, must be >= 0. Nullable for updates."},"currency":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Currency code following ISO 4217 3-letter uppercase format. Nullable for updates."},"started_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Subscription start date in UTC ISO 8601 format. Nullable for updates."},"next_renewal_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Next scheduled renewal date in UTC ISO 8601 format. Calculated by advancing started_at by billing cycle intervals until strictly greater than current time. Nullable for updates."},"status":{"oneOf":[{"const":"ACTIVE"},{"const":"PAUSED"},{"const":"CANCELED"},{"type":"null"}],"description":"Subscription status. Allowed values: ACTIVE, PAUSED, CANCELED. Nullable for updates."},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes about the subscription. Nullable for updates."}},"description":"Update object for subscriptionRenewalGuardianSubscription. Partial and fields nullable for updates.","required":[]},"ISubscriptionRenewalGuardianReminderSetting.IRequest":{"type":"object","properties":{"subscription_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Referenced subscription ID for filtering reminder settings. Nullable."},"days_before":{"oneOf":[{"const":7},{"const":3},{"const":1},{"type":"null"}],"description":"Days before renewal to filter reminder settings. Allowed values: 7, 3, 1. Nullable."},"channel":{"oneOf":[{"const":"EMAIL"},{"const":"NONE"},{"type":"null"}],"description":"Reminder communication channel to filter. Allowed values: EMAIL, NONE. Nullable."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Pagination limit for list size. Nullable."},"offset":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Pagination offset for list start. Nullable."}},"description":"Request query for subscriptionRenewalGuardianReminderSetting for filtering and pagination.","required":[]},"ISubscriptionRenewalGuardianReminderSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"subscription_id":{"type":"string","format":"uuid","description":"Referenced subscription's ID."},"days_before":{"oneOf":[{"const":7,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},{"const":3,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},{"const":1,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."}],"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},"channel":{"oneOf":[{"const":"EMAIL","description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."},{"const":"NONE","description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."}],"description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the reminder setting was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the reminder setting was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the reminder setting was soft deleted. Null if not deleted."}},"required":["id","subscription_id","days_before","channel","created_at","updated_at"],"description":"Reminder settings attached to subscriptions for renewal notifications. Each setting defines how many days before renewal to notify and via which channel. Uniqueness enforced on subscription and days_before. Supports created_at, updated_at, and soft delete timestamps."},"ISubscriptionRenewalGuardianReminderSetting.ICreate":{"type":"object","properties":{"subscription_id":{"type":"string","format":"uuid","description":"Referenced subscription's ID."},"days_before":{"oneOf":[{"const":7,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},{"const":3,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},{"const":1,"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."}],"description":"Number of days before the subscription renewal to send the reminder. Allowed values are 7, 3, or 1."},"channel":{"oneOf":[{"const":"EMAIL","description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."},{"const":"NONE","description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."}],"description":"Communication channel for reminders. Allowed values are 'EMAIL' or 'NONE'."}},"required":["subscription_id","days_before","channel"],"description":"Create request for subscriptionRenewalGuardianReminderSetting. Requires subscription_id, days_before, and channel."},"ISubscriptionRenewalGuardianReminderSetting.IUpdate":{"type":"object","properties":{"days_before":{"type":"integer","description":"Number of days before the subscription renewal to send the reminder.\n\nAllowed values are 7, 3, or 1."},"channel":{"type":"string","description":"Communication channel for reminders.\n\nAllowed values are 'EMAIL' or 'NONE'."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the reminder setting was soft deleted. Null if not deleted."}},"description":"Partial update for reminder settings.\n\nAll properties are optional except none are omitted\n- Use null explicitly for fields that need to be reset.\n\nAllows users to modify reminder trigger days, channel, or soft deletion.","required":[]},"ISubscriptionRenewalGuardianSubscription.IUpcomingRenewalsRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for pagination, optional."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Limit of records per page, optional."}},"required":[],"description":"Request parameters for upcoming renewals listing including optional pagination."},"ISubscriptionRenewalGuardianAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the admin account"},"email":{"type":"string","description":"Unique email address of the admin"},"created_at":{"type":"string","format":"date-time","description":"Account creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Account last update timestamp"}},"required":["id","email","created_at","updated_at"],"description":"Summary representation of an admin account with essential non-sensitive fields."},"ISubscriptionRenewalGuardianGuest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest user account"},"email":{"type":"string","description":"Email address of the guest user"},"created_at":{"type":"string","format":"date-time","description":"Guest account creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Guest account last update timestamp"}},"required":["id","email","created_at","updated_at"],"description":"Summary representation of a guest user with essential identification fields."},"ISubscriptionRenewalGuardianVendors.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the vendor."},"name":{"type":"string","description":"Unique vendor name for identification."}},"required":["id","name"],"description":"Summary view of a vendor containing essential identification fields."},"ISubscriptionRenewalGuardianSubscriptions.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the subscription."},"plan_name":{"type":"string","description":"Name of the subscription plan."},"billing_cycle":{"type":"string","description":"Billing cycle of the subscription. One of DAILY, WEEKLY, MONTHLY, or YEARLY."},"next_renewal_at":{"type":"string","format":"date-time","description":"Next scheduled renewal date in UTC ISO 8601 format."},"status":{"oneOf":[{"const":"ACTIVE","description":"Subscription status."},{"const":"PAUSED","description":"Subscription status."},{"const":"CANCELED","description":"Subscription status."}],"description":"Subscription status."},"amount":{"type":"number","format":"double","description":"Subscription amount, non-negative."},"currency":{"type":"string","description":"Currency code compliant with ISO 4217."}},"required":["id","plan_name","billing_cycle","next_renewal_at","status","amount","currency"],"description":"Summary view of subscription for listing and brief info."},"ISubscriptionRenewalGuardianReminderSetting.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the reminder setting."},"days_before":{"type":"integer","description":"Number of days before renewal to send this reminder."},"channel":{"oneOf":[{"const":"EMAIL","description":"Communication channel for the reminder."},{"const":"NONE","description":"Communication channel for the reminder."}],"description":"Communication channel for the reminder."}},"required":["id","days_before","channel"],"description":"Summary of reminder settings with timing and channel."},"ISubscriptionRenewalGuardianSubscription.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the subscription."},"plan_name":{"type":"string","description":"Subscription plan name."},"billing_cycle":{"oneOf":[{"const":"DAILY","description":"Billing cycle of subscription."},{"const":"WEEKLY","description":"Billing cycle of subscription."},{"const":"MONTHLY","description":"Billing cycle of subscription."},{"const":"YEARLY","description":"Billing cycle of subscription."}],"description":"Billing cycle of subscription."},"next_renewal_at":{"type":"string","format":"date-time","description":"Next renewal date/time in ISO8601 UTC."},"status":{"oneOf":[{"const":"ACTIVE","description":"Current subscription status."},{"const":"PAUSED","description":"Current subscription status."},{"const":"CANCELED","description":"Current subscription status."}],"description":"Current subscription status."},"amount":{"type":"number","description":"Subscription amount, greater or equal to 0."},"currency":{"type":"string","description":"Currency code ISO 4217 3-letter string."}},"required":["id","plan_name","billing_cycle","next_renewal_at","status","amount","currency"],"description":"Detailed summary of subscription with key fields for UI."}}}}