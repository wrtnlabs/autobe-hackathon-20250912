import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsDirectMessage } from "../../../../structures/IEnterpriseLmsDirectMessage";
import { IPageIEnterpriseLmsDirectMessage } from "../../../../structures/IPageIEnterpriseLmsDirectMessage";

/**
 * Create and send a new direct message between users.
 *
 * Send a new private direct message within the enterprise LMS platform. The
 * message is stored in the enterprise_lms_direct_messages table with sender and
 * recipient user identifiers, message content, and sent timestamp.
 *
 * The sender and recipient must be valid users with appropriate permissions.
 * The message content should comply with content guidelines.
 *
 * Upon successful creation, the newly saved direct message is returned.
 *
 * Only authenticated users can send direct messages.
 *
 * This operation supports user communication and collaboration.
 *
 * @param props.connection
 * @param props.body Direct message creation payload including sender,
 *   recipient, and message content
 * @path /enterpriseLms/externalLearner/directMessages
 * @accessor api.functional.enterpriseLms.externalLearner.directMessages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Direct message creation payload including sender, recipient, and
     * message content
     */
    body: IEnterpriseLmsDirectMessage.ICreate;
  };
  export type Body = IEnterpriseLmsDirectMessage.ICreate;
  export type Response = IEnterpriseLmsDirectMessage;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/externalLearner/directMessages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/externalLearner/directMessages";
  export const random = (): IEnterpriseLmsDirectMessage =>
    typia.random<IEnterpriseLmsDirectMessage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of direct messages with filters and pagination.
 *
 * Retrieve a filtered and paginated list of direct messages exchanged between
 * users in the enterprise LMS platform. This operation accepts various search
 * parameters such as sender ID, recipient ID, date range, and message content
 * keywords to facilitate detailed querying.
 *
 * Direct messages represent private communications stored in the
 * enterprise_lms_direct_messages table. The system applies tenant isolation and
 * access control to ensure message confidentiality.
 *
 * The filtered data is returned with pagination to support efficient client
 * rendering. This is a read-only, user-level operation accessible to
 * authenticated users.
 *
 * @param props.connection
 * @param props.body Search parameters and pagination settings for direct
 *   messages filtering
 * @path /enterpriseLms/externalLearner/directMessages
 * @accessor api.functional.enterpriseLms.externalLearner.directMessages.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search parameters and pagination settings for direct messages
     * filtering
     */
    body: IEnterpriseLmsDirectMessage.IRequest;
  };
  export type Body = IEnterpriseLmsDirectMessage.IRequest;
  export type Response = IPageIEnterpriseLmsDirectMessage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/externalLearner/directMessages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/externalLearner/directMessages";
  export const random = (): IPageIEnterpriseLmsDirectMessage.ISummary =>
    typia.random<IPageIEnterpriseLmsDirectMessage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific direct message.
 *
 * Retrieve detailed information of a single direct message identified by
 * directMessageId. The direct message includes sender, recipient, message
 * content, sent/read timestamps, and metadata.
 *
 * This data is tenant-isolated and access-controlled according to user
 * permissions.
 *
 * Providing a valid UUID parameter for directMessageId is required.
 *
 * Only authorized authenticated users can perform this operation.
 *
 * This operation supports use cases such as message viewing and auditing.
 *
 * @param props.connection
 * @param props.directMessageId Unique identifier of the direct message to
 *   retrieve
 * @path /enterpriseLms/externalLearner/directMessages/:directMessageId
 * @accessor api.functional.enterpriseLms.externalLearner.directMessages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the direct message to retrieve */
    directMessageId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsDirectMessage;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/externalLearner/directMessages/:directMessageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/externalLearner/directMessages/${encodeURIComponent(props.directMessageId ?? "null")}`;
  export const random = (): IEnterpriseLmsDirectMessage =>
    typia.random<IEnterpriseLmsDirectMessage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("directMessageId")(() =>
        typia.assert(props.directMessageId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
