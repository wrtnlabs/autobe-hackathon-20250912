import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsDepartmentManager } from "../../../../structures/IEnterpriseLmsDepartmentManager";

/**
 * Retrieve a specific Department Manager by ID.
 *
 * Retrieve detailed information about a specific Department Manager identified
 * by departmentmanagerId. This operation securely fetches the Department
 * Manager record scoped within the tenant organization. The returned data
 * includes all user properties like email, names, status, timestamps, and soft
 * deletion status.
 *
 * Authorization requires the user to have the 'departmentManager' role to
 * ensure data security and proper multi-tenant isolation.
 *
 * This endpoint corresponds directly to the enterprise_lms_departmentmanager
 * model in the Prisma DB schema.
 *
 * Error handling includes responses for non-existent IDs and access
 * restrictions.
 *
 * @param props.connection
 * @param props.departmentmanagerId Unique identifier of the Department Manager
 * @path /enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId
 * @accessor api.functional.enterpriseLms.departmentManager.departmentmanagers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the Department Manager */
    departmentmanagerId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsDepartmentManager;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/departmentManager/departmentmanagers/${encodeURIComponent(props.departmentmanagerId ?? "null")}`;
  export const random = (): IEnterpriseLmsDepartmentManager =>
    typia.random<IEnterpriseLmsDepartmentManager>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentmanagerId")(() =>
        typia.assert(props.departmentmanagerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a Department Manager user by ID.
 *
 * Update details of a Department Manager identified by departmentmanagerId. The
 * request body contains updated fields, such as email, password_hash,
 * first_name, last_name, and status, conforming to the
 * enterprise_lms_departmentmanager schema.
 *
 * Authorization is required with the 'departmentManager' role to ensure secure
 * data management within tenant boundaries.
 *
 * The operation returns the updated Department Manager entity reflecting all
 * changes.
 *
 * Sensitive information should be transmitted and stored securely.
 *
 * @param props.connection
 * @param props.departmentmanagerId Unique identifier of the Department Manager
 *   to update
 * @param props.body Payload to update Department Manager user
 * @path /enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId
 * @accessor api.functional.enterpriseLms.departmentManager.departmentmanagers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the Department Manager to update */
    departmentmanagerId: string & tags.Format<"uuid">;

    /** Payload to update Department Manager user */
    body: IEnterpriseLmsDepartmentManager.IUpdate;
  };
  export type Body = IEnterpriseLmsDepartmentManager.IUpdate;
  export type Response = IEnterpriseLmsDepartmentManager;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/departmentManager/departmentmanagers/${encodeURIComponent(props.departmentmanagerId ?? "null")}`;
  export const random = (): IEnterpriseLmsDepartmentManager =>
    typia.random<IEnterpriseLmsDepartmentManager>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentmanagerId")(() =>
        typia.assert(props.departmentmanagerId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a Department Manager user permanently.
 *
 * Permanently delete a Department Manager by its unique departmentmanagerId.
 * This operation performs a hard delete, removing the record from the database
 * entirely.
 *
 * Soft deletion is possible in the schema but this endpoint does not implement
 * it.
 *
 * Only users with the 'departmentManager' role are authorized to perform this
 * deletion to ensure security and prevent accidental data loss.
 *
 * Clients should handle cases where the record does not exist gracefully.
 *
 * @param props.connection
 * @param props.departmentmanagerId Unique identifier of the Department Manager
 *   to delete
 * @path /enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId
 * @accessor api.functional.enterpriseLms.departmentManager.departmentmanagers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the Department Manager to delete */
    departmentmanagerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/departmentManager/departmentmanagers/:departmentmanagerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/departmentManager/departmentmanagers/${encodeURIComponent(props.departmentmanagerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("departmentmanagerId")(() =>
        typia.assert(props.departmentmanagerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new Department Manager user within the specified tenant
 * organization. The request body must include all required attributes,
 * including tenant_id, email, password_hash, first_name, last_name, and
 * status.
 *
 * The system validates the uniqueness of the email and ensures proper tenant
 * association.
 *
 * This operation corresponds to creating a new entry in the
 * enterprise_lms_departmentmanager table, returning the full created entity
 * including timestamps.
 *
 * All sensitive data, such as passwords, should be handled securely in transit
 * and at rest.
 *
 * Authorization is limited to users with the 'departmentManager' role to
 * maintain security and compliance.
 *
 * @param props.connection
 * @param props.body Payload to create a Department Manager
 * @path /enterpriseLms/departmentManager/departmentmanagers
 * @accessor api.functional.enterpriseLms.departmentManager.departmentmanagers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload to create a Department Manager */
    body: IEnterpriseLmsDepartmentManager.ICreate;
  };
  export type Body = IEnterpriseLmsDepartmentManager.ICreate;
  export type Response = IEnterpriseLmsDepartmentManager;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/departmentManager/departmentmanagers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/departmentManager/departmentmanagers";
  export const random = (): IEnterpriseLmsDepartmentManager =>
    typia.random<IEnterpriseLmsDepartmentManager>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
