import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentLocalization } from "../../../../../structures/IEnterpriseLmsContentLocalization";

/**
 * Create a new content localization for a content item.
 *
 * Create a new content localization record for a specific content item.
 *
 * This is part of managing multi-language content versions by allowing addition
 * of new translated content.
 *
 * Only authorized users with content management permissions can perform this
 * action.
 *
 * Successful creation returns the new localization record with all properties
 * including timestamps.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content item
 * @param props.body Information for creating new content localization
 * @path /enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.contents.contentLocalizations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target content item */
    contentId: string & tags.Format<"uuid">;

    /** Information for creating new content localization */
    body: IEnterpriseLmsContentLocalization.ICreate;
  };
  export type Body = IEnterpriseLmsContentLocalization.ICreate;
  export type Response = IEnterpriseLmsContentLocalization;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/contents/${encodeURIComponent(props.contentId ?? "null")}/contentLocalizations`;
  export const random = (): IEnterpriseLmsContentLocalization =>
    typia.random<IEnterpriseLmsContentLocalization>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update content localization information.
 *
 * Update an existing content localization record by ID under a specific content
 * item.
 *
 * Allows editing of localized titles and descriptions.
 *
 * Access restricted to authorized users managing content.
 *
 * Returns the updated record upon successful modification.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content item
 * @param props.id Unique identifier of the localization record to update
 * @param props.body Updated information for the content localization record
 * @path /enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations/:id
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.contents.contentLocalizations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target content item */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the localization record to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for the content localization record */
    body: IEnterpriseLmsContentLocalization.IUpdate;
  };
  export type Body = IEnterpriseLmsContentLocalization.IUpdate;
  export type Response = IEnterpriseLmsContentLocalization;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/contents/${encodeURIComponent(props.contentId ?? "null")}/contentLocalizations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentLocalization =>
    typia.random<IEnterpriseLmsContentLocalization>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a content localization for a given content.
 *
 * Delete a specific content localization associated with a particular content.
 * This operation permanently removes the localization entry from the system.
 *
 * Security: Only authorized users with appropriate permissions to manage
 * content localizations can perform this operation.
 *
 * Relationships: The content localization belongs to a content item identified
 * by contentId. The content in turn is tenant isolated to ensure
 * multi-organizational data security.
 *
 * Validation: Path parameters contentId and id must be valid UUIDs representing
 * existing records.
 *
 * Behavior: This operation performs a hard delete, removing the localization
 * record completely and irreversibly.
 *
 * Related APIs: List all localizations for a content, Add a new localization,
 * Update an existing localization.
 *
 * Errors: Returns 404 if content or localization does not exist, 403 for
 * unauthorized users.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content
 * @param props.id Unique identifier of the content localization
 * @path /enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations/:id
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.contents.contentLocalizations.eraseContentLocalization
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseContentLocalization(
  connection: IConnection,
  props: eraseContentLocalization.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseContentLocalization.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseContentLocalization.METADATA,
          path: eraseContentLocalization.path(props),
          status: null,
        },
      );
}
export namespace eraseContentLocalization {
  export type Props = {
    /** Unique identifier of the content */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content localization */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/contentCreatorInstructor/contents/${encodeURIComponent(props.contentId ?? "null")}/contentLocalizations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseContentLocalization.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseContentLocalization.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
