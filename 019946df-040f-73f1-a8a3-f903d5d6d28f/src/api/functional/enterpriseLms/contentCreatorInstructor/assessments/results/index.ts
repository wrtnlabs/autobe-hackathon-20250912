import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAssessmentResult } from "../../../../../structures/IEnterpriseLmsAssessmentResult";
import { IPageIEnterpriseLmsAssessmentResult } from "../../../../../structures/IPageIEnterpriseLmsAssessmentResult";

/**
 * Retrieve paginated results for a specified assessment.
 *
 * Fetch a filtered, paginated list of assessment results for the assessment
 * identified by assessmentId.
 *
 * This PATCH endpoint accepts a request body specifying filtering and
 * pagination criteria as per IEnterpriseLmsAssessmentResult.IRequest schema.
 *
 * The response provides a paginated list of assessment results matching the
 * criteria.
 *
 * Roles authorized: contentCreatorInstructor, organizationAdmin.
 *
 * Tenant data isolation and security are enforced.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.body Search and pagination criteria for assessment results
 * @path /enterpriseLms/contentCreatorInstructor/assessments/:assessmentId/results
 * @accessor api.functional.enterpriseLms.contentCreatorInstructor.assessments.results.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Search and pagination criteria for assessment results */
    body: IEnterpriseLmsAssessmentResult.IRequest;
  };
  export type Body = IEnterpriseLmsAssessmentResult.IRequest;
  export type Response = IPageIEnterpriseLmsAssessmentResult;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/contentCreatorInstructor/assessments/:assessmentId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/contentCreatorInstructor/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/results`;
  export const random = (): IPageIEnterpriseLmsAssessmentResult =>
    typia.random<IPageIEnterpriseLmsAssessmentResult>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
