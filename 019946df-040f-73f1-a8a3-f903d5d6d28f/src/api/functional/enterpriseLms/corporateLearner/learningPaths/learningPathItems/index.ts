import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsLearningPathItem } from "../../../../../structures/IEnterpriseLmsLearningPathItem";
import { IPageIEnterpriseLmsLearningPathItem } from "../../../../../structures/IPageIEnterpriseLmsLearningPathItem";

/**
 * Retrieve a paginated list of learning path items for a specific learning
 * path.
 *
 * This API operation fetches a paginated and optionally filtered list of
 * learning path items for a specific learning path identified by its ID.
 *
 * Users can view detailed information about each learning path item, including
 * its type (e.g., course, module), its reference ID, and its order in the
 * learning path.
 *
 * Security considerations include ensuring that only users authorized to access
 * the given learning path can retrieve its items.
 *
 * This operation is crucial for constructing the learner's curriculum and
 * managing the learning path structure within the enterprise LMS system.
 *
 * The response includes pagination information to efficiently load large
 * learning paths and maintain system performance while ensuring data
 * consistency and tenant isolation.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier of the target learning path
 * @param props.body Search criteria and pagination parameters for learning path
 *   items
 * @path /enterpriseLms/corporateLearner/learningPaths/:learningPathId/learningPathItems
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.learningPathItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target learning path */
    learningPathId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for learning path items */
    body: IEnterpriseLmsLearningPathItem.IRequest;
  };
  export type Body = IEnterpriseLmsLearningPathItem.IRequest;
  export type Response = IPageIEnterpriseLmsLearningPathItem;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/learningPaths/:learningPathId/learningPathItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}/learningPathItems`;
  export const random = (): IPageIEnterpriseLmsLearningPathItem =>
    typia.random<IPageIEnterpriseLmsLearningPathItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed learning path item information.
 *
 * Retrieve detailed information about a specific learning path item by its ID
 * within a given learning path.
 *
 * This operation returns all properties associated with the learning path item,
 * such as item type, item ID, and its sequence order.
 *
 * Security checks enforce that only authorized users of the tenant can access
 * this item.
 *
 * The operation is essential for management interfaces where administrators or
 * content managers need to view or edit individual learning path components
 * accurately.
 *
 * This operation interacts with the enterprise_lms_learning_path_items table
 * from the Prisma schema ensuring consistency and tenant data isolation.
 *
 * @param props.connection
 * @param props.learningPathId Unique identifier of the target learning path
 * @param props.learningPathItemId Unique identifier of the learning path item
 * @path /enterpriseLms/corporateLearner/learningPaths/:learningPathId/learningPathItems/:learningPathItemId
 * @accessor api.functional.enterpriseLms.corporateLearner.learningPaths.learningPathItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target learning path */
    learningPathId: string & tags.Format<"uuid">;

    /** Unique identifier of the learning path item */
    learningPathItemId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsLearningPathItem;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/learningPaths/:learningPathId/learningPathItems/:learningPathItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}/learningPathItems/${encodeURIComponent(props.learningPathItemId ?? "null")}`;
  export const random = (): IEnterpriseLmsLearningPathItem =>
    typia.random<IEnterpriseLmsLearningPathItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.param("learningPathItemId")(() =>
        typia.assert(props.learningPathItemId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
