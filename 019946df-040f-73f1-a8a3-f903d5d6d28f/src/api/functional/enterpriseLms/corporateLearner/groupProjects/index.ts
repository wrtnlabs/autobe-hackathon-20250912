import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsGroupProject } from "../../../../structures/IEnterpriseLmsGroupProject";
import { IPageIEnterpriseLmsGroupProject } from "../../../../structures/IPageIEnterpriseLmsGroupProject";

/**
 * Create a new group project for collaborative workspaces.
 *
 * The client supplies required data including tenant_id (UUID), owner_id
 * (UUID), title, optional description, and start/end timestamps.
 *
 * The API saves the new record to the enterprise_lms_group_projects table and
 * returns the full created entity.
 *
 * Authorized roles like corporateLearner may perform this POST operation.
 * Timestamps for creation and update are managed by the system.
 *
 * Request body must adhere to IEnterpriseLmsGroupProject.ICreate schema.
 *
 * @param props.connection
 * @param props.body Group project creation data
 * @path /enterpriseLms/corporateLearner/groupProjects
 * @accessor api.functional.enterpriseLms.corporateLearner.groupProjects.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Group project creation data */
    body: IEnterpriseLmsGroupProject.ICreate;
  };
  export type Body = IEnterpriseLmsGroupProject.ICreate;
  export type Response = IEnterpriseLmsGroupProject;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/groupProjects",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/groupProjects";
  export const random = (): IEnterpriseLmsGroupProject =>
    typia.random<IEnterpriseLmsGroupProject>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve filtered paginated list of group projects.
 *
 * Retrieve a filtered, sorted, and paginated list of tenant-specific group
 * projects. Search criteria may include title, status, owner, and creation
 * dates.
 *
 * This operation ensures multi-tenant data isolation and returns project
 * summaries suitable for list presentation.
 *
 * The response contains pagination metadata and an array of group project
 * summary items.
 *
 * Only authorized corporate learners within the tenant can access this
 * information.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for group projects
 * @path /enterpriseLms/corporateLearner/groupProjects
 * @accessor api.functional.enterpriseLms.corporateLearner.groupProjects.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination parameters for group projects */
    body: IEnterpriseLmsGroupProject.IRequest;
  };
  export type Body = IEnterpriseLmsGroupProject.IRequest;
  export type Response = IPageIEnterpriseLmsGroupProject.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/groupProjects",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/groupProjects";
  export const random = (): IPageIEnterpriseLmsGroupProject.ISummary =>
    typia.random<IPageIEnterpriseLmsGroupProject.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a group project by ID.
 *
 * Retrieve detailed information about a single group project by its unique ID.
 *
 * This operation accesses the 'enterprise_lms_group_projects' table
 * representing collaborative workspaces owned by corporate learners in tenant
 * organizations. The response includes project title, description, ownership,
 * and timeline.
 *
 * Security ensures only authorized roles like corporate learners may access
 * this data. The operation uses a GET method and requires the path parameter
 * 'groupProjectId' as UUID.
 *
 * No request body is needed for this operation, and it returns the full group
 * project entity details.
 *
 * @param props.connection
 * @param props.groupProjectId Unique identifier of the target group project
 * @path /enterpriseLms/corporateLearner/groupProjects/:groupProjectId
 * @accessor api.functional.enterpriseLms.corporateLearner.groupProjects.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target group project */
    groupProjectId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsGroupProject;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/groupProjects/:groupProjectId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/groupProjects/${encodeURIComponent(props.groupProjectId ?? "null")}`;
  export const random = (): IEnterpriseLmsGroupProject =>
    typia.random<IEnterpriseLmsGroupProject>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupProjectId")(() => typia.assert(props.groupProjectId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update group project data by ID.
 *
 * Update an existing group project by its unique ID.
 *
 * Requires the path parameter 'groupProjectId' of UUID type and a JSON request
 * body matching IEnterpriseLmsGroupProject.IUpdate. The entity is updated in
 * the database and the updated version is returned.
 *
 * Only authorized corporateLearner users may perform updates. Creation and
 * update timestamps are system managed.
 *
 * All fields in the update schema should be included as the operation expects a
 * full resource update.
 *
 * @param props.connection
 * @param props.groupProjectId Unique identifier of the group project to update
 * @param props.body Updated group project data
 * @path /enterpriseLms/corporateLearner/groupProjects/:groupProjectId
 * @accessor api.functional.enterpriseLms.corporateLearner.groupProjects.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the group project to update */
    groupProjectId: string & tags.Format<"uuid">;

    /** Updated group project data */
    body: IEnterpriseLmsGroupProject.IUpdate;
  };
  export type Body = IEnterpriseLmsGroupProject.IUpdate;
  export type Response = IEnterpriseLmsGroupProject;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/groupProjects/:groupProjectId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/groupProjects/${encodeURIComponent(props.groupProjectId ?? "null")}`;
  export const random = (): IEnterpriseLmsGroupProject =>
    typia.random<IEnterpriseLmsGroupProject>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupProjectId")(() => typia.assert(props.groupProjectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a group project by ID.
 *
 * Permanently delete a group project by its unique ID.
 *
 * The operation targets the enterprise_lms_group_projects table and requires
 * the 'groupProjectId' UUID path parameter identifying the project to be
 * deleted.
 *
 * Only authorized corporateLearner users may execute this operation.
 *
 * This operation performs a hard delete and returns no content. Deleted data
 * cannot be recovered.
 *
 * Use carefully due to the irreversible nature of the deletion.
 *
 * @param props.connection
 * @param props.groupProjectId Unique identifier of the group project to delete
 * @path /enterpriseLms/corporateLearner/groupProjects/:groupProjectId
 * @accessor api.functional.enterpriseLms.corporateLearner.groupProjects.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the group project to delete */
    groupProjectId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/corporateLearner/groupProjects/:groupProjectId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/groupProjects/${encodeURIComponent(props.groupProjectId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupProjectId")(() => typia.assert(props.groupProjectId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
