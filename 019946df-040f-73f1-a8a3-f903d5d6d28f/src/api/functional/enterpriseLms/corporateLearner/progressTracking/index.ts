import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsProgressTracking } from "../../../../structures/IEnterpriseLmsProgressTracking";
import { IPageIEnterpriseLmsProgressTracking } from "../../../../structures/IPageIEnterpriseLmsProgressTracking";

/**
 * Get progress tracking record by ID.
 *
 * Retrieve detailed information about a learner's progress tracking by its
 * unique ID.
 *
 * This endpoint returns metrics including time spent (seconds), assessment
 * attempts, and engagement score related to the learner's interaction with
 * specific content.
 *
 * Access control ensures only authorized learners or system-level users can
 * retrieve the data.
 *
 * The operation corresponds to the enterprise_lms_progress_tracking Prisma
 * table, critical for monitoring learner engagement and progress analytics.
 *
 * Proper error handling is implemented for cases such as non-existent IDs or
 * insufficient permissions.
 *
 * @param props.connection
 * @param props.id Unique identifier of the progress tracking record
 * @path /enterpriseLms/corporateLearner/progressTracking/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.progressTracking.atProgressTracking
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atProgressTracking(
  connection: IConnection,
  props: atProgressTracking.Props,
): Promise<atProgressTracking.Response> {
  return true === connection.simulate
    ? atProgressTracking.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atProgressTracking.METADATA,
          path: atProgressTracking.path(props),
          status: null,
        },
      );
}
export namespace atProgressTracking {
  export type Props = {
    /** Unique identifier of the progress tracking record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsProgressTracking;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/progressTracking/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/progressTracking/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsProgressTracking =>
    typia.random<IEnterpriseLmsProgressTracking>();
  export const simulate = (
    connection: IConnection,
    props: atProgressTracking.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atProgressTracking.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific progress tracking record by ID.
 *
 * Update an existing learner's progress tracking record by its unique ID. This
 * operation modifies key learning metrics including time spent on content,
 * number of assessment attempts, and engagement score, reflecting the learner's
 * evolving progress.
 *
 * Security and access control require that only authenticated users with the
 * 'corporateLearner' role can perform updates.
 *
 * This method involves the enterprise_lms_progress_tracking table according to
 * the Prisma schema, which links learners with content items and tracks
 * detailed interaction data.
 *
 * Validation rules ensure the ID path parameter is a valid UUID and the update
 * payload conforms to the defined DTO IEnterpriseLmsProgressTracking.IUpdate.
 *
 * On success, the updated progress tracking record is returned with all
 * relevant data fields like learnerId, contentId, and engagement metrics.
 *
 * Error handling includes proper responses for invalid IDs, authorization
 * errors, and validation failures.
 *
 * @param props.connection
 * @param props.id Unique identifier of the progress tracking record
 * @param props.body Data to update progress tracking record
 * @path /enterpriseLms/corporateLearner/progressTracking/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.progressTracking.updateProgressTracking
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateProgressTracking(
  connection: IConnection,
  props: updateProgressTracking.Props,
): Promise<updateProgressTracking.Response> {
  return true === connection.simulate
    ? updateProgressTracking.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateProgressTracking.METADATA,
          path: updateProgressTracking.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateProgressTracking {
  export type Props = {
    /** Unique identifier of the progress tracking record */
    id: string & tags.Format<"uuid">;

    /** Data to update progress tracking record */
    body: IEnterpriseLmsProgressTracking.IUpdate;
  };
  export type Body = IEnterpriseLmsProgressTracking.IUpdate;
  export type Response = IEnterpriseLmsProgressTracking;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/corporateLearner/progressTracking/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/corporateLearner/progressTracking/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsProgressTracking =>
    typia.random<IEnterpriseLmsProgressTracking>();
  export const simulate = (
    connection: IConnection,
    props: updateProgressTracking.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateProgressTracking.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific progress tracking record by ID (soft delete).
 *
 * Permanently or logically delete a learner's progress tracking record by its
 * ID. Since the schema includes a deleted_at field, this operation performs a
 * soft delete by setting the deleted_at timestamp.
 *
 * Only users with role 'corporateLearner' are authorized to perform this
 * action.
 *
 * The record identified by the provided UUID in the path parameter is marked as
 * deleted, preserving data for audit compliance.
 *
 * This operation interfaces with the enterprise_lms_progress_tracking table in
 * the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the progress tracking record
 * @path /enterpriseLms/corporateLearner/progressTracking/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.progressTracking.eraseProgressTracking
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseProgressTracking(
  connection: IConnection,
  props: eraseProgressTracking.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseProgressTracking.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseProgressTracking.METADATA,
          path: eraseProgressTracking.path(props),
          status: null,
        },
      );
}
export namespace eraseProgressTracking {
  export type Props = {
    /** Unique identifier of the progress tracking record */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/corporateLearner/progressTracking/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/progressTracking/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseProgressTracking.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseProgressTracking.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create progress tracking entry.
 *
 * Create a new progress tracking record for a learner's content interaction.
 *
 * The endpoint accepts progress metrics including time spent (seconds), number
 * of assessment attempts, and engagement score. The request body must adhere to
 * the IEnterpriseLmsProgressTracking.ICreate schema.
 *
 * Upon successful creation, the full progress tracking record is returned.
 *
 * Authorization ensures only authenticated corporate learners can create
 * records tied to their own data.
 *
 * This operation interfaces directly with the enterprise_lms_progress_tracking
 * table in the database schema.
 *
 * @param props.connection
 * @param props.body Progress tracking creation data
 * @path /enterpriseLms/corporateLearner/progressTracking
 * @accessor api.functional.enterpriseLms.corporateLearner.progressTracking.createProgressTracking
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createProgressTracking(
  connection: IConnection,
  props: createProgressTracking.Props,
): Promise<createProgressTracking.Response> {
  return true === connection.simulate
    ? createProgressTracking.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createProgressTracking.METADATA,
          path: createProgressTracking.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createProgressTracking {
  export type Props = {
    /** Progress tracking creation data */
    body: IEnterpriseLmsProgressTracking.ICreate;
  };
  export type Body = IEnterpriseLmsProgressTracking.ICreate;
  export type Response = IEnterpriseLmsProgressTracking;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/corporateLearner/progressTracking",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/progressTracking";
  export const random = (): IEnterpriseLmsProgressTracking =>
    typia.random<IEnterpriseLmsProgressTracking>();
  export const simulate = (
    connection: IConnection,
    props: createProgressTracking.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createProgressTracking.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search progress tracking entries with filters and pagination.
 *
 * Search and retrieve a filtered, paginated list of progress tracking entries.
 *
 * This endpoint supports complex queries including filtering by learner,
 * content, time range, and engagement metrics. It returns paginated summaries
 * to optimize frontend performance.
 *
 * Authorization ensures users can only query data within their tenant and
 * permission scope.
 *
 * The operation corresponds to the enterprise_lms_progress_tracking table and
 * supports analytics and reporting features.
 *
 * Errors related to invalid filters or unauthorized access are managed
 * appropriately.
 *
 * @param props.connection
 * @param props.body Filter and pagination parameters for progress tracking
 * @path /enterpriseLms/corporateLearner/progressTracking
 * @accessor api.functional.enterpriseLms.corporateLearner.progressTracking.indexProgressTracking
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexProgressTracking(
  connection: IConnection,
  props: indexProgressTracking.Props,
): Promise<indexProgressTracking.Response> {
  return true === connection.simulate
    ? indexProgressTracking.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexProgressTracking.METADATA,
          path: indexProgressTracking.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexProgressTracking {
  export type Props = {
    /** Filter and pagination parameters for progress tracking */
    body: IEnterpriseLmsProgressTracking.IRequest;
  };
  export type Body = IEnterpriseLmsProgressTracking.IRequest;
  export type Response = IPageIEnterpriseLmsProgressTracking.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/progressTracking",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/progressTracking";
  export const random = (): IPageIEnterpriseLmsProgressTracking.ISummary =>
    typia.random<IPageIEnterpriseLmsProgressTracking.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexProgressTracking.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexProgressTracking.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
