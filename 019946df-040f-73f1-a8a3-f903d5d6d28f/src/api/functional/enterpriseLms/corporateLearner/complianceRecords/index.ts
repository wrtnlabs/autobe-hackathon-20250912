import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsComplianceRecords } from "../../../../structures/IEnterpriseLmsComplianceRecords";

/**
 * Retrieve a specific compliance record by ID.
 *
 * Retrieve detailed information about a specific compliance record by its
 * unique identifier.
 *
 * This operation fetches compliance status, types, and audit details stored in
 * enterprise_lms_compliance_records.
 *
 * Only authorized users with role 'corporateLearner' can access this
 * information.
 *
 * Validates path parameter ID as a UUID and returns comprehensive compliance
 * record data on success.
 *
 * Handles errors appropriately for non-existent or unauthorized requests.
 *
 * @param props.connection
 * @param props.id Unique identifier of the compliance record
 * @path /enterpriseLms/corporateLearner/complianceRecords/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.complianceRecords.atComplianceRecord
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atComplianceRecord(
  connection: IConnection,
  props: atComplianceRecord.Props,
): Promise<atComplianceRecord.Response> {
  return true === connection.simulate
    ? atComplianceRecord.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atComplianceRecord.METADATA,
          path: atComplianceRecord.path(props),
          status: null,
        },
      );
}
export namespace atComplianceRecord {
  export type Props = {
    /** Unique identifier of the compliance record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsComplianceRecords;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/complianceRecords/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/complianceRecords/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsComplianceRecords =>
    typia.random<IEnterpriseLmsComplianceRecords>();
  export const simulate = (
    connection: IConnection,
    props: atComplianceRecord.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atComplianceRecord.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
