import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContents } from "../../../../structures/IEnterpriseLmsContents";
import { IPageIEnterpriseLmsContents } from "../../../../structures/IPageIEnterpriseLmsContents";
export * as contentLocalizations from "./contentLocalizations/index";

/**
 * Search and retrieve a filtered, paginated list of content items.
 *
 * Retrieve a filtered and paginated list of enterprise LMS content entities
 * from the system. This operation supports comprehensive search capabilities
 * including filtering by tenant, approval status, business lifecycle status,
 * content type, and keyword searches in title and description.
 *
 * Clients can specify pagination size, page number, and sorting options to
 * control result sets.
 *
 * Security considerations ensure only users with appropriate authorization see
 * permitted content matching their tenant and role permissions.
 *
 * The operation corresponds to the enterprise_lms_contents database table as
 * defined in the Prisma schema, incorporating fields such as title,
 * description, content_type, status, business_status, created_at, updated_at,
 * and deleted_at.
 *
 * Results return paginated content summaries to optimize data transmission and
 * client rendering.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for content
 *   filtering
 * @path /enterpriseLms/corporateLearner/contents
 * @accessor api.functional.enterpriseLms.corporateLearner.contents.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for content filtering */
    body: IEnterpriseLmsContents.IRequest;
  };
  export type Body = IEnterpriseLmsContents.IRequest;
  export type Response = IPageIEnterpriseLmsContents.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/contents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/contents";
  export const random = (): IPageIEnterpriseLmsContents.ISummary =>
    typia.random<IPageIEnterpriseLmsContents.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific content item by its ID. This includes the full
 * content metadata such as title, description, content type, approval status,
 * business lifecycle status, tenant ownership, and timestamps.
 *
 * The operation corresponds to the enterprise_lms_contents Prisma schema table.
 *
 * Users must be authorized to access the content within their tenant
 * boundaries.
 *
 * This operation returns detailed content object data, excluding any soft
 * deleted records.
 *
 * The {id} path parameter must be a valid UUID identifying the content record.
 *
 * @param props.connection
 * @param props.id UUID of the content item to retrieve
 * @path /enterpriseLms/corporateLearner/contents/:id
 * @accessor api.functional.enterpriseLms.corporateLearner.contents.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the content item to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContents;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/contents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/contents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContents =>
    typia.random<IEnterpriseLmsContents>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
