import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsVirtualClassroom } from "../../../../structures/IEnterpriseLmsVirtualClassroom";
import { IPageIEnterpriseLmsVirtualClassroom } from "../../../../structures/IPageIEnterpriseLmsVirtualClassroom";

/**
 * Search and retrieve virtual classroom sessions.
 *
 * Search and retrieve a filtered, paginated list of virtual classroom sessions
 * from the system.
 *
 * This operation allows authenticated corporate learners to query virtual
 * classrooms with various filters, pagination, and sorting options.
 *
 * The response provides summary information optimized for display in lists or
 * calendars, scoped within the user's tenant.
 *
 * Security considerations include ensuring users only see sessions they are
 * permitted to access based on their role and organizational scope.
 *
 * Errors may occur if invalid filter criteria are provided or due to
 * authorization failures.
 *
 * @param props.connection
 * @param props.body Request parameters for filtering and pagination of virtual
 *   classrooms
 * @path /enterpriseLms/corporateLearner/virtualClassrooms
 * @accessor api.functional.enterpriseLms.corporateLearner.virtualClassrooms.searchVirtualClassrooms
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchVirtualClassrooms(
  connection: IConnection,
  props: searchVirtualClassrooms.Props,
): Promise<searchVirtualClassrooms.Response> {
  return true === connection.simulate
    ? searchVirtualClassrooms.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchVirtualClassrooms.METADATA,
          path: searchVirtualClassrooms.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchVirtualClassrooms {
  export type Props = {
    /** Request parameters for filtering and pagination of virtual classrooms */
    body: IEnterpriseLmsVirtualClassroom.IRequest;
  };
  export type Body = IEnterpriseLmsVirtualClassroom.IRequest;
  export type Response = IPageIEnterpriseLmsVirtualClassroom.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/corporateLearner/virtualClassrooms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/corporateLearner/virtualClassrooms";
  export const random = (): IPageIEnterpriseLmsVirtualClassroom.ISummary =>
    typia.random<IPageIEnterpriseLmsVirtualClassroom.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchVirtualClassrooms.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchVirtualClassrooms.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a virtual classroom by ID.
 *
 * Retrieve detailed information of a specific virtual classroom session by its
 * unique ID.
 *
 * This operation ensures tenant-level data isolation and access control.
 *
 * Returns all fields of the virtual classroom, including title, instructor,
 * schedule details, and status.
 *
 * Errors include 'not found' if the session does not exist or 'forbidden' if
 * the user lacks permission.
 *
 * @param props.connection
 * @param props.virtualClassroomId Unique identifier of the virtual classroom
 *   session
 * @path /enterpriseLms/corporateLearner/virtualClassrooms/:virtualClassroomId
 * @accessor api.functional.enterpriseLms.corporateLearner.virtualClassrooms.getVirtualClassroom
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getVirtualClassroom(
  connection: IConnection,
  props: getVirtualClassroom.Props,
): Promise<getVirtualClassroom.Response> {
  return true === connection.simulate
    ? getVirtualClassroom.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getVirtualClassroom.METADATA,
          path: getVirtualClassroom.path(props),
          status: null,
        },
      );
}
export namespace getVirtualClassroom {
  export type Props = {
    /** Unique identifier of the virtual classroom session */
    virtualClassroomId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsVirtualClassroom;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/corporateLearner/virtualClassrooms/:virtualClassroomId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/corporateLearner/virtualClassrooms/${encodeURIComponent(props.virtualClassroomId ?? "null")}`;
  export const random = (): IEnterpriseLmsVirtualClassroom =>
    typia.random<IEnterpriseLmsVirtualClassroom>();
  export const simulate = (
    connection: IConnection,
    props: getVirtualClassroom.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getVirtualClassroom.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("virtualClassroomId")(() =>
        typia.assert(props.virtualClassroomId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
