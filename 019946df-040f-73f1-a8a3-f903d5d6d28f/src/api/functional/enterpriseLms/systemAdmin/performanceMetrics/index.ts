import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsPerformanceMetric } from "../../../../structures/IEnterpriseLmsPerformanceMetric";
import { IPageIEnterpriseLmsPerformanceMetric } from "../../../../structures/IPageIEnterpriseLmsPerformanceMetric";

/**
 * Search and retrieve paginated performance metrics.
 *
 * Retrieves paginated performance metrics with filtering and sorting options.
 *
 * Supports querying by tenant, metric name, and recorded timestamp.
 *
 * This operation is for system monitoring and reporting and is accessible only
 * by authorized users with role systemAdmin or organizationAdmin.
 *
 * The operation corresponds to the enterprise_lms_performance_metrics table and
 * supports advanced search with pagination.
 *
 * The response includes detailed metric data records along with pagination
 * info.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for performance
 *   metrics
 * @path /enterpriseLms/systemAdmin/performanceMetrics
 * @accessor api.functional.enterpriseLms.systemAdmin.performanceMetrics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for performance metrics */
    body: IEnterpriseLmsPerformanceMetric.IRequest;
  };
  export type Body = IEnterpriseLmsPerformanceMetric.IRequest;
  export type Response = IPageIEnterpriseLmsPerformanceMetric;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/performanceMetrics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/performanceMetrics";
  export const random = (): IPageIEnterpriseLmsPerformanceMetric =>
    typia.random<IPageIEnterpriseLmsPerformanceMetric>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed performance metric by ID.
 *
 * Retrieve detailed information for a single performance metric record by its
 * unique ID.
 *
 * This operation supports monitoring and analysis of system resource
 * utilization and performance trends across tenants or globally.
 *
 * The response includes all recorded metric details such as the metric name,
 * value, timestamp, and associated tenant information if applicable.
 *
 * Security considerations include restricting access to authorized users with
 * roles that permit viewing of performance data.
 *
 * The enterprise_lms_performance_metrics table has a UUID primary key 'id',
 * tenant association, metric name and value, and timestamps.
 *
 * No request body is required; the metric ID is provided as a URL path
 * parameter.
 *
 * Expected errors include 404 for unknown ID and 403 if unauthorized.
 *
 * @param props.connection
 * @param props.id The unique identifier of the performance metric record
 * @path /enterpriseLms/systemAdmin/performanceMetrics/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.performanceMetrics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the performance metric record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsPerformanceMetric;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/performanceMetrics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/performanceMetrics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsPerformanceMetric =>
    typia.random<IEnterpriseLmsPerformanceMetric>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
