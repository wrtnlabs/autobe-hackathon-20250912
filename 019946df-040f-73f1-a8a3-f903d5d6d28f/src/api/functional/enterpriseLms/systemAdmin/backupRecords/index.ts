import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsBackupRecord } from "../../../../structures/IEnterpriseLmsBackupRecord";
import { IPageIEnterpriseLmsBackupRecord } from "../../../../structures/IPageIEnterpriseLmsBackupRecord";
import { IEnterpriseLmsBackupRecords } from "../../../../structures/IEnterpriseLmsBackupRecords";

/**
 * Search backup records with filters and pagination.
 *
 * Search and retrieve paginated backup record logs for disaster recovery
 * auditing.
 *
 * Supports filters on backup type, status, timestamp ranges, storage locations.
 *
 * Response contains a paginated list summarizing backup metadata.
 *
 * Access is restricted to authorized administrative roles.
 *
 * The enterprise_lms_backup_records table is the data source.
 *
 * No detailed request body schema provided, but request body must be structured
 * as per backend implementation.
 *
 * This operation enables disaster recovery monitoring and compliance.
 *
 * Request body must be provided even if empty to initiate search.
 *
 * Response provides paged results suitable for dashboard display.
 *
 * @param props.connection
 * @param props.body Filters and pagination parameters for backup record search
 * @path /enterpriseLms/systemAdmin/backupRecords
 * @accessor api.functional.enterpriseLms.systemAdmin.backupRecords.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filters and pagination parameters for backup record search */
    body: IEnterpriseLmsBackupRecord.IRequest;
  };
  export type Body = IEnterpriseLmsBackupRecord.IRequest;
  export type Response = IPageIEnterpriseLmsBackupRecord.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/backupRecords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/backupRecords";
  export const random = (): IPageIEnterpriseLmsBackupRecord.ISummary =>
    typia.random<IPageIEnterpriseLmsBackupRecord.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed backup record by ID.
 *
 * Retrieve detailed information for a specific backup record in the Enterprise
 * LMS system.
 *
 * This enables system administrators to view metadata about backup snapshots,
 * including timestamp, type, and storage location used for disaster recovery
 * and compliance verification.
 *
 * Security considerations restrict access to authorized system admins or backup
 * audit roles.
 *
 * The underlying data is sourced from the enterprise_lms_backup_records table,
 * ensuring accurate and complete backup record retrieval.
 *
 * No request body is required as this is a read-only GET operation.
 *
 * Errors include 404 if the record does not exist, and unauthorized 403 if
 * access is insufficient.
 *
 * @param props.connection
 * @param props.id Unique identifier of the backup record
 * @path /enterpriseLms/systemAdmin/backupRecords/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.backupRecords.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the backup record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsBackupRecords;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/backupRecords/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/backupRecords/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsBackupRecords =>
    typia.random<IEnterpriseLmsBackupRecords>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
