import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsPaymentTransaction } from "../../../../structures/IEnterpriseLmsPaymentTransaction";
import { IPageIEnterpriseLmsPaymentTransaction } from "../../../../structures/IPageIEnterpriseLmsPaymentTransaction";

/**
 * Search and retrieve a filtered, paginated list of payment transactions from
 * Enterprise LMS. Supports advanced query options for tenant IDs, user IDs,
 * amounts, currency, payment method, and transaction status.
 *
 * Access permissions and data isolation ensure only authorized administrators
 * of the tenant organization can access this information.
 *
 * This operation corresponds to the enterprise_lms_payment_transactions table
 * in the Prisma schema with rich search capabilities.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for payment
 *   transaction filtering
 * @path /enterpriseLms/systemAdmin/paymentTransactions
 * @accessor api.functional.enterpriseLms.systemAdmin.paymentTransactions.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for payment transaction
     * filtering
     */
    body: IEnterpriseLmsPaymentTransaction.IRequest;
  };
  export type Body = IEnterpriseLmsPaymentTransaction.IRequest;
  export type Response = IPageIEnterpriseLmsPaymentTransaction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/paymentTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/paymentTransactions";
  export const random = (): IPageIEnterpriseLmsPaymentTransaction.ISummary =>
    typia.random<IPageIEnterpriseLmsPaymentTransaction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a payment transaction by ID.
 *
 * Retrieve detailed information about a payment transaction by its unique ID in
 * Enterprise LMS. Includes complete transaction data necessary for audit and
 * reconciliation.
 *
 * Access control is based on tenant and system administrator permissions.
 *
 * Linked to the enterprise_lms_payment_transactions table in the Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target payment transaction
 * @path /enterpriseLms/systemAdmin/paymentTransactions/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.paymentTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target payment transaction */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsPaymentTransaction;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/paymentTransactions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/paymentTransactions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsPaymentTransaction =>
    typia.random<IEnterpriseLmsPaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
