import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsSecurityAuditLog } from "../../../../structures/IEnterpriseLmsSecurityAuditLog";
import { IPageIEnterpriseLmsSecurityAuditLog } from "../../../../structures/IPageIEnterpriseLmsSecurityAuditLog";

/**
 * Search security audit logs with pagination and filters.
 *
 * Search and list security audit log records with detailed filtering, full text
 * search, sorting, and pagination.
 *
 * This operation supports security monitoring dashboards and forensic
 * investigations for compliance teams.
 *
 * It includes filters for tenant ID, user ID, event type, date ranges, and full
 * text search on event details.
 *
 * The response is a paginated list containing summaries of the audit log
 * records.
 *
 * Role-based access control ensures only authorized users can access security
 * logs.
 *
 * The request body supports complex filtering criteria.
 *
 * @param props.connection
 * @param props.body Search parameters and pagination for security audit logs
 * @path /enterpriseLms/systemAdmin/securityAuditLogs
 * @accessor api.functional.enterpriseLms.systemAdmin.securityAuditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search parameters and pagination for security audit logs */
    body: IEnterpriseLmsSecurityAuditLog.IRequest;
  };
  export type Body = IEnterpriseLmsSecurityAuditLog.IRequest;
  export type Response = IPageIEnterpriseLmsSecurityAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/securityAuditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/securityAuditLogs";
  export const random = (): IPageIEnterpriseLmsSecurityAuditLog.ISummary =>
    typia.random<IPageIEnterpriseLmsSecurityAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single security audit log by ID.
 *
 * Retrieve detailed security audit log record by its unique ID.
 *
 * This operation is essential for compliance audits and security incident
 * investigations.
 *
 * The response includes all relevant fields including user ID, tenant ID, event
 * type, event details, and timestamps.
 *
 * The operation maps to the enterprise_lms_security_audit_logs table.
 *
 * Access is restricted to authorized administrative roles.
 *
 * No request body is required.
 *
 * The ID parameter is a UUID representing the target log record.
 *
 * @param props.connection
 * @param props.id The unique identifier of the security audit log record
 * @path /enterpriseLms/systemAdmin/securityAuditLogs/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.securityAuditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the security audit log record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsSecurityAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/securityAuditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/securityAuditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSecurityAuditLog =>
    typia.random<IEnterpriseLmsSecurityAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
