import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentTagHierarchy } from "../../../../../structures/IEnterpriseLmsContentTagHierarchy";
import { IEnterpriseLmsContentTagChild } from "../../../../../structures/IEnterpriseLmsContentTagChild";
import { IPageIEnterpriseLmsContentTagChild } from "../../../../../structures/IPageIEnterpriseLmsContentTagChild";

/**
 * Create a child content tag under a specified parent tag.
 *
 * Creates a new child tag relationship under the specified parent content tag
 * ID.
 *
 * The request requires the parentTagId as a path parameter, which uniquely
 * identifies the parent tag. The request body must include the childTagId,
 * representing the ID of the child content tag to associate.
 *
 * Only users with roles such as systemAdmin, organizationAdmin, or
 * contentCreatorInstructor are authorized to perform this operation to ensure
 * content taxonomy integrity.
 *
 * Validation errors will occur if the parent tag does not exist or the child
 * tag ID is invalid or already linked.
 *
 * @param props.connection
 * @param props.parentTagId Unique identifier of the parent content tag
 * @param props.body Details for creating a new child tag relationship
 * @path /enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags
 * @accessor api.functional.enterpriseLms.systemAdmin.contentTags.childTags.createChildTag
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createChildTag(
  connection: IConnection,
  props: createChildTag.Props,
): Promise<createChildTag.Response> {
  return true === connection.simulate
    ? createChildTag.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createChildTag.METADATA,
          path: createChildTag.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createChildTag {
  export type Props = {
    /** Unique identifier of the parent content tag */
    parentTagId: string & tags.Format<"uuid">;

    /** Details for creating a new child tag relationship */
    body: IEnterpriseLmsContentTagHierarchy.ICreate;
  };
  export type Body = IEnterpriseLmsContentTagHierarchy.ICreate;
  export type Response = IEnterpriseLmsContentTagHierarchy;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/contentTags/${encodeURIComponent(props.parentTagId ?? "null")}/childTags`;
  export const random = (): IEnterpriseLmsContentTagHierarchy =>
    typia.random<IEnterpriseLmsContentTagHierarchy>();
  export const simulate = (
    connection: IConnection,
    props: createChildTag.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createChildTag.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("parentTagId")(() => typia.assert(props.parentTagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List child tags by parent tag ID.
 *
 * List child tags under a parent content tag with pagination and filtering.
 *
 * Supports hierarchical browsing and management of the content tagging system.
 *
 * Restrictions apply to system administrators to ensure secure handling of tag
 * relationships.
 *
 * The request body supports filter criteria and pagination options.
 *
 * Response contains paginated summaries of child tags for efficient display and
 * navigation.
 *
 * Errors returned for invalid parentTagId or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.parentTagId Unique identifier of the parent content tag
 * @param props.body Criteria to filter and paginate child tags
 * @path /enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags
 * @accessor api.functional.enterpriseLms.systemAdmin.contentTags.childTags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent content tag */
    parentTagId: string & tags.Format<"uuid">;

    /** Criteria to filter and paginate child tags */
    body: IEnterpriseLmsContentTagChild.IRequest;
  };
  export type Body = IEnterpriseLmsContentTagChild.IRequest;
  export type Response = IPageIEnterpriseLmsContentTagChild.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/contentTags/${encodeURIComponent(props.parentTagId ?? "null")}/childTags`;
  export const random = (): IPageIEnterpriseLmsContentTagChild.ISummary =>
    typia.random<IPageIEnterpriseLmsContentTagChild.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("parentTagId")(() => typia.assert(props.parentTagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get child tag detail by parent and child tag IDs.
 *
 * Retrieve detailed information of a child tag under a parent content tag.
 *
 * This endpoint supports content hierarchy management by fetching the specific
 * child tag association details.
 *
 * Access is secured with system administrator permissions.
 *
 * Errors occur if the IDs are invalid or the relationship does not exist.
 *
 * The response body returns a detailed representation based on the
 * IEnterpriseLmsContentTagChild schema.
 *
 * @param props.connection
 * @param props.parentTagId Unique identifier of the parent content tag
 * @param props.childTagId Unique identifier of the child content tag
 * @path /enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId
 * @accessor api.functional.enterpriseLms.systemAdmin.contentTags.childTags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent content tag */
    parentTagId: string & tags.Format<"uuid">;

    /** Unique identifier of the child content tag */
    childTagId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentTagChild;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/contentTags/${encodeURIComponent(props.parentTagId ?? "null")}/childTags/${encodeURIComponent(props.childTagId ?? "null")}`;
  export const random = (): IEnterpriseLmsContentTagChild =>
    typia.random<IEnterpriseLmsContentTagChild>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("parentTagId")(() => typia.assert(props.parentTagId));
      assert.param("childTagId")(() => typia.assert(props.childTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing child content tag relationship.
 *
 * Updates an existing child tag relationship between a parent tag and its child
 * tag.
 *
 * The endpoint requires path parameters:
 *
 * - ParentTagId: The unique identifier of the parent content tag.
 * - ChildTagId: The unique identifier of the child content tag to update.
 *
 * The request body contains the updated information for the child tag
 * relationship.
 *
 * Only authorized users with systemAdmin, organizationAdmin, or
 * contentCreatorInstructor roles can perform this operation.
 *
 * Errors will be returned if the specified tag relationship does not exist or
 * if the update data violates schema constraints.
 *
 * @param props.connection
 * @param props.parentTagId Parent content tag unique identifier
 * @param props.childTagId Child content tag unique identifier
 * @param props.body Updated child tag relationship details
 * @path /enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId
 * @accessor api.functional.enterpriseLms.systemAdmin.contentTags.childTags.updateChildTagRelationship
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateChildTagRelationship(
  connection: IConnection,
  props: updateChildTagRelationship.Props,
): Promise<updateChildTagRelationship.Response> {
  return true === connection.simulate
    ? updateChildTagRelationship.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateChildTagRelationship.METADATA,
          path: updateChildTagRelationship.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateChildTagRelationship {
  export type Props = {
    /** Parent content tag unique identifier */
    parentTagId: string & tags.Format<"uuid">;

    /** Child content tag unique identifier */
    childTagId: string & tags.Format<"uuid">;

    /** Updated child tag relationship details */
    body: IEnterpriseLmsContentTagHierarchy.IUpdate;
  };
  export type Body = IEnterpriseLmsContentTagHierarchy.IUpdate;
  export type Response = IEnterpriseLmsContentTagHierarchy;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/contentTags/${encodeURIComponent(props.parentTagId ?? "null")}/childTags/${encodeURIComponent(props.childTagId ?? "null")}`;
  export const random = (): IEnterpriseLmsContentTagHierarchy =>
    typia.random<IEnterpriseLmsContentTagHierarchy>();
  export const simulate = (
    connection: IConnection,
    props: updateChildTagRelationship.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateChildTagRelationship.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("parentTagId")(() => typia.assert(props.parentTagId));
      assert.param("childTagId")(() => typia.assert(props.childTagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a child content tag relationship.
 *
 * Permanently removes the child tag relationship between the specified parent
 * tag and child tag.
 *
 * Requires path parameters:
 *
 * - ParentTagId: Unique identifier of the parent content tag.
 * - ChildTagId: Unique identifier of the child content tag.
 *
 * Authorization is limited to systemAdmin, organizationAdmin, and
 * contentCreatorInstructor roles.
 *
 * Error responses occur if the relationship does not exist.
 *
 * This operation performs a hard delete, removing the record from the database
 * without soft deletion.
 *
 * @param props.connection
 * @param props.parentTagId Parent content tag unique identifier
 * @param props.childTagId Child content tag unique identifier
 * @path /enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId
 * @accessor api.functional.enterpriseLms.systemAdmin.contentTags.childTags.eraseChildTagRelationship
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseChildTagRelationship(
  connection: IConnection,
  props: eraseChildTagRelationship.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseChildTagRelationship.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseChildTagRelationship.METADATA,
          path: eraseChildTagRelationship.path(props),
          status: null,
        },
      );
}
export namespace eraseChildTagRelationship {
  export type Props = {
    /** Parent content tag unique identifier */
    parentTagId: string & tags.Format<"uuid">;

    /** Child content tag unique identifier */
    childTagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags/:childTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/contentTags/${encodeURIComponent(props.parentTagId ?? "null")}/childTags/${encodeURIComponent(props.childTagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseChildTagRelationship.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseChildTagRelationship.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("parentTagId")(() => typia.assert(props.parentTagId));
      assert.param("childTagId")(() => typia.assert(props.childTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
