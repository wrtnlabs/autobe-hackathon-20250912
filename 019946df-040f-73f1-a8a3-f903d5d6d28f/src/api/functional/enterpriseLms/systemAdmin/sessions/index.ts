import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsSession } from "../../../../structures/IEnterpriseLmsSession";
import { IPageIEnterpriseLmsSession } from "../../../../structures/IPageIEnterpriseLmsSession";
import { IEnterpriseLmsSessions } from "../../../../structures/IEnterpriseLmsSessions";

/**
 * Create a new user session capturing tenant, user, session token, device
 * information, IP address, and expiration timestamps.
 *
 * Intended for system administrators to manage session lifecycle and support
 * security protocols. The response returns the newly created session record
 * with database timestamps.
 *
 * Validation errors for token conflicts or invalid data formats will result in
 * error responses.
 *
 * @param props.connection
 * @param props.body Session creation data
 * @path /enterpriseLms/systemAdmin/sessions
 * @accessor api.functional.enterpriseLms.systemAdmin.sessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Session creation data */
    body: IEnterpriseLmsSession.ICreate;
  };
  export type Body = IEnterpriseLmsSession.ICreate;
  export type Response = IEnterpriseLmsSession;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/systemAdmin/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/sessions";
  export const random = (): IEnterpriseLmsSession =>
    typia.random<IEnterpriseLmsSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve filtered and paginated list of user sessions.
 *
 * Search and retrieve a list of user sessions with advanced filtering,
 * pagination, and sorting options. This operation is intended for system or
 * tenant administrators to manage active user sessions, review session details
 * such as device info, IP address, and expiry, and support session
 * administrative tasks.
 *
 * The response includes a paginated list of session summaries aligned with the
 * 'enterprise_lms_sessions' database schema. Access is strictly controlled to
 * authorized administrative roles to ensure security.
 *
 * Invalid requests with malformed filter criteria or pagination parameters will
 * respond with descriptive errors.
 *
 * @param props.connection
 * @param props.body Request parameters for session search and pagination
 * @path /enterpriseLms/systemAdmin/sessions
 * @accessor api.functional.enterpriseLms.systemAdmin.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Request parameters for session search and pagination */
    body: IEnterpriseLmsSession.IRequest;
  };
  export type Body = IEnterpriseLmsSession.IRequest;
  export type Response = IPageIEnterpriseLmsSession.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/systemAdmin/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/systemAdmin/sessions";
  export const random = (): IPageIEnterpriseLmsSession.ISummary =>
    typia.random<IPageIEnterpriseLmsSession.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed user session information by session ID.
 *
 * Retrieve detailed information of a user session by its unique ID. This
 * endpoint returns all fields defined in the 'enterprise_lms_sessions' table,
 * including meta information about session validity and client device.
 *
 * Access is limited to users with the 'systemAdmin' role or equivalent tenant
 * administrators due to session data sensitivity.
 *
 * Errors will be returned if session ID is invalid or access is restricted.
 *
 * @param props.connection
 * @param props.id Unique identifier of the user session
 * @path /enterpriseLms/systemAdmin/sessions/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.sessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user session */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsSession;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/systemAdmin/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/sessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSession =>
    typia.random<IEnterpriseLmsSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing LMS user session with new information.
 *
 * Update an active user session in the LMS system. This endpoint modifies
 * session properties like device information, IP address, and expiration
 * timestamp for a specific session ID.
 *
 * This operation requires proper authentication and authorization because it
 * affects user login sessions and security.
 *
 * The enterprise_lms_sessions table tracks session tokens, device metadata, and
 * expiry times. This update ensures continuous session management, enabling
 * session revocation or extension as per business logic.
 *
 * The request body must include fields allowed for update as defined in the
 * IEnterpriseLmsSessions.IUpdate schema. The response body returns the updated
 * session information.
 *
 * Proper error handling includes returning 404 if the session ID is not found,
 * and 403 if unauthorized access occurs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the session to update
 * @param props.body Updated session information
 * @path /enterpriseLms/systemAdmin/sessions/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.sessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the session to update */
    id: string & tags.Format<"uuid">;

    /** Updated session information */
    body: IEnterpriseLmsSessions.IUpdate;
  };
  export type Body = IEnterpriseLmsSessions.IUpdate;
  export type Response = IEnterpriseLmsSessions;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/systemAdmin/sessions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/systemAdmin/sessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsSessions =>
    typia.random<IEnterpriseLmsSessions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a LMS user session permanently.
 *
 * Delete a user session by its unique identifier. This permanently removes the
 * session record from the database, revoking user access.
 *
 * Careful authorization checks must be done before performing this operation.
 *
 * Returns no content upon success. Errors include 404 if session not found and
 * 403 for unauthorized attempts.
 *
 * @param props.connection
 * @param props.id Unique identifier of the session to delete
 * @path /enterpriseLms/systemAdmin/sessions/:id
 * @accessor api.functional.enterpriseLms.systemAdmin.sessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the session to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/sessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/sessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
