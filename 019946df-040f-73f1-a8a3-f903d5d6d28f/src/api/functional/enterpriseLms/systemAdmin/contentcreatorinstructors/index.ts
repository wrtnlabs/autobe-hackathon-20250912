import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Erase a content creator/instructor user account by ID.
 *
 * Delete one content creator or instructor user account by the unique
 * identifier. This operation permanently removes the user record from the
 * system.
 *
 * Security considerations include verifying caller has sufficient permissions,
 * and ensuring that deletion respects multi-tenant data isolation to prevent
 * data leakage across organizations.
 *
 * This operation directly manipulates the
 * enterprise_lms_contentcreatorinstructor table where the user data resides.
 *
 * This hard delete action will remove the data completely and cannot be undone.
 * Related data updates or cascading effects will depend on the underlying DB
 * constraints.
 *
 * If the user does not exist or access is denied, an error response will be
 * returned.
 *
 * No request body is needed, only the path parameter specifying the
 * contentcreatorinstructor ID.
 *
 * Authorized roles can access this endpoint to maintain system integrity and
 * user management.
 *
 * @param props.connection
 * @param props.contentcreatorinstructorId Unique identifier of the content
 *   creator or instructor user to delete
 * @path /enterpriseLms/systemAdmin/contentcreatorinstructors/:contentcreatorinstructorId
 * @accessor api.functional.enterpriseLms.systemAdmin.contentcreatorinstructors.eraseContentcreatorinstructors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseContentcreatorinstructors(
  connection: IConnection,
  props: eraseContentcreatorinstructors.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseContentcreatorinstructors.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseContentcreatorinstructors.METADATA,
          path: eraseContentcreatorinstructors.path(props),
          status: null,
        },
      );
}
export namespace eraseContentcreatorinstructors {
  export type Props = {
    /** Unique identifier of the content creator or instructor user to delete */
    contentcreatorinstructorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/systemAdmin/contentcreatorinstructors/:contentcreatorinstructorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/systemAdmin/contentcreatorinstructors/${encodeURIComponent(props.contentcreatorinstructorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseContentcreatorinstructors.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseContentcreatorinstructors.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentcreatorinstructorId")(() =>
        typia.assert(props.contentcreatorinstructorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
