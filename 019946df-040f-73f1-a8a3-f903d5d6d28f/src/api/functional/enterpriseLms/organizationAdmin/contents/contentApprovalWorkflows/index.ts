import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentApprovalWorkflow } from "../../../../../structures/IEnterpriseLmsContentApprovalWorkflow";
import { IPageIEnterpriseLmsContentApprovalWorkflow } from "../../../../../structures/IPageIEnterpriseLmsContentApprovalWorkflow";

/**
 * Create a new content approval workflow step for specific content.
 *
 * Create a new content approval workflow step for a given content ID.
 *
 * This endpoint allows organization administrators to define new steps in the
 * content approval process, specifying reviewer roles and approval sequence.
 *
 * The operation inserts a new record into the
 * enterprise_lms_content_approval_workflows table with specified step details.
 *
 * Validation of sequence order and reviewer roles should be handled by the
 * backend service layer to ensure workflow consistency.
 *
 * Returns the newly created approval workflow step details upon success.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content to associate with the
 *   new approval workflow step
 * @param props.body Details for creating a new content approval workflow step
 * @path /enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows
 * @accessor api.functional.enterpriseLms.organizationAdmin.contents.contentApprovalWorkflows.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the content to associate with the new approval
     * workflow step
     */
    contentId: string & tags.Format<"uuid">;

    /** Details for creating a new content approval workflow step */
    body: IEnterpriseLmsContentApprovalWorkflow.ICreate;
  };
  export type Body = IEnterpriseLmsContentApprovalWorkflow.ICreate;
  export type Response = IEnterpriseLmsContentApprovalWorkflow;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows`;
  export const random = (): IEnterpriseLmsContentApprovalWorkflow =>
    typia.random<IEnterpriseLmsContentApprovalWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve content approval workflow steps for a given content.
 *
 * Provides a paged view of content approval workflow steps linked to a
 * specified content entry. Users can query, filter, and paginate approval
 * steps, viewing step number, reviewer role, status, and comments per step.
 * This supports the content approval and compliance process. Tenant-based
 * access control applies.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content for approval
 *   workflows
 * @param props.body Parameters for searching and paginating approval workflow
 *   steps
 * @path /enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows
 * @accessor api.functional.enterpriseLms.organizationAdmin.contents.contentApprovalWorkflows.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the content for approval workflows */
    contentId: string & tags.Format<"uuid">;

    /** Parameters for searching and paginating approval workflow steps */
    body: IEnterpriseLmsContentApprovalWorkflow.IRequest;
  };
  export type Body = IEnterpriseLmsContentApprovalWorkflow.IRequest;
  export type Response = IPageIEnterpriseLmsContentApprovalWorkflow.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows`;
  export const random =
    (): IPageIEnterpriseLmsContentApprovalWorkflow.ISummary =>
      typia.random<IPageIEnterpriseLmsContentApprovalWorkflow.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a content approval workflow step by content ID and step ID.
 *
 * Retrieve detailed information about a specific content approval workflow step
 * by content ID and approval workflow ID. This operation facilitates tracking
 * of the multi-stage content approval process within the Enterprise LMS,
 * allowing authorized users such as organization administrators to review
 * approval step statuses and comments.
 *
 * Security considerations mandate that only users with proper roles (e.g.,
 * organizationAdmin) associated with the tenant organization can access this
 * data.
 *
 * The operation accesses the enterprise_lms_content_approval_workflows table
 * and returns detailed information about the approval step, supporting audit
 * and content lifecycle management.
 *
 * This endpoint is critical for content governance and compliance within the
 * multi-tenant LMS environment.
 *
 * If the approval workflow step does not exist for the given contentId and id,
 * the endpoint should return a suitable 404 response.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the target content item
 * @param props.id Unique identifier of the content approval workflow step
 * @path /enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.contents.contentApprovalWorkflows.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target content item */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content approval workflow step */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsContentApprovalWorkflow;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentApprovalWorkflow =>
    typia.random<IEnterpriseLmsContentApprovalWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a content approval workflow step by content ID and step ID.
 *
 * Update an existing content approval workflow step by content ID and approval
 * workflow step ID.
 *
 * Allows organization administrators to modify approval step details such as
 * status, comments, and reviewer role.
 *
 * The operation updates records in the
 * enterprise_lms_content_approval_workflows table associated with the specified
 * content and approval step.
 *
 * Proper validation and authorization ensure workflow correctness and security.
 *
 * Returns the updated approval workflow step details.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content item
 * @param props.id Unique identifier of the content approval workflow step
 * @param props.body Updated content approval workflow step details
 * @path /enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.contents.contentApprovalWorkflows.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the content item */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content approval workflow step */
    id: string & tags.Format<"uuid">;

    /** Updated content approval workflow step details */
    body: IEnterpriseLmsContentApprovalWorkflow.IUpdate;
  };
  export type Body = IEnterpriseLmsContentApprovalWorkflow.IUpdate;
  export type Response = IEnterpriseLmsContentApprovalWorkflow;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsContentApprovalWorkflow =>
    typia.random<IEnterpriseLmsContentApprovalWorkflow>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a content approval workflow step (soft delete) by content ID and step
 * ID.
 *
 * Delete a content approval workflow step by content ID and approval workflow
 * step ID.
 *
 * Performs a soft delete by setting deleted_at timestamp rather than hard
 * deletion, enabling audit trail and recovery.
 *
 * Only users with organizationAdmin role can perform this operation.
 *
 * No response body is returned upon successful deletion.
 *
 * This endpoint is essential for maintaining clean and compliant content
 * approval workflows in the LMS.
 *
 * @param props.connection
 * @param props.contentId Unique identifier of the content item
 * @param props.id Unique identifier of the content approval workflow step to be
 *   deleted
 * @path /enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.contents.contentApprovalWorkflows.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the content item */
    contentId: string & tags.Format<"uuid">;

    /** Unique identifier of the content approval workflow step to be deleted */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/contents/:contentId/contentApprovalWorkflows/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/contents/${encodeURIComponent(props.contentId ?? "null")}/contentApprovalWorkflows/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentId")(() => typia.assert(props.contentId));
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
