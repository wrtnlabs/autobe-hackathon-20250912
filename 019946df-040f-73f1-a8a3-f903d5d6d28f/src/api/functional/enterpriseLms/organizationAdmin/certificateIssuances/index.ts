import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsCertificateIssuance } from "../../../../structures/IEnterpriseLmsCertificateIssuance";
import { IPageIEnterpriseLmsCertificateIssuance } from "../../../../structures/IPageIEnterpriseLmsCertificateIssuance";

/**
 * Create a new certificate issuance record to document that a learner has been
 * awarded a specific certification.
 *
 * This operation accepts data required to record the issuance of a certificate,
 * including learner ID, certification ID, issue date, status, expiration date,
 * and optional business workflow status. The new record links to the learner
 * and certification entities within the Enterprise LMS multi-tenant database.
 *
 * Proper validation ensures referenced learners and certifications exist, and
 * that the combination of learner and certification does not already have an
 * active issuance to prevent duplicates.
 *
 * This endpoint supports operational workflows for certification issuance
 * management and compliance tracking.
 *
 * Authorization requires elevated privileges such as systemAdmin or
 * organizationAdmin roles.
 *
 * On successful creation, the API returns the full certificate issuance record
 * with all details.
 *
 * @param props.connection
 * @param props.body Certificate issuance creation data
 * @path /enterpriseLms/organizationAdmin/certificateIssuances
 * @accessor api.functional.enterpriseLms.organizationAdmin.certificateIssuances.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Certificate issuance creation data */
    body: IEnterpriseLmsCertificateIssuance.ICreate;
  };
  export type Body = IEnterpriseLmsCertificateIssuance.ICreate;
  export type Response = IEnterpriseLmsCertificateIssuance;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/certificateIssuances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/certificateIssuances";
  export const random = (): IEnterpriseLmsCertificateIssuance =>
    typia.random<IEnterpriseLmsCertificateIssuance>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated certificate issuance summaries.
 *
 * Retrieve a filtered and paginated list of certificate issuance records within
 * the enterprise LMS system. This enables administrators to review certificate
 * status, expiration, and related metadata.
 *
 * Only authorized organizationAdmin and systemAdmin roles can access these
 * records due to sensitive information.
 *
 * Supports filtering by learner, certification, status, and date ranges.
 * Pagination and sorting allow managing large datasets effectively.
 *
 * This operation supports compliance auditing and certification management
 * workflows.
 *
 * This search API complements other CRUD operations for certificate issuances,
 * focusing on read and query capabilities required by administrators.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for certificate
 *   issuances
 * @path /enterpriseLms/organizationAdmin/certificateIssuances
 * @accessor api.functional.enterpriseLms.organizationAdmin.certificateIssuances.searchCertificateIssuances
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchCertificateIssuances(
  connection: IConnection,
  props: searchCertificateIssuances.Props,
): Promise<searchCertificateIssuances.Response> {
  return true === connection.simulate
    ? searchCertificateIssuances.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchCertificateIssuances.METADATA,
          path: searchCertificateIssuances.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchCertificateIssuances {
  export type Props = {
    /** Search criteria and pagination parameters for certificate issuances */
    body: IEnterpriseLmsCertificateIssuance.IRequest;
  };
  export type Body = IEnterpriseLmsCertificateIssuance.IRequest;
  export type Response = IPageIEnterpriseLmsCertificateIssuance.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/certificateIssuances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/certificateIssuances";
  export const random = (): IPageIEnterpriseLmsCertificateIssuance.ISummary =>
    typia.random<IPageIEnterpriseLmsCertificateIssuance.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchCertificateIssuances.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchCertificateIssuances.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed certificate issuance information by ID.
 *
 * Retrieve a specific certificate issuance record by its unique identifier.
 *
 * This operation allows retrieving detailed information about a certificate
 * issued to a learner upon successful completion of a certification track or
 * course within the Enterprise LMS. The certificate issuance table tracks issue
 * dates, expiration dates, statuses, and business workflow states, and is
 * linked to learners and certifications in a multi-tenant context.
 *
 * Security considerations include enforcing tenant and user access controls to
 * ensure confidentiality of learner certification data. Only authorized roles
 * such as systemAdmin and organizationAdmin should access this endpoint.
 *
 * This operation relates to the enterprise_lms_certificate_issuances table and
 * returns comprehensive certificate issuance data needed for compliance
 * reporting, learner dashboards, or audit trails.
 *
 * If the specified certificate issuance ID does not exist, the API will return
 * a 404 Not Found error.
 *
 * This operation is read-only and does not modify any data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the certificate issuance record
 * @path /enterpriseLms/organizationAdmin/certificateIssuances/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.certificateIssuances.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the certificate issuance record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsCertificateIssuance;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/certificateIssuances/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/certificateIssuances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsCertificateIssuance =>
    typia.random<IEnterpriseLmsCertificateIssuance>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update certificate issuance record by ID.
 *
 * Update certificate issuance data for a given certificate issuance ID.
 *
 * This operation supports modification of certificate issuance details
 * including issue date, expiration date, status, and any business state
 * information. The update operation requires the certificate issuance ID as a
 * path parameter and the updated data in the request body.
 *
 * It performs validation to ensure the status value is one of the allowed
 * states, and that date fields are in valid ISO 8601 format. Authorization
 * roles such as systemAdmin and organizationAdmin are required for access.
 *
 * Partial updates are supported respecting the schema. Attempts to update
 * non-existent records will return a 404 error.
 *
 * This operation integrates with the enterprise_lms_certificate_issuances table
 * and plays a key role in managing learner certification lifecycle.
 *
 * @param props.connection
 * @param props.id Unique identifier of the certificate issuance record
 * @param props.body Certificate issuance update data
 * @path /enterpriseLms/organizationAdmin/certificateIssuances/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.certificateIssuances.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the certificate issuance record */
    id: string & tags.Format<"uuid">;

    /** Certificate issuance update data */
    body: IEnterpriseLmsCertificateIssuance.IUpdate;
  };
  export type Body = IEnterpriseLmsCertificateIssuance.IUpdate;
  export type Response = IEnterpriseLmsCertificateIssuance;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/certificateIssuances/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/certificateIssuances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IEnterpriseLmsCertificateIssuance =>
    typia.random<IEnterpriseLmsCertificateIssuance>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete certificate issuance record by ID.
 *
 * Delete a specific certificate issuance record by ID.
 *
 * This operation permanently removes a certificate issuance record. It is used
 * for revoking or cleaning up certification data that is no longer valid or
 * required within the Enterprise LMS.
 *
 * Because the enterprise_lms_certificate_issuances table does not implement
 * soft delete fields, this action irreversibly removes the record from the
 * database.
 *
 * Proper authorization is required to prevent unauthorized data loss. System
 * admin and organization admin roles are permitted.
 *
 * If the record does not exist, a 404 Not Found error is returned.
 *
 * Clients should handle this deletion carefully due to its irreversible nature.
 *
 * @param props.connection
 * @param props.id Unique identifier of the certificate issuance record
 * @path /enterpriseLms/organizationAdmin/certificateIssuances/:id
 * @accessor api.functional.enterpriseLms.organizationAdmin.certificateIssuances.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the certificate issuance record */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/certificateIssuances/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/certificateIssuances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
