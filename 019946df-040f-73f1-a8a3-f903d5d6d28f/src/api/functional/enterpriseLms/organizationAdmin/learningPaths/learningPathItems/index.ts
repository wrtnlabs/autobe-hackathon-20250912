import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a learning path item by ID in a specific learning path.
 *
 * This DELETE operation permanently removes the specified learning path item
 * from the learning path identified by learningPathId.
 *
 * It ensures that the item is fully deleted from the database and cannot be
 * recovered.
 *
 * Security considerations require that only authorized users with sufficient
 * role permissions can perform this operation.
 *
 * This entity is linked to the enterprise_lms_learning_path_items table and
 * cascades on tenant deletion.
 *
 * This operation requires exactly the learning path item ID and learning path
 * ID for precise record targeting.
 *
 * Upon deletion, any associations or sequences involving this item in the
 * learning path will be updated accordingly.
 *
 * Errors may occur if the item does not exist or if authorization fails.
 *
 * No request body is required.
 *
 * No response body is returned upon success.
 *
 * @param props.connection
 * @param props.learningPathId Identifier of the learning path
 * @param props.learningPathItemId Identifier of the learning path item to
 *   delete
 * @path /enterpriseLms/organizationAdmin/learningPaths/:learningPathId/learningPathItems/:learningPathItemId
 * @accessor api.functional.enterpriseLms.organizationAdmin.learningPaths.learningPathItems.eraseLearningPathItem
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseLearningPathItem(
  connection: IConnection,
  props: eraseLearningPathItem.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseLearningPathItem.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseLearningPathItem.METADATA,
          path: eraseLearningPathItem.path(props),
          status: null,
        },
      );
}
export namespace eraseLearningPathItem {
  export type Props = {
    /** Identifier of the learning path */
    learningPathId: string & tags.Format<"uuid">;

    /** Identifier of the learning path item to delete */
    learningPathItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/learningPaths/:learningPathId/learningPathItems/:learningPathItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/learningPaths/${encodeURIComponent(props.learningPathId ?? "null")}/learningPathItems/${encodeURIComponent(props.learningPathItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseLearningPathItem.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseLearningPathItem.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("learningPathId")(() => typia.assert(props.learningPathId));
      assert.param("learningPathItemId")(() =>
        typia.assert(props.learningPathItemId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
