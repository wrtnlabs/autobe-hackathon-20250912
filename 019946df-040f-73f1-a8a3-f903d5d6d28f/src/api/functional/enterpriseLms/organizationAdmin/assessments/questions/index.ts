import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsAssessmentQuestion } from "../../../../../structures/IEnterpriseLmsAssessmentQuestion";
import { IPageIEnterpriseLmsAssessmentQuestion } from "../../../../../structures/IPageIEnterpriseLmsAssessmentQuestion";

/**
 * Create a new question for a given assessment.
 *
 * Create a new assessment question under a specified assessment identified by
 * assessmentId.
 *
 * This POST endpoint expects a request body containing the question_text,
 * question_type, and weight properties as defined in the
 * IEnterpriseLmsAssessmentQuestion.ICreate schema.
 *
 * The response returns the newly created assessment question including its
 * unique id and timestamps.
 *
 * Authorization requires roles 'contentCreatorInstructor' or
 * 'organizationAdmin'.
 *
 * Tenant isolation is enforced ensuring the assessment belongs to the caller's
 * organization.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.body Information needed to create a question under an assessment
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId/questions
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.questions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Information needed to create a question under an assessment */
    body: IEnterpriseLmsAssessmentQuestion.ICreate;
  };
  export type Body = IEnterpriseLmsAssessmentQuestion.ICreate;
  export type Response = IEnterpriseLmsAssessmentQuestion;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/questions`;
  export const random = (): IEnterpriseLmsAssessmentQuestion =>
    typia.random<IEnterpriseLmsAssessmentQuestion>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List questions for a specific assessment.
 *
 * Fetch a filtered and paginated list of questions for the assessment
 * identified by assessmentId.
 *
 * Allows clients to search, sort, and paginate through questions belonging to
 * the specified assessment.
 *
 * Only authorized roles (systemAdmin, organizationAdmin) can access this data.
 *
 * This operation returns paginated question summaries optimized for list
 * display.
 *
 * The filter and pagination criteria are specified in the request body.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the parent assessment
 * @param props.body Search criteria and pagination parameters for filtering
 *   assessment questions
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId/questions
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.questions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent assessment */
    assessmentId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for filtering assessment
     * questions
     */
    body: IEnterpriseLmsAssessmentQuestion.IRequest;
  };
  export type Body = IEnterpriseLmsAssessmentQuestion.IRequest;
  export type Response = IPageIEnterpriseLmsAssessmentQuestion.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/questions`;
  export const random = (): IPageIEnterpriseLmsAssessmentQuestion.ISummary =>
    typia.random<IPageIEnterpriseLmsAssessmentQuestion.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed assessment question information.
 *
 * Get detailed information about a single question identified by questionId in
 * the context of assessment identified by assessmentId.
 *
 * Returns all relevant metadata including question text, type, weight, and
 * timestamps.
 *
 * Access is restricted to users with systemAdmin or organizationAdmin roles.
 *
 * This operation returns a detailed question object.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the parent assessment
 * @param props.questionId Unique identifier of the assessment question
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.questions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the assessment question */
    questionId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsAssessmentQuestion;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/questions/${encodeURIComponent(props.questionId ?? "null")}`;
  export const random = (): IEnterpriseLmsAssessmentQuestion =>
    typia.random<IEnterpriseLmsAssessmentQuestion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("questionId")(() => typia.assert(props.questionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update question details for a given assessment.
 *
 * Update an existing question details under a specified assessment.
 *
 * This PUT endpoint requires assessmentId and questionId as path parameters.
 *
 * Request body follows the IEnterpriseLmsAssessmentQuestion.IUpdate schema
 * indicating modifiable properties.
 *
 * Response returns the updated assessment question entity.
 *
 * Authorization requires roles 'contentCreatorInstructor' or
 * 'organizationAdmin'.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.questionId Unique identifier of the question to update
 * @param props.body Properties to update an assessment question
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.questions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the question to update */
    questionId: string & tags.Format<"uuid">;

    /** Properties to update an assessment question */
    body: IEnterpriseLmsAssessmentQuestion.IUpdate;
  };
  export type Body = IEnterpriseLmsAssessmentQuestion.IUpdate;
  export type Response = IEnterpriseLmsAssessmentQuestion;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/questions/${encodeURIComponent(props.questionId ?? "null")}`;
  export const random = (): IEnterpriseLmsAssessmentQuestion =>
    typia.random<IEnterpriseLmsAssessmentQuestion>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("questionId")(() => typia.assert(props.questionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an assessment question.
 *
 * Delete an existing question from an assessment by marking its deleted_at
 * timestamp.
 *
 * This DELETE endpoint targets a question identified by questionId within an
 * assessment identified by assessmentId.
 *
 * Authorization for operation is granted to roles 'contentCreatorInstructor'
 * and 'organizationAdmin'.
 *
 * Tenant isolation is enforced to ensure data security.
 *
 * @param props.connection
 * @param props.assessmentId Unique identifier of the target assessment
 * @param props.questionId Unique identifier of the question to delete
 * @path /enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.assessments.questions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target assessment */
    assessmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the question to delete */
    questionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions/:questionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/assessments/${encodeURIComponent(props.assessmentId ?? "null")}/questions/${encodeURIComponent(props.questionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("assessmentId")(() => typia.assert(props.assessmentId));
      assert.param("questionId")(() => typia.assert(props.questionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
