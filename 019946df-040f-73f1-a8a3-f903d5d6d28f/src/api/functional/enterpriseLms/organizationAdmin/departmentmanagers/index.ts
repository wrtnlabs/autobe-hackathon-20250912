import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsDepartmentManager } from "../../../../structures/IEnterpriseLmsDepartmentManager";
import { IPageIEnterpriseLmsDepartmentmanager } from "../../../../structures/IPageIEnterpriseLmsDepartmentmanager";

/**
 * Search and list department managers with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of department managers within the
 * system.
 *
 * Department managers are users who manage users, content assignments, and
 * budgets within their specific department and tenant organization.
 *
 * This operation supports searching by multiple fields, filtering by status,
 * sorting, and pagination.
 *
 * Security restrictions ensure only authorized users with appropriate roles can
 * access this list.
 *
 * Response includes summary information of department managers for display in
 * administrative user interfaces.
 *
 * This operation requires tenant context to ensure multi-tenant data isolation
 * and proper data segregation.
 *
 * Errors may occur if tenant context is invalid or parameters are malformed.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for filtering department
 *   managers
 * @path /enterpriseLms/organizationAdmin/departmentmanagers
 * @accessor api.functional.enterpriseLms.organizationAdmin.departmentmanagers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for filtering department managers */
    body: IEnterpriseLmsDepartmentManager.IRequest;
  };
  export type Body = IEnterpriseLmsDepartmentManager.IRequest;
  export type Response = IPageIEnterpriseLmsDepartmentmanager.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/departmentmanagers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/departmentmanagers";
  export const random = (): IPageIEnterpriseLmsDepartmentmanager.ISummary =>
    typia.random<IPageIEnterpriseLmsDepartmentmanager.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
