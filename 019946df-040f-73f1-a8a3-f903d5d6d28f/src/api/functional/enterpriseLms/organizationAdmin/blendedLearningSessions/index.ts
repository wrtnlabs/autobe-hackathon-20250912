import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsBlendedLearningSession } from "../../../../structures/IEnterpriseLmsBlendedLearningSession";
import { IPageIEnterpriseLmsBlendedLearningSession } from "../../../../structures/IPageIEnterpriseLmsBlendedLearningSession";

/**
 * Create a new blended learning session specifying all required details such as
 * session type (online, offline, hybrid), title, description, status, and
 * schedule timestamps within tenant boundaries.
 *
 * The operation validates input data with strong schema and business rules
 * compliance, ensuring session uniqueness and proper status assignment.
 *
 * Authorization control restricts creation to authorized user roles.
 *
 * Created sessions may be updated or queried via associated operations for full
 * management lifecycle.
 *
 * @param props.connection
 * @param props.body Creation data for a new blended learning session
 * @path /enterpriseLms/organizationAdmin/blendedLearningSessions
 * @accessor api.functional.enterpriseLms.organizationAdmin.blendedLearningSessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new blended learning session */
    body: IEnterpriseLmsBlendedLearningSession.ICreate;
  };
  export type Body = IEnterpriseLmsBlendedLearningSession.ICreate;
  export type Response = IEnterpriseLmsBlendedLearningSession;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/organizationAdmin/blendedLearningSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/blendedLearningSessions";
  export const random = (): IEnterpriseLmsBlendedLearningSession =>
    typia.random<IEnterpriseLmsBlendedLearningSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of blended learning sessions.
 *
 * Retrieve a filtered and paginated list of blended learning sessions within
 * the tenant organizations. This operation provides advanced search
 * capabilities to find sessions based on criteria such as session type (online,
 * offline, hybrid), status (scheduled, completed, cancelled), and scheduled
 * time ranges.
 *
 * Security enforcement guarantees tenant data isolation so that users only see
 * sessions associated with their tenant. Access is granted only to users
 * authorized under roles such as systemAdmin, organizationAdmin,
 * departmentManager, contentCreatorInstructor, corporateLearner,
 * externalLearner, or guest.
 *
 * This operation operates on the 'enterprise_lms_blended_learning_sessions'
 * table from the Prisma schema, considering all tenant-relevant fields. The
 * response contains summarized session information optimized for listing views,
 * including session type, title, status, and schedule.
 *
 * Validation rules ensure proper format and adherence to business logic.
 * Related operations allow retrieval of session details, creation of new
 * sessions, and updating existing sessions for full lifecycle management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for blended
 *   learning sessions filtering
 * @path /enterpriseLms/organizationAdmin/blendedLearningSessions
 * @accessor api.functional.enterpriseLms.organizationAdmin.blendedLearningSessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for blended learning
     * sessions filtering
     */
    body: IEnterpriseLmsBlendedLearningSession.IRequest;
  };
  export type Body = IEnterpriseLmsBlendedLearningSession.IRequest;
  export type Response = IPageIEnterpriseLmsBlendedLearningSession.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/enterpriseLms/organizationAdmin/blendedLearningSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/enterpriseLms/organizationAdmin/blendedLearningSessions";
  export const random =
    (): IPageIEnterpriseLmsBlendedLearningSession.ISummary =>
      typia.random<IPageIEnterpriseLmsBlendedLearningSession.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a blended learning session by its ID.
 *
 * Retrieve detailed information of a single blended learning session within the
 * tenant organization by specifying the session's unique identifier.
 *
 * This operation accesses the 'enterprise_lms_blended_learning_sessions' table
 * with enforced tenant data isolation and role-based authorization.
 *
 * The response includes fields such as session type (online, offline, hybrid),
 * title, description, scheduled start and end times, actual start and end
 * times, and current status.
 *
 * Input validation requires 'sessionId' path parameter to be a valid UUID.
 * Access restrictions apply according to user roles.
 *
 * Related operations include listing sessions, creating new sessions, and
 * updating existing sessions for comprehensive management.
 *
 * @param props.connection
 * @param props.sessionId Unique identifier of the blended learning session
 * @path /enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.blendedLearningSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the blended learning session */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IEnterpriseLmsBlendedLearningSession;

  export const METADATA = {
    method: "GET",
    path: "/enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/blendedLearningSessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IEnterpriseLmsBlendedLearningSession =>
    typia.random<IEnterpriseLmsBlendedLearningSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing blended learning session by its ID.
 *
 * Update details of an existing blended learning session by specifying its
 * unique session ID and providing updated fields in the request body.
 *
 * This operation enforces strict tenant isolation and comprehensive role-based
 * access control for security.
 *
 * Validation ensures sessionId is a valid UUID and requested changes respect
 * lifecycle and scheduling rules.
 *
 * Related API operations enable session creation, detailed retrieval, and
 * listing for full session management.
 *
 * @param props.connection
 * @param props.sessionId Unique identifier of the blended learning session to
 *   update
 * @param props.body Update data for the blended learning session
 * @path /enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.blendedLearningSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the blended learning session to update */
    sessionId: string & tags.Format<"uuid">;

    /** Update data for the blended learning session */
    body: IEnterpriseLmsBlendedLearningSession.IUpdate;
  };
  export type Body = IEnterpriseLmsBlendedLearningSession.IUpdate;
  export type Response = IEnterpriseLmsBlendedLearningSession;

  export const METADATA = {
    method: "PUT",
    path: "/enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/enterpriseLms/organizationAdmin/blendedLearningSessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IEnterpriseLmsBlendedLearningSession =>
    typia.random<IEnterpriseLmsBlendedLearningSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific blended learning session by ID.
 *
 * Permanently delete a blended learning session identified by its sessionId
 * from the Enterprise LMS.
 *
 * Only systemAdmin and organizationAdmin roles can perform this operation.
 *
 * This operation performs a hard delete, removing the record entirely from the
 * enterprise_lms_blended_learning_sessions table.
 *
 * Clients should handle errors for non-existent sessions or insufficient
 * permissions.
 *
 * @param props.connection
 * @param props.sessionId Unique identifier of the blended learning session to
 *   delete
 * @path /enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId
 * @accessor api.functional.enterpriseLms.organizationAdmin.blendedLearningSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the blended learning session to delete */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/enterpriseLms/organizationAdmin/blendedLearningSessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/enterpriseLms/organizationAdmin/blendedLearningSessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
