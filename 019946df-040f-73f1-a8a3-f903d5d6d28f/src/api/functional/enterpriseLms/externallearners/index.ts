import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsExternalLearner } from "../../../structures/IEnterpriseLmsExternalLearner";

/**
 * Create a new external learner account with required user information
 * including email, password hash, and personal names. The account is associated
 * with a specific tenant for multi-tenant data isolation. The system enforces
 * uniqueness of email within the tenant and initial activation status for
 * proper onboarding.
 *
 * Security constraints require this operation to be performed by
 * unauthenticated or guest users for registration, but the actual permissions
 * and validations depend on tenant and system policy.
 *
 * This operation directly manipulates the enterprise_lms_externallearner table
 * in the database. It performs standard validations internally for email
 * format, password hash security, and enforced tenant association.
 *
 * Errors include duplicate email within the tenant, invalid tenant ID, or
 * constraint violations.
 *
 * Related operations include updating and deleting external learners for
 * account management.
 *
 * Completed creation returns the full external learner entity with identifiers
 * and timestamps.
 *
 * @param props.connection
 * @param props.body External learner creation data
 * @path /enterpriseLms/externallearners
 * @accessor api.functional.enterpriseLms.externallearners.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** External learner creation data */
    body: IEnterpriseLmsExternalLearner.ICreate;
  };
  export type Body = IEnterpriseLmsExternalLearner.ICreate;
  export type Response = IEnterpriseLmsExternalLearner;

  export const METADATA = {
    method: "POST",
    path: "/enterpriseLms/externallearners",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/enterpriseLms/externallearners";
  export const random = (): IEnterpriseLmsExternalLearner =>
    typia.random<IEnterpriseLmsExternalLearner>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
