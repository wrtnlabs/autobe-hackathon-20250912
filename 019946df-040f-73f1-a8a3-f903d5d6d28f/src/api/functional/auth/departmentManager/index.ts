import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsDepartmentManager } from "../../../structures/IEnterpriseLmsDepartmentManager";

/**
 * Create and authorize a new department manager user account according to
 * enterpriseLms schema.
 *
 * Registers a new department manager account for the tenant organization. This
 * operation stores the email, hashed password, name, and initializes the
 * account status. Upon successful creation, JWT tokens are issued to authorize
 * access. The department manager role represents users who manage users and
 * content within their departments, so this operation is foundational for
 * establishing authenticated department managers within a multi-tenant system.
 * The Prisma table 'enterprise_lms_departmentmanager' is used to store user
 * records including 'email', 'password_hash', 'first_name', 'last_name', and
 * status tracking with 'status'. This endpoint is public and requires no prior
 * authentication.
 *
 * @param props.connection
 * @param props.body Department Manager account creation request
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentManager/join
 * @accessor api.functional.auth.departmentManager.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Department Manager account creation request */
    body: IEnterpriseLmsDepartmentManager.ICreate;
  };
  export type Body = IEnterpriseLmsDepartmentManager.ICreate;
  export type Response = IEnterpriseLmsDepartmentManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentManager/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentManager/join";
  export const random = (): IEnterpriseLmsDepartmentManager.IAuthorized =>
    typia.random<IEnterpriseLmsDepartmentManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh authentication tokens for department manager.
 *
 * Refreshes the authentication tokens for a logged-in department manager to
 * maintain session validity and authorization. Utilizes the
 * 'enterprise_lms_sessions' table to verify and renew the session, issuing new
 * JWT tokens accordingly. Ensures continued secure access without requiring
 * re-login for token expiration. This operation is part of the standard
 * authentication lifecycle for member-kind users and is scoped to the
 * 'departmentManager' role and tenant. It enhances security by enforcing strict
 * session management and token refresh.
 *
 * @param props.connection
 * @param props.body Token refresh request with valid refresh token
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentManager/refresh
 * @accessor api.functional.auth.departmentManager.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Token refresh request with valid refresh token */
    body: IEnterpriseLmsDepartmentManager.IRefresh;
  };
  export type Body = IEnterpriseLmsDepartmentManager.IRefresh;
  export type Response = IEnterpriseLmsDepartmentManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentManager/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentManager/refresh";
  export const random = (): IEnterpriseLmsDepartmentManager.IAuthorized =>
    typia.random<IEnterpriseLmsDepartmentManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate department manager user and issue JWT tokens.
 *
 * Authenticates an existing department manager user via email and password.
 * Returns JWT tokens upon successful credential verification. This operation
 * accesses the 'enterprise_lms_departmentmanager' table to validate credentials
 * securely with hashed passwords in 'password_hash'. It is public and intended
 * for users classified as member-kind for the departmentManager role. Ensures
 * secure session creation and authorization token management following
 * successful login.
 *
 * @param props.connection
 * @param props.body Login request containing department manager credentials
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentManager/login
 * @accessor api.functional.auth.departmentManager.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login request containing department manager credentials */
    body: IEnterpriseLmsDepartmentManager.ILogin;
  };
  export type Body = IEnterpriseLmsDepartmentManager.ILogin;
  export type Response = IEnterpriseLmsDepartmentManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentManager/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentManager/login";
  export const random = (): IEnterpriseLmsDepartmentManager.IAuthorized =>
    typia.random<IEnterpriseLmsDepartmentManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
