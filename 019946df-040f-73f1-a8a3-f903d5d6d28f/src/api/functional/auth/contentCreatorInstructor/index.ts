import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEnterpriseLmsContentCreatorInstructor } from "../../../structures/IEnterpriseLmsContentCreatorInstructor";

/**
 * Create a new contentCreatorInstructor account and issue authorization tokens.
 *
 * Registers a new Content Creator/Instructor account for the tenant
 * organization. Requires email, hashed password, and basic personal details as
 * per the enterprise_lms_contentcreatorinstructor schema. Upon success, returns
 * authorized tokens for immediate session start and secure access.
 *
 * The operation directly affects the enterprise_lms_contentcreatorinstructor
 * table in the database, creating a new user record linked to the tenant with
 * the provided details and default active status.
 *
 * Security measures include password hashing, input validation, and checks
 * against existing email to prevent duplicates.
 *
 * This operation is part of the member authentication flow allowing full access
 * to content creation features after registration.
 *
 * Post-registration, the user may use the login endpoint to authenticate in
 * subsequent sessions.
 *
 * @param props.connection
 * @param props.body Content Creator/Instructor join request payload
 * @setHeader token.access Authorization
 *
 * @path /auth/contentCreatorInstructor/join
 * @accessor api.functional.auth.contentCreatorInstructor.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Content Creator/Instructor join request payload */
    body: IEnterpriseLmsContentCreatorInstructor.ICreate;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.ICreate;
  export type Response = IEnterpriseLmsContentCreatorInstructor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/contentCreatorInstructor/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/contentCreatorInstructor/join";
  export const random =
    (): IEnterpriseLmsContentCreatorInstructor.IAuthorized =>
      typia.random<IEnterpriseLmsContentCreatorInstructor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate contentCreatorInstructor and issue authorization tokens.
 *
 * Authenticate an existing Content Creator/Instructor using email and password.
 * Validates credentials against stored hashed password in
 * enterprise_lms_contentcreatorinstructor table.
 *
 * Upon successful login, returns JWT authorization tokens for session
 * management and secured API access.
 *
 * Security mechanisms involve hashing verification, protection against brute
 * force attacks, and audit logging.
 *
 * This endpoint forms the primary login method for contentCreatorInstructor
 * role users in the system.
 *
 * Users registering via the join endpoint will use this operation for
 * subsequent authentications.
 *
 * @param props.connection
 * @param props.body Content Creator/Instructor login request payload
 * @setHeader token.access Authorization
 *
 * @path /auth/contentCreatorInstructor/login
 * @accessor api.functional.auth.contentCreatorInstructor.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Content Creator/Instructor login request payload */
    body: IEnterpriseLmsContentCreatorInstructor.ILogin;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.ILogin;
  export type Response = IEnterpriseLmsContentCreatorInstructor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/contentCreatorInstructor/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/contentCreatorInstructor/login";
  export const random =
    (): IEnterpriseLmsContentCreatorInstructor.IAuthorized =>
      typia.random<IEnterpriseLmsContentCreatorInstructor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh authorization token for contentCreatorInstructor.
 *
 * Renew JWT access tokens using a valid refresh token for
 * contentCreatorInstructor role. Keeps the session alive and secure without
 * reauthentication.
 *
 * Validates the refresh token's integrity, expiry, and association with the
 * user in enterprise_lms_contentcreatorinstructor.
 *
 * Returns new access and refresh tokens for continued access.
 *
 * This API is crucial for secure session management in multi-tenant
 * environments.
 *
 * Usage complements join and login endpoints in the complete authentication
 * framework.
 *
 * @param props.connection
 * @param props.body Token refresh request payload for contentCreatorInstructor
 * @setHeader token.access Authorization
 *
 * @path /auth/contentCreatorInstructor/refresh
 * @accessor api.functional.auth.contentCreatorInstructor.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Token refresh request payload for contentCreatorInstructor */
    body: IEnterpriseLmsContentCreatorInstructor.IRefresh;
  };
  export type Body = IEnterpriseLmsContentCreatorInstructor.IRefresh;
  export type Response = IEnterpriseLmsContentCreatorInstructor.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/contentCreatorInstructor/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/contentCreatorInstructor/refresh";
  export const random =
    (): IEnterpriseLmsContentCreatorInstructor.IAuthorized =>
      typia.random<IEnterpriseLmsContentCreatorInstructor.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
