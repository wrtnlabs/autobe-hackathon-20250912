import { tags } from "typia";

/**
 * Certification expiration policies define validity periods, renewal
 * requirements, and notification timing for certifications in the Enterprise
 * LMS.
 *
 * Detailed information for tenant-scoped certification expiration management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsCertificationExpiration = {
  /** Primary Key as UUID identifier. */
  id: string & tags.Format<"uuid">;

  /**
   * Certification ID linked to this expiration policy. Referenced from the
   * certifications table.
   */
  certification_id: string & tags.Format<"uuid">;

  /**
   * Expiration period in days after certificate issuance. Indicates how long
   * the certification is valid.
   */
  expiration_period_days: number & tags.Type<"int32">;

  /** Indicates if the certification requires renewal after expiration. */
  renewal_required: boolean;

  /**
   * Notification period in days before expiration. Used to alert learners and
   * admins.
   */
  notification_period_days: number & tags.Type<"int32">;

  /** Timestamp when this policy record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this policy record was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEnterpriseLmsCertificationExpiration {
  /**
   * Request payload for listing and filtering certification expirations.
   *
   * Includes pagination parameters and optional filters.
   */
  export type IRequest = {
    /**
     * Page number starting from 1.
     *
     * @default 1
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of items per page.
     *
     * @default 20
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Filter by certification ID. */
    certification_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by renewal required flag. */
    renewal_required?: boolean | undefined;
  };

  /** Request body for creating a new certification expiration policy. */
  export type ICreate = {
    /** Certification ID this expiration policy is linked to. */
    certification_id: string & tags.Format<"uuid">;

    /** Expiration period in days after certificate issuance. */
    expiration_period_days: number & tags.Type<"int32">;

    /** Specifies whether renewal is required. Must be true or false. */
    renewal_required: boolean;

    /** Number of days prior to expiration when notifications are sent. */
    notification_period_days: number & tags.Type<"int32">;
  };

  /**
   * Request body for updating an existing certification expiration policy.
   * All fields optional to allow partial updates.
   */
  export type IUpdate = {
    /** Expiration period in days after certificate issuance. */
    expiration_period_days?: (number & tags.Type<"int32">) | undefined;

    /** Specifies whether renewal is required. */
    renewal_required?: boolean | undefined;

    /** Number of days prior to expiration for sending notifications. */
    notification_period_days?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary representation of certification expiration policies including
   * expiration periods, renewal requirements, and notification timings.
   */
  export type ISummary = {
    /** Primary Key. */
    id: string & tags.Format<"uuid">;

    /**
     * Number of days after certification issuance when the certification
     * will expire.
     */
    expiration_period_days: number & tags.Type<"int32">;

    /** Indicates if renewal is required after certification expires. */
    renewal_required: boolean;

    /**
     * Number of days prior to expiration when notifications should be sent
     * to learners and administrators.
     */
    notification_period_days: number & tags.Type<"int32">;
  };
}
