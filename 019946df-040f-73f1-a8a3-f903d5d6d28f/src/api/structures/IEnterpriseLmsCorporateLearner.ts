import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Corporate learner user entity represents learners who enroll and complete
 * courses, track progress, and access dashboards within a tenant organization.
 * Contains login credentials, personal information, status, and auditing
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsCorporateLearner = {
  /** Primary Key of the corporate learner */
  id: string & tags.Format<"uuid">;

  /** Tenant organization identifier */
  tenant_id: string & tags.Format<"uuid">;

  /** Unique email address for login and communications */
  email: string;

  /** Hashed password for authentication */
  password_hash: string;

  /** First name of the corporate learner */
  first_name: string;

  /** Last name of the corporate learner */
  last_name: string;

  /** Current status of the corporate learner account (e.g., active, suspended) */
  status: string;

  /** Record creation timestamp */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp */
  updated_at: string & tags.Format<"date-time">;

  /** Optional soft delete timestamp */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsCorporateLearner {
  /**
   * Payload to register a new corporate learner account.
   *
   * Clients provide essential data for account registration.
   *
   * Passwords should be hashed server-side, so input is raw password.
   */
  export type ICreate = {
    /**
     * Tenant organization identifier.
     *
     * UUID string indicating which tenant the learner belongs to.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Email address for login and communications.
     *
     * Must be a valid email and unique within the tenant.
     */
    email: string;

    /** Raw password string. Server must hash before storing in DB. */
    password: string;

    /** First name of the corporate learner. */
    first_name: string;

    /** Last name of the corporate learner. */
    last_name: string;
  };

  /**
   * Authorized response including JWT token information after authentication.
   *
   * Contains the user's public data and auth tokens.
   *
   * Omits sensitive fields like password_hash.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated corporate learner. */
    id: string & tags.Format<"uuid">;

    /** Tenant organization ID to which the user belongs. */
    tenant_id: string & tags.Format<"uuid">;

    /** Email address of the authenticated corporate learner. */
    email: string;

    /** Hashed password for authentication */
    password_hash: string;

    /** First name. */
    first_name: string;

    /** Last name. */
    last_name: string;

    /** Status of the account. */
    status: string;

    /** Timestamp when the user was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user data was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Optional soft delete timestamp */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request payload containing credentials.
   *
   * Clients provide email and raw password.
   */
  export type ILogin = {
    /** Email address of the learner. */
    email: string;

    /** Raw password string. */
    password: string;
  };

  /**
   * Refresh token request payload.
   *
   * Used to renew access tokens without credentials.
   */
  export type IRequestRefresh = {
    /** JWT refresh token. */
    refresh_token: string;
  };

  /** Parameters for filtering and paginating corporate learner users. */
  export type IRequest = {
    /** Optional page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional limit of records per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional search string for filtering learners. */
    search?: string | null | undefined;

    /** Optional status filter, e.g., 'active', 'suspended'. */
    status?: string | null | undefined;
  };

  /**
   * Update payload for modifying properties of a corporate learner. All
   * properties are optional, allowing partial updates.
   */
  export type IUpdate = {
    /** Unique email address for login and communications */
    email?: string | undefined;

    /** Hashed password for authentication */
    password_hash?: string | undefined;

    /** First name of the corporate learner */
    first_name?: string | undefined;

    /** Last name of the corporate learner */
    last_name?: string | undefined;

    /**
     * Current status of the corporate learner account (e.g., active,
     * suspended)
     */
    status?: string | undefined;
  };

  /**
   * Summary for Corporate Learner user, providing essential identifying
   * information for list views.
   */
  export type ISummary = {
    /** Unique identifier for the corporate learner. */
    id: string & tags.Format<"uuid">;

    /** Email address of the learner. */
    email: string;

    /** First name of the corporate learner. */
    first_name: string;

    /** Last name of the corporate learner. */
    last_name: string;

    /**
     * Current status of the corporate learner (e.g., 'active',
     * 'suspended').
     */
    status: string;
  };
}
