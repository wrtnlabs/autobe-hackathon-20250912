import { tags } from "typia";

/**
 * Content tag entity used to classify and organize materials within the
 * Enterprise LMS.
 *
 * Each tag possesses a unique code and human-readable name, optionally
 * accompanied by a descriptive text to aid in content categorization and
 * discovery.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsContentTag = {
  /**
   * Primary Key.
   *
   * Unique identifier for the content tag.
   */
  id: string;

  /**
   * Unique identifying code for the tag.
   *
   * This code is used as the primary reference for the tag entity in the
   * system.
   */
  code: string;

  /**
   * Display name of the tag.
   *
   * This is the human-readable name used in the application UI and content
   * categorization.
   */
  name: string;

  /**
   * Optional descriptive information about the tag's purpose.
   *
   * Provides additional context and information to administrators and users.
   */
  description?: string | null | undefined;
};
export namespace IEnterpriseLmsContentTag {
  /**
   * Request for filtering and paginating content tags.
   *
   * Includes search text and filters on code, name, and description.
   *
   * Supports pagination via page and limit fields.
   *
   * Allows ordering results by a specified property and direction.
   */
  export type IRequest = {
    /** Search text typically used in code, name or description fields */
    search?: string | null | undefined;

    /** Filter by exact or partial code match */
    code?: string | null | undefined;

    /** Filter by partial or full name match */
    name?: string | null | undefined;

    /** Filter by partial or full description */
    description?: string | null | undefined;

    /** Page number for pagination starting from 1 */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit records per page */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sort by property name */
    order_by?: string | null | undefined;

    /** Sort direction ascending or descending */
    order_direction?: string | null | undefined;
  };

  /**
   * Request payload for creating a new content tag.
   *
   * Includes mandatory code and name properties, with optional description to
   * provide further context.
   */
  export type ICreate = {
    /**
     * Unique identifying code for the tag.
     *
     * Required when creating a new content tag. Must be unique.
     */
    code: string;

    /**
     * Display name of the tag.
     *
     * Required when creating a new content tag.
     */
    name: string;

    /**
     * Optional descriptive information about the tag's purpose.
     *
     * Null or omitted when not provided.
     */
    description?: string | null | undefined;
  };

  /**
   * Request payload for updating an existing content tag.
   *
   * Allows partial update with optional code, name, and description
   * properties, all nullable for clear setting of values.
   */
  export type IUpdate = {
    /**
     * Unique identifying code for the tag.
     *
     * Optional for updates; must maintain uniqueness if provided.
     */
    code?: string | null | undefined;

    /**
     * Display name of the tag.
     *
     * Optional for updates.
     */
    name?: string | null | undefined;

    /**
     * Optional descriptive information about the tag's purpose.
     *
     * Nullable to allow clearing or setting description.
     */
    description?: string | null | undefined;
  };

  /** Summary information of a content tag. */
  export type ISummary = {
    /**
     * Unique identifier of the tag.
     *
     * UUID format.
     */
    id: string & tags.Format<"uuid">;

    /** Unique identifying code for the tag. */
    code: string;

    /** Display name of the tag. */
    name: string;

    /** Optional description of the tag's purpose. */
    description?: string | null | undefined;
  };
}
