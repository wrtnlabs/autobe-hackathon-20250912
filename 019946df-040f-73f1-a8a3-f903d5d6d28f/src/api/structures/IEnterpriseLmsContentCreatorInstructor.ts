import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Content Creator / Instructor users who create and manage course content and
 * learner progress. Tenant-isolated and limited to owned content scope.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsContentCreatorInstructor = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Tenant organization identifier. {@link enterprise_lms_tenants.id}. */
  tenant_id: string & tags.Format<"uuid">;

  /** Unique email address for login and communications. */
  email: string & tags.Format<"email">;

  /** Hashed password for authentication. */
  password_hash: string;

  /** First name of the content creator or instructor. */
  first_name: string;

  /** Last name of the content creator or instructor. */
  last_name: string;

  /**
   * Current status of the content creator/instructor account (e.g., active,
   * suspended).
   */
  status: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Optional soft delete timestamp. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsContentCreatorInstructor {
  /**
   * Payload to register a new enterprise LMS content creator or instructor
   * user.
   */
  export type ICreate = {
    /**
     * Tenant organization identifier. {
     *
     * UUID identifying the tenant organization to which the user belongs.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Unique email address for login and communications.
     *
     * Ensures uniqueness and is mandatory for user identification.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for authentication.
     *
     * Raw passwords are disallowed; hashing must be performed prior to
     * submission.
     */
    password_hash: string;

    /** First name of the content creator or instructor. */
    first_name: string;

    /** Last name of the content creator or instructor. */
    last_name: string;

    /**
     * Current status of the content creator/instructor account.
     *
     * Typically "active" upon account creation unless otherwise specified.
     */
    status: string;
  };

  /**
   * Login request body for Content Creator/Instructor user.
   *
   * Includes email and plain text password for authentication.
   */
  export type ILogin = {
    /** Email address for login. */
    email: string;

    /** Plain text password for login. */
    password: string;
  };

  /**
   * Refresh token request body for Content Creator/Instructor user.
   *
   * Contains valid refresh token string.
   */
  export type IRefresh = {
    /** Refresh token for JWT. */
    refresh_token: string;
  };

  /**
   * Authorization response for Content Creator/Instructor containing user
   * info and JWT tokens.
   *
   * Includes all necessary properties to manage authentication and
   * authorization state.
   */
  export type IAuthorized = {
    /** Primary key identifier of the Content Creator/Instructor user. */
    id: string & tags.Format<"uuid">;

    /** Tenant organization identifier. */
    tenant_id: string & tags.Format<"uuid">;

    /** Unique email address for login and communications. */
    email: string;

    /** Hashed password for authentication. */
    password_hash: string;

    /** First name of the content creator or instructor. */
    first_name: string;

    /** Last name of the content creator or instructor. */
    last_name: string;

    /** Current status of the content creator/instructor account. */
    status: string;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Record last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** Optional soft delete timestamp. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Parameters for filtering and paginating content creator/instructor users. */
  export type IRequest = {
    /**
     * Optional page number for pagination.
     *
     * Should be a positive integer (uint32).
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional limit of records per page.
     *
     * Recommended default value is 100.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional search filter for email or names.
     *
     * Supports partial matching.
     */
    search?: string | null | undefined;

    /** Optional filter by status (e.g., active, suspended). */
    status?: string | null | undefined;
  };

  /** Properties that may be updated on a content creator/instructor user. */
  export type IUpdate = {
    /**
     * Optional tenant organization ID.
     *
     * UUID identifying tenant; typically immutable after creation.
     */
    tenant_id?: string | null | undefined;

    /**
     * Optional unique email address for login and communications.
     *
     * Changes may require re-validation of uniqueness.
     */
    email?: string | null | undefined;

    /**
     * Optional hashed password for authentication.
     *
     * Raw passwords are disallowed; hash required.
     */
    password_hash?: string | null | undefined;

    /** Optional first name update. */
    first_name?: string | null | undefined;

    /** Optional last name update. */
    last_name?: string | null | undefined;

    /** Optional account status update. */
    status?: string | null | undefined;
  };

  /**
   * Summary for Content Creator / Instructor user, providing essential
   * identifying information for list views.
   */
  export type ISummary = {
    /** Unique identifier for the content creator/instructor. */
    id: string & tags.Format<"uuid">;

    /** Email address of the user. */
    email: string;

    /** First name of the content creator/instructor. */
    first_name: string;

    /** Last name of the content creator/instructor. */
    last_name: string;

    /** Current status of the user (e.g., 'active', 'suspended'). */
    status: string;
  };
}
