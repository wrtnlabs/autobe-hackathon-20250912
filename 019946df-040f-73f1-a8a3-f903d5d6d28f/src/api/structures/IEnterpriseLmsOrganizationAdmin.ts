import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Organization Administrator users who manage users, roles, content approval,
 * configurations, and billing within their own organization. Tenant-isolated
 * for data security.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEnterpriseLmsOrganizationAdmin = {
  /**
   * Primary Key.
   *
   * Unique identifier for the Organization Administrator.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Tenant organization identifier.
   *
   * References the tenant organization this administrator belongs to.
   */
  tenant_id: string & tags.Format<"uuid">;

  /**
   * Unique email address used for login and communications.
   *
   * Must be a valid email format.
   */
  email: string;

  /**
   * Hashed password for secure authentication.
   *
   * Stored as a hashed string; never expose or accept in plain text.
   */
  password_hash: string;

  /**
   * First name of the organization administrator.
   *
   * Represents the given name of the individual.
   */
  first_name: string;

  /**
   * Last name of the organization administrator.
   *
   * Represents the family name of the individual.
   */
  last_name: string;

  /**
   * Status of the account, e.g., active, suspended.
   *
   * Must be a valid string representing the current account state.
   */
  status: string;

  /**
   * Record creation timestamp.
   *
   * Format: ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * Format: ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft delete timestamp.
   *
   * Nullable ISO 8601 date-time string; null means not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEnterpriseLmsOrganizationAdmin {
  /**
   * Request body to create a new organization administrator user.
   *
   * Includes tenant ID, email, plaintext password to be hashed, first/last
   * name. The system will assign status defaults and timestamps.
   *
   * Sensitive fields like 'deleted_at' or 'status' typically handled
   * internally.
   *
   * NOTE: 'password_hash' is hashed at back-end; client request contains
   * plain password.
   */
  export type ICreate = {
    /** Tenant organization identifier (UUID). */
    tenant_id: string & tags.Format<"uuid">;

    /** Email address for the account (must be unique within tenant). */
    email: string & tags.Format<"email">;

    /** Plaintext password; will be hashed securely by the server. */
    password: string;

    /** First name for organizational identification */
    first_name: string;

    /** Last name for organizational identification */
    last_name: string;

    /** User status, if required. */
    status?: string | undefined;
  };

  /**
   * Request body to login as organization administrator.
   *
   * Email and plaintext password required for credential verification.
   */
  export type ILogin = {
    /** Email address for login. */
    email: string & tags.Format<"email">;

    /** Plaintext password for authentication. */
    password: string;
  };

  /**
   * Request body to refresh JWT tokens.
   *
   * Contains refresh token string obtained from prior authentication.
   */
  export type IRefresh = {
    /** Refresh token string for renewing session access. */
    refresh_token: string;
  };

  /**
   * Authorization response for organization administrator.
   *
   * Includes user ID, email, name, current status, and JWT token info.
   *
   * Tokens include access and refresh tokens managed by the system.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized organization administrator user. */
    id: string & tags.Format<"uuid">;

    /**
     * Tenant organization identifier.
     *
     * References the tenant organization this administrator belongs to.
     */
    tenant_id: string & tags.Format<"uuid">;

    /** User's email address previously used for login and communications. */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for secure authentication.
     *
     * Stored as a hashed string; never expose or accept in plain text.
     */
    password_hash: string;

    /** First name of the authorized user. */
    first_name: string;

    /** Last name of the authorized user. */
    last_name: string;

    /** Current account status (e.g., active, suspended). */
    status: string;

    /**
     * Record creation timestamp.
     *
     * Format: ISO 8601 date-time string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Record last update timestamp.
     *
     * Format: ISO 8601 date-time string.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Optional soft delete timestamp.
     *
     * Nullable ISO 8601 date-time string; null means not deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request type for searching and paginating Organization Administrators.
   * Supports filtering by search strings, status, and tenant scope.
   */
  export type IRequest = {
    /** Page number for pagination; optional. */
    page?: number | null | undefined;

    /** Limit of items per page; optional. */
    limit?: number | null | undefined;

    /**
     * Search string for filtering by email, name, or other properties;
     * optional.
     */
    search?: string | null | undefined;

    /** Filter by account status; optional. */
    status?: string | null | undefined;

    /** Filter by Tenant ID; optional. */
    tenant_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Update request data for Organization Administrator users.
   *
   * All fields are optional and can be used to update user information
   * cautiously. This data structure is used in PATCH or PUT operations for
   * partial/full updates.
   */
  export type IUpdate = {
    /**
     * Unique email address for login and communications.
     *
     * Valid email string.
     */
    email?: string | undefined;

    /**
     * Hashed password for authentication.
     *
     * Input should be a hashed string.
     */
    password_hash?: string | undefined;

    /** First name of the organization administrator. */
    first_name?: string | undefined;

    /** Last name of the organization administrator. */
    last_name?: string | undefined;

    /**
     * Current status of the organization administrator account.
     *
     * Could be 'active', 'suspended', etc.
     */
    status?: string | undefined;

    /**
     * Optional soft delete timestamp.
     *
     * Nullable date-time string or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for an organization administrator user.
   *
   * This includes key fields required for user management and audit listing
   * within tenant scopes.
   *
   * Used in paginated responses for admin user lists and summary views.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier of the organization administrator user.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Tenant organization identifier.
     *
     * Associates the admin with a specific tenant.
     */
    tenant_id: string & tags.Format<"uuid">;

    /**
     * Unique email address for login and communications.
     *
     * Used for login and notifications.
     */
    email: string;

    /**
     * First name of the organization administrator.
     *
     * Displayed in the admin interface and communications.
     */
    first_name: string;

    /**
     * Last name of the organization administrator.
     *
     * Recorded for official purposes.
     */
    last_name: string;

    /**
     * Current status of the organization administrator account (e.g.,
     * active, suspended).
     *
     * Indicates current operational state.
     */
    status: string;

    /**
     * Record creation timestamp.
     *
     * DateTime when the organization administrator was registered.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
