import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId } from "../../../../../providers/putenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { deleteenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId } from "../../../../../providers/deleteenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId";

import { IEnterpriseLmsTenantSettings } from "../../../../../api/structures/IEnterpriseLmsTenantSettings";

@Controller("/enterpriseLms/systemAdmin/tenants/:tenantId/tenantSettings/:id")
export class EnterpriselmsSystemadminTenantsTenantsettingsController {
  /**
   * Update a tenant setting for a specific tenant organization.
   *
   * Update an existing tenant setting for a given tenant organization by the
   * tenantSetting ID.
   *
   * This operation enables modification of branding elements such as logo URIs,
   * primary and secondary colors, custom domain, and CSS overrides tailored for
   * each tenant. The system strictly maintains tenant scoping and integrity
   * during update operations.
   *
   * Security considerations include limiting this API to authorized tenant
   * administrators and system administrators with appropriate permissions.
   * Invalid tenant IDs or setting IDs result in HTTP 404 Not Found.
   *
   * The underlying database entity is enterprise_lms_tenant_settings in the
   * Prisma schema, ensuring all updated data conforms to expected types,
   * validation rules, and business constraints.
   *
   * Clients must supply the full updated tenant settings payload, except for
   * timestamps which are managed automatically by the system.
   *
   * Errors during update (e.g., conflicts, validation failures) will return
   * appropriate HTTP error codes with descriptive messages.
   *
   * Related API operations include fetching tenant settings by ID and creating
   * new tenant settings records.
   *
   * This operation validates uniqueness for tenant-specific custom domain names
   * and branding configurations.
   *
   * @param connection
   * @param tenantId Unique identifier of the target tenant organization
   * @param id Unique identifier of the tenant setting to update.
   * @param body Updated tenant settings information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsTenantSettings.IUpdate,
  ): Promise<IEnterpriseLmsTenantSettings> {
    try {
      return await putenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId({
        systemAdmin,
        tenantId,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a tenant setting for a specific tenant organization.
   *
   * Delete a tenant setting by ID for a specific tenant organization.
   *
   * This operation performs a hard delete, completely removing the tenant
   * setting record from the database. It is irreversible and will cause all
   * associated branding and customization data for this setting to be lost.
   *
   * Access is strictly limited to system administrators and tenants'
   * organization administrators with permissions to manage tenant settings.
   *
   * Failed deletion attempts for non-existent IDs will return HTTP 404 Not
   * Found.
   *
   * Consider other related API operations to manage tenant settings lifecycle.
   *
   * @param connection
   * @param tenantId Unique identifier of the target tenant organization
   * @param id Unique identifier of the tenant setting to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminTenantsTenantIdTenantSettingsId(
        {
          systemAdmin,
          tenantId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
