import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminPaymentTransactions } from "../../../../providers/patchenterpriseLmsSystemAdminPaymentTransactions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminPaymentTransactionsId } from "../../../../providers/getenterpriseLmsSystemAdminPaymentTransactionsId";

import { IPageIEnterpriseLmsPaymentTransaction } from "../../../../api/structures/IPageIEnterpriseLmsPaymentTransaction";
import { IEnterpriseLmsPaymentTransaction } from "../../../../api/structures/IEnterpriseLmsPaymentTransaction";

@Controller("/enterpriseLms/systemAdmin/paymentTransactions")
export class EnterpriselmsSystemadminPaymenttransactionsController {
  /**
   * Search and retrieve a filtered, paginated list of payment transactions from
   * Enterprise LMS. Supports advanced query options for tenant IDs, user IDs,
   * amounts, currency, payment method, and transaction status.
   *
   * Access permissions and data isolation ensure only authorized administrators
   * of the tenant organization can access this information.
   *
   * This operation corresponds to the enterprise_lms_payment_transactions table
   * in the Prisma schema with rich search capabilities.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for payment
   *   transaction filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsPaymentTransaction.IRequest,
  ): Promise<IPageIEnterpriseLmsPaymentTransaction.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminPaymentTransactions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a payment transaction by ID.
   *
   * Retrieve detailed information about a payment transaction by its unique ID
   * in Enterprise LMS. Includes complete transaction data necessary for audit
   * and reconciliation.
   *
   * Access control is based on tenant and system administrator permissions.
   *
   * Linked to the enterprise_lms_payment_transactions table in the Prisma
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the target payment transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsPaymentTransaction> {
    try {
      return await getenterpriseLmsSystemAdminPaymentTransactionsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
