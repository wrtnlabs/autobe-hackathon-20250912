import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminContentsContentIdContentVersions } from "../../../../../providers/patchenterpriseLmsSystemAdminContentsContentIdContentVersions";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminContentsContentIdContentVersionsId } from "../../../../../providers/getenterpriseLmsSystemAdminContentsContentIdContentVersionsId";

import { IPageIEnterpriseLmsContentVersion } from "../../../../../api/structures/IPageIEnterpriseLmsContentVersion";
import { IEnterpriseLmsContentVersion } from "../../../../../api/structures/IEnterpriseLmsContentVersion";

@Controller("/enterpriseLms/systemAdmin/contents/:contentId/contentVersions")
export class EnterpriselmsSystemadminContentsContentversionsController {
  /**
   * Retrieve a paginated list of content versions for a specific content.
   *
   * Fetches historical versions of a specific content item, allowing users to
   * browse, filter, and paginate through previous states. This facilitates
   * content auditing and rollback functions. The request body allows specifying
   * search parameters such as version numbers and timestamps.
   *
   * @param connection
   * @param contentId Unique identifier of the target content
   * @param body Search parameters and pagination options for content versions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentVersion.IRequest,
  ): Promise<IPageIEnterpriseLmsContentVersion.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminContentsContentIdContentVersions(
        {
          systemAdmin,
          contentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a content version by ID.
   *
   * Retrieve detailed information for a single historical content version
   * identified by content UUID and version UUID. This is used for audit,
   * compliance, and content rollback functionality within the Enterprise LMS.
   * No request body is needed, and the full version detail is returned.
   *
   * @param connection
   * @param contentId Unique identifier of the parent content
   * @param id Unique identifier of the content version
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentVersion> {
    try {
      return await getenterpriseLmsSystemAdminContentsContentIdContentVersionsId(
        {
          systemAdmin,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
