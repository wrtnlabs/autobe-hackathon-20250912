import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteenterpriseLmsSystemAdminContentsContentIdContentLocalizationsId } from "../../../../../providers/deleteenterpriseLmsSystemAdminContentsContentIdContentLocalizationsId";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";

@Controller(
  "/enterpriseLms/systemAdmin/contents/:contentId/contentLocalizations/:id",
)
export class EnterpriselmsSystemadminContentsContentlocalizationsController {
  /**
   * Delete a content localization for a given content.
   *
   * Delete a specific content localization associated with a particular
   * content. This operation permanently removes the localization entry from the
   * system.
   *
   * Security: Only authorized users with appropriate permissions to manage
   * content localizations can perform this operation.
   *
   * Relationships: The content localization belongs to a content item
   * identified by contentId. The content in turn is tenant isolated to ensure
   * multi-organizational data security.
   *
   * Validation: Path parameters contentId and id must be valid UUIDs
   * representing existing records.
   *
   * Behavior: This operation performs a hard delete, removing the localization
   * record completely and irreversibly.
   *
   * Related APIs: List all localizations for a content, Add a new localization,
   * Update an existing localization.
   *
   * Errors: Returns 404 if content or localization does not exist, 403 for
   * unauthorized users.
   *
   * @param connection
   * @param contentId Unique identifier of the content
   * @param id Unique identifier of the content localization
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseContentLocalization(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminContentsContentIdContentLocalizationsId(
        {
          systemAdmin,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
