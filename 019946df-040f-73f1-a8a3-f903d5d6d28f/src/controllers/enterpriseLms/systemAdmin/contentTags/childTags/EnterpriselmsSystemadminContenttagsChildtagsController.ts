import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminContentTagsParentTagIdChildTags } from "../../../../../providers/postenterpriseLmsSystemAdminContentTagsParentTagIdChildTags";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminContentTagsParentTagIdChildTags } from "../../../../../providers/patchenterpriseLmsSystemAdminContentTagsParentTagIdChildTags";
import { getenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId } from "../../../../../providers/getenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId";
import { putenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId } from "../../../../../providers/putenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId";
import { deleteenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId } from "../../../../../providers/deleteenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId";

import { IEnterpriseLmsContentTagHierarchy } from "../../../../../api/structures/IEnterpriseLmsContentTagHierarchy";
import { IPageIEnterpriseLmsContentTagChild } from "../../../../../api/structures/IPageIEnterpriseLmsContentTagChild";
import { IEnterpriseLmsContentTagChild } from "../../../../../api/structures/IEnterpriseLmsContentTagChild";

@Controller("/enterpriseLms/systemAdmin/contentTags/:parentTagId/childTags")
export class EnterpriselmsSystemadminContenttagsChildtagsController {
  /**
   * Create a child content tag under a specified parent tag.
   *
   * Creates a new child tag relationship under the specified parent content tag
   * ID.
   *
   * The request requires the parentTagId as a path parameter, which uniquely
   * identifies the parent tag. The request body must include the childTagId,
   * representing the ID of the child content tag to associate.
   *
   * Only users with roles such as systemAdmin, organizationAdmin, or
   * contentCreatorInstructor are authorized to perform this operation to ensure
   * content taxonomy integrity.
   *
   * Validation errors will occur if the parent tag does not exist or the child
   * tag ID is invalid or already linked.
   *
   * @param connection
   * @param parentTagId Unique identifier of the parent content tag
   * @param body Details for creating a new child tag relationship
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createChildTag(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentTagHierarchy.ICreate,
  ): Promise<IEnterpriseLmsContentTagHierarchy> {
    try {
      return await postenterpriseLmsSystemAdminContentTagsParentTagIdChildTags({
        systemAdmin,
        parentTagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List child tags by parent tag ID.
   *
   * List child tags under a parent content tag with pagination and filtering.
   *
   * Supports hierarchical browsing and management of the content tagging
   * system.
   *
   * Restrictions apply to system administrators to ensure secure handling of
   * tag relationships.
   *
   * The request body supports filter criteria and pagination options.
   *
   * Response contains paginated summaries of child tags for efficient display
   * and navigation.
   *
   * Errors returned for invalid parentTagId or unauthorized access attempts.
   *
   * @param connection
   * @param parentTagId Unique identifier of the parent content tag
   * @param body Criteria to filter and paginate child tags
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentTagChild.IRequest,
  ): Promise<IPageIEnterpriseLmsContentTagChild.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminContentTagsParentTagIdChildTags(
        {
          systemAdmin,
          parentTagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get child tag detail by parent and child tag IDs.
   *
   * Retrieve detailed information of a child tag under a parent content tag.
   *
   * This endpoint supports content hierarchy management by fetching the
   * specific child tag association details.
   *
   * Access is secured with system administrator permissions.
   *
   * Errors occur if the IDs are invalid or the relationship does not exist.
   *
   * The response body returns a detailed representation based on the
   * IEnterpriseLmsContentTagChild schema.
   *
   * @param connection
   * @param parentTagId Unique identifier of the parent content tag
   * @param childTagId Unique identifier of the child content tag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":childTagId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedParam("childTagId")
    childTagId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentTagChild> {
    try {
      return await getenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId(
        {
          systemAdmin,
          parentTagId,
          childTagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing child content tag relationship.
   *
   * Updates an existing child tag relationship between a parent tag and its
   * child tag.
   *
   * The endpoint requires path parameters:
   *
   * - ParentTagId: The unique identifier of the parent content tag.
   * - ChildTagId: The unique identifier of the child content tag to update.
   *
   * The request body contains the updated information for the child tag
   * relationship.
   *
   * Only authorized users with systemAdmin, organizationAdmin, or
   * contentCreatorInstructor roles can perform this operation.
   *
   * Errors will be returned if the specified tag relationship does not exist or
   * if the update data violates schema constraints.
   *
   * @param connection
   * @param parentTagId Parent content tag unique identifier
   * @param childTagId Child content tag unique identifier
   * @param body Updated child tag relationship details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":childTagId")
  public async updateChildTagRelationship(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedParam("childTagId")
    childTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentTagHierarchy.IUpdate,
  ): Promise<IEnterpriseLmsContentTagHierarchy> {
    try {
      return await putenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId(
        {
          systemAdmin,
          parentTagId,
          childTagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a child content tag relationship.
   *
   * Permanently removes the child tag relationship between the specified parent
   * tag and child tag.
   *
   * Requires path parameters:
   *
   * - ParentTagId: Unique identifier of the parent content tag.
   * - ChildTagId: Unique identifier of the child content tag.
   *
   * Authorization is limited to systemAdmin, organizationAdmin, and
   * contentCreatorInstructor roles.
   *
   * Error responses occur if the relationship does not exist.
   *
   * This operation performs a hard delete, removing the record from the
   * database without soft deletion.
   *
   * @param connection
   * @param parentTagId Parent content tag unique identifier
   * @param childTagId Child content tag unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":childTagId")
  public async eraseChildTagRelationship(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedParam("childTagId")
    childTagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminContentTagsParentTagIdChildTagsChildTagId(
        {
          systemAdmin,
          parentTagId,
          childTagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
