import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminSecurityAuditLogs } from "../../../../providers/patchenterpriseLmsSystemAdminSecurityAuditLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminSecurityAuditLogsId } from "../../../../providers/getenterpriseLmsSystemAdminSecurityAuditLogsId";

import { IPageIEnterpriseLmsSecurityAuditLog } from "../../../../api/structures/IPageIEnterpriseLmsSecurityAuditLog";
import { IEnterpriseLmsSecurityAuditLog } from "../../../../api/structures/IEnterpriseLmsSecurityAuditLog";

@Controller("/enterpriseLms/systemAdmin/securityAuditLogs")
export class EnterpriselmsSystemadminSecurityauditlogsController {
  /**
   * Search security audit logs with pagination and filters.
   *
   * Search and list security audit log records with detailed filtering, full
   * text search, sorting, and pagination.
   *
   * This operation supports security monitoring dashboards and forensic
   * investigations for compliance teams.
   *
   * It includes filters for tenant ID, user ID, event type, date ranges, and
   * full text search on event details.
   *
   * The response is a paginated list containing summaries of the audit log
   * records.
   *
   * Role-based access control ensures only authorized users can access security
   * logs.
   *
   * The request body supports complex filtering criteria.
   *
   * @param connection
   * @param body Search parameters and pagination for security audit logs
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSecurityAuditLog.IRequest,
  ): Promise<IPageIEnterpriseLmsSecurityAuditLog.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminSecurityAuditLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single security audit log by ID.
   *
   * Retrieve detailed security audit log record by its unique ID.
   *
   * This operation is essential for compliance audits and security incident
   * investigations.
   *
   * The response includes all relevant fields including user ID, tenant ID,
   * event type, event details, and timestamps.
   *
   * The operation maps to the enterprise_lms_security_audit_logs table.
   *
   * Access is restricted to authorized administrative roles.
   *
   * No request body is required.
   *
   * The ID parameter is a UUID representing the target log record.
   *
   * @param connection
   * @param id The unique identifier of the security audit log record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsSecurityAuditLog> {
    try {
      return await getenterpriseLmsSystemAdminSecurityAuditLogsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
