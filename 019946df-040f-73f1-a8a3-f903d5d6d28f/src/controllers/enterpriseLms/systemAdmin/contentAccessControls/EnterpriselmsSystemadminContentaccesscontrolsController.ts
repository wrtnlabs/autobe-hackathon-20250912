import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteenterpriseLmsSystemAdminContentAccessControlsId } from "../../../../providers/deleteenterpriseLmsSystemAdminContentAccessControlsId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

@Controller("/enterpriseLms/systemAdmin/contentAccessControls/:id")
export class EnterpriselmsSystemadminContentaccesscontrolsController {
  /**
   * Delete a content access control entry by ID.
   *
   * Permanently delete a content access control record identified by its unique
   * ID.
   *
   * This operation removes the access control rule from the system immediately.
   * Since the table supports soft deletion with a deleted_at column, this
   * endpoint implements a hard delete, fully erasing the record.
   *
   * Only system administrators are authorized to perform this action to ensure
   * secure management of access control policies within the LMS.
   *
   * The endpoint integrates directly with
   * enterprise_lms_content_access_controls Prisma entity, ensuring
   * tenant-scoped access control management aligns with system security
   * policies.
   *
   * Use caution as this deletion cannot be undone and affects content access
   * behavior system-wide.
   *
   * @param connection
   * @param id Unique identifier of the content access control record to be
   *   deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseContentAccessControl(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminContentAccessControlsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
