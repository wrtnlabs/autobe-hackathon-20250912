import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteenterpriseLmsSystemAdminContentcreatorinstructorsContentcreatorinstructorId } from "../../../../providers/deleteenterpriseLmsSystemAdminContentcreatorinstructorsContentcreatorinstructorId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

@Controller(
  "/enterpriseLms/systemAdmin/contentcreatorinstructors/:contentcreatorinstructorId",
)
export class EnterpriselmsSystemadminContentcreatorinstructorsController {
  /**
   * Erase a content creator/instructor user account by ID.
   *
   * Delete one content creator or instructor user account by the unique
   * identifier. This operation permanently removes the user record from the
   * system.
   *
   * Security considerations include verifying caller has sufficient
   * permissions, and ensuring that deletion respects multi-tenant data
   * isolation to prevent data leakage across organizations.
   *
   * This operation directly manipulates the
   * enterprise_lms_contentcreatorinstructor table where the user data resides.
   *
   * This hard delete action will remove the data completely and cannot be
   * undone. Related data updates or cascading effects will depend on the
   * underlying DB constraints.
   *
   * If the user does not exist or access is denied, an error response will be
   * returned.
   *
   * No request body is needed, only the path parameter specifying the
   * contentcreatorinstructor ID.
   *
   * Authorized roles can access this endpoint to maintain system integrity and
   * user management.
   *
   * @param connection
   * @param contentcreatorinstructorId Unique identifier of the content creator
   *   or instructor user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseContentcreatorinstructors(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("contentcreatorinstructorId")
    contentcreatorinstructorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminContentcreatorinstructorsContentcreatorinstructorId(
        {
          systemAdmin,
          contentcreatorinstructorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
