import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminBackupRecords } from "../../../../providers/patchenterpriseLmsSystemAdminBackupRecords";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminBackupRecordsId } from "../../../../providers/getenterpriseLmsSystemAdminBackupRecordsId";

import { IPageIEnterpriseLmsBackupRecord } from "../../../../api/structures/IPageIEnterpriseLmsBackupRecord";
import { IEnterpriseLmsBackupRecord } from "../../../../api/structures/IEnterpriseLmsBackupRecord";
import { IEnterpriseLmsBackupRecords } from "../../../../api/structures/IEnterpriseLmsBackupRecords";

@Controller("/enterpriseLms/systemAdmin/backupRecords")
export class EnterpriselmsSystemadminBackuprecordsController {
  /**
   * Search backup records with filters and pagination.
   *
   * Search and retrieve paginated backup record logs for disaster recovery
   * auditing.
   *
   * Supports filters on backup type, status, timestamp ranges, storage
   * locations.
   *
   * Response contains a paginated list summarizing backup metadata.
   *
   * Access is restricted to authorized administrative roles.
   *
   * The enterprise_lms_backup_records table is the data source.
   *
   * No detailed request body schema provided, but request body must be
   * structured as per backend implementation.
   *
   * This operation enables disaster recovery monitoring and compliance.
   *
   * Request body must be provided even if empty to initiate search.
   *
   * Response provides paged results suitable for dashboard display.
   *
   * @param connection
   * @param body Filters and pagination parameters for backup record search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsBackupRecord.IRequest,
  ): Promise<IPageIEnterpriseLmsBackupRecord.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminBackupRecords({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed backup record by ID.
   *
   * Retrieve detailed information for a specific backup record in the
   * Enterprise LMS system.
   *
   * This enables system administrators to view metadata about backup snapshots,
   * including timestamp, type, and storage location used for disaster recovery
   * and compliance verification.
   *
   * Security considerations restrict access to authorized system admins or
   * backup audit roles.
   *
   * The underlying data is sourced from the enterprise_lms_backup_records
   * table, ensuring accurate and complete backup record retrieval.
   *
   * No request body is required as this is a read-only GET operation.
   *
   * Errors include 404 if the record does not exist, and unauthorized 403 if
   * access is insufficient.
   *
   * @param connection
   * @param id Unique identifier of the backup record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsBackupRecords> {
    try {
      return await getenterpriseLmsSystemAdminBackupRecordsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
