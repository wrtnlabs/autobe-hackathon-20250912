import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsSystemAdminPerformanceMetrics } from "../../../../providers/patchenterpriseLmsSystemAdminPerformanceMetrics";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getenterpriseLmsSystemAdminPerformanceMetricsId } from "../../../../providers/getenterpriseLmsSystemAdminPerformanceMetricsId";

import { IPageIEnterpriseLmsPerformanceMetric } from "../../../../api/structures/IPageIEnterpriseLmsPerformanceMetric";
import { IEnterpriseLmsPerformanceMetric } from "../../../../api/structures/IEnterpriseLmsPerformanceMetric";

@Controller("/enterpriseLms/systemAdmin/performanceMetrics")
export class EnterpriselmsSystemadminPerformancemetricsController {
  /**
   * Search and retrieve paginated performance metrics.
   *
   * Retrieves paginated performance metrics with filtering and sorting options.
   *
   * Supports querying by tenant, metric name, and recorded timestamp.
   *
   * This operation is for system monitoring and reporting and is accessible
   * only by authorized users with role systemAdmin or organizationAdmin.
   *
   * The operation corresponds to the enterprise_lms_performance_metrics table
   * and supports advanced search with pagination.
   *
   * The response includes detailed metric data records along with pagination
   * info.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for performance
   *   metrics
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsPerformanceMetric.IRequest,
  ): Promise<IPageIEnterpriseLmsPerformanceMetric> {
    try {
      return await patchenterpriseLmsSystemAdminPerformanceMetrics({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed performance metric by ID.
   *
   * Retrieve detailed information for a single performance metric record by its
   * unique ID.
   *
   * This operation supports monitoring and analysis of system resource
   * utilization and performance trends across tenants or globally.
   *
   * The response includes all recorded metric details such as the metric name,
   * value, timestamp, and associated tenant information if applicable.
   *
   * Security considerations include restricting access to authorized users with
   * roles that permit viewing of performance data.
   *
   * The enterprise_lms_performance_metrics table has a UUID primary key 'id',
   * tenant association, metric name and value, and timestamps.
   *
   * No request body is required; the metric ID is provided as a URL path
   * parameter.
   *
   * Expected errors include 404 for unknown ID and 403 if unauthorized.
   *
   * @param connection
   * @param id The unique identifier of the performance metric record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsPerformanceMetric> {
    try {
      return await getenterpriseLmsSystemAdminPerformanceMetricsId({
        systemAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
