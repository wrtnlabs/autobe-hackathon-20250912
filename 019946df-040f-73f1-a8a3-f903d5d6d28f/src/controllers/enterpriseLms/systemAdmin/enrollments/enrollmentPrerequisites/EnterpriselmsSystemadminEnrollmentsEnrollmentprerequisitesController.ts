import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites } from "../../../../../providers/postenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { patchenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites } from "../../../../../providers/patchenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites";
import { getenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId } from "../../../../../providers/getenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId";
import { putenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId } from "../../../../../providers/putenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId";
import { deleteenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId } from "../../../../../providers/deleteenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId";

import { IEnterpriseLmsEnrollmentPrerequisite } from "../../../../../api/structures/IEnterpriseLmsEnrollmentPrerequisite";
import { IPageIEnterpriseLmsEnrollmentPrerequisite } from "../../../../../api/structures/IPageIEnterpriseLmsEnrollmentPrerequisite";

@Controller(
  "/enterpriseLms/systemAdmin/enrollments/:enrollmentId/enrollmentPrerequisites",
)
export class EnterpriselmsSystemadminEnrollmentsEnrollmentprerequisitesController {
  /**
   * Create a new enrollment prerequisite for a specific enrollment.
   *
   * This operation creates a new Enrollment Prerequisite associated with a
   * specific enrollment entity identified by enrollmentId. It adds a
   * prerequisite course requirement that the learner must satisfy before
   * completing or progressing in the enrollment.
   *
   * Security considerations restrict creation of prerequisites to authorized
   * roles such as organization or system administrators. The prerequisite
   * course is referenced by its UUID and must exist within the tenant's content
   * catalog.
   *
   * The API enforces data integrity by validating that the referenced
   * enrollment and prerequisite course are valid and belong to the same tenant.
   * Failure scenarios include attempts to add duplicate prerequisites or
   * reference invalid courses.
   *
   * This operation complements updating and deleting enrollment prerequisites,
   * forming the complete management of prerequisite course requirements within
   * the enrollment lifecycle.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the target enrollment
   * @param body Information for the new enrollment prerequisite
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createEnrollmentPrerequisite(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string,
    @TypedBody()
    body: IEnterpriseLmsEnrollmentPrerequisite.ICreate,
  ): Promise<IEnterpriseLmsEnrollmentPrerequisite> {
    try {
      return await postenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites(
        {
          systemAdmin,
          enrollmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List enrollment prerequisites for an enrollment.
   *
   * Retrieve a filtered and paginated list of enrollment prerequisites
   * associated with a specific enrollment. This list shows courses that the
   * learner must complete before proceeding.
   *
   * Supports pagination, sorting, and filtering enabling efficient frontend
   * data loading and UI interactions.
   *
   * Tenant isolation and security roles systemAdmin, organizationAdmin, and
   * departmentManager ensure data protection.
   *
   * Response includes enrollment prerequisite summaries optimized for display
   * in overview dashboards or detailed prerequisite views.
   *
   * Underlying table is enterprise_lms_enrollment_prerequisites.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the enrollment to list
   *   prerequisites for
   * @param body Search and pagination parameters for enrollment prerequisites
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsEnrollmentPrerequisite.IRequest,
  ): Promise<IPageIEnterpriseLmsEnrollmentPrerequisite.ISummary> {
    try {
      return await patchenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisites(
        {
          systemAdmin,
          enrollmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific enrollment prerequisite details.
   *
   * Retrieve detailed information about a specific enrollment prerequisite
   * linked to an enrollment.
   *
   * Provides comprehensive data on prerequisite course and linkage to
   * enrollment, supporting detailed audit, UI display, and validation
   * features.
   *
   * Tenant access restrictions and role-based security apply.
   *
   * Database table is enterprise_lms_enrollment_prerequisites.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the enrollment owning the
   *   prerequisite
   * @param enrollmentPrerequisiteId Unique identifier of the enrollment
   *   prerequisite record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":enrollmentPrerequisiteId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string & tags.Format<"uuid">,
    @TypedParam("enrollmentPrerequisiteId")
    enrollmentPrerequisiteId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsEnrollmentPrerequisite> {
    try {
      return await getenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId(
        {
          systemAdmin,
          enrollmentId,
          enrollmentPrerequisiteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an enrollment prerequisite by its ID for a specific enrollment.
   *
   * This operation updates an existing Enrollment Prerequisite linked to a
   * specific enrollment and identified by enrollmentPrerequisiteId. It allows
   * modification of prerequisite course references or other mutable
   * attributes.
   *
   * Security restrictions ensure only authorized roles such as organization or
   * system administrators may perform updates.
   *
   * All updated data must remain consistent within the tenant scope, avoiding
   * cross-tenant conflicts. Validation prevents illegal prerequisite
   * associations and duplicate entries.
   *
   * This update operation is part of the complete CRUD lifecycle for enrollment
   * prerequisites managed under enrollment entities.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the target enrollment
   * @param enrollmentPrerequisiteId Unique identifier of the enrollment
   *   prerequisite to update
   * @param body Updated information for the enrollment prerequisite
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":enrollmentPrerequisiteId")
  public async updateEnrollmentPrerequisite(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string,
    @TypedParam("enrollmentPrerequisiteId")
    enrollmentPrerequisiteId: string,
    @TypedBody()
    body: IEnterpriseLmsEnrollmentPrerequisite.IUpdate,
  ): Promise<IEnterpriseLmsEnrollmentPrerequisite> {
    try {
      return await putenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId(
        {
          systemAdmin,
          enrollmentId,
          enrollmentPrerequisiteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an enrollment prerequisite by ID for a specific enrollment.
   *
   * This operation deletes a specific Enrollment Prerequisite associated with a
   * given enrollment. The prerequisite is identified by
   * enrollmentPrerequisiteId.
   *
   * Security requirements specify this can only be performed by high privilege
   * roles such as systemAdmin or organizationAdmin to maintain enrollment
   * integrity.
   *
   * This operation performs a hard delete, permanently removing the record from
   * the database. Deleted prerequisites cannot be recovered.
   *
   * This complements the create and update operations for managing course
   * prerequisite requirements within learner enrollments.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the target enrollment
   * @param enrollmentPrerequisiteId Unique identifier of the enrollment
   *   prerequisite to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":enrollmentPrerequisiteId")
  public async eraseEnrollmentPrerequisite(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string,
    @TypedParam("enrollmentPrerequisiteId")
    enrollmentPrerequisiteId: string,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsSystemAdminEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId(
        {
          systemAdmin,
          enrollmentId,
          enrollmentPrerequisiteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
