import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisites } from "../../../../../providers/patchenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisites";
import { DepartmentmanagerAuth } from "../../../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../../../decorators/payload/DepartmentmanagerPayload";
import { getenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId } from "../../../../../providers/getenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId";

import { IPageIEnterpriseLmsEnrollmentPrerequisite } from "../../../../../api/structures/IPageIEnterpriseLmsEnrollmentPrerequisite";
import { IEnterpriseLmsEnrollmentPrerequisite } from "../../../../../api/structures/IEnterpriseLmsEnrollmentPrerequisite";

@Controller(
  "/enterpriseLms/departmentManager/enrollments/:enrollmentId/enrollmentPrerequisites",
)
export class EnterpriselmsDepartmentmanagerEnrollmentsEnrollmentprerequisitesController {
  /**
   * List enrollment prerequisites for an enrollment.
   *
   * Retrieve a filtered and paginated list of enrollment prerequisites
   * associated with a specific enrollment. This list shows courses that the
   * learner must complete before proceeding.
   *
   * Supports pagination, sorting, and filtering enabling efficient frontend
   * data loading and UI interactions.
   *
   * Tenant isolation and security roles systemAdmin, organizationAdmin, and
   * departmentManager ensure data protection.
   *
   * Response includes enrollment prerequisite summaries optimized for display
   * in overview dashboards or detailed prerequisite views.
   *
   * Underlying table is enterprise_lms_enrollment_prerequisites.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the enrollment to list
   *   prerequisites for
   * @param body Search and pagination parameters for enrollment prerequisites
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsEnrollmentPrerequisite.IRequest,
  ): Promise<IPageIEnterpriseLmsEnrollmentPrerequisite.ISummary> {
    try {
      return await patchenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisites(
        {
          departmentManager,
          enrollmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific enrollment prerequisite details.
   *
   * Retrieve detailed information about a specific enrollment prerequisite
   * linked to an enrollment.
   *
   * Provides comprehensive data on prerequisite course and linkage to
   * enrollment, supporting detailed audit, UI display, and validation
   * features.
   *
   * Tenant access restrictions and role-based security apply.
   *
   * Database table is enterprise_lms_enrollment_prerequisites.
   *
   * @param connection
   * @param enrollmentId Unique identifier of the enrollment owning the
   *   prerequisite
   * @param enrollmentPrerequisiteId Unique identifier of the enrollment
   *   prerequisite record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":enrollmentPrerequisiteId")
  public async at(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("enrollmentId")
    enrollmentId: string & tags.Format<"uuid">,
    @TypedParam("enrollmentPrerequisiteId")
    enrollmentPrerequisiteId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsEnrollmentPrerequisite> {
    try {
      return await getenterpriseLmsDepartmentManagerEnrollmentsEnrollmentIdEnrollmentPrerequisitesEnrollmentPrerequisiteId(
        {
          departmentManager,
          enrollmentId,
          enrollmentPrerequisiteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
