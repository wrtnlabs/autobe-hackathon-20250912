import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsDepartmentManagerAnalyticsReports } from "../../../../providers/postenterpriseLmsDepartmentManagerAnalyticsReports";
import { DepartmentmanagerAuth } from "../../../../decorators/DepartmentmanagerAuth";
import { DepartmentmanagerPayload } from "../../../../decorators/payload/DepartmentmanagerPayload";
import { patchenterpriseLmsDepartmentManagerAnalyticsReports } from "../../../../providers/patchenterpriseLmsDepartmentManagerAnalyticsReports";
import { getenterpriseLmsDepartmentManagerAnalyticsReportsAnalyticsReportId } from "../../../../providers/getenterpriseLmsDepartmentManagerAnalyticsReportsAnalyticsReportId";

import { IEnterpriseLmsAnalyticsReport } from "../../../../api/structures/IEnterpriseLmsAnalyticsReport";
import { IPageIEnterpriseLmsAnalyticsReport } from "../../../../api/structures/IPageIEnterpriseLmsAnalyticsReport";

@Controller("/enterpriseLms/departmentManager/analyticsReports")
export class EnterpriselmsDepartmentmanagerAnalyticsreportsController {
  /**
   * Create a new analytics report record in the Enterprise LMS.
   *
   * Incoming request body must provide all necessary data as specified by
   * 'IEnterpriseLmsAnalyticsReport.ICreate'.
   *
   * Analytics reports are tenant-scoped and used for dashboard presentation and
   * compliance.
   *
   * Access control limits this operation to appropriate roles.
   *
   * Successfully created reports return the new analytics report entity.
   *
   * Validation errors result in appropriate error responses.
   *
   * @param connection
   * @param body Creation info for the analytics report
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAnalyticsReport(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsAnalyticsReport.ICreate,
  ): Promise<IEnterpriseLmsAnalyticsReport> {
    try {
      return await postenterpriseLmsDepartmentManagerAnalyticsReports({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of analytics reports.
   *
   * Retrieve a filtered, paginated list of tenant-specific analytics reports in
   * the Enterprise LMS. This operation utilizes request parameters to search
   * and sort reports efficiently.
   *
   * It interacts with the 'enterprise_lms_analytics_reports' table capturing
   * rich, precomputed analytics for dashboard display and audit compliance.
   *
   * Supports filters such as report type, tenant, and generation date ranges
   * along with pagination.
   *
   * Access is restricted to authorized system roles enabling analytics view.
   *
   * Returns paginated summaries optimized for list retrieval.
   *
   * Handles invalid parameters with appropriate error responses.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for analytics reports
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchAnalyticsReports(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedBody()
    body: IEnterpriseLmsAnalyticsReport.IRequest,
  ): Promise<IPageIEnterpriseLmsAnalyticsReport.ISummary> {
    try {
      return await patchenterpriseLmsDepartmentManagerAnalyticsReports({
        departmentManager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed analytics report by ID.
   *
   * Fetch detailed analytics report information identified by
   * 'analyticsReportId'.
   *
   * This report includes full metadata, filter parameters, generation
   * timestamp, and JSON content necessary for dashboard presentation and audit
   * trails.
   *
   * The operation accesses the 'enterprise_lms_analytics_reports' table scoped
   * by tenant.
   *
   * Role-based access controls ensure only permitted users can retrieve the
   * report.
   *
   * Returns a detailed analytics report entity.
   *
   * Errors for missing records or unauthorized requests are handled by the
   * backend.
   *
   * @param connection
   * @param analyticsReportId Unique UUID of the analytics report to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":analyticsReportId")
  public async atAnalyticsReport(
    @DepartmentmanagerAuth()
    departmentManager: DepartmentmanagerPayload,
    @TypedParam("analyticsReportId")
    analyticsReportId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAnalyticsReport> {
    try {
      return await getenterpriseLmsDepartmentManagerAnalyticsReportsAnalyticsReportId(
        {
          departmentManager,
          analyticsReportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
