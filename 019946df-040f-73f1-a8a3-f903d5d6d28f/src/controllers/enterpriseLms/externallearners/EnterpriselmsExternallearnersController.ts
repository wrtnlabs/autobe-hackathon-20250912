import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postenterpriseLmsExternallearners } from "../../../providers/postenterpriseLmsExternallearners";

import { IEnterpriseLmsExternalLearner } from "../../../api/structures/IEnterpriseLmsExternalLearner";

@Controller("/enterpriseLms/externallearners")
export class EnterpriselmsExternallearnersController {
  /**
   * Create a new external learner account with required user information
   * including email, password hash, and personal names. The account is
   * associated with a specific tenant for multi-tenant data isolation. The
   * system enforces uniqueness of email within the tenant and initial
   * activation status for proper onboarding.
   *
   * Security constraints require this operation to be performed by
   * unauthenticated or guest users for registration, but the actual permissions
   * and validations depend on tenant and system policy.
   *
   * This operation directly manipulates the enterprise_lms_externallearner
   * table in the database. It performs standard validations internally for
   * email format, password hash security, and enforced tenant association.
   *
   * Errors include duplicate email within the tenant, invalid tenant ID, or
   * constraint violations.
   *
   * Related operations include updating and deleting external learners for
   * account management.
   *
   * Completed creation returns the full external learner entity with
   * identifiers and timestamps.
   *
   * @param connection
   * @param body External learner creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IEnterpriseLmsExternalLearner.ICreate,
  ): Promise<IEnterpriseLmsExternalLearner> {
    try {
      return await postenterpriseLmsExternallearners({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
