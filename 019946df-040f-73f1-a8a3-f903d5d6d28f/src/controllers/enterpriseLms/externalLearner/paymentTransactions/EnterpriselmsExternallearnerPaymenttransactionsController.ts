import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsExternalLearnerPaymentTransactions } from "../../../../providers/postenterpriseLmsExternalLearnerPaymentTransactions";
import { ExternallearnerAuth } from "../../../../decorators/ExternallearnerAuth";
import { ExternallearnerPayload } from "../../../../decorators/payload/ExternallearnerPayload";
import { putenterpriseLmsExternalLearnerPaymentTransactionsId } from "../../../../providers/putenterpriseLmsExternalLearnerPaymentTransactionsId";
import { deleteenterpriseLmsExternalLearnerPaymentTransactionsId } from "../../../../providers/deleteenterpriseLmsExternalLearnerPaymentTransactionsId";

import { IEnterpriseLmsPaymentTransaction } from "../../../../api/structures/IEnterpriseLmsPaymentTransaction";

@Controller("/enterpriseLms/externalLearner/paymentTransactions")
export class EnterpriselmsExternallearnerPaymenttransactionsController {
  /**
   * Create a new payment transaction record.
   *
   * Creates a new payment transaction record linked to a tenant and user within
   * the Enterprise LMS system. The transaction details include amount,
   * currency, payment method, and current status.
   *
   * Security and authorization require that the caller must be an authenticated
   * user with permissions to create payment records such as corporateLearner,
   * externalLearner, or guest.
   *
   * The operation corresponds to the enterprise_lms_payment_transactions table
   * in the Prisma schema. The created record will be stored with a unique
   * transaction code for future reconciliation and auditing.
   *
   * Error handling includes validation of amount positivity, currency format,
   * and status correctness. Transactions must not duplicate existing
   * transaction codes.
   *
   * No response body is required as the operation returns the created
   * transaction details.
   *
   * @param connection
   * @param body Information required to create a payment transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsPaymentTransaction.ICreate,
  ): Promise<IEnterpriseLmsPaymentTransaction> {
    try {
      return await postenterpriseLmsExternalLearnerPaymentTransactions({
        externalLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment transaction by ID.
   *
   * Updates a payment transaction identified by ID with new details such as
   * amount, payment method, or status.
   *
   * Security requires the user to have proper authorization (corporateLearner,
   * externalLearner, or guest) to modify transaction data.
   *
   * The operation acts on the enterprise_lms_payment_transactions table,
   * updating the record fields while respecting immutability of tenant and user
   * associations.
   *
   * Validation ensures that updates do not violate unique constraints or
   * business rules regarding payment processing status.
   *
   * Response returns the updated payment transaction record.
   *
   * @param connection
   * @param id Unique identifier of the payment transaction to update
   * @param body Payment transaction update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsPaymentTransaction.IUpdate,
  ): Promise<IEnterpriseLmsPaymentTransaction> {
    try {
      return await putenterpriseLmsExternalLearnerPaymentTransactionsId({
        externalLearner,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a payment transaction by ID.
   *
   * Soft deletes the payment transaction identified by ID by setting the
   * deleted_at timestamp.
   *
   * This preserves the record for audit and compliance purposes while making it
   * inactive.
   *
   * Authorization requires appropriate user permissions. Roles allowed:
   * corporateLearner, externalLearner, guest.
   *
   * No request body is necessary.
   *
   * There is no response body as the outcome is implied by HTTP status codes.
   *
   * @param connection
   * @param id Unique identifier of the payment transaction to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsExternalLearnerPaymentTransactionsId({
        externalLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
