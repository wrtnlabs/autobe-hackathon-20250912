import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId } from "../../../../../providers/getenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId";
import { ExternallearnerAuth } from "../../../../../decorators/ExternallearnerAuth";
import { ExternallearnerPayload } from "../../../../../decorators/payload/ExternallearnerPayload";
import { putenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId } from "../../../../../providers/putenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId";
import { deleteenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId } from "../../../../../providers/deleteenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId";
import { postenterpriseLmsExternalLearnerForumsForumIdForumThreads } from "../../../../../providers/postenterpriseLmsExternalLearnerForumsForumIdForumThreads";

import { IEnterpriseLmsForumThread } from "../../../../../api/structures/IEnterpriseLmsForumThread";

@Controller("/enterpriseLms/externalLearner/forums/:forumId/forumThreads")
export class EnterpriselmsExternallearnerForumsForumthreadsController {
  /**
   * Get detailed information of a forum thread by ID.
   *
   * Retrieve a forum thread by its unique ID within a specified forum. This
   * operation fetches the forum thread's title, body, author information,
   * timestamps, and soft deletion status from the
   * 'enterprise_lms_forum_threads' table.
   *
   * Access is restricted to authenticated users of roles: systemAdmin,
   * organizationAdmin, departmentManager, contentCreatorInstructor,
   * corporateLearner, externalLearner, and guest, enforcing multi-tenant data
   * isolation and permissions.
   *
   * This API endpoint is essential for displaying detailed discussion within
   * enterprise learning forums.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum, UUID format
   * @param forumThreadId Unique identifier of the target forum thread, UUID
   *   format
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":forumThreadId")
  public async at(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsForumThread> {
    try {
      return await getenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId(
        {
          externalLearner,
          forumId,
          forumThreadId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a forum thread by ID within a forum.
   *
   * Update details of a forum thread specified by 'forumThreadId' within the
   * forum 'forumId'. Request body must comply with
   * 'IEnterpriseLmsForumThread.IUpdate' schema.
   *
   * Access control allows roles: systemAdmin, organizationAdmin,
   * departmentManager, contentCreatorInstructor, corporateLearner,
   * externalLearner, and guest.
   *
   * This endpoint supports editing of thread title, body, and maintaining audit
   * safety within multitenant boundaries.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum, UUID format
   * @param forumThreadId Unique identifier of the target forum thread, UUID
   *   format
   * @param body Forum thread update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":forumThreadId")
  public async update(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForumThread.IUpdate,
  ): Promise<IEnterpriseLmsForumThread> {
    try {
      return await putenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId(
        {
          externalLearner,
          forumId,
          forumThreadId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a forum thread by ID within a forum.
   *
   * Soft delete a forum thread identified by 'forumThreadId' inside forum
   * 'forumId'. This operation marks the thread as deleted by setting
   * 'deleted_at' timestamp.
   *
   * Authorization granted to roles: systemAdmin, organizationAdmin,
   * departmentManager, contentCreatorInstructor, corporateLearner,
   * externalLearner, and guest.
   *
   * Soft deletion preserves data for audit and compliance within multi-tenant
   * architecture.
   *
   * No content response returned upon successful deletion.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum, UUID format
   * @param forumThreadId Unique identifier of the target forum thread, UUID
   *   format
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":forumThreadId")
  public async erase(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsExternalLearnerForumsForumIdForumThreadsForumThreadId(
        {
          externalLearner,
          forumId,
          forumThreadId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new forum thread in a forum.
   *
   * Create a new forum thread inside the forum identified by 'forumId'. The
   * body of the request carries the thread details complying with
   * 'IEnterpriseLmsForumThread.ICreate' schema.
   *
   * Authorization is granted to roles: systemAdmin, organizationAdmin,
   * departmentManager, contentCreatorInstructor, corporateLearner,
   * externalLearner, and guest.
   *
   * This API allows enterprise tenants to add new discussion threads, enhancing
   * intra-organization communications.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum, UUID format
   * @param body Forum thread creation payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForumThread.ICreate,
  ): Promise<IEnterpriseLmsForumThread> {
    try {
      return await postenterpriseLmsExternalLearnerForumsForumIdForumThreads({
        externalLearner,
        forumId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
