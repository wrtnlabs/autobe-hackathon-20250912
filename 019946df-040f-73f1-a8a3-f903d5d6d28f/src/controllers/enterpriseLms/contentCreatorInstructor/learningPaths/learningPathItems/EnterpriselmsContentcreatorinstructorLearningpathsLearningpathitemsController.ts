import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItems } from "../../../../../providers/postenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItems";
import { ContentcreatorinstructorAuth } from "../../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItemsLearningPathItemId } from "../../../../../providers/putenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItemsLearningPathItemId";

import { IEnterpriseLmsLearningPathItem } from "../../../../../api/structures/IEnterpriseLmsLearningPathItem";

@Controller(
  "/enterpriseLms/contentCreatorInstructor/learningPaths/:learningPathId/learningPathItems",
)
export class EnterpriselmsContentcreatorinstructorLearningpathsLearningpathitemsController {
  /**
   * Create a new learning path item for a learning path.
   *
   * Create a new learning path item under the specified learning path.
   *
   * The request must specify details such as the item type (e.g., course,
   * module, assessment), the item reference ID, and its sequence order within
   * the learning path.
   *
   * Authorization ensures that only users with appropriate permissions can add
   * components to learning paths.
   *
   * Upon successful creation, the operation returns the full representation of
   * the new learning path item.
   *
   * This operation interfaces directly with the
   * enterprise_lms_learning_path_items table documented in the Prisma schema,
   * respecting tenant isolation and data integrity constraints.
   *
   * @param connection
   * @param learningPathId Unique identifier of the target learning path
   * @param body Information needed to create a new learning path item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsLearningPathItem.ICreate,
  ): Promise<IEnterpriseLmsLearningPathItem> {
    try {
      return await postenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItems(
        {
          contentCreatorInstructor,
          learningPathId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update learning path item details.
   *
   * Update an existing learning path item by its ID within a learning path.
   *
   * The request should include the fields to be updated such as item type, item
   * ID, or sequence order.
   *
   * Authorization is required to ensure that only permitted users can modify
   * learning path items.
   *
   * The operation returns the fully updated learning path item upon success.
   *
   * This operation directly updates the enterprise_lms_learning_path_items
   * table, maintaining accuracy of the learning path structure within the
   * enterprise LMS system.
   *
   * @param connection
   * @param learningPathId Unique identifier of the target learning path
   * @param learningPathItemId Unique identifier of the learning path item
   * @param body Updated information for the learning path item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":learningPathItemId")
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedParam("learningPathItemId")
    learningPathItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsLearningPathItem.IUpdate,
  ): Promise<IEnterpriseLmsLearningPathItem> {
    try {
      return await putenterpriseLmsContentCreatorInstructorLearningPathsLearningPathIdLearningPathItemsLearningPathItemId(
        {
          contentCreatorInstructor,
          learningPathId,
          learningPathItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
