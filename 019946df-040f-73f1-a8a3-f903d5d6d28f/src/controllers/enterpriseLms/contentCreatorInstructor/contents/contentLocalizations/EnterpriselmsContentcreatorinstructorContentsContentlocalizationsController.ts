import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizations } from "../../../../../providers/postenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizations";
import { ContentcreatorinstructorAuth } from "../../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId } from "../../../../../providers/putenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId";
import { deleteenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId } from "../../../../../providers/deleteenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId";

import { IEnterpriseLmsContentLocalization } from "../../../../../api/structures/IEnterpriseLmsContentLocalization";

@Controller(
  "/enterpriseLms/contentCreatorInstructor/contents/:contentId/contentLocalizations",
)
export class EnterpriselmsContentcreatorinstructorContentsContentlocalizationsController {
  /**
   * Create a new content localization for a content item.
   *
   * Create a new content localization record for a specific content item.
   *
   * This is part of managing multi-language content versions by allowing
   * addition of new translated content.
   *
   * Only authorized users with content management permissions can perform this
   * action.
   *
   * Successful creation returns the new localization record with all properties
   * including timestamps.
   *
   * @param connection
   * @param contentId Unique identifier of the target content item
   * @param body Information for creating new content localization
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentLocalization.ICreate,
  ): Promise<IEnterpriseLmsContentLocalization> {
    try {
      return await postenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizations(
        {
          contentCreatorInstructor,
          contentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update content localization information.
   *
   * Update an existing content localization record by ID under a specific
   * content item.
   *
   * Allows editing of localized titles and descriptions.
   *
   * Access restricted to authorized users managing content.
   *
   * Returns the updated record upon successful modification.
   *
   * @param connection
   * @param contentId Unique identifier of the target content item
   * @param id Unique identifier of the localization record to update
   * @param body Updated information for the content localization record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentLocalization.IUpdate,
  ): Promise<IEnterpriseLmsContentLocalization> {
    try {
      return await putenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId(
        {
          contentCreatorInstructor,
          contentId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a content localization for a given content.
   *
   * Delete a specific content localization associated with a particular
   * content. This operation permanently removes the localization entry from the
   * system.
   *
   * Security: Only authorized users with appropriate permissions to manage
   * content localizations can perform this operation.
   *
   * Relationships: The content localization belongs to a content item
   * identified by contentId. The content in turn is tenant isolated to ensure
   * multi-organizational data security.
   *
   * Validation: Path parameters contentId and id must be valid UUIDs
   * representing existing records.
   *
   * Behavior: This operation performs a hard delete, removing the localization
   * record completely and irreversibly.
   *
   * Related APIs: List all localizations for a content, Add a new localization,
   * Update an existing localization.
   *
   * Errors: Returns 404 if content or localization does not exist, 403 for
   * unauthorized users.
   *
   * @param connection
   * @param contentId Unique identifier of the content
   * @param id Unique identifier of the content localization
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseContentLocalization(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsContentCreatorInstructorContentsContentIdContentLocalizationsId(
        {
          contentCreatorInstructor,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
