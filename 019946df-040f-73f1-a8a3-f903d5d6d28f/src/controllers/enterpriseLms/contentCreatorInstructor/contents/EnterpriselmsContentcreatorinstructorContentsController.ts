import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorContents } from "../../../../providers/postenterpriseLmsContentCreatorInstructorContents";
import { ContentcreatorinstructorAuth } from "../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorContentsId } from "../../../../providers/putenterpriseLmsContentCreatorInstructorContentsId";

import { IEnterpriseLmsContents } from "../../../../api/structures/IEnterpriseLmsContents";

@Controller("/enterpriseLms/contentCreatorInstructor/contents")
export class EnterpriselmsContentcreatorinstructorContentsController {
  /**
   * Create a new content item in the enterprise LMS system with provided
   * metadata. The content item must specify tenant affiliation, title, content
   * type, description, status, and lifecycle business status.
   *
   * The operation corresponds to the enterprise_lms_contents table in the
   * Prisma schema.
   *
   * Validations ensure uniqueness of title within tenant, valid content types,
   * and workflow statuses.
   *
   * Successful creation returns the full content record including created and
   * updated timestamps.
   *
   * @param connection
   * @param body Content item creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedBody()
    body: IEnterpriseLmsContents.ICreate,
  ): Promise<IEnterpriseLmsContents> {
    try {
      return await postenterpriseLmsContentCreatorInstructorContents({
        contentCreatorInstructor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing content item metadata.
   *
   * Update an existing content item's metadata by its ID. Fields like title,
   * description, content_type, status, and business_status can be modified.
   *
   * This operation corresponds to the enterprise_lms_contents Prisma schema
   * table.
   *
   * It requires tenant and role-based authorization. The content must belong to
   * the user's tenant.
   *
   * The title uniqueness within tenant is validated on update.
   *
   * The operation excludes modifying soft deletion timestamps.
   *
   * Returns the updated content entity upon success.
   *
   * @param connection
   * @param id UUID of the content item to update
   * @param body Content item update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContents.IUpdate,
  ): Promise<IEnterpriseLmsContents> {
    try {
      return await putenterpriseLmsContentCreatorInstructorContentsId({
        contentCreatorInstructor,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
