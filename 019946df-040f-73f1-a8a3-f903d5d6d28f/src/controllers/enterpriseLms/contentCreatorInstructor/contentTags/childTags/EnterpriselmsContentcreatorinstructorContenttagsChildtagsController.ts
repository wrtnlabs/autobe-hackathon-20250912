import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTags } from "../../../../../providers/postenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTags";
import { ContentcreatorinstructorAuth } from "../../../../../decorators/ContentcreatorinstructorAuth";
import { ContentcreatorinstructorPayload } from "../../../../../decorators/payload/ContentcreatorinstructorPayload";
import { putenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId } from "../../../../../providers/putenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId";
import { deleteenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId } from "../../../../../providers/deleteenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId";

import { IEnterpriseLmsContentTagHierarchy } from "../../../../../api/structures/IEnterpriseLmsContentTagHierarchy";

@Controller(
  "/enterpriseLms/contentCreatorInstructor/contentTags/:parentTagId/childTags",
)
export class EnterpriselmsContentcreatorinstructorContenttagsChildtagsController {
  /**
   * Create a child content tag under a specified parent tag.
   *
   * Creates a new child tag relationship under the specified parent content tag
   * ID.
   *
   * The request requires the parentTagId as a path parameter, which uniquely
   * identifies the parent tag. The request body must include the childTagId,
   * representing the ID of the child content tag to associate.
   *
   * Only users with roles such as systemAdmin, organizationAdmin, or
   * contentCreatorInstructor are authorized to perform this operation to ensure
   * content taxonomy integrity.
   *
   * Validation errors will occur if the parent tag does not exist or the child
   * tag ID is invalid or already linked.
   *
   * @param connection
   * @param parentTagId Unique identifier of the parent content tag
   * @param body Details for creating a new child tag relationship
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createChildTag(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentTagHierarchy.ICreate,
  ): Promise<IEnterpriseLmsContentTagHierarchy> {
    try {
      return await postenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTags(
        {
          contentCreatorInstructor,
          parentTagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing child content tag relationship.
   *
   * Updates an existing child tag relationship between a parent tag and its
   * child tag.
   *
   * The endpoint requires path parameters:
   *
   * - ParentTagId: The unique identifier of the parent content tag.
   * - ChildTagId: The unique identifier of the child content tag to update.
   *
   * The request body contains the updated information for the child tag
   * relationship.
   *
   * Only authorized users with systemAdmin, organizationAdmin, or
   * contentCreatorInstructor roles can perform this operation.
   *
   * Errors will be returned if the specified tag relationship does not exist or
   * if the update data violates schema constraints.
   *
   * @param connection
   * @param parentTagId Parent content tag unique identifier
   * @param childTagId Child content tag unique identifier
   * @param body Updated child tag relationship details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":childTagId")
  public async updateChildTagRelationship(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedParam("childTagId")
    childTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentTagHierarchy.IUpdate,
  ): Promise<IEnterpriseLmsContentTagHierarchy> {
    try {
      return await putenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId(
        {
          contentCreatorInstructor,
          parentTagId,
          childTagId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a child content tag relationship.
   *
   * Permanently removes the child tag relationship between the specified parent
   * tag and child tag.
   *
   * Requires path parameters:
   *
   * - ParentTagId: Unique identifier of the parent content tag.
   * - ChildTagId: Unique identifier of the child content tag.
   *
   * Authorization is limited to systemAdmin, organizationAdmin, and
   * contentCreatorInstructor roles.
   *
   * Error responses occur if the relationship does not exist.
   *
   * This operation performs a hard delete, removing the record from the
   * database without soft deletion.
   *
   * @param connection
   * @param parentTagId Parent content tag unique identifier
   * @param childTagId Child content tag unique identifier
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":childTagId")
  public async eraseChildTagRelationship(
    @ContentcreatorinstructorAuth()
    contentCreatorInstructor: ContentcreatorinstructorPayload,
    @TypedParam("parentTagId")
    parentTagId: string & tags.Format<"uuid">,
    @TypedParam("childTagId")
    childTagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsContentCreatorInstructorContentTagsParentTagIdChildTagsChildTagId(
        {
          contentCreatorInstructor,
          parentTagId,
          childTagId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
