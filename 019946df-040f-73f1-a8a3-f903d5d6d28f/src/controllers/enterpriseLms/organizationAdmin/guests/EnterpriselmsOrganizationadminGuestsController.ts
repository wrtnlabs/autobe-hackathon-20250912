import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchenterpriseLmsOrganizationAdminGuests } from "../../../../providers/patchenterpriseLmsOrganizationAdminGuests";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";

import { IPageIEnterpriseLmsGuest } from "../../../../api/structures/IPageIEnterpriseLmsGuest";
import { IEnterpriseLmsGuest } from "../../../../api/structures/IEnterpriseLmsGuest";

@Controller("/enterpriseLms/organizationAdmin/guests")
export class EnterpriselmsOrganizationadminGuestsController {
  /**
   * List and search guest users with filtering and pagination.
   *
   * Retrieve a paginated and optionally filtered list of guest users. Supports
   * pagination, filtering, and sorting.
   *
   * The request body specifies filtering criteria such as status or email
   * patterns.
   *
   * The response contains a paginated list of guest user summaries tailored for
   * tenant administration.
   *
   * @param connection
   * @param body Filter criteria and pagination parameters for guest user
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsGuest.IRequest,
  ): Promise<IPageIEnterpriseLmsGuest.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminGuests({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
