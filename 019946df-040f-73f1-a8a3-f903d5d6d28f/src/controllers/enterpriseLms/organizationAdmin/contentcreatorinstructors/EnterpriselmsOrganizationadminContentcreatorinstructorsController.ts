import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminContentcreatorinstructors } from "../../../../providers/postenterpriseLmsOrganizationAdminContentcreatorinstructors";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminContentcreatorinstructors } from "../../../../providers/patchenterpriseLmsOrganizationAdminContentcreatorinstructors";
import { getenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId } from "../../../../providers/getenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId";
import { putenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId } from "../../../../providers/putenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId";
import { deleteenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId";

import { IEnterpriseLmsContentCreatorInstructor } from "../../../../api/structures/IEnterpriseLmsContentCreatorInstructor";
import { IPageIEnterpriseLmsContentcreatorinstructor } from "../../../../api/structures/IPageIEnterpriseLmsContentcreatorinstructor";

@Controller("/enterpriseLms/organizationAdmin/contentcreatorinstructors")
export class EnterpriselmsOrganizationadminContentcreatorinstructorsController {
  /**
   * Create a new content creator/instructor account with provided details. The
   * new user is assigned to the specified tenant organization. The operation
   * requires organization administrator privileges.
   *
   * Input must include valid email, hashed password, first name, last name, and
   * initial account status.
   *
   * The operation verifies uniqueness of the email within the tenant context
   * and returns the created profile upon success.
   *
   * Errors include validation failures for missing or invalid data, duplication
   * errors, and authorization failures.
   *
   * @param connection
   * @param body Creation info for new content creator/instructor user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.ICreate,
  ): Promise<IEnterpriseLmsContentCreatorInstructor> {
    try {
      return await postenterpriseLmsOrganizationAdminContentcreatorinstructors({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of content
   * creators/instructors.
   *
   * Retrieve a filtered and paginated list of content creator/instructor
   * accounts within the enterprise LMS. This operation allows clients to query
   * for users with specific attributes such as active status or email patterns
   * and supports sorting and pagination to handle large datasets efficiently.
   *
   * Security considerations restrict access to organization administrators with
   * appropriate roles, ensuring tenant data isolation and protecting sensitive
   * personal information.
   *
   * This operation directly corresponds to the
   * enterprise_lms_contentcreatorinstructor table as defined in the Prisma
   * schema. The results include summary representations for performance and
   * usability.
   *
   * Typical usage involves administrative dashboards controlling user
   * management for content creators and instructors.
   *
   * The operation returns only active users unless specified otherwise and
   * supports the exclusion of soft-deleted records.
   *
   * Errors returned include validation errors for incorrect filter criteria and
   * authorization failures when role requirements are not met.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for content
   *   creator/instructor filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.IRequest,
  ): Promise<IPageIEnterpriseLmsContentcreatorinstructor.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminContentcreatorinstructors(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve content creator/instructor details by ID.
   *
   * Retrieve detailed information of a content creator/instructor user by their
   * unique identifier. This operation fetches complete user profile data as
   * stored in the enterprise_lms_contentcreatorinstructor table, including
   * email, names, status, and tenant association.
   *
   * Only organization administrators have permission to access this sensitive
   * information. The operation enforces multi-tenant data isolation by
   * requiring the correct tenant context.
   *
   * If the user ID does not exist, an error indicating a missing resource is
   * returned.
   *
   * This endpoint supports administrative user management workflows such as
   * account review and status changes.
   *
   * @param connection
   * @param contentcreatorinstructorId Unique identifier of the target content
   *   creator/instructor user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":contentcreatorinstructorId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentcreatorinstructorId")
    contentcreatorinstructorId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentCreatorInstructor> {
    try {
      return await getenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId(
        {
          organizationAdmin,
          contentcreatorinstructorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update content creator/instructor details by ID.
   *
   * Update an existing content creator/instructor userâ€™s details by their
   * unique identifier. Supports modification of user attributes including
   * email, names, password hash, and account status.
   *
   * Restricted to organization administrators to ensure proper data governance
   * and tenant isolation.
   *
   * If the specified user ID does not exist, a not found error is returned.
   *
   * This endpoint is commonly used for administrative user management including
   * status changes and profile updates.
   *
   * @param connection
   * @param contentcreatorinstructorId Unique identifier of the target content
   *   creator/instructor user
   * @param body Update information for content creator/instructor user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":contentcreatorinstructorId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentcreatorinstructorId")
    contentcreatorinstructorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentCreatorInstructor.IUpdate,
  ): Promise<IEnterpriseLmsContentCreatorInstructor> {
    try {
      return await putenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId(
        {
          organizationAdmin,
          contentcreatorinstructorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a content creator/instructor user account by ID.
   *
   * Delete one content creator or instructor user account by the unique
   * identifier. This operation permanently removes the user record from the
   * system.
   *
   * Security considerations include verifying caller has sufficient
   * permissions, and ensuring that deletion respects multi-tenant data
   * isolation to prevent data leakage across organizations.
   *
   * This operation directly manipulates the
   * enterprise_lms_contentcreatorinstructor table where the user data resides.
   *
   * This hard delete action will remove the data completely and cannot be
   * undone. Related data updates or cascading effects will depend on the
   * underlying DB constraints.
   *
   * If the user does not exist or access is denied, an error response will be
   * returned.
   *
   * No request body is needed, only the path parameter specifying the
   * contentcreatorinstructor ID.
   *
   * Authorized roles can access this endpoint to maintain system integrity and
   * user management.
   *
   * @param connection
   * @param contentcreatorinstructorId Unique identifier of the content creator
   *   or instructor user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":contentcreatorinstructorId")
  public async eraseContentcreatorinstructors(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("contentcreatorinstructorId")
    contentcreatorinstructorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminContentcreatorinstructorsContentcreatorinstructorId(
        {
          organizationAdmin,
          contentcreatorinstructorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
