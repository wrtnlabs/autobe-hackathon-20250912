import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminCertifications } from "../../../../providers/postenterpriseLmsOrganizationAdminCertifications";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminCertifications } from "../../../../providers/patchenterpriseLmsOrganizationAdminCertifications";
import { getenterpriseLmsOrganizationAdminCertificationsCertificationId } from "../../../../providers/getenterpriseLmsOrganizationAdminCertificationsCertificationId";
import { putenterpriseLmsOrganizationAdminCertificationsCertificationId } from "../../../../providers/putenterpriseLmsOrganizationAdminCertificationsCertificationId";
import { deleteenterpriseLmsOrganizationAdminCertificationsCertificationId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminCertificationsCertificationId";

import { IEnterpriseLmsCertification } from "../../../../api/structures/IEnterpriseLmsCertification";
import { IPageIEnterpriseLmsCertification } from "../../../../api/structures/IPageIEnterpriseLmsCertification";

@Controller("/enterpriseLms/organizationAdmin/certifications")
export class EnterpriselmsOrganizationadminCertificationsController {
  /**
   * Create a new certification.
   *
   * This POST operation creates a new certification under the tenant.
   *
   * Only users with organizationAdmin role can create certifications.
   *
   * The request body includes all necessary certification creation data.
   *
   * The response body contains the newly created certification entity.
   *
   * Errors can occur if validation fails or required data is missing.
   *
   * No path parameters are required.
   *
   * This operation ensures tenant data isolation during creation.
   *
   * @param connection
   * @param body Certification creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCertification(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCertification.ICreate,
  ): Promise<IEnterpriseLmsCertification> {
    try {
      return await postenterpriseLmsOrganizationAdminCertifications({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list paginated tenant certifications.
   *
   * This PATCH operation allows clients to search and retrieve certifications
   * for the tenant with advanced filtering, sorting, and pagination options.
   *
   * It supports querying certifications by code, name, status, and lifecycle
   * state.
   *
   * Only authorized users with roles organizationAdmin or departmentManager can
   * perform this operation.
   *
   * The response includes paginated summary certification information to
   * optimize list rendering.
   *
   * Errors may occur due to invalid search filters or insufficient permissions.
   *
   * This operation requires a request body with search parameters.
   *
   * The response body returns a paginated list of certifications matching the
   * search criteria.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for certifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchCertifications(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsCertification.IRequest,
  ): Promise<IPageIEnterpriseLmsCertification.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminCertifications({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve certification detail by ID.
   *
   * This GET operation returns detailed information for the certification
   * identified by certificationId.
   *
   * Only users with organizationAdmin or departmentManager roles have access.
   *
   * The response includes all relevant certification data for use in UI or
   * reporting.
   *
   * If the certification is not found, an error response is returned.
   *
   * No request body is required.
   *
   * The response body contains a complete certification entity.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":certificationId")
  public async atCertification(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCertification> {
    try {
      return await getenterpriseLmsOrganizationAdminCertificationsCertificationId(
        {
          organizationAdmin,
          certificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update certification details by certification ID.
   *
   * Update an existing certification identified by its unique ID.
   *
   * This API modifies the certification details such as name, description, and
   * status parameters. It ensures that only authorized users with proper roles
   * (e.g., organization administrators) can perform this operation, consistent
   * with multi-tenant data isolation in the Enterprise LMS.
   *
   * The certification entity corresponds to the enterprise_lms_certifications
   * table in the Prisma schema, containing fields like code, name, description,
   * status, and timestamps.
   *
   * Validation of input data will ensure compliance with field constraints.
   *
   * If the certification is soft deleted (deleted_at not null), the update
   * operation will fail or require prior restoration.
   *
   * Importantly, this operation does not alter related expiration policies or
   * certificate issuances; those require separate endpoint management.
   *
   * Errors such as unauthorized access, invalid IDs, or validation failures
   * must be handled with appropriate HTTP response codes and messages.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification to update
   * @param body Updated certification data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":certificationId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCertification.IUpdate,
  ): Promise<IEnterpriseLmsCertification> {
    try {
      return await putenterpriseLmsOrganizationAdminCertificationsCertificationId(
        {
          organizationAdmin,
          certificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a certification by ID.
   *
   * Delete (soft delete) a certification by ID.
   *
   * Sets the 'deleted_at' timestamp to mark the certification as deleted
   * without physically removing it from the database.
   *
   * This soft deletion maintains historical data integrity for audit and
   * compliance.
   *
   * Only users with sufficient privileges can perform this operation.
   *
   * Associated expirations and issuances remain unchanged and should be handled
   * separately.
   *
   * The operation returns no content upon success.
   *
   * Errors include access denial, non-existent certification, or conflicts if
   * deletion violates constraints.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":certificationId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminCertificationsCertificationId(
        {
          organizationAdmin,
          certificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
