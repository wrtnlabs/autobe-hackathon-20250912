import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations } from "../../../../../providers/postenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations } from "../../../../../providers/patchenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations";
import { getenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId } from "../../../../../providers/getenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId";
import { putenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId } from "../../../../../providers/putenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId";
import { deleteenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId";

import { IEnterpriseLmsCertificationExpiration } from "../../../../../api/structures/IEnterpriseLmsCertificationExpiration";
import { IPageIEnterpriseLmsCertificationExpiration } from "../../../../../api/structures/IPageIEnterpriseLmsCertificationExpiration";

@Controller(
  "/enterpriseLms/organizationAdmin/certifications/:certificationId/certificationExpirations",
)
export class EnterpriselmsOrganizationadminCertificationsCertificationexpirationsController {
  /**
   * Create a certification expiration policy for a certification.
   *
   * Create a new certification expiration policy for a given certification
   * identified by its ID. The operation is tenant-aware via the certification
   * context and allows specifying the duration in days after which the
   * certification expires, whether renewal is required, and the notification
   * period before expiration.
   *
   * Security considerations include authorization limited to users with roles
   * able to manage certifications and certification expiration settings. Input
   * validation enforces positive expiration period and non-negative
   * notification periods.
   *
   * This operation integrates with the enterprise_lms_certification_expirations
   * table defined in the Prisma schema, utilizing all relevant fields to
   * represent expiration policies. The created record is stored permanently and
   * influences downstream certification workflows and compliance actions.
   *
   * Related operations include retrieval, update, and deletion of certification
   * expiration policies. Proper error handling returns informative messages for
   * invalid input or unauthorized access.
   *
   * This operation is a POST method creating resources consistent with REST
   * principles.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification
   * @param body Creation info of the certification expiration policy
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCertificationExpirationPolicy(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCertificationExpiration.ICreate,
  ): Promise<IEnterpriseLmsCertificationExpiration> {
    try {
      return await postenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations(
        {
          organizationAdmin,
          certificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List certification expiration policies by certification ID.
   *
   * Get paginated list of expiration policies for a certification.
   *
   * Returns certification expiration rules including period of validity,
   * renewal requirements, and notification settings.
   *
   * Supports pagination and filtering in the request body.
   *
   * Accessible by organization administrators.
   *
   * Filters by the specified certification ID in the path parameter.
   *
   * Returns summarized expiration policy data for UI listing.
   *
   * Handles errors for invalid certification ID or access restrictions.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification to list
   *   expiration policies for
   * @param body Paging, filter, and sort parameters for expiration policies
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCertificationExpiration.IRequest,
  ): Promise<IPageIEnterpriseLmsCertificationExpiration.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirations(
        {
          organizationAdmin,
          certificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get certification expiration details by expiration ID.
   *
   * Retrieve detailed information about a specific certification expiration
   * policy.
   *
   * Requires certification ID and expiration policy ID as path parameters.
   *
   * Accessible to authorized organization administrators only.
   *
   * Returns full details including expiration periods, renewal flags, and
   * notification settings.
   *
   * Handles errors such as invalid IDs and access violations.
   *
   * @param connection
   * @param certificationId Unique identifier of the parent certification
   * @param expirationId Unique identifier of the expiration policy
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":expirationId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedParam("expirationId")
    expirationId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsCertificationExpiration> {
    try {
      return await getenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId(
        {
          organizationAdmin,
          certificationId,
          expirationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a certification expiration policy for a certification.
   *
   * Update the certification expiration policy identified by expirationId,
   * associated with the provided certificationId. Users with organizationAdmin
   * role can modify the expiration period in days, renewal requirements, and
   * notification period. Validation ensures values are within business
   * constraints.
   *
   * This operation updates the enterprise_lms_certification_expirations table
   * records corresponding to the specified expiration policy. Changes are
   * persisted permanently and affect certification lifecycle management.
   *
   * Appropriate feedback is provided for invalid inputs or unauthorized access.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification
   * @param expirationId Unique identifier of the certification expiration
   *   policy
   * @param body Information to update the certification expiration policy
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":expirationId")
  public async updateCertificationExpirationPolicy(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedParam("expirationId")
    expirationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsCertificationExpiration.IUpdate,
  ): Promise<IEnterpriseLmsCertificationExpiration> {
    try {
      return await putenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId(
        {
          organizationAdmin,
          certificationId,
          expirationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a certification expiration policy for a certification.
   *
   * Delete the certification expiration policy identified by expirationId
   * belonging to the certification specified by certificationId. This action
   * permanently removes the record from storage with no recovery option.
   *
   * Role-based security restricts access to organizationAdmin users. Validation
   * ensures the existence of the policy before deletion.
   *
   * Deletion affects certification expiration management and may require client
   * updates to certification workflows.
   *
   * This operation is designed as a hard delete action consistent with the
   * Prisma schema structure.
   *
   * @param connection
   * @param certificationId Unique identifier of the certification
   * @param expirationId Unique identifier of the certification expiration
   *   policy
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":expirationId")
  public async eraseCertificationExpirationPolicy(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("certificationId")
    certificationId: string & tags.Format<"uuid">,
    @TypedParam("expirationId")
    expirationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminCertificationsCertificationIdCertificationExpirationsExpirationId(
        {
          organizationAdmin,
          certificationId,
          expirationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
