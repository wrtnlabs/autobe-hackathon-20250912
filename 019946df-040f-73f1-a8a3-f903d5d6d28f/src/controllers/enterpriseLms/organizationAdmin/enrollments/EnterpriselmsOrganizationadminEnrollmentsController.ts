import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putenterpriseLmsOrganizationAdminEnrollmentsId } from "../../../../providers/putenterpriseLmsOrganizationAdminEnrollmentsId";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { deleteenterpriseLmsOrganizationAdminEnrollmentsId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminEnrollmentsId";

import { IEnterpriseLmsEnrollment } from "../../../../api/structures/IEnterpriseLmsEnrollment";

@Controller("/enterpriseLms/organizationAdmin/enrollments/:id")
export class EnterpriselmsOrganizationadminEnrollmentsController {
  /**
   * Update an enrollment by ID.
   *
   * Update an existing enrollment by ID in the Enterprise LMS system. This
   * operation allows modification of enrollment fields such as the enrollment
   * status, business status, and timestamps under tenant control.
   *
   * Updates are validated against business rules ensuring that only active
   * enrollments are modified and proper statuses are used. This operation is
   * key for managing learner progression in training programs including
   * enrollment cancellations or completions.
   *
   * Tenant isolation is strictly enforced: only enrollments belonging to the
   * authorized tenant context can be updated.
   *
   * The underlying database table is enterprise_lms_enrollments, which stores
   * learner enrollment information linking learners to learning paths. The
   * update input must comply with the IEnterpriseLmsEnrollment.IUpdate
   * interface.
   *
   * Authorization roles are systemAdmin, organizationAdmin, and
   * departmentManager with sufficient permissions to update enrollment data.
   *
   * No response body is returned as the operation confirms update via HTTP
   * status codes.
   *
   * @param connection
   * @param id Unique identifier of the enrollment to update
   * @param body Enrollment update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsEnrollment.IUpdate,
  ): Promise<IEnterpriseLmsEnrollment> {
    try {
      return await putenterpriseLmsOrganizationAdminEnrollmentsId({
        organizationAdmin,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an enrollment by ID in the Enterprise LMS. The deleted_at
   * timestamp is set to indicate logical deletion and exclude the enrollment
   * from active records.
   *
   * This protects data integrity and complies with retention policies by
   * preserving historic enrollment data while marking it inactive.
   *
   * Tenant context and authorization roles systemAdmin, organizationAdmin, and
   * departmentManager are enforced.
   *
   * No response body is returned; success is indicated by HTTP status codes
   * only.
   *
   * @param connection
   * @param id Unique identifier of the enrollment to delete (soft delete)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminEnrollmentsId({
        organizationAdmin,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
