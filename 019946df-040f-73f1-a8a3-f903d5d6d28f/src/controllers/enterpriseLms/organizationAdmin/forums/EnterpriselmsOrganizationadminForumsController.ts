import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminForums } from "../../../../providers/postenterpriseLmsOrganizationAdminForums";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { putenterpriseLmsOrganizationAdminForumsForumId } from "../../../../providers/putenterpriseLmsOrganizationAdminForumsForumId";
import { deleteenterpriseLmsOrganizationAdminForumsForumId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminForumsForumId";

import { IEnterpriseLmsForums } from "../../../../api/structures/IEnterpriseLmsForums";

@Controller("/enterpriseLms/organizationAdmin/forums")
export class EnterpriselmsOrganizationadminForumsController {
  /**
   * Create a new forum for tenant organization.
   *
   * Create a new discussion forum under the tenant's administration. The forum
   * represents a container for multiple discussion threads allowing users to
   * participate in structured conversations relevant to learning topics. The
   * forum has a unique name within the tenant, an optional description, and is
   * assigned an owner who manages it. The creating user needs appropriate
   * authorization (organizationAdmin role) to ensure data integrity and tenant
   * security. The operation populates the enterprise_lms_forums table including
   * necessary tenant ID linkage and creation metadata. Errors may arise if
   * duplicate forum names exist within the same tenant.
   *
   * This operation relates directly to the management of forums in the LMS and
   * supports subsequent thread and post creations within the forum structure.
   *
   * Security considerations restrict this operation to authorized roles such as
   * organization administrators. It prevents cross-tenant data access ensuring
   * strict data isolation.
   *
   * Business rules ensure uniqueness of forum names and integrity of
   * tenant-specific data.
   *
   * @param connection
   * @param body New forum creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsForums.ICreate,
  ): Promise<IEnterpriseLmsForums> {
    try {
      return await postenterpriseLmsOrganizationAdminForums({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update forum details by forumId.
   *
   * Update the metadata and properties of a forum identified by forumId. The
   * update includes changing attributes like the forum name and description.
   * The operation ensures that the forum ID is valid within the tenant context
   * and that the new forum name does not conflict with existing forums to
   * preserve uniqueness.
   *
   * Authorization is required for organization administrators to ensure only
   * privileged users can change forum configuration. This operation interacts
   * directly with the enterprise_lms_forums table for data persistence and
   * logging.
   *
   * This endpoint is crucial for maintaining an up-to-date, well-structured
   * forum system that supports effective discussions across tenants while
   * ensuring tenant data security and compliance.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @param body Updated forum data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":forumId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForums.IUpdate,
  ): Promise<IEnterpriseLmsForums> {
    try {
      return await putenterpriseLmsOrganizationAdminForumsForumId({
        organizationAdmin,
        forumId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete forum by forumId.
   *
   * Delete a forum by forumId, permanently removing it from the tenant's data
   * store. This operation executes a hard delete on the enterprise_lms_forums
   * table and cascades deletion to associated forum threads and posts. The user
   * must have organization administrator authorization to perform this
   * destructive action.
   *
   * Data integrity and tenant isolation are preserved by restricting deletion
   * scope to the specified forum within the tenant. Deleted data is not
   * recoverable, hence caution and appropriate user confirmations are expected
   * before execution.
   *
   * Security policies restrict this operation to authorized personnel only,
   * preventing accidental or unauthorized data loss.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":forumId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminForumsForumId({
        organizationAdmin,
        forumId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
