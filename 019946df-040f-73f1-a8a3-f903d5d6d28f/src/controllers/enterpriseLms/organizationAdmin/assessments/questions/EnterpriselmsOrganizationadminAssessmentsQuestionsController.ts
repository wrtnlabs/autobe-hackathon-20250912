import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions } from "../../../../../providers/postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions } from "../../../../../providers/patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions";
import { getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId";
import { putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId";
import { deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId";

import { IEnterpriseLmsAssessmentQuestion } from "../../../../../api/structures/IEnterpriseLmsAssessmentQuestion";
import { IPageIEnterpriseLmsAssessmentQuestion } from "../../../../../api/structures/IPageIEnterpriseLmsAssessmentQuestion";

@Controller(
  "/enterpriseLms/organizationAdmin/assessments/:assessmentId/questions",
)
export class EnterpriselmsOrganizationadminAssessmentsQuestionsController {
  /**
   * Create a new question for a given assessment.
   *
   * Create a new assessment question under a specified assessment identified by
   * assessmentId.
   *
   * This POST endpoint expects a request body containing the question_text,
   * question_type, and weight properties as defined in the
   * IEnterpriseLmsAssessmentQuestion.ICreate schema.
   *
   * The response returns the newly created assessment question including its
   * unique id and timestamps.
   *
   * Authorization requires roles 'contentCreatorInstructor' or
   * 'organizationAdmin'.
   *
   * Tenant isolation is enforced ensuring the assessment belongs to the
   * caller's organization.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param body Information needed to create a question under an assessment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.ICreate,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await postenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions(
        {
          organizationAdmin,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List questions for a specific assessment.
   *
   * Fetch a filtered and paginated list of questions for the assessment
   * identified by assessmentId.
   *
   * Allows clients to search, sort, and paginate through questions belonging to
   * the specified assessment.
   *
   * Only authorized roles (systemAdmin, organizationAdmin) can access this
   * data.
   *
   * This operation returns paginated question summaries optimized for list
   * display.
   *
   * The filter and pagination criteria are specified in the request body.
   *
   * @param connection
   * @param assessmentId Unique identifier of the parent assessment
   * @param body Search criteria and pagination parameters for filtering
   *   assessment questions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.IRequest,
  ): Promise<IPageIEnterpriseLmsAssessmentQuestion.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestions(
        {
          organizationAdmin,
          assessmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed assessment question information.
   *
   * Get detailed information about a single question identified by questionId
   * in the context of assessment identified by assessmentId.
   *
   * Returns all relevant metadata including question text, type, weight, and
   * timestamps.
   *
   * Access is restricted to users with systemAdmin or organizationAdmin roles.
   *
   * This operation returns a detailed question object.
   *
   * @param connection
   * @param assessmentId Unique identifier of the parent assessment
   * @param questionId Unique identifier of the assessment question
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":questionId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await getenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId(
        {
          organizationAdmin,
          assessmentId,
          questionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update question details for a given assessment.
   *
   * Update an existing question details under a specified assessment.
   *
   * This PUT endpoint requires assessmentId and questionId as path parameters.
   *
   * Request body follows the IEnterpriseLmsAssessmentQuestion.IUpdate schema
   * indicating modifiable properties.
   *
   * Response returns the updated assessment question entity.
   *
   * Authorization requires roles 'contentCreatorInstructor' or
   * 'organizationAdmin'.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param questionId Unique identifier of the question to update
   * @param body Properties to update an assessment question
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":questionId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsAssessmentQuestion.IUpdate,
  ): Promise<IEnterpriseLmsAssessmentQuestion> {
    try {
      return await putenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId(
        {
          organizationAdmin,
          assessmentId,
          questionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an assessment question.
   *
   * Delete an existing question from an assessment by marking its deleted_at
   * timestamp.
   *
   * This DELETE endpoint targets a question identified by questionId within an
   * assessment identified by assessmentId.
   *
   * Authorization for operation is granted to roles 'contentCreatorInstructor'
   * and 'organizationAdmin'.
   *
   * Tenant isolation is enforced to ensure data security.
   *
   * @param connection
   * @param assessmentId Unique identifier of the target assessment
   * @param questionId Unique identifier of the question to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":questionId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("assessmentId")
    assessmentId: string & tags.Format<"uuid">,
    @TypedParam("questionId")
    questionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminAssessmentsAssessmentIdQuestionsQuestionId(
        {
          organizationAdmin,
          assessmentId,
          questionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
