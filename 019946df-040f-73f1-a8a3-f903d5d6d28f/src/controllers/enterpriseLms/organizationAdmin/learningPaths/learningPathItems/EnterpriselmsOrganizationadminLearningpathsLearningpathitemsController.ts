import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteenterpriseLmsOrganizationAdminLearningPathsLearningPathIdLearningPathItemsLearningPathItemId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminLearningPathsLearningPathIdLearningPathItemsLearningPathItemId";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";

@Controller(
  "/enterpriseLms/organizationAdmin/learningPaths/:learningPathId/learningPathItems/:learningPathItemId",
)
export class EnterpriselmsOrganizationadminLearningpathsLearningpathitemsController {
  /**
   * Delete a learning path item by ID in a specific learning path.
   *
   * This DELETE operation permanently removes the specified learning path item
   * from the learning path identified by learningPathId.
   *
   * It ensures that the item is fully deleted from the database and cannot be
   * recovered.
   *
   * Security considerations require that only authorized users with sufficient
   * role permissions can perform this operation.
   *
   * This entity is linked to the enterprise_lms_learning_path_items table and
   * cascades on tenant deletion.
   *
   * This operation requires exactly the learning path item ID and learning path
   * ID for precise record targeting.
   *
   * Upon deletion, any associations or sequences involving this item in the
   * learning path will be updated accordingly.
   *
   * Errors may occur if the item does not exist or if authorization fails.
   *
   * No request body is required.
   *
   * No response body is returned upon success.
   *
   * @param connection
   * @param learningPathId Identifier of the learning path
   * @param learningPathItemId Identifier of the learning path item to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseLearningPathItem(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedParam("learningPathItemId")
    learningPathItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminLearningPathsLearningPathIdLearningPathItemsLearningPathItemId(
        {
          organizationAdmin,
          learningPathId,
          learningPathItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
