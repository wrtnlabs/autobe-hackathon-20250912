import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsOrganizationAdminOrganizationadmins } from "../../../../providers/postenterpriseLmsOrganizationAdminOrganizationadmins";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchenterpriseLmsOrganizationAdminOrganizationadmins } from "../../../../providers/patchenterpriseLmsOrganizationAdminOrganizationadmins";
import { getenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId } from "../../../../providers/getenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId";
import { putenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId } from "../../../../providers/putenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId";
import { deleteenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId } from "../../../../providers/deleteenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId";

import { IEnterpriseLmsOrganizationAdmin } from "../../../../api/structures/IEnterpriseLmsOrganizationAdmin";
import { IPageIEnterpriseLmsOrganizationadmin } from "../../../../api/structures/IPageIEnterpriseLmsOrganizationadmin";

@Controller("/enterpriseLms/organizationAdmin/organizationadmins")
export class EnterpriselmsOrganizationadminOrganizationadminsController {
  /**
   * Create a new organization administrator user.
   *
   * This API operation allows the creation of a new organization administrator
   * user. Organization Administrators manage users, roles, content approvals,
   * configurations, and billing within their own organization, scoped by
   * tenant.
   *
   * Security considerations require authentication and authorization to ensure
   * only system or existing administrators can create new org admins.
   *
   * The operation maps directly to the 'enterprise_lms_organizationadmin' table
   * in the database. It enforces uniqueness on the email field within the
   * tenant.
   *
   * Request must include tenant_id to associate the new admin with the correct
   * organization. All fields must be validated for format and constraints.
   *
   * On success, the newly created organization administrator record is returned
   * excluding the password hash.
   *
   * Errors occur if the email is already taken within the tenant or if
   * tenant_id is invalid.
   *
   * This operation is typically used by system administrators or via backend
   * management tools.
   *
   * @param connection
   * @param body Information required to create an organization administrator
   *   account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.ICreate,
  ): Promise<IEnterpriseLmsOrganizationAdmin> {
    try {
      return await postenterpriseLmsOrganizationAdminOrganizationadmins({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list organization administrators.
   *
   * Search and retrieve a paginated list of organization administrators.
   * Supports filtering, sorting, and pagination.
   *
   * This operation operates on the enterprise_lms_organizationadmin table,
   * returning summaries optimized for list display.
   *
   * Authorization roles include systemAdmin and organizationAdmin to enable
   * management within tenant boundaries.
   *
   * This is used to support user and role management features in the admin UI.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for organization
   *   administrator filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchOrganizationAdmins(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.IRequest,
  ): Promise<IPageIEnterpriseLmsOrganizationadmin.ISummary> {
    try {
      return await patchenterpriseLmsOrganizationAdminOrganizationadmins({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed Organization Administrator user.
   *
   * Retrieve full details of an Organization Administrator user by unique
   * identifier.
   *
   * This operation accesses the enterprise_lms_organizationadmin table,
   * returning all user information including account status and tenant
   * context.
   *
   * It requires the organizationadminId path parameter.
   *
   * Authorization roles include systemAdmin and organizationAdmin.
   *
   * Useful for editing and detail inspection in admin interfaces.
   *
   * @param connection
   * @param organizationadminId Unique identifier of the target organization
   *   admin user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":organizationadminId")
  public async atOrganizationAdmin(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationadminId")
    organizationadminId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsOrganizationAdmin> {
    try {
      return await getenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId(
        {
          organizationAdmin,
          organizationadminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing organization administrator user.
   *
   * Update details of an existing organization administrator user by ID.
   *
   * Organization Administrators manage organization settings, users, roles, and
   * billing. Only authorized users with admin roles can perform this
   * operation.
   *
   * The operation updates database fields except for tenant association which
   * is immutable.
   *
   * Input parameters include the organizationadminId to identify the user and a
   * payload containing any updatable user fields.
   *
   * The response returns the updated organization administrator record.
   *
   * Errors are returned if the record does not exist or if email conflicts
   * occur.
   *
   * This operation is essential for maintaining organization admin user
   * information and roles.
   *
   * @param connection
   * @param organizationadminId Unique identifier of the target organization
   *   administrator user
   * @param body Data fields to update an organization administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":organizationadminId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationadminId")
    organizationadminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsOrganizationAdmin.IUpdate,
  ): Promise<IEnterpriseLmsOrganizationAdmin> {
    try {
      return await putenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId(
        {
          organizationAdmin,
          organizationadminId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an organization administrator user by ID.
   *
   * Delete an organization administrator user by their unique ID.
   *
   * This operation permanently removes the user record from the database.
   *
   * Only users with admin privileges are authorized to perform this deletion.
   *
   * Any dependent data or references must be handled appropriately by the
   * database or external logic.
   *
   * Errors are returned if the user ID does not exist.
   *
   * Deletion is irreversible and must be done with caution.
   *
   * Typically used for user cleanup or removing inactive administrators.
   *
   * @param connection
   * @param organizationadminId Unique identifier of the target organization
   *   administrator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":organizationadminId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationadminId")
    organizationadminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminOrganizationadminsOrganizationadminId(
        {
          organizationAdmin,
          organizationadminId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
