import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId } from "../../../../../providers/getenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { putenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId } from "../../../../../providers/putenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId";
import { deleteenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId } from "../../../../../providers/deleteenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId";
import { postenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings } from "../../../../../providers/postenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings";
import { patchenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings } from "../../../../../providers/patchenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings";

import { IEnterpriseLmsTenantSettings } from "../../../../../api/structures/IEnterpriseLmsTenantSettings";
import { IPageIEnterpriseLmsTenantSettings } from "../../../../../api/structures/IPageIEnterpriseLmsTenantSettings";

@Controller("/enterpriseLms/organizationAdmin/tenants/:tenantId/tenantSettings")
export class EnterpriselmsOrganizationadminTenantsTenantsettingsController {
  /**
   * Get tenant configuration details by ID.
   *
   * Retrieve tenant configuration setting details using tenantId and setting id
   * parameters.
   *
   * The response includes detailed branding, color schemes, custom domain, and
   * CSS overrides.
   *
   * Only users with the 'organizationAdmin' role for the tenant may access this
   * data.
   *
   * Errors occur if the tenant or setting ID is invalid or access is
   * unauthorized.
   *
   * @param connection
   * @param tenantId Identifier of the tenant organization
   * @param id Identifier of the tenant setting to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsTenantSettings> {
    try {
      return await getenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId(
        {
          organizationAdmin,
          tenantId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a tenant setting for a specific tenant organization.
   *
   * Update an existing tenant setting for a given tenant organization by the
   * tenantSetting ID.
   *
   * This operation enables modification of branding elements such as logo URIs,
   * primary and secondary colors, custom domain, and CSS overrides tailored for
   * each tenant. The system strictly maintains tenant scoping and integrity
   * during update operations.
   *
   * Security considerations include limiting this API to authorized tenant
   * administrators and system administrators with appropriate permissions.
   * Invalid tenant IDs or setting IDs result in HTTP 404 Not Found.
   *
   * The underlying database entity is enterprise_lms_tenant_settings in the
   * Prisma schema, ensuring all updated data conforms to expected types,
   * validation rules, and business constraints.
   *
   * Clients must supply the full updated tenant settings payload, except for
   * timestamps which are managed automatically by the system.
   *
   * Errors during update (e.g., conflicts, validation failures) will return
   * appropriate HTTP error codes with descriptive messages.
   *
   * Related API operations include fetching tenant settings by ID and creating
   * new tenant settings records.
   *
   * This operation validates uniqueness for tenant-specific custom domain names
   * and branding configurations.
   *
   * @param connection
   * @param tenantId Unique identifier of the target tenant organization
   * @param id Unique identifier of the tenant setting to update.
   * @param body Updated tenant settings information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsTenantSettings.IUpdate,
  ): Promise<IEnterpriseLmsTenantSettings> {
    try {
      return await putenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId(
        {
          organizationAdmin,
          tenantId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a tenant setting for a specific tenant organization.
   *
   * Delete a tenant setting by ID for a specific tenant organization.
   *
   * This operation performs a hard delete, completely removing the tenant
   * setting record from the database. It is irreversible and will cause all
   * associated branding and customization data for this setting to be lost.
   *
   * Access is strictly limited to system administrators and tenants'
   * organization administrators with permissions to manage tenant settings.
   *
   * Failed deletion attempts for non-existent IDs will return HTTP 404 Not
   * Found.
   *
   * Consider other related API operations to manage tenant settings lifecycle.
   *
   * @param connection
   * @param tenantId Unique identifier of the target tenant organization
   * @param id Unique identifier of the tenant setting to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettingsId(
        {
          organizationAdmin,
          tenantId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new tenant configuration setting for the tenant with given
   * tenantId.
   *
   * The request body must contain branding_logo_uri, branding_color_primary,
   * branding_color_secondary, custom_domain, and css_overrides as applicable.
   *
   * Only authorized 'organizationAdmin' users can perform this operation.
   *
   * Returns the created tenant setting object upon success.
   *
   * Handles validation of custom domain uniqueness and tenant existence.
   *
   * @param connection
   * @param tenantId Identifier of the tenant organization
   * @param body Information to create a new tenant configuration setting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsTenantSettings.ICreate,
  ): Promise<IEnterpriseLmsTenantSettings> {
    try {
      return await postenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings(
        {
          organizationAdmin,
          tenantId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search tenant configuration settings with pagination.
   *
   * Retrieve a filtered and paginated list of tenant configuration settings for
   * the tenant specified by tenantId.
   *
   * Supports filtering on branding colors, custom domain, creation date, and
   * sorting options via the request body.
   *
   * Accessible only by users with 'organizationAdmin' role.
   *
   * Returns paginated list of tenant configuration settings matching the search
   * criteria.
   *
   * Operates on the enterprise_lms_tenant_settings database model.
   *
   * @param connection
   * @param tenantId Identifier of the tenant organization
   * @param body Search criteria and pagination parameters for tenant settings
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("tenantId")
    tenantId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsTenantSettings.IRequest,
  ): Promise<IPageIEnterpriseLmsTenantSettings> {
    try {
      return await patchenterpriseLmsOrganizationAdminTenantsTenantIdTenantSettings(
        {
          organizationAdmin,
          tenantId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
