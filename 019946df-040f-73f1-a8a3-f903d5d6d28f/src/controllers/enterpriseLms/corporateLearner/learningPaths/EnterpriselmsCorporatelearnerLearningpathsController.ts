import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsCorporateLearnerLearningPathsLearningPathId } from "../../../../providers/getenterpriseLmsCorporateLearnerLearningPathsLearningPathId";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { putenterpriseLmsCorporateLearnerLearningPathsLearningPathId } from "../../../../providers/putenterpriseLmsCorporateLearnerLearningPathsLearningPathId";
import { deleteenterpriseLmsCorporateLearnerLearningPathsLearningPathId } from "../../../../providers/deleteenterpriseLmsCorporateLearnerLearningPathsLearningPathId";
import { postenterpriseLmsCorporateLearnerLearningPaths } from "../../../../providers/postenterpriseLmsCorporateLearnerLearningPaths";

import { IEnterpriseLmsLearningPaths } from "../../../../api/structures/IEnterpriseLmsLearningPaths";

@Controller("/enterpriseLms/corporateLearner/learningPaths")
export class EnterpriselmsCorporatelearnerLearningpathsController {
  /**
   * Retrieve a specific learning path by ID from the Enterprise LMS.
   *
   * Retrieve the full details of a specific learning path by its unique
   * identifier within the Enterprise LMS system. This includes all relevant
   * metadata such as the code, title, current status, descriptions, and
   * timestamps marking creation and updates.
   *
   * Authorized users with suitable roles and permissions can access the
   * learning path details. Strict tenant data isolation is enforced to ensure
   * data privacy and security.
   *
   * The underlying database table is `enterprise_lms_learning_paths` which
   * contains all learning path entities, supporting soft deletion semantics
   * where applicable.
   *
   * The operation returns the learning path entity or an error if the learning
   * path ID does not exist or access is denied.
   *
   * Errors include 404 Not Found if the learning path ID is invalid, or 403
   * Forbidden if authorization fails.
   *
   * @param connection
   * @param learningPathId Unique identifier (UUID) of the target learning path
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":learningPathId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsLearningPaths> {
    try {
      return await getenterpriseLmsCorporateLearnerLearningPathsLearningPathId({
        corporateLearner,
        learningPathId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific learning path by ID in the Enterprise LMS.
   *
   * Update an existing learning path identified by its ID in the Enterprise
   * LMS. Input data allows modification of properties such as title, status,
   * and description.
   *
   * The system validates the update payload including enforcing uniqueness of
   * code when applicable.
   *
   * Tenant data isolation safeguards keep changes scoped to the correct tenant.
   * Only authorized users with the 'corporateLearner' role may perform
   * updates.
   *
   * If the learning path does not exist or the user is unauthorized,
   * appropriate errors are returned.
   *
   * @param connection
   * @param learningPathId Unique identifier (UUID) of the target learning path
   *   to update
   * @param body Update data for the learning path
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":learningPathId")
  public async update(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsLearningPaths.IUpdate,
  ): Promise<IEnterpriseLmsLearningPaths> {
    try {
      return await putenterpriseLmsCorporateLearnerLearningPathsLearningPathId({
        corporateLearner,
        learningPathId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific learning path by ID in the Enterprise LMS.
   *
   * Delete a specific learning path by its unique ID. This is a hard delete
   * operation that removes all records permanently from the database.
   *
   * Tenant isolation and role-based permissions limit deletion to authorized
   * users.
   *
   * If the learning path does not exist, a 404 error is returned. If the user
   * lacks permissions, a 403 error is returned.
   *
   * @param connection
   * @param learningPathId Unique identifier (UUID) of the learning path to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":learningPathId")
  public async erase(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("learningPathId")
    learningPathId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsCorporateLearnerLearningPathsLearningPathId(
        {
          corporateLearner,
          learningPathId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new learning path in the Enterprise LMS.
   *
   * Create a new learning path within the Enterprise LMS. The creation data
   * must include unique code, title, and initial status. Optional detailed
   * descriptions can be provided.
   *
   * The system performs validation for code uniqueness within the tenant and
   * enforces required fields. Upon successful creation, the learning path
   * entity including timestamps is returned.
   *
   * Tenant-based data isolation is maintained, and only authorized users with
   * the 'corporateLearner' role scope can perform this operation.
   *
   * Errors may occur if required fields are missing, code is not unique, or if
   * authorization fails.
   *
   * @param connection
   * @param body Creation data for a learning path
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsLearningPaths.ICreate,
  ): Promise<IEnterpriseLmsLearningPaths> {
    try {
      return await postenterpriseLmsCorporateLearnerLearningPaths({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
