import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchenterpriseLmsCorporateLearnerContentsContentIdContentLocalizations } from "../../../../../providers/patchenterpriseLmsCorporateLearnerContentsContentIdContentLocalizations";
import { CorporatelearnerAuth } from "../../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../../decorators/payload/CorporatelearnerPayload";
import { getenterpriseLmsCorporateLearnerContentsContentIdContentLocalizationsId } from "../../../../../providers/getenterpriseLmsCorporateLearnerContentsContentIdContentLocalizationsId";

import { IPageIEnterpriseLmsContentLocalization } from "../../../../../api/structures/IPageIEnterpriseLmsContentLocalization";
import { IEnterpriseLmsContentLocalization } from "../../../../../api/structures/IEnterpriseLmsContentLocalization";

@Controller(
  "/enterpriseLms/corporateLearner/contents/:contentId/contentLocalizations",
)
export class EnterpriselmsCorporatelearnerContentsContentlocalizationsController {
  /**
   * Search and retrieve paginated list of content localizations for a content
   * item.
   *
   * Retrieve a filtered and paginated list of localized content versions
   * associated with a specific content item. Each localization record contains
   * language-specific title and description fields.
   *
   * This endpoint enables multi-language support by returning localizations
   * such as English, French, or other ISO 639-1 coded languages linked to the
   * main content.
   *
   * Security is enforced via tenant isolation and permissions restricting
   * access to authorized users with roles capable of viewing content details.
   *
   * The response includes localized titles and descriptions optimized for
   * display in user interfaces requesting specific language versions.
   *
   * This operation is related to content management and should be used in
   * conjunction with content retrieval APIs.
   *
   * @param connection
   * @param contentId Unique identifier of the target content item
   * @param body Search criteria and pagination parameters for content
   *   localization filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsContentLocalization.IRequest,
  ): Promise<IPageIEnterpriseLmsContentLocalization> {
    try {
      return await patchenterpriseLmsCorporateLearnerContentsContentIdContentLocalizations(
        {
          corporateLearner,
          contentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info about a specific content localization.
   *
   * Retrieve detailed information of a content localization record by its ID
   * and associated content item ID.
   *
   * This operation is part of the content localization management under the
   * content management module, facilitating fine-grained multi-language
   * support.
   *
   * Only users with proper authorization within the tenant can access this
   * data.
   *
   * The response includes all details necessary for display or editing of the
   * localization.
   *
   * @param connection
   * @param contentId Unique identifier of the target content item
   * @param id Unique identifier of the content localization record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsContentLocalization> {
    try {
      return await getenterpriseLmsCorporateLearnerContentsContentIdContentLocalizationsId(
        {
          corporateLearner,
          contentId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
