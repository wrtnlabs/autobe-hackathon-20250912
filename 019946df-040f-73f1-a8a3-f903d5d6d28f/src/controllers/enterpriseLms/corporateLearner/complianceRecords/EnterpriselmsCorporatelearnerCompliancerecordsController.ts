import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getenterpriseLmsCorporateLearnerComplianceRecordsId } from "../../../../providers/getenterpriseLmsCorporateLearnerComplianceRecordsId";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";

import { IEnterpriseLmsComplianceRecords } from "../../../../api/structures/IEnterpriseLmsComplianceRecords";

@Controller("/enterpriseLms/corporateLearner/complianceRecords/:id")
export class EnterpriselmsCorporatelearnerCompliancerecordsController {
  /**
   * Retrieve a specific compliance record by ID.
   *
   * Retrieve detailed information about a specific compliance record by its
   * unique identifier.
   *
   * This operation fetches compliance status, types, and audit details stored
   * in enterprise_lms_compliance_records.
   *
   * Only authorized users with role 'corporateLearner' can access this
   * information.
   *
   * Validates path parameter ID as a UUID and returns comprehensive compliance
   * record data on success.
   *
   * Handles errors appropriately for non-existent or unauthorized requests.
   *
   * @param connection
   * @param id Unique identifier of the compliance record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async atComplianceRecord(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsComplianceRecords> {
    try {
      return await getenterpriseLmsCorporateLearnerComplianceRecordsId({
        corporateLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
