import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsCorporateLearnerEnrollments } from "../../../../providers/postenterpriseLmsCorporateLearnerEnrollments";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { patchenterpriseLmsCorporateLearnerEnrollments } from "../../../../providers/patchenterpriseLmsCorporateLearnerEnrollments";
import { getenterpriseLmsCorporateLearnerEnrollmentsId } from "../../../../providers/getenterpriseLmsCorporateLearnerEnrollmentsId";

import { IEnterpriseLmsEnrollment } from "../../../../api/structures/IEnterpriseLmsEnrollment";
import { IPageIEnterpriseLmsEnrollment } from "../../../../api/structures/IPageIEnterpriseLmsEnrollment";

@Controller("/enterpriseLms/corporateLearner/enrollments")
export class EnterpriselmsCorporatelearnerEnrollmentsController {
  /**
   * Create a new learner enrollment in a learning path.
   *
   * Creates a new enrollment of a learner in a learning path.
   *
   * This operation accepts enrollment details such as learner ID and target
   * learning path. It applies business rules including prerequisite checks
   * before enrollment.
   *
   * Only authorized users can perform this operation.
   *
   * Returns the created enrollment entity with full details including creation
   * timestamp.
   *
   * @param connection
   * @param body Enrollment creation data including learner and learning path
   *   identifiers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createEnrollment(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsEnrollment.ICreate,
  ): Promise<IEnterpriseLmsEnrollment> {
    try {
      return await postenterpriseLmsCorporateLearnerEnrollments({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a list of learner enrollments with filtering and
   * pagination.
   *
   * Retrieves a filtered, sorted, and paginated list of learner enrollments for
   * learning paths.
   *
   * The operation accepts extensive search criteria in the request body such as
   * learner identification, learning path filters, enrollment status, date
   * range filtering, and paging options.
   *
   * Security controls ensure that returned data is scoped to the requesting
   * user's permissions, preventing exposure of enrollments from other tenants.
   *
   * The response includes a paginated list of enrollments summarized with
   * essential properties for display in management UIs or reporting tools.
   *
   * This API supports efficient querying of enrollment data to facilitate
   * administrative actions and learner progress monitoring.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for enrollment
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexEnrollments(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsEnrollment.IRequest,
  ): Promise<IPageIEnterpriseLmsEnrollment.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerEnrollments({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific enrollment.
   *
   * Fetches detailed enrollment information for the specified enrollment ID.
   *
   * This operation returns a single enrollment entity with comprehensive
   * details including status, associated learner and learning path references,
   * and timestamps.
   *
   * Access control ensures that only authorized users can view enrollment
   * details within their organization or tenant.
   *
   * If no enrollment matches the provided ID, an appropriate error is returned.
   *
   * @param connection
   * @param id Unique identifier of the enrollment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atEnrollment(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsEnrollment> {
    try {
      return await getenterpriseLmsCorporateLearnerEnrollmentsId({
        corporateLearner,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
