import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts } from "../../../../../../providers/postenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts";
import { CorporatelearnerAuth } from "../../../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../../../decorators/payload/CorporatelearnerPayload";
import { patchenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts } from "../../../../../../providers/patchenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts";
import { getenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId } from "../../../../../../providers/getenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId";
import { putenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId } from "../../../../../../providers/putenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId";

import { IEnterpriseLmsForumPost } from "../../../../../../api/structures/IEnterpriseLmsForumPost";
import { IPageIEnterpriseLmsForumPost } from "../../../../../../api/structures/IPageIEnterpriseLmsForumPost";

@Controller(
  "/enterpriseLms/corporateLearner/forums/:forumId/forumThreads/:forumThreadId/forumPosts",
)
export class EnterpriselmsCorporatelearnerForumsForumthreadsForumpostsController {
  /**
   * Create a new forum post in a forum thread.
   *
   * Create a new forum post under a specified forum thread using the provided
   * post content and author information.
   *
   * This operation inserts a record into the `enterprise_lms_forum_posts`
   * table, linking the post to the given forum and forum thread.
   *
   * Validation includes verifying thread existence and permission to post. The
   * post content must be a valid textual body.
   *
   * The response returns the freshly created post including its unique ID,
   * timestamps, and author data.
   *
   * Security is enforced to restrict creation to authorized users within the
   * tenant.
   *
   * This operation performs a write action affecting the database state.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @param forumThreadId Unique identifier of the target forum thread
   * @param body New forum post creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForumPost.ICreate,
  ): Promise<IEnterpriseLmsForumPost> {
    try {
      return await postenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts(
        {
          corporateLearner,
          forumId,
          forumThreadId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve forum posts within a forum thread.
   *
   * Retrieve a list of forum posts within a designated forum thread identified
   * by forumId and forumThreadId.
   *
   * This operation interacts with the `enterprise_lms_forum_posts` table, which
   * contains individual posts authored by corporate learners within forum
   * threads. It enables clients to paginate and filter posts based on criteria
   * such as creation date or author.
   *
   * Security measures ensure only authenticated and authorized users within the
   * tenant can access posts. The parent forum and thread context define the
   * scope.
   *
   * The response includes detailed post information including content body,
   * author id, timestamps, and soft deletion status. This endpoint does not
   * modify data.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @param forumThreadId Unique identifier of the target forum thread
   * @param body Search criteria and pagination parameters for forum posts
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForumPost.IRequest,
  ): Promise<IPageIEnterpriseLmsForumPost> {
    try {
      return await patchenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPosts(
        {
          corporateLearner,
          forumId,
          forumThreadId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single forum post by its ID.
   *
   * Fetch detailed information about a specific forum post using its unique
   * identifier forumPostId, within the context of its parent forum and forum
   * thread.
   *
   * The forum post data comes from the `enterprise_lms_forum_posts` table and
   * includes content body, author, timestamps, and soft deletion status.
   *
   * The operation enforces tenant and role-based security to ensure only
   * authorized users can access the post.
   *
   * The response returns the full forum post entity for display or further
   * processing.
   *
   * No modifications occur as this is a read-only operation.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @param forumThreadId Unique identifier of the target forum thread
   * @param forumPostId Unique identifier of the target forum post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":forumPostId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
    @TypedParam("forumPostId")
    forumPostId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsForumPost> {
    try {
      return await getenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId(
        {
          corporateLearner,
          forumId,
          forumThreadId,
          forumPostId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing forum post.
   *
   * Update the content and metadata of an existing forum post specified by
   * forumPostId within its parent forum and thread.
   *
   * This write operation modifies the `enterprise_lms_forum_posts` record.
   *
   * It enforces access control to ensure only authorized users, typically
   * authors or admins, can perform the update.
   *
   * The client must provide the complete updated post data.
   *
   * The response returns the updated forum post entity reflecting the changes.
   *
   * Audit logging and concurrency control policies apply.
   *
   * This operation does not perform soft deletion or archival.
   *
   * @param connection
   * @param forumId Unique identifier of the target forum
   * @param forumThreadId Unique identifier of the target forum thread
   * @param forumPostId Unique identifier of the target forum post
   * @param body Updated forum post information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":forumPostId")
  public async update(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("forumId")
    forumId: string & tags.Format<"uuid">,
    @TypedParam("forumThreadId")
    forumThreadId: string & tags.Format<"uuid">,
    @TypedParam("forumPostId")
    forumPostId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsForumPost.IUpdate,
  ): Promise<IEnterpriseLmsForumPost> {
    try {
      return await putenterpriseLmsCorporateLearnerForumsForumIdForumThreadsForumThreadIdForumPostsForumPostId(
        {
          corporateLearner,
          forumId,
          forumThreadId,
          forumPostId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
