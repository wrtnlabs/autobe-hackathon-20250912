import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postenterpriseLmsCorporateLearnerGroupProjects } from "../../../../providers/postenterpriseLmsCorporateLearnerGroupProjects";
import { CorporatelearnerAuth } from "../../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../../decorators/payload/CorporatelearnerPayload";
import { patchenterpriseLmsCorporateLearnerGroupProjects } from "../../../../providers/patchenterpriseLmsCorporateLearnerGroupProjects";
import { getenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId } from "../../../../providers/getenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId";
import { putenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId } from "../../../../providers/putenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId";
import { deleteenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId } from "../../../../providers/deleteenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId";

import { IEnterpriseLmsGroupProject } from "../../../../api/structures/IEnterpriseLmsGroupProject";
import { IPageIEnterpriseLmsGroupProject } from "../../../../api/structures/IPageIEnterpriseLmsGroupProject";

@Controller("/enterpriseLms/corporateLearner/groupProjects")
export class EnterpriselmsCorporatelearnerGroupprojectsController {
  /**
   * Create a new group project for collaborative workspaces.
   *
   * The client supplies required data including tenant_id (UUID), owner_id
   * (UUID), title, optional description, and start/end timestamps.
   *
   * The API saves the new record to the enterprise_lms_group_projects table and
   * returns the full created entity.
   *
   * Authorized roles like corporateLearner may perform this POST operation.
   * Timestamps for creation and update are managed by the system.
   *
   * Request body must adhere to IEnterpriseLmsGroupProject.ICreate schema.
   *
   * @param connection
   * @param body Group project creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsGroupProject.ICreate,
  ): Promise<IEnterpriseLmsGroupProject> {
    try {
      return await postenterpriseLmsCorporateLearnerGroupProjects({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered paginated list of group projects.
   *
   * Retrieve a filtered, sorted, and paginated list of tenant-specific group
   * projects. Search criteria may include title, status, owner, and creation
   * dates.
   *
   * This operation ensures multi-tenant data isolation and returns project
   * summaries suitable for list presentation.
   *
   * The response contains pagination metadata and an array of group project
   * summary items.
   *
   * Only authorized corporate learners within the tenant can access this
   * information.
   *
   * @param connection
   * @param body Filtering and pagination parameters for group projects
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsGroupProject.IRequest,
  ): Promise<IPageIEnterpriseLmsGroupProject.ISummary> {
    try {
      return await patchenterpriseLmsCorporateLearnerGroupProjects({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a group project by ID.
   *
   * Retrieve detailed information about a single group project by its unique
   * ID.
   *
   * This operation accesses the 'enterprise_lms_group_projects' table
   * representing collaborative workspaces owned by corporate learners in tenant
   * organizations. The response includes project title, description, ownership,
   * and timeline.
   *
   * Security ensures only authorized roles like corporate learners may access
   * this data. The operation uses a GET method and requires the path parameter
   * 'groupProjectId' as UUID.
   *
   * No request body is needed for this operation, and it returns the full group
   * project entity details.
   *
   * @param connection
   * @param groupProjectId Unique identifier of the target group project
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":groupProjectId")
  public async at(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("groupProjectId")
    groupProjectId: string & tags.Format<"uuid">,
  ): Promise<IEnterpriseLmsGroupProject> {
    try {
      return await getenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId({
        corporateLearner,
        groupProjectId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update group project data by ID.
   *
   * Update an existing group project by its unique ID.
   *
   * Requires the path parameter 'groupProjectId' of UUID type and a JSON
   * request body matching IEnterpriseLmsGroupProject.IUpdate. The entity is
   * updated in the database and the updated version is returned.
   *
   * Only authorized corporateLearner users may perform updates. Creation and
   * update timestamps are system managed.
   *
   * All fields in the update schema should be included as the operation expects
   * a full resource update.
   *
   * @param connection
   * @param groupProjectId Unique identifier of the group project to update
   * @param body Updated group project data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":groupProjectId")
  public async update(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("groupProjectId")
    groupProjectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEnterpriseLmsGroupProject.IUpdate,
  ): Promise<IEnterpriseLmsGroupProject> {
    try {
      return await putenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId({
        corporateLearner,
        groupProjectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a group project by ID.
   *
   * Permanently delete a group project by its unique ID.
   *
   * The operation targets the enterprise_lms_group_projects table and requires
   * the 'groupProjectId' UUID path parameter identifying the project to be
   * deleted.
   *
   * Only authorized corporateLearner users may execute this operation.
   *
   * This operation performs a hard delete and returns no content. Deleted data
   * cannot be recovered.
   *
   * Use carefully due to the irreversible nature of the deletion.
   *
   * @param connection
   * @param groupProjectId Unique identifier of the group project to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":groupProjectId")
  public async erase(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedParam("groupProjectId")
    groupProjectId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteenterpriseLmsCorporateLearnerGroupProjectsGroupProjectId(
        {
          corporateLearner,
          groupProjectId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
