import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminJoin } from "../../../providers/postauthSystemAdminJoin";
import { SystemadminAuth } from "../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../decorators/payload/SystemadminPayload";
import { postauthSystemAdminLogin } from "../../../providers/postauthSystemAdminLogin";
import { postauthSystemAdminRefresh } from "../../../providers/postauthSystemAdminRefresh";

import { IEnterpriseLmsSystemAdmin } from "../../../api/structures/IEnterpriseLmsSystemAdmin";

@Controller("/auth/systemAdmin")
export class AuthSystemadminController {
  /**
   * Register a new systemAdmin account and issue initial JWT tokens.
   *
   * This is the registration (join) endpoint for the systemAdmin role in
   * Enterprise LMS. It handles creating a new system administrator account with
   * essential information and secure password hashing. Allows system admins to
   * be created for global system management.
   *
   * @param connection
   * @param body Payload to register a new systemAdmin user.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.ICreate,
  ): Promise<IEnterpriseLmsSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminJoin({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate systemAdmin user and provide access tokens.
   *
   * Login endpoint for systemAdmin users to authenticate and receive JWT access
   * tokens. Validates credentials securely and issues tokens upon success.
   *
   * @param connection
   * @param body User credentials for systemAdmin login.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.ILogin,
  ): Promise<IEnterpriseLmsSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminLogin({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT access and refresh tokens for systemAdmin.
   *
   * Refresh JWT tokens for authenticated systemAdmin users to maintain secure
   * sessions without re-login.
   *
   * @param connection
   * @param body Refresh token payload for systemAdmin.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IEnterpriseLmsSystemAdmin.IRefresh,
  ): Promise<IEnterpriseLmsSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminRefresh({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
