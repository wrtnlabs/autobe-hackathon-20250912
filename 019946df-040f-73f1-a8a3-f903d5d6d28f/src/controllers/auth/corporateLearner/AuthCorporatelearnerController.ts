import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthCorporateLearnerJoin } from "../../../providers/postauthCorporateLearnerJoin";
import { CorporatelearnerAuth } from "../../../decorators/CorporatelearnerAuth";
import { CorporatelearnerPayload } from "../../../decorators/payload/CorporatelearnerPayload";
import { postauthCorporateLearnerLogin } from "../../../providers/postauthCorporateLearnerLogin";
import { postauthCorporateLearnerRefresh } from "../../../providers/postauthCorporateLearnerRefresh";

import { IEnterpriseLmsCorporateLearner } from "../../../api/structures/IEnterpriseLmsCorporateLearner";

@Controller("/auth/corporateLearner")
export class AuthCorporatelearnerController {
  /**
   * Create a new corporate learner account in enterprise_lms_corporatelearner
   * table and issue JWT token.
   *
   * Register a new corporate learner account for Enterprise LMS system. This
   * operation creates a new user record in enterprise_lms_corporatelearner
   * table with hashed password and sets default active status. The response
   * includes JWT authorization token upon successful creation.
   *
   * It requires uniqueness of email and valid tenant context for multi-tenancy.
   *
   * Related operations: login, refresh.
   *
   * @param connection
   * @param body Information required to create a corporate learner account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.ICreate,
  ): Promise<IEnterpriseLmsCorporateLearner.IAuthorized> {
    try {
      return await postauthCorporateLearnerJoin({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate corporate learner and provide JWT tokens from
   * enterprise_lms_corporatelearner table.
   *
   * Authenticate corporate learner credentials and issue JWT access and refresh
   * tokens.
   *
   * Requires valid email and password. Account status must be active.
   *
   * Related operations: join, refresh.
   *
   * @param connection
   * @param body Credentials required for corporate learner login.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.ILogin,
  ): Promise<IEnterpriseLmsCorporateLearner.IAuthorized> {
    try {
      return await postauthCorporateLearnerLogin({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew JWT access token for corporate learner.
   *
   * Refresh JWT access token for corporate learner using a valid refresh token.
   *
   * Ensures continuous session without login.
   *
   * Related operations: join, login.
   *
   * @param connection
   * @param body Refresh token request payload.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @CorporatelearnerAuth()
    corporateLearner: CorporatelearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsCorporateLearner.IRequestRefresh,
  ): Promise<IEnterpriseLmsCorporateLearner.IAuthorized> {
    try {
      return await postauthCorporateLearnerRefresh({
        corporateLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
