import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthExternalLearnerJoin } from "../../../../providers/postauthExternalLearnerJoin";
import { ExternallearnerAuth } from "../../../../decorators/ExternallearnerAuth";
import { ExternallearnerPayload } from "../../../../decorators/payload/ExternallearnerPayload";

import { IEnterpriseLmsExternalLearner } from "../../../../api/structures/IEnterpriseLmsExternalLearner";

@Controller("/auth/externalLearner/join")
export class AuthExternallearnerJoinController {
  /**
   * Create a new external learner guest account and issue initial tokens.
   *
   * Register a new external learner guest account by providing necessary
   * profile and credential information.
   *
   * This operation creates a new externalLearner record in the
   * enterprise_lms_externallearner table, hashing the password, validating
   * email uniqueness, and issuing initial authentication tokens specific to
   * guest access with limited permissions.
   *
   * The operation uses the provided external learner credentials and profile
   * data to establish a temporary guest session according to the
   * externalLearner role's constraints and schema validation.
   *
   * Security and compliance measures include input validation, password
   * strength checking, and token issuance with scoped claims reflecting the
   * guest role.
   *
   * There is no login operation for guests; only join and refresh are
   * applicable.
   *
   * Token refresh operation follows this for maintaining session continuity.
   *
   * @param connection
   * @param body New external learner join request containing registration
   *   details
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinExternalLearner(
    @ExternallearnerAuth()
    externalLearner: ExternallearnerPayload,
    @TypedBody()
    body: IEnterpriseLmsExternalLearner.IJoin,
  ): Promise<IEnterpriseLmsExternalLearner.IAuthorized> {
    try {
      return await postauthExternalLearnerJoin({
        externalLearner,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
