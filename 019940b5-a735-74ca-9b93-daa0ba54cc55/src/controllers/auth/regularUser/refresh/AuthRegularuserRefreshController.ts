import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthRegularUserRefresh } from "../../../../providers/postauthRegularUserRefresh";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IEventRegistrationRegularUser } from "../../../../api/structures/IEventRegistrationRegularUser";

@Controller("/auth/regularUser/refresh")
export class AuthRegularuserRefreshController {
  /**
   * Refresh JWT tokens for regular user (event_registration_regular_users).
   *
   * Refreshes JWT access tokens using a valid refresh token for a regular user
   * as per 'event_registration_regular_users' schema.
   *
   * @param connection
   * @param body Request body containing refresh token information.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshRegularUser(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IEventRegistrationRegularUser.IRefresh,
  ): Promise<IEventRegistrationRegularUser.IAuthorized> {
    try {
      return await postauthRegularUserRefresh({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
