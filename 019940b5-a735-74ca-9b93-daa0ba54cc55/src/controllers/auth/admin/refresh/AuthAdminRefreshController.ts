import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminRefresh } from "../../../../providers/postauthAdminRefresh";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IEventRegistrationAdmin } from "../../../../api/structures/IEventRegistrationAdmin";

@Controller("/auth/admin/refresh")
export class AuthAdminRefreshController {
  /**
   * Refresh admin JWT access token.
   *
   * Refresh JWT access tokens for authenticated admin users using valid refresh
   * tokens. Ensures secure session continuation. Endpoint accessible only to
   * already authenticated admins.
   *
   * @param connection
   * @param body Admin token refresh request containing valid refresh token
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshAdminToken(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationAdmin.IRefresh,
  ): Promise<IEventRegistrationAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
