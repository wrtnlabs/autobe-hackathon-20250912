import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminLogin } from "../../../../providers/postauthAdminLogin";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IEventRegistrationAdmin } from "../../../../api/structures/IEventRegistrationAdmin";

@Controller("/auth/admin/login")
export class AuthAdminLoginController {
  /**
   * Authenticate as admin and receive JWT token.
   *
   * Authenticate an admin user with their email and password hash. Verifies
   * credentials against the 'event_registration_admins' table and returns a JWT
   * authorization token on success. Ensures email verification status is true
   * before authentication. Restricted to admin role users.
   *
   * @param connection
   * @param body Admin login request payload containing email and password hash
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginAdminUser(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationAdmin.ILogin,
  ): Promise<IEventRegistrationAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
