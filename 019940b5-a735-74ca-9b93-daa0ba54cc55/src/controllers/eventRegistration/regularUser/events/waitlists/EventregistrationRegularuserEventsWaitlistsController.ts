import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteeventRegistrationRegularUserEventsEventIdWaitlistsEventWaitlistId } from "../../../../../providers/deleteeventRegistrationRegularUserEventsEventIdWaitlistsEventWaitlistId";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";

@Controller(
  "/eventRegistration/regularUser/events/:eventId/waitlists/:eventWaitlistId",
)
export class EventregistrationRegularuserEventsWaitlistsController {
  /**
   * Erase waitlist entry by eventId and eventWaitlistId.
   *
   * Deletes a waitlist record from the event_registration_event_waitlists table
   * permanently. It requires both eventId and eventWaitlistId as path
   * parameters, both UUIDs, which uniquely identify the event and the specific
   * waitlist entry respectively.
   *
   * Authentication with the "user" role is required to execute this operation.
   *
   * No request body is needed, and the operation returns no response body upon
   * success.
   *
   * This operation is critical in managing event waitlists, ensuring users
   * removed from waitlists are no longer considered for promotions or
   * notifications.
   *
   * Any invalid or unauthorized attempts are rejected with appropriate error
   * messages.
   *
   * @param connection
   * @param eventId Unique identifier of the target event
   * @param eventWaitlistId Unique identifier of the waitlist entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseWaitlistEntry(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationRegularUserEventsEventIdWaitlistsEventWaitlistId(
        {
          regularUser,
          eventId,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
