import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationRegularUserRegularUsersRegularUserIdNotifications } from "../../../../../providers/patcheventRegistrationRegularUserRegularUsersRegularUserIdNotifications";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { geteventRegistrationRegularUserRegularUsersRegularUserIdNotificationsNotificationId } from "../../../../../providers/geteventRegistrationRegularUserRegularUsersRegularUserIdNotificationsNotificationId";

import { IPageIEventRegistrationNotifications } from "../../../../../api/structures/IPageIEventRegistrationNotifications";
import { IEventRegistrationNotifications } from "../../../../../api/structures/IEventRegistrationNotifications";
import { IEventRegistrationNotification } from "../../../../../api/structures/IEventRegistrationNotification";

@Controller(
  "/eventRegistration/regularUser/regularUsers/:regularUserId/notifications",
)
export class EventregistrationRegularuserRegularusersNotificationsController {
  /**
   * Get paginated notifications for a regular user.
   *
   * Retrieve a paginated list of notifications for a specific regular user.
   * Notifications include registration confirmations, waitlist promotions,
   * event updates, and other alerts.
   *
   * Supports pagination and filtering via request body parameters.
   *
   * Ensures that only the correct user can access their notifications.
   *
   * This operation reads from the event_registration_notifications table
   * indexed by user ID and created date.
   *
   * Returns paginated notification entries with read status and content
   * details.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user to retrieve
   *   notifications for
   * @param body Parameters for pagination, filtering, and sorting notifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async getNotifications(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationNotifications.IRequest,
  ): Promise<IPageIEventRegistrationNotifications> {
    try {
      return await patcheventRegistrationRegularUserRegularUsersRegularUserIdNotifications(
        {
          regularUser,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single notification of a regular user.
   *
   * Retrieve a specific notification belonging to a regular user by their
   * notification ID. This operation fetches detailed information about the
   * notification including its type, content, read status, and timestamps.
   *
   * Security considerations include ensuring the requesting user is
   * authenticated and authorized to access the specified notification to
   * prevent unauthorized data disclosure.
   *
   * The underlying database entity is the 'event_registration_notifications'
   * table, which associates notifications with regular users or keeps them as
   * system-wide notifications. The notification's read status indicates whether
   * the user has seen the notification.
   *
   * Validation rules enforce the notification ID and regular user ID to be
   * valid UUIDs and that the notification belongs to the user.
   *
   * This endpoint complements notification listing and management APIs.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param notificationId Unique identifier of the target notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationNotification> {
    try {
      return await geteventRegistrationRegularUserRegularUsersRegularUserIdNotificationsNotificationId(
        {
          regularUser,
          regularUserId,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
