import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationRegularUserRegularUsersRegularUserIdAttendees } from "../../../../../providers/posteventRegistrationRegularUserRegularUsersRegularUserIdAttendees";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { patcheventRegistrationRegularUserRegularUsersRegularUserIdAttendees } from "../../../../../providers/patcheventRegistrationRegularUserRegularUsersRegularUserIdAttendees";
import { geteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId } from "../../../../../providers/geteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId";
import { puteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId } from "../../../../../providers/puteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId";
import { deleteeventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId } from "../../../../../providers/deleteeventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId";

import { IEventRegistrationEventAttendee } from "../../../../../api/structures/IEventRegistrationEventAttendee";
import { IPageIEventRegistrationEventAttendee } from "../../../../../api/structures/IPageIEventRegistrationEventAttendee";

@Controller(
  "/eventRegistration/regularUser/regularUsers/:regularUserId/attendees",
)
export class EventregistrationRegularuserRegularusersAttendeesController {
  /**
   * Create a new event attendee record for a regular user.
   *
   * Registers a regular user as an attendee for a specific event by creating a
   * new attendee record.
   *
   * The request body must include the necessary data to associate the user with
   * the event.
   *
   * On success, returns the detailed attendee record including timestamps and
   * IDs.
   *
   * This operation supports the event sign-up workflow.
   *
   * Authorization roles include authenticated regular users and admins.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param body Creation info for registering event attendee
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createEventAttendeeForUser(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.ICreate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await posteventRegistrationRegularUserRegularUsersRegularUserIdAttendees(
        {
          regularUser,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated list of event attendees for a regular user.
   *
   * Retrieves a paginated collection of event attendee records associated with
   * the specified regular user. This allows viewing which events the user has
   * attended or signed up for.
   *
   * The request body specifies pagination and filtering criteria.
   *
   * This operation returns a paginated list of attendee summaries.
   *
   * Authorization roles include authenticated regular users and admins.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param body Search criteria and pagination parameters for filtering event
   *   attendees
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexEventAttendeesByUser(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IRequest,
  ): Promise<IPageIEventRegistrationEventAttendee.ISummary> {
    try {
      return await patcheventRegistrationRegularUserRegularUsersRegularUserIdAttendees(
        {
          regularUser,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed event attendee record by ID for a regular user.
   *
   * Retrieves full details of a specific event attendee record for the given
   * regular user. This includes all properties of the attendee record such as
   * event association and timestamps.
   *
   * Access control restricts viewing to the owning user or admins.
   *
   * No request body is required.
   *
   * Returns the event attendee entity as the response body.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param eventAttendeeId Unique identifier of the event attendee record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventAttendeeId")
  public async atEventAttendeeByUser(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await geteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId(
        {
          regularUser,
          regularUserId,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an event attendee record for a regular user.
   *
   * This endpoint allows updating an existing event attendee record for a
   * regular user. The attendee represents the confirmed registration of the
   * user to an event in the system.
   *
   * The update operation requires both the regularUserId and eventAttendeeId
   * path parameters to locate and identify the specific event attendee record.
   *
   * The authorized roles that can perform this operation include regularUser
   * (owner), eventOrganizer (event manager), and admin.
   *
   * The request body must include the properties defined in
   * IEventRegistrationEventAttendee.IUpdate, enabling modification of permitted
   * attendee attributes while preserving audit and immutable fields.
   *
   * Successful operation returns the updated event attendee object reflecting
   * the new registration details.
   *
   * Errors are raised if the user or attendee record does not exist or if
   * authorization fails.
   *
   * This operation is crucial for managing attendee information, maintaining
   * attendance accuracy, and supporting event management workflows.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventAttendeeId Unique identifier of the event attendee record
   * @param body Event attendee data for update
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventAttendeeId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventAttendee.IUpdate,
  ): Promise<IEventRegistrationEventAttendee> {
    try {
      return await puteventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId(
        {
          regularUser,
          regularUserId,
          eventAttendeeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event attendee record for a regular user.
   *
   * This API operation permanently deletes the event attendee record for a
   * given regularUserId and eventAttendeeId. The record represents confirmed
   * attendance of the user for the event.
   *
   * Only authorized roles such as regularUser, eventOrganizer, and admin can
   * perform this deletion.
   *
   * No request body is required. Upon success, the response contains no
   * content.
   *
   * This endpoint enforces business rules for cancellation and attendance
   * management.
   *
   * Errors are returned if the record does not exist or the caller lacks the
   * necessary permissions.
   *
   * Deleting an attendee may trigger waitlist promotions as handled outside
   * this operation.
   *
   * This ensures event attendance metrics remain consistent and accurate.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventAttendeeId Unique identifier of the event attendee record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventAttendeeId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventAttendeeId")
    eventAttendeeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationRegularUserRegularUsersRegularUserIdAttendeesEventAttendeeId(
        {
          regularUser,
          regularUserId,
          eventAttendeeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
