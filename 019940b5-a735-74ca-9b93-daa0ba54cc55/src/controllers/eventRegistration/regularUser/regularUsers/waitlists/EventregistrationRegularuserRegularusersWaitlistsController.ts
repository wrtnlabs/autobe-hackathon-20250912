import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationRegularUserRegularUsersRegularUserIdWaitlists } from "../../../../../providers/posteventRegistrationRegularUserRegularUsersRegularUserIdWaitlists";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { patcheventRegistrationRegularUserRegularUsersRegularUserIdWaitlists } from "../../../../../providers/patcheventRegistrationRegularUserRegularUsersRegularUserIdWaitlists";
import { geteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId } from "../../../../../providers/geteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId";
import { puteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId } from "../../../../../providers/puteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId";
import { deleteeventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId } from "../../../../../providers/deleteeventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId";

import { IEventRegistrationEventWaitlists } from "../../../../../api/structures/IEventRegistrationEventWaitlists";
import { IPageIEventRegistrationEventWaitlist } from "../../../../../api/structures/IPageIEventRegistrationEventWaitlist";
import { IEventRegistrationEventWaitlist } from "../../../../../api/structures/IEventRegistrationEventWaitlist";

@Controller(
  "/eventRegistration/regularUser/regularUsers/:regularUserId/waitlists",
)
export class EventregistrationRegularuserRegularusersWaitlistsController {
  /**
   * Create a new event waitlist entry for a regular user.
   *
   * Creates a new waitlist entry for a regular user for a specific event. This
   * operation associates the regular user with the event's waitlist in FIFO
   * order based on sign-up time.
   *
   * The endpoint requires the user's ID to ensure authorization and linkage.
   * The request body must specify the event for which the user wants to be
   * waitlisted.
   *
   * Security considerations include verifying that only the authenticated
   * regular user can create their own waitlist entries. Attempting to add
   * duplicate waitlist entries for the same event should fail due to unique
   * constraints.
   *
   * This operation directly corresponds to the
   * event_registration_event_waitlists table, which holds all waitlist entries
   * with timestamps governing the FIFO logic.
   *
   * If the event capacity is full, the user is successfully added to the
   * waitlist. If not full, the API usage for waitlist creation would generally
   * be avoided by client-side logic favoring direct event attendance
   * registration.
   *
   * Errors include validation failures for missing or invalid fields, and
   * authorization errors if the user ID does not match the authenticated user.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user creating the
   *   waitlist entry
   * @param body Creation data for the event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createWaitlistEntry(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlists.ICreate,
  ): Promise<IEventRegistrationEventWaitlists> {
    try {
      return await posteventRegistrationRegularUserRegularUsersRegularUserIdWaitlists(
        {
          regularUser,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated waitlist entries for a regular user.
   *
   * This API endpoint allows querying and paginating event waitlist entries for
   * a specific regular user.
   *
   * The regularUserId path parameter identifies the user whose waitlist entries
   * are requested.
   *
   * Clients can send filtering, pagination, and sorting criteria in the request
   * body adhering to IEventRegistrationEventWaitlist.IRequest type.
   *
   * The response returns a paginated collection of event waitlist summaries,
   * enabling the user to view events where they are on the waitlist.
   *
   * The authorized roles include regularUser, eventOrganizer, and admin, so
   * users can view their own waitlists, organizers can manage waitlists for
   * their events, and admins have global access.
   *
   * This operation is essential for providing transparency and management of
   * waitlisted event participation.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param body Filters and pagination for waitlist query
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IRequest,
  ): Promise<IPageIEventRegistrationEventWaitlist.ISummary> {
    try {
      return await patcheventRegistrationRegularUserRegularUsersRegularUserIdWaitlists(
        {
          regularUser,
          regularUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed event waitlist entry for a regular user.
   *
   * This API operation fetches full details for a single waitlist record
   * belonging to a regular user.
   *
   * It requires path parameters regularUserId and eventWaitlistId to uniquely
   * identify the waitlist entry.
   *
   * The response returns a detailed event waitlist object with all fields such
   * as user reference, event association, and timestamps.
   *
   * Roles authorized to access this endpoint include regularUser,
   * eventOrganizer, and admin.
   *
   * The operation is essential to provide detailed waitlist status to users,
   * organizers, and admins for management and notification purposes.
   *
   * Error conditions include missing entries or insufficient access rights.
   *
   * This operation helps ensure accurate tracking and transparency of the event
   * waitlist system.
   *
   * @param connection
   * @param regularUserId Unique identifier of the regular user
   * @param eventWaitlistId Unique identifier of the event waitlist record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventWaitlistId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await geteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId(
        {
          regularUser,
          regularUserId,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing event waitlist entry for a regular user.
   *
   * Updates a specific waitlist entry for a given regular user. This API edits
   * existing event waitlist entries in the database tied to that user.
   *
   * The endpoint requires both the regularUserId and the eventWaitlistId to
   * ensure the user is authorized to update their own waitlist entry.
   *
   * The request body contains modifiable fields for the event waitlist entry.
   * The response confirms the updated data.
   *
   * This operation affects the event_registration_event_waitlists table and
   * enforces ownership and integrity of waitlist records.
   *
   * Common scenarios include correcting timestamps or updating any allowed
   * optional fields in the waitlist entity.
   *
   * Security checks ensure only the owner can update their waitlist entries.
   *
   * @param connection
   * @param regularUserId Identifier of the regular user owner of the waitlist
   *   entry
   * @param eventWaitlistId Identifier of the target event waitlist entry to
   *   update
   * @param body Data to update the event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventWaitlistId")
  public async updateWaitlistEntry(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlists.IUpdate,
  ): Promise<IEventRegistrationEventWaitlists> {
    try {
      return await puteventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId(
        {
          regularUser,
          regularUserId,
          eventWaitlistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event waitlist entry for a regular user.
   *
   * Deletes a specific event waitlist entry for a given regular user, removing
   * them from the event's waitlist.
   *
   * Requires the regularUserId and eventWaitlistId path parameters to identify
   * the exact waitlist entry.
   *
   * This operation performs a hard delete, permanently removing the record from
   * the database.
   *
   * Security ensures that only the owner regular user can delete their waitlist
   * entries.
   *
   * Useful when a user cancels their waitlist or is promoted to attendee.
   *
   * Returns no content upon success.
   *
   * @param connection
   * @param regularUserId Identifier of the regular user owner of the waitlist
   *   entry
   * @param eventWaitlistId Identifier of the event waitlist entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventWaitlistId")
  public async eraseWaitlistEntry(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationRegularUserRegularUsersRegularUserIdWaitlistsEventWaitlistId(
        {
          regularUser,
          regularUserId,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
