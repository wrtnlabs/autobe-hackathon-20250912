import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEventOrganizerEventAnalytics } from "../../../../providers/patcheventRegistrationEventOrganizerEventAnalytics";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { geteventRegistrationEventOrganizerEventAnalyticsEventAnalyticsId } from "../../../../providers/geteventRegistrationEventOrganizerEventAnalyticsEventAnalyticsId";

import { IPageIEventRegistrationEventAnalytics } from "../../../../api/structures/IPageIEventRegistrationEventAnalytics";
import { IEventRegistrationEventAnalytics } from "../../../../api/structures/IEventRegistrationEventAnalytics";

@Controller("/eventRegistration/eventOrganizer/eventAnalytics")
export class EventregistrationEventorganizerEventanalyticsController {
  /**
   * Search and retrieve a paginated list of event analytics data.
   *
   * Retrieve a filtered and paginated list of event analytics records from the
   * system. This operation supports detailed querying to provide insights into
   * event performance including total signups, waitlist sizes, and category
   * popularity metrics.
   *
   * The operation interacts with the event_registration_event_analytics table
   * which aggregates important metrics per event such as total sign-ups,
   * waitlist lengths, and category-wise popularity.
   *
   * Security considerations include ensuring only users with appropriate roles
   * and permissions can access detailed analytics data. Admins have global
   * access while organizers have scoped access.
   *
   * The request body supports various search parameters and pagination options
   * to enable precise data retrieval.
   *
   * The response contains a paginated collection of event analytics summaries
   * optimized for dashboard views.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for event analytics
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationEventAnalytics.IRequest,
  ): Promise<IPageIEventRegistrationEventAnalytics.ISummary> {
    try {
      return await patcheventRegistrationEventOrganizerEventAnalytics({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed event analytics by ID.
   *
   * Retrieve detailed information about a single event analytics record
   * identified by eventAnalyticsId. This operation provides insights into
   * specific event registration data captured at a point in time.
   *
   * Access is controlled to ensure sensitive data is only visible to authorized
   * roles including admins and event organizers with appropriate permissions.
   *
   * If the requested eventAnalyticsId does not exist, the operation will
   * respond with an appropriate error.
   *
   * No request body is needed for this GET operation.
   *
   * @param connection
   * @param eventAnalyticsId Unique identifier of the target event analytics
   *   record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventAnalyticsId")
  public async at(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("eventAnalyticsId")
    eventAnalyticsId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventAnalytics> {
    try {
      return await geteventRegistrationEventOrganizerEventAnalyticsEventAnalyticsId(
        {
          eventOrganizer,
          eventAnalyticsId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
