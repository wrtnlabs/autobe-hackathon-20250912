import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEventOrganizerNotifications } from "../../../../providers/patcheventRegistrationEventOrganizerNotifications";
import { EventOrganizerAuth } from "../../../../decorators/EventOrganizerAuth";
import { EventOrganizerPayload } from "../../../../decorators/payload/EventOrganizerPayload";
import { geteventRegistrationEventOrganizerNotificationsNotificationId } from "../../../../providers/geteventRegistrationEventOrganizerNotificationsNotificationId";
import { puteventRegistrationEventOrganizerNotificationsNotificationId } from "../../../../providers/puteventRegistrationEventOrganizerNotificationsNotificationId";
import { deleteeventRegistrationEventOrganizerNotificationsNotificationId } from "../../../../providers/deleteeventRegistrationEventOrganizerNotificationsNotificationId";

import { IPageIEventRegistrationNotification } from "../../../../api/structures/IPageIEventRegistrationNotification";
import { IEventRegistrationNotification } from "../../../../api/structures/IEventRegistrationNotification";

@Controller("/eventRegistration/eventOrganizer/notifications")
export class EventregistrationEventorganizerNotificationsController {
  /**
   * Retrieve filtered paginated notifications list.
   *
   * Retrieves filtered and paginated notifications for authenticated users
   * across all roles (regular user, event organizer, admin).
   *
   * Notifications include event-related registration confirmations, waitlist
   * promotions, schedule changes, and capacity adjustments.
   *
   * Supports filtering by read status, sorting, and pagination for efficient
   * notification log management.
   *
   * Returns paginated notification summaries optimally designed for user
   * dashboards.
   *
   * Matches the event_registration_notifications Prisma schema requirements,
   * adhering to role-based access control.
   *
   * @param connection
   * @param body Filtering, sorting and pagination criteria for notifications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexNotifications(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedBody()
    body: IEventRegistrationNotification.IRequest,
  ): Promise<IPageIEventRegistrationNotification.ISummary> {
    try {
      return await patcheventRegistrationEventOrganizerNotifications({
        eventOrganizer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a notification by ID.
   *
   * This operation retrieves detailed information about a notification
   * identified by its UUID. The notification record includes properties such as
   * type (e.g., registration confirmation, waitlist promotion), content
   * message, read flag, creation and update timestamps, and optional deletion
   * timestamp. It also includes association to the user who receives or
   * triggers the notification, if applicable.
   *
   * Access is typically restricted to authenticated users with roles including
   * regularUser, eventOrganizer, or admin, viewing their own notifications or
   * system components retrieving notifications for management or logging
   * purposes.
   *
   * The operation does not alter data and is a simple data fetch based on the
   * unique notification ID.
   *
   * @param connection
   * @param notificationId Unique identifier of the target notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationNotification> {
    try {
      return await geteventRegistrationEventOrganizerNotificationsNotificationId(
        {
          eventOrganizer,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing notification.
   *
   * This operation updates properties of an existing notification identified by
   * the UUID. Common updates include changing the read flag or modifying the
   * content message.
   *
   * Updates are typically done by users marking notifications read or system
   * processes updating texts.
   *
   * The operation ensures valid input data and returns the updated notification
   * object after successful modification.
   *
   * Access control is enforced to restrict updates to authorized users -
   * regularUser, eventOrganizer, or admin - permitted to update the
   * notification data they own or manage.
   *
   * @param connection
   * @param notificationId Unique identifier of the target notification
   * @param body Update info of the notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":notificationId")
  public async update(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationNotification.IUpdate,
  ): Promise<IEventRegistrationNotification> {
    try {
      return await puteventRegistrationEventOrganizerNotificationsNotificationId(
        {
          eventOrganizer,
          notificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification by ID.
   *
   * This operation deletes a notification record by its unique identifier,
   * permanently removing it from the database.
   *
   * This supports user actions to erase unwanted notifications or
   * administrative cleanup tasks.
   *
   * No request body is required and no response body is returned upon
   * successful deletion.
   *
   * Authorization ensures only the notification owner or administrators can
   * perform this hard delete operation.
   *
   * @param connection
   * @param notificationId Unique identifier of the target notification
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":notificationId")
  public async erase(
    @EventOrganizerAuth()
    eventOrganizer: EventOrganizerPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationEventOrganizerNotificationsNotificationId(
        {
          eventOrganizer,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
