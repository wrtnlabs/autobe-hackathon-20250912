import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminEventCapacityOverrides } from "../../../../providers/posteventRegistrationAdminEventCapacityOverrides";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminEventCapacityOverrides } from "../../../../providers/patcheventRegistrationAdminEventCapacityOverrides";
import { geteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId } from "../../../../providers/geteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId";
import { puteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId } from "../../../../providers/puteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId";
import { deleteeventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId } from "../../../../providers/deleteeventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId";

import { IEventRegistrationEventCapacityOverride } from "../../../../api/structures/IEventRegistrationEventCapacityOverride";
import { IPageIEventRegistrationEventCapacityOverride } from "../../../../api/structures/IPageIEventRegistrationEventCapacityOverride";
import { IEventRegistrationEventCapacityOverrides } from "../../../../api/structures/IEventRegistrationEventCapacityOverrides";

@Controller("/eventRegistration/admin/eventCapacityOverrides")
export class EventregistrationAdminEventcapacityoverridesController {
  /**
   * Create event capacity override record.
   *
   * Create a new event capacity override record.
   *
   * Request body must define event ID and the override enablement flag.
   *
   * Accessible only by admins.
   *
   * On success, returns the created capacity override record including audit
   * fields.
   *
   * Supports administrative control over dynamic event capacities.
   *
   * No additional side effects.
   *
   * @param connection
   * @param body Payload for creating event capacity override
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createEventCapacityOverride(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventCapacityOverride.ICreate,
  ): Promise<IEventRegistrationEventCapacityOverride> {
    try {
      return await posteventRegistrationAdminEventCapacityOverrides({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search event capacity overrides with filters and pagination.
   *
   * Returns a paginated list of event capacity override records matching
   * provided search criteria, such as event ID and override flag status.
   *
   * The PATCH request body enables filtering and pagination parameters.
   *
   * This endpoint is restricted to users with the "admin" role, ensuring only
   * authorized personnel manage capacity overrides.
   *
   * Response includes paginated summary data of capacity overrides.
   *
   * This endpoint supports admin workflows to control dynamic capacity
   * adjustment features per event.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for event capacity
   *   overrides
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexEventCapacityOverrides(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventCapacityOverride.IRequest,
  ): Promise<IPageIEventRegistrationEventCapacityOverride> {
    try {
      return await patcheventRegistrationAdminEventCapacityOverrides({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get event capacity override detail by ID.
   *
   * Fetch a detailed event capacity override record by its unique identifier.
   *
   * Requires the eventCapacityOverrideId path parameter (UUID).
   *
   * Accessible only to users with the "admin" role.
   *
   * Response contains detailed override information such as event reference,
   * override enablement, and timestamps.
   *
   * Useful for admin UI or API consumers managing event capacity policies.
   *
   * @param connection
   * @param eventCapacityOverrideId Unique identifier of the event capacity
   *   override record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventCapacityOverrideId")
  public async atEventCapacityOverride(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventCapacityOverride> {
    try {
      return await geteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventCapacityOverrideId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update event capacity override by ID.
   *
   * This API endpoint updates the capacity override settings for a specific
   * event. Capacity overrides are administrative controls allowing manual
   * enablement or disablement of automatic adjustments to event capacity. By
   * updating the is_override_enabled flag, administrators can override the
   * system's dynamic capacity adjustment behavior for the identified event.
   *
   * This operation requires authentication with appropriate administrative
   * roles as capacity override settings impact event management globally. It
   * operates on the event_registration_event_capacity_overrides database
   * table.
   *
   * Validation is performed to ensure the provided is_override_enabled value is
   * a boolean. The eventCapacityOverrideId must be a valid UUID representing
   * the existing capacity override record.
   *
   * The updated capacity override object is returned as confirmation of
   * successful operation.
   *
   * @param connection
   * @param eventCapacityOverrideId Unique identifier of the target event
   *   capacity override record
   * @param body New capacity override information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventCapacityOverrideId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventCapacityOverrides.IUpdate,
  ): Promise<IEventRegistrationEventCapacityOverrides> {
    try {
      return await puteventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventCapacityOverrideId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete event capacity override by ID.
   *
   * This operation performs a hard delete of the event capacity override
   * identified by the specified UUID. Removing the capacity override record
   * disables manual overrides for event capacity adjustments, restoring
   * automatic control.
   *
   * Only users with administrative privileges may perform this operation due to
   * its impact on event management.
   *
   * The deletion is permanent; once removed, there is no recovery unless
   * recreated. The API returns no content upon successful deletion.
   *
   * @param connection
   * @param eventCapacityOverrideId Unique identifier of the target event
   *   capacity override record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventCapacityOverrideId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminEventCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventCapacityOverrideId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
