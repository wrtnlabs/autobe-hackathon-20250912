import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminEventsEventIdWaitlists } from "../../../../../providers/posteventRegistrationAdminEventsEventIdWaitlists";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminEventsEventIdWaitlists } from "../../../../../providers/patcheventRegistrationAdminEventsEventIdWaitlists";
import { geteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId } from "../../../../../providers/geteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId";
import { puteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId } from "../../../../../providers/puteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId";

import { IEventRegistrationEventWaitlist } from "../../../../../api/structures/IEventRegistrationEventWaitlist";
import { IPageIEventRegistrationEventWaitlist } from "../../../../../api/structures/IPageIEventRegistrationEventWaitlist";

@Controller("/eventRegistration/admin/events/:eventId/waitlists")
export class EventregistrationAdminEventsWaitlistsController {
  /**
   * Add a user to event waitlist.
   *
   * This endpoint creates a new waitlist entry for a user wishing to join the
   * waitlist of the specified event. The request body includes required fields
   * to link the regular user and the event. The operation ensures FIFO order by
   * recording the creation timestamp. It is secured to allow only users with
   * roles "eventOrganizer" or "admin" to add waitlist entries.
   *
   * The underlying Prisma schema enforces uniqueness per user-event combination
   * to prevent duplicates. This POST operation corresponds to the "create"
   * pattern, returning the created waitlist entry details.
   *
   * @param connection
   * @param eventId Unique identifier of the target event
   * @param body Data for creating a new event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.ICreate,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await posteventRegistrationAdminEventsEventIdWaitlists({
        admin,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated waitlists for an event.
   *
   * This endpoint retrieves a filtered and paginated list of waitlisted users
   * for a specific event identified by its eventId. The waitlist records are
   * sorted based on their creation timestamps in FIFO order, allowing
   * organizers and admins to see who is next in line.
   *
   * Security is enforced such that only users with roles "eventOrganizer" or
   * "admin" can access this sensitive data, ensuring privacy and compliance.
   * The waitlist is essential for managing event capacity dynamically and for
   * promoting users when spots open.
   *
   * The underlying Prisma table "event_registration_event_waitlists" contains
   * fields for the event ID, user ID, and timestamps, with relationships to the
   * regular user and event entities. This operation supports pagination and
   * filtering through the request body, mapped to
   * IEventRegistrationEventWaitlist.IRequest type, and returns paginated
   * waitlist summary responses.
   *
   * @param connection
   * @param eventId Unique identifier of the target event
   * @param body Search criteria and pagination parameters for event waitlist
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IRequest,
  ): Promise<IPageIEventRegistrationEventWaitlist.ISummary> {
    try {
      return await patcheventRegistrationAdminEventsEventIdWaitlists({
        admin,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve specific waitlist entry details.
   *
   * This endpoint returns full detailed information about a single waitlist
   * entry identified by eventWaitlistId for the associated event eventId. The
   * waitlist entry links a regular user to an event they are waiting for,
   * including creation and update timestamps.
   *
   * This operation is protected and accessible only by users with roles
   * "eventOrganizer" or "admin" due to the sensitive nature of waitlist data.
   * The detailed information helps event organizers and admins manage
   * individual waitlist slots more precisely.
   *
   * The underlying Prisma model "event_registration_event_waitlists" ensures
   * the integrity of the waitlist with unique constraints preventing duplicate
   * entries for the same user and event. This GET operation corresponds to the
   * "at" pattern returning a single entity.
   *
   * @param connection
   * @param eventId Unique identifier of the target event
   * @param eventWaitlistId Unique identifier of the target event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventWaitlistId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await geteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId(
        {
          admin,
          eventId,
          eventWaitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an event waitlist entry.
   *
   * This endpoint updates the waitlist entry identified by eventWaitlistId for
   * the event specified by eventId. Authorized roles "eventOrganizer" or
   * "admin" can modify the waitlist entry's data as allowed by the schema.
   *
   * This operation allows managing the waitlist effectively, such as correcting
   * entries or updating timestamps. The underlying Prisma schema enforces
   * unique constraints.
   *
   * This PUT operation corresponds to the "update" pattern, returning the
   * updated waitlist entry details on success.
   *
   * @param connection
   * @param eventId Unique identifier of the target event
   * @param eventWaitlistId Unique identifier of the target event waitlist entry
   * @param body Data for updating an event waitlist entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventWaitlistId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventWaitlistId")
    eventWaitlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventWaitlist.IUpdate,
  ): Promise<IEventRegistrationEventWaitlist> {
    try {
      return await puteventRegistrationAdminEventsEventIdWaitlistsEventWaitlistId(
        {
          admin,
          eventId,
          eventWaitlistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
