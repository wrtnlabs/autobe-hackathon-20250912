import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminEventsEventIdCapacityOverrides } from "../../../../../providers/posteventRegistrationAdminEventsEventIdCapacityOverrides";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminEventsEventIdCapacityOverrides } from "../../../../../providers/patcheventRegistrationAdminEventsEventIdCapacityOverrides";
import { geteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId } from "../../../../../providers/geteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId";
import { puteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId } from "../../../../../providers/puteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId";
import { deleteeventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId } from "../../../../../providers/deleteeventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId";

import { IEventRegistrationEventCapacityOverride } from "../../../../../api/structures/IEventRegistrationEventCapacityOverride";
import { IPageIEventRegistrationEventCapacityOverrides } from "../../../../../api/structures/IPageIEventRegistrationEventCapacityOverrides";
import { IEventRegistrationEventCapacityOverrides } from "../../../../../api/structures/IEventRegistrationEventCapacityOverrides";

@Controller("/eventRegistration/admin/events/:eventId/capacityOverrides")
export class EventregistrationAdminEventsCapacityoverridesController {
  /**
   * Create capacity override for an event.
   *
   * Allows authorized admin users to create a capacity override linked to a
   * specified event by eventId (UUID). This override indicates whether
   * automatic capacity adjustment is enabled or disabled.
   *
   * Only admins can perform this operation.
   *
   * Creates audit fields for tracking creation and updates. The operation
   * ensures uniqueness per event to prevent conflicting overrides.
   *
   * This operation aligns strictly with the
   * event_registration_event_capacity_overrides Prisma model's specifications.
   *
   * @param connection
   * @param eventId Unique ID of the event to create capacity override for
   * @param body Data required to create a capacity override, including
   *   isOverrideEnabled flag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createCapacityOverride(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventCapacityOverride.ICreate,
  ): Promise<IEventRegistrationEventCapacityOverride> {
    try {
      return await posteventRegistrationAdminEventsEventIdCapacityOverrides({
        admin,
        eventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List capacity overrides for an event.
   *
   * This API endpoint returns a list of capacity override records linked to the
   * specified event ID. Capacity overrides represent admin controls that enable
   * or disable automatic capacity adjustments on events.
   *
   * Access to this endpoint requires administrative authorization due to the
   * sensitivity of override settings.
   *
   * Returned data includes detailed override records with flags indicating
   * override status, along with timestamps for audit purposes.
   *
   * @param connection
   * @param eventId Unique identifier of the event to list capacity overrides
   *   for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
  ): Promise<IPageIEventRegistrationEventCapacityOverrides> {
    try {
      return await patcheventRegistrationAdminEventsEventIdCapacityOverrides({
        admin,
        eventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get event capacity override details by ID.
   *
   * This API endpoint fetches detailed information of a single event capacity
   * override by its unique ID. The data includes override status and audit
   * timestamps.
   *
   * Access is restricted to administrators due to the sensitive nature of
   * capacity override settings.
   *
   * If the specified ID does not exist, a suitable error response is returned.
   *
   * @param connection
   * @param eventCapacityOverrideId Unique identifier of the target event
   *   capacity override record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventCapacityOverrideId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventCapacityOverrides> {
    try {
      return await geteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventId,
          eventCapacityOverrideId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update capacity override for an event.
   *
   * Authorized admin users can update an existing capacity override for a given
   * event and override ID.
   *
   * Primarily modifies the isOverrideEnabled flag to enable or disable
   * automatic capacity override.
   *
   * The operation validates UUID parameters for eventId and
   * eventCapacityOverrideId.
   *
   * Strictly corresponds to the event_registration_event_capacity_overrides
   * model, ensuring data integrity and audit compliance.
   *
   * @param connection
   * @param eventId Unique identifier of the event associated with the capacity
   *   override
   * @param eventCapacityOverrideId Unique identifier of the capacity override
   *   record to update
   * @param body Update data for existing capacity override including
   *   isOverrideEnabled flag
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventCapacityOverrideId")
  public async updateCapacityOverride(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventCapacityOverride.IUpdate,
  ): Promise<IEventRegistrationEventCapacityOverride> {
    try {
      return await puteventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventId,
          eventCapacityOverrideId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete capacity override for an event.
   *
   * Allows authorized admin users to permanently delete a capacity override
   * linked to a given event.
   *
   * Removes the override completely from the database, causing the event to
   * revert to default automatic capacity behavior.
   *
   * The operation does not implement soft deletion. It requires UUID
   * identification parameters for both event and override records.
   *
   * Fulfills audit and data integrity requirements as per the
   * event_registration_event_capacity_overrides schema.
   *
   * @param connection
   * @param eventId Unique identifier of the event associated with the capacity
   *   override to delete
   * @param eventCapacityOverrideId Unique identifier of the capacity override
   *   record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventCapacityOverrideId")
  public async eraseCapacityOverride(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
    @TypedParam("eventCapacityOverrideId")
    eventCapacityOverrideId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminEventsEventIdCapacityOverridesEventCapacityOverrideId(
        {
          admin,
          eventId,
          eventCapacityOverrideId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
