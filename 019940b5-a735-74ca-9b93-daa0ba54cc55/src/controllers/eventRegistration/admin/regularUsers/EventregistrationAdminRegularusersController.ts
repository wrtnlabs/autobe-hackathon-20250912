import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationAdminRegularUsers } from "../../../../providers/patcheventRegistrationAdminRegularUsers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { geteventRegistrationAdminRegularUsersRegularUserId } from "../../../../providers/geteventRegistrationAdminRegularUsersRegularUserId";
import { puteventRegistrationAdminRegularUsersRegularUserId } from "../../../../providers/puteventRegistrationAdminRegularUsersRegularUserId";
import { deleteeventRegistrationAdminRegularUsersRegularUserId } from "../../../../providers/deleteeventRegistrationAdminRegularUsersRegularUserId";

import { IPageIEventRegistrationRegularUser } from "../../../../api/structures/IPageIEventRegistrationRegularUser";
import { IEventRegistrationRegularUser } from "../../../../api/structures/IEventRegistrationRegularUser";

@Controller("/eventRegistration/admin/regularUsers")
export class EventregistrationAdminRegularusersController {
  /**
   * Retrieve paginated list of regular users.
   *
   * Retrieve a filtered and paginated list of event registration regular users
   * from the system. This operation enables querying based on full name, email
   * verified status, and registration dates.
   *
   * This API is crucial for administrative auditing, user management, and
   * reporting functionalities. Access should be limited to properly authorized
   * roles due to the sensitive nature of user data.
   *
   * This operation closely integrates with the event_registration_regular_users
   * table, utilizing all relevant user profile fields like email, full name,
   * phone number, profile picture, and verification status. The response
   * returns user summaries optimized for list views, supporting further
   * detailed retrieval via the 'at' endpoint.
   *
   * Proper validation ensures only authorized users can execute this search and
   * ensures pagination parameters are respected to maintain system performance
   * and data security.
   *
   * Related operations include retrieving single user detail
   * (/regularUsers/{regularUserId}), updating user information, and removing
   * users.
   *
   * Error handling covers unauthorized access, invalid filter parameters, and
   * system errors to ensure robust server responses.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering regular
   *   users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationRegularUser.IRequest,
  ): Promise<IPageIEventRegistrationRegularUser.ISummary> {
    try {
      return await patcheventRegistrationAdminRegularUsers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed regular user information by ID.
   *
   * Retrieve detailed information about a regular user by their unique ID. This
   * includes all profile data such as email, full name, phone number, profile
   * picture URL, and email verification status.
   *
   * This operation is intended for admin use or authorized contexts where
   * sensitive user data must be accessed securely.
   *
   * The user ID must be a valid UUID string. Appropriate authorization checks
   * must be enforced.
   *
   * Errors include handling for invalid IDs, non-existent users, and permission
   * denials.
   *
   * Related endpoints include user list retrieval (/regularUsers), update, and
   * delete operations.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":regularUserId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationRegularUser> {
    try {
      return await geteventRegistrationAdminRegularUsersRegularUserId({
        admin,
        regularUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update regular user profile by ID.
   *
   * Update profile information of a regular user by their unique ID. Fields
   * such as email, full name, phone number, profile picture, and email
   * verification flag can be updated.
   *
   * Authorization is limited to admins. This operation ensures data consistency
   * and prevents unauthorized modifications.
   *
   * The user ID must be a valid UUID. Request body schema enforces data
   * correctness.
   *
   * Responses include the updated user record or error messages for validation
   * failures.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @param body Data for updating regular user profile
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":regularUserId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationRegularUser.IUpdate,
  ): Promise<IEventRegistrationRegularUser> {
    try {
      return await puteventRegistrationAdminRegularUsersRegularUserId({
        admin,
        regularUserId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete regular user by ID.
   *
   * Delete a regular user permanently by their unique ID. This operation
   * cascades to all related user records such as verification tokens and
   * signups.
   *
   * Only admins are authorized to perform this delete action for security and
   * compliance.
   *
   * The user ID must be a valid UUID.
   *
   * Errors handled include non-existent user IDs and permission issues.
   *
   * This is a hard delete operation with no restoration option.
   *
   * Other user management endpoints include search, retrieve, and update.
   *
   * @param connection
   * @param regularUserId Unique identifier of the target regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":regularUserId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("regularUserId")
    regularUserId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminRegularUsersRegularUserId({
        admin,
        regularUserId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
