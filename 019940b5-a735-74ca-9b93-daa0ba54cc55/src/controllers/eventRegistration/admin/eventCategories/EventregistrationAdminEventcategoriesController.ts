import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminEventCategories } from "../../../../providers/posteventRegistrationAdminEventCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminEventCategories } from "../../../../providers/patcheventRegistrationAdminEventCategories";
import { geteventRegistrationAdminEventCategoriesEventCategoryId } from "../../../../providers/geteventRegistrationAdminEventCategoriesEventCategoryId";
import { puteventRegistrationAdminEventCategoriesEventCategoryId } from "../../../../providers/puteventRegistrationAdminEventCategoriesEventCategoryId";

import { IEventRegistrationEventCategory } from "../../../../api/structures/IEventRegistrationEventCategory";
import { IPageIEventRegistrationEventCategory } from "../../../../api/structures/IPageIEventRegistrationEventCategory";

@Controller("/eventRegistration/admin/eventCategories")
export class EventregistrationAdminEventcategoriesController {
  /**
   * Create a new event category with a unique name and optional description.
   *
   * Only admin users are authorized to perform this operation to maintain
   * controlled event categorization.
   *
   * This operation maps to the event_registration_event_categories table and
   * ensures the uniqueness of category names.
   *
   * Upon successful creation, the full event category record is returned with
   * assigned timestamps.
   *
   * @param connection
   * @param body Creation information for a new event category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventCategory.ICreate,
  ): Promise<IEventRegistrationEventCategory> {
    try {
      return await posteventRegistrationAdminEventCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of event categories.
   *
   * Retrieve a filtered and paginated list of event categories from the system.
   *
   * This operation supports complex search parameters including partial name
   * matching using trigram search, description filtering, sorting by creation
   * date or name, and pagination.
   *
   * Only users with admin role are authorized to execute this operation,
   * ensuring that sensitive management capabilities are protected.
   *
   * It corresponds directly to the event_registration_event_categories table in
   * the database, utilizing all its searchable fields efficiently.
   *
   * The response returns a paginated list of event category summaries designed
   * for listings and administrative overviews.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for event categories
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventCategory.IRequest,
  ): Promise<IPageIEventRegistrationEventCategory.ISummary> {
    try {
      return await patcheventRegistrationAdminEventCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed event category information by ID.
   *
   * Retrieve detailed information about a specific event category by its unique
   * ID.
   *
   * This operation requires the eventCategoryId path parameter to specify the
   * target category.
   *
   * Only users with admin authorization can access this detailed event category
   * information.
   *
   * It maps directly to the event_registration_event_categories table column
   * data. The response includes all details necessary for administrative
   * editing or overview.
   *
   * @param connection
   * @param eventCategoryId Unique identifier of the target event category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventCategoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventCategoryId")
    eventCategoryId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventCategory> {
    try {
      return await geteventRegistrationAdminEventCategoriesEventCategoryId({
        admin,
        eventCategoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing event category.
   *
   * Update information of an existing event category by its unique ID.
   *
   * Admin role authorization is required to ensure controlled modification of
   * event classifications.
   *
   * The operation requires the eventCategoryId path parameter and request body
   * containing the updated fields.
   *
   * The response returns comprehensive updated information of the event
   * category for confirmation and subsequent use.
   *
   * @param connection
   * @param eventCategoryId Unique identifier of the target event category
   * @param body Updated event category information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventCategoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventCategoryId")
    eventCategoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventCategory.IUpdate,
  ): Promise<IEventRegistrationEventCategory> {
    try {
      return await puteventRegistrationAdminEventCategoriesEventCategoryId({
        admin,
        eventCategoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
