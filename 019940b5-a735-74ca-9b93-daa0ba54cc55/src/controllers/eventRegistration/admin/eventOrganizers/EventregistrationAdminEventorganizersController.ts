import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posteventRegistrationAdminEventOrganizers } from "../../../../providers/posteventRegistrationAdminEventOrganizers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patcheventRegistrationAdminEventOrganizers } from "../../../../providers/patcheventRegistrationAdminEventOrganizers";
import { geteventRegistrationAdminEventOrganizersEventOrganizerId } from "../../../../providers/geteventRegistrationAdminEventOrganizersEventOrganizerId";
import { puteventRegistrationAdminEventOrganizersEventOrganizerId } from "../../../../providers/puteventRegistrationAdminEventOrganizersEventOrganizerId";
import { deleteeventRegistrationAdminEventOrganizersEventOrganizerId } from "../../../../providers/deleteeventRegistrationAdminEventOrganizersEventOrganizerId";

import { IEventRegistrationEventOrganizer } from "../../../../api/structures/IEventRegistrationEventOrganizer";
import { IPageIEventRegistrationEventOrganizer } from "../../../../api/structures/IPageIEventRegistrationEventOrganizer";

@Controller("/eventRegistration/admin/eventOrganizers")
export class EventregistrationAdminEventorganizersController {
  /**
   * Create a new event organizer account with all necessary information. This
   * operation is restricted to admins.
   *
   * The request body must include email, password hash, full name, and
   * optionally phone number and profile picture URL.
   *
   * The system sets the email_verified flag according to input.
   *
   * This operation inserts a record into the
   * event_registration_event_organizers table and returns the created
   * organizer's full data.
   *
   * @param connection
   * @param body Creation data for a new event organizer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.ICreate,
  ): Promise<IEventRegistrationEventOrganizer> {
    try {
      return await posteventRegistrationAdminEventOrganizers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search event organizers with filtering and pagination.
   *
   * Retrieve a filtered and paginated list of event organizers from the system.
   * This allows querying event organizer accounts by criteria such as email,
   * full name, and email verification status.
   *
   * Security considerations ensure that only authorized system users can access
   * detailed organizer information. Pagination and sorting capabilities are
   * supported for handling large datasets efficiently.
   *
   * This operation references the event_registration_event_organizers table in
   * the Prisma schema, utilizing all publicly available columns for search and
   * display. The response provides a page of organizer summaries optimized for
   * list views.
   *
   * @param connection
   * @param body Search and pagination parameters for filtering event organizers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.IRequest,
  ): Promise<IPageIEventRegistrationEventOrganizer.ISummary> {
    try {
      return await patcheventRegistrationAdminEventOrganizers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific event organizer.
   *
   * Get detailed information of a specific event organizer by ID. Only admins
   * may access this endpoint.
   *
   * The operation requires a UUID path parameter eventOrganizerId representing
   * the target organizer.
   *
   * This operation maps to the event_registration_event_organizers table in the
   * Prisma schema and returns all relevant organizer fields, including email,
   * full name, phone number, and email verification status.
   *
   * Appropriate security measures ensure only authorized users can retrieve
   * this sensitive information.
   *
   * @param connection
   * @param eventOrganizerId Unique identifier of the event organizer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventOrganizerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventOrganizerId")
    eventOrganizerId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEventOrganizer> {
    try {
      return await geteventRegistrationAdminEventOrganizersEventOrganizerId({
        admin,
        eventOrganizerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update event organizer data.
   *
   * Update an existing event organizer's profile details by ID. Admins only.
   *
   * The path parameter eventOrganizerId identifies the event organizer to be
   * updated.
   *
   * The request body includes the fields allowed for update, such as full name,
   * phone number, profile picture URL, and email verification flag.
   *
   * Successful updates return the updated event organizer record, reflecting
   * all changes.
   *
   * This operation corresponds to the event_registration_event_organizers table
   * in the Prisma schema.
   *
   * @param connection
   * @param eventOrganizerId Unique identifier of the event organizer to update
   * @param body Update data for an event organizer
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":eventOrganizerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventOrganizerId")
    eventOrganizerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IEventRegistrationEventOrganizer.IUpdate,
  ): Promise<IEventRegistrationEventOrganizer> {
    try {
      return await puteventRegistrationAdminEventOrganizersEventOrganizerId({
        admin,
        eventOrganizerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an event organizer user account by ID.
   *
   * Permanently delete an event organizer user account by the specified unique
   * identifier.
   *
   * This operation is restricted to admin users with appropriate privileges.
   *
   * Once deleted, the event organizer data is irreversibly removed from the
   * system.
   *
   * Attempts to delete non-existent records or invalid IDs return errors.
   *
   * No response body content is returned upon successful deletion.
   *
   * All deletions are audited by system logs outside this API.
   *
   * Deletes the entry from the event_registration_event_organizers table in the
   * Prisma schema.
   *
   * @param connection
   * @param eventOrganizerId Unique identifier of the target event organizer to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":eventOrganizerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("eventOrganizerId")
    eventOrganizerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteeventRegistrationAdminEventOrganizersEventOrganizerId({
        admin,
        eventOrganizerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
