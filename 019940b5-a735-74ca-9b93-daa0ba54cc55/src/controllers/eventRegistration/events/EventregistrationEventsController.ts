import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patcheventRegistrationEvents } from "../../../providers/patcheventRegistrationEvents";
import { geteventRegistrationEventsEventId } from "../../../providers/geteventRegistrationEventsEventId";

import { IPageIEventRegistrationEvent } from "../../../api/structures/IPageIEventRegistrationEvent";
import { IEventRegistrationEvent } from "../../../api/structures/IEventRegistrationEvent";

@Controller("/eventRegistration/events")
export class EventregistrationEventsController {
  /**
   * Query and list events with filtering and pagination.
   *
   * Search and retrieve events with multiple filtering options (date range,
   * location, category, status), sorting, and pagination.
   *
   * Open to all users without authentication.
   *
   * Results are returned as paginated event summaries with essential event
   * information.
   *
   * Supports efficient browsing of events with filtering criteria.
   *
   * @param connection
   * @param body Event search and filter parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchEvents(
    @TypedBody()
    body: IEventRegistrationEvent.IRequest,
  ): Promise<IPageIEventRegistrationEvent.ISummary> {
    try {
      return await patcheventRegistrationEvents({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a single event by its eventId.
   *
   * Retrieve full details of a single event by its unique eventId. This
   * operation returns the event's core properties including name, scheduled
   * date in ISO 8601 format, location, maximum capacity, optional description,
   * ticket price, and current status which is one of scheduled, cancelled, or
   * completed.
   *
   * Users of this endpoint include event organizers wanting to view their
   * events, and general users browsing event details.
   *
   * The operation accesses event_registration_events from the Prisma schema,
   * returning all information needed to display event details.
   *
   * The eventId parameter corresponds to the primary key UUID of the event
   * record. Appropriate error handling is expected if the event does not
   * exist.
   *
   * No request body is needed. The response body returns the full event entity
   * representation.
   *
   * Authorization roles allow all users, including unauthenticated users, to
   * access event details.
   *
   * This endpoint uses the GET method, ensuring safe and idempotent retrieval
   * of event data.
   *
   * @param connection
   * @param eventId Unique identifier of the event
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventId")
  public async at(
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
  ): Promise<IEventRegistrationEvent> {
    try {
      return await geteventRegistrationEventsEventId({
        eventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
