import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationRegularUser } from "../../../../structures/IEventRegistrationRegularUser";

/**
 * Create a new regular user account (event_registration_regular_users) with
 * email and password.
 *
 * Registers a new regular user account with email and password, storing user
 * profile details in the 'event_registration_regular_users' table. User starts
 * with email_verified set to false and receives JWT tokens upon successful
 * registration. Includes necessary validations for email uniqueness and
 * password security.
 *
 * @param props.connection
 * @param props.body Request body for creating a regular user account. Must
 *   include email, password hash, and profile data.
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/join
 * @accessor api.functional.auth.regularUser.join.joinRegularUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinRegularUser(
  connection: IConnection,
  props: joinRegularUser.Props,
): Promise<joinRegularUser.Response> {
  const output: joinRegularUser.Response =
    true === connection.simulate
      ? joinRegularUser.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinRegularUser.METADATA,
            path: joinRegularUser.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinRegularUser {
  export type Props = {
    /**
     * Request body for creating a regular user account. Must include email,
     * password hash, and profile data.
     */
    body: IEventRegistrationRegularUser.ICreate;
  };
  export type Body = IEventRegistrationRegularUser.ICreate;
  export type Response = IEventRegistrationRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/join";
  export const random = (): IEventRegistrationRegularUser.IAuthorized =>
    typia.random<IEventRegistrationRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinRegularUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinRegularUser.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
