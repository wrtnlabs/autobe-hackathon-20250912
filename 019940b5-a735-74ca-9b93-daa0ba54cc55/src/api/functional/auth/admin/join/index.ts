import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationAdmin } from "../../../../structures/IEventRegistrationAdmin";

/**
 * Create an admin user account associated with the 'event_registration_admins'
 * table.
 *
 * Create a new admin user account with email, password hash, full name, phone
 * number (optional), profile picture URL (optional), and email verification
 * status in the 'event_registration_admins' Prisma table. Access restricted to
 * existing admin users for security and management governance. Ensures email
 * uniqueness and proper profile data management.
 *
 * @param props.connection
 * @param props.body Admin user account creation payload
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join.createAdminUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createAdminUser(
  connection: IConnection,
  props: createAdminUser.Props,
): Promise<createAdminUser.Response> {
  const output: createAdminUser.Response =
    true === connection.simulate
      ? createAdminUser.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...createAdminUser.METADATA,
            path: createAdminUser.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace createAdminUser {
  export type Props = {
    /** Admin user account creation payload */
    body: IEventRegistrationAdmin.ICreate;
  };
  export type Body = IEventRegistrationAdmin.ICreate;
  export type Response = IEventRegistrationAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IEventRegistrationAdmin.IAuthorized =>
    typia.random<IEventRegistrationAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: createAdminUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createAdminUser.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
