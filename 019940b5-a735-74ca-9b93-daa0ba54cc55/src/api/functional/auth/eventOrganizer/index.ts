import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventOrganizer } from "../../../structures/IEventRegistrationEventOrganizer";

/**
 * Create a new event organizer user (member kind) and issue authorization
 * tokens.
 *
 * Register a new event organizer user account with email and password. This
 * endpoint allows event organizers to create their accounts by providing
 * necessary authentication and profile information as defined in the
 * event_registration_event_organizers Prisma table. The password is securely
 * handled as a hashed value. Email verification is initially false until user
 * confirms via email verification workflows.
 *
 * This operation enforces email uniqueness and secures password hashing. Upon
 * successful registration, JWT tokens are issued to authorize the user.
 *
 * It is a public endpoint, not requiring prior authentication.
 *
 * Reference fields: email, password_hash, full_name, phone_number (optional),
 * profile_picture_url (optional), email_verified, created_at, updated_at.
 *
 * Related endpoints for comprehensive authentication flow include
 * /auth/eventOrganizer/login and /auth/eventOrganizer/refresh.
 *
 * @param props.connection
 * @param props.body Payload for registering a new event organizer user.
 * @setHeader token.access Authorization
 *
 * @path /auth/eventOrganizer/join
 * @accessor api.functional.auth.eventOrganizer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Payload for registering a new event organizer user. */
    body: IEventRegistrationEventOrganizer.ICreate;
  };
  export type Body = IEventRegistrationEventOrganizer.ICreate;
  export type Response = IEventRegistrationEventOrganizer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/eventOrganizer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/eventOrganizer/join";
  export const random = (): IEventRegistrationEventOrganizer.IAuthorized =>
    typia.random<IEventRegistrationEventOrganizer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an event organizer user and issue JWT tokens.
 *
 * Authenticate event organizer user by email and password, validate email
 * verified status. Issues JWT tokens upon successful login.
 *
 * Only event organizers with verified email can log in.
 *
 * Reference fields: email, password_hash, email_verified.
 *
 * Mandatory password security checks and JWT issuance apply.
 *
 * Public endpoint with no prior authentication required.
 *
 * Related endpoints include /auth/eventOrganizer/join and
 * /auth/eventOrganizer/refresh for full authentication lifecycle.
 *
 * @param props.connection
 * @param props.body Payload for logging in an event organizer user.
 * @setHeader token.access Authorization
 *
 * @path /auth/eventOrganizer/login
 * @accessor api.functional.auth.eventOrganizer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Payload for logging in an event organizer user. */
    body: IEventRegistrationEventOrganizer.ILogin;
  };
  export type Body = IEventRegistrationEventOrganizer.ILogin;
  export type Response = IEventRegistrationEventOrganizer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/eventOrganizer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/eventOrganizer/login";
  export const random = (): IEventRegistrationEventOrganizer.IAuthorized =>
    typia.random<IEventRegistrationEventOrganizer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for event organizer user.
 *
 * Refresh JWT authorization tokens using a refresh token for an event organizer
 * user.
 *
 * Requires a valid refresh token in the request body.
 *
 * Returns new authorization tokens on success.
 *
 * Reference: event_registration_event_organizers table context.
 *
 * Related endpoints include /auth/eventOrganizer/join and
 * /auth/eventOrganizer/login.
 *
 * @param props.connection
 * @param props.body Payload containing refresh token for event organizer user.
 * @setHeader token.access Authorization
 *
 * @path /auth/eventOrganizer/refresh
 * @accessor api.functional.auth.eventOrganizer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Payload containing refresh token for event organizer user. */
    body: IEventRegistrationEventOrganizer.IRefresh;
  };
  export type Body = IEventRegistrationEventOrganizer.IRefresh;
  export type Response = IEventRegistrationEventOrganizer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/eventOrganizer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/eventOrganizer/refresh";
  export const random = (): IEventRegistrationEventOrganizer.IAuthorized =>
    typia.random<IEventRegistrationEventOrganizer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
