import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationAdmin } from "../../../../structures/IEventRegistrationAdmin";
import { IPageIEventRegistrationAdmin } from "../../../../structures/IPageIEventRegistrationAdmin";

/**
 * Create a new admin user.
 *
 * Create a new administrator user account with identity credentials and contact
 * information.
 *
 * Only authorized admin users can perform this operation.
 *
 * The request body must include email, password hash, full name, optional phone
 * number, profile picture URL, and email verification status.
 *
 * Successful creation returns the detailed user record, excluding sensitive
 * password hash.
 *
 * Duplicate email addresses are rejected to maintain email uniqueness.
 *
 * @param props.connection
 * @param props.body Creation info of the admin user
 * @path /eventRegistration/admin/admins
 * @accessor api.functional.eventRegistration.admin.admins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the admin user */
    body: IEventRegistrationAdmin.ICreate;
  };
  export type Body = IEventRegistrationAdmin.ICreate;
  export type Response = IEventRegistrationAdmin;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/admins";
  export const random = (): IEventRegistrationAdmin =>
    typia.random<IEventRegistrationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of admin users.
 *
 * Retrieve a paginated, filtered list of administrator user accounts from the
 * event registration platform. The returned list includes detailed information
 * such as email, full name, phone number, profile pictures, and email
 * verification status.
 *
 * This operation supports advanced search features, including filtering by full
 * name with trigram search support, sorting by creation date or name, and
 * pagination controls.
 *
 * Authorization is restricted to admin users only due to the sensitive nature
 * of administering system-wide users. Data access is audited and role-based
 * controls protect user information.
 *
 * This operation targets the event_registration_admins table, referencing
 * unique email constraints, audit timestamps, and contact details essential for
 * identity management.
 *
 * Errors include access denial for unauthorized users and invalid pagination
 * parameters.
 *
 * Security best practices require encrypted handling of sensitive data fields
 * and careful filtering of query outcomes.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for administrator
 *   user accounts filtering
 * @path /eventRegistration/admin/admins
 * @accessor api.functional.eventRegistration.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for administrator user
     * accounts filtering
     */
    body: IEventRegistrationAdmin.IRequest;
  };
  export type Body = IEventRegistrationAdmin.IRequest;
  export type Response = IPageIEventRegistrationAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/admins";
  export const random = (): IPageIEventRegistrationAdmin.ISummary =>
    typia.random<IPageIEventRegistrationAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed admin user information by ID.
 *
 * Retrieve detailed information about a specific admin user identified by their
 * unique ID.
 *
 * This operation is intended for administrative use and returns data such as
 * email, full name, phone number, profile picture, and email verification
 * status.
 *
 * Admin-only access is strictly enforced. The response includes timestamps for
 * creation and updates, supporting audit requirements.
 *
 * Invalid UUID formats or requests for non-existent admins result in error
 * responses with appropriate status codes.
 *
 * This operation uses the event_registration_admins table, ensuring data
 * consistency and integrity reflecting the database state.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the target admin user
 * @path /eventRegistration/admin/admins/:adminId
 * @accessor api.functional.eventRegistration.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target admin user */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationAdmin;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IEventRegistrationAdmin =>
    typia.random<IEventRegistrationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an administrator user by ID.
 *
 * Update an existing administrator's user record by their unique ID. This
 * operation enables modification of personal and authentication details
 * including email, password hash, name, contact information, profile picture
 * URL, and email verified status.
 *
 * Access to this operation is restricted to users with the 'admin' role to
 * ensure only authorized personnel can update administrator records.
 *
 * The underlying data entity is event_registration_admins, containing all
 * relevant user identification and contact fields. The API endpoint requires
 * the unique adminId path parameter to specify which admin user to update.
 *
 * The request body must conform to the IEventRegistrationAdmin.IUpdate schema,
 * ensuring validated data updates. Upon success, the updated admin record is
 * returned.
 *
 * Failures include invalid adminId not matching any records, or unauthorized
 * access attempts by non-admin users.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the target admin user
 * @param props.body Admin user update request body
 * @path /eventRegistration/admin/admins/:adminId
 * @accessor api.functional.eventRegistration.admin.admins.updateAdminUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateAdminUser(
  connection: IConnection,
  props: updateAdminUser.Props,
): Promise<updateAdminUser.Response> {
  return true === connection.simulate
    ? updateAdminUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAdminUser.METADATA,
          path: updateAdminUser.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateAdminUser {
  export type Props = {
    /** Unique identifier of the target admin user */
    adminId: string & tags.Format<"uuid">;

    /** Admin user update request body */
    body: IEventRegistrationAdmin.IUpdate;
  };
  export type Body = IEventRegistrationAdmin.IUpdate;
  export type Response = IEventRegistrationAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IEventRegistrationAdmin =>
    typia.random<IEventRegistrationAdmin>();
  export const simulate = (
    connection: IConnection,
    props: updateAdminUser.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateAdminUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an administrator user by ID.
 *
 * Permanently delete an administrator user record by their unique ID.
 *
 * This operation requires the admin role and is restricted to authorized
 * administrators. It completely removes the record from the database, making it
 * unrecoverable.
 *
 * The resource is identified by the adminId path parameter.
 *
 * No request body or response data is returned.
 *
 * This action is irreversible.
 *
 * Failure cases include invalid adminId or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin user to delete
 * @path /eventRegistration/admin/admins/:adminId
 * @accessor api.functional.eventRegistration.admin.admins.eraseAdminUser
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAdminUser(
  connection: IConnection,
  props: eraseAdminUser.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAdminUser.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAdminUser.METADATA,
          path: eraseAdminUser.path(props),
          status: null,
        },
      );
}
export namespace eraseAdminUser {
  export type Props = {
    /** Unique identifier of the admin user to delete */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAdminUser.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAdminUser.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
