import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEmailVerificationToken } from "../../../../../structures/IEventRegistrationEmailVerificationToken";
import { IPageIEventRegistrationEmailVerificationToken } from "../../../../../structures/IPageIEventRegistrationEmailVerificationToken";

/**
 * Retrieve a specific email verification token by its ID for a regular user.
 *
 * Endpoint to get detailed information of a specific email verification token
 * belonging to a regular user.
 *
 * Access is typically restricted to admins or authorized system services.
 *
 * This aids in token lifecycle management and auditing.
 *
 * Errors must be handled if the token or user is not found.
 *
 * @param props.connection
 * @param props.regularUserId ID of the regular user owning the token
 * @param props.emailVerificationTokenId ID of the email verification token to
 *   retrieve
 * @path /eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId
 * @accessor api.functional.eventRegistration.admin.regularUsers.emailVerificationTokens.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the regular user owning the token */
    regularUserId: string & tags.Format<"uuid">;

    /** ID of the email verification token to retrieve */
    emailVerificationTokenId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEmailVerificationToken;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/emailVerificationTokens/${encodeURIComponent(props.emailVerificationTokenId ?? "null")}`;
  export const random = (): IEventRegistrationEmailVerificationToken =>
    typia.random<IEventRegistrationEmailVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("emailVerificationTokenId")(() =>
        typia.assert(props.emailVerificationTokenId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an email verification token for a specific regular user.
 *
 * This endpoint enables modification of an existing email verification token
 * record for a given regular user.
 *
 * The table event_registration_email_verification_tokens stores tokens for
 * verifying user emails, linked by the user's ID.
 *
 * Security and authorization roles must ensure that only authorized parties can
 * update verification tokens.
 *
 * Updating tokens may occur for administrative actions such as extending expiry
 * or reissuing tokens.
 *
 * The input request body should contain properties matching the schema for
 * update requests, and only allowed fields will be modified.
 *
 * Errors should be handled for non-existing token or user references.
 *
 * @param props.connection
 * @param props.regularUserId ID of the regular user owning the token
 * @param props.emailVerificationTokenId ID of the email verification token to
 *   update
 * @param props.body Update details of the email verification token
 * @path /eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId
 * @accessor api.functional.eventRegistration.admin.regularUsers.emailVerificationTokens.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the regular user owning the token */
    regularUserId: string & tags.Format<"uuid">;

    /** ID of the email verification token to update */
    emailVerificationTokenId: string & tags.Format<"uuid">;

    /** Update details of the email verification token */
    body: IEventRegistrationEmailVerificationToken.IUpdate;
  };
  export type Body = IEventRegistrationEmailVerificationToken.IUpdate;
  export type Response = IEventRegistrationEmailVerificationToken;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/emailVerificationTokens/${encodeURIComponent(props.emailVerificationTokenId ?? "null")}`;
  export const random = (): IEventRegistrationEmailVerificationToken =>
    typia.random<IEventRegistrationEmailVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("emailVerificationTokenId")(() =>
        typia.assert(props.emailVerificationTokenId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an email verification token by ID for a regular user.
 *
 * This API endpoint allows for the permanent deletion of an email verification
 * token belonging to a specific regular user. It uses the user ID and the token
 * ID as path parameters to target the exact token to remove.
 *
 * Deleting a token helps maintain security hygiene and allows invalidation of
 * tokens that are no longer valid or needed.
 *
 * This operation corresponds to the
 * event_registration_email_verification_tokens table and removes the record
 * irrevocably.
 *
 * Authorized roles: admin only.
 *
 * Error handling includes returning appropriate error messages if the token or
 * user does not exist.
 *
 * No request body is needed.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the target regular user
 * @param props.emailVerificationTokenId Unique identifier of the email
 *   verification token to delete
 * @path /eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId
 * @accessor api.functional.eventRegistration.admin.regularUsers.emailVerificationTokens.eraseEmailVerificationToken
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseEmailVerificationToken(
  connection: IConnection,
  props: eraseEmailVerificationToken.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseEmailVerificationToken.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseEmailVerificationToken.METADATA,
          path: eraseEmailVerificationToken.path(props),
          status: null,
        },
      );
}
export namespace eraseEmailVerificationToken {
  export type Props = {
    /** Unique identifier of the target regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the email verification token to delete */
    emailVerificationTokenId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens/:emailVerificationTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/emailVerificationTokens/${encodeURIComponent(props.emailVerificationTokenId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseEmailVerificationToken.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseEmailVerificationToken.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("emailVerificationTokenId")(() =>
        typia.assert(props.emailVerificationTokenId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new email verification token for a regular user.
 *
 * Create a new email verification token record for the given regular user.
 *
 * The token is unique and used to validate the email address ownership.
 *
 * This supports the email verification workflow.
 *
 * Proper authorization ensures only authenticated or admin users can perform
 * this action.
 *
 * The request body must contain the necessary token creation details following
 * schema constraints.
 *
 * @param props.connection
 * @param props.regularUserId ID of the regular user to create token for
 * @param props.body Information for creating a new email verification token
 * @path /eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens
 * @accessor api.functional.eventRegistration.admin.regularUsers.emailVerificationTokens.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the regular user to create token for */
    regularUserId: string & tags.Format<"uuid">;

    /** Information for creating a new email verification token */
    body: IEventRegistrationEmailVerificationToken.ICreate;
  };
  export type Body = IEventRegistrationEmailVerificationToken.ICreate;
  export type Response = IEventRegistrationEmailVerificationToken;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/emailVerificationTokens`;
  export const random = (): IEventRegistrationEmailVerificationToken =>
    typia.random<IEventRegistrationEmailVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get list of email verification tokens for a specified regular user.
 *
 * Retrieve a paginated, filtered list of email verification tokens belonging to
 * a specific regular user.
 *
 * Access is typically limited to admins.
 *
 * Supports query parameters for searching and paginating the list.
 *
 * Useful for audit and management of email verification tokens.
 *
 * @param props.connection
 * @param props.regularUserId ID of the regular user whose tokens to retrieve
 * @param props.body Search criteria and pagination parameters for token
 *   filtering
 * @path /eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens
 * @accessor api.functional.eventRegistration.admin.regularUsers.emailVerificationTokens.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of the regular user whose tokens to retrieve */
    regularUserId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for token filtering */
    body: IEventRegistrationEmailVerificationToken.IRequest;
  };
  export type Body = IEventRegistrationEmailVerificationToken.IRequest;
  export type Response = IPageIEventRegistrationEmailVerificationToken;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/regularUsers/:regularUserId/emailVerificationTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/emailVerificationTokens`;
  export const random = (): IPageIEventRegistrationEmailVerificationToken =>
    typia.random<IPageIEventRegistrationEmailVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
