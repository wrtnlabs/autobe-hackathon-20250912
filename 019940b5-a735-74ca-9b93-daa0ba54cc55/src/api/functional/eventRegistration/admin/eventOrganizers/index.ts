import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventOrganizer } from "../../../../structures/IEventRegistrationEventOrganizer";
import { IPageIEventRegistrationEventOrganizer } from "../../../../structures/IPageIEventRegistrationEventOrganizer";

/**
 * Create a new event organizer account with all necessary information. This
 * operation is restricted to admins.
 *
 * The request body must include email, password hash, full name, and optionally
 * phone number and profile picture URL.
 *
 * The system sets the email_verified flag according to input.
 *
 * This operation inserts a record into the event_registration_event_organizers
 * table and returns the created organizer's full data.
 *
 * @param props.connection
 * @param props.body Creation data for a new event organizer
 * @path /eventRegistration/admin/eventOrganizers
 * @accessor api.functional.eventRegistration.admin.eventOrganizers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for a new event organizer */
    body: IEventRegistrationEventOrganizer.ICreate;
  };
  export type Body = IEventRegistrationEventOrganizer.ICreate;
  export type Response = IEventRegistrationEventOrganizer;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/eventOrganizers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventOrganizers";
  export const random = (): IEventRegistrationEventOrganizer =>
    typia.random<IEventRegistrationEventOrganizer>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search event organizers with filtering and pagination.
 *
 * Retrieve a filtered and paginated list of event organizers from the system.
 * This allows querying event organizer accounts by criteria such as email, full
 * name, and email verification status.
 *
 * Security considerations ensure that only authorized system users can access
 * detailed organizer information. Pagination and sorting capabilities are
 * supported for handling large datasets efficiently.
 *
 * This operation references the event_registration_event_organizers table in
 * the Prisma schema, utilizing all publicly available columns for search and
 * display. The response provides a page of organizer summaries optimized for
 * list views.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for filtering event
 *   organizers
 * @path /eventRegistration/admin/eventOrganizers
 * @accessor api.functional.eventRegistration.admin.eventOrganizers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for filtering event organizers */
    body: IEventRegistrationEventOrganizer.IRequest;
  };
  export type Body = IEventRegistrationEventOrganizer.IRequest;
  export type Response = IPageIEventRegistrationEventOrganizer.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/eventOrganizers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventOrganizers";
  export const random = (): IPageIEventRegistrationEventOrganizer.ISummary =>
    typia.random<IPageIEventRegistrationEventOrganizer.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific event organizer.
 *
 * Get detailed information of a specific event organizer by ID. Only admins may
 * access this endpoint.
 *
 * The operation requires a UUID path parameter eventOrganizerId representing
 * the target organizer.
 *
 * This operation maps to the event_registration_event_organizers table in the
 * Prisma schema and returns all relevant organizer fields, including email,
 * full name, phone number, and email verification status.
 *
 * Appropriate security measures ensure only authorized users can retrieve this
 * sensitive information.
 *
 * @param props.connection
 * @param props.eventOrganizerId Unique identifier of the event organizer
 * @path /eventRegistration/admin/eventOrganizers/:eventOrganizerId
 * @accessor api.functional.eventRegistration.admin.eventOrganizers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the event organizer */
    eventOrganizerId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventOrganizer;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/eventOrganizers/:eventOrganizerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventOrganizers/${encodeURIComponent(props.eventOrganizerId ?? "null")}`;
  export const random = (): IEventRegistrationEventOrganizer =>
    typia.random<IEventRegistrationEventOrganizer>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventOrganizerId")(() =>
        typia.assert(props.eventOrganizerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update event organizer data.
 *
 * Update an existing event organizer's profile details by ID. Admins only.
 *
 * The path parameter eventOrganizerId identifies the event organizer to be
 * updated.
 *
 * The request body includes the fields allowed for update, such as full name,
 * phone number, profile picture URL, and email verification flag.
 *
 * Successful updates return the updated event organizer record, reflecting all
 * changes.
 *
 * This operation corresponds to the event_registration_event_organizers table
 * in the Prisma schema.
 *
 * @param props.connection
 * @param props.eventOrganizerId Unique identifier of the event organizer to
 *   update
 * @param props.body Update data for an event organizer
 * @path /eventRegistration/admin/eventOrganizers/:eventOrganizerId
 * @accessor api.functional.eventRegistration.admin.eventOrganizers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the event organizer to update */
    eventOrganizerId: string & tags.Format<"uuid">;

    /** Update data for an event organizer */
    body: IEventRegistrationEventOrganizer.IUpdate;
  };
  export type Body = IEventRegistrationEventOrganizer.IUpdate;
  export type Response = IEventRegistrationEventOrganizer;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/eventOrganizers/:eventOrganizerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/eventOrganizers/${encodeURIComponent(props.eventOrganizerId ?? "null")}`;
  export const random = (): IEventRegistrationEventOrganizer =>
    typia.random<IEventRegistrationEventOrganizer>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventOrganizerId")(() =>
        typia.assert(props.eventOrganizerId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an event organizer user account by ID.
 *
 * Permanently delete an event organizer user account by the specified unique
 * identifier.
 *
 * This operation is restricted to admin users with appropriate privileges.
 *
 * Once deleted, the event organizer data is irreversibly removed from the
 * system.
 *
 * Attempts to delete non-existent records or invalid IDs return errors.
 *
 * No response body content is returned upon successful deletion.
 *
 * All deletions are audited by system logs outside this API.
 *
 * Deletes the entry from the event_registration_event_organizers table in the
 * Prisma schema.
 *
 * @param props.connection
 * @param props.eventOrganizerId Unique identifier of the target event organizer
 *   to delete
 * @path /eventRegistration/admin/eventOrganizers/:eventOrganizerId
 * @accessor api.functional.eventRegistration.admin.eventOrganizers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target event organizer to delete */
    eventOrganizerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/eventOrganizers/:eventOrganizerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventOrganizers/${encodeURIComponent(props.eventOrganizerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventOrganizerId")(() =>
        typia.assert(props.eventOrganizerId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
