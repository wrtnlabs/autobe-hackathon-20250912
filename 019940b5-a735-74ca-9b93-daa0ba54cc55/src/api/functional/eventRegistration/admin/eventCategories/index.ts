import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventCategory } from "../../../../structures/IEventRegistrationEventCategory";
import { IPageIEventRegistrationEventCategory } from "../../../../structures/IPageIEventRegistrationEventCategory";

/**
 * Create a new event category with a unique name and optional description.
 *
 * Only admin users are authorized to perform this operation to maintain
 * controlled event categorization.
 *
 * This operation maps to the event_registration_event_categories table and
 * ensures the uniqueness of category names.
 *
 * Upon successful creation, the full event category record is returned with
 * assigned timestamps.
 *
 * @param props.connection
 * @param props.body Creation information for a new event category
 * @path /eventRegistration/admin/eventCategories
 * @accessor api.functional.eventRegistration.admin.eventCategories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for a new event category */
    body: IEventRegistrationEventCategory.ICreate;
  };
  export type Body = IEventRegistrationEventCategory.ICreate;
  export type Response = IEventRegistrationEventCategory;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/admin/eventCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventCategories";
  export const random = (): IEventRegistrationEventCategory =>
    typia.random<IEventRegistrationEventCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of event categories.
 *
 * Retrieve a filtered and paginated list of event categories from the system.
 *
 * This operation supports complex search parameters including partial name
 * matching using trigram search, description filtering, sorting by creation
 * date or name, and pagination.
 *
 * Only users with admin role are authorized to execute this operation, ensuring
 * that sensitive management capabilities are protected.
 *
 * It corresponds directly to the event_registration_event_categories table in
 * the database, utilizing all its searchable fields efficiently.
 *
 * The response returns a paginated list of event category summaries designed
 * for listings and administrative overviews.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for event
 *   categories
 * @path /eventRegistration/admin/eventCategories
 * @accessor api.functional.eventRegistration.admin.eventCategories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for event categories */
    body: IEventRegistrationEventCategory.IRequest;
  };
  export type Body = IEventRegistrationEventCategory.IRequest;
  export type Response = IPageIEventRegistrationEventCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/eventCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventCategories";
  export const random = (): IPageIEventRegistrationEventCategory.ISummary =>
    typia.random<IPageIEventRegistrationEventCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed event category information by ID.
 *
 * Retrieve detailed information about a specific event category by its unique
 * ID.
 *
 * This operation requires the eventCategoryId path parameter to specify the
 * target category.
 *
 * Only users with admin authorization can access this detailed event category
 * information.
 *
 * It maps directly to the event_registration_event_categories table column
 * data. The response includes all details necessary for administrative editing
 * or overview.
 *
 * @param props.connection
 * @param props.eventCategoryId Unique identifier of the target event category
 * @path /eventRegistration/admin/eventCategories/:eventCategoryId
 * @accessor api.functional.eventRegistration.admin.eventCategories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target event category */
    eventCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventCategory;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/eventCategories/:eventCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventCategories/${encodeURIComponent(props.eventCategoryId ?? "null")}`;
  export const random = (): IEventRegistrationEventCategory =>
    typia.random<IEventRegistrationEventCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventCategoryId")(() =>
        typia.assert(props.eventCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing event category.
 *
 * Update information of an existing event category by its unique ID.
 *
 * Admin role authorization is required to ensure controlled modification of
 * event classifications.
 *
 * The operation requires the eventCategoryId path parameter and request body
 * containing the updated fields.
 *
 * The response returns comprehensive updated information of the event category
 * for confirmation and subsequent use.
 *
 * @param props.connection
 * @param props.eventCategoryId Unique identifier of the target event category
 * @param props.body Updated event category information
 * @path /eventRegistration/admin/eventCategories/:eventCategoryId
 * @accessor api.functional.eventRegistration.admin.eventCategories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target event category */
    eventCategoryId: string & tags.Format<"uuid">;

    /** Updated event category information */
    body: IEventRegistrationEventCategory.IUpdate;
  };
  export type Body = IEventRegistrationEventCategory.IUpdate;
  export type Response = IEventRegistrationEventCategory;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/eventCategories/:eventCategoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/eventCategories/${encodeURIComponent(props.eventCategoryId ?? "null")}`;
  export const random = (): IEventRegistrationEventCategory =>
    typia.random<IEventRegistrationEventCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventCategoryId")(() =>
        typia.assert(props.eventCategoryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
