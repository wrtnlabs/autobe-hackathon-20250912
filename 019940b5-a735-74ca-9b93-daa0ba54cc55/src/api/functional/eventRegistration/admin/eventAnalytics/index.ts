import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAnalytics } from "../../../../structures/IEventRegistrationEventAnalytics";
import { IPageIEventRegistrationEventAnalytics } from "../../../../structures/IPageIEventRegistrationEventAnalytics";

/**
 * Search and retrieve a paginated list of event analytics data.
 *
 * Retrieve a filtered and paginated list of event analytics records from the
 * system. This operation supports detailed querying to provide insights into
 * event performance including total signups, waitlist sizes, and category
 * popularity metrics.
 *
 * The operation interacts with the event_registration_event_analytics table
 * which aggregates important metrics per event such as total sign-ups, waitlist
 * lengths, and category-wise popularity.
 *
 * Security considerations include ensuring only users with appropriate roles
 * and permissions can access detailed analytics data. Admins have global access
 * while organizers have scoped access.
 *
 * The request body supports various search parameters and pagination options to
 * enable precise data retrieval.
 *
 * The response contains a paginated collection of event analytics summaries
 * optimized for dashboard views.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for event
 *   analytics filtering
 * @path /eventRegistration/admin/eventAnalytics
 * @accessor api.functional.eventRegistration.admin.eventAnalytics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for event analytics
     * filtering
     */
    body: IEventRegistrationEventAnalytics.IRequest;
  };
  export type Body = IEventRegistrationEventAnalytics.IRequest;
  export type Response = IPageIEventRegistrationEventAnalytics.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/eventAnalytics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventAnalytics";
  export const random = (): IPageIEventRegistrationEventAnalytics.ISummary =>
    typia.random<IPageIEventRegistrationEventAnalytics.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed event analytics by ID.
 *
 * Retrieve detailed information about a single event analytics record
 * identified by eventAnalyticsId. This operation provides insights into
 * specific event registration data captured at a point in time.
 *
 * Access is controlled to ensure sensitive data is only visible to authorized
 * roles including admins and event organizers with appropriate permissions.
 *
 * If the requested eventAnalyticsId does not exist, the operation will respond
 * with an appropriate error.
 *
 * No request body is needed for this GET operation.
 *
 * @param props.connection
 * @param props.eventAnalyticsId Unique identifier of the target event analytics
 *   record
 * @path /eventRegistration/admin/eventAnalytics/:eventAnalyticsId
 * @accessor api.functional.eventRegistration.admin.eventAnalytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target event analytics record */
    eventAnalyticsId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/eventAnalytics/:eventAnalyticsId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventAnalytics/${encodeURIComponent(props.eventAnalyticsId ?? "null")}`;
  export const random = (): IEventRegistrationEventAnalytics =>
    typia.random<IEventRegistrationEventAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventAnalyticsId")(() =>
        typia.assert(props.eventAnalyticsId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
