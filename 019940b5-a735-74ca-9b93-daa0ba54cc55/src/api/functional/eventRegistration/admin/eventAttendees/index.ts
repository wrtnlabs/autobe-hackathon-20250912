import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEventAttendee } from "../../../../structures/IEventRegistrationEventAttendee";
import { IPageIEventRegistrationEventAttendee } from "../../../../structures/IPageIEventRegistrationEventAttendee";

/**
 * Search and retrieve a filtered, paginated list of event attendees.
 *
 * Retrieve a filtered and paginated list of event attendees. This operation
 * supports complex queries for event attendee data from the
 * event_registration_event_attendees table, which records confirmed users
 * registered for events. It includes references to associated events and
 * regular users, with creation and update timestamps.
 *
 * Access to this operation requires roles of admin or eventOrganizer,
 * reflecting their need to review attendees. Proper authorization checks are
 * mandatory to enforce data privacy.
 *
 * The response provides summarized attendee data conducive for management
 * dashboards or listings.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for event
 *   attendees
 * @path /eventRegistration/admin/eventAttendees
 * @accessor api.functional.eventRegistration.admin.eventAttendees.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for event attendees */
    body: IEventRegistrationEventAttendee.IRequest;
  };
  export type Body = IEventRegistrationEventAttendee.IRequest;
  export type Response = IPageIEventRegistrationEventAttendee.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/admin/eventAttendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/admin/eventAttendees";
  export const random = (): IPageIEventRegistrationEventAttendee.ISummary =>
    typia.random<IPageIEventRegistrationEventAttendee.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific event attendee by ID.
 *
 * Retrieve detailed information of a specific event attendee identified by
 * eventAttendeeId. The record includes event and user associations from
 * event_registration_event_attendees.
 *
 * Authorization is limited to admin and eventOrganizer roles to protect
 * sensitive registration details.
 *
 * Returns full attendee data or an error if not found.
 *
 * @param props.connection
 * @param props.eventAttendeeId Unique identifier of the event attendee record
 * @path /eventRegistration/admin/eventAttendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.admin.eventAttendees.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the event attendee record */
    eventAttendeeId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/admin/eventAttendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventAttendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update event attendee information.
 *
 * This API operation updates information for a particular event attendee
 * identified by the path parameter 'eventAttendeeId'. The underlying database
 * entity is event_registration_event_attendees, which links confirmed attendees
 * to events.
 *
 * Users with the appropriate authorization role can update the attendee record
 * details. This might include changes to the association or timestamps. The API
 * expects a valid UUID format ID to identify the attendee record.
 *
 * All updates must comply with database constraints ensuring event and user
 * relationships remain consistent. Timestamps should reflect the time of
 * modification to maintain auditability.
 *
 * Validation includes confirming the attendee exists and the provided update
 * data matches the Prisma schema field types.
 *
 * @param props.connection
 * @param props.eventAttendeeId Unique identifier of the event attendee to
 *   update
 * @param props.body Information needed to update an event attendee record
 * @path /eventRegistration/admin/eventAttendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.admin.eventAttendees.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the event attendee to update */
    eventAttendeeId: string & tags.Format<"uuid">;

    /** Information needed to update an event attendee record */
    body: IEventRegistrationEventAttendee.IUpdate;
  };
  export type Body = IEventRegistrationEventAttendee.IUpdate;
  export type Response = IEventRegistrationEventAttendee;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/admin/eventAttendees/:eventAttendeeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/admin/eventAttendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): IEventRegistrationEventAttendee =>
    typia.random<IEventRegistrationEventAttendee>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an event attendee registration by ID. This is a permanent deletion
 * removing the attendee's event registration record.
 *
 * Authorized roles for this operation include regularUser (the attendee),
 * admin, and eventOrganizer.
 *
 * There is no request or response body.
 *
 * This operation does not perform soft deletion.
 *
 * @param props.connection
 * @param props.eventAttendeeId Unique identifier of the event attendee
 *   registration to delete
 * @path /eventRegistration/admin/eventAttendees/:eventAttendeeId
 * @accessor api.functional.eventRegistration.admin.eventAttendees.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the event attendee registration to delete */
    eventAttendeeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/admin/eventAttendees/:eventAttendeeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/admin/eventAttendees/${encodeURIComponent(props.eventAttendeeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventAttendeeId")(() =>
        typia.assert(props.eventAttendeeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
