import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationNotification } from "../../../../structures/IEventRegistrationNotification";
import { IPageIEventRegistrationNotification } from "../../../../structures/IPageIEventRegistrationNotification";

/**
 * Retrieve filtered paginated notifications list.
 *
 * Retrieves filtered and paginated notifications for authenticated users across
 * all roles (regular user, event organizer, admin).
 *
 * Notifications include event-related registration confirmations, waitlist
 * promotions, schedule changes, and capacity adjustments.
 *
 * Supports filtering by read status, sorting, and pagination for efficient
 * notification log management.
 *
 * Returns paginated notification summaries optimally designed for user
 * dashboards.
 *
 * Matches the event_registration_notifications Prisma schema requirements,
 * adhering to role-based access control.
 *
 * @param props.connection
 * @param props.body Filtering, sorting and pagination criteria for
 *   notifications
 * @path /eventRegistration/eventOrganizer/notifications
 * @accessor api.functional.eventRegistration.eventOrganizer.notifications.indexNotifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexNotifications(
  connection: IConnection,
  props: indexNotifications.Props,
): Promise<indexNotifications.Response> {
  return true === connection.simulate
    ? indexNotifications.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexNotifications.METADATA,
          path: indexNotifications.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexNotifications {
  export type Props = {
    /** Filtering, sorting and pagination criteria for notifications */
    body: IEventRegistrationNotification.IRequest;
  };
  export type Body = IEventRegistrationNotification.IRequest;
  export type Response = IPageIEventRegistrationNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/eventOrganizer/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/eventOrganizer/notifications";
  export const random = (): IPageIEventRegistrationNotification.ISummary =>
    typia.random<IPageIEventRegistrationNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexNotifications.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexNotifications.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a notification by ID.
 *
 * This operation retrieves detailed information about a notification identified
 * by its UUID. The notification record includes properties such as type (e.g.,
 * registration confirmation, waitlist promotion), content message, read flag,
 * creation and update timestamps, and optional deletion timestamp. It also
 * includes association to the user who receives or triggers the notification,
 * if applicable.
 *
 * Access is typically restricted to authenticated users with roles including
 * regularUser, eventOrganizer, or admin, viewing their own notifications or
 * system components retrieving notifications for management or logging
 * purposes.
 *
 * The operation does not alter data and is a simple data fetch based on the
 * unique notification ID.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @path /eventRegistration/eventOrganizer/notifications/:notificationId
 * @accessor api.functional.eventRegistration.eventOrganizer.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationNotification;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEventRegistrationNotification =>
    typia.random<IEventRegistrationNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing notification.
 *
 * This operation updates properties of an existing notification identified by
 * the UUID. Common updates include changing the read flag or modifying the
 * content message.
 *
 * Updates are typically done by users marking notifications read or system
 * processes updating texts.
 *
 * The operation ensures valid input data and returns the updated notification
 * object after successful modification.
 *
 * Access control is enforced to restrict updates to authorized users -
 * regularUser, eventOrganizer, or admin - permitted to update the notification
 * data they own or manage.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @param props.body Update info of the notification
 * @path /eventRegistration/eventOrganizer/notifications/:notificationId
 * @accessor api.functional.eventRegistration.eventOrganizer.notifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;

    /** Update info of the notification */
    body: IEventRegistrationNotification.IUpdate;
  };
  export type Body = IEventRegistrationNotification.IUpdate;
  export type Response = IEventRegistrationNotification;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/eventOrganizer/notifications/:notificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IEventRegistrationNotification =>
    typia.random<IEventRegistrationNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification by ID.
 *
 * This operation deletes a notification record by its unique identifier,
 * permanently removing it from the database.
 *
 * This supports user actions to erase unwanted notifications or administrative
 * cleanup tasks.
 *
 * No request body is required and no response body is returned upon successful
 * deletion.
 *
 * Authorization ensures only the notification owner or administrators can
 * perform this hard delete operation.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @path /eventRegistration/eventOrganizer/notifications/:notificationId
 * @accessor api.functional.eventRegistration.eventOrganizer.notifications.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/eventOrganizer/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
