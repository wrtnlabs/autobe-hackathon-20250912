import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationOrganizerRequests } from "../../../../structures/IEventRegistrationOrganizerRequests";
import { IPageIEventRegistrationOrganizerRequests } from "../../../../structures/IPageIEventRegistrationOrganizerRequests";

/**
 * Search and list event organizer requests.
 *
 * Retrieve a paginated, filtered, and sorted list of event organizer requests.
 *
 * This operation allows admins and event organizers to query pending, approved,
 * or rejected organizer status requests submitted by regular users. Filtering
 * by status, search terms, and pagination enable efficient management.
 *
 * The underlying entity is event_registration_organizer_requests with fields
 * including request ID, user ID, status, reason, and admin comment.
 *
 * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
 *
 * Typical usage includes admin review workflows for approving or rejecting
 * organizer requests.
 *
 * Search and filter criteria are provided in the request body, with results
 * paginated in the response.
 *
 * @param props.connection
 * @param props.body Organizer request search criteria and pagination parameters
 * @path /eventRegistration/eventOrganizer/organizerRequests
 * @accessor api.functional.eventRegistration.eventOrganizer.organizerRequests.searchOrganizerRequests
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchOrganizerRequests(
  connection: IConnection,
  props: searchOrganizerRequests.Props,
): Promise<searchOrganizerRequests.Response> {
  return true === connection.simulate
    ? searchOrganizerRequests.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchOrganizerRequests.METADATA,
          path: searchOrganizerRequests.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchOrganizerRequests {
  export type Props = {
    /** Organizer request search criteria and pagination parameters */
    body: IEventRegistrationOrganizerRequests.IRequest;
  };
  export type Body = IEventRegistrationOrganizerRequests.IRequest;
  export type Response = IPageIEventRegistrationOrganizerRequests.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/eventOrganizer/organizerRequests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/eventRegistration/eventOrganizer/organizerRequests";
  export const random = (): IPageIEventRegistrationOrganizerRequests.ISummary =>
    typia.random<IPageIEventRegistrationOrganizerRequests.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchOrganizerRequests.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchOrganizerRequests.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get event organizer request details by ID.
 *
 * Retrieve detailed information for a single event organizer request by ID.
 *
 * This operation is used by admins and event organizers to view the full
 * details of a specific organizer status request submitted by a regular user.
 *
 * The resource identifier is the organizerRequestId path parameter.
 *
 * The response includes all relevant fields such as request status, reason
 * given, and admin comments.
 *
 * Authorization is restricted to roles 'admin' and 'eventOrganizer'.
 *
 * @param props.connection
 * @param props.organizerRequestId Unique identifier of the organizer request to
 *   retrieve
 * @path /eventRegistration/eventOrganizer/organizerRequests/:organizerRequestId
 * @accessor api.functional.eventRegistration.eventOrganizer.organizerRequests.atOrganizerRequest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atOrganizerRequest(
  connection: IConnection,
  props: atOrganizerRequest.Props,
): Promise<atOrganizerRequest.Response> {
  return true === connection.simulate
    ? atOrganizerRequest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atOrganizerRequest.METADATA,
          path: atOrganizerRequest.path(props),
          status: null,
        },
      );
}
export namespace atOrganizerRequest {
  export type Props = {
    /** Unique identifier of the organizer request to retrieve */
    organizerRequestId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationOrganizerRequests;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/eventOrganizer/organizerRequests/:organizerRequestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/eventOrganizer/organizerRequests/${encodeURIComponent(props.organizerRequestId ?? "null")}`;
  export const random = (): IEventRegistrationOrganizerRequests =>
    typia.random<IEventRegistrationOrganizerRequests>();
  export const simulate = (
    connection: IConnection,
    props: atOrganizerRequest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atOrganizerRequest.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizerRequestId")(() =>
        typia.assert(props.organizerRequestId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
