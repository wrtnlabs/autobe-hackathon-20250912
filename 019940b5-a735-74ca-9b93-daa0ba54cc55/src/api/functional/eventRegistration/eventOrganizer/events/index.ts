import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEvent } from "../../../../structures/IEventRegistrationEvent";
export * as attendees from "./attendees/index";
export * as waitlists from "./waitlists/index";

/**
 * Create a new event with provided details including category, scheduled date,
 * location, capacity, optional description, ticket price, and event status.
 *
 * Only users with eventOrganizer or admin roles may create events.
 *
 * The request body must include valid values respecting validation constraints
 * from the Prisma schema such as positive capacity and valid category
 * reference.
 *
 * On success, returns the created event entity including generated UUID and
 * timestamps.
 *
 * Clients use this to add new events to the system which can then be browsed
 * and signed up for by regular users.
 *
 * The method used is POST since this operation creates a new resource.
 *
 * @param props.connection
 * @param props.body New event creation data
 * @path /eventRegistration/eventOrganizer/events
 * @accessor api.functional.eventRegistration.eventOrganizer.events.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New event creation data */
    body: IEventRegistrationEvent.ICreate;
  };
  export type Body = IEventRegistrationEvent.ICreate;
  export type Response = IEventRegistrationEvent;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/eventOrganizer/events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/eventOrganizer/events";
  export const random = (): IEventRegistrationEvent =>
    typia.random<IEventRegistrationEvent>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing event by eventId.
 *
 * Update an existing event identified by eventId with new property values
 * including category, name, date, location, capacity, optional description,
 * ticket price, and status.
 *
 * Only eventOrganizers owning the event or admins may update events.
 *
 * Request body must comply with Prisma schema validation constraints.
 *
 * Returns the updated event entity on success.
 *
 * Intended for clients modifying event details such as rescheduling or capacity
 * adjustments.
 *
 * Method used is PUT as this constitutes full replacement of the resource's
 * modifiable attributes.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event to update
 * @param props.body Updated event data
 * @path /eventRegistration/eventOrganizer/events/:eventId
 * @accessor api.functional.eventRegistration.eventOrganizer.events.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the event to update */
    eventId: string & tags.Format<"uuid">;

    /** Updated event data */
    body: IEventRegistrationEvent.IUpdate;
  };
  export type Body = IEventRegistrationEvent.IUpdate;
  export type Response = IEventRegistrationEvent;

  export const METADATA = {
    method: "PUT",
    path: "/eventRegistration/eventOrganizer/events/:eventId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/eventRegistration/eventOrganizer/events/${encodeURIComponent(props.eventId ?? "null")}`;
  export const random = (): IEventRegistrationEvent =>
    typia.random<IEventRegistrationEvent>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
