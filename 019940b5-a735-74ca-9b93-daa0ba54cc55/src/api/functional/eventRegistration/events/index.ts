import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationEvent } from "../../../structures/IEventRegistrationEvent";
import { IPageIEventRegistrationEvent } from "../../../structures/IPageIEventRegistrationEvent";

/**
 * Query and list events with filtering and pagination.
 *
 * Search and retrieve events with multiple filtering options (date range,
 * location, category, status), sorting, and pagination.
 *
 * Open to all users without authentication.
 *
 * Results are returned as paginated event summaries with essential event
 * information.
 *
 * Supports efficient browsing of events with filtering criteria.
 *
 * @param props.connection
 * @param props.body Event search and filter parameters
 * @path /eventRegistration/events
 * @accessor api.functional.eventRegistration.events.searchEvents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchEvents(
  connection: IConnection,
  props: searchEvents.Props,
): Promise<searchEvents.Response> {
  return true === connection.simulate
    ? searchEvents.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchEvents.METADATA,
          path: searchEvents.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchEvents {
  export type Props = {
    /** Event search and filter parameters */
    body: IEventRegistrationEvent.IRequest;
  };
  export type Body = IEventRegistrationEvent.IRequest;
  export type Response = IPageIEventRegistrationEvent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/eventRegistration/events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/events";
  export const random = (): IPageIEventRegistrationEvent.ISummary =>
    typia.random<IPageIEventRegistrationEvent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchEvents.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchEvents.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a single event by its eventId.
 *
 * Retrieve full details of a single event by its unique eventId. This operation
 * returns the event's core properties including name, scheduled date in ISO
 * 8601 format, location, maximum capacity, optional description, ticket price,
 * and current status which is one of scheduled, cancelled, or completed.
 *
 * Users of this endpoint include event organizers wanting to view their events,
 * and general users browsing event details.
 *
 * The operation accesses event_registration_events from the Prisma schema,
 * returning all information needed to display event details.
 *
 * The eventId parameter corresponds to the primary key UUID of the event
 * record. Appropriate error handling is expected if the event does not exist.
 *
 * No request body is needed. The response body returns the full event entity
 * representation.
 *
 * Authorization roles allow all users, including unauthenticated users, to
 * access event details.
 *
 * This endpoint uses the GET method, ensuring safe and idempotent retrieval of
 * event data.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the event
 * @path /eventRegistration/events/:eventId
 * @accessor api.functional.eventRegistration.events.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the event */
    eventId: string & tags.Format<"uuid">;
  };
  export type Response = IEventRegistrationEvent;

  export const METADATA = {
    method: "GET",
    path: "/eventRegistration/events/:eventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/events/${encodeURIComponent(props.eventId ?? "null")}`;
  export const random = (): IEventRegistrationEvent =>
    typia.random<IEventRegistrationEvent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
