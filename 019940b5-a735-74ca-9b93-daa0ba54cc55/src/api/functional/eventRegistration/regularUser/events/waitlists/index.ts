import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Erase waitlist entry by eventId and eventWaitlistId.
 *
 * Deletes a waitlist record from the event_registration_event_waitlists table
 * permanently. It requires both eventId and eventWaitlistId as path parameters,
 * both UUIDs, which uniquely identify the event and the specific waitlist entry
 * respectively.
 *
 * Authentication with the "user" role is required to execute this operation.
 *
 * No request body is needed, and the operation returns no response body upon
 * success.
 *
 * This operation is critical in managing event waitlists, ensuring users
 * removed from waitlists are no longer considered for promotions or
 * notifications.
 *
 * Any invalid or unauthorized attempts are rejected with appropriate error
 * messages.
 *
 * @param props.connection
 * @param props.eventId Unique identifier of the target event
 * @param props.eventWaitlistId Unique identifier of the waitlist entry to
 *   delete
 * @path /eventRegistration/regularUser/events/:eventId/waitlists/:eventWaitlistId
 * @accessor api.functional.eventRegistration.regularUser.events.waitlists.eraseWaitlistEntry
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseWaitlistEntry(
  connection: IConnection,
  props: eraseWaitlistEntry.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseWaitlistEntry.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseWaitlistEntry.METADATA,
          path: eraseWaitlistEntry.path(props),
          status: null,
        },
      );
}
export namespace eraseWaitlistEntry {
  export type Props = {
    /** Unique identifier of the target event */
    eventId: string & tags.Format<"uuid">;

    /** Unique identifier of the waitlist entry to delete */
    eventWaitlistId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/eventRegistration/regularUser/events/:eventId/waitlists/:eventWaitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/eventRegistration/regularUser/events/${encodeURIComponent(props.eventId ?? "null")}/waitlists/${encodeURIComponent(props.eventWaitlistId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseWaitlistEntry.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseWaitlistEntry.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("eventId")(() => typia.assert(props.eventId));
      assert.param("eventWaitlistId")(() =>
        typia.assert(props.eventWaitlistId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
