import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IEventRegistrationOrganizerRequest } from "../../../../structures/IEventRegistrationOrganizerRequest";

/**
 * Submit an organizer request by a regular user for admin approval.
 *
 * Create a new organizer request record where a regular user requests elevated
 * privileges to create and manage events. The status is set as 'pending' upon
 * creation and awaits admin approval.
 *
 * This operation securely records the organizer request in the database and
 * enforces uniqueness per user. The user must be authenticated as a regular
 * user.
 *
 * When the request is approved or rejected, the admin will update the status
 * via a separate operation.
 *
 * Errors are returned if the user already has a pending request or is
 * unauthorized.
 *
 * @param props.connection
 * @param props.body Data required to create an organizer request
 * @path /eventRegistration/regularUser/organizerRequests
 * @accessor api.functional.eventRegistration.regularUser.organizerRequests.createOrganizerRequest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createOrganizerRequest(
  connection: IConnection,
  props: createOrganizerRequest.Props,
): Promise<createOrganizerRequest.Response> {
  return true === connection.simulate
    ? createOrganizerRequest.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createOrganizerRequest.METADATA,
          path: createOrganizerRequest.path(),
          status: null,
        },
        props.body,
      );
}
export namespace createOrganizerRequest {
  export type Props = {
    /** Data required to create an organizer request */
    body: IEventRegistrationOrganizerRequest.ICreate;
  };
  export type Body = IEventRegistrationOrganizerRequest.ICreate;
  export type Response = IEventRegistrationOrganizerRequest;

  export const METADATA = {
    method: "POST",
    path: "/eventRegistration/regularUser/organizerRequests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/eventRegistration/regularUser/organizerRequests";
  export const random = (): IEventRegistrationOrganizerRequest =>
    typia.random<IEventRegistrationOrganizerRequest>();
  export const simulate = (
    connection: IConnection,
    props: createOrganizerRequest.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createOrganizerRequest.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
