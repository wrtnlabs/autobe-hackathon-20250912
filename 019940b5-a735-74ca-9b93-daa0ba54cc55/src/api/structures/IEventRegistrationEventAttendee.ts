import { tags } from "typia";

/**
 * Represents a confirmed attendee record linking a user to an event.
 *
 * Includes necessary timestamps for audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEventAttendee = {
  /** Unique identifier of attendee record */
  id: string & tags.Format<"uuid">;

  /** Associated event unique identifier */
  event_id: string & tags.Format<"uuid">;

  /** Associated user's unique identifier */
  regular_user_id: string & tags.Format<"uuid">;

  /** Created timestamp in ISO 8601 format */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp in ISO 8601 format */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationEventAttendee {
  /** Filters and pagination parameters for querying event attendees. */
  export type IRequest = {
    /** Page number for pagination (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit of records per page for pagination. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Optional filter by event ID. */
    event_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter by regular user ID. */
    regular_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter by creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body schema for creating an event attendee record. Requires event
   * ID and user ID to link the attendee to an event.
   */
  export type ICreate = {
    /** References the event_registration_events.id of the attended event. */
    event_id: string & tags.Format<"uuid">;

    /** References the event_registration_regular_users.id of the attendee. */
    regular_user_id: string & tags.Format<"uuid">;
  };

  /**
   * Request body schema for updating an event attendee record. All properties
   * are optional and nullable to support partial updates.
   */
  export type IUpdate = {
    /**
     * References the event_registration_events.id of the attended event.
     * Nullable for updates.
     */
    event_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * References the event_registration_regular_users.id of the attendee.
     * Nullable for updates.
     */
    regular_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Timestamp when the attendee registered. Nullable for updates. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when the attendee registration was last updated. Nullable
     * for updates.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Minimal summary view for event attendees.
   *
   * Includes the key identifiers and created timestamp for quick reference.
   */
  export type ISummary = {
    /** Unique identifier of attendee record */
    id: string & tags.Format<"uuid">;

    /** Associated event unique identifier */
    event_id: string & tags.Format<"uuid">;

    /** Associated user's unique identifier */
    regular_user_id: string & tags.Format<"uuid">;

    /** Created timestamp in ISO 8601 format */
    created_at: string & tags.Format<"date-time">;
  };
}
