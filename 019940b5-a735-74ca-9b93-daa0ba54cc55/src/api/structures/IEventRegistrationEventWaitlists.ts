import { tags } from "typia";

/**
 * Represents the waitlist for events that have reached full capacity. Each
 * record links a regular user waiting for a spot in a specific event. The
 * creation timestamp manages the FIFO order of the waitlist. This supports
 * automated waitlist promotion and audit logging.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEventWaitlists = {
  /**
   * Primary Key.
   *
   * Represents the unique identifier for each waitlist record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * References the event_registration_events.id of the event being waited
   * for.
   *
   * This property links the waitlist record to a specific event.
   */
  event_id: string & tags.Format<"uuid">;

  /**
   * References the event_registration_regular_users.id of the waitlisted
   * user.
   *
   * Identifies which regular user is on the waitlist.
   */
  regular_user_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when this waitlist entry was created, defining FIFO order.
   *
   * Used to manage the order in which waitlisted users are promoted.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this waitlist entry was last updated.
   *
   * Tracks the last modification time to support audit logging.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationEventWaitlists {
  /**
   * Create new event waitlist record for a user waiting for a spot in a full
   * event.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   */
  export type ICreate = {
    /**
     * References the event_registration_events.id of the event being waited
     * for.
     *
     * Mandatory identifier linking the new waitlist entry to its event.
     */
    event_id: string & tags.Format<"uuid">;

    /**
     * References the event_registration_regular_users.id of the waitlisted
     * user.
     *
     * Mandatory identifier for the user who is being added to the waitlist.
     */
    regular_user_id: string & tags.Format<"uuid">;

    /**
     * Timestamp when this waitlist entry was created, defining FIFO order.
     *
     * Optional; defaults to current timestamp if not supplied.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when this waitlist entry was last updated.
     *
     * Optional; defaults to current timestamp if not supplied.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Update an existing event waitlist record attribues.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   */
  export type IUpdate = {
    /**
     * References the event_registration_events.id of the event being waited
     * for.
     *
     * Optional property for updating the event associated with the waitlist
     * record.
     */
    event_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * References the event_registration_regular_users.id of the waitlisted
     * user.
     *
     * Optional property for updating the user associated with the waitlist
     * record.
     */
    regular_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when this waitlist entry was created, defining FIFO order.
     *
     * Optional; can be used to modify record creation timestamp for
     * correction purposes.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when this waitlist entry was last updated.
     *
     * Optional; used to record the time of latest modification.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
