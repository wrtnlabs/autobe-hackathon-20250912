import { tags } from "typia";

/**
 * Record representing an event in the event registration system, including
 * essential properties for event management and listing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEvent = {
  /**
   * Primary Key.
   *
   * Unique identifier for the event.
   */
  id: string & tags.Format<"uuid">;

  /** Foreign key to the event category. */
  event_category_id: string & tags.Format<"uuid">;

  /**
   * The name of the event.
   *
   * Non-empty string naming the event.
   */
  name: string;

  /** The scheduled start date and time of the event in ISO 8601 format. */
  date: string & tags.Format<"date-time">;

  /** The location where the event will take place. */
  location: string;

  /**
   * The maximum number of attendees allowed for the event.
   *
   * Must be a positive integer.
   */
  capacity: number & tags.Type<"int32">;

  /** Detailed description of the event; optional. */
  description?: string | null | undefined;

  /** The ticket price for entry; zero indicates a free event. */
  ticket_price: number;

  /**
   * The current status of the event: scheduled, cancelled, or completed.
   *
   * Allowed values: "scheduled", "cancelled", "completed"
   */
  status: "scheduled" | "cancelled" | "completed";

  /** Timestamp when the event record was created, as ISO 8601 string. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the event record was last updated, as ISO 8601 string. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null if the event is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IEventRegistrationEvent {
  /** Search criteria and pagination parameters for filtering events. */
  export type IRequest = {
    /** Optional filter by name, partial match. */
    name?: string | null | undefined;

    /** Optional filter by status; supports multiple values. */
    status?: ("scheduled" | "cancelled" | "completed")[] | null | undefined;

    /** Optional date range start to filter events on or after this date. */
    date_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional date range end to filter events before or on this date. */
    date_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional location filter; partial string match. */
    location?: string | null | undefined;

    /** Optional event category id filter. */
    event_category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Page number for pagination. */
    page?: number | null | undefined;

    /** Limit of records per page. */
    limit?: number | null | undefined;

    /** Sort field and direction. */
    sort?:
      | {
          /**
           * Sort field: must be one of 'name', 'date', 'capacity', or
           * 'ticket_price'.
           */
          field: "name" | "date" | "capacity" | "ticket_price";

          /** Sort direction: 'asc' for ascending, 'desc' for descending. */
          direction: "asc" | "desc";
        }
      | null
      | undefined;
  };

  /**
   * Request payload for creating a new event with all required fields and
   * optional description.
   */
  export type ICreate = {
    /**
     * Foreign key to the event category.
     *
     * Must correspond to an existing event category ID.
     */
    event_category_id: string & tags.Format<"uuid">;

    /**
     * The name of the event.
     *
     * Required non-empty string.
     */
    name: string;

    /** The scheduled start date and time of the event in ISO 8601 format. */
    date: string & tags.Format<"date-time">;

    /** The location where the event will take place. */
    location: string;

    /**
     * The maximum number of attendees allowed for the event.
     *
     * Must be a positive integer.
     */
    capacity: number & tags.Type<"int32">;

    /** Detailed description of the event; optional. */
    description?: string | null | undefined;

    /** The ticket price for entry; zero indicates a free event. */
    ticket_price: number;

    /**
     * The current status of the event.
     *
     * Must be one of "scheduled", "cancelled", or "completed".
     */
    status: "scheduled" | "cancelled" | "completed";
  };

  /** Request payload for updating an existing event with partial fields. */
  export type IUpdate = {
    /**
     * Foreign key to event category.
     *
     * Optional; can be used to change the event's category.
     */
    event_category_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The name of the event.
     *
     * Optional field for updating.
     */
    name?: string | null | undefined;

    /** The scheduled start date and time in ISO 8601 format. */
    date?: (string & tags.Format<"date-time">) | null | undefined;

    /** The location of the event. */
    location?: string | null | undefined;

    /** The max capacity of attendees. */
    capacity?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional event description. */
    description?: string | null | undefined;

    /** The ticket price. */
    ticket_price?: number | null | undefined;

    /** Event status: scheduled, cancelled, completed. */
    status?: "scheduled" | "cancelled" | "completed" | null | undefined;
  };

  /**
   * A summary view of the event entity presenting the core identifying and
   * scheduling data. Provides enough detail for event listings and
   * overviews.
   */
  export type ISummary = {
    /** Primary key UUID of the event */
    id: string & tags.Format<"uuid">;

    /** Foreign key referring to the category the event belongs to */
    event_category_id: string & tags.Format<"uuid">;

    /** The name of the event */
    name: string;

    /** The scheduled start date and time of the event in ISO 8601 format. */
    date: string & tags.Format<"date-time">;

    /** Location where the event will take place */
    location: string;

    /** The maximum number of attendees allowed for the event */
    capacity: number & tags.Type<"int32">;

    /** The ticket price for entry; zero indicates a free event */
    ticket_price: number;

    /** The current status of the event */
    status: "scheduled" | "cancelled" | "completed";
  };
}
