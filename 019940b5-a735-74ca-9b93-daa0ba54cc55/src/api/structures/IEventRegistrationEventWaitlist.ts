import { tags } from "typia";

/**
 * Represents a waitlist entry associating a regular user with an event waiting
 * for available capacity.
 *
 * Each entry includes references to the event and user plus timestamps for
 * creation and update tracking. Used to enforce FIFO waitlist ordering and
 * business logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEventWaitlist = {
  /** Primary Key. Unique identifier of the waitlist entry. */
  id: string & tags.Format<"uuid">;

  /** Event ID this waitlist entry is associated with. */
  event_id: string & tags.Format<"uuid">;

  /** Regular user ID of the user on the waitlist. */
  regular_user_id: string & tags.Format<"uuid">;

  /** Timestamp when this waitlist entry was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this waitlist entry was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationEventWaitlist {
  /**
   * Request body schema for searching event waitlists. Supports pagination
   * and filtering by event or regular user.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: number | null | undefined;

    /** Number of items per page for pagination. */
    limit?: number | null | undefined;

    /** Filter by event ID. */
    event_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by regular user ID. */
    regular_user_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Payload to create a new event waitlist entry.
   *
   * Requires event_id and regular_user_id to associate user and event.
   */
  export type ICreate = {
    /**
     * UUID of the event to be waited for.
     *
     * REQUIRED.
     */
    event_id: string & tags.Format<"uuid">;

    /**
     * UUID of the regular user added to the waitlist.
     *
     * REQUIRED.
     */
    regular_user_id: string & tags.Format<"uuid">;
  };

  /**
   * Update data for an event registration event waitlist record.
   *
   * Allows partial updates and nullable clearing of relation and timestamp
   * fields.
   *
   * All properties are optional and nullable to support flexible updates.
   */
  export type IUpdate = {
    /**
     * References the {@link event_registration_events.id} of the event being
     * waited for.
     *
     * Optional UUID string referencing the event; nullable to allow
     * clearing.
     */
    event_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * References the {@link event_registration_regular_users.id} of the
     * waitlisted user.
     *
     * Optional UUID string of the waitlisted user; nullable.
     */
    regular_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when this waitlist entry was created, defining FIFO order.
     *
     * Optional ISO 8601 date-time string; nullable.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp when this waitlist entry was last updated.
     *
     * Optional ISO 8601 date-time string; nullable.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * A summary view of waitlist entry representing a regular user waiting for
   * an event spot. Contains essential references for list displays.
   */
  export type ISummary = {
    /** Primary key of the waitlist entry */
    id: string;

    /** Reference to the event associated with the waitlist entry */
    event_id: string;

    /** Reference to the regular user on the waitlist */
    regular_user_id: string;

    /** Timestamp when this waitlist entry was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when this waitlist entry was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
