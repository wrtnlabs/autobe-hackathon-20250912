import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Event organizers who can create and manage their own events after admin
 * approval. Stores authentication credentials plus contact details and profile
 * information such as full name, phone number, and profile picture URL. Email
 * must be unique. Tracks email verification status and timestamps for creation
 * and updates.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEventOrganizer = {
  /**
   * Primary Key.
   *
   * Unique identifier for the event organizer.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Event organizer's unique email address for authentication. Must be
   * unique.
   */
  email: string;

  /**
   * Hashed password for secure authentication. Never store plain text
   * passwords.
   */
  password_hash: string;

  /** Full name of the event organizer. */
  full_name: string;

  /**
   * Contact phone number of the event organizer, optional.
   *
   * Nullable.
   */
  phone_number?: string | null | undefined;

  /**
   * URL for profile picture of the organizer, optional.
   *
   * Nullable.
   */
  profile_picture_url?: string | null | undefined;

  /** Indicator whether the organizer has verified their email. */
  email_verified: boolean;

  /**
   * Timestamp when the organizer record was created. ISO 8601 date-time
   * string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the organizer record was last updated. ISO 8601 date-time
   * string.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationEventOrganizer {
  /**
   * Request payload for creating a new event organizer user account. Includes
   * authentication and profile info.
   */
  export type ICreate = {
    /**
     * Unique email address for the event organizer. This is mandatory for
     * login and communication.
     */
    email: string;

    /**
     * Hashed password string for secure authentication. Never store
     * plaintext passwords.
     */
    password_hash: string;

    /** Full legal or preferred name of the event organizer. */
    full_name: string;

    /** Optional contact phone number of the organizer. */
    phone_number?: string | null | undefined;

    /** URL to the organizer's profile picture. Optional field. */
    profile_picture_url?: string | null | undefined;

    /** Flag indicating if the organizer's email has been verified. */
    email_verified: boolean;
  };

  /** Request payload for event organizer login authentication. */
  export type ILogin = {
    /** Email address of the event organizer used for login. */
    email: string;

    /** Hashed password for authentication. */
    password_hash: string;
  };

  /** Request payload to refresh JWT tokens for event organizer users. */
  export type IRefresh = {
    /** Refresh token used to obtain new authentication tokens. */
    refresh_token: string;
  };

  /**
   * Response payload for authorized event organizer users including JWT
   * tokens.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized event organizer user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the authorized event organizer. */
    email: string;

    /**
     * Hashed password for secure authentication. Never store plain text
     * passwords.
     */
    password_hash: string;

    /** Full name of the authorized event organizer. */
    full_name: string;

    /** Optional phone number of the authorized event organizer. */
    phone_number?: string | null | undefined;

    /** Optional profile picture URL of the authorized event organizer. */
    profile_picture_url?: string | null | undefined;

    /** Email verification status of the authorized event organizer. */
    email_verified: boolean;

    /** Account creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Account last updated timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Request parameter object for filtering and paginating event organizers. */
  export type IRequest = {
    /**
     * Email address filter for searching event organizers.
     *
     * Nullable.
     */
    email?: string | null | undefined;

    /**
     * Full name filter to search event organizers. Uses trigram search
     * operator in database.
     *
     * Nullable.
     */
    full_name?: string | null | undefined;

    /**
     * Email verified status filter.
     *
     * Nullable.
     */
    email_verified?: boolean | null | undefined;

    /**
     * Phone number filter.
     *
     * Nullable.
     */
    phone_number?: string | null | undefined;

    /**
     * Pagination parameter: page number.
     *
     * Nullable.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Pagination parameter: limit of records per page.
     *
     * Nullable.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Sort field name. Supported fields: email, full_name, created_at
     *
     * Nullable.
     */
    orderBy?: string | null | undefined;

    /**
     * Descending order flag. true means descending order.
     *
     * Nullable.
     */
    orderDirection?: "asc" | "desc" | null | undefined;
  };

  /** Updatable properties for an event organizer profile. */
  export type IUpdate = {
    /** Can update the email address of the organizer. */
    email?: string | undefined;

    /** Password hash value to update the stored password with. */
    password_hash?: string | undefined;

    /** Full name of the organizer. */
    full_name?: string | undefined;

    /**
     * Optional phone number of the organizer.
     *
     * Nullable.
     */
    phone_number?: string | null | undefined;

    /**
     * Optional profile picture URL.
     *
     * Nullable.
     */
    profile_picture_url?: string | null | undefined;

    /** Flag indicating if the organizer has verified email. */
    email_verified?: boolean | undefined;

    /** Updated timestamp. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * A summary view of event organizer containing core identification and
   * contact information, with verification status and timestamps.
   */
  export type ISummary = {
    /** Unique identifier of the event organizer */
    id: string;

    /** Unique email address of the organizer */
    email: string;

    /** Full name of the event organizer */
    full_name: string;

    /** Flag indicating if the organizer's email is verified */
    email_verified: boolean;

    /** Phone number of the organizer (optional) */
    phone_number?: string | null | undefined;

    /** URL of the profile picture of the event organizer (optional) */
    profile_picture_url?: string | null | undefined;

    /** Timestamp when the event organizer record was created */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the event organizer record was last updated */
    updated_at: string & tags.Format<"date-time">;
  };
}
