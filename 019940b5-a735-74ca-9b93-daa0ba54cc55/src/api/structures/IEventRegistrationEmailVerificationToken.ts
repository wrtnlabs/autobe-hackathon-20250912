import { tags } from "typia";

/**
 * Email verification token entry storing unique tokens linked to user accounts.
 * Contains the token string used for verifying email ownership, and expiration
 * information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IEventRegistrationEmailVerificationToken = {
  /** Primary Key UUID */
  id: string;

  /** Belonged regular user UUID */
  event_registration_regular_user_id: string;

  /** Unique email verification token */
  token: string;

  /** Expiration timestamp for the token. Formatted in ISO 8601. */
  expires_at: string & tags.Format<"date-time">;

  /** Timestamp when the token was created. Formatted in ISO 8601. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IEventRegistrationEmailVerificationToken {
  /** Fields of an email verification token entity that can be updated. */
  export type IUpdate = {
    /**
     * Expiration datetime of the token.
     *
     * Optional update.
     */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Token creation timestamp.
     *
     * Optional; typical for audit and update, not commonly changed.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body for creating a new email verification token. Requires the
   * user ID to link the token, token string value, and expiration date.
   */
  export type ICreate = {
    /** Foreign key to the regular user (UUID) */
    event_registration_regular_user_id: string;

    /** Unique token string for email verification purposes */
    token: string;

    /**
     * Expiration timestamp for the token. Must be a valid ISO 8601 datetime
     * string.
     */
    expires_at: string & tags.Format<"date-time">;

    /** Optional timestamp of token creation. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Search filters and pagination parameters for querying email verification
   * tokens.
   */
  export type IRequest = {
    /** Page number for pagination (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit of records per page for pagination. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Optional filter by user ID. */
    event_registration_regular_user_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Optional filter by token string. */
    token?: string | null | undefined;

    /** Optional filter by expiration timestamp. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional filter by creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
