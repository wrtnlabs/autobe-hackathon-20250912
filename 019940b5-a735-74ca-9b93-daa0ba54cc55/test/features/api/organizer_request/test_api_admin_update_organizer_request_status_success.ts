import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IEventRegistrationAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/IEventRegistrationAdmin";
import type { IEventRegistrationOrganizerRequest } from "@ORGANIZATION/PROJECT-api/lib/structures/IEventRegistrationOrganizerRequest";
import type { IEventRegistrationRegularUser } from "@ORGANIZATION/PROJECT-api/lib/structures/IEventRegistrationRegularUser";

/**
 * This E2E test validates a complete workflow of updating an organizer request
 * status and admin comment by an admin user in the event registration system.
 * The test covers important business logic and permission boundaries involving
 * multiple roles.
 *
 * Detailed test flow:
 *
 * 1. Create an admin user account with email, password hash, and profile data
 *    (IEventRegistrationAdmin.ICreate). Validate successful creation and
 *    authentication.
 * 2. Create a regular user account with necessary credentials
 *    (IEventRegistrationRegularUser.ICreate). Validate successful creation and
 *    authentication.
 * 3. Regular user submits a new organizer request
 *    (IEventRegistrationOrganizerRequest.ICreate) with 'pending' status,
 *    providing user_id, optional reason, and initially no admin comment.
 * 4. Admin user logs in to switch authentication context.
 * 5. Admin updates the existing organizer request status and admin comment
 *    multiple times in a sequence:
 *
 *    - Update status to 'pending' with a comment.
 *    - Update status to 'approved' with a different comment.
 *    - Update status to 'rejected' with a final comment.
 * 6. After each update, validate that the response matches the updated status and
 *    admin comment.
 * 7. Attempt unauthorized update attempts from regular user context (negative
 *    test) to verify access control errors.
 *
 * The test emphasizes strict adherence to API contracts, security requirements,
 * and business rules. It ensures that only authorized admin users can update
 * organizer requests and that status and comments persist correctly with each
 * update.
 *
 * This test will use proper random email and password hashes generated by typia
 * and RandomGenerator utilities and maintain full type integrity with
 * typia.assert().
 *
 * This comprehensive validation ensures robust admin management of organizer
 * requests with realistic usage scenarios.
 */
export async function test_api_admin_update_organizer_request_status_success(
  connection: api.IConnection,
) {
  // 1. Admin user creation
  const adminEmail = typia.random<string & tags.Format<"email">>();
  const adminPasswordHash = RandomGenerator.alphaNumeric(64); // Simulate a SHA256 hash
  const adminCreateBody = {
    email: adminEmail,
    password_hash: adminPasswordHash,
    full_name: RandomGenerator.name(),
    phone_number: null,
    profile_picture_url: null,
    email_verified: true,
  } satisfies IEventRegistrationAdmin.ICreate;
  const adminUser = await api.functional.auth.admin.join.createAdminUser(
    connection,
    { body: adminCreateBody },
  );
  typia.assert(adminUser);

  // 2. Regular user creation
  const userEmail = typia.random<string & tags.Format<"email">>();
  const userPasswordHash = RandomGenerator.alphaNumeric(64); // Simulate password hash
  const userCreateBody = {
    email: userEmail,
    password_hash: userPasswordHash,
    full_name: RandomGenerator.name(),
    phone_number: null,
    profile_picture_url: null,
    email_verified: false,
  } satisfies IEventRegistrationRegularUser.ICreate;
  const regularUser =
    await api.functional.auth.regularUser.join.joinRegularUser(connection, {
      body: userCreateBody,
    });
  typia.assert(regularUser);

  // 3. Regular user submits organizer request
  const organizerRequestCreateBody = {
    user_id: regularUser.id,
    status: "pending",
    reason: RandomGenerator.paragraph({ sentences: 5, wordMin: 4, wordMax: 7 }),
    admin_comment: null,
  } satisfies IEventRegistrationOrganizerRequest.ICreate;
  const organizerRequest =
    await api.functional.eventRegistration.regularUser.organizerRequests.createOrganizerRequest(
      connection,
      {
        body: organizerRequestCreateBody,
      },
    );
  typia.assert(organizerRequest);

  // Switch to admin authentication
  await api.functional.auth.admin.login.loginAdminUser(connection, {
    body: {
      email: adminEmail,
      password_hash: adminPasswordHash,
    } satisfies IEventRegistrationAdmin.ILogin,
  });

  // 4. Update organizer request status and admin comment - sequence of updates

  // Update 1: status 'pending' with comment
  const update1Body = {
    status: "pending",
    admin_comment: "Reviewed, awaiting further review.",
  } satisfies IEventRegistrationOrganizerRequest.IUpdate;
  const updatedRequest1 =
    await api.functional.eventRegistration.admin.organizerRequests.updateOrganizerRequest(
      connection,
      {
        organizerRequestId: organizerRequest.id,
        body: update1Body,
      },
    );
  typia.assert(updatedRequest1);
  TestValidator.equals("Update 1 status", updatedRequest1.status, "pending");
  TestValidator.equals(
    "Update 1 admin comment",
    updatedRequest1.admin_comment,
    update1Body.admin_comment,
  );

  // Update 2: status 'approved' with comment
  const update2Body = {
    status: "approved",
    admin_comment: "Request approved, privileges granted.",
  } satisfies IEventRegistrationOrganizerRequest.IUpdate;
  const updatedRequest2 =
    await api.functional.eventRegistration.admin.organizerRequests.updateOrganizerRequest(
      connection,
      {
        organizerRequestId: organizerRequest.id,
        body: update2Body,
      },
    );
  typia.assert(updatedRequest2);
  TestValidator.equals("Update 2 status", updatedRequest2.status, "approved");
  TestValidator.equals(
    "Update 2 admin comment",
    updatedRequest2.admin_comment,
    update2Body.admin_comment,
  );

  // Update 3: status 'rejected' with comment
  const update3Body = {
    status: "rejected",
    admin_comment: "Request rejected due to insufficient information.",
  } satisfies IEventRegistrationOrganizerRequest.IUpdate;
  const updatedRequest3 =
    await api.functional.eventRegistration.admin.organizerRequests.updateOrganizerRequest(
      connection,
      {
        organizerRequestId: organizerRequest.id,
        body: update3Body,
      },
    );
  typia.assert(updatedRequest3);
  TestValidator.equals("Update 3 status", updatedRequest3.status, "rejected");
  TestValidator.equals(
    "Update 3 admin comment",
    updatedRequest3.admin_comment,
    update3Body.admin_comment,
  );

  // 5. Attempt unauthorized update by regular user (negative test)
  // Switch back to regular user authentication
  await api.functional.auth.regularUser.login.loginRegularUser(connection, {
    body: {
      email: userEmail,
      password_hash: userPasswordHash,
    } satisfies IEventRegistrationRegularUser.ILogin,
  });

  await TestValidator.error(
    "Regular user cannot update organizer request",
    async () => {
      await api.functional.eventRegistration.admin.organizerRequests.updateOrganizerRequest(
        connection,
        {
          organizerRequestId: organizerRequest.id,
          body: {
            status: "approved",
            admin_comment: "Trying unauthorized update.",
          } satisfies IEventRegistrationOrganizerRequest.IUpdate,
        },
      );
    },
  );
}
