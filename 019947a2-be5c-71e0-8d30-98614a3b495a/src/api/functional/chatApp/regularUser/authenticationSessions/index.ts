import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppAuthenticationSessions } from "../../../../structures/IChatAppAuthenticationSessions";
import { IPageIChatAppAuthenticationSessions } from "../../../../structures/IPageIChatAppAuthenticationSessions";

/**
 * Create authentication session.
 *
 * Create a new authentication session record.
 *
 * This operation allows creation of a new OAuth2 authentication session with
 * access and refresh tokens for a Snapchat login user. It stores details such
 * as token strings, token expiration, and associated user ID.
 *
 * Security considerations mandate that only authenticated regular users can
 * create their own sessions, ensuring secure management of authentication
 * credentials.
 *
 * Proper validation of tokens and user existence is required to ensure valid
 * sessions are created.
 *
 * @param props.connection
 * @param props.body Information required to create a new authentication session
 * @path /chatApp/regularUser/authenticationSessions
 * @accessor api.functional.chatApp.regularUser.authenticationSessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new authentication session */
    body: IChatAppAuthenticationSessions.ICreate;
  };
  export type Body = IChatAppAuthenticationSessions.ICreate;
  export type Response = IChatAppAuthenticationSessions;

  export const METADATA = {
    method: "POST",
    path: "/chatApp/regularUser/authenticationSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/authenticationSessions";
  export const random = (): IChatAppAuthenticationSessions =>
    typia.random<IChatAppAuthenticationSessions>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve authentication sessions.
 *
 * Retrieve a filtered and paginated list of authentication sessions.
 *
 * This operation returns authentication session records including access
 * tokens, refresh tokens, expiration times, and user associations from the
 * chat_app_authentication_sessions table. Regular users can search, filter, and
 * sort sessions based on token details and expiration timestamps.
 *
 * Security considerations include restricting access appropriately since
 * session data is sensitive.
 *
 * The response includes session summary information optimized for listing,
 * enabling monitoring of active sessions and management of OAuth2 token
 * lifecycles for Snapchat social login.
 *
 * Errors may result from invalid filter parameters or unauthorized access.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for
 *   authentication sessions filtering
 * @path /chatApp/regularUser/authenticationSessions
 * @accessor api.functional.chatApp.regularUser.authenticationSessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for authentication sessions
     * filtering
     */
    body: IChatAppAuthenticationSessions.IRequest;
  };
  export type Body = IChatAppAuthenticationSessions.IRequest;
  export type Response = IPageIChatAppAuthenticationSessions.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/authenticationSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/authenticationSessions";
  export const random = (): IPageIChatAppAuthenticationSessions.ISummary =>
    typia.random<IPageIChatAppAuthenticationSessions.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific authentication session details.
 *
 * Retrieve detailed information of a single authentication session by its ID.
 *
 * This operation returns all fields of a chat_app_authentication_sessions
 * record, including access token, refresh token, expiration timestamps, and
 * user linkage.
 *
 * Security considerations require regular users can access their own session
 * information.
 *
 * If the specified session ID does not exist, the operation returns a 404 Not
 * Found error.
 *
 * @param props.connection
 * @param props.authenticationSessionId Unique identifier of the authentication
 *   session
 * @path /chatApp/regularUser/authenticationSessions/:authenticationSessionId
 * @accessor api.functional.chatApp.regularUser.authenticationSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the authentication session */
    authenticationSessionId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppAuthenticationSessions;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/authenticationSessions/:authenticationSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/authenticationSessions/${encodeURIComponent(props.authenticationSessionId ?? "null")}`;
  export const random = (): IChatAppAuthenticationSessions =>
    typia.random<IChatAppAuthenticationSessions>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticationSessionId")(() =>
        typia.assert(props.authenticationSessionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update authentication session.
 *
 * Update an existing authentication session's details.
 *
 * This operation modifies fields of an existing
 * chat_app_authentication_sessions record, including access token, refresh
 * token, expiration timestamps, and user linkage.
 *
 * Access is restricted to regular users for their own session data due to the
 * sensitive nature of authentication information.
 *
 * If the provided session ID does not exist, a 404 Not Found error is returned.
 * Validation must ensure token fields are correctly formatted.
 *
 * @param props.connection
 * @param props.authenticationSessionId Unique identifier of the authentication
 *   session to update
 * @param props.body Data to update the authentication session
 * @path /chatApp/regularUser/authenticationSessions/:authenticationSessionId
 * @accessor api.functional.chatApp.regularUser.authenticationSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the authentication session to update */
    authenticationSessionId: string & tags.Format<"uuid">;

    /** Data to update the authentication session */
    body: IChatAppAuthenticationSessions.IUpdate;
  };
  export type Body = IChatAppAuthenticationSessions.IUpdate;
  export type Response = IChatAppAuthenticationSessions;

  export const METADATA = {
    method: "PUT",
    path: "/chatApp/regularUser/authenticationSessions/:authenticationSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/authenticationSessions/${encodeURIComponent(props.authenticationSessionId ?? "null")}`;
  export const random = (): IChatAppAuthenticationSessions =>
    typia.random<IChatAppAuthenticationSessions>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticationSessionId")(() =>
        typia.assert(props.authenticationSessionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an authentication session by ID.
 *
 * This API operation permanently removes an authentication session from the
 * system given its unique identifier. The session record belongs to
 * chat_app_authentication_sessions which manages OAuth2 token-based
 * authentication sessions for Snapchat logins.
 *
 * Only authorized personnel can perform deletion of sessions as it affects user
 * login capabilities by revoking tokens.
 *
 * The deletion removes the record entirely and cleans up associated data.
 *
 * Errors may occur if the specified authentication session ID does not exist,
 * in which case a suitable HTTP 404 error response should be returned.
 *
 * This operation is critical for security management, enabling revocation of
 * compromised or expired sessions to prevent unauthorized usage.
 *
 * @param props.connection
 * @param props.authenticationSessionId Unique identifier of the authentication
 *   session to delete
 * @path /chatApp/regularUser/authenticationSessions/:authenticationSessionId
 * @accessor api.functional.chatApp.regularUser.authenticationSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the authentication session to delete */
    authenticationSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/authenticationSessions/:authenticationSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/authenticationSessions/${encodeURIComponent(props.authenticationSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticationSessionId")(() =>
        typia.assert(props.authenticationSessionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
