import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppNotifications } from "../../../../../structures/IChatAppNotifications";
import { IPageIChatAppNotifications } from "../../../../../structures/IPageIChatAppNotifications";

/**
 * Search and retrieve a filtered, paginated list of user notifications.
 *
 * Retrieve a filtered, paginated list of notification records for a given
 * regular user. This operation supports search and filtering based on
 * notification type and read status.
 *
 * The response includes important notification metadata such as the linked
 * message triggering the notification, the type of notification, read/unread
 * flag, and timestamps.
 *
 * Security enforcement ensures only the owner of the notifications may access
 * their list. This operation uses the chat_app_notifications database table as
 * defined in the Prisma schema.
 *
 * Input validation involves UUID checks for the regular user ID and proper
 * pagination filtering. The API supports high volume notification retrieval
 * efficiently through pagination.
 *
 * Successful responses are paginated and return summaries suitable for list
 * views.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.body Search criteria and pagination parameters for notifications
 * @path /chatApp/regularUser/regularUsers/:regularUserId/notifications
 * @accessor api.functional.chatApp.regularUser.regularUsers.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for notifications */
    body: IChatAppNotifications.IRequest;
  };
  export type Body = IChatAppNotifications.IRequest;
  export type Response = IPageIChatAppNotifications.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/regularUsers/:regularUserId/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications`;
  export const random = (): IPageIChatAppNotifications.ISummary =>
    typia.random<IPageIChatAppNotifications.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed notification information by ID for a user.
 *
 * Retrieve detailed information of a specific notification for a given regular
 * user. This operation returns all metadata about the notification including
 * linked message information and read status.
 *
 * Security constraints restrict access to the owner of the notification,
 * preventing unauthorized data leaks.
 *
 * The operation maps to the chat_app_notifications Prisma schema table ensuring
 * all data fields are returned as defined.
 *
 * Input validation includes UUID format checking for both user ID and
 * notification ID. Errors for invalid IDs or unauthorized access are handled
 * according to standard API practices.
 *
 * This operation complements the notifications list retrieval and supports
 * notification detail views.
 *
 * @param props.connection
 * @param props.regularUserId Unique identifier of the regular user
 * @param props.notificationId Unique identifier of the notification
 * @path /chatApp/regularUser/regularUsers/:regularUserId/notifications/:notificationId
 * @accessor api.functional.chatApp.regularUser.regularUsers.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the regular user */
    regularUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppNotifications;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/regularUsers/:regularUserId/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/regularUsers/${encodeURIComponent(props.regularUserId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IChatAppNotifications =>
    typia.random<IChatAppNotifications>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("regularUserId")(() => typia.assert(props.regularUserId));
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
