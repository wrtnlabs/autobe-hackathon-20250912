import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppNotification } from "../../../../structures/IChatAppNotification";
import { IPageIChatAppNotification } from "../../../../structures/IPageIChatAppNotification";

/**
 * Search and retrieve a paginated list of notifications.
 *
 * Retrieve a filtered and paginated list of chat application notifications for
 * the authenticated user. Notifications include message alerts and system
 * messages.
 *
 * The operation supports filtering by read/unread status, pagination with page
 * size and number, and sorting options.
 *
 * Notifications are returned as summary information with relevant fields for
 * list views.
 *
 * Security considerations restrict access to the authenticated user's own
 * notifications with appropriate authorization.
 *
 * Query parameters include read status filter and pagination controls.
 *
 * The response returns paginated notifications data according to the request
 * filtering.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for notifications
 *   filtering
 * @path /chatApp/regularUser/notifications
 * @accessor api.functional.chatApp.regularUser.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for notifications filtering */
    body: IChatAppNotification.IRequest;
  };
  export type Body = IChatAppNotification.IRequest;
  export type Response = IPageIChatAppNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/chatApp/regularUser/notifications";
  export const random = (): IPageIChatAppNotification.ISummary =>
    typia.random<IPageIChatAppNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific notification.
 *
 * Fetch detailed information about a specific notification identified by
 * notificationId.
 *
 * This includes notification type, read/unread state, associated message, and
 * timestamps.
 *
 * Security ensures that only the owner of the notification or authorized roles
 * can access this information.
 *
 * Errors returned if the notification does not exist or if access is denied.
 *
 * Useful for viewing detailed system message context triggered by chat
 * activities.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier of the target notification
 * @path /chatApp/regularUser/notifications/:notificationId
 * @accessor api.functional.chatApp.regularUser.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target notification */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppNotification;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IChatAppNotification =>
    typia.random<IChatAppNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
