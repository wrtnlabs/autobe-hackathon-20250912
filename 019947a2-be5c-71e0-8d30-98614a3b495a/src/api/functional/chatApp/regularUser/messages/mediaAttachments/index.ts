import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppMediaAttachment } from "../../../../../structures/IChatAppMediaAttachment";
import { IChatAppMessageMediaAttachment } from "../../../../../structures/IChatAppMessageMediaAttachment";
import { IPageIChatAppMessageMediaAttachment } from "../../../../../structures/IPageIChatAppMessageMediaAttachment";

/**
 * Create a media attachment for a chat message.
 *
 * Create a media attachment associated with a specific chat message by
 * messageId.
 *
 * The request body must specify mediaType ('image' or 'video') and URI of the
 * stored media file.
 *
 * This operation requires UUID validation on the messageId path parameter.
 *
 * User authorization is enforced to restrict creation rights.
 *
 * The operation creates records in the chat_app_media_attachments table,
 * validating media types and URI length constraints.
 *
 * Returns newly created media attachment data for client update.
 *
 * @param props.connection
 * @param props.messageId Unique identifier of the target message
 * @param props.body Media attachment creation info
 * @path /chatApp/regularUser/messages/:messageId/mediaAttachments
 * @accessor api.functional.chatApp.regularUser.messages.mediaAttachments.createMediaAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createMediaAttachment(
  connection: IConnection,
  props: createMediaAttachment.Props,
): Promise<createMediaAttachment.Response> {
  return true === connection.simulate
    ? createMediaAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createMediaAttachment.METADATA,
          path: createMediaAttachment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createMediaAttachment {
  export type Props = {
    /** Unique identifier of the target message */
    messageId: string & tags.Format<"uuid">;

    /** Media attachment creation info */
    body: IChatAppMediaAttachment.ICreate;
  };
  export type Body = IChatAppMediaAttachment.ICreate;
  export type Response = IChatAppMediaAttachment;

  export const METADATA = {
    method: "POST",
    path: "/chatApp/regularUser/messages/:messageId/mediaAttachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.messageId ?? "null")}/mediaAttachments`;
  export const random = (): IChatAppMediaAttachment =>
    typia.random<IChatAppMediaAttachment>();
  export const simulate = (
    connection: IConnection,
    props: createMediaAttachment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createMediaAttachment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("messageId")(() => typia.assert(props.messageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List media attachments for a message.
 *
 * Retrieve media attachments belonging to a chat message. Supports pagination,
 * filtering, and sorting.
 *
 * Returns a paginated list of media metadata (type, URI) associated with the
 * specified message.
 *
 * Security ensures only users with permission to view the message's media can
 * access this.
 *
 * This operation uses pagination request parameters and returns a paginated
 * response containing media attachment information.
 *
 * Media types supported are limited to 'image' and 'video'.
 *
 * @param props.connection
 * @param props.messageId Unique identifier of the chat message
 * @param props.body Request parameters for filtering and pagination
 * @path /chatApp/regularUser/messages/:messageId/mediaAttachments
 * @accessor api.functional.chatApp.regularUser.messages.mediaAttachments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the chat message */
    messageId: string & tags.Format<"uuid">;

    /** Request parameters for filtering and pagination */
    body: IChatAppMessageMediaAttachment.IRequest;
  };
  export type Body = IChatAppMessageMediaAttachment.IRequest;
  export type Response = IPageIChatAppMessageMediaAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/messages/:messageId/mediaAttachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.messageId ?? "null")}/mediaAttachments`;
  export const random = (): IPageIChatAppMessageMediaAttachment =>
    typia.random<IPageIChatAppMessageMediaAttachment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("messageId")(() => typia.assert(props.messageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a media attachment for a chat message by IDs.
 *
 * Retrieve details of a specific media attachment linked to a chat message by
 * messageId and mediaAttachmentId.
 *
 * This operation validates the UUID format of both path parameters to ensure
 * correct targeting.
 *
 * Only authenticated users with appropriate permissions can successfully access
 * this data.
 *
 * The operation interacts with the chat_app_media_attachments table in the
 * Prisma schema, which contains media files linked to chat messages.
 *
 * If the specified media attachment or message does not exist or access is
 * unauthorized, appropriate error responses are returned.
 *
 * Related operations include creating, updating, and deleting media attachments
 * for messages.
 *
 * The response provides the complete media attachment data for client-side
 * rendering or download.
 *
 * @param props.connection
 * @param props.messageId Unique identifier of the target message
 * @param props.mediaAttachmentId Unique identifier of the target media
 *   attachment
 * @path /chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId
 * @accessor api.functional.chatApp.regularUser.messages.mediaAttachments.atMediaAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atMediaAttachment(
  connection: IConnection,
  props: atMediaAttachment.Props,
): Promise<atMediaAttachment.Response> {
  return true === connection.simulate
    ? atMediaAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atMediaAttachment.METADATA,
          path: atMediaAttachment.path(props),
          status: null,
        },
      );
}
export namespace atMediaAttachment {
  export type Props = {
    /** Unique identifier of the target message */
    messageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target media attachment */
    mediaAttachmentId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppMediaAttachment;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.messageId ?? "null")}/mediaAttachments/${encodeURIComponent(props.mediaAttachmentId ?? "null")}`;
  export const random = (): IChatAppMediaAttachment =>
    typia.random<IChatAppMediaAttachment>();
  export const simulate = (
    connection: IConnection,
    props: atMediaAttachment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atMediaAttachment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("messageId")(() => typia.assert(props.messageId));
      assert.param("mediaAttachmentId")(() =>
        typia.assert(props.mediaAttachmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a media attachment for a chat message.
 *
 * Update media attachment details (mediaType and uri) for a specific chat
 * message by messageId and mediaAttachmentId.
 *
 * Both path parameters require UUID format validation.
 *
 * Authorization is enforced to restrict updates to authorized users.
 *
 * Returns updated media attachment record for confirmation.
 *
 * @param props.connection
 * @param props.messageId Unique identifier of the target message
 * @param props.mediaAttachmentId Unique identifier of the target media
 *   attachment
 * @param props.body Media attachment update info
 * @path /chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId
 * @accessor api.functional.chatApp.regularUser.messages.mediaAttachments.updateMediaAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateMediaAttachment(
  connection: IConnection,
  props: updateMediaAttachment.Props,
): Promise<updateMediaAttachment.Response> {
  return true === connection.simulate
    ? updateMediaAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateMediaAttachment.METADATA,
          path: updateMediaAttachment.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateMediaAttachment {
  export type Props = {
    /** Unique identifier of the target message */
    messageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target media attachment */
    mediaAttachmentId: string & tags.Format<"uuid">;

    /** Media attachment update info */
    body: IChatAppMediaAttachment.IUpdate;
  };
  export type Body = IChatAppMediaAttachment.IUpdate;
  export type Response = IChatAppMediaAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.messageId ?? "null")}/mediaAttachments/${encodeURIComponent(props.mediaAttachmentId ?? "null")}`;
  export const random = (): IChatAppMediaAttachment =>
    typia.random<IChatAppMediaAttachment>();
  export const simulate = (
    connection: IConnection,
    props: updateMediaAttachment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateMediaAttachment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("messageId")(() => typia.assert(props.messageId));
      assert.param("mediaAttachmentId")(() =>
        typia.assert(props.mediaAttachmentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a media attachment for a chat message.
 *
 * Delete a media attachment of a chat message by messageId and
 * mediaAttachmentId.
 *
 * This operation permanently deletes the media attachment record from the
 * database.
 *
 * Authorization and UUID validation are enforced.
 *
 * No response body is returned on success.
 *
 * Clients should handle success confirmation via HTTP status codes.
 *
 * @param props.connection
 * @param props.messageId Unique identifier of the target message
 * @param props.mediaAttachmentId Unique identifier of the target media
 *   attachment
 * @path /chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId
 * @accessor api.functional.chatApp.regularUser.messages.mediaAttachments.eraseMediaAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseMediaAttachment(
  connection: IConnection,
  props: eraseMediaAttachment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseMediaAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseMediaAttachment.METADATA,
          path: eraseMediaAttachment.path(props),
          status: null,
        },
      );
}
export namespace eraseMediaAttachment {
  export type Props = {
    /** Unique identifier of the target message */
    messageId: string & tags.Format<"uuid">;

    /** Unique identifier of the target media attachment */
    mediaAttachmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/messages/:messageId/mediaAttachments/:mediaAttachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/messages/${encodeURIComponent(props.messageId ?? "null")}/mediaAttachments/${encodeURIComponent(props.mediaAttachmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseMediaAttachment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseMediaAttachment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("messageId")(() => typia.assert(props.messageId));
      assert.param("mediaAttachmentId")(() =>
        typia.assert(props.mediaAttachmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
