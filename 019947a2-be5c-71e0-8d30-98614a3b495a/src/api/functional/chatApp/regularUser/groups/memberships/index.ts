import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppGroupMembership } from "../../../../../structures/IChatAppGroupMembership";
import { IPageIChatAppGroupMembership } from "../../../../../structures/IPageIChatAppGroupMembership";

/**
 * Create a new membership in a community group.
 *
 * Adds a new member to a community group by providing membership details in the
 * request body.
 *
 * Access allowed only for authenticated regular users.
 *
 * Request body must conform to IChatAppGroupMembership.ICreate schema.
 *
 * Returns the created membership details following the IChatAppGroupMembership
 * schema.
 *
 * @param props.connection
 * @param props.groupId Unique identifier of the community group to add a member
 *   to
 * @param props.body Data required to create a new group membership
 * @path /chatApp/regularUser/groups/:groupId/memberships
 * @accessor api.functional.chatApp.regularUser.groups.memberships.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the community group to add a member to */
    groupId: string & tags.Format<"uuid">;

    /** Data required to create a new group membership */
    body: IChatAppGroupMembership.ICreate;
  };
  export type Body = IChatAppGroupMembership.ICreate;
  export type Response = IChatAppGroupMembership;

  export const METADATA = {
    method: "POST",
    path: "/chatApp/regularUser/groups/:groupId/memberships",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/groups/${encodeURIComponent(props.groupId ?? "null")}/memberships`;
  export const random = (): IChatAppGroupMembership =>
    typia.random<IChatAppGroupMembership>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupId")(() => typia.assert(props.groupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List memberships of a community group with pagination and filters.
 *
 * Fetches a paginated and filtered list of memberships belonging to the
 * community group uniquely identified by groupId. Provides membership summaries
 * including roles, statuses, and timestamps.
 *
 * Access restricted to authenticated regular users.
 *
 * This operation leverages the chat_app_group_memberships table in the Prisma
 * schema.
 *
 * Request body supports complex filtering and pagination criteria using
 * IChatAppGroupMembership.IRequest.
 *
 * Response returns paginated membership summaries conforming to
 * IPageIChatAppGroupMembership.ISummary.
 *
 * @param props.connection
 * @param props.groupId Unique identifier of the community group to list
 *   memberships for
 * @param props.body Filtering and pagination parameters for group memberships
 * @path /chatApp/regularUser/groups/:groupId/memberships
 * @accessor api.functional.chatApp.regularUser.groups.memberships.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the community group to list memberships for */
    groupId: string & tags.Format<"uuid">;

    /** Filtering and pagination parameters for group memberships */
    body: IChatAppGroupMembership.IRequest;
  };
  export type Body = IChatAppGroupMembership.IRequest;
  export type Response = IPageIChatAppGroupMembership.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/chatApp/regularUser/groups/:groupId/memberships",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/groups/${encodeURIComponent(props.groupId ?? "null")}/memberships`;
  export const random = (): IPageIChatAppGroupMembership.ISummary =>
    typia.random<IPageIChatAppGroupMembership.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupId")(() => typia.assert(props.groupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed membership information by ID within a group.
 *
 * Retrieves detailed membership information of a specific member within a
 * particular group using groupId and membershipId.
 *
 * Access restricted to authenticated regular users.
 *
 * Returns membership details following the IChatAppGroupMembership schema.
 *
 * @param props.connection
 * @param props.groupId Unique ID of the community group containing the
 *   membership
 * @param props.membershipId Unique ID of the membership to retrieve
 * @path /chatApp/regularUser/groups/:groupId/memberships/:membershipId
 * @accessor api.functional.chatApp.regularUser.groups.memberships.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the community group containing the membership */
    groupId: string & tags.Format<"uuid">;

    /** Unique ID of the membership to retrieve */
    membershipId: string & tags.Format<"uuid">;
  };
  export type Response = IChatAppGroupMembership;

  export const METADATA = {
    method: "GET",
    path: "/chatApp/regularUser/groups/:groupId/memberships/:membershipId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/groups/${encodeURIComponent(props.groupId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): IChatAppGroupMembership =>
    typia.random<IChatAppGroupMembership>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupId")(() => typia.assert(props.groupId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific group membership by ID within a group.
 *
 * Update a group membership in a community group. The operation modifies
 * membership attributes including the member's role (e.g., admin or member),
 * membership status (active, banned, pending), and optional business status
 * information.
 *
 * Authorization ensures only group administrators can perform updates. The
 * groupId and membershipId identify the target group and membership record. The
 * request body must adhere to the IChatAppGroupMembership.IUpdate schema.
 *
 * The response includes the fully updated membership entity from the database.
 *
 * This operation directly affects the chat_app_group_memberships table,
 * managing relations between groups and their members.
 *
 * @param props.connection
 * @param props.groupId Unique identifier of the target community group
 * @param props.membershipId Unique identifier of the target membership record
 * @param props.body Membership update data
 * @path /chatApp/regularUser/groups/:groupId/memberships/:membershipId
 * @accessor api.functional.chatApp.regularUser.groups.memberships.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target community group */
    groupId: string & tags.Format<"uuid">;

    /** Unique identifier of the target membership record */
    membershipId: string & tags.Format<"uuid">;

    /** Membership update data */
    body: IChatAppGroupMembership.IUpdate;
  };
  export type Body = IChatAppGroupMembership.IUpdate;
  export type Response = IChatAppGroupMembership;

  export const METADATA = {
    method: "PUT",
    path: "/chatApp/regularUser/groups/:groupId/memberships/:membershipId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/chatApp/regularUser/groups/${encodeURIComponent(props.groupId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): IChatAppGroupMembership =>
    typia.random<IChatAppGroupMembership>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupId")(() => typia.assert(props.groupId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific group membership by ID within a group.
 *
 * Delete a specific group membership by ID from a community group. This action
 * revokes the user's membership and associated permissions permanently.
 *
 * Authorization ensures only group admins or authorized users can perform this
 * operation.
 *
 * The groupId and membershipId identify the target membership. No request or
 * response body is needed.
 *
 * This operation acts directly on the chat_app_group_memberships table.
 *
 * @param props.connection
 * @param props.groupId Unique identifier of the target community group
 * @param props.membershipId Unique identifier of the target membership record
 * @path /chatApp/regularUser/groups/:groupId/memberships/:membershipId
 * @accessor api.functional.chatApp.regularUser.groups.memberships.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target community group */
    groupId: string & tags.Format<"uuid">;

    /** Unique identifier of the target membership record */
    membershipId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/chatApp/regularUser/groups/:groupId/memberships/:membershipId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/chatApp/regularUser/groups/${encodeURIComponent(props.groupId ?? "null")}/memberships/${encodeURIComponent(props.membershipId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("groupId")(() => typia.assert(props.groupId));
      assert.param("membershipId")(() => typia.assert(props.membershipId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
