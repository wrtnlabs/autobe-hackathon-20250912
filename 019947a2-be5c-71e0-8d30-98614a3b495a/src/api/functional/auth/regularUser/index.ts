import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IChatAppRegularUser } from "../../../structures/IChatAppRegularUser";

/**
 * Create new regular user account and issue JWT tokens. Maps to
 * chat_app_regular_users table.
 *
 * Registers a new regular user by creating a record in chat_app_regular_users
 * with validated social login ID and nickname. Issues an authorized JWT token
 * session response.
 *
 * This operation maps to the Actors.chat_app_regular_users table, utilizing
 * fields: id (UUID), social_login_id (string), nickname (string),
 * profile_image_uri (optional string), created_at and updated_at timestamps.
 *
 * Key security consideration is ensuring uniqueness of social_login_id and
 * secure handling of authentication tokens post-registration.
 *
 * Typical usage requires prior social login validation via Snapchat OAuth2
 * external service.
 *
 * Works in tandem with login and token refresh endpoints to maintain user
 * session lifecycle.
 *
 * @param props.connection
 * @param props.body New regular user registration data.
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/join
 * @accessor api.functional.auth.regularUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** New regular user registration data. */
    body: IChatAppRegularUser.ICreate;
  };
  export type Body = IChatAppRegularUser.ICreate;
  export type Response = IChatAppRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/join";
  export const random = (): IChatAppRegularUser.IAuthorized =>
    typia.random<IChatAppRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate regular user and issue JWT tokens. Maps to
 * chat_app_regular_users table.
 *
 * Authenticates a regular user by validating social login ID against
 * chat_app_regular_users.
 *
 * Generates JWT tokens for the session in IChatAppRegularUser.IAuthorized
 * response.
 *
 * References chat_app_regular_users.social_login_id and authentication session
 * management.
 *
 * Critical to ensure secure credential verification and token issuance.
 *
 * Complementary to join and refresh endpoints.
 *
 * @param props.connection
 * @param props.body Regular user login data with Snapchat social login ID.
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/login
 * @accessor api.functional.auth.regularUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Regular user login data with Snapchat social login ID. */
    body: IChatAppRegularUser.IRequestLogin;
  };
  export type Body = IChatAppRegularUser.IRequestLogin;
  export type Response = IChatAppRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/login";
  export const random = (): IChatAppRegularUser.IAuthorized =>
    typia.random<IChatAppRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access token for regular user. Maps to
 * chat_app_authentication_sessions table.
 *
 * Refresh JWT access token for regular user using a valid refresh token.
 *
 * Validates token existence, expiry and revocation status in
 * chat_app_authentication_sessions.
 *
 * Issues new authorized JWT access token in IChatAppRegularUser.IAuthorized
 * response.
 *
 * Essential for maintaining secure user sessions without requiring full
 * re-login.
 *
 * Works in conjunction with login and join endpoints for complete token
 * lifecycle management.
 *
 * @param props.connection
 * @param props.body Refresh token request data for regular user.
 * @setHeader token.access Authorization
 *
 * @path /auth/regularUser/refresh
 * @accessor api.functional.auth.regularUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request data for regular user. */
    body: IChatAppRegularUser.IRequestRefresh;
  };
  export type Body = IChatAppRegularUser.IRequestRefresh;
  export type Response = IChatAppRegularUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/regularUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/regularUser/refresh";
  export const random = (): IChatAppRegularUser.IAuthorized =>
    typia.random<IChatAppRegularUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
