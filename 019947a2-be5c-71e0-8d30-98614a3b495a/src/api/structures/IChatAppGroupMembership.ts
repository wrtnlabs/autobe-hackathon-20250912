import { tags } from "typia";

/**
 * Represents a user's membership in a community group within the chatting
 * application. Contains role, join date, current status, and relevant
 * timestamps. Used to manage user access and privileges within groups.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatAppGroupMembership = {
  /** Primary key representing the unique ID of this membership. */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the community group this membership belongs to. */
  chat_app_group_id: string & tags.Format<"uuid">;

  /** Foreign key referencing the regular user who is a member. */
  chat_app_regular_user_id: string & tags.Format<"uuid">;

  /** Role of the member within the group, e.g., 'member', 'admin'. */
  role: string;

  /** ISO 8601 formatted timestamp when the user joined the group. */
  joined_at: string & tags.Format<"date-time">;

  /** Current membership status, e.g., 'active', 'banned', 'pending'. */
  status: string;

  /** Optional business-specific membership status. */
  business_status?: string | null | undefined;

  /** Timestamp recording when this membership record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp recording the last update time for this membership. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IChatAppGroupMembership {
  /**
   * Request body schema for creating a new membership in a community group.
   * Contains all required fields for establishing membership with optional
   * business status.
   */
  export type ICreate = {
    /** The community group ID to join. */
    chat_app_group_id: string & tags.Format<"uuid">;

    /** ID of the user joining the group. */
    chat_app_regular_user_id: string & tags.Format<"uuid">;

    /** Role assigned to the new member, e.g., 'member' or 'admin'. */
    role: string;

    /** ISO 8601 timestamp when the membership starts. */
    joined_at: string & tags.Format<"date-time">;

    /** Initial membership status, e.g., 'active', 'banned', or 'pending'. */
    status: string;

    /** Optional business-specific status information for the membership. */
    business_status?: string | null | undefined;
  };

  /**
   * Request body schema for updating existing membership fields selectively.
   * Allows partial updates to role, status, business status, and join date.
   */
  export type IUpdate = {
    /** Optional updated role for the membership. */
    role?: string | undefined;

    /** Optional updated membership status. */
    status?: string | undefined;

    /** Optional updated business status for the membership. */
    business_status?: string | null | undefined;

    /** Optional updated join date timestamp. */
    joined_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request schema for searching and filtering memberships in community
   * groups with pagination controls.
   */
  export type IRequest = {
    /** Optional filter criterion for the community group ID. */
    chat_app_group_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter for the member user ID. */
    chat_app_regular_user_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Optional filter by membership role. */
    role?: string | null | undefined;

    /** Optional filter by membership status. */
    status?: string | null | undefined;

    /** Optional filter by business status. */
    business_status?: string | null | undefined;

    /** Filter memberships joined after this ISO 8601 date. */
    joined_after?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter memberships joined before this ISO 8601 date. */
    joined_before?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Limit of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Field name to order the results by. */
    order_by?: string | null | undefined;

    /** Direction of sort, ascending or descending. */
    order_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Summary of a group membership suitable for list display.
   *
   * Includes membership unique ID, member role, status, optional business
   * status, and join timestamp.
   *
   * Used in membership listing with pagination and filtering.
   */
  export type ISummary = {
    /** Unique identifier of the group membership */
    id: string & tags.Format<"uuid">;

    /** Role of the member within the group, e.g., member, admin */
    role: string;

    /** Current membership status, e.g., active, banned, pending */
    status: string;

    /** Additional business-specific membership status, optional */
    business_status?: string | null | undefined;

    /** Timestamp when the user joined the group */
    joined_at: string & tags.Format<"date-time">;
  };
}
