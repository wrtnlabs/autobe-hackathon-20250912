import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Regular user entity representing a user authenticated via Snapchat social
 * login.
 *
 * Contains user identity, social login ID, nickname, profile image URI, and
 * timestamps.
 *
 * Sensitive authentication tokens are managed separately in authentication
 * sessions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChatAppRegularUser = {
  /** Unique identifier of the regular user. */
  id: string & tags.Format<"uuid">;

  /** Unique Snapchat social login ID. */
  social_login_id: string;

  /** Display name or nickname of the user. */
  nickname: string;

  /** Optional profile image URI. */
  profile_image_uri?: string | null | undefined;

  /** Timestamp when user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when user record was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IChatAppRegularUser {
  /**
   * DTO for creating a new regular user.
   *
   * The id and timestamps are generated by the system and thus excluded.
   *
   * The social_login_id must be unique.
   *
   * Profile_image_uri is optional.
   */
  export type ICreate = {
    /** Unique Snapchat social login ID. */
    social_login_id: string;

    /** Display name or nickname of the user. */
    nickname: string;

    /** Optional profile image URI. */
    profile_image_uri?: string | null | undefined;
  };

  /** Authorization response containing JWT tokens for the regular user. */
  export type IAuthorized = {
    /** Unique identifier of the authorized regular user. */
    id: string & tags.Format<"uuid">;

    /** Unique Snapchat social login ID. */
    social_login_id: string;

    /** Display name or nickname of the user. */
    nickname: string;

    /** Optional profile image URI. */
    profile_image_uri?: string | null | undefined;

    /** Timestamp when user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request data.
   *
   * Contains social_login_id for authentication via Snapchat.
   */
  export type IRequestLogin = {
    /** Snapchat social login ID for authentication. */
    social_login_id: string;
  };

  /**
   * Refresh token request data.
   *
   * Contains the refresh token string used to obtain a new access token.
   */
  export type IRequestRefresh = {
    /** Refresh token string to obtain a new access token. */
    refresh_token: string;
  };

  /**
   * Request parameters for searching/filtering regular users.
   *
   * Includes pagination, filtering by social_login_id and nickname.
   */
  export type IRequest = {
    /** Page number. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limitation of records per a page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Unique Snapchat social login ID for filtering. */
    social_login_id?: string | null | undefined;

    /** Nickname for filtering. */
    nickname?: string | null | undefined;
  };

  /**
   * DTO for updating an existing regular user.
   *
   * Only mutable fields are allowed.
   *
   * The social_login_id and id are immutable and not allowed here.
   *
   * All fields optional for partial updates.
   */
  export type IUpdate = {
    /** Display name or nickname of the user. */
    nickname?: string | undefined;

    /** Optional profile image URI. */
    profile_image_uri?: string | null | undefined;
  };

  /** DTO with essential user fields for listings and summaries. */
  export type ISummary = {
    /** Unique identifier of the regular user. */
    id: string & tags.Format<"uuid">;

    /** Display name or nickname of the user. */
    nickname: string;

    /** Optional profile image URI. */
    profile_image_uri?: string | null | undefined;
  };
}
