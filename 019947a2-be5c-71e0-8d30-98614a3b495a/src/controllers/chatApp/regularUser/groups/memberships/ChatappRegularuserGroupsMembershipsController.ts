import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IChatAppGroupMembership } from "../../../../../api/structures/IChatAppGroupMembership";
import { IPageIChatAppGroupMembership } from "../../../../../api/structures/IPageIChatAppGroupMembership";

@Controller("/chatApp/regularUser/groups/:groupId/memberships")
export class ChatappRegularuserGroupsMembershipsController {
  /**
   * Create a new membership in a community group.
   *
   * Adds a new member to a community group by providing membership details in
   * the request body.
   *
   * Access allowed only for authenticated regular users.
   *
   * Request body must conform to IChatAppGroupMembership.ICreate schema.
   *
   * Returns the created membership details following the
   * IChatAppGroupMembership schema.
   *
   * @param connection
   * @param groupId Unique identifier of the community group to add a member
   *   to
   * @param body Data required to create a new group membership
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("groupId")
    groupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppGroupMembership.ICreate,
  ): Promise<IChatAppGroupMembership> {
    groupId;
    body;
    return typia.random<IChatAppGroupMembership>();
  }

  /**
   * List memberships of a community group with pagination and filters.
   *
   * Fetches a paginated and filtered list of memberships belonging to the
   * community group uniquely identified by groupId. Provides membership
   * summaries including roles, statuses, and timestamps.
   *
   * Access restricted to authenticated regular users.
   *
   * This operation leverages the chat_app_group_memberships table in the
   * Prisma schema.
   *
   * Request body supports complex filtering and pagination criteria using
   * IChatAppGroupMembership.IRequest.
   *
   * Response returns paginated membership summaries conforming to
   * IPageIChatAppGroupMembership.ISummary.
   *
   * @param connection
   * @param groupId Unique identifier of the community group to list
   *   memberships for
   * @param body Filtering and pagination parameters for group memberships
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("groupId")
    groupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppGroupMembership.IRequest,
  ): Promise<IPageIChatAppGroupMembership.ISummary> {
    groupId;
    body;
    return typia.random<IPageIChatAppGroupMembership.ISummary>();
  }

  /**
   * Get detailed membership information by ID within a group.
   *
   * Retrieves detailed membership information of a specific member within a
   * particular group using groupId and membershipId.
   *
   * Access restricted to authenticated regular users.
   *
   * Returns membership details following the IChatAppGroupMembership schema.
   *
   * @param connection
   * @param groupId Unique ID of the community group containing the membership
   * @param membershipId Unique ID of the membership to retrieve
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":membershipId")
  public async at(
    @TypedParam("groupId")
    groupId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<IChatAppGroupMembership> {
    groupId;
    membershipId;
    return typia.random<IChatAppGroupMembership>();
  }

  /**
   * Update a specific group membership by ID within a group.
   *
   * Update a group membership in a community group. The operation modifies
   * membership attributes including the member's role (e.g., admin or
   * member), membership status (active, banned, pending), and optional
   * business status information.
   *
   * Authorization ensures only group administrators can perform updates. The
   * groupId and membershipId identify the target group and membership record.
   * The request body must adhere to the IChatAppGroupMembership.IUpdate
   * schema.
   *
   * The response includes the fully updated membership entity from the
   * database.
   *
   * This operation directly affects the chat_app_group_memberships table,
   * managing relations between groups and their members.
   *
   * @param connection
   * @param groupId Unique identifier of the target community group
   * @param membershipId Unique identifier of the target membership record
   * @param body Membership update data
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":membershipId")
  public async update(
    @TypedParam("groupId")
    groupId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IChatAppGroupMembership.IUpdate,
  ): Promise<IChatAppGroupMembership> {
    groupId;
    membershipId;
    body;
    return typia.random<IChatAppGroupMembership>();
  }

  /**
   * Delete a specific group membership by ID within a group.
   *
   * Delete a specific group membership by ID from a community group. This
   * action revokes the user's membership and associated permissions
   * permanently.
   *
   * Authorization ensures only group admins or authorized users can perform
   * this operation.
   *
   * The groupId and membershipId identify the target membership. No request
   * or response body is needed.
   *
   * This operation acts directly on the chat_app_group_memberships table.
   *
   * @param connection
   * @param groupId Unique identifier of the target community group
   * @param membershipId Unique identifier of the target membership record
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":membershipId")
  public async erase(
    @TypedParam("groupId")
    groupId: string & tags.Format<"uuid">,
    @TypedParam("membershipId")
    membershipId: string & tags.Format<"uuid">,
  ): Promise<void> {
    groupId;
    membershipId;
    return typia.random<void>();
  }
}
