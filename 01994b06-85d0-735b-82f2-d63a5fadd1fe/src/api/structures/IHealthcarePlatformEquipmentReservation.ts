import { tags } from "typia";

/**
 * An equipment reservation resource, corresponding to a single resource booking
 * entry as defined by the Prisma business logic. Captures all required metadata
 * (reservation period, resource mapping, appointment linkage, workflow status,
 * audit timestamps) and supports equipment scheduling, maintenance blockouts,
 * and compliance audit workflows in a multi-tenant healthcare system. The
 * schema is generated directly from
 * 'healthcare_platform_equipment_reservations' and is used for both detail
 * display and API responses.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformEquipmentReservation = {
  /**
   * Primary unique identifier for an equipment reservation. UUID reference as
   * per Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the organization for this reservation. Foreign key; aligns with
   * organizational data isolation.
   */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /**
   * UUID identifying the reserved equipment. Not formally FK-constrained in
   * the current schema, but critical for equipment/workflow mapping.
   */
  equipment_id: string & tags.Format<"uuid">;

  /**
   * Reservation start time (ISO 8601 date-time), in the system time zone.
   * Reflects booked time slot.
   */
  reservation_start: string & tags.Format<"date-time">;

  /**
   * Reservation end time (ISO 8601 date-time). Null or missing signifies
   * open-ended, but standard business workflows require both endpoints.
   */
  reservation_end: string & tags.Format<"date-time">;

  /**
   * Optional UUID of the linked appointment (if the reservation is for
   * scheduled usage). Nullable; used for maintenance, admin, or blocked slots
   * without appointment reference.
   */
  appointment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type/category for this reservation ('scheduled', 'blocked',
   * 'maintenance', etc). Used for business workflows; free text constrained
   * by business logic.
   */
  reservation_type: string;

  /** Timestamp of reservation creation (system generated, ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update; for audit and troubleshooting (system managed). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete marker. Null if active; set to system timestamp when
   * reservation is cancelled/archived per compliance/audit policy.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformEquipmentReservation {
  /**
   * Advanced search/filtering parameters for paginated retrieval of equipment
   * reservation records in scheduling workflows. Supports filtering by
   * organization, resource, time window, reservation type, and appointment.
   * Conventional sort_by/sort_order/page/limit fields for UI/UX pagination
   * and result set control. All fields are optionalâ€”unfiltered call returns
   * all visible records in context.
   */
  export type IRequest = {
    /** Filter: restrict query to a specific organization by UUID. */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** Filter: restrict query to a single equipment resource by UUID. */
    equipment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: restrict to reservations matching a purpose/category
     * (scheduled/blocked/maintenance, etc).
     */
    reservation_type?: string | undefined;

    /**
     * Filter: restrict to reservations for a specific appointment (if
     * linked).
     */
    appointment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Status filter (active, archived, etc). Provided for business logic;
     * schema may be convention only.
     */
    status?: string | undefined;

    /**
     * Filter: only reservations starting at or after this ISO 8601
     * timestamp.
     */
    reservation_start_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: only reservations starting at or before this ISO 8601
     * timestamp.
     */
    reservation_start_to?: (string & tags.Format<"date-time">) | undefined;

    /** Paging: Results page number (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Paging: Max records per page. Reasonable system max enforced. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>)
      | undefined;

    /**
     * Sorting: Field by which to sort results (e.g., reservation_start,
     * equipment_id).
     */
    sort_by?: string | undefined;

    /** Sort order for result set (ascending/descending). */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Request payload for creating a new equipment reservation. Required
   * fields: organization, equipment, start/end time, reservation_type.
   * Optionally linked to an appointment by appointment_id.
   */
  export type ICreate = {
    /** ID of the organization booking the reservation. */
    organization_id: string & tags.Format<"uuid">;

    /** ID of the equipment for reservation. */
    equipment_id: string & tags.Format<"uuid">;

    /** Start datetime (ISO 8601) for the reservation. */
    reservation_start: string & tags.Format<"date-time">;

    /** End datetime (ISO 8601) for the reservation. */
    reservation_end: string & tags.Format<"date-time">;

    /**
     * If this reservation supports an appointment, include its UUID.
     * Nullable.
     */
    appointment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type/category for this reservation (e.g., 'scheduled', 'blocked',
     * 'maintenance').
     */
    reservation_type: string;
  };

  /**
   * Request payload for updating an equipment reservation. Permits
   * modification of start/end time, appointment linkage, or reservation_type.
   * All properties optional so updates may be partial.
   */
  export type IUpdate = {
    /** Optional new start time for the updated reservation (ISO 8601). */
    reservation_start?: (string & tags.Format<"date-time">) | undefined;

    /** Optional new end time for the reservation. */
    reservation_end?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optionally link to or update the connected appointment for this
     * reservation.
     */
    appointment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optionally revise the reservation_type of the reservation. */
    reservation_type?: string | undefined;
  };
}
