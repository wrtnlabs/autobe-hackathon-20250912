import { tags } from "typia";

/**
 * Incident event representing a security or compliance event in the healthcare
 * platform system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformSecurityIncident = {
  /** Unique incident identifier (primary key). */
  id: string & tags.Format<"uuid">;

  /** User who reported or triggered the event, if applicable. */
  opened_by_user_id?: (string & tags.Format<"uuid">) | undefined;

  /** Organization where the incident applies. */
  organization_id: string & tags.Format<"uuid">;

  /**
   * Classification of security incident (e.g., 'FAILED_LOGIN',
   * 'BREACH_SUSPECTED').
   */
  incident_type: string;

  /** Incident summary/headline for quick reference. */
  summary: string;

  /**
   * Full incident details, e.g., event context, system log fragments (may be
   * redacted for PHI).
   */
  details?: string | undefined;

  /**
   * Status of incident (e.g., 'OPEN', 'INVESTIGATING', 'RESOLVED',
   * 'ESCALATED').
   */
  status: string;

  /**
   * Incident severity as determined from business rules (e.g., 'LOW',
   * 'MEDIUM', 'HIGH', 'CRITICAL').
   */
  severity: string;

  /** Datetime when incident was reported/opened. */
  opened_at: string & tags.Format<"date-time">;

  /** Datetime when incident was resolved/closed (NULL if still open). */
  closed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Datetime when incident status or details were last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformSecurityIncident {
  /**
   * Request body for searching/filtering/paginating security incidents. Used
   * for incident dashboard, compliance audit reports, and incident
   * investigations. Accepts filter and pagination fields specific to the
   * properties in the Prisma schema and business reporting requirements.
   *
   * For full field details, see healthcare_platform_security_incidents. All
   * filtering must respect organizational data boundaries and compliance
   * restrictions. The request reflects typical security incident dashboard
   * query patterns.
   */
  export type IRequest = {
    /**
     * Filter by organization (uuid, not null if filtering to org-specific
     * events).
     */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by incident type (see codebook for available values). */
    incident_type?: string | undefined;

    /**
     * Filter by incident status (multiple status codes allowed if
     * required).
     */
    status?: string | undefined;

    /** Filter by severity: 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'. */
    severity?: string | undefined;

    /** Start of the opened_at time window, ISO8601. */
    opened_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** End of the opened_at time window, ISO8601. */
    opened_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Full-text search on incident summary/headline text. */
    summary_contains?: string | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Page size for pagination. */
    page_size?: (number & tags.Type<"int32">) | undefined;

    /** Field name to sort by, defaults to 'opened_at'. */
    sort_by?: string | undefined;

    /** Sort direction (asc or desc). */
    sort_order?: string | undefined;
  };

  /**
   * Summary of a security incident for paginated listing. Contains
   * identifying and status fields only, withholding full details, summary,
   * and sensitive context. Suitable for secure search and overview
   * containers.
   */
  export type ISummary = {
    /** Unique identifier of this security incident event. */
    id: string & tags.Format<"uuid">;

    /** Owning organization where the incident occurred. */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Classification of the incident (FAILED_LOGIN, PHI_EXFIL,
     * BREACH_SUSPECTED, etc.).
     */
    incident_type: string;

    /**
     * Incident status (e.g., OPEN, INVESTIGATING, RESOLVED, ESCALATED,
     * ARCHIVED).
     */
    status: string;

    /** Severity classification (LOW, MEDIUM, HIGH, CRITICAL). */
    severity: string;

    /** Incident opened timestamp. */
    opened_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for updating a security incident. Used to track progression
   * and remediation steps for production security or compliance incidents in
   * the healthcare platform's security monitoring and reporting system.
   *
   * Fields may be set by compliance/NOC staff, legal reviewers, or incident
   * response automation as workflow progresses. All updates are fully logged
   * for compliance and audit review, and may trigger further escalation or
   * notification.
   *
   * The permitted update fields are as per the updatable fields in
   * healthcare_platform_security_incidents. id/organization_id are immutable.
   * All updates must be validated by business/compliance policy, especially
   * for status and severity changes.
   *
   * Consult Prisma schema comments for full property intent and business
   * logic requirements.
   */
  export type IUpdate = {
    /**
     * Re-classification or re-categorization of the incident according to
     * incident taxonomy.
     */
    incident_type?: string | undefined;

    /**
     * Updated summary or headline. May be modified to include follow-up
     * summary as incident proceeds.
     */
    summary?: string | undefined;

    /**
     * Detailed incident description, post-mortem, or workflow annotation
     * text.
     */
    details?: string | undefined;

    /**
     * Updated workflow status, e.g., 'INVESTIGATING', 'RESOLVED',
     * 'ESCALATED', 'OPEN', etc.
     */
    status?: string | undefined;

    /**
     * Incident severity as determined during workflow. 'LOW', 'MEDIUM',
     * 'HIGH', 'CRITICAL' expected.
     */
    severity?: string | undefined;

    /**
     * Set to current timestamp on final incident closure. Null otherwise.
     * Mutated only at completion.
     */
    closed_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
