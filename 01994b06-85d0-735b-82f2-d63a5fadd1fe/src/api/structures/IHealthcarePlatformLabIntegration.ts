import { tags } from "typia";

/**
 * Main Lab Integration entity as used in configuration and listing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformLabIntegration = {
  /** Unique identifier for the lab integration connector. */
  id: string & tags.Format<"uuid">;

  /** Organization UUID the integration belongs to. */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /** Lab vendor/provider code (e.g., 'LabCorp', 'Quest'). */
  lab_vendor_code: string;

  /** Connection URI or integration endpoint. */
  connection_uri: string;

  /**
   * Supported message format specification (e.g., 'HL7 V2', 'FHIR R4',
   * 'C-CDA').
   */
  supported_message_format: string;

  /**
   * Current operational status of the integration (e.g., 'active', 'pending',
   * 'disabled').
   */
  status: string;

  /** Audit timestamp for when this integration was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update of integration configuration. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp; present if integration is archived, else null. */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IHealthcarePlatformLabIntegration {
  /**
   * Request DTO for searching, filtering, and paginating lab integration
   * connectors (PATCH endpoint).
   */
  export type IRequest = {
    /** Filter by organization UUID if provided. */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /**
     * Partial match or full search for lab integration provider code (e.g.,
     * 'LabCorp', 'Quest').
     */
    lab_vendor_code?: string | undefined;

    /** Filter by integration status (e.g., 'active', 'pending', etc.). */
    status?: string | undefined;

    /** Query for supported message formats (e.g., 'HL7', 'FHIR'). */
    supported_message_format?: string | undefined;

    /** General search keyword applied to main index fields. */
    search?: string | undefined;

    /** ISO date string for start of created_at filter. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** ISO date string for end of created_at filter. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (starts from 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Page size for pagination. */
    page_size?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Field to sort by (e.g., 'created_at', 'lab_vendor_code'). */
    sort_by?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. */
    sort_direction?: "asc" | "desc" | undefined;
  };

  /** DTO for creating a Lab Integration connector record. */
  export type ICreate = {
    /** Target organization UUID for the integration. */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /** Lab provider code (e.g., 'LabCorp'), unique per organization. */
    lab_vendor_code: string;

    /** Primary integration/API endpoint URI. */
    connection_uri: string;

    /** Message/document format supported by the integration. */
    supported_message_format: string;

    /**
     * Operational status of this integration connector (e.g., 'active',
     * 'pending').
     */
    status: string;
  };

  /**
   * DTO for updating a Lab Integration connector record. All fields are
   * optional for partial update but at least one must be present.
   */
  export type IUpdate = {
    /** (Optional) Change provider code if needed. */
    lab_vendor_code?: string | undefined;

    /** (Optional) Update connection endpoint URI. */
    connection_uri?: string | undefined;

    /** (Optional) Change supported message/document format. */
    supported_message_format?: string | undefined;

    /** (Optional) Update operational status. */
    status?: string | undefined;

    /** (Optional) Organization UUID (mostly for re-assignment, rare). */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;
  };

  /**
   * Summary view of a laboratory integration configuration. Records a single
   * integration registration for an organization, including connectivity
   * details, vendor/provider code, messaging format, operational status, and
   * audit fields. Used in lab integration lists for admin dashboard and
   * compliance review.
   */
  export type ISummary = {
    /**
     * Unique identifier for the lab integration record. References the
     * primary key from the lab integration entity.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the organization to which this lab integration
     * belongs.
     */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Code identifying the external laboratory provider/vendor. (e.g.,
     * LabCorp, Quest, custom code).
     */
    lab_vendor_code: string;

    /**
     * Primary API or system endpoint URI for the laboratory provider
     * integration. Should be a valid URI, but not necessarily a web URL
     * (can be system or local endpoint, depending on network
     * architecture).
     */
    connection_uri: string;

    /**
     * The structured message/document format the integration supports
     * (e.g., HL7, FHIR, C-CDA).
     */
    supported_message_format: string;

    /**
     * Operational status of the integration (e.g., 'active', 'disabled',
     * 'pending', etc.). Valid business statuses only.
     */
    status: string;

    /** Timestamp (ISO 8601) for when the integration record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp (ISO 8601) of last modification to this integration record. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp, null if the record is active. If non-null, the
     * record is logically deleted for compliance - actual resource remains
     * in storage for audit retention.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
