import { tags } from "typia";

/**
 * A platform-wide, organization-level, or department-scoped role as defined in
 * the healthcare_platform_roles table.
 *
 * Roles control the boundaries for permission allocation, access enforcement,
 * and workflow eligibility within the multi-tenant healthcare SaaS environment.
 * Each role is uniquely defined by its code and scope_type, and may have status
 * and lifecycle metadata. Documented with comments from the Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformRole = {
  /**
   * Unique identifier for the role.
   *
   * This is a UUID assigned by the system and serves as the primary key for
   * each role entry. It enables stable referencing and lookup of roles within
   * the RBAC system. Populated by Prisma as @id String @db.Uuid.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Role code used for assignment, internal mappings, and cross-system
   * integration (e.g., 'system_admin', 'organization_admin',
   * 'medical_doctor').
   *
   * This is a unique code per role and scope_type, ensuring no collisions
   * across business logic or integration boundaries. Sourced from the 'code'
   * field in Prisma. Examples include 'system_admin', 'organization_admin',
   * or custom codes for platform, organization, or department-specific
   * roles.
   */
  code: string;

  /**
   * Role display name, suitable for UI and business documentation. For
   * example, 'System Admin', 'Medical Doctor', or 'Receptionist'. Sourced
   * from the 'name' field in Prisma.
   */
  name: string;

  /**
   * Level at which this role applies. Expected values are 'platform',
   * 'organization', or 'department'. Dictates RBAC boundary for role
   * assignment and workflow.
   */
  scope_type: string;

  /**
   * Current lifecycle status of the role (e.g., 'active', 'retired',
   * 'system-only', 'archived'). Used to filter out deprecated roles in
   * assignment/security logic. Sourced from 'status' field in Prisma.
   */
  status: string;

  /**
   * Role creation timestamp (ISO 8601, RFC 3339). Captures when the role was
   * initially defined in the system, supporting audit trails and lifecycle
   * tracking.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update to any field or metadata for this role. Used
   * for audit and tracking changes in RBAC configurations.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp for archival.
   *
   * Null if role is currently active. If set, indicates the date/time at
   * which this role was archived/deleted for compliance retention. Sourced
   * from 'deleted_at' in Prisma.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformRole {
  /**
   * Request/Filter for listing paginated role records, supporting code, name,
   * scope, status, and free text search.
   */
  export type IRequest = {
    /** Filter for specific role code. */
    code?: string | undefined;

    /** Full text search or partial match filter by name. */
    name?: string | undefined;

    /** Scope (platform, organization, department). */
    scope_type?: string | undefined;

    /** Role lifecycle status filter. */
    status?: string | undefined;

    /** Page number (for pagination). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request payload for creating a new platform-wide, organization-level, or
   * department-scoped role in the healthcare_platform_roles table.
   */
  export type ICreate = {
    /**
     * Role code (unique within scope).
     *
     * Required. Must not collide with other codes within the same
     * scope_type. Examples: 'system_admin', 'org_manager', 'nurse', etc.
     */
    code: string;

    /** Display name for the role. Required. */
    name: string;

    /**
     * Scope type in which this role applies. Value should be one of:
     * 'platform', 'organization', 'department'.
     */
    scope_type: string;

    /** Initial status for the role (e.g., 'active', 'archived'). */
    status: string;
  };

  /**
   * Update payload for a role entity. Only allows changing display name and
   * status.
   *
   * Business logic may restrict status changes based on references,
   * deprecation policy, or platform logic. Fields left blank or null are
   * unchanged.
   */
  export type IUpdate = {
    /**
     * Updated display name for the role. Optional. If omitted, retains
     * current name.
     */
    name?: string | undefined;

    /**
     * Updated status for the role (e.g., 'active', 'retired', 'archived').
     * Optional. If omitted, status remains unchanged.
     */
    status?: string | undefined;
  };

  /**
   * Role summary object representing a platform, organization, or department
   * role for RBAC in the healthcarePlatform system. Reflects business
   * identity, scope, and status in the RBAC hierarchy. Used in role listing,
   * selection, and summary displays. All fields must correspond to underlying
   * Prisma role model semantics. This type is never to be used for sensitive
   * scope or user assignments directly, as those are handled by assignments
   * tables.
   */
  export type ISummary = {
    /** Unique identifier for the role as a UUID. */
    id: string & tags.Format<"uuid">;

    /**
     * Role code (e.g., 'system_admin', 'organization_admin') used for
     * cross-system mapping and assignment.
     */
    code: string;

    /** Human-readable display name for this role. */
    name: string;

    /**
     * The scope where this role applies (platform, organization,
     * department).
     */
    scope_type: string;

    /** Role status (active, retired, archived, system-only). */
    status: string;
  };
}
