import { tags } from "typia";

/**
 * Represents a single integration log entry for a healthcarePlatform system
 * audit, showing all technical and business event data required for integration
 * troubleshooting, monitoring, and compliance review. Used for security
 * alerting, incident investigation, and platform health checks.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformIntegrationLog = {
  /** Unique identifier for the integration log record. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the associated organization for log data isolation and audit
   * context.
   */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /**
   * Type/category of integration (e.g., 'emr', 'lab', 'insurance', 'device',
   * 'pharmacy'). Must match registered platform integration types.
   */
  integration_type: string;

  /**
   * Optional. The UUID of the referenced integration transaction if
   * applicable (for cross-reference).
   */
  referenced_transaction_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Status or resolution code for the event (e.g., 'success', 'failure',
   * 'timeout', 'retry').
   */
  event_status: string;

  /**
   * A brief technical or business event code (e.g., system-level error code,
   * workflow status code).
   */
  event_code: string;

  /**
   * Optional. Free text/log message/metadata for error or event context. May
   * contain user-readable output or stack trace.
   */
  event_message?: string | null | undefined;

  /** The actual timestamp (ISO 8601) when the event was observed to occur. */
  occurred_at: string & tags.Format<"date-time">;

  /** Record creation timestamp for audit tracking. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update for this integration log entry. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformIntegrationLog {
  /**
   * Request body for searching, filtering, and sorting healthcare platform
   * integration logs across all supported integration types. Provides
   * structured access to technical and business event audit trail for
   * troubleshooting, monitoring, and compliance.
   */
  export type IRequest = {
    /**
     * Optional filter: only include integration log records associated with
     * this organization.
     */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /**
     * Optional filter by integration type: e.g. 'emr', 'lab', 'insurance',
     * 'pharmacy', 'device'.
     */
    integration_type?: string | undefined;

    /**
     * Optional filter: only include events with this event status (e.g.
     * 'success', 'failure', 'timeout').
     */
    event_status?: string | undefined;

    /** Optional filter for event code (system or business event identifier). */
    event_code?: string | undefined;

    /** Return only integration events occurring after this ISO date/time. */
    occurred_after?: (string & tags.Format<"date-time">) | undefined;

    /** Return only integration events occurring before this ISO date/time. */
    occurred_before?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for paginated result sets (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum records per page. Default/typical is 50-100. */
    page_size?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>)
      | undefined;

    /**
     * Sort and order keyword (e.g., 'occurred_at desc', 'event_status
     * asc').
     */
    order_by?: string | undefined;

    /** Full-text search string to match event messages or metadata. */
    search?: string | undefined;
  };

  /**
   * Summary of an integration log record for compliance, troubleshooting, and
   * audit. Each log represents an integration point event such as success,
   * failure, error, or status event for an interaction with an external
   * laboratory, EMR, insurance, device, or pharmacy.
   */
  export type ISummary = {
    /** Unique identifier for the integration log event. */
    id: string & tags.Format<"uuid">;

    /** Reference ID of the organization in which this log event occurred. */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * Type/category of integration for this event (e.g., 'emr', 'lab',
     * 'pharmacy', 'insurance', 'device').
     */
    integration_type: string;

    /**
     * Transaction or related entity being referenced by the event (nullable
     * depending on integration type/event context).
     */
    referenced_transaction_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Discrete event status for this log (e.g., 'success', 'failure',
     * 'timeout', 'retry').
     */
    event_status: string;

    /** Short status/error code (e.g., 'E_CONN', 'E_PARSE', 'OK'). */
    event_code: string;

    /**
     * Extended error message/event context payload, if present (can contain
     * stack traces or integration info).
     */
    event_message?: string | null | undefined;

    /**
     * Timestamp when the integration event occurred (audit date-time, ISO
     * 8601).
     */
    occurred_at: string & tags.Format<"date-time">;

    /** Timestamp (ISO 8601) of record creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last log event update (ISO 8601). */
    updated_at: string & tags.Format<"date-time">;
  };
}
