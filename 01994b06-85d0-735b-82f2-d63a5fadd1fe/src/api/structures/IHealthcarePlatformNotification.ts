import { tags } from "typia";

/**
 * Represents a notification event in the healthcare platform, including all
 * metadata for delivery, escalation, audit, and visibility to staff/patient.
 * Used in notification APIs for CRUD, display, and search operations. Field
 * definitions map exactly to schema and are auditable for compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformNotification = {
  /** Unique identifier for the notification event. */
  id: string & tags.Format<"uuid">;

  /** UUID of the notification's recipient user (staff, patient, etc.). */
  recipientUserId?: (string & tags.Format<"uuid">) | undefined;

  /** UUID of the target organization. */
  organizationId?: (string & tags.Format<"uuid">) | undefined;

  /**
   * UUID of the sender (if available, e.g., staff sending a message to
   * patient).
   */
  senderUserId?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Logical event/type code for the notification (e.g.,
   * 'appointment_reminder', 'billing_alert', etc.)
   */
  notificationType: string;

  /**
   * How notification is or was delivered (e.g., 'in_app', 'email', 'sms',
   * 'push', 'phone_call').
   */
  notificationChannel: string;

  /** Notification subject for email/SMS/push display (if provided). */
  subject?: string | undefined;

  /** Full message body for the notification as delivered. */
  body: string;

  /**
   * URL or internal reference for details/call-to-action (e.g., link to
   * appointment, bill, or compliance document).
   */
  payloadLink?: string | undefined;

  /**
   * True if the notification is critical for SLA/compliance, requiring user
   * acknowledgement or escalation.
   */
  critical: boolean;

  /**
   * Current status of notification delivery
   * ('pending','delivered','failed','acknowledged','escalated').
   */
  deliveryStatus: string;

  /**
   * Total count of automated delivery attempts for the notification.
   * Incremented on each retry.
   */
  deliveryAttempts: number & tags.Type<"int32">;

  /**
   * Timestamp when notification was successfully delivered, or null if not
   * delivered.
   */
  deliveredAt?: (string & tags.Format<"date-time">) | undefined;

  /** Timestamp of last delivery attempt for auditing SLA. */
  lastDeliveryAttemptAt?: (string & tags.Format<"date-time">) | undefined;

  /**
   * When user explicitly acknowledged notification (critical ones, as
   * required by policy).
   */
  acknowledgedAt?: (string & tags.Format<"date-time">) | undefined;

  /**
   * If reminder/notification was snoozed, indicates next attempt or when
   * snooze expires.
   */
  snoozedUntil?: (string & tags.Format<"date-time">) | undefined;

  /**
   * If delivered notification resulted in escalation for compliance, points
   * to escalation event.
   */
  escalationEventId?: (string & tags.Format<"uuid">) | undefined;

  /** Timestamp when notification was created. */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Timestamp when notification was last updated (e.g., after deliveryStatus
   * or escalation changes).
   */
  updatedAt: string & tags.Format<"date-time">;

  /** If set, notification was soft-deleted/archived for compliance retention. */
  deletedAt?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IHealthcarePlatformNotification {
  /**
   * Structure for searching/filtering notifications. Used for paginated list
   * endpoints where users, admins, or auditors need to search notifications
   * by recipient, type, status, date, and channel. All properties optional,
   * with pagination enforced by backend. Must follow platform security policy
   * for user/data isolation.
   */
  export type IRequest = {
    /**
     * Page number for results. Used in paginated notification listing
     * endpoints, optional, must be >= 1 when provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of results per page. Used in paginated notification
     * listing, optional. Organization can set a default or max, e.g.
     * 10-100.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Field in IHealthcarePlatformNotification by which to sort result set
     * (e.g., 'createdAt', 'deliveryStatus', 'critical'). Sorting is
     * optional, and implementation may restrict sort fields.
     */
    sortField?: string | undefined;

    /**
     * Sort order for result set if sortField is specified. Defaults to
     * 'desc' if omitted. Enum constrained to 'asc' | 'desc'.
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Type/category of the notification for filtering (e.g.,
     * 'appointment_reminder', 'billing_alert'). Enables users/admins to
     * filter by event type as used in notification creation.
     */
    notificationType?: string | undefined;

    /**
     * Delivery channel for the notification (e.g., 'in_app', 'email',
     * 'sms', 'push', etc.). Filtering enables restricting results to
     * notifications by preferred channel.
     */
    notificationChannel?: string | undefined;

    /**
     * Unique identifier (UUID) of the recipient user whose notifications
     * are being queried. Used to filter to the caller or, for admins, to
     * other users of their organization.
     */
    recipientUserId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Unique identifier (UUID) of the organization context for filtering.
     * Restricts search to a single organization's notification events.
     */
    organizationId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Current lifecycle status of notification: e.g., 'pending',
     * 'in_progress', 'delivered', 'failed', 'acknowledged', etc. Used to
     * locate notifications by status.
     */
    deliveryStatus?: string | undefined;

    /**
     * Whether the notification is marked as critical (true) or routine
     * (false). Used to restrict results to high-priority/incident
     * notifications.
     */
    critical?: boolean | undefined;

    /**
     * ISO8601 date/time string (inclusive) for filtering notifications with
     * createdAt/deliveredAt after this point. Used for date window
     * queries.
     */
    startDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO8601 date/time string (inclusive) for filtering notifications
     * created/delivered before this point. Used for date range queries.
     */
    endDate?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Payload for creating a new notification to staff, patient, or user. Used
   * in notification creation APIsâ€”delivery channel, type, and body required;
   * subject, recipient, sender, and critical are optional or required per
   * business rules. Maps to healthcare_platform_notifications table on
   * creation.
   */
  export type ICreate = {
    /**
     * UUID of the notification recipient. Required unless org-level
     * broadcast/policy alert.
     */
    recipientUserId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID of the target organization recipient (optional, for org-level
     * broadcast).
     */
    organizationId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID of the notification sender, if set (e.g., staff sending to
     * patient, optional in system triggers).
     */
    senderUserId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Logical event type code for this notification
     * ('appointment_reminder', 'billing_alert', 'info', etc.). Required.
     */
    notificationType: string;

    /**
     * Delivery channel code (e.g.,
     * 'email','sms','in_app','push','phone_call'). Required, must be a
     * valid channel defined in system config/business policy.
     */
    notificationChannel: string;

    /**
     * Notification subject, used in email/SMS/push message display.
     * Optional in in-app notifications.
     */
    subject?: string | undefined;

    /** Full notification message/text. Required in all notifications. */
    body: string;

    /**
     * URL or path to further details for user action (appointment, bill
     * details, regulatory doc, etc.). Optional.
     */
    payloadLink?: string | undefined;

    /**
     * True if this is a critical notification requiring explicit
     * acknowledgement/escalation (e.g., compliance, incident). Defaults to
     * false if unset.
     */
    critical?: boolean | undefined;
  };

  /**
   * DTO for updating fields of an existing notification. All fields optional;
   * backend logic enforces which properties can be updated per notification
   * lifecycle, status, and compliance policy. Used in notification
   * update/patch endpoints.
   */
  export type IUpdate = {
    /**
     * If provided, overwrites notification event/type code for business
     * logic tracking.
     */
    notificationType?: string | undefined;

    /**
     * If provided, updates notification delivery channel (e.g.,
     * 'in_app','sms').
     */
    notificationChannel?: string | undefined;

    /** If present, updates the subject for email/push notifications. */
    subject?: string | undefined;

    /** If present, updates the message body. */
    body?: string | undefined;

    /**
     * If present, updates the reference/call-to-action link for the
     * notification.
     */
    payloadLink?: string | undefined;

    /**
     * Overrides delivery status for administrative intervention
     * ('pending','delivered','failed','acknowledged','escalated').
     */
    deliveryStatus?: string | undefined;

    /** If present, updates the attempt counter. */
    deliveryAttempts?: (number & tags.Type<"int32">) | undefined;

    /** If set, updates when notification was delivered. */
    deliveredAt?: (string & tags.Format<"date-time">) | undefined;

    /** If set, updates timestamp of last delivery attempt. */
    lastDeliveryAttemptAt?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If set, sets when user acknowledged receipt (for critical
     * notifications).
     */
    acknowledgedAt?: (string & tags.Format<"date-time">) | undefined;

    /** If set, modifies notificationâ€™s snooze/until property. */
    snoozedUntil?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If set, updates link to an escalation event for compliance and
     * tracking.
     */
    escalationEventId?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Minimal summary view of notification suitable for list views and search
   * results. Used in paginated containers and table displays, returns no
   * sensitive or full message body information. Safe for non-admin and
   * routine user access.
   */
  export type ISummary = {
    /** Unique identifier for the notification event. */
    id: string & tags.Format<"uuid">;

    /** Logical event/type code (appointment_reminder, billing_alert, etc). */
    notificationType: string;

    /** Channel - email, sms, in_app, etc. */
    notificationChannel: string;

    /** True if notification requires explicit acknowledgement/escalation. */
    critical: boolean;

    /**
     * Current delivery status: pending, delivered, failed, acknowledged,
     * etc.
     */
    deliveryStatus: string;

    /** Timestamp of notification creation. */
    createdAt: string & tags.Format<"date-time">;

    /** Notification subject (display/optional, for list previews). */
    subject?: string | undefined;

    /** Timestamp if delivered, else null/absent. */
    deliveredAt?: (string & tags.Format<"date-time">) | undefined;
  };
}
