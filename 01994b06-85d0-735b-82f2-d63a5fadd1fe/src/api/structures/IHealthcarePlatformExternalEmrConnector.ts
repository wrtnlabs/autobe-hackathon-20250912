import { tags } from "typia";

/**
 * External EMR/EHR connector configuration for organization-level
 * interoperability. Stores type, URI, status, last sync, and metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformExternalEmrConnector = {
  /** Unique ID for this EMR/EHR connector configuration (UUID). */
  id: string & tags.Format<"uuid">;

  /** Organization UUID this connector belongs to. */
  healthcare_platform_organization_id: string & tags.Format<"uuid">;

  /**
   * EMR/EHR vendor/platform code (e.g., 'Epic', 'Cerner', 'AllScripts',
   * custom).
   */
  connector_type: string;

  /**
   * Connection URI or integration endpoint for the external EMR/EHR instance
   * (max 80,000 chars).
   */
  connection_uri: string & tags.MaxLength<80000>;

  /** Operational/connection status (e.g., active, pending, failed, disabled). */
  status: string;

  /**
   * Timestamp for last successful sync with this connector
   * (nullable/date-time).
   */
  last_sync_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** When the connector configuration was created (date-time). */
  created_at: string & tags.Format<"date-time">;

  /** Last update time for connector configuration (date-time). */
  updated_at: string & tags.Format<"date-time">;

  /** Logical soft-delete marker (nullable date-time; null = active). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformExternalEmrConnector {
  /**
   * Search/filter and pagination criteria for external EMR/EHR connector
   * index query. Used to find connectors by type, status, org, and sync
   * date.
   */
  export type IRequest = {
    /** Filter by connector_type (string, optional). Partial value accepted. */
    connector_type?: string | undefined;

    /** Filter by status (string, optional). */
    status?: string | undefined;

    /** Filter by healthcare_platform_organization_id (UUID, optional). */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | undefined;

    /** Full-text search across connector fields (string, optional). */
    search?: string | undefined;

    /** Minimum RFC3339 date-time for last_sync_at field (string, optional). */
    last_sync_at_min?: (string & tags.Format<"date-time">) | undefined;

    /** Maximum RFC3339 date-time for last_sync_at field (string, optional). */
    last_sync_at_max?: (string & tags.Format<"date-time">) | undefined;

    /** Sort field (string, optional). */
    sort_by?: string | undefined;

    /** Sort direction: 'asc' or 'desc' (string, optional). */
    sort_direction?: "asc" | "desc" | undefined;

    /** Page number for pagination (integer, optional; default: 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of items per page (integer, optional; default: 20). */
    page_size?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Payload for creating a new external EMR/EHR connector config, specifying
   * org, type, URI, and initial status.
   */
  export type ICreate = {
    /** Organization UUID this connector is for. */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /**
     * EMR/EHR vendor/platform code (e.g., 'Epic', 'Cerner', 'AllScripts',
     * custom).
     */
    connector_type: string;

    /** Connection endpoint/URI for the EMR/EHR instance. */
    connection_uri: string;

    /** Initial status for this connector (e.g., active, pending, disabled). */
    status: string;
  };

  /**
   * Payload for updating an external EMR/EHR connector; allows updating
   * vendor type, URI, status, or soft-deletion.
   */
  export type IUpdate = {
    /** Update the EMR/EHR vendor/platform code (string, optional). */
    connector_type?: string | undefined;

    /** Update the connection endpoint/URI (string, optional). */
    connection_uri?: string | undefined;

    /** Update the operational status (string, optional). */
    status?: string | undefined;

    /**
     * (Optionally) set deleted_at for soft-deletion (RFC3339 date-time,
     * optional).
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information for external EMR/EHR connector configurations,
   * includes org, type, status, sync/failure timestamps, and lifecycle meta
   * for dashboard or config audit UI.
   */
  export type ISummary = {
    /** The EMR connector ID. */
    id: string & tags.Format<"uuid">;

    /** Organization to which this connector belongs. */
    healthcare_platform_organization_id: string & tags.Format<"uuid">;

    /** Vendor/EMR/EHR type string. */
    connector_type: string;

    /**
     * Operational status code for connector (e.g., active, failed,
     * disabled).
     */
    status: string;

    /** When this connector last successfully synchronized (nullable). */
    last_sync_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** When this connector config was created. */
    created_at: string & tags.Format<"date-time">;

    /** When this connector config was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** When this connector was soft deleted (null if still active). */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
