import { tags } from "typia";

/**
 * Represents a single vital sign entry associated with a patient EHR encounter.
 * Each record must be linked to an encounter and a submitting user
 * (nurse/clinician). Maintains clinical measurement details, units, time of
 * measurement, and audit fields for compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformVital = {
  /**
   * Unique identifier for this vital entry. Corresponds to the primary key of
   * the record in the vitals table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the EHR encounter to which this vital sign
   * recording is linked.
   */
  ehr_encounter_id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the nurse or clinician who recorded this vital
   * sign. Used for audit, attribution, and compliance.
   */
  recorded_by_user_id: string & tags.Format<"uuid">;

  /**
   * Clinical type of the vital, e.g., 'heart_rate', 'temp_c', 'bp_systolic',
   * 'bp_diastolic', etc. Must match codes used for analytics and compliance.
   * @business terminology.
   */
  vital_type: string;

  /**
   * The actual measured value for the vital sign. Should be in the units
   * defined by the 'unit' property.
   */
  vital_value: number;

  /**
   * Measurement units for the vital sign (e.g., 'bpm', 'C', 'mmHg'). Must
   * follow clinical conventions.
   */
  unit: string;

  /**
   * The exact timestamp when the vital sign was measured, in ISO 8601 format.
   * Used for charting, audit, and clinical workflows.
   */
  measured_at: string & tags.Format<"date-time">;

  /**
   * Time when this vital record was first created in the system (may be after
   * measured_at for retrospective entries).
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformVital {
  /**
   * Request body for advanced search/filtering over vital sign records
   * attached to a specific patient record and encounter. Supports flexible
   * filtering, bounding values, sorting, and pagination.
   */
  export type IRequest = {
    /**
     * The unique identifier of the patient record for which vitals are to
     * be searched.
     */
    patient_record_id: string & tags.Format<"uuid">;

    /** The UUID of the clinical encounter whose vitals are being queried. */
    encounter_id: string & tags.Format<"uuid">;

    /**
     * (Optional) Filter on a specific vital sign type (e.g., 'heart_rate',
     * 'bp_systolic').
     */
    vital_type?: string | undefined;

    /** (Optional) Minimum value filter for vital sign values. */
    value_min?: number | undefined;

    /** (Optional) Maximum value filter for vital sign values. */
    value_max?: number | undefined;

    /**
     * (Optional) Only include vitals measured after this timestamp (ISO
     * 8601).
     */
    measured_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Only include vitals measured before this timestamp (ISO
     * 8601).
     */
    measured_before?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Filter by the user who recorded the vital measurement. */
    recorded_by_user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) Filter on the units of measurement (e.g., 'bpm', 'mmHg',
     * 'C').
     */
    unit?: string | undefined;

    /**
     * (Optional) Field to sort results by (e.g., 'measured_at',
     * 'vital_value', etc.).
     */
    sort_by?: string | undefined;

    /**
     * (Optional) Direction to sort results: 'asc' for ascending, 'desc' for
     * descending.
     */
    sort_order?: "asc" | "desc" | undefined;

    /**
     * (Optional) Which result page to retrieve. Defaults to 1 if not
     * provided.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) Maximum number of results per page. Defaults per system
     * configuration.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload for creating a new vital record associated with a specific
   * encounter. User attribution is determined from the authentication context
   * and is not accepted from client input for security/compliance. Used in
   * nurse workflows, charting, and analytics.
   */
  export type ICreate = {
    /**
     * Reference to the EHR encounter to which the vital belongs (link to
     * healthcare_platform_ehr_encounters.id). Required for insertion and
     * audit workflows.
     */
    ehr_encounter_id: string & tags.Format<"uuid">;

    /**
     * Clinical code/type for the recorded vital. Must be a known term such
     * as 'heart_rate', 'temp_c', etc., as defined in platform conventions.
     */
    vital_type: string;

    /**
     * Actual measured value for the given vital entry, in the units
     * indicated in the 'unit' property.
     */
    vital_value: number;

    /**
     * Units for measurement, e.g., 'bpm', 'C', 'mmHg'. Must match clinical
     * convention and be interpretable for this vital_type.
     */
    unit: string;

    /**
     * Exact time measurement was taken (ISO 8601) for accurate charting.
     * Required for clinical workflow and audit.
     */
    measured_at: string & tags.Format<"date-time">;
  };

  /**
   * Update properties for a vital record. Only mutable fields may be changed;
   * audit fields, ownership/user ID, and primary/foreign key actor
   * assignments are forbidden in update request objects. Used for correcting
   * chart entries, regulatory amendment, or clinical workflow review. User
   * attribution is system-controlled. All updates must be fully auditable and
   * tracked.
   */
  export type IUpdate = {
    /**
     * Clinical code/type of the vital. May be corrected for coding errors
     * or clinical note review.
     */
    vital_type?: string | undefined;

    /**
     * Corrected or updated value for the vital sign, if re-charted or
     * amended for error/inaccuracy.
     */
    vital_value?: number | undefined;

    /**
     * Measurement units, in case of correction or
     * recalibration/reclassification of entry.
     */
    unit?: string | undefined;

    /**
     * Corrected measurement timestamp (ISO 8601). Allows re-timestamping or
     * amending of clinical data if necessary.
     */
    measured_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
