import { tags } from "typia";

/**
 * A single configuration entry for operational, technical, or business feature
 * toggles and settings. Can be scoped to an organization or global. Designed
 * for robust auditability and compliance. All properties must match the
 * platform schema. No sensitive or clinical PHI data is stored.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformConfiguration = {
  /**
   * Unique identifier for the configuration entry. UUID primary key, always
   * present.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID for org-level config, or null if this is a platform-wide/global
   * configuration.
   */
  healthcare_platform_organization_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** Configuration key/feature flag. Human- and machine-identified within org. */
  key: string;

  /**
   * Configuration value (business or operational logic). For complex config,
   * may be JSON stringified.
   */
  value: string;

  /**
   * Description of the configuration or business/technical impact. Required
   * for audit and compliance. Multi-line should explain the purpose and
   * expected effect of this setting.
   */
  description: string;

  /**
   * Creation ISO 8601 timestamp. Tracked for audit purposes. Set by the
   * platform.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update ISO 8601 timestamp. Tracked for audit/auditability. Set by
   * platform logic.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion flag. If present, record is non-active but available for
   * audit. If null, configuration is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformConfiguration {
  /**
   * Request body for searching and retrieving paginated configuration
   * records. Includes filtering by organization, configuration key, value,
   * soft-deleted status, and pagination/sorting parameters. Only
   * schema-defined filter properties permitted.
   */
  export type IRequest = {
    /**
     * Organization UUID to filter for org-level configurations. Optional -
     * if omitted, search may be global.
     */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Search/filter configuration records by their configuration key
     * (feature name, flag, etc). Partial or exact match.
     */
    key?: string | undefined;

    /**
     * Match on value for searching within configuration records. May be
     * full value or partial string.
     */
    value?: string | undefined;

    /**
     * If true, return only soft-deleted configurations (deleted_at not
     * null). If false/omitted, return only active configs.
     */
    deleted?: boolean | undefined;

    /**
     * Page of results to return (pagination, 1-based). Optional, default is
     * first page.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of results per page for pagination. Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sort order for results (e.g. 'created_at desc', 'key asc'). Optional. */
    sort?: string | undefined;
  };

  /**
   * Payload for creating a new configuration entry (for org or platform-wide
   * scope). Auditable and fully described. Only schema properties are
   * allowed. Organization is optional/null for global settings.
   */
  export type ICreate = {
    /**
     * UUID of the organization for which this configuration is being set,
     * or null for global configs. Matches org primary key.
     */
    healthcare_platform_organization_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Key for the configuration or feature flag being defined. Must be
     * unique among active keys in the same org.
     */
    key: string;

    /**
     * Business logic or operational value for the configuration. For
     * complex records, should be serialized string or base64-encoded JSON.
     */
    value: string;

    /**
     * Human- and compliance-readable description documenting the purpose
     * and effect of the configuration setting.
     */
    description: string;
  };

  /**
   * Partial or complete payload for updating configuration records. Only
   * defined fields in the object are updatable. No required fields (all are
   * optional for PATCH/PUT). Setting deleted_at marks as soft deleted (record
   * is retained but not used in active workflows).
   */
  export type IUpdate = {
    /**
     * Update to configuration or feature flag key/name. Only allowed if not
     * in use, otherwise changes result in error.
     */
    key?: string | undefined;

    /**
     * New value to set for the configuration (can be string, serialized, or
     * JSON encoded).
     */
    value?: string | undefined;

    /**
     * Update description explaining the business impact or rationale for
     * the configuration change. Required for major updates.
     */
    description?: string | undefined;

    /**
     * Set the soft-delete timestamp (ISO 8601/UTC) if marking configuration
     * as deleted. Use null to reactivate. For audit compliance.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
