import { tags } from "typia";

/**
 * Represents a clinical or administrative event for a patient within the EHR
 * system. Contains metadata and relationships for episode tracking, regulatory
 * audit, and care assignment. See PatientRecords.EhrEncounters table in schema
 * for full documentation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformEhrEncounter = {
  /** Unique identifier for the EHR encounter record. */
  id: string & tags.Format<"uuid">;

  /** Foreign key to root patient record. */
  patient_record_id: string & tags.Format<"uuid">;

  /** Unique user ID for the provider assigned to this encounter. */
  provider_user_id: string & tags.Format<"uuid">;

  /**
   * Describes the type of clinical encounter. Example: office_visit,
   * inpatient_admission, telemedicine, emergency, etc.
   */
  encounter_type: string;

  /** Datetime (ISO 8601) when the encounter started. */
  encounter_start_at: string & tags.Format<"date-time">;

  /** Datetime (ISO 8601) when the encounter ended (null if ongoing). */
  encounter_end_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Business status of the encounter (planned, active, completed, cancelled,
   * etc).
   */
  status: string;

  /**
   * Free-form clinical notes for documentation. May be redacted for certain
   * roles.
   */
  notes?: string | null | undefined;

  /** Timestamp when the encounter record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the encounter record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp (null if active). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IHealthcarePlatformEhrEncounter {
  /**
   * Search, filter, or pagination arguments for EHR encounter index endpoint.
   * Allows granular querying by type, provider, time, status, or notes. May
   * be used in PATCH/paged-lists for encounter browsing from patient/clinical
   * UIs.
   */
  export type IRequest = {
    /**
     * Filter list by allowed encounter type codes (e.g., 'office_visit',
     * 'inpatient').
     */
    encounter_type?: string[] | undefined;

    /** Restrict results to encounters by specified provider(s) (UUID list). */
    provider_user_ids?: string[] | undefined;

    /** Filter for encounters starting at or after this date/time. */
    encounter_start_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for encounters before or at this date/time. */
    encounter_start_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Limit to encounter statuses (planned, active, completed, etc). */
    status?: string[] | undefined;

    /** Full-text search in clinical notes/comments. */
    notes_query?: string | undefined;

    /** Page number for paginated lists (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Max result count per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sort encounters by this field (start time, provider, etc). */
    sort_by?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. */
    sort_direction?: string | undefined;
  };

  /**
   * Payload to create a new EHR encounter for a patient. Used when opening a
   * new clinical episode or administrative event. See
   * PatientRecords.EhrEncounters table for field documentation and required
   * values.
   */
  export type ICreate = {
    /** Required. Patient record to link this encounter to. */
    patient_record_id: string & tags.Format<"uuid">;

    /** Required. User ID of the responsible provider for this encounter. */
    provider_user_id: string & tags.Format<"uuid">;

    /**
     * Required. The encounter type (office_visit, admission, emergency,
     * etc).
     */
    encounter_type: string;

    /** Required. Date/time (ISO 8601) for the start of the encounter. */
    encounter_start_at: string & tags.Format<"date-time">;

    /**
     * Optional. End datetime of the encounter. null if ongoing or not
     * applicable.
     */
    encounter_end_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Required. Business status of this encounter (planned, active,
     * completed, etc).
     */
    status: string;

    /**
     * Optional. Free-form clinical or operational notes for the encounter.
     * Redacted as required by business rules.
     */
    notes?: string | null | undefined;
  };

  /**
   * Payload to update an existing EHR encounter. Used for amending status,
   * documenting end datetime, updating notes, or changing encounter type as
   * allowed by business policy. Only modifiable fields are included. See
   * PatientRecords.EhrEncounters update semantics.
   */
  export type IUpdate = {
    /** If provided, updates the encounter_type for this encounter record. */
    encounter_type?: string | undefined;

    /** If provided, sets a new start time (ISO 8601). */
    encounter_start_at?: (string & tags.Format<"date-time">) | undefined;

    /** Optional update for encounter end time (null or ISO 8601 date-time). */
    encounter_end_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** If supplied, updates the business status of the encounter. */
    status?: string | undefined;

    /**
     * Optional: update/replace notes for this encounter. Null to clear
     * notes field.
     */
    notes?: string | null | undefined;
  };

  /**
   * Summary view for EHR encounter records within the platform.
   *
   * This summary type is designed for paginated list, index, and lightweight
   * search results, surfacing core identification and workflow fields for a
   * single encounter. It is derived from the
   * healthcare_platform_ehr_encounters table as described in the Prisma
   * schema and is essential for displaying large sets of EHR encounter search
   * results efficiently.
   *
   * Properties are strictly limited to fields necessary for summary: id,
   * patient_record_id, provider_user_id (as a reference), encounter_type,
   * status, and start/end timestamps.
   *
   * Sensitive fields and extended notes or audit content are intentionally
   * omitted for performance, security, and privacy compliance.
   *
   * The summary view enables quick navigation for practitioners, compliance
   * users, and support staff to delve into full encounter detail as needed in
   * further UI steps. All fields align with the database schema and support
   * advanced filtering/sorting.
   *
   * All descriptions and field mappings are in full compliance with the
   * business requirements, documentation conventions, and English-language
   * standards set out in your documentation process.
   */
  export type ISummary = {
    /** Unique identifier for this EHR encounter (UUID, Prisma PK). */
    id: string & tags.Format<"uuid">;

    /**
     * The patient record to which this encounter belongs. FK to
     * healthcare_platform_patient_records.
     */
    patient_record_id: string & tags.Format<"uuid">;

    /**
     * User ID of the provider assigned to this encounter
     * (healthcare_platform_medicaldoctors.id).
     */
    provider_user_id: string & tags.Format<"uuid">;

    /**
     * Type of encounter, e.g., office_visit, inpatient_admission,
     * telemedicine, emergency, etc.
     */
    encounter_type: string;

    /** ISO 8601 timestamp marking the encounter's start. */
    encounter_start_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 timestamp when the encounter ended (may be null for
     * active/in-progress).
     */
    encounter_end_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Current business status of the encounter (planned, active, completed,
     * cancelled, etc.).
     */
    status: string;
  };
}
