import { tags } from "typia";

/**
 * Represents a scheduled reminder event for a user or system workflow (from
 * healthcare_platform_reminders table). Aggregates business/notification
 * status, timestamps, and audit metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformReminder = {
  /** Unique ID for the reminder record (from healthcare_platform_reminders). */
  id: string & tags.Format<"uuid">;

  /** User to receive this reminder (nullable). */
  target_user_id?: (string & tags.Format<"uuid">) | undefined;

  /** Organization context (nullable for platform-global). */
  organization_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Business logic class/category (e.g., appointment, medication, task,
   * compliance, survey).
   */
  reminder_type: string;

  /** Payload to display/deliver in notification. */
  reminder_message: string;

  /** When to deliver/activate reminder. */
  scheduled_for: string & tags.Format<"date-time">;

  /**
   * Current status (pending, sent, snoozed, failed, acknowledged, expired,
   * cancelled).
   */
  status: string;

  /** If delivered, when. */
  delivered_at?: (string & tags.Format<"date-time">) | undefined;

  /** If acknowledged by user, when. */
  acknowledged_at?: (string & tags.Format<"date-time">) | undefined;

  /** If snoozed, next delivery/activation time. */
  snoozed_until?: (string & tags.Format<"date-time">) | undefined;

  /** If failed, why. */
  failure_reason?: string | undefined;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last modification timestamp. */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /** Soft delete/archival marker. */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IHealthcarePlatformReminder {
  /**
   * Request body for searching and filtering reminders. Supports text,
   * status, and time-based filtering, plus pagination and sorting.
   */
  export type IRequest = {
    /** User to receive this reminder ( */
    target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Scope organization for the reminder (nullable for global/system
     * reminders).
     */
    organization_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Class/category (appointment, medication, task, compliance, followup,
     * checkin, survey, job, etc). Partial/keyword search permitted.
     */
    reminder_type?: string | undefined;

    /** Filter by reminder message content (supports partial/keyword search). */
    reminder_message?: string | undefined;

    /** Start of reminder scheduled delivery window (ISO 8601). */
    scheduled_for_from?: (string & tags.Format<"date-time">) | undefined;

    /** End of reminder scheduled delivery window (ISO 8601). */
    scheduled_for_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter by reminder status (pending, sent, snoozed, failed,
     * acknowledged, expired, cancelled).
     */
    status?: string | undefined;

    /** Filter reminders delivered after this time (ISO 8601). */
    delivered_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter reminders delivered before this time (ISO 8601). */
    delivered_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for reminders acknowledged after this time. */
    acknowledged_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for reminders acknowledged before this time. */
    acknowledged_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter reminders by failure reason (text/keyword search). */
    failure_reason?: string | undefined;

    /** Page number for pagination (1-based) */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page (max system-defined; e.g. 100). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Sort field or criteria (e.g. scheduled_for, reminder_type,
     * target_user_id, status), may allow asc/desc specification.
     */
    sort?: string | undefined;
  };

  /**
   * Data required to create a new scheduled reminder for a recipient or staff
   * member. All timestamps are formatted as ISO 8601 date-time strings.
   * Optional organization or user targeting fields may be specified for
   * reminder assignment. Field-level business rules and audit logic should be
   * enforced by the implementation.
   */
  export type ICreate = {
    /**
     * Reminder category (e.g., appointment, medication, compliance,
     * workflow event, etc). Business required field used for routing and
     * classification.
     */
    reminder_type: string;

    /**
     * Human-targeted reminder message content, to be displayed or delivered
     * by the configured channel. Must be a string and provide clear
     * instructions/notice.
     */
    reminder_message: string;

    /**
     * ISO 8601 date-time value representing when the reminder is
     * scheduled/reminded for delivery. Required for scheduling.
     */
    scheduled_for: string & tags.Format<"date-time">;

    /**
     * (Optional) Organization this reminder is linked to. UUID or null.
     * Leave null if not org-scoped.
     */
    organization_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) User for whom the reminder is intended. UUID for
     * patient/staff reminder, or null for org-wide.
     */
    target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) Delivery status of reminder at creation (usually
     * 'pending'). Can be set to other statuses per workflow, or left null
     * and set by downstream workflows.
     */
    status?: string | null | undefined;

    /**
     * (Optional) Timestamp when the reminder was actually delivered (set by
     * system, null at creation).
     */
    delivered_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * (Optional) Timestamp when the reminder was acknowledged by user (for
     * audit/compliance, usually null initially).
     */
    acknowledged_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * (Optional) When reminder is snoozed for future re-delivery (date-time
     * or null).
     */
    snoozed_until?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * (Optional) If the reminder fails (e.g., delivery failure), this field
     * holds the descriptive error.
     */
    failure_reason?: string | null | undefined;
  };

  /**
   * Updatable fields for an existing reminder record in the healthcare
   * platform. Timestamp fields are ISO 8601 date-time strings. All properties
   * are optional for partial update; absent fields are left unchanged.
   */
  export type IUpdate = {
    /** Reminder category (appointment, medication, compliance, etc). */
    reminder_type?: string | undefined;

    /** Updated message body content shown to recipient. */
    reminder_message?: string | undefined;

    /** Date/time reminder should be (re-)delivered. */
    scheduled_for?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Manual status change for reminder (pending, sent, snoozed, failed,
     * delivered, acknowledged, etc).
     */
    status?: string | undefined;

    /** Timestamp the reminder was delivered (ISO8601). */
    delivered_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp user acknowledged message (ISO8601). */
    acknowledged_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Next scheduled delivery if the reminder was snoozed (or null if not
     * snoozed).
     */
    snoozed_until?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Failure explanation or error message for non-delivered reminders (if
     * applicable).
     */
    failure_reason?: string | null | undefined;
  };

  /**
   * Summary view of a scheduled reminder (basic fields for list UI or table
   * display, omitting audit/internal details).
   */
  export type ISummary = {
    /** Reminder ID. */
    id: string & tags.Format<"uuid">;

    /** E.g., appointment, compliance. */
    reminder_type: string;

    /** Summary message/content. */
    reminder_message: string;

    /** Scheduled delivery time. */
    scheduled_for: string & tags.Format<"date-time">;

    /** Latest status (pending, delivered, expired, acknowledged). */
    status: string;
  };
}
