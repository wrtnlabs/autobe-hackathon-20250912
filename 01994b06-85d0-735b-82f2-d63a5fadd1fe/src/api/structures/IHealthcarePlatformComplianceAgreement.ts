import { tags } from "typia";

/**
 * Full compliance agreement record.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformComplianceAgreement = {
  /** Unique identifier for the compliance agreement. */
  id: string & tags.Format<"uuid">;

  /** Organization to which the agreement applies. */
  organization_id: string & tags.Format<"uuid">;

  /** User, patient, or staff who signed the agreement. */
  signer_id?: (string & tags.Format<"uuid">) | undefined;

  /** Which policy version is being agreed (references policy_versions). */
  policy_version_id: string & tags.Format<"uuid">;

  /**
   * Type of legal or policy agreement (e.g., HIPAA, terms_of_service,
   * research agreement).
   */
  agreement_type: string;

  /**
   * Current agreement status (e.g., 'signed', 'pending', 'withdrawn',
   * 'expired').
   */
  status: string;

  /** When the agreement was signed (nullable if not yet signed). */
  signed_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * How the agreement was captured (digital signature, checkbox, physical,
   * etc).
   */
  method?: string | undefined;

  /** When the agreement will expire if not perpetual (optional). */
  expires_at?: (string & tags.Format<"date-time">) | undefined;

  /** When this agreement record was created. */
  created_at: string & tags.Format<"date-time">;

  /** When this agreement record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp, if archived. */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IHealthcarePlatformComplianceAgreement {
  /**
   * Search/filter and pagination request for compliance agreements. Used for
   * finding agreements by policy, signer, status, etc.
   */
  export type IRequest = {
    /** Query string for search by signer identity or agreement type. */
    query?: string | undefined;

    /** Only agreements for this organization_id (UUID). */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /** Policy version for filtering. */
    policy_version_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by agreement type (e.g., 'HIPAA', 'terms_of_service'). */
    agreement_type?: string | undefined;

    /** Filter by agreement status (e.g., 'signed', 'pending', 'withdrawn'). */
    status?: string | undefined;

    /** Filter by user/staff/patient who signed. */
    signer_id?: (string & tags.Format<"uuid">) | undefined;

    /** Return only those agreements signed after this date. */
    signed_at_min?: (string & tags.Format<"date-time">) | undefined;

    /** Return only those agreements signed before this date. */
    signed_at_max?: (string & tags.Format<"date-time">) | undefined;

    /** For pagination, page number (zero-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | undefined;

    /** For pagination, page size. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Sort field. */
    sort_by?: string | undefined;

    /** Sort direction (asc/desc). */
    sort_dir?: "asc" | "desc" | undefined;
  };

  /** Payload for creating a compliance agreement. */
  export type ICreate = {
    /** ID of the organization bound to this agreement. */
    organization_id: string & tags.Format<"uuid">;

    /** User/subject who will sign (nullable for org-level agreements). */
    signer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Which policy version is being agreed to (references policy_versions
     * table).
     */
    policy_version_id: string & tags.Format<"uuid">;

    /** Type/category of agreement (e.g., 'HIPAA', 'terms_of_service'). */
    agreement_type: string;

    /**
     * Current agreement status (e.g., 'pending', 'signed', 'withdrawn',
     * etc).
     */
    status: string;

    /**
     * Timestamp when the agreement was signed (optional, often null until
     * signed).
     */
    signed_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * How the agreement was captured (e.g., digital signature, checkbox,
     * wet signature).
     */
    method?: string | undefined;

    /** When the agreement expires (optional, null for perpetual agreements). */
    expires_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /** Payload for updating a compliance agreement. */
  export type IUpdate = {
    /** Agreement status (e.g., 'pending', 'signed', 'withdrawn'). */
    status?: string | undefined;

    /** When the agreement was signed, or updated to reflect signature. */
    signed_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Updated/corrected signature method (digital, checkbox, wet
     * signature).
     */
    method?: string | undefined;

    /** Optional update to expiration date of this agreement. */
    expires_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary of a compliance agreement, indicating signer, organization
   * context, policy version, type, status, method, key timestamps, and audit
   * trail metadata. Used for compliance dashboard, agreement management, and
   * regulatory audit workflows.
   */
  export type ISummary = {
    /** Unique identifier for the compliance agreement record. */
    id: string & tags.Format<"uuid">;

    /** Reference to the organization under which this agreement is recorded. */
    organization_id: string & tags.Format<"uuid">;

    /**
     * UUID of the staff or patient who signed the agreement (nullable for
     * org-wide/automated signatures).
     */
    signer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Reference to the policy version for which this agreement is signed. */
    policy_version_id: string & tags.Format<"uuid">;

    /**
     * Type of compliance agreement (e.g., HIPAA, terms_of_service,
     * business_associate, data_sharing, consent, etc.).
     */
    agreement_type: string;

    /**
     * Agreement status (e.g., 'signed', 'pending', 'withdrawn', 'expired',
     * 'rejected').
     */
    status: string;

    /**
     * Timestamp when signature was recorded, nullable if agreement is still
     * pending or unsigned.
     */
    signed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * How the signature/agreement was recorded (e.g., digital_signature,
     * checkbox_acknowledge, wet_signature, etc.).
     */
    method?: string | null | undefined;

    /** Timestamp when this agreement expires, nullable if perpetual. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Creation timestamp (ISO 8601) for auditing/reporting. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when this record was last modified. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete marker for audit and retention compliance. If set,
     * indicates agreement is no longer active/visible in primary
     * workflows.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
