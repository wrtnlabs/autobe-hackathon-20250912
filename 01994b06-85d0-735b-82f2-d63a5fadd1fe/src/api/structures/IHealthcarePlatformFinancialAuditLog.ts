import { tags } from "typia";

/**
 * Comprehensive audit log record for financial, billing, and insurance events
 * for regulatory, SOC2, and HIPAA compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformFinancialAuditLog = {
  /** Unique identifier for the financial audit log record. */
  id: string & tags.Format<"uuid">;

  /** Organization context for audit log. */
  organization_id: string & tags.Format<"uuid">;

  /**
   * ID of the business entity affected (invoice/item/payment/claim/etc). May
   * be null for generic audit events.
   */
  entity_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * User performing or triggering the audited event. May be null for system
   * or automated event.
   */
  user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of business entity affected (e.g., invoice, payment, claim, item,
   * adjustment, policy, etc).
   */
  entity_type: string;

  /**
   * Nature of the audited action (e.g., create, update, delete, access,
   * payment_post, claim_submit, refund, adjustment, status_change,
   * compliance_export, etc).
   */
  audit_action: string;

  /**
   * Human-readable explanation and context for the audit log; may include
   * rationale, business context, before/after values as applicable.
   */
  action_description?: string | null | undefined;

  /**
   * Date/time when event occurred (may differ from created_at if backfilled
   * or imported for legacy audit log).
   */
  action_timestamp: string & tags.Format<"date-time">;

  /** Timestamp when audit log entry was created (system entry). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformFinancialAuditLog {
  /** Search/filter options for platform financial audit logs. */
  export type IRequest = {
    /** UUID filter for organization scope. */
    organization_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of audited business entity: 'invoice', 'payment', 'claim',
     * 'item', etc.
     */
    entity_type?: string | undefined;

    /** UUID of user involved in the audited event. */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Type of audit event: 'create', 'update', 'delete', 'access', etc. */
    audit_action?: string | undefined;

    /** Filter for audit events occurring after this ISO8601 timestamp. */
    action_timestamp_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for audit events occurring before this ISO8601 timestamp. */
    action_timestamp_to?: (string & tags.Format<"date-time">) | undefined;

    /** Result page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Results per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Audit log field to sort results by. */
    sort_by?: string | undefined;

    /** Ascending or descending sort. */
    sort_direction?: "asc" | "desc" | undefined;
  };
}
