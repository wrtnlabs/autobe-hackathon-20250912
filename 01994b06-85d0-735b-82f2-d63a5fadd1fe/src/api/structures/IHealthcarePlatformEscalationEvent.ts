import { tags } from "typia";

/**
 * Represents an escalation event record for compliance/incident management, as
 * in healthcare_platform_escalation_events. Tracks links to notifications,
 * roles, audit notes, and escalation handling metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IHealthcarePlatformEscalationEvent = {
  /**
   * Unique identifier for the escalation event (from
   * healthcare_platform_escalation_events table).
   */
  id: string & tags.Format<"uuid">;

  /** Which notification triggered escalation, if applicable. */
  source_notification_id?: (string & tags.Format<"uuid">) | undefined;

  /** User assigned to handle escalation, nullable. */
  target_user_id?: (string & tags.Format<"uuid">) | undefined;

  /** Targeted role for escalation, nullable. */
  target_role_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Describes why escalation occurred (e.g., sla_violation, breach,
   * compliance_required, business_policy).
   */
  escalation_type: string;

  /** Severity/priority (e.g., critical, urgent, normal, info). */
  escalation_level: string;

  /** Time by which escalation must be handled/acknowledged. */
  deadline_at: string & tags.Format<"date-time">;

  /** Current status (open, in_progress, resolved, expired, error). */
  resolution_status: string;

  /** When escalation was resolved (nullable). */
  resolution_time?: (string & tags.Format<"date-time">) | undefined;

  /** Disposition, root cause, or audit notes for how escalation resolved. */
  resolution_notes?: string | undefined;

  /** Timestamp for escalation record creation. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IHealthcarePlatformEscalationEvent {
  /**
   * Advanced search, filtering and pagination options for escalation event
   * query.
   *
   * - Used for compliance, audit, and operational monitoring of escalations.
   * - All fields are optional, and when provided, are used as window or filter.
   */
  export type IRequest = {
    /**
     * Filter by source notification id (uuid), i.e., which notification
     * caused or triggered the escalation event.
     */
    sourceNotificationId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by target user id assigned the escalation (uuid, optional). */
    targetUserId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by target role id assigned the escalation (uuid, optional). */
    targetRoleId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by escalation type (e.g., sla_violation, breach,
     * compliance_required, business_policy, system_alert, etc.), optional.
     */
    escalationType?: string | undefined;

    /**
     * Filter by severity or escalation level (normal, urgent, critical,
     * info, etc.), optional.
     */
    escalationLevel?: string | undefined;

    /**
     * Lower bound for escalation event deadline (ISO 8601 date-time,
     * optional).
     */
    deadlineFrom?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for escalation event deadline (ISO 8601 date-time,
     * optional).
     */
    deadlineTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter by escalation resolution status (open, in_progress, resolved,
     * expired, error, dismissed, etc.), optional.
     */
    status?: string | undefined;

    /** Start of escalation event creation window (optional, ISO 8601). */
    createdAtFrom?: (string & tags.Format<"date-time">) | undefined;

    /** End of escalation event creation window (optional, ISO 8601). */
    createdAtTo?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (optional, default=1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Page size for pagination (optional, default=50, max=200). */
    pageSize?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Result sort field (optional, e.g., deadline_at, created_at,
     * escalation_level).
     */
    sortField?: string | undefined;

    /** 'asc' or 'desc' for sort order (optional). */
    sortOrder?: "asc" | "desc" | undefined;
  };

  /**
   * Request body for creating a new escalation event. Maps to
   * healthcare_platform_escalation_events. Required: notification reference
   * and escalation reason, level, deadline, status. Optional: assignment to
   * user or role, resolution fields. Excludes system-generated fields (id,
   * created_at).
   */
  export type ICreate = {
    /**
     * Source notification that triggered escalation. References a
     * notification event record.
     */
    source_notification_id: string & tags.Format<"uuid">;

    /**
     * User assigned to handle escalation. Nullable for role-based
     * escalations.
     */
    target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * If escalated to a role (e.g., compliance, orgAdmin). Nullable for
     * user-based escalations.
     */
    target_role_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reason/type for escalation (e.g., sla_violation, breach,
     * compliance_required, ack_timeout, business_policy, system_alert).
     */
    escalation_type: string;

    /** Severity/priority (normal, urgent, critical, info). */
    escalation_level: string;

    /** Time by which action/acknowledgement is due (ISO 8601 date-time). */
    deadline_at: string & tags.Format<"date-time">;

    /**
     * Resolution status (open, in_progress, resolved, expired, error,
     * dismissed).
     */
    resolution_status: string;

    /**
     * Timestamp when escalation was resolved/closed (nullable if still
     * open).
     */
    resolution_time?: (string & tags.Format<"date-time">) | null | undefined;

    /** Human-entered disposition, root cause, or audit note (nullable). */
    resolution_notes?: string | null | undefined;
  };

  /**
   * Body for updating an escalation event (partial allowed). Only mutable
   * fields permitted: assignment, resolution data, notes, escalation_type,
   * escalation_level, and deadline.
   */
  export type IUpdate = {
    /** Update the user assigned to handle escalation. */
    target_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Update escalation assignment to a role (nullable). */
    target_role_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Update the escalation event type. */
    escalation_type?: string | undefined;

    /** Update the escalation priority/severity. */
    escalation_level?: string | undefined;

    /** Extend/change time for escalation to be resolved (ISO 8601). */
    deadline_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Update the status (e.g., in_progress, resolved, expired, error,
     * dismissed).
     */
    resolution_status?: string | undefined;

    /** Update timestamp of resolution (nullable). */
    resolution_time?: (string & tags.Format<"date-time">) | null | undefined;

    /** Update notes/summary for escalation event (nullable). */
    resolution_notes?: string | null | undefined;
  };

  /** Summary information for an escalation event for listing and dashboards. */
  export type ISummary = {
    /** Escalation event ID. */
    id: string & tags.Format<"uuid">;

    /** Type of escalation. */
    escalation_type: string;

    /** Level (e.g., critical, normal). */
    escalation_level: string;

    /** Pending/resolution deadline. */
    deadline_at: string & tags.Format<"date-time">;

    /** Current status of escalation event. */
    resolution_status: string;
  };
}
