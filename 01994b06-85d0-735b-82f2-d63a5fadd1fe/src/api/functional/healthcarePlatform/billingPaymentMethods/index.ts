import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingPaymentMethod } from "../../../structures/IHealthcarePlatformBillingPaymentMethod";
import { IPageIHealthcarePlatformBillingPaymentMethod } from "../../../structures/IPageIHealthcarePlatformBillingPaymentMethod";

/**
 * Search and retrieve a filtered, paginated list of payment methods
 * (healthcare_platform_billing_payment_methods table) available for billing in
 * the healthcare platform.
 *
 * This operation allows clients to search, filter, and retrieve available
 * payment methods used for billing operations in the healthcare platform.
 * Business scenarios include displaying payment method options on patient
 * portals, administrative UIs for configuring payment acceptance, and analyzing
 * supported providers for billing/invoice workflows.
 *
 * Full pagination is supported via request body parameters (page size, offset,
 * search query). Filtering by method type, provider, and status is available as
 * allowed by schema. The operation returns a list of summary representations of
 * payment methods, suitable for workflow selection or display in user
 * interfaces.
 *
 * Data returned is restricted based on access controlâ€”patients may only see
 * 'active' payment methods, while administrative users may see all, including
 * inactive or under configuration. The response is a paginated collection of
 * payment method summaries. Related endpoints include CRUD for payment methods
 * and payment processing operations. Error scenarios include invalid search
 * parameters or improper access scope.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for billing payment methods.
 * @path /healthcarePlatform/billingPaymentMethods
 * @accessor api.functional.healthcarePlatform.billingPaymentMethods.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for billing payment methods. */
    body: IHealthcarePlatformBillingPaymentMethod.IRequest;
  };
  export type Body = IHealthcarePlatformBillingPaymentMethod.IRequest;
  export type Response = IPageIHealthcarePlatformBillingPaymentMethod.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/billingPaymentMethods",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/billingPaymentMethods";
  export const random =
    (): IPageIHealthcarePlatformBillingPaymentMethod.ISummary =>
      typia.random<IPageIHealthcarePlatformBillingPaymentMethod.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
