import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformMedicalImage } from "../../../../../structures/IHealthcarePlatformMedicalImage";

/**
 * Retrieve a medical image's metadata and access link under a patient record
 * (healthcare_platform_medical_images table).
 *
 * Fetches the detailed metadata and access URI for a single medical image
 * related to the specified patient record. Medical images may include DICOM,
 * JPEG, or other clinical media files used for diagnosis and care
 * documentation. The response includes image type, upload history, metadata
 * (acquisition, modality), storage URI, and references to the uploading
 * technician and encounter. Audit trails are enforced for every read,
 * supporting regulatory investigation and privacy requirements.
 *
 * Access to medical images is governed by the user's role and may also require
 * patient consent verification. Retrieval is logged at the access layer, noting
 * requesting user, time, purpose, and governing organization/department
 * context. Images flagged as sensitive or under a privacy lock are only
 * delivered if policy is satisfied. This operation never delivers image
 * binaries directly, but instead provides a secure URI for authorized
 * viewing/download.
 *
 * If the specified medical image does not exist under the patient record, is
 * deleted, or access is denied by policy (e.g., consent revoked, under legal
 * hold), the system returns a policy-appropriate error (404 or 403) and logs
 * the attempt for compliance reporting.
 *
 * This operation is key for provider review, multidisciplinary care, external
 * consults, and patient portal access (subject to configuration and privacy).
 * It complements broader record operations (EHR, audit trail) as defined in
 * platform requirements.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the parent patient record
 *   (UUID).
 * @param props.medicalImageId Unique identifier of the target medical image
 *   (UUID).
 * @path /healthcarePlatform/patient/patientRecords/:patientRecordId/medicalImages/:medicalImageId
 * @accessor api.functional.healthcarePlatform.patient.patientRecords.medicalImages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent patient record (UUID). */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the target medical image (UUID). */
    medicalImageId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformMedicalImage;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/patient/patientRecords/:patientRecordId/medicalImages/:medicalImageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/patient/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/medicalImages/${encodeURIComponent(props.medicalImageId ?? "null")}`;
  export const random = (): IHealthcarePlatformMedicalImage =>
    typia.random<IHealthcarePlatformMedicalImage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("medicalImageId")(() => typia.assert(props.medicalImageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
