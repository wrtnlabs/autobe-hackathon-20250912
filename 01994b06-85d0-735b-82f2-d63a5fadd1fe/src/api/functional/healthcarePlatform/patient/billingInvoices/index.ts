import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingInvoice } from "../../../../structures/IHealthcarePlatformBillingInvoice";

/**
 * Retrieve a specific billing invoice by ID
 * (IHealthcarePlatformBillingInvoice).
 *
 * Retrieve a healthcare platform billing invoice using the unique invoice ID.
 *
 * This endpoint operates on the healthcare_platform_billing_invoices table and
 * returns details including patient, encounter, status, amounts, and
 * organization context, as defined in the Prisma schema. Permission checks
 * ensure that only authorized users (such as organization admins, billing
 * staff, or the invoiced patient) can access the full invoice details, honoring
 * data isolation and auditability requirements according to healthcare
 * compliance policy.
 *
 * Sensitive invoice information will only be provided to callers with valid
 * scopeâ€”it is not available to general public access. Audit logs are generated
 * for all access to this resource, in line with financial compliance
 * standards.
 *
 * If the invoice is deleted or the user lacks permission, an appropriate error
 * will be returned.
 *
 * @param props.connection
 * @param props.billingInvoiceId UUID of the target billing invoice to retrieve
 * @path /healthcarePlatform/patient/billingInvoices/:billingInvoiceId
 * @accessor api.functional.healthcarePlatform.patient.billingInvoices.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target billing invoice to retrieve */
    billingInvoiceId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingInvoice;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/patient/billingInvoices/:billingInvoiceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/patient/billingInvoices/${encodeURIComponent(props.billingInvoiceId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingInvoice =>
    typia.random<IHealthcarePlatformBillingInvoice>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingInvoiceId")(() =>
        typia.assert(props.billingInvoiceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
