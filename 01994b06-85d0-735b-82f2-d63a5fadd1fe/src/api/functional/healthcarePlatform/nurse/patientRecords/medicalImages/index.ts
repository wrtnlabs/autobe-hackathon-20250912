import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformMedicalImage } from "../../../../../structures/IHealthcarePlatformMedicalImage";

/**
 * Retrieve a medical image's metadata and access link under a patient record
 * (healthcare_platform_medical_images table).
 *
 * Fetches the detailed metadata and access URI for a single medical image
 * related to the specified patient record. Medical images may include DICOM,
 * JPEG, or other clinical media files used for diagnosis and care
 * documentation. The response includes image type, upload history, metadata
 * (acquisition, modality), storage URI, and references to the uploading
 * technician and encounter. Audit trails are enforced for every read,
 * supporting regulatory investigation and privacy requirements.
 *
 * Access to medical images is governed by the user's role and may also require
 * patient consent verification. Retrieval is logged at the access layer, noting
 * requesting user, time, purpose, and governing organization/department
 * context. Images flagged as sensitive or under a privacy lock are only
 * delivered if policy is satisfied. This operation never delivers image
 * binaries directly, but instead provides a secure URI for authorized
 * viewing/download.
 *
 * If the specified medical image does not exist under the patient record, is
 * deleted, or access is denied by policy (e.g., consent revoked, under legal
 * hold), the system returns a policy-appropriate error (404 or 403) and logs
 * the attempt for compliance reporting.
 *
 * This operation is key for provider review, multidisciplinary care, external
 * consults, and patient portal access (subject to configuration and privacy).
 * It complements broader record operations (EHR, audit trail) as defined in
 * platform requirements.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the parent patient record
 *   (UUID).
 * @param props.medicalImageId Unique identifier of the target medical image
 *   (UUID).
 * @path /healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages/:medicalImageId
 * @accessor api.functional.healthcarePlatform.nurse.patientRecords.medicalImages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent patient record (UUID). */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the target medical image (UUID). */
    medicalImageId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformMedicalImage;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages/:medicalImageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/nurse/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/medicalImages/${encodeURIComponent(props.medicalImageId ?? "null")}`;
  export const random = (): IHealthcarePlatformMedicalImage =>
    typia.random<IHealthcarePlatformMedicalImage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("medicalImageId")(() => typia.assert(props.medicalImageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata or classification for a medical image under a patient
 * (healthcare_platform_medical_images table).
 *
 * Allows authorized users (technicians or healthcare staff) to revise metadata
 * on an already uploaded medical image, such as correcting image type,
 * modality, or annotating clinical context. This does not replace the
 * underlying media file, but updates references, metadata fields, or EHR
 * linkage for improved traceability and analytics.
 *
 * Strict validation checks are run to guarantee the parent record and image
 * exist, the user has role-based access, and the record/image are not under a
 * legal hold or compliance lock. All updates are recorded in the audit trail,
 * including before/after states and user rationale if required.
 *
 * Edits to image metadata may be restricted if the corresponding patient record
 * or image is soft-deleted, under privacy restriction, or in compliance
 * investigation. Failed or unauthorized attempts return a clear error and are
 * logged for regulatory monitoring. This API is intended for technical or
 * clinical roles; patient self-service metadata updates are not supported
 * unless future requirements expand this capability.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the parent patient record
 *   (UUID).
 * @param props.medicalImageId Unique identifier for the target medical image
 *   (UUID).
 * @param props.body Fields to update for the medical image. Does not update the
 *   file/URI itself, only metadata/classification.
 * @path /healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages/:medicalImageId
 * @accessor api.functional.healthcarePlatform.nurse.patientRecords.medicalImages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent patient record (UUID). */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the target medical image (UUID). */
    medicalImageId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the medical image. Does not update the file/URI
     * itself, only metadata/classification.
     */
    body: IHealthcarePlatformMedicalImage.IUpdate;
  };
  export type Body = IHealthcarePlatformMedicalImage.IUpdate;
  export type Response = IHealthcarePlatformMedicalImage;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages/:medicalImageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/nurse/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/medicalImages/${encodeURIComponent(props.medicalImageId ?? "null")}`;
  export const random = (): IHealthcarePlatformMedicalImage =>
    typia.random<IHealthcarePlatformMedicalImage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("medicalImageId")(() => typia.assert(props.medicalImageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Upload a new medical image and associate it to the given patient record
 * (healthcare_platform_medical_images table).
 *
 * Creates a new medical image record under the specified patient record,
 * storing metadata (e.g., type, modality, acquisition details), a URI to the
 * uploaded image, and references to the uploading technician and parent EHR
 * encounter. Upon successful creation, the system triggers audit trail entries,
 * optionally notifies relevant care team members, and links the file to the
 * encounter for downstream clinical review.
 *
 * RBAC restricts this API to healthcare professionals (technician, nurse,
 * doctor) unless patient self-uploads are explicitly allowed by organizational
 * policy. Strict validation ensures the parent patient record exists and is
 * accessible by the uploading user, the uploaded file meets type/format
 * requirements (e.g., DICOM, JPEG), and the storage URI is secure and
 * tamper-proof. All uploads (including self-service) are logged, and
 * privacy/policy flags are applied as relevant.
 *
 * In case of validation or policy errors (invalid patient record, file format,
 * permissions, or attempts to upload to a locked/archived record), the system
 * rejects the request and provides actionable error details. Recovery or retry
 * logic is determined by platform business policy.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the parent patient record
 *   (UUID).
 * @param props.body Metadata and secure file URI for the uploaded medical
 *   image.
 * @path /healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages
 * @accessor api.functional.healthcarePlatform.nurse.patientRecords.medicalImages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the parent patient record (UUID). */
    patientRecordId: string & tags.Format<"uuid">;

    /** Metadata and secure file URI for the uploaded medical image. */
    body: IHealthcarePlatformMedicalImage.ICreate;
  };
  export type Body = IHealthcarePlatformMedicalImage.ICreate;
  export type Response = IHealthcarePlatformMedicalImage;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/nurse/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/medicalImages`;
  export const random = (): IHealthcarePlatformMedicalImage =>
    typia.random<IHealthcarePlatformMedicalImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
