import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformNotification } from "../../../../structures/IHealthcarePlatformNotification";
import { IPageIHealthcarePlatformNotification } from "../../../../structures/IPageIHealthcarePlatformNotification";

/**
 * Search and retrieve notifications with advanced filtering and pagination
 * (Notifications table).
 *
 * This API operation provides a comprehensive, advanced search endpoint for
 * retrieving notifications issued in the healthcarePlatform system. Leveraging
 * the Notifications table and utilizing all available filtering and sorting
 * options, the operation supports multi-tenant, role-aware searches by
 * notification type (e.g., appointment reminder, billing alert), delivery
 * channel (email, SMS, in-app), criticality, status, recipient, sender, and
 * more.
 *
 * All search criteria—including pagination, sorting parameters, criticality
 * flag, status codes, and date ranges—are encapsulated in the request body,
 * which is validated against the Notifications schema comments for correct use.
 * Output is paginated, providing summary data for each notification (IDs,
 * types, status, timestamps, subject, body preview, and metadata for display
 * purposes).
 *
 * Security policies are strictly enforced; the caller only receives
 * notifications for which they are authorized, according to organization, role,
 * and privacy configuration. Sensitive notification bodies are appropriately
 * redacted or omitted for unauthorized parties. The implementation makes use of
 * JSONB/Gin indexes and supports highly responsive search even in high-volume
 * environments.
 *
 * Related APIs: individual notification retrieval, notification creation, or
 * acknowledgement operations. Error handling covers invalid search criteria,
 * forbidden access, and pagination range errors.
 *
 * @param props.connection
 * @param props.body Notification search and filter criteria, including
 *   pagination and sort options.
 * @path /healthcarePlatform/nurse/notifications
 * @accessor api.functional.healthcarePlatform.nurse.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Notification search and filter criteria, including pagination and
     * sort options.
     */
    body: IHealthcarePlatformNotification.IRequest;
  };
  export type Body = IHealthcarePlatformNotification.IRequest;
  export type Response = IPageIHealthcarePlatformNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/nurse/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/nurse/notifications";
  export const random = (): IPageIHealthcarePlatformNotification.ISummary =>
    typia.random<IPageIHealthcarePlatformNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a specific notification (Notifications table).
 *
 * This API endpoint fetches the full record of a notification event by its
 * unique notificationId. Drawing on the Notifications schema, it returns
 * detailed data including notification type, channel, criticality, recipient,
 * sender, subject, full body, delivery attempts and status, time stamps, and
 * any escalation or acknowledgement data linked to the notification.
 *
 * Access is role-checked: only the intended recipient, sender, organization
 * administrators, or permitted compliance staff may view the notification. The
 * API will redact message content or deny access if the requester's role and
 * context do not match privacy and compliance policies. All access requests are
 * logged in the audit subsystem for full traceability.
 *
 * Handles error conditions such as invalid or missing notificationId,
 * unauthorized access, or already-deleted records. Related APIs enable listing
 * notifications, sending new notifications, or managing delivery status.
 *
 * @param props.connection
 * @param props.notificationId The unique identifier of the notification to
 *   retrieve.
 * @path /healthcarePlatform/nurse/notifications/:notificationId
 * @accessor api.functional.healthcarePlatform.nurse.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the notification to retrieve. */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformNotification;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/nurse/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/nurse/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IHealthcarePlatformNotification =>
    typia.random<IHealthcarePlatformNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
