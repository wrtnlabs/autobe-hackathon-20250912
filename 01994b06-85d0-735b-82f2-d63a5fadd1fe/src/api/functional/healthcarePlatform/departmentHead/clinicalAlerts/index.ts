import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformClinicalAlert } from "../../../../structures/IHealthcarePlatformClinicalAlert";
import { IPageIHealthcarePlatformClinicalAlert } from "../../../../structures/IPageIHealthcarePlatformClinicalAlert";

/**
 * Search and paginate clinical alerts generated by the CDS engine in the
 * healthcare_platform_clinical_alerts table.
 *
 * Search and retrieve a paginated list of clinical alert records that have been
 * generated by the healthcare platform's decision support engine. This endpoint
 * accesses the healthcare_platform_clinical_alerts table and provides advanced
 * query capabilities for filtering by alert status (new, viewed, acknowledged,
 * resolved), organization, department, CDS rule ID, user assignment, date/time
 * ranges, and alert type (warning, info, critical, recommendation).
 *
 * The operation supports business logic for role-based visibility, with system
 * admins able to search all alerts, organization admins limited to their
 * organization, and department heads or assigned users able to see alerts
 * scoped to their departments or individuals. The response includes alert
 * details, status, subjects, timestamps, and escalation status. Pagination and
 * sorting options allow efficient access to high-volume alert data.
 * Comprehensive audit trails exist for alert access and search to support HIPAA
 * compliance and incident investigations.
 *
 * Validation ensures the requester has necessary permissions, criteria are
 * well-typed, and search results are filtered per data isolation rules. Error
 * handling covers malformed queries, excessive result sets, and authorization
 * failures.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for querying clinical
 *   alerts including filter criteria by status, organization, department, CDS
 *   rule, type, user, and date/time ranges.
 * @path /healthcarePlatform/departmentHead/clinicalAlerts
 * @accessor api.functional.healthcarePlatform.departmentHead.clinicalAlerts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for querying clinical alerts
     * including filter criteria by status, organization, department, CDS
     * rule, type, user, and date/time ranges.
     */
    body: IHealthcarePlatformClinicalAlert.IRequest;
  };
  export type Body = IHealthcarePlatformClinicalAlert.IRequest;
  export type Response = IPageIHealthcarePlatformClinicalAlert;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/departmentHead/clinicalAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/departmentHead/clinicalAlerts";
  export const random = (): IPageIHealthcarePlatformClinicalAlert =>
    typia.random<IPageIHealthcarePlatformClinicalAlert>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a clinical alert by alertId from the
 * healthcare_platform_clinical_alerts table.
 *
 * Get detailed information about a specific clinical alert record by its unique
 * alertId. The endpoint provides full data from the
 * healthcare_platform_clinical_alerts table, including summary, detail, status,
 * triggering rule, organization, department, assigned/responsible users,
 * acknowledgment and resolution timestamps, escalation status, and
 * audit-relevant metadata.
 *
 * Permissions are strictly enforced: system admins can retrieve any alert,
 * organization admins are limited to their own org, and department heads or
 * assigned users only see alerts within their department or relevant assignment
 * context. Access to this endpoint is audited for compliance (e.g., HIPAA, SOC
 * 2). The operation validates the alertId, confirms requester authorization,
 * and returns detailed status or error messages for not found or unauthorized
 * access cases. Related business logic for incident post-mortem, compliance,
 * and workflow tracking is supported by this operation.
 *
 * If the alert has been resolved or escalated, additional status and action
 * context is returned to assist investigation and compliance review. Errors are
 * appropriately messaged and logged for audit purposes.
 *
 * @param props.connection
 * @param props.alertId Unique identifier (UUID) of the clinical alert record to
 *   retrieve.
 * @path /healthcarePlatform/departmentHead/clinicalAlerts/:alertId
 * @accessor api.functional.healthcarePlatform.departmentHead.clinicalAlerts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the clinical alert record to retrieve. */
    alertId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformClinicalAlert;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/departmentHead/clinicalAlerts/:alertId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/clinicalAlerts/${encodeURIComponent(props.alertId ?? "null")}`;
  export const random = (): IHealthcarePlatformClinicalAlert =>
    typia.random<IHealthcarePlatformClinicalAlert>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("alertId")(() => typia.assert(props.alertId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the status or detail of a clinical alert by alertId in the
 * healthcare_platform_clinical_alerts table.
 *
 * Update a clinical alert's workflow status, detail text, or
 * escalation/acknowledgement info by alertId. This endpoint applies to records
 * in the healthcare_platform_clinical_alerts table. Only authorized staff
 * (system admin, organization admin, or department head) may update these
 * fields, and field-level validation is enforced. Fields that may be updated
 * include status (to values such as 'acknowledged', 'resolved', 'escalated'),
 * detail/comments, and timestamps for acknowledgment or resolution.
 *
 * Upon status update, the system records a compliance audit event and may
 * trigger further workflow changes, such as escalation to a responsible party
 * or closing an alert. Immutable fields like alert creation timestamp or
 * originating rule are not editable. The operation validates the alertId,
 * request body properties, and user permissions, and provides clear messaging
 * on error or invalid update attempts. Downstream systems consuming alert state
 * (e.g., dashboards) are expected to refresh based on status change.
 *
 * All update attempts (successful or not) are logged for full auditability and
 * compliance reporting.
 *
 * @param props.connection
 * @param props.alertId Unique identifier (UUID) of the clinical alert to
 *   update.
 * @param props.body Fields for updating clinical alert status or detail
 *   (status, acknowledgment, resolution, or comments).
 * @path /healthcarePlatform/departmentHead/clinicalAlerts/:alertId
 * @accessor api.functional.healthcarePlatform.departmentHead.clinicalAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the clinical alert to update. */
    alertId: string & tags.Format<"uuid">;

    /**
     * Fields for updating clinical alert status or detail (status,
     * acknowledgment, resolution, or comments).
     */
    body: IHealthcarePlatformClinicalAlert.IUpdate;
  };
  export type Body = IHealthcarePlatformClinicalAlert.IUpdate;
  export type Response = IHealthcarePlatformClinicalAlert;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/departmentHead/clinicalAlerts/:alertId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/clinicalAlerts/${encodeURIComponent(props.alertId ?? "null")}`;
  export const random = (): IHealthcarePlatformClinicalAlert =>
    typia.random<IHealthcarePlatformClinicalAlert>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("alertId")(() => typia.assert(props.alertId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
