import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingInvoice } from "../../../../structures/IHealthcarePlatformBillingInvoice";
import { IPageIHealthcarePlatformBillingInvoice } from "../../../../structures/IPageIHealthcarePlatformBillingInvoice";
export * as billingItems from "./billingItems/index";

/**
 * Search and paginate billing invoices (BillingInvoices table) by business
 * filters for finance/admin roles.
 *
 * Search and retrieve billing invoice records in a paginated, filterable
 * manner. Only users with systemAdmin, organizationAdmin, or departmentHead
 * roles can access invoice listings in their organization context.
 *
 * Query criteria can include invoice status, patient, due date range,
 * organization, and more as defined in the request schema. Pagination ensures
 * scalable access for large financial datasets. Invoice summary info is
 * returned for display in dashboards or list views, with links to detailed
 * records for drill-down.
 *
 * Security enforces strict access isolation by organization; invoices cannot be
 * retrieved across tenant boundaries. Sensitive financial data is only included
 * with appropriate roles and audit logs are maintained for all accesses.
 *
 * @param props.connection
 * @param props.body Advanced search parameters and pagination for billing
 *   invoice retrieval.
 * @path /healthcarePlatform/departmentHead/billingInvoices
 * @accessor api.functional.healthcarePlatform.departmentHead.billingInvoices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search parameters and pagination for billing invoice
     * retrieval.
     */
    body: IHealthcarePlatformBillingInvoice.IRequest;
  };
  export type Body = IHealthcarePlatformBillingInvoice.IRequest;
  export type Response = IPageIHealthcarePlatformBillingInvoice.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/departmentHead/billingInvoices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/departmentHead/billingInvoices";
  export const random = (): IPageIHealthcarePlatformBillingInvoice.ISummary =>
    typia.random<IPageIHealthcarePlatformBillingInvoice.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
