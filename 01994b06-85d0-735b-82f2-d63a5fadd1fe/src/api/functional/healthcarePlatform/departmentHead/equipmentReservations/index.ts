import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformEquipmentReservation } from "../../../../structures/IHealthcarePlatformEquipmentReservation";
import { IPageIHealthcarePlatformEquipmentReservation } from "../../../../structures/IPageIHealthcarePlatformEquipmentReservation";

/**
 * Create a new equipment reservation for operational or clinical scheduling
 * (healthcare_platform_equipment_reservations table).
 *
 * Allows authorized organizational users to create a new reservation for a
 * piece of equipment, specifying the organization, equipment resource, time
 * slot, reservation type, and related context. It supports department and
 * org-specific scheduling flows and enforces audit compliance, including
 * timestamps, business rationale, and linkage to appointments where relevant.
 *
 * Authorization logic ensures only permitted users (systemAdmin,
 * organizationAdmin, departmentHead) can create reservations in their
 * respective scopes. All entries are checked against existing reservations for
 * conflicts and must obey maintenance or blackout logic as configured in the
 * organization's settings.
 *
 * Validation occurs for time windows, required fields, resource existence, and
 * business rules such as no duplicate reservations for the same equipment and
 * slot.
 *
 * @param props.connection
 * @param props.body Equipment reservation creation details, including resource,
 *   scheduling, and organizational assignment.
 * @path /healthcarePlatform/departmentHead/equipmentReservations
 * @accessor api.functional.healthcarePlatform.departmentHead.equipmentReservations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Equipment reservation creation details, including resource,
     * scheduling, and organizational assignment.
     */
    body: IHealthcarePlatformEquipmentReservation.ICreate;
  };
  export type Body = IHealthcarePlatformEquipmentReservation.ICreate;
  export type Response = IHealthcarePlatformEquipmentReservation;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/departmentHead/equipmentReservations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/departmentHead/equipmentReservations";
  export const random = (): IHealthcarePlatformEquipmentReservation =>
    typia.random<IHealthcarePlatformEquipmentReservation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of equipment reservations
 * (healthcare_platform_equipment_reservations table).
 *
 * Retrieve a filtered and paginated list of equipment reservations within the
 * healthcare platform. This supports key operational activities including
 * scheduling, maintenance, and resource allocation for procedures or
 * appointments.
 *
 * Security and access are governed by role-based permissions (e.g.,
 * systemAdmin, organizationAdmin, departmentHead), ensuring that only
 * authorized staff may view or manage reservations relevant to their
 * organizational context. Users may search by resource type, time slot,
 * resource assignment, reservation reason/type, and status.
 *
 * This operation is based on the healthcare_platform_equipment_reservations
 * table, offering all fields necessary for compliance/audit reporting and
 * workflow optimization. The response provides detailed reservation data,
 * including any linked room, appointment, or blackout period, and includes
 * pagination for scalable access.
 *
 * Related APIs include creation (POST), update (PUT), and detail retrieval
 * (GET) for single reservations. Error handling will include validation for
 * search parameters, role visibility limitations, and anti-pattern detection
 * for overlapping/conflicting reservations.
 *
 * @param props.connection
 * @param props.body Advanced search and pagination criteria for querying
 *   equipment reservations.
 * @path /healthcarePlatform/departmentHead/equipmentReservations
 * @accessor api.functional.healthcarePlatform.departmentHead.equipmentReservations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search and pagination criteria for querying equipment
     * reservations.
     */
    body: IHealthcarePlatformEquipmentReservation.IRequest;
  };
  export type Body = IHealthcarePlatformEquipmentReservation.IRequest;
  export type Response = IPageIHealthcarePlatformEquipmentReservation;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/departmentHead/equipmentReservations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/departmentHead/equipmentReservations";
  export const random = (): IPageIHealthcarePlatformEquipmentReservation =>
    typia.random<IPageIHealthcarePlatformEquipmentReservation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single equipment reservation's details by its unique identifier
 * (healthcare_platform_equipment_reservations table).
 *
 * Obtain the full detail of a specific equipment reservation using its unique
 * identifier. Used for schedule review, operational management, and compliance
 * auditing. Access is appropriately restricted to users in roles such as
 * systemAdmin, organizationAdmin, or departmentHead for the relevant
 * organization or department.
 *
 * All fields are returned as specified in the
 * healthcare_platform_equipment_reservations schema, including reservation
 * type, status, associated appointment, resource linkage, and timestamps.
 * Authorization is enforced at the organization/unit level according to user
 * assignments.
 *
 * Validation ensures the reservationId exists and the user has permission to
 * read it. Errors are returned for missing, deleted, or inaccessible
 * reservations.
 *
 * @param props.connection
 * @param props.equipmentReservationId Unique identifier of the equipment
 *   reservation record to retrieve.
 * @path /healthcarePlatform/departmentHead/equipmentReservations/:equipmentReservationId
 * @accessor api.functional.healthcarePlatform.departmentHead.equipmentReservations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the equipment reservation record to retrieve. */
    equipmentReservationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformEquipmentReservation;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/departmentHead/equipmentReservations/:equipmentReservationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/equipmentReservations/${encodeURIComponent(props.equipmentReservationId ?? "null")}`;
  export const random = (): IHealthcarePlatformEquipmentReservation =>
    typia.random<IHealthcarePlatformEquipmentReservation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("equipmentReservationId")(() =>
        typia.assert(props.equipmentReservationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing equipment reservation record
 * (healthcare_platform_equipment_reservations table) by identifier.
 *
 * Allows authorized users (systemAdmin, organizationAdmin, departmentHead in
 * relevant org/unit) to update the details of an equipment reservation in the
 * system. Fields such as reservation window, resource identifiers, status, and
 * reason/type may be modified, and audit trails are maintained for all
 * changes.
 *
 * Validation ensures the target record exists, is active, and is modifiable by
 * the user (i.e., not archived or soft-deleted), and checks for updated
 * scheduling conflicts and compliance with organizational rules.
 *
 * Related operations include creation (POST), single record retrieval (GET),
 * and list search (PATCH) for reservations. Error conditions such as invalid
 * UUID, unauthorized edits, or scheduling conflicts are surfaced as API
 * validation errors.
 *
 * @param props.connection
 * @param props.equipmentReservationId Unique identifier of the equipment
 *   reservation to update.
 * @param props.body Updated fields and values for the equipment reservation.
 * @path /healthcarePlatform/departmentHead/equipmentReservations/:equipmentReservationId
 * @accessor api.functional.healthcarePlatform.departmentHead.equipmentReservations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the equipment reservation to update. */
    equipmentReservationId: string & tags.Format<"uuid">;

    /** Updated fields and values for the equipment reservation. */
    body: IHealthcarePlatformEquipmentReservation.IUpdate;
  };
  export type Body = IHealthcarePlatformEquipmentReservation.IUpdate;
  export type Response = IHealthcarePlatformEquipmentReservation;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/departmentHead/equipmentReservations/:equipmentReservationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/equipmentReservations/${encodeURIComponent(props.equipmentReservationId ?? "null")}`;
  export const random = (): IHealthcarePlatformEquipmentReservation =>
    typia.random<IHealthcarePlatformEquipmentReservation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("equipmentReservationId")(() =>
        typia.assert(props.equipmentReservationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
