import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAnalyticsDashboard } from "../../../../structures/IHealthcarePlatformAnalyticsDashboard";
export * as preferences from "./preferences/index";

/**
 * Update an existing analytics dashboard's configuration or content
 * (healthcare_platform_analytics_dashboards table).
 *
 * This operation enables authorized users to update the configuration,
 * contents, or metadata of a specific analytics dashboard already created in
 * the system. The target dashboard is referenced by its unique dashboardId,
 * which must exist in the healthcare_platform_analytics_dashboards table. Users
 * can update fields such as dashboard title, description, department
 * association, visibility (public/private), and the JSON widget/layout
 * configuration. Role-based access ensures only the dashboard owner or
 * permitted admins can perform updates.
 *
 * All update attempts are subject to validation for field correctness,
 * concurrency control (optimistic locking as required), and audit logging for
 * traceability. Any immutable, system-controlled, or deleted dashboards are
 * excluded from modification. Error scenarios include invalid dashboard ID,
 * update attempts on non-owned or role-ineligible dashboards, and business
 * validation failures for field values or configuration content.
 *
 * All dashboard update actions are logged for complete compliance traceability
 * and review by audit or organization admin roles.
 *
 * @param props.connection
 * @param props.dashboardId Unique identifier of the dashboard being updated.
 * @param props.body Updated properties for the target analytics dashboard.
 * @path /healthcarePlatform/departmentHead/analyticsDashboards/:dashboardId
 * @accessor api.functional.healthcarePlatform.departmentHead.analyticsDashboards.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the dashboard being updated. */
    dashboardId: string & tags.Format<"uuid">;

    /** Updated properties for the target analytics dashboard. */
    body: IHealthcarePlatformAnalyticsDashboard.IUpdate;
  };
  export type Body = IHealthcarePlatformAnalyticsDashboard.IUpdate;
  export type Response = IHealthcarePlatformAnalyticsDashboard;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/departmentHead/analyticsDashboards/:dashboardId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/departmentHead/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}`;
  export const random = (): IHealthcarePlatformAnalyticsDashboard =>
    typia.random<IHealthcarePlatformAnalyticsDashboard>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an analytics dashboard (soft delete via deleted_at;
 * healthcare_platform_analytics_dashboards table).
 *
 * When called, this operation soft-deletes an analytics dashboard identified by
 * dashboardId from the healthcare_platform_analytics_dashboards table,
 * rendering it inaccessible in normal workflows but retaining the record for
 * audit, compliance, and possible future restoration. Only users with
 * sufficient privileges (dashboard owner, organization admin, or department
 * head) can delete dashboards.
 *
 * Deletion requests are validated for dashboard existence, user authorization,
 * and that the dashboard is not already deleted or system-locked. The
 * deleted_at field is set to the current timestamp. Attempts to delete
 * non-existent or unowned dashboards result in error responses. This operation
 * is strictly tracked in system audit logs for regulatory and accountability
 * requirements.
 *
 * Dashboards flagged as deleted may be retained per organization policy for a
 * defined retention window. Recovery or permanent deletion processes are
 * managed separately.
 *
 * @param props.connection
 * @param props.dashboardId Unique identifier of the dashboard to be
 *   soft-deleted.
 * @path /healthcarePlatform/departmentHead/analyticsDashboards/:dashboardId
 * @accessor api.functional.healthcarePlatform.departmentHead.analyticsDashboards.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the dashboard to be soft-deleted. */
    dashboardId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/departmentHead/analyticsDashboards/:dashboardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/departmentHead/analyticsDashboards/${encodeURIComponent(props.dashboardId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dashboardId")(() => typia.assert(props.dashboardId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
