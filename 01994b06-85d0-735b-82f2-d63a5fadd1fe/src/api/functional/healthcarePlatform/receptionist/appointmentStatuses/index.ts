import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAppointmentStatus } from "../../../../structures/IHealthcarePlatformAppointmentStatus";
import { IPageIHealthcarePlatformAppointmentStatus } from "../../../../structures/IPageIHealthcarePlatformAppointmentStatus";

/**
 * List and search all appointment statuses in the scheduling module.
 *
 * This API operation allows users with scheduling management privileges to
 * search and retrieve appointment status definitions across the platform.
 * Appointment statuses define the possible states of appointments (e.g.,
 * scheduled, confirmed, canceled, no-show) and are critical for scheduling
 * workflows, UI flow, and business rules enforcement.
 *
 * This operation queries the healthcare_platform_appointment_statuses table,
 * returning paginated and optionally filtered results. Supported filters may
 * include business_status, display_name, or custom sort_order. The operation
 * returns both core codes and user-facing display names.
 *
 * Security: Typically, this endpoint is available to authenticated users (e.g.,
 * receptionists, clinical operations staff) to power UI components, dashboard
 * analytics, or business settings screens. No sensitive data is exposed—content
 * is non-PHI but critical for workflow logic.
 *
 * Validation: If filters or sorting parameters are invalid, a validation error
 * is generated. Pagination ensures efficient retrieval even with large status
 * dictionaries. Related endpoints include status creation, update, or detail
 * retrieval per appointment status.
 *
 * @param props.connection
 * @param props.body Searching, filtering, or sorting criteria for appointment
 *   statuses (e.g., by status_code, display_name, or order).
 * @path /healthcarePlatform/receptionist/appointmentStatuses
 * @accessor api.functional.healthcarePlatform.receptionist.appointmentStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Searching, filtering, or sorting criteria for appointment statuses
     * (e.g., by status_code, display_name, or order).
     */
    body: IHealthcarePlatformAppointmentStatus.IRequest;
  };
  export type Body = IHealthcarePlatformAppointmentStatus.IRequest;
  export type Response = IPageIHealthcarePlatformAppointmentStatus.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/receptionist/appointmentStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/receptionist/appointmentStatuses";
  export const random =
    (): IPageIHealthcarePlatformAppointmentStatus.ISummary =>
      typia.random<IPageIHealthcarePlatformAppointmentStatus.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details for a single appointment status identified by statusId.
 *
 * This API operation is used to fetch the detailed definition of a specific
 * appointment status. It returns information such as the workflow code, display
 * label, business grouping (active, closed), and UI sorting order for the
 * status requested by statusId.
 *
 * Access to this operation is typically required by scheduling staff, system
 * administrators, or integration clients needing to understand or validate
 * appointment state flows. The associated table
 * (healthcare_platform_appointment_statuses) acts as the canonical registry for
 * system-wide and organizational status options.
 *
 * Security: There is minimal sensitivity—the data is non-PHI and may be
 * accessible to authenticated reception, admin, and scheduling roles. The
 * operation supports business/operational UI and workflow configuration, and is
 * essential for custom rule-building or display logic in downstream
 * applications.
 *
 * Validation: If statusId does not exist, an error is returned. This endpoint
 * is read-only; updates and creation are managed via separate endpoints.
 *
 * @param props.connection
 * @param props.statusId Unique identifier for the target appointment status to
 *   retrieve.
 * @path /healthcarePlatform/receptionist/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.receptionist.appointmentStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target appointment status to retrieve. */
    statusId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAppointmentStatus;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/receptionist/appointmentStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/receptionist/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentStatus =>
    typia.random<IHealthcarePlatformAppointmentStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
