import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformMedicalImage } from "../../../../../structures/IHealthcarePlatformMedicalImage";
import { IPageIHealthcarePlatformMedicalImage } from "../../../../../structures/IPageIHealthcarePlatformMedicalImage";

/**
 * Search and retrieve a paginated, filtered list of medical image metadata for
 * a patient's record (healthcare_platform_medical_images table).
 *
 * The endpoint provides paginated, filterable search over all medical image
 * records linked to a patient record, as stored in the
 * healthcare_platform_medical_images table. It supports advanced filtering,
 * full-text search, and sorting by attributes such as upload timestamp, image
 * type, or uploadedBy.
 *
 * Request parameters are supplied in the request body via the
 * IHealthcarePlatformMedicalImage.IRequest DTO. Users with clinical, admin, or
 * audit roles can retrieve imaging metadata but must have appropriate
 * organizational or departmental authorizationâ€”accesses should be fully logged
 * for compliance.
 *
 * Response uses IPageIHealthcarePlatformMedicalImage, returning matching image
 * metadata per search criteria. Images themselves are not returned by this
 * endpoint; use resource-specific download endpoints if implemented. The
 * operation is typically used in clinical review, radiology workflows, or
 * regulatory investigation of imaging compliance and data lifecycle.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record whose
 *   medical images are being queried (UUID).
 * @param props.body Search and pagination criteria for filtering patient-linked
 *   medical images.
 * @path /healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/medicalImages
 * @accessor api.functional.healthcarePlatform.systemAdmin.patientRecords.medicalImages.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the patient record whose medical images are
     * being queried (UUID).
     */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * Search and pagination criteria for filtering patient-linked medical
     * images.
     */
    body: IHealthcarePlatformMedicalImage.IRequest;
  };
  export type Body = IHealthcarePlatformMedicalImage.IRequest;
  export type Response = IPageIHealthcarePlatformMedicalImage;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/medicalImages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/medicalImages`;
  export const random = (): IPageIHealthcarePlatformMedicalImage =>
    typia.random<IPageIHealthcarePlatformMedicalImage>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
