import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRecordAmendment } from "../../../../../structures/IHealthcarePlatformRecordAmendment";
import { IPageIHealthcarePlatformRecordAmendment } from "../../../../../structures/IPageIHealthcarePlatformRecordAmendment";

/**
 * Retrieve a paginated index of record amendments for a specific patient
 * record.
 *
 * Retrieve a filtered and paginated index of record amendments for a given
 * patient record. This endpoint allows compliance staff, department heads, and
 * clinical roles to audit the lifecycle of all changes, corrections, or
 * regulatory amendments to the patient's medical record.
 *
 * Security considerations require that users have appropriate RBAC permission
 * to view amendment history for the patient. Access is restricted by role and
 * organizational boundaries. All results are filtered to the requesting user's
 * access rights.
 *
 * The response structure includes paginated amendment data with amendment
 * metadata (type, status, submitter, rationale, old/new values) and can be
 * expanded by role permissions. Amendments under review, pending approval, or
 * rejected will contain their current status for workflow handling. Error
 * handling distinguishes between not found, not authorized, or query constraint
 * violations. If the patient record or amendments are soft deleted, only
 * appropriate admins will see historic data where compliant.
 *
 * This operation aligns with business rules requiring longitudinal traceability
 * and versioned record keeping for all PHI amendments, supporting regulatory
 * audits and clinical workflows.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record to query
 *   amendments for
 * @param props.body Search, filtering, and pagination criteria for record
 *   amendments linked to the patient record
 * @path /healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments
 * @accessor api.functional.healthcarePlatform.systemAdmin.patientRecords.recordAmendments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the patient record to query amendments for */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * Search, filtering, and pagination criteria for record amendments
     * linked to the patient record
     */
    body: IHealthcarePlatformRecordAmendment.IRequest;
  };
  export type Body = IHealthcarePlatformRecordAmendment.IRequest;
  export type Response = IPageIHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments`;
  export const random = (): IPageIHealthcarePlatformRecordAmendment =>
    typia.random<IPageIHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details of a specific record amendment on a patient record.
 *
 * Retrieve full details of a specific record amendment for a patient record.
 * This operation provides clinical, audit, and workflow information required
 * for individual review and regulatory traceability. It exposes amendment
 * metadata (type, rationale, submitter, reviewer, old and new value snapshots,
 * approval status, timestamps, and related encounter), to authorized requesters
 * based on RBAC as configured for audit trail visibility.
 *
 * Access is limited by role, organization, and department scope to ensure
 * privacy and compliance, with error responses if the amendment is not found,
 * the record ID does not match the amendment's patient association, or if the
 * user's permissions are insufficient. If the amendment is in a pending or
 * restricted status, additional review markers will be shown depending on
 * reviewer role.
 *
 * This operation directly supports business rules for amendment audit trail and
 * workflow compliance, empowering end-to-end regulatory review, and is
 * referenced in record update and compliance review flows.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the patient record
 * @param props.recordAmendmentId Unique identifier for the specific record
 *   amendment to retrieve
 * @path /healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.patientRecords.recordAmendments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific record amendment to retrieve */
    recordAmendmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments/${encodeURIComponent(props.recordAmendmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformRecordAmendment =>
    typia.random<IHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("recordAmendmentId")(() =>
        typia.assert(props.recordAmendmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing record amendment entry for a patient record.
 *
 * Update an existing record amendment for a patient record. Used by reviewers
 * (department heads, compliance staff) to approve, reject, or modify rationale,
 * value, or workflow status of a record amendment. Also supports modification
 * of amendment content where business rules allow, e.g., correction of fields,
 * rationale updates, or reviewer assignment.
 *
 * Authorization is strictly enforced by user role and organizational/dept
 * assignment; only permitted roles may update amendment status or edit content
 * after initial creation. Approval workflows are triggered if the amendment
 * requires further review or additional compliance sign-off. Attempts to update
 * amendments for soft-deleted patient records will be checked for regulatory
 * compliance.
 *
 * Responses confirm updated entity details, workflow status, and audit
 * information. Business rules will prevent modification if amendment is
 * finalized, if the requester is not authorized, or if the update violates
 * compliance logic. Error handling clearly distinguishes between authorization,
 * business rule, and not found errors.
 *
 * @param props.connection
 * @param props.patientRecordId Identifier of the linked patient record
 * @param props.recordAmendmentId Unique identifier of the amendment entry to
 *   update
 * @param props.body Updated amendment data, including rationale, new/old value,
 *   approval, or reviewer info, as permitted by business rules
 * @path /healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.patientRecords.recordAmendments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the linked patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the amendment entry to update */
    recordAmendmentId: string & tags.Format<"uuid">;

    /**
     * Updated amendment data, including rationale, new/old value, approval,
     * or reviewer info, as permitted by business rules
     */
    body: IHealthcarePlatformRecordAmendment.IUpdate;
  };
  export type Body = IHealthcarePlatformRecordAmendment.IUpdate;
  export type Response = IHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments/${encodeURIComponent(props.recordAmendmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformRecordAmendment =>
    typia.random<IHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("recordAmendmentId")(() =>
        typia.assert(props.recordAmendmentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific record amendment from a patient's medical
 * record (healthcare_platform_record_amendments table).
 *
 * This endpoint provides deletion capability for amendment records tied to an
 * immutable patient clinical record. It requires both patientRecordId and
 * recordAmendmentId as path parameters. Only users with sufficient admin or
 * compliance privileges are allowed to perform this action, as removing
 * amendment history impacts longitudinal audit trails and regulatory
 * compliance.
 *
 * The operation accesses the healthcare_platform_record_amendments table,
 * ensuring referential integrity to the associated patient and encounter. All
 * attempts and results of this operation should be logged in compliance with
 * legal retention policies. An attempt to delete a non-existent or previously
 * deleted recordAmendmentId returns a not-found error.
 *
 * If a business or legal hold exists on the parent patient record, or the
 * amendment is required for ongoing audit, the provider implementation must
 * reject the erase and return a clear error to the client. This endpoint is
 * critical for rare, justified removal scenarios such as administrative error
 * and should integrate with broader audit logging workflows.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record
 *   associated with the amendment (UUID).
 * @param props.recordAmendmentId Unique identifier of the amendment to be
 *   deleted (UUID).
 * @path /healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId
 * @accessor api.functional.healthcarePlatform.systemAdmin.patientRecords.recordAmendments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the patient record associated with the amendment
     * (UUID).
     */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier of the amendment to be deleted (UUID). */
    recordAmendmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments/${encodeURIComponent(props.recordAmendmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("recordAmendmentId")(() =>
        typia.assert(props.recordAmendmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
