import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAppointmentStatus } from "../../../../structures/IHealthcarePlatformAppointmentStatus";

/**
 * Update an appointment status in healthcare_platform_appointment_statuses
 * table.
 *
 * This operation enables a system administrator or organization administrator
 * to update an appointment status, such as its human-readable label, workflow
 * grouping, or sort priority. It is strictly permissioned and requires that
 * 'statusId' is a valid UUID and the status must exist.
 *
 * If the appointment status is system-reserved, attempts to modify critical
 * codes are subject to further restriction. The operation will reject
 * modifications to non-existent, deleted, or non-schema fields. This is
 * essential for managing visible and operational status codes in complex
 * organizational workflows. Related endpoints include single status retrieval
 * (GET), deletion (DELETE), and status code search (PATCH or GET).
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the appointment status to update
 * @param props.body Updated fields for appointment status, including display
 *   name, business status, or sort order.
 * @path /healthcarePlatform/systemAdmin/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.systemAdmin.appointmentStatuses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the appointment status to update */
    statusId: string & tags.Format<"uuid">;

    /**
     * Updated fields for appointment status, including display name,
     * business status, or sort order.
     */
    body: IHealthcarePlatformAppointmentStatus.IUpdate;
  };
  export type Body = IHealthcarePlatformAppointmentStatus.IUpdate;
  export type Response = IHealthcarePlatformAppointmentStatus;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/appointmentStatuses/:statusId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentStatus =>
    typia.random<IHealthcarePlatformAppointmentStatus>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an appointment status (hard delete) from
 * healthcare_platform_appointment_statuses table.
 *
 * This operation permanently removes an appointment status from the platform,
 * restricted to system administrators and organization administrators. The
 * statusId parameter must be a valid UUID referencing an existing appointment
 * status.
 *
 * This operation is not reversible, and any attempt to delete a non-existent or
 * currently referenced status will be rejected. Associated appointments or
 * business logic using the status code should be reviewed before deletion. Use
 * this only for deprecated custom or misconfigured statuses. Related endpoints
 * include single status retrieval (GET), updating (PUT), and listing all
 * appointment statuses (PATCH/GET).
 *
 * @param props.connection
 * @param props.statusId Unique identifier of the appointment status to delete
 * @path /healthcarePlatform/systemAdmin/appointmentStatuses/:statusId
 * @accessor api.functional.healthcarePlatform.systemAdmin.appointmentStatuses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the appointment status to delete */
    statusId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/appointmentStatuses/:statusId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/appointmentStatuses/${encodeURIComponent(props.statusId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("statusId")(() => typia.assert(props.statusId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
