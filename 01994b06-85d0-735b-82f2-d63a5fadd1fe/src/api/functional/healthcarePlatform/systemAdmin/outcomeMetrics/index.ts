import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformOutcomeMetric } from "../../../../structures/IHealthcarePlatformOutcomeMetric";
import { IPageIHealthcarePlatformOutcomeMetric } from "../../../../structures/IPageIHealthcarePlatformOutcomeMetric";

/**
 * Create a new outcome metric timeseries record in
 * healthcare_platform_outcome_metrics for analytics.
 *
 * Create a new outcome metric record under the
 * healthcare_platform_outcome_metrics table, capturing key performance
 * indicators or quality metrics for organization or department analytics. The
 * submitted data must include metric names, cohort definitions, observed
 * values, timestamps, and association to organizational or departmental scope.
 * All submitted records are validated for duplication, format correctness, and
 * permission scope before saving.
 *
 * On success, the operation returns the detailed created outcome metric for
 * immediate analytics integration. Errors are returned for duplicate record
 * attempts (metric name and observedAt not unique within org/department),
 * malformed cohort definitions, or permission violations. All creations are
 * logged for compliance and quality improvement traceability.
 *
 * @param props.connection
 * @param props.body Information for creating a new outcome metric record
 *   (metricName, cohort, value, timestamp, and context).
 * @path /healthcarePlatform/systemAdmin/outcomeMetrics
 * @accessor api.functional.healthcarePlatform.systemAdmin.outcomeMetrics.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information for creating a new outcome metric record (metricName,
     * cohort, value, timestamp, and context).
     */
    body: IHealthcarePlatformOutcomeMetric.ICreate;
  };
  export type Body = IHealthcarePlatformOutcomeMetric.ICreate;
  export type Response = IHealthcarePlatformOutcomeMetric;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/outcomeMetrics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/outcomeMetrics";
  export const random = (): IHealthcarePlatformOutcomeMetric =>
    typia.random<IHealthcarePlatformOutcomeMetric>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of outcome metrics for
 * analytics using healthcare_platform_outcome_metrics.
 *
 * Retrieve a paginated and filtered list of outcome metrics defined in the
 * healthcare_platform_outcome_metrics table. This endpoint is foundational for
 * analytics dashboards, organizational performance reviews, and compliance
 * trend analysis. The incoming request supports complex filters, such as
 * organizationId, departmentId, metricName (supports partial/text search),
 * observed_at date range, value threshold filtering, and cohort-based
 * inclusion/exclusion (using cohortDefinition fields). Sorting can be performed
 * on metricName, observed_at, and observedValue.
 *
 * Role-based data access is strictly enforced according to user role, limiting
 * the scope of returned metrics as appropriate (e.g., departmentHead sees only
 * department metrics; organizationAdmin sees all their organization's metrics;
 * systemAdmin sees all). All read access is logged for audit.
 *
 * Pagination and performance must accommodate trends analysis over long time
 * windows. Error handling should address invalid filter criteria, permission
 * violations, or inconsistent search parameters. This operation directly
 * supports quality improvement, regulatory reporting, and benchmarking.
 *
 * @param props.connection
 * @param props.body Search/filter and pagination parameters for finding outcome
 *   metrics.
 * @path /healthcarePlatform/systemAdmin/outcomeMetrics
 * @accessor api.functional.healthcarePlatform.systemAdmin.outcomeMetrics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search/filter and pagination parameters for finding outcome metrics. */
    body: IHealthcarePlatformOutcomeMetric.IRequest;
  };
  export type Body = IHealthcarePlatformOutcomeMetric.IRequest;
  export type Response = IPageIHealthcarePlatformOutcomeMetric.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/outcomeMetrics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/outcomeMetrics";
  export const random = (): IPageIHealthcarePlatformOutcomeMetric.ISummary =>
    typia.random<IPageIHealthcarePlatformOutcomeMetric.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single outcome metric record and its metadata by metricId from
 * healthcare_platform_outcome_metrics.
 *
 * Retrieve the full detail of a specific outcome metric using metricId. This
 * includes metric name, observed value, cohort definition, observed_at
 * timestamp, organizational/department scope, and calculation metadata. The
 * response enables in-depth review, audit, and drill-down for analytics
 * dashboards or compliance workflows.
 *
 * Role-based authorization is required: systemAdmin can access any metric;
 * organizationAdmin is limited to their organization; departmentHead is limited
 * to their department's metrics. If the metricId is invalid, deleted, or the
 * user lacks permissions, an error response is returned for clarity and
 * auditing. This operation is essential for interactive analytics,
 * organizational benchmarking, and regulatory quality tracking.
 *
 * Where applicable, links to related KPI snapshots or benchmark records can be
 * referenced for context.
 *
 * @param props.connection
 * @param props.metricId Unique identifier of the outcome metric to retrieve.
 * @path /healthcarePlatform/systemAdmin/outcomeMetrics/:metricId
 * @accessor api.functional.healthcarePlatform.systemAdmin.outcomeMetrics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the outcome metric to retrieve. */
    metricId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformOutcomeMetric;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/outcomeMetrics/:metricId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/outcomeMetrics/${encodeURIComponent(props.metricId ?? "null")}`;
  export const random = (): IHealthcarePlatformOutcomeMetric =>
    typia.random<IHealthcarePlatformOutcomeMetric>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("metricId")(() => typia.assert(props.metricId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific healthcare outcome metric record
 * (IHealthcarePlatformOutcomeMetric).
 *
 * Update a single outcome metric time-series record to reflect corrected or
 * re-benchmarked healthcare analytics data. Outcome metric records, as defined
 * in the Prisma schema (healthcare_platform_outcome_metrics), track
 * organizational or departmental quality and performance measures (e.g.,
 * readmission_rate, infection_rate) along with observed values, timepoints, and
 * cohort logic. This endpoint allows authorized users to change any updatable
 * property such as the metric's name, description, observed value, observed_at
 * timepoint, cohort definition, or departmental/organizational assignment.
 *
 * Security checks mandate that the requesting user has analytics dashboard
 * management, quality management, or admin privileges over the owning
 * organization or department, as per role and org_id/department_id relationship
 * enforcement. All updates are captured with timestamps, and prior values may
 * be retained through revision logic or external version tracking for thorough
 * auditability. Business logic ensures updating a metric cannot violate unique
 * constraints (e.g., org_id+metric_name+observed_at) or retroactively
 * invalidate benchmark comparisons.
 *
 * This update flow is critical for maintaining regulatory, outcome-based, and
 * quality improvement analytics, where precise and trusted reporting is
 * required. Integrations with dashboards and KPI trend reporting rely on the
 * accuracy of this outcome metric master table. API consumers should be aware
 * of concurrent edits: last-write-wins is enforced at the API layer, but
 * clients are encouraged to implement basic collision checks if working with
 * user-facing editing workflows.
 *
 * @param props.connection
 * @param props.metricId The unique identifier (UUID) for the outcome metric
 *   record to update.
 * @param props.body The updated information for the outcome metric, following
 *   the IHealthcarePlatformOutcomeMetric.IUpdate DTO structure.
 * @path /healthcarePlatform/systemAdmin/outcomeMetrics/:metricId
 * @accessor api.functional.healthcarePlatform.systemAdmin.outcomeMetrics.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) for the outcome metric record to update. */
    metricId: string & tags.Format<"uuid">;

    /**
     * The updated information for the outcome metric, following the
     * IHealthcarePlatformOutcomeMetric.IUpdate DTO structure.
     */
    body: IHealthcarePlatformOutcomeMetric.IUpdate;
  };
  export type Body = IHealthcarePlatformOutcomeMetric.IUpdate;
  export type Response = IHealthcarePlatformOutcomeMetric;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/outcomeMetrics/:metricId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/outcomeMetrics/${encodeURIComponent(props.metricId ?? "null")}`;
  export const random = (): IHealthcarePlatformOutcomeMetric =>
    typia.random<IHealthcarePlatformOutcomeMetric>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("metricId")(() => typia.assert(props.metricId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a healthcare outcome metric record by metricId (hard
 * delete).
 *
 * Permanently erase an outcome metric record from the healthcare analytics
 * metrics table using its unique metricId (UUID). The
 * healthcare_platform_outcome_metrics schema does not include a soft-delete
 * field; thus, the removal is irreversible and physically deletes the row.
 * Before performing this action, implementers MUST ensure that the metric is
 * not referenced by time-series trendlines, active dashboards, or open
 * regulatory/compliance reporting cycles—irreversible deletion may leave gaps
 * in analytics continuity or audit history.
 *
 * Authorized users must possess full organization admin or system admin
 * privileges to prevent accidental or malicious loss of metrics. A successful
 * call ensures compliance-grade logging of the deletion event, and downstream
 * consumers (dashboards, reports) should be notified or given time to refresh
 * caches to prevent data mismatch. Errors are generated if the metricId does
 * not exist.
 *
 * This operation should be used only after thorough review and, preferably,
 * with a business workflow layer prompting for confirmation and rationale
 * documentation.
 *
 * @param props.connection
 * @param props.metricId The unique identifier (UUID) of the outcome metric
 *   record to be deleted.
 * @path /healthcarePlatform/systemAdmin/outcomeMetrics/:metricId
 * @accessor api.functional.healthcarePlatform.systemAdmin.outcomeMetrics.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier (UUID) of the outcome metric record to be
     * deleted.
     */
    metricId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/outcomeMetrics/:metricId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/outcomeMetrics/${encodeURIComponent(props.metricId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("metricId")(() => typia.assert(props.metricId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
