import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformComplianceAgreement } from "../../../../structures/IHealthcarePlatformComplianceAgreement";

/**
 * Get a specific compliance agreement from
 * healthcare_platform_compliance_agreements by ID.
 *
 * This operation retrieves all details for a single compliance agreement,
 * including agreement type, signer, associated organization, policy version,
 * status, signature date and method, expiration, and audit fields. It is based
 * on the healthcare_platform_compliance_agreements table, enabling compliance
 * and administrative personnel to validate that required policies have been
 * signed, and presents adequate context for regulatory review.
 *
 * Sensitive details such as signature method and expiration are returned,
 * supporting full compliance with internal and external audit requirements.
 * Authorization checks ensure only users with appropriate organization or
 * compliance roles may access this endpoint. Related business operations
 * include listing agreements by organization or user and updating agreement
 * status through regulated workflows.
 *
 * Access is strictly controlled according to role matrix and audit policy to
 * ensure that only authorized individuals (e.g., compliance staff, system
 * administrators) can view agreement details for compliance, legal, or
 * administrative review purposes.
 *
 * @param props.connection
 * @param props.complianceAgreementId Unique identifier for the compliance
 *   agreement record (UUID).
 * @path /healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceAgreements.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the compliance agreement record (UUID). */
    complianceAgreementId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformComplianceAgreement;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/complianceAgreements/${encodeURIComponent(props.complianceAgreementId ?? "null")}`;
  export const random = (): IHealthcarePlatformComplianceAgreement =>
    typia.random<IHealthcarePlatformComplianceAgreement>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("complianceAgreementId")(() =>
        typia.assert(props.complianceAgreementId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details for an existing compliance agreement in
 * healthcare_platform_compliance_agreements.
 *
 * This operation modifies one or more fields of an existing compliance
 * agreement record (such as status, method, expiration, or signer metadata)
 * based on its UUID. It is grounded in the
 * healthcare_platform_compliance_agreements schema, allowing for lifecycle
 * events such as withdrawal, update of method, or compliance-driven changes.
 * All updates are strictly controlled, requiring appropriate role-based
 * permissions and organizational context validation.
 *
 * The operation supports only allowable legal amendments (as per business
 * rules): status changes (e.g., from pending to signed or withdrawn), signature
 * update (in the case of method change), or agreement expiry extension/closure.
 * It never allows modification of immutable historical fields or retroactive
 * changes to signed timestamps.
 *
 * Each update request results in a comprehensive audit event in accordance with
 * internal and regulatory requirements. Access is reserved to compliance
 * administrators or system administrators. Operation is tightly integrated with
 * compliance audit and notification workflows.
 *
 * @param props.connection
 * @param props.complianceAgreementId UUID of the compliance agreement record to
 *   update.
 * @param props.body Fields to update in the compliance agreement as per
 *   IHealthcarePlatformComplianceAgreement.IUpdate.
 * @path /healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceAgreements.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the compliance agreement record to update. */
    complianceAgreementId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the compliance agreement as per
     * IHealthcarePlatformComplianceAgreement.IUpdate.
     */
    body: IHealthcarePlatformComplianceAgreement.IUpdate;
  };
  export type Body = IHealthcarePlatformComplianceAgreement.IUpdate;
  export type Response = IHealthcarePlatformComplianceAgreement;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/complianceAgreements/${encodeURIComponent(props.complianceAgreementId ?? "null")}`;
  export const random = (): IHealthcarePlatformComplianceAgreement =>
    typia.random<IHealthcarePlatformComplianceAgreement>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("complianceAgreementId")(() =>
        typia.assert(props.complianceAgreementId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a compliance agreement
 * (healthcare_platform_compliance_agreements) by ID.
 *
 * This operation physically removes a compliance agreement record from the
 * healthcare_platform_compliance_agreements table based on its UUID. As the
 * table does not contain soft-delete logic (no dedicated deleted_at field in
 * the schema), the operation conducts a permanent, irreversible deletion. Use
 * is strictly limited to situations where business, legal, or compliance
 * requirements mandate removal, often after required retention periods are
 * satisfied or data subject requests under applicable law are validated.
 *
 * Deletion is strictly role-restricted to compliance or system administrators.
 * Business logic and error handling enforce that only authorized users may
 * invoke deletion. Every delete event is written to the audit log for
 * compliance retrieval and reporting.
 *
 * Proper data validation (unique identifier, existence of record, permissible
 * deletion conditions) is always performed prior to removal. Related business
 * operations include review and export of audit logs for regulated data
 * removals.
 *
 * @param props.connection
 * @param props.complianceAgreementId UUID of the compliance agreement to be
 *   permanently deleted.
 * @path /healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceAgreements.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the compliance agreement to be permanently deleted. */
    complianceAgreementId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/complianceAgreements/:complianceAgreementId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/complianceAgreements/${encodeURIComponent(props.complianceAgreementId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("complianceAgreementId")(() =>
        typia.assert(props.complianceAgreementId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new compliance agreement entry in
 * healthcare_platform_compliance_agreements.
 *
 * This operation inserts a new row into
 * healthcare_platform_compliance_agreements, establishing a legally binding
 * agreement record between a user (signer) and the organization under a
 * specified policy version and agreement type. It supports capturing key
 * compliance artifacts such as signature status, method, optional expiry, and
 * audit metadata. Input validation ensures that all required fields are
 * provided, the referenced policy version exists, and the signer meets business
 * requirements for agreement eligibility.
 *
 * Role-based authorization ensures that only staff or technical personnel with
 * legal authority (typically organization administrators or compliance
 * officers) can create new agreements. Policy version linkage enables the
 * platform to reference the correct audited version for subsequent consent or
 * compliance checks. Status, effective/expiration dates, and method fields
 * support a variety of agreement workflows including scheduled renewals and
 * regulatory reporting.
 *
 * Errors are returned for duplicate agreements, invalid references to
 * organizations or policy versions, or permission violations. Operation is
 * auditable for compliance purposes.
 *
 * @param props.connection
 * @param props.body Agreement information to be created, as defined by
 *   IHealthcarePlatformComplianceAgreement.ICreate.
 * @path /healthcarePlatform/systemAdmin/complianceAgreements
 * @accessor api.functional.healthcarePlatform.systemAdmin.complianceAgreements.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Agreement information to be created, as defined by
     * IHealthcarePlatformComplianceAgreement.ICreate.
     */
    body: IHealthcarePlatformComplianceAgreement.ICreate;
  };
  export type Body = IHealthcarePlatformComplianceAgreement.ICreate;
  export type Response = IHealthcarePlatformComplianceAgreement;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/complianceAgreements",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/systemAdmin/complianceAgreements";
  export const random = (): IHealthcarePlatformComplianceAgreement =>
    typia.random<IHealthcarePlatformComplianceAgreement>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
