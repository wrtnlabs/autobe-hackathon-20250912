import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformKpiSnapshot } from "../../../../structures/IHealthcarePlatformKpiSnapshot";
import { IPageIHealthcarePlatformKpiSnapshot } from "../../../../structures/IPageIHealthcarePlatformKpiSnapshot";

/**
 * Search and paginate KPI snapshot entries (healthcare_platform_kpi_snapshots
 * table).
 *
 * Get a paginated and filterable list of KPI snapshot data points, including
 * value, label, date/time, organization, department, and any linked benchmarks.
 * End users (orgAdmins, department heads, providers with analytics access) use
 * this endpoint to populate dashboards and reports with up-to-date analytics
 * data.
 *
 * Request body allows searching by org/department, KPI name, date range, value
 * ranges, and supports sorting options. Endpoint uses pagination for large
 * result sets. Data is restricted to authorized users/organizations; audit
 * logging includes query parameters and filters.
 *
 * Errors: Invalid search criteria, access violations, and paging/sorting
 * parameter errors are all reported with clear messages. Related endpoints
 * include create/read/update/erase for benchmarks and direct KPI configuration
 * endpoints.
 *
 * @param props.connection
 * @param props.body Request body specifying search, filter, and pagination
 *   criteria for KPI snapshots.
 * @path /healthcarePlatform/systemAdmin/kpiSnapshots
 * @accessor api.functional.healthcarePlatform.systemAdmin.kpiSnapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request body specifying search, filter, and pagination criteria for
     * KPI snapshots.
     */
    body: IHealthcarePlatformKpiSnapshot.IRequest;
  };
  export type Body = IHealthcarePlatformKpiSnapshot.IRequest;
  export type Response = IPageIHealthcarePlatformKpiSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/kpiSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/kpiSnapshots";
  export const random = (): IPageIHealthcarePlatformKpiSnapshot =>
    typia.random<IPageIHealthcarePlatformKpiSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a detailed KPI snapshot by its unique ID (table:
 * healthcare_platform_kpi_snapshots) for analytics and reporting.
 *
 * Retrieve a single KPI snapshot record from the
 * healthcare_platform_kpi_snapshots table using its unique ID. The KPI snapshot
 * includes information about a specific performance indicatorâ€”such as the KPI
 * name, value, label, department and organization linkage, benchmark
 * association, observation time, and computation details for a given reporting
 * period.
 *
 * Authorization and data access are restricted to roles with appropriate
 * analytics or admin privileges, following business rules and organization
 * visibility scope defined in the platform security requirements. The endpoint
 * enforces strict access control, ensuring users can only view KPI snapshots
 * for organizations and departments to which they are affiliated.
 *
 * Error handling covers not-found conditions, permission violations, or
 * requests for deleted/inactive snapshots. This operation is typically paired
 * with listing/search endpoints and may be used in dashboard drilldown
 * routines. Compliance with audit and access log requirements is automatic, as
 * every fetch event will be recorded for compliance and future review.
 *
 * @param props.connection
 * @param props.kpiSnapshotId Unique identifier (UUID) of the target KPI
 *   snapshot to retrieve.
 * @path /healthcarePlatform/systemAdmin/kpiSnapshots/:kpiSnapshotId
 * @accessor api.functional.healthcarePlatform.systemAdmin.kpiSnapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target KPI snapshot to retrieve. */
    kpiSnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformKpiSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/kpiSnapshots/:kpiSnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/kpiSnapshots/${encodeURIComponent(props.kpiSnapshotId ?? "null")}`;
  export const random = (): IHealthcarePlatformKpiSnapshot =>
    typia.random<IHealthcarePlatformKpiSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("kpiSnapshotId")(() => typia.assert(props.kpiSnapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
