import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLocaleSettings } from "../../../../structures/IHealthcarePlatformLocaleSettings";
import { IPageIHealthcarePlatformLocaleSettings } from "../../../../structures/IPageIHealthcarePlatformLocaleSettings";

/**
 * Create a new locale setting entry in the healthcare_platform_locale_settings
 * table.
 *
 * This operation enables a system or organization administrator to create a new
 * locale setting, specifying details like language code, timezone, date and
 * time format preferences, and number formatting rules. Locale settings affect
 * how users in the relevant organization or department experience date/time,
 * number, and language localization within the platform.
 *
 * Business logic enforces that only one active locale setting per
 * organization/department combination exists. Attempting to create a duplicate
 * will result in a validation error. All creation events are audited, with user
 * identity, configuration values, and timestamp recorded for compliance.
 *
 * Only authorized roles may invoke this operation. The operation requires
 * robust input validation to ensure supported languages, valid timezone values,
 * and proper date/number formatting conventions in accordance with business and
 * compliance requirements.
 *
 * @param props.connection
 * @param props.body The configuration and attributes for the new locale
 *   setting, including language, timezone, and formatting.
 * @path /healthcarePlatform/systemAdmin/localeSettings
 * @accessor api.functional.healthcarePlatform.systemAdmin.localeSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The configuration and attributes for the new locale setting,
     * including language, timezone, and formatting.
     */
    body: IHealthcarePlatformLocaleSettings.ICreate;
  };
  export type Body = IHealthcarePlatformLocaleSettings.ICreate;
  export type Response = IHealthcarePlatformLocaleSettings;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/localeSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/localeSettings";
  export const random = (): IHealthcarePlatformLocaleSettings =>
    typia.random<IHealthcarePlatformLocaleSettings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate locale settings in healthcare_platform_locale_settings.
 *
 * Retrieve a filtered, paginated list of locale settings for organizations and
 * departments. This operation enables platform and organization administrators
 * to search for locale preferences by organization or department ID, supported
 * language (such as en-US or es-ES), timezone, or formatting standards. It
 * supports advanced search, sorting, and pagination to facilitate management of
 * localization and scheduling policies across multi-tenant and multinational
 * environments.
 *
 * The endpoint ensures that only users with administrative privileges can
 * access the full spectrum of locale settings and that sensitive configuration
 * details are managed in compliance with data privacy/operational policy. The
 * response includes summary fields appropriate for list views and allows
 * further detail queries by record ID through related endpoints.
 *
 * This operation is crucial for maintaining regionally aware behaviors in
 * notifications, reporting, and user display settings across diverse clinical
 * and operational domains.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for locating locale
 *   settings.
 * @path /healthcarePlatform/systemAdmin/localeSettings
 * @accessor api.functional.healthcarePlatform.systemAdmin.localeSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for locating locale settings. */
    body: IHealthcarePlatformLocaleSettings.IRequest;
  };
  export type Body = IHealthcarePlatformLocaleSettings.IRequest;
  export type Response = IPageIHealthcarePlatformLocaleSettings.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/localeSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/localeSettings";
  export const random = (): IPageIHealthcarePlatformLocaleSettings.ISummary =>
    typia.random<IPageIHealthcarePlatformLocaleSettings.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific locale setting by its UUID from the
 * healthcare_platform_locale_settings table.
 *
 * This operation fetches a single locale setting record by its unique
 * identifier. It is particularly useful in administrative or configuration UX
 * flows, where a user needs to review, audit, or validate the locale settings
 * for an organization or department.
 *
 * Role-specific access control is enforced. Only system administrators,
 * organization administrators, or users with explicit
 * organization/department-level privileges are permitted to invoke this
 * operation. The locale setting includes detailed regional options such as
 * language, timezone, date and time formats, and number formatting, which
 * dictate how the platform delivers localized content to users.
 *
 * Authorization and audit trails for this operation are enforced as per
 * compliance and business policy. Error handling includes not-found, forbidden,
 * or access violation responses if the locale setting does not exist, is
 * deleted, or is outside the requesting user's scope. This operation depends on
 * proper RBAC mapping and the user's organizational context.
 *
 * @param props.connection
 * @param props.localeSettingId The unique identifier (UUID) for the locale
 *   setting to retrieve.
 * @path /healthcarePlatform/systemAdmin/localeSettings/:localeSettingId
 * @accessor api.functional.healthcarePlatform.systemAdmin.localeSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) for the locale setting to retrieve. */
    localeSettingId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLocaleSettings;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/localeSettings/:localeSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/localeSettings/${encodeURIComponent(props.localeSettingId ?? "null")}`;
  export const random = (): IHealthcarePlatformLocaleSettings =>
    typia.random<IHealthcarePlatformLocaleSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("localeSettingId")(() =>
        typia.assert(props.localeSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a locale setting in the healthcare_platform_locale_settings table by
 * its UUID.
 *
 * With this operation, system or organization administrators can revise an
 * existing locale setting record for an organization or department, such as
 * changing language, timezone, or other localization preferences. The endpoint
 * validates that the update does not create more than one active locale setting
 * for the same scope and that all setting values conform to supported formats.
 *
 * All updates are recorded in the audit trail, including who performed the
 * change, the old values, and the time of the update. Security and RBAC
 * requirements stipulate that only users with appropriate organizational or
 * departmental privileges may invoke this operation. If the record does not
 * exist, is deleted, or is not within scope, the operation will return an
 * error.
 *
 * The response provides the new state of the locale setting after update, with
 * all updated attributes. Careful validation and conflict checking are critical
 * to maintain platform integrity and localization coherence.
 *
 * @param props.connection
 * @param props.localeSettingId The unique identifier (UUID) for the locale
 *   setting to update.
 * @param props.body Updated attributes and configuration for the locale
 *   setting.
 * @path /healthcarePlatform/systemAdmin/localeSettings/:localeSettingId
 * @accessor api.functional.healthcarePlatform.systemAdmin.localeSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) for the locale setting to update. */
    localeSettingId: string & tags.Format<"uuid">;

    /** Updated attributes and configuration for the locale setting. */
    body: IHealthcarePlatformLocaleSettings.IUpdate;
  };
  export type Body = IHealthcarePlatformLocaleSettings.IUpdate;
  export type Response = IHealthcarePlatformLocaleSettings;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/localeSettings/:localeSettingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/localeSettings/${encodeURIComponent(props.localeSettingId ?? "null")}`;
  export const random = (): IHealthcarePlatformLocaleSettings =>
    typia.random<IHealthcarePlatformLocaleSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("localeSettingId")(() =>
        typia.assert(props.localeSettingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft-delete) a locale setting from the
 * healthcare_platform_locale_settings table by UUID.
 *
 * This operation allows system or organization administrators to delete an
 * existing locale setting entry by its unique ID, marking it as deleted through
 * the deleted_at field instead of removing it entirely. This supports
 * regulatory, business audit, and data retention requirements, and enables
 * organizations to maintain a compliance-grade record of all locale
 * configuration changes.
 *
 * Only authorized users may execute deletions, and logic is enforced to prevent
 * deletion of required or default settings. All deletion events are logged in
 * the audit trail, with the initiator and timestamp for compliance.
 *
 * Attempting to delete a non-existent, already deleted, or out-of-scope locale
 * setting returns a not-found error; attempting to remove a required/default
 * setting returns a business logic error. All delete operations should ensure
 * that soft deletion is handled as per the table's deleted_at semantics for
 * compliance and potential restoration requirements.
 *
 * @param props.connection
 * @param props.localeSettingId The unique identifier (UUID) for the locale
 *   setting to delete.
 * @path /healthcarePlatform/systemAdmin/localeSettings/:localeSettingId
 * @accessor api.functional.healthcarePlatform.systemAdmin.localeSettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) for the locale setting to delete. */
    localeSettingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/localeSettings/:localeSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/localeSettings/${encodeURIComponent(props.localeSettingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("localeSettingId")(() =>
        typia.assert(props.localeSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
