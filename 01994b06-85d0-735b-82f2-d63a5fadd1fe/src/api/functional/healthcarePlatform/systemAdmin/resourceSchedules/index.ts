import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformResourceSchedule } from "../../../../structures/IHealthcarePlatformResourceSchedule";
import { IPageIHealthcarePlatformResourceSchedule } from "../../../../structures/IPageIHealthcarePlatformResourceSchedule";

/**
 * List all resource schedules with search and pagination in
 * healthcare_platform_resource_schedules table.
 *
 * Allows system-level or organization-level administrators to list all
 * configured resource schedules, with support for advanced filtering (by
 * organization, resource type or ID, availability windows, recurrence), paging,
 * and sorting. Only non-soft-deleted records will be returned.
 *
 * The response provides schedule metadata needed for administrative decision
 * making and calendar UI construction. Security is enforced by role-based
 * access restriction. Related endpoints include single resource schedule
 * retrieval (GET), creation (POST), update (PUT), and deletion (DELETE).
 *
 * @param props.connection
 * @param props.body Resource schedule search and pagination parameters.
 * @path /healthcarePlatform/systemAdmin/resourceSchedules
 * @accessor api.functional.healthcarePlatform.systemAdmin.resourceSchedules.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Resource schedule search and pagination parameters. */
    body: IHealthcarePlatformResourceSchedule.IRequest;
  };
  export type Body = IHealthcarePlatformResourceSchedule.IRequest;
  export type Response = IPageIHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/resourceSchedules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/resourceSchedules";
  export const random = (): IPageIHealthcarePlatformResourceSchedule =>
    typia.random<IPageIHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a single resource schedule in
 * healthcare_platform_resource_schedules table.
 *
 * Permits privileged administrators to view detailed configuration of a
 * specific resource schedule entry identified by resourceScheduleId, which must
 * be a valid UUID. The response includes all resource schedule configuration
 * fields, suitable for display in administrative dashboards, resource auditing,
 * or advanced scheduling logic.
 *
 * If the entry does not exist or has been soft-deleted, an error will be
 * returned. Related endpoints: creation (POST), update (PUT), deletion
 * (DELETE), and schedule list (PATCH/GET).
 *
 * @param props.connection
 * @param props.resourceScheduleId Unique identifier of the resource schedule to
 *   retrieve
 * @path /healthcarePlatform/systemAdmin/resourceSchedules/:resourceScheduleId
 * @accessor api.functional.healthcarePlatform.systemAdmin.resourceSchedules.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the resource schedule to retrieve */
    resourceScheduleId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/resourceSchedules/:resourceScheduleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/resourceSchedules/${encodeURIComponent(props.resourceScheduleId ?? "null")}`;
  export const random = (): IHealthcarePlatformResourceSchedule =>
    typia.random<IHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resourceScheduleId")(() =>
        typia.assert(props.resourceScheduleId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
