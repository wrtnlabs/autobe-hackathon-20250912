import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingCode } from "../../../../structures/IHealthcarePlatformBillingCode";

/**
 * Update a billing code's metadata in the healthcarePlatform billing system.
 *
 * Update the properties of a single billing code within the healthcarePlatform
 * system. By specifying the billingCodeId path parameter, authorized
 * administrators can change details such as the billing code's name, code
 * system, description, and active status.
 *
 * This operation enforces audit logging of all changes and restricts access to
 * users with appropriate privileges (e.g., systemAdmin, organizationAdmin). All
 * code modifications are tracked for compliance. Any update must conform to
 * schema requirements, including validation of unique constraints on the code
 * and code_system pair.
 *
 * Security controls include role-based access and full record of update events
 * for possible regulatory review. Related APIs include code creation, listing,
 * and metadata retrieval endpoints.
 *
 * @param props.connection
 * @param props.billingCodeId The unique identifier of the billing code to
 *   update.
 * @param props.body Updated properties and metadata for the billing code.
 * @path /healthcarePlatform/systemAdmin/billingCodes/:billingCodeId
 * @accessor api.functional.healthcarePlatform.systemAdmin.billingCodes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the billing code to update. */
    billingCodeId: string & tags.Format<"uuid">;

    /** Updated properties and metadata for the billing code. */
    body: IHealthcarePlatformBillingCode.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingCode.IUpdate;
  export type Response = IHealthcarePlatformBillingCode;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/billingCodes/:billingCodeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/billingCodes/${encodeURIComponent(props.billingCodeId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingCode =>
    typia.random<IHealthcarePlatformBillingCode>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingCodeId")(() => typia.assert(props.billingCodeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a billing code from the healthcarePlatform billing code catalog.
 *
 * Permanently delete a billing code from the healthcarePlatform's billing codes
 * catalog. This operation requires the billingCodeId path parameter and is
 * restricted to system-level or organization-level administrative roles.
 *
 * All deletions are audit-logged for compliance and traceability. Once deleted,
 * the billing code cannot be referenced in new invoices or claims, and related
 * business logic will prevent its future use. Attempting to delete an in-use or
 * referenced code should result in a validation error describing dependencies.
 * Access is controlled strictly via authorization roles, and all delete actions
 * are permanently recorded.
 *
 * @param props.connection
 * @param props.billingCodeId The unique identifier of the billing code to
 *   delete.
 * @path /healthcarePlatform/systemAdmin/billingCodes/:billingCodeId
 * @accessor api.functional.healthcarePlatform.systemAdmin.billingCodes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the billing code to delete. */
    billingCodeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/billingCodes/:billingCodeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/billingCodes/${encodeURIComponent(props.billingCodeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingCodeId")(() => typia.assert(props.billingCodeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
