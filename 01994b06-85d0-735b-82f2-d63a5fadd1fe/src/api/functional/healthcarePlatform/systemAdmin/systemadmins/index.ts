import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformSystemAdmin } from "../../../../structures/IHealthcarePlatformSystemAdmin";
import { IPageIHealthcarePlatformSystemadmin } from "../../../../structures/IPageIHealthcarePlatformSystemadmin";

/**
 * Create a new system administrator (healthcare_platform_systemadmins).
 *
 * Create a new system administrator account to manage the healthcarePlatform
 * system. Only current system admins may create new admin accounts.
 *
 * This operation requires required fields such as email (unique, business
 * domain), full legal name, and may include business phone for account
 * validation/MFA. Upon creation, the admin's created_at and status fields are
 * set per platform defaults. The newly created admin account is returned in
 * full, but without credential hashes or sensitive authentication data.
 *
 * Failure scenarios include uniqueness violations, missing required fields, or
 * permission errors. This is a sensitive endpoint governed by the highest level
 * of audit, requiring that invokers themselves be privileged systemAdmin
 * users.
 *
 * @param props.connection
 * @param props.body New system administrator account information (email, full
 *   name, phone)
 * @path /healthcarePlatform/systemAdmin/systemadmins
 * @accessor api.functional.healthcarePlatform.systemAdmin.systemadmins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New system administrator account information (email, full name,
     * phone)
     */
    body: IHealthcarePlatformSystemAdmin.ICreate;
  };
  export type Body = IHealthcarePlatformSystemAdmin.ICreate;
  export type Response = IHealthcarePlatformSystemAdmin;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/systemadmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/systemadmins";
  export const random = (): IHealthcarePlatformSystemAdmin =>
    typia.random<IHealthcarePlatformSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of system administrators
 * (healthcare_platform_systemadmins).
 *
 * Retrieve a list of all system administrator accounts registered in the
 * healthcarePlatform system. This operation allows privileged users to search,
 * filter, and view admins by attributes such as email, full name, phone number,
 * or account creation date.
 *
 * Security is of the utmost importance; this endpoint must be tightly
 * restricted to users with system-level administrative rights, as it exposes
 * platform management accounts. The resulting data includes audit fields, omits
 * sensitive credential hashes, and highlights soft-deleted/inactive accounts as
 * required for audit/compliance reviews.
 *
 * This operation interacts with the healthcare_platform_systemadmins table,
 * leveraging database indexes for fast searching and retrieval. Paginated
 * responses are essential for large platforms with many admins. Error handling
 * includes permission errors for unauthorized access and validation for invalid
 * filters or sort parameters. Related endpoints include system administrator
 * creation, detail retrieval, and updates.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for listing
 *   system admins
 * @path /healthcarePlatform/systemAdmin/systemadmins
 * @accessor api.functional.healthcarePlatform.systemAdmin.systemadmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for listing system admins */
    body: IHealthcarePlatformSystemAdmin.IRequest;
  };
  export type Body = IHealthcarePlatformSystemAdmin.IRequest;
  export type Response = IPageIHealthcarePlatformSystemadmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/systemadmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/systemadmins";
  export const random = (): IPageIHealthcarePlatformSystemadmin.ISummary =>
    typia.random<IPageIHealthcarePlatformSystemadmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve platform system administrator details by ID
 * (healthcare_platform_systemadmins).
 *
 * Retrieve information about a specific system administrator using their unique
 * ID. This is intended for privileged review or compliance actions.
 *
 * This endpoint provides all stored profile details for the selected admin,
 * including email, full name, phone, timestamps, and soft-deletion status.
 * Credentials or authentication hashes are never returned. Access is limited to
 * users with systemAdmin privileges for security reasons.
 *
 * The operation is built upon the healthcare_platform_systemadmins model and
 * will result in a 404 if no active or soft-deleted matching record is found.
 * Validation includes UUID format for the ID parameter. This endpoint
 * complements the system admin list, creation, and update operations.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier for the target system
 *   administrator
 * @path /healthcarePlatform/systemAdmin/systemadmins/:systemAdminId
 * @accessor api.functional.healthcarePlatform.systemAdmin.systemadmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target system administrator */
    systemAdminId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformSystemAdmin;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/systemadmins/:systemAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/systemadmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): IHealthcarePlatformSystemAdmin =>
    typia.random<IHealthcarePlatformSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update platform system administrator profile fields
 * (healthcare_platform_systemadmins).
 *
 * Update non-credential information (such as full name, phone, or status) for
 * an existing system administrator. Only other system admins may make profile
 * changes, ensuring strong compliance and security posture.
 *
 * Core fields such as active/deactivated status, contact phone, and display
 * name may be updated, but credential/authorization settings are managed via
 * separate endpoints/lifecycle. Only systemAdmin users may use this endpoint,
 * and all changes are logged for compliance.
 *
 * The operation validates uniqueness and allowed transitions per business rules
 * and links to audit trail logic. On success, the full updated system admin
 * profile is returned, except for authentication hashes or sensitive
 * information.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier of the system administrator to
 *   update
 * @param props.body Updated fields for system administrator profile
 * @path /healthcarePlatform/systemAdmin/systemadmins/:systemAdminId
 * @accessor api.functional.healthcarePlatform.systemAdmin.systemadmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system administrator to update */
    systemAdminId: string & tags.Format<"uuid">;

    /** Updated fields for system administrator profile */
    body: IHealthcarePlatformSystemAdmin.IUpdate;
  };
  export type Body = IHealthcarePlatformSystemAdmin.IUpdate;
  export type Response = IHealthcarePlatformSystemAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/systemadmins/:systemAdminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/systemadmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): IHealthcarePlatformSystemAdmin =>
    typia.random<IHealthcarePlatformSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a System Admin account from the
 * healthcare_platform_systemadmins table.
 *
 * This API operation enables the permanent deletion of a System Admin account
 * from the healthcarePlatform system. It is intended for rare,
 * compliance-justified scenarios such as role revocation, security breaches, or
 * organization restructuring. The healthcare_platform_systemadmins table
 * records superuser identity and contact information, and is central to
 * platform-wide operations.
 *
 * Authorization is limited to other System Admins and service owner roles. The
 * deletion process is logged for forensic audit purposes, removing the record
 * and breaking all associated assignments. The operation does not cascade to
 * lower-privilege user types and must carefully respect referential integrity.
 * Deletion is irreversible, and all access by the user is immediately revoked.
 *
 * Error handling includes rejection if the systemAdminId is invalid, the
 * account is already deleted, or referential integrity is at risk. This
 * endpoint is complementary to account deactivation endpoints and should be
 * used with caution, only in scenarios where full removal is
 * business-mandated.
 *
 * The operation is tracked in compliance and audit logs for platform-wide
 * monitoring. Records are permanently removed from the database, not simply
 * marked as deleted. Manual internal review and clearance may be required
 * before invocation.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier (UUID) of the target System
 *   Admin to be permanently deleted.
 * @path /healthcarePlatform/systemAdmin/systemadmins/:systemAdminId
 * @accessor api.functional.healthcarePlatform.systemAdmin.systemadmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target System Admin to be permanently
     * deleted.
     */
    systemAdminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/systemadmins/:systemAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/systemadmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
