import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformOrganization } from "../../../../structures/IHealthcarePlatformOrganization";
import { IPageIHealthcarePlatformOrganization } from "../../../../structures/IPageIHealthcarePlatformOrganization";

/**
 * Create a new healthcare organization (tenant onboarding).
 *
 * Creates a new organization entity for use as a top-level tenant. Supply
 * organization code (which must be unique), name, and initial status. This
 * record serves as the parent for all organizational resources, compliance
 * records, and department structures. Mandatory timestamps are established and
 * audit-logged at creation time.
 *
 * The operation is restricted to platform administrators to ensure that only
 * authorized personnel can create new tenants in the system. After creation,
 * downstream assignment flows for staff and configurations can be initiated.
 *
 * All fields in the request and response map directly to the
 * healthcare_platform_organizations schema; no additional properties may be
 * specified. Unique constraint on code is enforced, and violation will return a
 * business logic error.
 *
 * @param props.connection
 * @param props.body Payload for new organization creation (unique code,
 *   official name, status).
 * @path /healthcarePlatform/systemAdmin/organizations
 * @accessor api.functional.healthcarePlatform.systemAdmin.organizations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload for new organization creation (unique code, official name,
     * status).
     */
    body: IHealthcarePlatformOrganization.ICreate;
  };
  export type Body = IHealthcarePlatformOrganization.ICreate;
  export type Response = IHealthcarePlatformOrganization;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/systemAdmin/organizations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/organizations";
  export const random = (): IHealthcarePlatformOrganization =>
    typia.random<IHealthcarePlatformOrganization>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of healthcare organizations
 * (multi-tenant boundary).
 *
 * Retrieves a filtered and paginated list of healthcare organizations in the
 * system. Users can search based on organization code, name, operational
 * status, and creation or update time, supporting advanced query and sort
 * scenarios. This enables platform admins and organization admins to monitor,
 * manage, and audit organization entities under appropriate compliance
 * restrictions.
 *
 * Security policies ensure access is strictly limited to authorized
 * administrative users; sensitive organizational information is excluded for
 * roles with reduced privileges. Only non-deleted organizations are included
 * unless explicit compliance search is required.
 *
 * Derived from the healthcare_platform_organizations table in the Prisma DB
 * schema; only fields defined in that table are used. Supports integration with
 * role-based application dashboards, onboarding wizards, and compliance
 * reporting workflows.
 *
 * Related endpoints include GET /organizations/{organizationId} for individual
 * organization details, and POST /organizations for new organization creation.
 *
 * @param props.connection
 * @param props.body Search request criteria, filter, pagination, and sort
 *   parameters for retrieving healthcare organizations.
 * @path /healthcarePlatform/systemAdmin/organizations
 * @accessor api.functional.healthcarePlatform.systemAdmin.organizations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search request criteria, filter, pagination, and sort parameters for
     * retrieving healthcare organizations.
     */
    body: IHealthcarePlatformOrganization.IRequest;
  };
  export type Body = IHealthcarePlatformOrganization.IRequest;
  export type Response = IPageIHealthcarePlatformOrganization.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/systemAdmin/organizations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/systemAdmin/organizations";
  export const random = (): IPageIHealthcarePlatformOrganization.ISummary =>
    typia.random<IPageIHealthcarePlatformOrganization.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single organization's detail record by ID (platform admin view).
 *
 * Retrieves the detailed organization record, including business code, name,
 * current status, creation and last update timestamps. Used for administrative
 * review, compliance, and resource management. This record serves as the master
 * data anchor for all departments, configuration, and RBAC partitioning
 * downstream.
 *
 * Access is limited to authorized system or organization admins according to
 * strict RBAC policies. Sensitive internal data is only available to
 * high-privilege roles. The underlying data is loaded from the
 * healthcare_platform_organizations table, using the provided organizationId as
 * a UUID path parameter.
 *
 * This endpoint is frequently used in conjunction with the organization search
 * or onboarding flows, and appears in organization and compliance dashboards.
 *
 * @param props.connection
 * @param props.organizationId UUID of the organization to retrieve.
 * @path /healthcarePlatform/systemAdmin/organizations/:organizationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.organizations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the organization to retrieve. */
    organizationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformOrganization;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/systemAdmin/organizations/:organizationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/organizations/${encodeURIComponent(props.organizationId ?? "null")}`;
  export const random = (): IHealthcarePlatformOrganization =>
    typia.random<IHealthcarePlatformOrganization>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationId")(() => typia.assert(props.organizationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update properties of a healthcare organization by ID (platform admin only).
 *
 * Updates the selected organization entity with the supplied properties: code,
 * display name, status. All changes are strictly audited, including actor
 * identity, change timestamps, and before/after data states as required by
 * regulatory compliance. The entity is referenced by the provided
 * organizationId path parameter, which must be a valid UUID.
 *
 * Only system administrators may execute this change, enforcing strict access
 * controls on core tenant information. Unique constraints are applied at the
 * database level for organization code; attempting to set a duplicate code will
 * result in a business logic error. All changes are written to the
 * corresponding Prisma healthcare_platform_organizations table and logged for
 * compliance.
 *
 * No destructive actions are performed; soft-delete and archival are handled by
 * separate workflows. Downstream effects, such as resource and staff assignment
 * updates, are managed asynchronously outside the scope of this endpoint.
 *
 * @param props.connection
 * @param props.organizationId UUID of the organization to update.
 * @param props.body New organization data for updating properties, including
 *   name, code, and status. Only supplied fields are modified.
 * @path /healthcarePlatform/systemAdmin/organizations/:organizationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.organizations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the organization to update. */
    organizationId: string & tags.Format<"uuid">;

    /**
     * New organization data for updating properties, including name, code,
     * and status. Only supplied fields are modified.
     */
    body: IHealthcarePlatformOrganization.IUpdate;
  };
  export type Body = IHealthcarePlatformOrganization.IUpdate;
  export type Response = IHealthcarePlatformOrganization;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/systemAdmin/organizations/:organizationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/systemAdmin/organizations/${encodeURIComponent(props.organizationId ?? "null")}`;
  export const random = (): IHealthcarePlatformOrganization =>
    typia.random<IHealthcarePlatformOrganization>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationId")(() => typia.assert(props.organizationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently deletes an organization (top-level tenant) by organizationId
 * (UUID) from healthcare_platform_organizations.
 *
 * Permanently remove a healthcare organization identified by its UUID
 * (organizationId) from the healthcarePlatform. The operation targets the
 * healthcare_platform_organizations model, which represents tenants or
 * top-level business entities—a critical operation for platform data isolation
 * and compliance.
 *
 * Security: Only users with system-wide admin privileges should perform this
 * operation. All soft-delete logic should be handled by setting `deleted_at`
 * field; however, in situations requiring physical removal for legal
 * compliance, actual data removal is possible.
 *
 * Cascading: The removal detaches or deletes all sub-resources including
 * departments, users, and configurations as per defined Prisma schema
 * relations. It is critical to audit all related business rules and handle
 * orphaned data appropriately.
 *
 * Related: Deletion should trigger an audit log entry and may be referenced by
 * compliance review APIs. Make sure ORM-level cascading actions and historic
 * data retention rules are configured as required by business and regulatory
 * needs.
 *
 * Errors: Attempting to delete a non-existent or already-deleted organization
 * should result in an informative error indicating such state. Ensure proper
 * authorization and auditability of this operation.
 *
 * @param props.connection
 * @param props.organizationId Unique identifier of the organization to be
 *   deleted (UUID)
 * @path /healthcarePlatform/systemAdmin/organizations/:organizationId
 * @accessor api.functional.healthcarePlatform.systemAdmin.organizations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the organization to be deleted (UUID) */
    organizationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/systemAdmin/organizations/:organizationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/systemAdmin/organizations/${encodeURIComponent(props.organizationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("organizationId")(() => typia.assert(props.organizationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
