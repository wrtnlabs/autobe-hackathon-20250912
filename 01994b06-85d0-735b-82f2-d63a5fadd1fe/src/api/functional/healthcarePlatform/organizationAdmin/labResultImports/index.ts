import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLabResultImport } from "../../../../structures/IHealthcarePlatformLabResultImport";
import { IPageIHealthcarePlatformLabResultImport } from "../../../../structures/IPageIHealthcarePlatformLabResultImport";

/**
 * List & search lab result imports with filtering, pagination, and error
 * diagnostics (healthcare_platform_lab_result_imports table).
 *
 * Search, filter, and paginate through laboratory result import records. The
 * endpoint provides healthcare organizations with a robust interface for
 * tracking every inbound laboratory result file or message, as described by the
 * healthcare_platform_lab_result_imports Prisma schema. This includes details
 * such as the linked organization, lab integration, import timestamp, parsing
 * outcomes, and error diagnostics.
 *
 * Advanced search parameters may include organization or lab integration ID,
 * parsed status, import date ranges, or error strings, supporting operational
 * analytics and audit investigations. The API is secured for access only by
 * authorized staff with organization-level permissions, as the data often
 * contains sensitive process metadata.
 *
 * This endpoint complements single-record retrieval APIs and supports batch
 * review of lab data import health, error patterns, and facilitates root cause
 * analysis when integration problems arise. Errors in filter criteria result in
 * parameter validation responses, and proper pagination ensures system
 * scalability.
 *
 * @param props.connection
 * @param props.body Filtering, pagination, and advanced query criteria for lab
 *   result imports.
 * @path /healthcarePlatform/organizationAdmin/labResultImports
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labResultImports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, pagination, and advanced query criteria for lab result
     * imports.
     */
    body: IHealthcarePlatformLabResultImport.IRequest;
  };
  export type Body = IHealthcarePlatformLabResultImport.IRequest;
  export type Response = IPageIHealthcarePlatformLabResultImport;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/labResultImports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/labResultImports";
  export const random = (): IPageIHealthcarePlatformLabResultImport =>
    typia.random<IPageIHealthcarePlatformLabResultImport>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single lab result import by labResultImportId
 * (healthcare_platform_lab_result_imports table).
 *
 * Fetch a detailed laboratory result import record by its unique
 * labResultImportId. This endpoint gives administrators, integration engineers,
 * and compliance officers precise information about the import eventâ€”covering
 * the raw payload reference, lab integration, imported timestamp, parsing
 * status and message, and linkage to broader analytics or audit flows.
 *
 * Controls are enforced for authorized organization staff only, as import logs
 * may reference PHI or regulated audit data. The endpoint supports
 * troubleshooting of import failures, root cause analysis for integration gaps,
 * and helps trace data lineage for investigations.
 *
 * Related endpoints for batch import query or processing work together for
 * comprehensive integration visibility. Errors in lookup or permission result
 * in standard error responses, supporting operational and compliance
 * transparency.
 *
 * @param props.connection
 * @param props.labResultImportId Lab result import record's unique identifier
 *   (UUID)
 * @path /healthcarePlatform/organizationAdmin/labResultImports/:labResultImportId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labResultImports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Lab result import record's unique identifier (UUID) */
    labResultImportId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLabResultImport;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/labResultImports/:labResultImportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/labResultImports/${encodeURIComponent(props.labResultImportId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabResultImport =>
    typia.random<IHealthcarePlatformLabResultImport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("labResultImportId")(() =>
        typia.assert(props.labResultImportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
