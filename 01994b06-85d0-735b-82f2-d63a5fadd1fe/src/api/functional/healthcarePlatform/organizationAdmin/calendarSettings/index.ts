import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformCalendarSetting } from "../../../../structures/IHealthcarePlatformCalendarSetting";
import { IPageIHealthcarePlatformCalendarSetting } from "../../../../structures/IPageIHealthcarePlatformCalendarSetting";
import { IHealthcarePlatformCalendarSettings } from "../../../../structures/IHealthcarePlatformCalendarSettings";

/**
 * Create a new calendar setting in the healthcare_platform_calendar_settings
 * table.
 *
 * Create a new calendar setting for an organization, department, or individual
 * resource by specifying the scheduling parameters, working hours, blackout
 * dates, and restriction rules for booking and cancellations. This operation
 * enables administrators to define resource or org-wide scheduling logic, which
 * is immediately incorporated into appointment workflows and resource
 * availability algorithms.
 *
 * Inputs are validated for data integrity, business rule conformity, and
 * conflict with existing settings. Creation is fully audit-logged for
 * compliance tracking. The resulting new calendar setting is returned with
 * complete details, allowing system UI to update available scheduling options
 * or resource calendars for staff and patients.
 *
 * Security and operational controls restrict this operation to users with
 * appropriate org-level privileges and prevent the accidental creation of
 * conflicting schedule rules or data integrity errors.
 *
 * @param props.connection
 * @param props.body Data for the new calendar setting including rules for
 *   scheduling, blackout dates, lead/cancellation windows, and resource
 *   assignments.
 * @path /healthcarePlatform/organizationAdmin/calendarSettings
 * @accessor api.functional.healthcarePlatform.organizationAdmin.calendarSettings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data for the new calendar setting including rules for scheduling,
     * blackout dates, lead/cancellation windows, and resource assignments.
     */
    body: IHealthcarePlatformCalendarSetting.ICreate;
  };
  export type Body = IHealthcarePlatformCalendarSetting.ICreate;
  export type Response = IHealthcarePlatformCalendarSetting;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/calendarSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/calendarSettings";
  export const random = (): IHealthcarePlatformCalendarSetting =>
    typia.random<IHealthcarePlatformCalendarSetting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filtered list of calendar settings from
 * healthcare_platform_calendar_settings.
 *
 * Retrieve a paginated, filtered list of calendar settings that define
 * scheduling rules for providers, rooms, equipment, or entire organizations.
 * The search supports filtering by resource type, resourceId, business days,
 * availability hours, and other configurable properties, as well as pagination
 * and sorting parameters for result navigation.
 *
 * This search operation is used by staff responsible for managing or auditing
 * scheduling setup, making it possible to locate and review specific calendar
 * settings, identify gaps, or assess rule effectiveness. System includes rate
 * limiting and role-based control to prevent excessive query loads. Output
 * includes summary details for each calendar setting, allowing further
 * drill-down. The returned data supports compliance, quality control, and
 * operational reporting workflows in the scheduling domain.
 *
 * The operation ensures all returned calendar settings are constrained to the
 * user's assigned organization or permitted scope. Error handling includes
 * validation of search queries and safe pagination controls.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for calendar settings list
 *   retrieval.
 * @path /healthcarePlatform/organizationAdmin/calendarSettings
 * @accessor api.functional.healthcarePlatform.organizationAdmin.calendarSettings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter parameters for calendar settings list retrieval. */
    body: IHealthcarePlatformCalendarSetting.IRequest;
  };
  export type Body = IHealthcarePlatformCalendarSetting.IRequest;
  export type Response = IPageIHealthcarePlatformCalendarSetting.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/calendarSettings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/calendarSettings";
  export const random = (): IPageIHealthcarePlatformCalendarSetting.ISummary =>
    typia.random<IPageIHealthcarePlatformCalendarSetting.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific calendar setting from
 * healthcare_platform_calendar_settings.
 *
 * Retrieve details for a calendar setting identified by calendarSettingId. This
 * detailed operation provides all the attributes necessary for scheduling
 * system integration and management, including business day definitions,
 * standard availability windows, special blackout dates, resource assignments,
 * cancellation and booking restrictions, and organizational assignment
 * context.
 *
 * Usage supports operational dashboard display, in-depth scheduling system
 * review, or configuration workflows needed by scheduling administrators.
 * Output includes all details as found in the
 * healthcare_platform_calendar_settings table. Security controls ensure that
 * only authorized users from the correct organization have view access. All
 * requests are audit-logged for compliance monitoring.
 *
 * If the requested calendar setting does not exist or is out of scope, the
 * operation returns an informative error indicating the issue, and no data is
 * exposed outside the permitted scope.
 *
 * @param props.connection
 * @param props.calendarSettingId Unique identifier for the calendar setting to
 *   retrieve.
 * @path /healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.calendarSettings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the calendar setting to retrieve. */
    calendarSettingId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformCalendarSetting;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/calendarSettings/${encodeURIComponent(props.calendarSettingId ?? "null")}`;
  export const random = (): IHealthcarePlatformCalendarSetting =>
    typia.random<IHealthcarePlatformCalendarSetting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarSettingId")(() =>
        typia.assert(props.calendarSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing calendar setting in the
 * healthcare_platform_calendar_settings table.
 *
 * Update core scheduling or calendar settings for a health organization or
 * provider resource. The API allows organization administrators to modify
 * open/close hours, business/available days, minimum advance booking and
 * cancellation periods, specific resource blackout dates (e.g., vacations or
 * maintenance), and locale parameters (such as date/time formats) that affect
 * provider and patient scheduling.
 *
 * The underlying healthcare_platform_calendar_settings table only allows these
 * fields to be updated; organizational-level and resource-type rules are
 * enforced, and changes are logged for audit. All updates are versioned by
 * timestamp and last update field for regulatory compliance. This operation
 * must validate that only authorized administrators for the organization or
 * resource may perform the update, and that all changed fields conform to
 * acceptable values (e.g., only valid day names for business_days, correctly
 * formatted availability_hours, etc).
 *
 * This operation is used as part of the scheduling administrative workflow and
 * may affect all subsequent bookings, appointment reminders, and portal/in-app
 * availability displays. It is not used for soft deletes or recovery, only for
 * formal direct updates. Changes made are visible to appointment schedulers,
 * admins, and may be reflected in patient self-service booking tools.
 *
 * @param props.connection
 * @param props.calendarSettingId Unique identifier of the calendar setting
 *   record to update.
 * @param props.body New scheduling and business configuration for this calendar
 *   setting.
 * @path /healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.calendarSettings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the calendar setting record to update. */
    calendarSettingId: string & tags.Format<"uuid">;

    /** New scheduling and business configuration for this calendar setting. */
    body: IHealthcarePlatformCalendarSettings.IUpdate;
  };
  export type Body = IHealthcarePlatformCalendarSettings.IUpdate;
  export type Response = IHealthcarePlatformCalendarSettings;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/calendarSettings/${encodeURIComponent(props.calendarSettingId ?? "null")}`;
  export const random = (): IHealthcarePlatformCalendarSettings =>
    typia.random<IHealthcarePlatformCalendarSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarSettingId")(() =>
        typia.assert(props.calendarSettingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a calendar setting record in the
 * healthcare_platform_calendar_settings table.
 *
 * This API endpoint performs a soft delete of an existing calendar setting
 * entity. When an administrator invokes this operation, the deleted_at field of
 * the healthcare_platform_calendar_settings record is set to the current
 * timestamp, making the setting inactive in user and scheduling workflows while
 * preserving it for compliance audits and restoration if permitted.
 *
 * Only organization administrators are permitted to delete calendar settings,
 * and authorization checks must be enforced before marking a record as deleted.
 * All deletion events are logged in compliance with healthcare audit
 * requirements. This operation is used when retiring old resource schedules,
 * business hour exceptions, or no longer applicable booking rules. Hard
 * deletion (physical removal from the table) is not performed to meet
 * regulatory data retention needs.
 *
 * @param props.connection
 * @param props.calendarSettingId Unique identifier of the calendar setting to
 *   delete (soft-delete by marking deleted_at).
 * @path /healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.calendarSettings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the calendar setting to delete (soft-delete by
     * marking deleted_at).
     */
    calendarSettingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/calendarSettings/:calendarSettingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/calendarSettings/${encodeURIComponent(props.calendarSettingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("calendarSettingId")(() =>
        typia.assert(props.calendarSettingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
