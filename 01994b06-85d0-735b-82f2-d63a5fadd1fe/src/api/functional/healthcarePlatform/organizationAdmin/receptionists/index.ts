import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformReceptionist } from "../../../../structures/IHealthcarePlatformReceptionist";
import { IPageIHealthcarePlatformReceptionist } from "../../../../structures/IPageIHealthcarePlatformReceptionist";

/**
 * Create a new receptionist account in healthcare_platform_receptionists.
 *
 * Creates a new receptionist account in the healthcarePlatform system.
 * Receptionist users are responsible for appointment scheduling, patient
 * check-in/out, and non-clinical desk operations.
 *
 * The operation validates uniqueness of the email address and requires
 * admin-level permission, as receptionist creation impacts scheduling and
 * front-desk workflows. Created accounts include legal name, business email,
 * (optional) contact number, and are auditable via creation timestamp and
 * system logs.
 *
 * Key fields and business rules are defined in the Prisma schema's
 * healthcare_platform_receptionists model: the 'email' field must be unique;
 * 'full_name' is required for identification/notifications;
 * 'created_at'/'updated_at' are set automatically. Soft-delete and archival for
 * compliance is enabled via 'deleted_at'.
 *
 * Appropriate error handling is enforced for duplicate accounts and missing
 * required fields. This endpoint is typically used by organization
 * administrators. Related operations include updating or deleting a
 * receptionist, or listing all currently active receptionists.
 *
 * @param props.connection
 * @param props.body Information required to create a new healthcarePlatform
 *   receptionist
 * @path /healthcarePlatform/organizationAdmin/receptionists
 * @accessor api.functional.healthcarePlatform.organizationAdmin.receptionists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new healthcarePlatform receptionist */
    body: IHealthcarePlatformReceptionist.ICreate;
  };
  export type Body = IHealthcarePlatformReceptionist.ICreate;
  export type Response = IHealthcarePlatformReceptionist;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/receptionists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/receptionists";
  export const random = (): IHealthcarePlatformReceptionist =>
    typia.random<IHealthcarePlatformReceptionist>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search all receptionists with advanced filtering and paging.
 *
 * Search and retrieve a paginated, optionally filtered and sorted list of
 * receptionists from the healthcare_platform_receptionists table. This endpoint
 * supports complex queries for administrative users, including filtering by
 * name, email, creation date, and status per the schema specifications.
 *
 * The system enforces proper permissionsâ€”typically only systemAdmin or
 * organizationAdmin can access all receptionist records. Sensitive receptionist
 * information is returned in adherence with privacy policies and must be
 * handled according to organization policy.
 *
 * Response includes summary data for each receptionist, optimized for
 * management use (e.g., bulk communication, scheduling, access reviews). Errors
 * are surfaced when query parameters are invalid or when authentication is
 * insufficient. Related endpoints include creation, update, and single
 * receptionist detail retrieval for granular user management.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for receptionist
 *   list queries.
 * @path /healthcarePlatform/organizationAdmin/receptionists
 * @accessor api.functional.healthcarePlatform.organizationAdmin.receptionists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for receptionist list
     * queries.
     */
    body: IHealthcarePlatformReceptionist.IRequest;
  };
  export type Body = IHealthcarePlatformReceptionist.IRequest;
  export type Response = IPageIHealthcarePlatformReceptionist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/receptionists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/receptionists";
  export const random = (): IPageIHealthcarePlatformReceptionist.ISummary =>
    typia.random<IPageIHealthcarePlatformReceptionist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific receptionist from the
 * healthcare_platform_receptionists table.
 *
 * Retrieve the complete profile and status information for a specific
 * receptionist. This operation is used by administrators to verify, audit, or
 * manage an individual receptionist based on their unique identifier.
 * Accessible to systemAdmin or organizationAdmin users, the endpoint fetches
 * all configured fields as described in the schema, including contact
 * information, name, timestamps, and deletion status.
 *
 * Security is enforced, allowing only privileged users to access full
 * receptionist record details. The returned object includes all information
 * needed for downstream actions such as editing, auditing, or account lifecycle
 * management.
 *
 * Validation ensures the receptionist exists and is not deleted; otherwise, an
 * error is reported. This endpoint is foundational for receptionist personnel
 * management and compliance verification within the organization.
 *
 * @param props.connection
 * @param props.receptionistId Unique identifier of the receptionist to
 *   retrieve.
 * @path /healthcarePlatform/organizationAdmin/receptionists/:receptionistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.receptionists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the receptionist to retrieve. */
    receptionistId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformReceptionist;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/receptionists/:receptionistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/receptionists/${encodeURIComponent(props.receptionistId ?? "null")}`;
  export const random = (): IHealthcarePlatformReceptionist =>
    typia.random<IHealthcarePlatformReceptionist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("receptionistId")(() => typia.assert(props.receptionistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing receptionist account by receptionistId in
 * healthcare_platform_receptionists.
 *
 * Updates data for an existing receptionist in the healthcarePlatform,
 * including fields such as full_name, phone, and potentially other
 * organization-specific attributes. The receptionistId path parameter
 * identifies the specific account.
 *
 * Business logic ensures the integrity of data: only authorized administrators
 * (systemAdmin or organizationAdmin) can update receptionist details, and any
 * modification is tracked via updated_at and audit logging. The operation
 * enforces that email remains unique (if updatable) and checks for proper
 * formatting of phone numbers. Attempts to update non-existent accounts or with
 * invalid data yield clear error messages.
 *
 * The receptionist schema as defined in Prisma supports soft deletion via
 * deleted_at and tracking of all creation/update times. Related API operations
 * are receptionist creation and deletion.
 *
 * @param props.connection
 * @param props.receptionistId Unique identifier of the target receptionist
 * @param props.body Updated information for the receptionist user
 * @path /healthcarePlatform/organizationAdmin/receptionists/:receptionistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.receptionists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target receptionist */
    receptionistId: string & tags.Format<"uuid">;

    /** Updated information for the receptionist user */
    body: IHealthcarePlatformReceptionist.IUpdate;
  };
  export type Body = IHealthcarePlatformReceptionist.IUpdate;
  export type Response = IHealthcarePlatformReceptionist;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/receptionists/:receptionistId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/receptionists/${encodeURIComponent(props.receptionistId ?? "null")}`;
  export const random = (): IHealthcarePlatformReceptionist =>
    typia.random<IHealthcarePlatformReceptionist>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("receptionistId")(() => typia.assert(props.receptionistId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a receptionist account by receptionistId (hard delete) in
 * healthcare_platform_receptionists.
 *
 * Permanently deletes the specified receptionist entry from the database (hard
 * delete, not soft). The receptionistId path parameter selects the target
 * account. Only organization or system-level administrators can execute this
 * operation.
 *
 * All deletions are subject to compliance and data retention policy. If the
 * account is linked to ongoing workflows or must be retained for audit, the
 * system will block deletion and issue a clear business error. The operation
 * returns no response body upon success, providing only standard HTTP status
 * confirmation.
 *
 * Deletion is logged in system audit trails for regulatory compliance.
 * Associated scheduling records should be reassigned or reviewed prior to
 * deletion. Related operations include creation and updating of receptionist
 * records.
 *
 * @param props.connection
 * @param props.receptionistId Unique identifier of the receptionist to delete
 * @path /healthcarePlatform/organizationAdmin/receptionists/:receptionistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.receptionists.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the receptionist to delete */
    receptionistId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/receptionists/:receptionistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/receptionists/${encodeURIComponent(props.receptionistId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("receptionistId")(() => typia.assert(props.receptionistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
