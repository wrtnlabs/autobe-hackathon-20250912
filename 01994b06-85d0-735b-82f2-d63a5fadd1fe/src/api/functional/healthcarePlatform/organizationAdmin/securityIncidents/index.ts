import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformSecurityIncident } from "../../../../structures/IHealthcarePlatformSecurityIncident";
import { IPageIHealthcarePlatformSecurityIncident } from "../../../../structures/IPageIHealthcarePlatformSecurityIncident";

/**
 * Search and retrieve a paginated, filterable list of security incidents from
 * healthcare_platform_security_incidents.
 *
 * Retrieve a list of security incidents, including type (e.g., FAILED_LOGIN,
 * PHI_EXFIL, BREACH_SUSPECTED), status (OPEN, INVESTIGATING, RESOLVED, etc.),
 * severity, summary, classification, open/close timestamps, and linked
 * user/organization metadata as permitted by the Prisma schema.
 *
 * The endpoint is intended for platform and organization administrators to
 * monitor security posture, respond to incidents, and document investigative
 * workflows. Filtering supports incident_type, date range, status, and
 * severity. Access is restricted—only appropriate admins may query logs within
 * their organization (systemAdmin can view all records).
 *
 * Security: All accesses to this endpoint are themselves logged in the audit
 * trail, with robust permission checking. Only metadata—never PHI—is shown in
 * results. Works with the single incident detail operation for drill-down.
 *
 * Standard compliant error handling is provided for access restriction, invalid
 * query parameters, or organizational isolation violations.
 *
 * @param props.connection
 * @param props.body Parameters for filtering, searching, paginating, and
 *   sorting security incidents.
 * @path /healthcarePlatform/organizationAdmin/securityIncidents
 * @accessor api.functional.healthcarePlatform.organizationAdmin.securityIncidents.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Parameters for filtering, searching, paginating, and sorting security
     * incidents.
     */
    body: IHealthcarePlatformSecurityIncident.IRequest;
  };
  export type Body = IHealthcarePlatformSecurityIncident.IRequest;
  export type Response = IPageIHealthcarePlatformSecurityIncident.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/securityIncidents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/securityIncidents";
  export const random = (): IPageIHealthcarePlatformSecurityIncident.ISummary =>
    typia.random<IPageIHealthcarePlatformSecurityIncident.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific security incident from
 * healthcare_platform_security_incidents by ID.
 *
 * Retrieve the detailed metadata for a specific security incident, including
 * type, status, summary, incident classification, timestamps, severity,
 * user/organization references, and all available incident fields except for
 * PHI data.
 *
 * Access is restricted to privileged system and organization admins for
 * compliance. Each query is logged as an audit event. Not found or forbidden
 * errors are returned for missing or unauthorized securityIncidentId. This
 * endpoint is designed for use in parallel with the security incident search
 * operation to enable incident triage.
 *
 * Records are isolated to the requester's organization unless systemAdmin. All
 * user access is logged per compliance policy.
 *
 * @param props.connection
 * @param props.securityIncidentId Unique identifier (UUID) of the security
 *   incident to retrieve.
 * @path /healthcarePlatform/organizationAdmin/securityIncidents/:securityIncidentId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.securityIncidents.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the security incident to retrieve. */
    securityIncidentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformSecurityIncident;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/securityIncidents/:securityIncidentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/securityIncidents/${encodeURIComponent(props.securityIncidentId ?? "null")}`;
  export const random = (): IHealthcarePlatformSecurityIncident =>
    typia.random<IHealthcarePlatformSecurityIncident>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("securityIncidentId")(() =>
        typia.assert(props.securityIncidentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
