import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformResourceSchedule } from "../../../../structures/IHealthcarePlatformResourceSchedule";
import { IPageIHealthcarePlatformResourceSchedule } from "../../../../structures/IPageIHealthcarePlatformResourceSchedule";

/**
 * Create a new resource schedule for provider/room/equipment availability
 * (healthcare_platform_resource_schedules).
 *
 * Creates a new resource schedule for a provider, room, or equipment in a
 * healthcare organization. This is a key administrative capability and is
 * restricted to scheduling admins or org-level staff as per RBAC rules.
 * Resource schedules define the available hours and recurrence for
 * organizational assets.
 *
 * The operation corresponds to the healthcare_platform_resource_schedules
 * table, utilizing fields such as resource_type, resource_id,
 * available_start_time, available_end_time, recurrence_pattern, and
 * exception_dates. The system ensures no overlapping schedules for the same
 * resource and that all times fall within organization-wide calendar
 * constraints.
 *
 * Security checks ensure only properly assigned roles can execute this
 * operation; the audit trail will store the responsible user and timestamp.
 * Related endpoints for updating or deleting resource schedules can be used for
 * lifecycle management. Error handling includes uniqueness validation and
 * overlap detection, with business logic enforcing time and policy compliance.
 *
 * @param props.connection
 * @param props.body Request body describing the resource, available time
 *   windows, and recurrence/exception details for the resource schedule.
 * @path /healthcarePlatform/organizationAdmin/resourceSchedules
 * @accessor api.functional.healthcarePlatform.organizationAdmin.resourceSchedules.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Request body describing the resource, available time windows, and
     * recurrence/exception details for the resource schedule.
     */
    body: IHealthcarePlatformResourceSchedule.ICreate;
  };
  export type Body = IHealthcarePlatformResourceSchedule.ICreate;
  export type Response = IHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/resourceSchedules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/resourceSchedules";
  export const random = (): IHealthcarePlatformResourceSchedule =>
    typia.random<IHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all resource schedules with search and pagination in
 * healthcare_platform_resource_schedules table.
 *
 * Allows system-level or organization-level administrators to list all
 * configured resource schedules, with support for advanced filtering (by
 * organization, resource type or ID, availability windows, recurrence), paging,
 * and sorting. Only non-soft-deleted records will be returned.
 *
 * The response provides schedule metadata needed for administrative decision
 * making and calendar UI construction. Security is enforced by role-based
 * access restriction. Related endpoints include single resource schedule
 * retrieval (GET), creation (POST), update (PUT), and deletion (DELETE).
 *
 * @param props.connection
 * @param props.body Resource schedule search and pagination parameters.
 * @path /healthcarePlatform/organizationAdmin/resourceSchedules
 * @accessor api.functional.healthcarePlatform.organizationAdmin.resourceSchedules.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Resource schedule search and pagination parameters. */
    body: IHealthcarePlatformResourceSchedule.IRequest;
  };
  export type Body = IHealthcarePlatformResourceSchedule.IRequest;
  export type Response = IPageIHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/resourceSchedules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/resourceSchedules";
  export const random = (): IPageIHealthcarePlatformResourceSchedule =>
    typia.random<IPageIHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a single resource schedule in
 * healthcare_platform_resource_schedules table.
 *
 * Permits privileged administrators to view detailed configuration of a
 * specific resource schedule entry identified by resourceScheduleId, which must
 * be a valid UUID. The response includes all resource schedule configuration
 * fields, suitable for display in administrative dashboards, resource auditing,
 * or advanced scheduling logic.
 *
 * If the entry does not exist or has been soft-deleted, an error will be
 * returned. Related endpoints: creation (POST), update (PUT), deletion
 * (DELETE), and schedule list (PATCH/GET).
 *
 * @param props.connection
 * @param props.resourceScheduleId Unique identifier of the resource schedule to
 *   retrieve
 * @path /healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.resourceSchedules.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the resource schedule to retrieve */
    resourceScheduleId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/resourceSchedules/${encodeURIComponent(props.resourceScheduleId ?? "null")}`;
  export const random = (): IHealthcarePlatformResourceSchedule =>
    typia.random<IHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resourceScheduleId")(() =>
        typia.assert(props.resourceScheduleId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update resource schedule details (healthcare_platform_resource_schedules) by
 * ID.
 *
 * Updates an existing resource schedule identified by resourceScheduleId,
 * allowing modification of the available start/end times, resource assignment,
 * recurrence pattern, and exceptions. This endpoint is critical for adapting
 * room/provider/equipment schedules as operational needs change.
 *
 * This operation is tied to the healthcare_platform_resource_schedules table
 * and requires resourceScheduleId as a path parameter. Input structure follows
 * IHealthcarePlatformResourceSchedule.IUpdate. Uniqueness and overlap rules are
 * strictly checked, and changes are logged in the organization’s audit
 * history.
 *
 * Security is enforced so only appropriate org-level scheduling staff can
 * perform updates. Validation logic prevents overlapping time slots or policy
 * violations. This may be used in combination with the erase operation for full
 * lifecycle resource management. Errors are returned if an update would cause
 * an invalid state.
 *
 * @param props.connection
 * @param props.resourceScheduleId UUID of the resource schedule to update.
 * @param props.body Update details and properties for the target resource
 *   schedule.
 * @path /healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.resourceSchedules.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the resource schedule to update. */
    resourceScheduleId: string & tags.Format<"uuid">;

    /** Update details and properties for the target resource schedule. */
    body: IHealthcarePlatformResourceSchedule.IUpdate;
  };
  export type Body = IHealthcarePlatformResourceSchedule.IUpdate;
  export type Response = IHealthcarePlatformResourceSchedule;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/resourceSchedules/${encodeURIComponent(props.resourceScheduleId ?? "null")}`;
  export const random = (): IHealthcarePlatformResourceSchedule =>
    typia.random<IHealthcarePlatformResourceSchedule>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resourceScheduleId")(() =>
        typia.assert(props.resourceScheduleId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a resource schedule
 * (healthcare_platform_resource_schedules) by ID.
 *
 * Deletes an existing resource schedule identified by resourceScheduleId. This
 * is a hard delete operation, removing the schedule record and disallowing
 * further use in booking logic. Directly manipulates the
 * healthcare_platform_resource_schedules table. No request body is needed.
 *
 * Appropriate for administrative staff needing to retire or clean up outdated
 * provider, room, or equipment availabilities. Security policies ensure only
 * authorized users at the organization level may erase schedules. The system
 * will log who performed the deletion for auditing purposes. Any dependent
 * scheduled appointments must be handled or migrated by upstream business
 * logic.
 *
 * Errors are returned if the schedule does not exist or if deletion is not
 * permitted due to policy or integrations.
 *
 * @param props.connection
 * @param props.resourceScheduleId UUID of the resource schedule to delete.
 * @path /healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.resourceSchedules.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the resource schedule to delete. */
    resourceScheduleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/resourceSchedules/:resourceScheduleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/resourceSchedules/${encodeURIComponent(props.resourceScheduleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resourceScheduleId")(() =>
        typia.assert(props.resourceScheduleId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
