import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAppointmentWaitlist } from "../../../../../structures/IHealthcarePlatformAppointmentWaitlist";
import { IPageIHealthcarePlatformAppointmentWaitlist } from "../../../../../structures/IPageIHealthcarePlatformAppointmentWaitlist";

/**
 * Add a waitlist entry for a patient to a specific appointment (join waitlist).
 *
 * Create a new waitlist entry for a patient on a particular appointment.
 * Patients may self-join the waitlist for an appointment that is currently
 * full; authorized staff can add patients on their behalf in accordance with
 * scheduling policy.
 *
 * Business rules validate that a patient cannot be waitlisted more than once
 * per appointment, and that organization, department, and appointment status
 * permit further waitlisting. All creation events are properly audited, with
 * join time and current status set per schema documentation. Sensitive patient
 * information, if present in the request, is only processed by authorized
 * roles.
 *
 * Implements compliance with organizational scheduling policies and privacy
 * protections, with all events creating audit logs as enforced by the
 * healthcare platform's business rules. Errors are returned if the appointment
 * does not permit further waitlisting or if business policy is violated.
 *
 * @param props.connection
 * @param props.appointmentId Unique identifier for the target appointment where
 *   waitlisting is requested.
 * @param props.body Patient and contextual information needed to join the
 *   waitlist.
 * @path /healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointments.waitlists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier for the target appointment where waitlisting is
     * requested.
     */
    appointmentId: string & tags.Format<"uuid">;

    /** Patient and contextual information needed to join the waitlist. */
    body: IHealthcarePlatformAppointmentWaitlist.ICreate;
  };
  export type Body = IHealthcarePlatformAppointmentWaitlist.ICreate;
  export type Response = IHealthcarePlatformAppointmentWaitlist;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/appointments/${encodeURIComponent(props.appointmentId ?? "null")}/waitlists`;
  export const random = (): IHealthcarePlatformAppointmentWaitlist =>
    typia.random<IHealthcarePlatformAppointmentWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appointmentId")(() => typia.assert(props.appointmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the waitlist for a given appointment from the appointment waitlists
 * table.
 *
 * Retrieve the waitlist for a specified appointment on the healthcare platform,
 * returning a paginated, filtered list of users waiting for a slot. The
 * operation supports advanced query features such as sorting by join time or
 * status and filtering by patient or waitlist entry status.
 *
 * Authorization is enforced according to organization, department, or patient
 * context, ensuring callers see only the waitlist entries they are permitted to
 * access under strict RBAC. Patients only see their own status, while
 * appropriate staff (receptionists, nurses, admins) can view the entire list
 * for coordination purposes. Sensitive patient identifiers are filtered
 * according to user role.
 *
 * As per schema documentation, this retrieves the
 * `healthcare_platform_appointment_waitlists` related to an `appointmentId`,
 * providing audit and compliance features so that data access is properly
 * monitored and restricted. Pagination ensures performant retrieval even for
 * busy time slots. Handling includes validation of appointmentId and clear
 * error signaling for restricted access.
 *
 * @param props.connection
 * @param props.appointmentId Unique identifier of the appointment for which to
 *   retrieve the waitlist.
 * @param props.body Query and pagination/filter parameters for searching the
 *   waitlist.
 * @path /healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointments.waitlists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the appointment for which to retrieve the
     * waitlist.
     */
    appointmentId: string & tags.Format<"uuid">;

    /** Query and pagination/filter parameters for searching the waitlist. */
    body: IHealthcarePlatformAppointmentWaitlist.IRequest;
  };
  export type Body = IHealthcarePlatformAppointmentWaitlist.IRequest;
  export type Response = IPageIHealthcarePlatformAppointmentWaitlist.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/appointments/${encodeURIComponent(props.appointmentId ?? "null")}/waitlists`;
  export const random =
    (): IPageIHealthcarePlatformAppointmentWaitlist.ISummary =>
      typia.random<IPageIHealthcarePlatformAppointmentWaitlist.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appointmentId")(() => typia.assert(props.appointmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific appointment waitlist entry.
 *
 * Retrieve detailed information for an individual appointment waitlist entry,
 * including patient, join time, current status (active, promoted, removed), and
 * relevant patient metadata where authorized. Sensitive fields are presented
 * only to authorized roles per privacy and compliance constraints.
 *
 * User permissions are strictly enforcedâ€”patients can only view their own
 * waitlist entries, while organization and department staff with appropriate
 * scheduling or administrative roles (e.g., receptionist, department head) can
 * access any entry within their allowed scope. Every access is logged and
 * auditable to support HIPAA/data compliance.
 *
 * Handles validation on appointmentId and waitlistId, returns appropriate error
 * messages for invalid, restricted, or not found entries. This is a
 * single-resource GET operation referencing
 * healthcare_platform_appointment_waitlists as described in the Prisma schema
 * and ERD.
 *
 * @param props.connection
 * @param props.appointmentId Unique identifier for the appointment containing
 *   the waitlist.
 * @param props.waitlistId Unique identifier of the waitlist entry to retrieve.
 * @path /healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointments.waitlists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the appointment containing the waitlist. */
    appointmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the waitlist entry to retrieve. */
    waitlistId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAppointmentWaitlist;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/appointments/${encodeURIComponent(props.appointmentId ?? "null")}/waitlists/${encodeURIComponent(props.waitlistId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentWaitlist =>
    typia.random<IHealthcarePlatformAppointmentWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appointmentId")(() => typia.assert(props.appointmentId));
      assert.param("waitlistId")(() => typia.assert(props.waitlistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Edit a specific waitlist entry for an appointment.
 *
 * Update a specific entry on an appointment's waitlist, such as by changing
 * status (e.g., promoted when a slot opens, or removed on patient/clinic
 * action), updating rationale, or other permissible fields per system business
 * rules. The operation is carefully restricted under RBAC; only staff with
 * authority or the patient for their own record may make changes.
 *
 * All changes are audited to satisfy compliance, and unauthorized edits result
 * in clear business errors. Validates presence of both appointmentId and
 * waitlistId, enforces that edits are permitted by current status and complies
 * with privacy and safety rules consistent with Prisma model documentation.
 *
 * Operation references the `healthcare_platform_appointment_waitlists` table
 * and its relationships; all successful changes generate audit logs and enforce
 * any derived business policy such as automatic removal from waitlists on
 * promotion.
 *
 * @param props.connection
 * @param props.appointmentId Unique identifier for the appointment containing
 *   the waitlist entry.
 * @param props.waitlistId Unique identifier of the waitlist entry to update.
 * @param props.body Fields to update on the waitlist entry, including
 *   status/rationale.
 * @path /healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointments.waitlists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the appointment containing the waitlist entry. */
    appointmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the waitlist entry to update. */
    waitlistId: string & tags.Format<"uuid">;

    /** Fields to update on the waitlist entry, including status/rationale. */
    body: IHealthcarePlatformAppointmentWaitlist.IUpdate;
  };
  export type Body = IHealthcarePlatformAppointmentWaitlist.IUpdate;
  export type Response = IHealthcarePlatformAppointmentWaitlist;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/appointments/${encodeURIComponent(props.appointmentId ?? "null")}/waitlists/${encodeURIComponent(props.waitlistId ?? "null")}`;
  export const random = (): IHealthcarePlatformAppointmentWaitlist =>
    typia.random<IHealthcarePlatformAppointmentWaitlist>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appointmentId")(() => typia.assert(props.appointmentId));
      assert.param("waitlistId")(() => typia.assert(props.waitlistId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a patient waitlist entry from a specific appointment (hard delete,
 * Scheduling).
 *
 * This API operation is used to delete (hard erase) a patient's waitlist entry
 * from a specific appointment's waitlist in the healthcarePlatform system.
 *
 * It is primarily intended for administrative staff, receptionists, or system
 * automations where a patient no longer needs to remain on the waitlist (e.g.,
 * patient schedules elsewhere, is promoted, or cancels their interest). The
 * operation ensures compliance by fully removing the waitlist record from the
 * healthcare_platform_appointment_waitlists table, which does not feature a
 * soft delete markerâ€”deletion is permanent and cannot be recovered.
 *
 * Security considerations: Only authorized staff or automation with sufficient
 * privileges may perform this operation. The action is auditable and would
 * typically be recorded in the platformâ€™s audit log under appointment
 * management workflows.
 *
 * Validation/business rules: Attempting to erase a non-existent or
 * already-deleted waitlistId yields a suitable error response. Erasures
 * associated with active appointments (still scheduled) are permitted; removing
 * waitlist entries for past/canceled appointments may have further policy or
 * audit consequences as per organizational configuration.
 *
 * Related operations: Staff may query all waitlist entries for an appointment
 * before erasing or remove multiple via separate API calls. This operation only
 * affects the targeted waitlist record for a given appointment.
 *
 * @param props.connection
 * @param props.appointmentId Unique identifier of the target appointment for
 *   which the waitlist entry should be removed.
 * @param props.waitlistId Unique identifier of the patient's waitlist entry to
 *   be deleted for the given appointment.
 * @path /healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.appointments.waitlists.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the target appointment for which the waitlist
     * entry should be removed.
     */
    appointmentId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the patient's waitlist entry to be deleted for
     * the given appointment.
     */
    waitlistId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/appointments/:appointmentId/waitlists/:waitlistId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/appointments/${encodeURIComponent(props.appointmentId ?? "null")}/waitlists/${encodeURIComponent(props.waitlistId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appointmentId")(() => typia.assert(props.appointmentId));
      assert.param("waitlistId")(() => typia.assert(props.waitlistId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
