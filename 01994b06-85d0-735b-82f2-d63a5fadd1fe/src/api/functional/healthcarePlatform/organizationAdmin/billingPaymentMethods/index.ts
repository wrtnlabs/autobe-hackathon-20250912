import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformBillingPaymentMethod } from "../../../../structures/IHealthcarePlatformBillingPaymentMethod";

/**
 * Retrieve detailed information for a specific billing payment method
 * (healthcare_platform_billing_payment_methods table) in the healthcare
 * platform.
 *
 * Retrieves the detailed record for a specified billing payment method based on
 * its unique identifier. Typical usage scenarios include updating payment
 * method configuration in administrative screens, validating patient payment
 * options during invoicing, and supporting payment processing backend
 * workflows. Returns all non-sensitive fields of the payment method entity as
 * defined in the schema.
 *
 * This operation enforces role-based access, disallowing unauthorized users
 * from accessing inactive or non-permitted methods (such as those under
 * configuration or audit hold). Linked operations include payment method
 * listing, updating, and assignment to billing processes.
 *
 * Any attempt to access a nonexistent or restricted payment method returns an
 * appropriate authorization or not found error.
 *
 * @param props.connection
 * @param props.billingPaymentMethodId Unique identifier of the billing payment
 *   method to retrieve.
 * @path /healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingPaymentMethods.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the billing payment method to retrieve. */
    billingPaymentMethodId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformBillingPaymentMethod;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingPaymentMethods/${encodeURIComponent(props.billingPaymentMethodId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingPaymentMethod =>
    typia.random<IHealthcarePlatformBillingPaymentMethod>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingPaymentMethodId")(() =>
        typia.assert(props.billingPaymentMethodId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details or activation status of a billing payment method
 * (healthcare_platform_billing_payment_methods) by ID.
 *
 * Update an existing billing payment method for an organization by its unique
 * ID. Fields that can be updated include provider name, integration details,
 * active or disabled status, and other configuration fields per business
 * requirements.
 *
 * All updates are fully audited and only available to users with
 * 'organizationAdmin' privileges. Attempts to change method type to a duplicate
 * combination or to reference an unknown payment method will result in a
 * validation error. This operation strictly validates that the record exists
 * and belongs to the user's organization context before applying changes.
 *
 * Provides granular control over payment options for staff and patients, with
 * immediate effect on payment acceptance within the organization. PCI
 * compliance and data security standards are enforced at all times.
 *
 * @param props.connection
 * @param props.billingPaymentMethodId The unique identifier of the target
 *   billing payment method to update.
 * @param props.body Update parameters for an existing billing payment method,
 *   such as provider, integration settings, or enabled status.
 * @path /healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingPaymentMethods.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the target billing payment method to update. */
    billingPaymentMethodId: string & tags.Format<"uuid">;

    /**
     * Update parameters for an existing billing payment method, such as
     * provider, integration settings, or enabled status.
     */
    body: IHealthcarePlatformBillingPaymentMethod.IUpdate;
  };
  export type Body = IHealthcarePlatformBillingPaymentMethod.IUpdate;
  export type Response = IHealthcarePlatformBillingPaymentMethod;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/billingPaymentMethods/${encodeURIComponent(props.billingPaymentMethodId ?? "null")}`;
  export const random = (): IHealthcarePlatformBillingPaymentMethod =>
    typia.random<IHealthcarePlatformBillingPaymentMethod>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingPaymentMethodId")(() =>
        typia.assert(props.billingPaymentMethodId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an existing billing payment method
 * (healthcare_platform_billing_payment_methods) by ID.
 *
 * Soft-delete a billing payment method by its unique ID, marking the deleted_at
 * timestamp for compliance retention. This disables the payment method for all
 * new invoice and payment workflows within the organization, while maintaining
 * data for audit and regulatory review.
 *
 * Only organization administrators may perform this action. Attempts to delete
 * non-existent or already-deleted methods return an appropriate error response.
 * Associated financial records remain unaffected.
 *
 * The operation enforces strict organizational isolation and audits all
 * deletion requests as required for PCI and healthcare compliance. Deleted
 * payment methods can be reviewed by administrators via audit logs or
 * admin-only list views.
 *
 * @param props.connection
 * @param props.billingPaymentMethodId The unique identifier of the target
 *   billing payment method to delete.
 * @path /healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingPaymentMethods.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the target billing payment method to delete. */
    billingPaymentMethodId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/billingPaymentMethods/:billingPaymentMethodId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/billingPaymentMethods/${encodeURIComponent(props.billingPaymentMethodId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("billingPaymentMethodId")(() =>
        typia.assert(props.billingPaymentMethodId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new billing payment method record
 * (healthcare_platform_billing_payment_methods) for an organization.
 *
 * Create and register a new billing payment method for a specific organization.
 * This includes information such as method type (credit card, ACH, insurance,
 * etc.), optional provider name, integration details for payment gateways,
 * activation status, and links to the parent organization for data isolation.
 *
 * Upon creation, the method is available for invoice and payment flows within
 * the organization. All created payment methods are subject to organizational
 * policy and may be edited or deactivated later. Audit trails are maintained
 * for all configuration changes.
 *
 * Sensitive provider/integration information is securely handled and returned
 * only as necessary. Security rules require that only users with the
 * 'organizationAdmin' role can create new billing payment methods. Attempting
 * to register a duplicate method type/provider will return a validation error.
 * All inputs are strictly validated per business and PCI requirements.
 *
 * @param props.connection
 * @param props.body Creation parameters for a billing payment method, including
 *   type, provider, integration settings, and activation status.
 * @path /healthcarePlatform/organizationAdmin/billingPaymentMethods
 * @accessor api.functional.healthcarePlatform.organizationAdmin.billingPaymentMethods.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation parameters for a billing payment method, including type,
     * provider, integration settings, and activation status.
     */
    body: IHealthcarePlatformBillingPaymentMethod.ICreate;
  };
  export type Body = IHealthcarePlatformBillingPaymentMethod.ICreate;
  export type Response = IHealthcarePlatformBillingPaymentMethod;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/billingPaymentMethods",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/billingPaymentMethods";
  export const random = (): IHealthcarePlatformBillingPaymentMethod =>
    typia.random<IHealthcarePlatformBillingPaymentMethod>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
