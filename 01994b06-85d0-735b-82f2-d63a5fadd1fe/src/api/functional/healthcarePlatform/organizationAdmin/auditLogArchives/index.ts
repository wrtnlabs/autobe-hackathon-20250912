import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformAuditLogArchive } from "../../../../structures/IHealthcarePlatformAuditLogArchive";
import { IPageIHealthcarePlatformAuditLogArchive } from "../../../../structures/IPageIHealthcarePlatformAuditLogArchive";

/**
 * Searches and retrieves a filtered, paginated list of audit log archive
 * records for long-term compliance review.
 *
 * This operation is used by highly privileged system administrators and
 * organizational compliance officers to search, monitor, and review long-term
 * audit log archives. Each record represents a batch of historical audit data
 * that has been moved into regulated cold storage, with strict metadata
 * tracking required by HIPAA, SOC 2, and organizational policies.
 *
 * The operation allows for advanced filtering by archive type, organization
 * context, archive creation/internal date windows, and retention period
 * endpoints. Pagination and sorting support enable efficient review of large
 * volumes of long-term audit data archives. Only users with appropriate
 * platform or org-level compliance permissions can access this endpoint.
 *
 * Business validations in the request may include validation of the
 * organizationâ€™s compliance status and data retention policies, ensuring only
 * authorized access and valid organization/archive context. The resulting data
 * is critical for external audits, compliance inspections, and legal
 * proceedings.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination fields for listing audit
 *   log archive records.
 * @path /healthcarePlatform/organizationAdmin/auditLogArchives
 * @accessor api.functional.healthcarePlatform.organizationAdmin.auditLogArchives.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination fields for listing audit log
     * archive records.
     */
    body: IHealthcarePlatformAuditLogArchive.IRequest;
  };
  export type Body = IHealthcarePlatformAuditLogArchive.IRequest;
  export type Response = IPageIHealthcarePlatformAuditLogArchive;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/auditLogArchives",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/auditLogArchives";
  export const random = (): IPageIHealthcarePlatformAuditLogArchive =>
    typia.random<IPageIHealthcarePlatformAuditLogArchive>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieves complete details of a specific audit log archive record by its ID.
 *
 * This operation provides detailed retrieval of all metadata and associated
 * context for a specific audit log archive batch, as referenced by
 * auditLogArchiveId in the healthcare_platform_audit_log_archives table.
 *
 * The returned data includes organization, archive type, storage URI, retention
 * and expiry fields, creation timestamp, and all business-required tracking
 * parameters. The endpoint is accessed by compliance teams/system admins in
 * scenarios such as preparing for audits, fulfilling regulatory requests, or
 * validating archive/retention windows.
 *
 * Access control is strictly enforced at the platform and organization scope to
 * prevent unauthorized disclosure. All access events should themselves be
 * audited as per compliance policy.
 *
 * @param props.connection
 * @param props.auditLogArchiveId Archive record ID (UUID) of the audit log
 *   archive to retrieve.
 * @path /healthcarePlatform/organizationAdmin/auditLogArchives/:auditLogArchiveId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.auditLogArchives.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Archive record ID (UUID) of the audit log archive to retrieve. */
    auditLogArchiveId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformAuditLogArchive;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/auditLogArchives/:auditLogArchiveId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/auditLogArchives/${encodeURIComponent(props.auditLogArchiveId ?? "null")}`;
  export const random = (): IHealthcarePlatformAuditLogArchive =>
    typia.random<IHealthcarePlatformAuditLogArchive>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogArchiveId")(() =>
        typia.assert(props.auditLogArchiveId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
