import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRole } from "../../../../structures/IHealthcarePlatformRole";
import { IPageIHealthcarePlatformRole } from "../../../../structures/IPageIHealthcarePlatformRole";

/**
 * Search and paginate the list of roles in the platform
 * (healthcare_platform_roles table).
 *
 * This endpoint provides advanced search capabilities for listing roles managed
 * by the platform. Users can apply flexible search criteria, sort results by
 * creation date, name, or code, and paginate through potentially large result
 * sets. The request body allows detailed filtering on properties such as code,
 * name, scope_type (platform, organization, department), and status (active,
 * retired, system-only, archived), reflecting the RBAC policy structure
 * outlined in the Prisma schema.
 *
 * Results support organization-scoped queries and can be restricted or ordered
 * by scope and status as necessary for administrative management of roles.
 * Performance is optimized for filtered, paginated retrieval and integrates
 * role-based access control logic to ensure users only view roles within their
 * permitted administrative scope.
 *
 * The output is a paginated container (IPageIHealthcarePlatformRole.ISummary)
 * suitable for management UI and auditing functions. Errors related to invalid
 * filters or lack of permission are clearly reported.
 *
 * @param props.connection
 * @param props.body Role search and pagination parameters as described by
 *   IHealthcarePlatformRole.IRequest.
 * @path /healthcarePlatform/organizationAdmin/roles
 * @accessor api.functional.healthcarePlatform.organizationAdmin.roles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Role search and pagination parameters as described by
     * IHealthcarePlatformRole.IRequest.
     */
    body: IHealthcarePlatformRole.IRequest;
  };
  export type Body = IHealthcarePlatformRole.IRequest;
  export type Response = IPageIHealthcarePlatformRole.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/organizationAdmin/roles";
  export const random = (): IPageIHealthcarePlatformRole.ISummary =>
    typia.random<IPageIHealthcarePlatformRole.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific role entity by ID (healthcare_platform_roles
 * table).
 *
 * This endpoint enables platform and organizational administrators to retrieve
 * full details about a specific role by its unique identifier (roleId). The
 * output includes all fields annotated in the healthcare_platform_roles Prisma
 * schema, such as the role's code, display name, scope_type (platform,
 * organization, department), current status, and creation/update timestamps.
 *
 * Access to this endpoint is governed by administrative privileges as outlined
 * in the RBAC configuration. The operation is essential for reviewing and
 * confirming role definitions, ensuring compliance with RBAC policies, and
 * providing source-of-truth data for audits. Errors are returned when access is
 * denied or the role is not found.
 *
 * @param props.connection
 * @param props.roleId Globally unique identifier of the role to retrieve.
 * @path /healthcarePlatform/organizationAdmin/roles/:roleId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.roles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Globally unique identifier of the role to retrieve. */
    roleId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRole;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/roles/:roleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/roles/${encodeURIComponent(props.roleId ?? "null")}`;
  export const random = (): IHealthcarePlatformRole =>
    typia.random<IHealthcarePlatformRole>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleId")(() => typia.assert(props.roleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
