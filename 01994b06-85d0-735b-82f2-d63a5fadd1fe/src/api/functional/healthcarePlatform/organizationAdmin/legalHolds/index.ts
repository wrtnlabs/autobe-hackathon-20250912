import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLegalHold } from "../../../../structures/IHealthcarePlatformLegalHold";
import { IPageIHealthcarePlatformLegalHold } from "../../../../structures/IPageIHealthcarePlatformLegalHold";

/**
 * Create a new legal hold entry for regulatory, investigatory, or litigation
 * events (healthcare_platform_legal_holds).
 *
 * Creates a new legal hold entry. Healthcare organizations use legal holds when
 * a regulatory, investigatory, or legal event (such as a subpoena, litigation,
 * or compliance audit) requires freezing data. This operation captures all
 * necessary metadata: organization, imposed by, scope type (e.g., patient, org,
 * audit trail), subject entity (if any), business justification for the hold,
 * method (system/manual/legal), current status, effective and expected release
 * dates, and triggers audit and review processes.
 *
 * Compliance implications: Legal holds ensure organizations do not
 * inadvertently delete or modify information subject to legal or regulatory
 * investigation. The operation checks role permissions to ensure only
 * authorized users (admins, compliance personnel) invoke this action. It must
 * capture sufficient context (organization, subject, method, reason, imposed
 * by, status) for full auditability and review.
 *
 * Links to other APIs: The hold can later be updated (PUT), revoked/deleted
 * (DELETE), or have reviews registered via complianceReview APIs. Attempted
 * access to held resources by ordinary users after a hold is created will be
 * denied and logged for auditing. Affected users will be notified by the system
 * via notification APIs.
 *
 * @param props.connection
 * @param props.body Details for the new legal hold, including organization id,
 *   affected subject(s), type, reason, imposed by, method, expected scope, and
 *   effective/release dates.
 * @path /healthcarePlatform/organizationAdmin/legalHolds
 * @accessor api.functional.healthcarePlatform.organizationAdmin.legalHolds.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details for the new legal hold, including organization id, affected
     * subject(s), type, reason, imposed by, method, expected scope, and
     * effective/release dates.
     */
    body: IHealthcarePlatformLegalHold.ICreate;
  };
  export type Body = IHealthcarePlatformLegalHold.ICreate;
  export type Response = IHealthcarePlatformLegalHold;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/legalHolds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/organizationAdmin/legalHolds";
  export const random = (): IHealthcarePlatformLegalHold =>
    typia.random<IHealthcarePlatformLegalHold>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list HealthcarePlatformLegalHold entities with filters and
 * pagination.
 *
 * Fetches a paginated, filtered list of legal hold entities in the
 * healthcarePlatform system, enabling organization administrators and
 * compliance users to review, track, and manage ongoing or historical
 * legal/compliance record holds.
 *
 * The operation accepts rich query parameters or a structured request body for
 * fine-grained searchingâ€”including filtering by department, subject, status
 * (active/released), reason, and effective/release dates. Results are paginated
 * according to business context.
 *
 * Authorization is restricted to organization admins, reflecting business rules
 * around legal/compliance data access. The response includes metadata for each
 * legal hold, supporting downstream compliance or review operations. Error
 * handling ensures permission enforcement and input validation.
 *
 * @param props.connection
 * @param props.body Searching, filtering, and pagination criteria for legal
 *   hold records.
 * @path /healthcarePlatform/organizationAdmin/legalHolds
 * @accessor api.functional.healthcarePlatform.organizationAdmin.legalHolds.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Searching, filtering, and pagination criteria for legal hold records. */
    body: IHealthcarePlatformLegalHold.IRequest;
  };
  export type Body = IHealthcarePlatformLegalHold.IRequest;
  export type Response = IPageIHealthcarePlatformLegalHold.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/legalHolds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/healthcarePlatform/organizationAdmin/legalHolds";
  export const random = (): IPageIHealthcarePlatformLegalHold.ISummary =>
    typia.random<IPageIHealthcarePlatformLegalHold.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a HealthcarePlatformLegalHold entity by legalHoldId.
 *
 * This endpoint fetches the details for a specific legal hold entity by its
 * unique identifier, returning full record fields such as organization,
 * subject, status, method, reason, effective and release windows, and
 * compliance associations.
 *
 * The operation is accessible only to organization admins, with all access
 * audited for regulatory compliance. Data returned supports downstream
 * compliance review, internal or external audit, and legal workflows. Errors
 * may occur for permission violations, non-existent or deleted records, and
 * access outside organization bounds.
 *
 * @param props.connection
 * @param props.legalHoldId Unique identifier for the target legal hold record.
 * @path /healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.legalHolds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target legal hold record. */
    legalHoldId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLegalHold;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/legalHolds/${encodeURIComponent(props.legalHoldId ?? "null")}`;
  export const random = (): IHealthcarePlatformLegalHold =>
    typia.random<IHealthcarePlatformLegalHold>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("legalHoldId")(() => typia.assert(props.legalHoldId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing legal hold record (healthcare_platform_legal_holds).
 *
 * Updates a legal hold's properties, such as status (active/released/expired),
 * reason, method, or scope fields. Used by compliance admins or system
 * administrators when a legal hold requirement changesâ€”such as updating release
 * criteria, expanding or narrowing hold scope, or releasing the hold. This
 * operation ensures that all updates are recorded in detail, with audit trails
 * for each change, in compliance with HIPAA/SOC2 obligations for evidence
 * preservation and traceability.
 *
 * Security and authorization: Update privileges are restricted to users with
 * elevated compliance or admin roles. All updates include before/after data in
 * the record audit log. The update is allowed only if the legal hold exists and
 * is not locked/archived.
 *
 * Relationships: This is typically followed by notifications to stakeholders,
 * and triggers workflow changes in downstream data/processes. Errors are raised
 * on attempts to update non-existent/locked legal holds, or for unauthorized
 * users.
 *
 * @param props.connection
 * @param props.legalHoldId Unique identifier of the legal hold record to
 *   update.
 * @param props.body Fields to update for the legal hold (status, dates, reason,
 *   method, scope, etc).
 * @path /healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.legalHolds.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the legal hold record to update. */
    legalHoldId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the legal hold (status, dates, reason, method,
     * scope, etc).
     */
    body: IHealthcarePlatformLegalHold.IUpdate;
  };
  export type Body = IHealthcarePlatformLegalHold.IUpdate;
  export type Response = IHealthcarePlatformLegalHold;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/legalHolds/${encodeURIComponent(props.legalHoldId ?? "null")}`;
  export const random = (): IHealthcarePlatformLegalHold =>
    typia.random<IHealthcarePlatformLegalHold>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("legalHoldId")(() => typia.assert(props.legalHoldId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Archive or erase a legal hold entry (soft delete for audit purposes)
 * (healthcare_platform_legal_holds).
 *
 * Deactivates or archives a legal hold in the system. This action restricts any
 * further use of the hold in enforcing data locks, but preserves the full
 * record for compliance requirements. Actual data removal (hard delete) is only
 * done if permitted by organizational/legal policy; otherwise, the deleted_at
 * field is set for soft deletion (retention in history).
 *
 * Security and compliance: Only systemAdmin or organizationAdmin users may
 * erase legal holds, and the action is always logged with actor, reason, and
 * affected data. The API does not allow deletion of a hold if there are ongoing
 * dependent reviews/investigations unless an explicit override is present.
 * Attempting to erase a non-existent or locked hold results in a permission
 * error. Usage is highly restricted to avoid accidental loss of compliance
 * data.
 *
 * Business process: After erasure, downstream systems are notified to release
 * data locks and update audit records. Compliance staff may be notified as part
 * of the process.
 *
 * @param props.connection
 * @param props.legalHoldId Unique identifier of the legal hold record to
 *   archive or erase.
 * @path /healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.legalHolds.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the legal hold record to archive or erase. */
    legalHoldId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/legalHolds/:legalHoldId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/legalHolds/${encodeURIComponent(props.legalHoldId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("legalHoldId")(() => typia.assert(props.legalHoldId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
