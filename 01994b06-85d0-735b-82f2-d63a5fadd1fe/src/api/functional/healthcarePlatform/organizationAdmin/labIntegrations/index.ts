import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformLabIntegration } from "../../../../structures/IHealthcarePlatformLabIntegration";
import { IPageIHealthcarePlatformLabIntegration } from "../../../../structures/IPageIHealthcarePlatformLabIntegration";

/**
 * Create a new lab provider integration configuration
 * (healthcare_platform_lab_integrations table).
 *
 * This operation allows an organization administrator or system administrator
 * to register a new laboratory integration for their organization. Integrations
 * set up through this endpoint will be used for sending and receiving
 * laboratory orders/results, and include required fields for lab provider code,
 * interface URIs, and which structured data/message format the integration
 * supports. All fields entered are subject to validation â€“ provider codes must
 * be unique per organization, and connection URIs should adhere to secure
 * platform patterns. Security: Only staff with appropriate privileges should
 * perform this operation since improper configuration could expose patient data
 * or hinder care. The response contains a detailed object representing the
 * created integration, suitable for audit and technical validation purposes. If
 * duplicate provider codes are submitted, or if required fields are missing,
 * the endpoint returns a validation error.
 *
 * @param props.connection
 * @param props.body Integration configuration for a new external lab provider.
 * @path /healthcarePlatform/organizationAdmin/labIntegrations
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labIntegrations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Integration configuration for a new external lab provider. */
    body: IHealthcarePlatformLabIntegration.ICreate;
  };
  export type Body = IHealthcarePlatformLabIntegration.ICreate;
  export type Response = IHealthcarePlatformLabIntegration;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/organizationAdmin/labIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/labIntegrations";
  export const random = (): IHealthcarePlatformLabIntegration =>
    typia.random<IHealthcarePlatformLabIntegration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filtered list of lab integration connectors
 * (healthcare_platform_lab_integrations).
 *
 * Returns a paginated and filtered list of lab integration connection
 * definitions (for vendors such as LabCorp, Quest Diagnostics, or custom labs)
 * based on query parameters. This operation reads from the
 * healthcare_platform_lab_integrations table, supporting search and filtering
 * by vendor code, connection status, message format, and organization
 * assignment.
 *
 * Users require appropriate system or organizational privileges, and access
 * will be scoped to lab integrations in their assigned organizations. Results
 * are ordered and paginated according to standard list operation conventions,
 * and the request body can include search text, filter objects, or sorting
 * criteria.
 *
 * This operation is commonly used in administrative dashboards for integration
 * health, audit readiness, and onboarding workflows. It complements individual
 * lab integration detail retrieval, creation, update, and deletion endpoints.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for lab integration list
 *   retrieval, such as status, vendor code, organization.id, or
 *   supported_message_format.
 * @path /healthcarePlatform/organizationAdmin/labIntegrations
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labIntegrations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter criteria for lab integration list retrieval, such
     * as status, vendor code, organization.id, or
     * supported_message_format.
     */
    body: IHealthcarePlatformLabIntegration.IRequest;
  };
  export type Body = IHealthcarePlatformLabIntegration.IRequest;
  export type Response = IPageIHealthcarePlatformLabIntegration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/labIntegrations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/labIntegrations";
  export const random = (): IPageIHealthcarePlatformLabIntegration.ISummary =>
    typia.random<IPageIHealthcarePlatformLabIntegration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get the details of a specific lab integration connector
 * (healthcare_platform_lab_integrations).
 *
 * Fetches the full configuration and status details for a specific lab
 * integration point, corresponding to a row in the
 * healthcare_platform_lab_integrations table. The result includes lab vendor
 * identity, connection URI, supported formats, status, timestamps, and metadata
 * fields, supporting compliance review, integration setup, and incident
 * investigation.
 *
 * The operation is restricted to administrative users responsible for
 * maintaining or auditing lab connections, and the returned fields must match
 * the schema definition for lab integrations. The endpoint will return an error
 * response if the labIntegrationId does not exist or is not accessible to the
 * requesting user's organization.
 *
 * @param props.connection
 * @param props.labIntegrationId Unique identifier of the lab integration to
 *   fetch.
 * @path /healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labIntegrations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the lab integration to fetch. */
    labIntegrationId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformLabIntegration;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/labIntegrations/${encodeURIComponent(props.labIntegrationId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabIntegration =>
    typia.random<IHealthcarePlatformLabIntegration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("labIntegrationId")(() =>
        typia.assert(props.labIntegrationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific organization's laboratory integration configuration
 * (healthcare_platform_lab_integrations table).
 *
 * Using this operation, an organization administrator can update properties of
 * an existing lab integration, modifying aspects such as provider API endpoints
 * or status flags. The operation enforces business rules â€“ for example, changes
 * to provider codes must remain unique within the organization. The endpoint
 * validates all fields and only allows updates on active (non-deleted) records.
 * Updates are logged for audit traceability. Security: Only administrators with
 * organizational or higher privileges may perform integration updates.
 * Attempting to update a non-existent or deleted integration returns a
 * not-found or forbidden error. Business impact: Adjusting integration
 * endpoints may immediately affect lab order flows and result delivery, so use
 * with caution and coordinate with involved clinical staff as needed.
 *
 * @param props.connection
 * @param props.labIntegrationId Unique identifier of the laboratory integration
 *   to update.
 * @param props.body New configuration values for the laboratory integration.
 * @path /healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labIntegrations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the laboratory integration to update. */
    labIntegrationId: string & tags.Format<"uuid">;

    /** New configuration values for the laboratory integration. */
    body: IHealthcarePlatformLabIntegration.IUpdate;
  };
  export type Body = IHealthcarePlatformLabIntegration.IUpdate;
  export type Response = IHealthcarePlatformLabIntegration;

  export const METADATA = {
    method: "PUT",
    path: "/healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/organizationAdmin/labIntegrations/${encodeURIComponent(props.labIntegrationId ?? "null")}`;
  export const random = (): IHealthcarePlatformLabIntegration =>
    typia.random<IHealthcarePlatformLabIntegration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("labIntegrationId")(() =>
        typia.assert(props.labIntegrationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an organization's laboratory integration
 * (healthcare_platform_lab_integrations table).
 *
 * This operation enables an organization administrator to soft-delete a
 * laboratory integration, which disables the connection for future lab order
 * workflows while retaining all previous records for compliance. The deletion
 * is reversable by restoring the deleted_at timestamp via internal processes.
 * Only non-deleted records may be marked as deleted, and business rules prevent
 * hard deletion to ensure retention for audit and traceability. Any attempt to
 * delete an already deleted or non-existent record results in an error. Only
 * administrators are permitted to delete integrations, reflecting the
 * sensitivity of disabling external laboratory communications.
 *
 * @param props.connection
 * @param props.labIntegrationId Unique identifier of the laboratory integration
 *   to delete.
 * @path /healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.labIntegrations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the laboratory integration to delete. */
    labIntegrationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/healthcarePlatform/organizationAdmin/labIntegrations/:labIntegrationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/labIntegrations/${encodeURIComponent(props.labIntegrationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("labIntegrationId")(() =>
        typia.assert(props.labIntegrationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
