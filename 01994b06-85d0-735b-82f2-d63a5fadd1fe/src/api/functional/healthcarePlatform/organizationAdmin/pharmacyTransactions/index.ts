import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformPharmacyTransaction } from "../../../../structures/IHealthcarePlatformPharmacyTransaction";
import { IPageIHealthcarePlatformPharmacyTransaction } from "../../../../structures/IPageIHealthcarePlatformPharmacyTransaction";

/**
 * Retrieve filtered and paginated list of pharmacy transactions
 * (healthcare_platform_pharmacy_transactions).
 *
 * Retrieve a filtered, paginated, and optionally sorted list of pharmacy
 * transaction records from the healthcare_platform_pharmacy_transactions
 * table.
 *
 * This endpoint supports advanced searching by transaction type, status,
 * creation window, pharmacy integration, or other properties to enable audit,
 * compliance, and troubleshooting workflows for healthcare organizations. Only
 * authorized administrative or system users can retrieve this information due
 * to the sensitivity of pharmacy-related data and integration metadata.
 *
 * The operation returns complete transaction details for each record, including
 * organization link, pharmacy integration ID, transaction type (e.g., 'new
 * eRx', 'refill', etc.), transaction statuses and timestamps, error or status
 * messages, and full audit metadata. No write or modification capability is
 * exposed in this endpoint—transaction creation, modification, or error
 * handling is exclusively system- or integration-driven.
 *
 * Pagination parameters ensure efficient retrieval of large volumes of
 * transaction logs, and the response includes metadata about total counts, page
 * sizes, and current page for optimal UI/UX integration. This endpoint is
 * critical for API-level integration troubleshooting, audit trail completion,
 * and pharmacy workflow analytics.
 *
 * Typical users of this endpoint are platform/system administrators,
 * organization admins, or integration operations analysts who require
 * comprehensive review or search capabilities for all pharmacy transaction
 * records associated with their tenant.
 *
 * @param props.connection
 * @param props.body Search filters and pagination/sorting criteria for pharmacy
 *   transaction query.
 * @path /healthcarePlatform/organizationAdmin/pharmacyTransactions
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters and pagination/sorting criteria for pharmacy
     * transaction query.
     */
    body: IHealthcarePlatformPharmacyTransaction.IRequest;
  };
  export type Body = IHealthcarePlatformPharmacyTransaction.IRequest;
  export type Response = IPageIHealthcarePlatformPharmacyTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/organizationAdmin/pharmacyTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/healthcarePlatform/organizationAdmin/pharmacyTransactions";
  export const random = (): IPageIHealthcarePlatformPharmacyTransaction =>
    typia.random<IPageIHealthcarePlatformPharmacyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a single pharmacy transaction
 * (healthcare_platform_pharmacy_transactions).
 *
 * Retrieve the detail for a specific pharmacy transaction record in the
 * healthcare_platform_pharmacy_transactions table using its unique identifier.
 *
 * This endpoint provides all available details about the pharmacy transaction,
 * including organization context, pharmacy integration link, transaction type
 * (e.g., 'new eRx', 'refill', etc.), external transaction ID, full status and
 * message logs, all relevant timestamps, payload reference, and audit
 * metadata.
 *
 * Security and privacy controls ensure that only system, administrative, or
 * organization-level users can access this endpoint, as pharmacy transaction
 * data is considered highly sensitive and operationally critical.
 *
 * No updates, deletion, or modifications can be performed via this
 * endpoint—data is read-only and reflects the system/integration managed
 * history for the life of the record. This endpoint is used in operational
 * troubleshooting, integration audit, and compliance workflows for pharmacy and
 * e-prescribing operations.
 *
 * @param props.connection
 * @param props.pharmacyTransactionId Unique identifier for the pharmacy
 *   transaction record to retrieve.
 * @path /healthcarePlatform/organizationAdmin/pharmacyTransactions/:pharmacyTransactionId
 * @accessor api.functional.healthcarePlatform.organizationAdmin.pharmacyTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the pharmacy transaction record to retrieve. */
    pharmacyTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformPharmacyTransaction;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/organizationAdmin/pharmacyTransactions/:pharmacyTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/organizationAdmin/pharmacyTransactions/${encodeURIComponent(props.pharmacyTransactionId ?? "null")}`;
  export const random = (): IHealthcarePlatformPharmacyTransaction =>
    typia.random<IHealthcarePlatformPharmacyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pharmacyTransactionId")(() =>
        typia.assert(props.pharmacyTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
