import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformRecordAmendment } from "../../../../../structures/IHealthcarePlatformRecordAmendment";
import { IPageIHealthcarePlatformRecordAmendment } from "../../../../../structures/IPageIHealthcarePlatformRecordAmendment";

/**
 * Create a new record amendment for a patient record.
 *
 * Create a new amendment to a patient record. Clinical staff, nurses, or
 * compliance officers may initiate an amendment when errors, updates, or
 * regulatory requests are identified. The operation requires a comprehensive
 * payload including type, rationale, before/after values, and related encounter
 * or reviewer if necessary.
 *
 * Security enforcement ensures only users with requisite clinical or compliance
 * roles within the organization/department may submit new amendments. Business
 * logic validates amendment feasibility, duplication, and triggers review if
 * required for certain amendment types (e.g., diagnosis, allergy). Soft delete
 * markers on the patient record are checked for compliance.
 *
 * Upon success, the operation returns the newly created amendment, which
 * reflects current workflow status (pending, approved, rejected), linkage to
 * the patient and potentially to an EHR encounter, and retains full audit
 * traceability. Failures (validation, permission, or constraint errors) will
 * return detailed reasons, especially in regulatory or review-required cases.
 * This endpoint supports the full amendment workflow lifecycle for medical and
 * audit compliance.
 *
 * @param props.connection
 * @param props.patientRecordId Target patient record to which the amendment
 *   applies
 * @param props.body Full amendment creation data, including amendment type,
 *   rationale, old/new state, and optionally encounter or reviewer ID
 * @path /healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments
 * @accessor api.functional.healthcarePlatform.medicalDoctor.patientRecords.recordAmendments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target patient record to which the amendment applies */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * Full amendment creation data, including amendment type, rationale,
     * old/new state, and optionally encounter or reviewer ID
     */
    body: IHealthcarePlatformRecordAmendment.ICreate;
  };
  export type Body = IHealthcarePlatformRecordAmendment.ICreate;
  export type Response = IHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "POST",
    path: "/healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/medicalDoctor/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments`;
  export const random = (): IHealthcarePlatformRecordAmendment =>
    typia.random<IHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated index of record amendments for a specific patient
 * record.
 *
 * Retrieve a filtered and paginated index of record amendments for a given
 * patient record. This endpoint allows compliance staff, department heads, and
 * clinical roles to audit the lifecycle of all changes, corrections, or
 * regulatory amendments to the patient's medical record.
 *
 * Security considerations require that users have appropriate RBAC permission
 * to view amendment history for the patient. Access is restricted by role and
 * organizational boundaries. All results are filtered to the requesting user's
 * access rights.
 *
 * The response structure includes paginated amendment data with amendment
 * metadata (type, status, submitter, rationale, old/new values) and can be
 * expanded by role permissions. Amendments under review, pending approval, or
 * rejected will contain their current status for workflow handling. Error
 * handling distinguishes between not found, not authorized, or query constraint
 * violations. If the patient record or amendments are soft deleted, only
 * appropriate admins will see historic data where compliant.
 *
 * This operation aligns with business rules requiring longitudinal traceability
 * and versioned record keeping for all PHI amendments, supporting regulatory
 * audits and clinical workflows.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier of the patient record to query
 *   amendments for
 * @param props.body Search, filtering, and pagination criteria for record
 *   amendments linked to the patient record
 * @path /healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments
 * @accessor api.functional.healthcarePlatform.medicalDoctor.patientRecords.recordAmendments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the patient record to query amendments for */
    patientRecordId: string & tags.Format<"uuid">;

    /**
     * Search, filtering, and pagination criteria for record amendments
     * linked to the patient record
     */
    body: IHealthcarePlatformRecordAmendment.IRequest;
  };
  export type Body = IHealthcarePlatformRecordAmendment.IRequest;
  export type Response = IPageIHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "PATCH",
    path: "/healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/healthcarePlatform/medicalDoctor/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments`;
  export const random = (): IPageIHealthcarePlatformRecordAmendment =>
    typia.random<IPageIHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details of a specific record amendment on a patient record.
 *
 * Retrieve full details of a specific record amendment for a patient record.
 * This operation provides clinical, audit, and workflow information required
 * for individual review and regulatory traceability. It exposes amendment
 * metadata (type, rationale, submitter, reviewer, old and new value snapshots,
 * approval status, timestamps, and related encounter), to authorized requesters
 * based on RBAC as configured for audit trail visibility.
 *
 * Access is limited by role, organization, and department scope to ensure
 * privacy and compliance, with error responses if the amendment is not found,
 * the record ID does not match the amendment's patient association, or if the
 * user's permissions are insufficient. If the amendment is in a pending or
 * restricted status, additional review markers will be shown depending on
 * reviewer role.
 *
 * This operation directly supports business rules for amendment audit trail and
 * workflow compliance, empowering end-to-end regulatory review, and is
 * referenced in record update and compliance review flows.
 *
 * @param props.connection
 * @param props.patientRecordId Unique identifier for the patient record
 * @param props.recordAmendmentId Unique identifier for the specific record
 *   amendment to retrieve
 * @path /healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId
 * @accessor api.functional.healthcarePlatform.medicalDoctor.patientRecords.recordAmendments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the patient record */
    patientRecordId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific record amendment to retrieve */
    recordAmendmentId: string & tags.Format<"uuid">;
  };
  export type Response = IHealthcarePlatformRecordAmendment;

  export const METADATA = {
    method: "GET",
    path: "/healthcarePlatform/medicalDoctor/patientRecords/:patientRecordId/recordAmendments/:recordAmendmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/healthcarePlatform/medicalDoctor/patientRecords/${encodeURIComponent(props.patientRecordId ?? "null")}/recordAmendments/${encodeURIComponent(props.recordAmendmentId ?? "null")}`;
  export const random = (): IHealthcarePlatformRecordAmendment =>
    typia.random<IHealthcarePlatformRecordAmendment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("patientRecordId")(() =>
        typia.assert(props.patientRecordId),
      );
      assert.param("recordAmendmentId")(() =>
        typia.assert(props.recordAmendmentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
