import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformDepartmentHead } from "../../../structures/IHealthcarePlatformDepartmentHead";

/**
 * Register new department head (healthcare_platform_departmentheads) and issue
 * JWT tokens.
 *
 * Create a new department head account and issue authorization tokens. This
 * onboarding operation is for users who will function as 'departmentHead'
 * within an organization. It creates and persists a unique department head
 * entity in the healthcare_platform_departmentheads table. Email must be
 * unique, full name required. Upon success, returns JWT tokens using the
 * IHealthcarePlatformDepartmentHead.IAuthorized DTO. Security audits are
 * triggered for all join operations per compliance policy, and all data is
 * subject to PHI and business audit bounds. This operation is essential for
 * granting initial administrative access for a department context. Related
 * operations include login, refresh, and role assignment endpoints. Error
 * conditions: duplicate email, missing required fields, or invalid business
 * data will result in a clear business error and audit log entry.
 * Post-registration workflows may require additional verification (e.g.,
 * employment/credential validation) by organizational policy.
 *
 * @param props.connection
 * @param props.body Department head registration payload (email, full name,
 *   optional phone) per IHealthcarePlatformDepartmentHead.IJoinRequest DTO.
 *   Required for initial administrator onboarding. All fields must comply with
 *   business input rules and be subject to audit policy.
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentHead/join
 * @accessor api.functional.auth.departmentHead.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Department head registration payload (email, full name, optional
     * phone) per IHealthcarePlatformDepartmentHead.IJoinRequest DTO.
     * Required for initial administrator onboarding. All fields must comply
     * with business input rules and be subject to audit policy.
     */
    body: IHealthcarePlatformDepartmentHead.IJoinRequest;
  };
  export type Body = IHealthcarePlatformDepartmentHead.IJoinRequest;
  export type Response = IHealthcarePlatformDepartmentHead.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentHead/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentHead/join";
  export const random = (): IHealthcarePlatformDepartmentHead.IAuthorized =>
    typia.random<IHealthcarePlatformDepartmentHead.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login existing department head and issue session tokens
 * (healthcare_platform_departmentheads).
 *
 * Authenticate a department head (healthcare_platform_departmentheads) with
 * credentials to issue JWT tokens. This operation validates supplied login data
 * (email and password or SSO credentials) against system authentication tables.
 * On success, returns access and refresh JWTs using the
 * IHealthcarePlatformDepartmentHead.IAuthorized DTO. Failed logins, lockouts,
 * or suspicious behavior trigger audit log and incident workflows. This is a
 * core step in department-level administrative access. Errors: invalid
 * credentials, account lockout, or policy violations result in business error
 * and security incident logs. Related operations: join (for registration),
 * refresh (for token renewal), logout or revoke flows where required.
 *
 * @param props.connection
 * @param props.body Login credentials payload (email/password or SSO assertion)
 *   per IHealthcarePlatformDepartmentHead.ILoginRequest representation.
 *   Required for authentication. Validates that the email exists and
 *   credentials are correct. Compliant with platform-wide authentication
 *   rules.
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentHead/login
 * @accessor api.functional.auth.departmentHead.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login credentials payload (email/password or SSO assertion) per
     * IHealthcarePlatformDepartmentHead.ILoginRequest representation.
     * Required for authentication. Validates that the email exists and
     * credentials are correct. Compliant with platform-wide authentication
     * rules.
     */
    body: IHealthcarePlatformDepartmentHead.ILoginRequest;
  };
  export type Body = IHealthcarePlatformDepartmentHead.ILoginRequest;
  export type Response = IHealthcarePlatformDepartmentHead.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentHead/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentHead/login";
  export const random = (): IHealthcarePlatformDepartmentHead.IAuthorized =>
    typia.random<IHealthcarePlatformDepartmentHead.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Department head JWT token refresh (healthcare_platform_departmentheads) via
 * valid refresh token.
 *
 * Refresh JWT tokens for an authenticated department head session
 * (healthcare_platform_departmentheads). Requires valid refresh token. Issues
 * new access/refresh tokens if session is active. Supports seamless and secure
 * continuation of department admin workflows subject to compliance and
 * session-lifetime policy. All refresh attempts and outcomes are logged per
 * business audit procedures. Related operations: login, logout/session revoke,
 * and join for full account lifecycle. Errors: invalid/expired/revoked tokens
 * result in error and audit log.
 *
 * @param props.connection
 * @param props.body Refresh token submission DTO
 *   (IHealthcarePlatformDepartmentHead.IRefreshRequest) for department head JWT
 *   refresh. Contains issued refresh token and (optionally) device/session
 *   context as per business session management policies.
 * @setHeader token.access Authorization
 *
 * @path /auth/departmentHead/refresh
 * @accessor api.functional.auth.departmentHead.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token submission DTO
     * (IHealthcarePlatformDepartmentHead.IRefreshRequest) for department
     * head JWT refresh. Contains issued refresh token and (optionally)
     * device/session context as per business session management policies.
     */
    body: IHealthcarePlatformDepartmentHead.IRefreshRequest;
  };
  export type Body = IHealthcarePlatformDepartmentHead.IRefreshRequest;
  export type Response = IHealthcarePlatformDepartmentHead.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/departmentHead/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/departmentHead/refresh";
  export const random = (): IHealthcarePlatformDepartmentHead.IAuthorized =>
    typia.random<IHealthcarePlatformDepartmentHead.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
