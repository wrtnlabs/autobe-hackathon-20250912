import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IHealthcarePlatformTechnician } from "../../../structures/IHealthcarePlatformTechnician";

/**
 * Register (join) a new medical technician (technician) and issue authorized
 * JWT tokens, using healthcare_platform_technicians table.
 *
 * This endpoint is used to register a new medical technician account as defined
 * by the healthcare_platform_technicians schema. The purpose is to enable new
 * technical users to join the healthcarePlatform, which then issues the initial
 * JWT tokens for system access. The operation requires, at minimum, a unique
 * email and full legal name (matching organizational identity requirements),
 * with business phone number optional but supported for contact and MFA.
 *
 * The operation interacts with the healthcare_platform_technicians table, which
 * holds all technical user information (including email, full_name, phone,
 * created_at), and writes audit events to the authentication-related tables
 * such as healthcare_platform_user_authentications and
 * healthcare_platform_auth_sessions to support secure login and token
 * management.
 *
 * Upon successful registration, the endpoint issues an
 * IHealthcarePlatformTechnician.IAuthorized response, which encapsulates both
 * technician profile details and JWT access/refresh tokens necessary for first
 * login and subsequent API access. This supports multi-tenant organizational
 * onboarding for new staff and ties technical assignments to platform-wide
 * tracing and compliance.
 *
 * Security considerations include strong validation of input values, prevention
 * of duplicate accounts (unique email enforced), and creation of a full audit
 * trail for compliance review. Registration errors due to business logic
 * (duplicate emails, invalid data) are handled via descriptive error
 * responses.
 *
 * This join endpoint is typically used before calling /auth/technician/login
 * (for subsequent sign-in) and /auth/technician/refresh (for access token
 * renewal). The registration event triggers full audit logging of all created
 * resources, tightly coupling with organizational technical onboarding flows
 * and regulatory audit requirements.
 *
 * @param props.connection
 * @param props.body Registration info for a new technician account
 * @setHeader token.access Authorization
 *
 * @path /auth/technician/join
 * @accessor api.functional.auth.technician.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration info for a new technician account */
    body: IHealthcarePlatformTechnician.IJoin;
  };
  export type Body = IHealthcarePlatformTechnician.IJoin;
  export type Response = IHealthcarePlatformTechnician.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/technician/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/technician/join";
  export const random = (): IHealthcarePlatformTechnician.IAuthorized =>
    typia.random<IHealthcarePlatformTechnician.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate and issue tokens for a technician
 * (healthcare_platform_technicians table).
 *
 * This operation allows existing technician users to log in and receive new JWT
 * tokens, as defined by the healthcare_platform_technicians and authentication
 * schema. The workflow validates user credentials (e.g., email/password),
 * checks the technician's status, and, on success, updates
 * last_authenticated_at in healthcare_platform_user_authentications. It also
 * records the session in healthcare_platform_auth_sessions for security and
 * auditing.
 *
 * All fields referenced (email, password hash, status, session tokens) are
 * directly present in the schema tables relevant to technician authentication
 * flows.
 *
 * Role-specific integration ensures that only users with technician privileges
 * are authorized via this endpoint. Sessions are organization- and user-type
 * scoped so that technical workflow boundaries are enforced.
 *
 * Security measures include timing attack mitigation, credential hashing
 * verification, and multi-factor triggers where policy is enabled via
 * healthcare_platform_user_mfa_factors. Failed attempts are notified via access
 * logs and, after repeated failures, may trigger escalation or lockouts (as
 * tracked in healthcare_platform_security_incidents).
 *
 * This endpoint directly supports business flows for technical staff access and
 * must be kept under strict operational audit as required by regulatory
 * standards. Used together with /auth/technician/join for registration and
 * /auth/technician/refresh for token renewal.
 *
 * @param props.connection
 * @param props.body Credential info (login) for medical technician
 * @setHeader token.access Authorization
 *
 * @path /auth/technician/login
 * @accessor api.functional.auth.technician.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Credential info (login) for medical technician */
    body: IHealthcarePlatformTechnician.ILogin;
  };
  export type Body = IHealthcarePlatformTechnician.ILogin;
  export type Response = IHealthcarePlatformTechnician.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/technician/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/technician/login";
  export const random = (): IHealthcarePlatformTechnician.IAuthorized =>
    typia.random<IHealthcarePlatformTechnician.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh authorized tokens for technician
 * (IHealthcarePlatformTechnician.IAuthorized).
 *
 * This endpoint enables technician accounts to refresh their access and refresh
 * JWT tokens for continued authorized access to the healthcarePlatform. The API
 * validates the submitted refresh token against active session records as
 * defined in healthcare_platform_auth_sessions (where revoked_at is null,
 * expires_at not passed, and tied to a valid technician user_id and
 * user_type).
 *
 * On successful validation, the operation issues new access and refresh
 * tokensâ€”using the IHealthcarePlatformTechnician.IAuthorized response shape for
 * seamless session continuation. Business and security audit trails are
 * maintained, and each issuance is appended to authentication audit.
 *
 * Security considerations: Each refresh is subject to validation against
 * revocation, session expiry, and role boundary. If the session is expired or
 * revoked, the response indicates session invalidation. All refresh attempts
 * are logged for future audit and anomaly review.
 *
 * This endpoint is meant to be used by technician actors after successful
 * /auth/technician/join or /auth/technician/login actions (as refresh to their
 * authorized session/tokens). Together these support robust SSO and token
 * rotation support per technician actor within the production environment.
 *
 * @param props.connection
 * @param props.body Refresh token info for technician session
 * @setHeader token.access Authorization
 *
 * @path /auth/technician/refresh
 * @accessor api.functional.auth.technician.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token info for technician session */
    body: IHealthcarePlatformTechnician.IRefresh;
  };
  export type Body = IHealthcarePlatformTechnician.IRefresh;
  export type Response = IHealthcarePlatformTechnician.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/technician/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/technician/refresh";
  export const random = (): IHealthcarePlatformTechnician.IAuthorized =>
    typia.random<IHealthcarePlatformTechnician.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
