import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMedicalDoctorJoin } from "../../../providers/postauthMedicalDoctorJoin";
import { MedicaldoctorAuth } from "../../../decorators/MedicaldoctorAuth";
import { MedicaldoctorPayload } from "../../../decorators/payload/MedicaldoctorPayload";
import { postauthMedicalDoctorLogin } from "../../../providers/postauthMedicalDoctorLogin";
import { postauthMedicalDoctorRefresh } from "../../../providers/postauthMedicalDoctorRefresh";

import { IHealthcarePlatformMedicalDoctor } from "../../../api/structures/IHealthcarePlatformMedicalDoctor";

@Controller("/auth/medicalDoctor")
export class AuthMedicaldoctorController {
  /**
   * Create/register new medical doctor account and issue initial tokens
   * (healthcare_platform_medicaldoctors).
   *
   * Registers a new licensed medical doctor as a system user, validates all
   * provided business credentials (email and NPI number), and issues an initial
   * set of JWT access and refresh tokens for secure platform access. The
   * registration process records audit events, creates a user record in
   * 'healthcare_platform_medicaldoctors', and triggers credential verification
   * and compliance workflows. Only doctors with valid, unique business email
   * and NPI are onboarded; errors trigger actionable client feedback per
   * business rules. All operation details and constraints are derived from the
   * Prisma schema and business requirements for healthcare member roles.
   *
   * @param connection
   * @param body Doctor registration/credential data for onboarding.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.IJoin,
  ): Promise<IHealthcarePlatformMedicalDoctor.IAuthorized> {
    try {
      return await postauthMedicalDoctorJoin({
        medicalDoctor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate/login (issue tokens) for a medical doctor
   * (healthcare_platform_medicaldoctors).
   *
   * Authenticates a registered medical doctor by verifying provided email and
   * password credentials against the 'healthcare_platform_medicaldoctors'
   * schema (ensuring the doctor account is active, email matches, and password
   * hash is valid). On success, issues new JWT tokens and records all required
   * login audit events. Returns access/refresh tokens using DTO response
   * specification. Errors include invalid credentials, suspended accounts, or
   * failed compliance checks. This operation forms part of the strict member
   * login flow documented for the healthcarePlatform medical role.
   *
   * @param connection
   * @param body Login credentials for doctor authentication (email, password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.ILogin,
  ): Promise<IHealthcarePlatformMedicalDoctor.IAuthorized> {
    try {
      return await postauthMedicalDoctorLogin({
        medicalDoctor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for medical doctor session
   * (healthcare_platform_auth_sessions).
   *
   * Allows an authenticated medical doctor to exchange a valid and unexpired
   * refresh token for a new pair of JWT tokens, prolonging authenticated
   * platform access. The Prisma database table
   * 'healthcare_platform_auth_sessions' is used to validate token status,
   * assignment, and session context before issuing new tokens. Operation
   * records audit logs for compliance. This endpoint is fundamental to secure
   * session management for the doctor/member role within the healthcarePlatform
   * system. Errors are returned for invalid, expired, or revoked tokens.
   *
   * @param connection
   * @param body Request a new session using an authorized refresh token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedBody()
    body: IHealthcarePlatformMedicalDoctor.IRefresh,
  ): Promise<IHealthcarePlatformMedicalDoctor.IAuthorized> {
    try {
      return await postauthMedicalDoctorRefresh({
        medicalDoctor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
