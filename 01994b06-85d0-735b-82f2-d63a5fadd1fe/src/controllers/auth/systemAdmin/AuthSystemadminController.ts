import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminJoin } from "../../../providers/postauthSystemAdminJoin";
import { postauthSystemAdminLogin } from "../../../providers/postauthSystemAdminLogin";
import { postauthSystemAdminRefresh } from "../../../providers/postauthSystemAdminRefresh";

import { IHealthcarePlatformSystemAdmin } from "../../../api/structures/IHealthcarePlatformSystemAdmin";

@Controller("/auth/systemAdmin")
export class AuthSystemadminController {
  /**
   * Register a system administrator user (healthcare_platform_systemadmins
   * table) and provision authentication credentials.
   *
   * This operation supports the registration (join) flow for superuser
   * administrators on the healthcarePlatform using the
   * healthcare_platform_systemadmins table. When a new superuser registers, the
   * operation creates a healthcare_platform_systemadmins record with the
   * required profile fields, links to a
   * healthcare_platform_user_authentications record, and provisions an initial
   * JWT session with centralized audit logging in
   * healthcare_platform_audit_logs. Strict audit controls, unique email
   * enforcement, and password best practices apply. The operation never exposes
   * password hashes or internal authentication properties and is only available
   * for platform-level onboarding. Only organizations listed as permissible for
   * admin registration are supported, and registration attempts are fully
   * traced for compliance. Related operations: /auth/systemAdmin/login,
   * /auth/systemAdmin/refresh (for session and credential management).
   * Resource: healthcare_platform_systemadmins table.
   *
   * @param connection
   * @param body Superuser admin registration data (including email, full_name,
   *   phone, password or SSO info) for platform onboarding. Use typeName:
   *   IHealthcarePlatformSystemAdmin.IJoin for credential and profile details.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.IJoin,
  ): Promise<IHealthcarePlatformSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login for system administrators (authenticate against
   * healthcare_platform_systemadmins and manage JWT session).
   *
   * Authenticate (login) a platform system administrator via local credentials
   * or federated SSO (fields present in
   * healthcare_platform_user_authentications). The operation verifies
   * credentials, issues JWT tokens, provisions a new session using
   * healthcare_platform_auth_sessions, and triggers audit-compliant logging in
   * healthcare_platform_audit_logs and security_incidents. On authentication
   * failure, the event is logged with context and may trigger rate limiting or
   * lockdown based on security policy. Never exposes password hashes; only
   * operates on active, non-deleted healthcare_platform_systemadmins. Related
   * operations include /auth/systemAdmin/join (registration) and
   * /auth/systemAdmin/refresh (token/session renewal). Only system-level
   * administrator accounts are supported in this operation.
   *
   * @param connection
   * @param body Login credentials (email/password or SSO provider/key) for
   *   platform system administrator. Use typeName:
   *   IHealthcarePlatformSystemAdmin.ILogin.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.ILogin,
  ): Promise<IHealthcarePlatformSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh system administrator session/token
   * (healthcare_platform_auth_sessions).
   *
   * Refresh an active JWT access/refresh token session for system administrator
   * using healthcare_platform_auth_sessions. The operation validates the
   * provided refresh token against recorded session, issues new access/refresh
   * tokens for continued session, and logs event in
   * healthcare_platform_audit_logs. Session revocation, security monitoring,
   * and failed/expired refresh attempts are managed per incident logging and
   * system security policy. Never exposes password hash or secret session
   * details. Only active, non-revoked sessions linked to
   * healthcare_platform_systemadmins are valid for this operation.
   *
   * @param connection
   * @param body Refresh token operation for platform system administrator
   *   account. Provide valid refresh token matching
   *   healthcare_platform_auth_sessions. Use typeName:
   *   IHealthcarePlatformSystemAdmin.IRefresh.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IHealthcarePlatformSystemAdmin.IRefresh,
  ): Promise<IHealthcarePlatformSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
