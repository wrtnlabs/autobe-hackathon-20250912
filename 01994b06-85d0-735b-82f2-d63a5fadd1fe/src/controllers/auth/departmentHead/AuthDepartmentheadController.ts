import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDepartmentHeadJoin } from "../../../providers/postauthDepartmentHeadJoin";
import { postauthDepartmentHeadLogin } from "../../../providers/postauthDepartmentHeadLogin";
import { postauthDepartmentHeadRefresh } from "../../../providers/postauthDepartmentHeadRefresh";

import { IHealthcarePlatformDepartmentHead } from "../../../api/structures/IHealthcarePlatformDepartmentHead";

@Controller("/auth/departmentHead")
export class AuthDepartmentheadController {
  /**
   * Register new department head (healthcare_platform_departmentheads) and
   * issue JWT tokens.
   *
   * Create a new department head account and issue authorization tokens. This
   * onboarding operation is for users who will function as 'departmentHead'
   * within an organization. It creates and persists a unique department head
   * entity in the healthcare_platform_departmentheads table. Email must be
   * unique, full name required. Upon success, returns JWT tokens using the
   * IHealthcarePlatformDepartmentHead.IAuthorized DTO. Security audits are
   * triggered for all join operations per compliance policy, and all data is
   * subject to PHI and business audit bounds. This operation is essential for
   * granting initial administrative access for a department context. Related
   * operations include login, refresh, and role assignment endpoints. Error
   * conditions: duplicate email, missing required fields, or invalid business
   * data will result in a clear business error and audit log entry.
   * Post-registration workflows may require additional verification (e.g.,
   * employment/credential validation) by organizational policy.
   *
   * @param connection
   * @param body Department head registration payload (email, full name,
   *   optional phone) per IHealthcarePlatformDepartmentHead.IJoinRequest DTO.
   *   Required for initial administrator onboarding. All fields must comply
   *   with business input rules and be subject to audit policy.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.IJoinRequest,
  ): Promise<IHealthcarePlatformDepartmentHead.IAuthorized> {
    try {
      return await postauthDepartmentHeadJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login existing department head and issue session tokens
   * (healthcare_platform_departmentheads).
   *
   * Authenticate a department head (healthcare_platform_departmentheads) with
   * credentials to issue JWT tokens. This operation validates supplied login
   * data (email and password or SSO credentials) against system authentication
   * tables. On success, returns access and refresh JWTs using the
   * IHealthcarePlatformDepartmentHead.IAuthorized DTO. Failed logins, lockouts,
   * or suspicious behavior trigger audit log and incident workflows. This is a
   * core step in department-level administrative access. Errors: invalid
   * credentials, account lockout, or policy violations result in business error
   * and security incident logs. Related operations: join (for registration),
   * refresh (for token renewal), logout or revoke flows where required.
   *
   * @param connection
   * @param body Login credentials payload (email/password or SSO assertion) per
   *   IHealthcarePlatformDepartmentHead.ILoginRequest representation. Required
   *   for authentication. Validates that the email exists and credentials are
   *   correct. Compliant with platform-wide authentication rules.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.ILoginRequest,
  ): Promise<IHealthcarePlatformDepartmentHead.IAuthorized> {
    try {
      return await postauthDepartmentHeadLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Department head JWT token refresh (healthcare_platform_departmentheads) via
   * valid refresh token.
   *
   * Refresh JWT tokens for an authenticated department head session
   * (healthcare_platform_departmentheads). Requires valid refresh token. Issues
   * new access/refresh tokens if session is active. Supports seamless and
   * secure continuation of department admin workflows subject to compliance and
   * session-lifetime policy. All refresh attempts and outcomes are logged per
   * business audit procedures. Related operations: login, logout/session
   * revoke, and join for full account lifecycle. Errors:
   * invalid/expired/revoked tokens result in error and audit log.
   *
   * @param connection
   * @param body Refresh token submission DTO
   *   (IHealthcarePlatformDepartmentHead.IRefreshRequest) for department head
   *   JWT refresh. Contains issued refresh token and (optionally)
   *   device/session context as per business session management policies.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.IRefreshRequest,
  ): Promise<IHealthcarePlatformDepartmentHead.IAuthorized> {
    try {
      return await postauthDepartmentHeadRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
