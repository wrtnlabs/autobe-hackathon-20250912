import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthReceptionistJoin } from "../../../providers/postauthReceptionistJoin";
import { postauthReceptionistLogin } from "../../../providers/postauthReceptionistLogin";
import { postauthReceptionistRefresh } from "../../../providers/postauthReceptionistRefresh";

import { IHealthcarePlatformReceptionist } from "../../../api/structures/IHealthcarePlatformReceptionist";

@Controller("/auth/receptionist")
export class AuthReceptionistController {
  /**
   * Register a new receptionist and issue initial JWT tokens
   * (healthcare_platform_receptionists).
   *
   * This endpoint allows a new receptionist user to register an account on the
   * healthcarePlatform by providing required fields such as email and
   * full_name. Registration is subject to unique email enforcement and triggers
   * creation of a new receptionist entity in the
   * 'healthcare_platform_receptionists' table. Upon successful registration, a
   * JWT token pair (access and refresh) is issued, enabling authenticated
   * participation in appointment management and non-clinical administrative
   * workflows.
   *
   * Passwords and initial authentication credentials are written to the
   * cross-entity 'healthcare_platform_user_authentications' table. Regulatory
   * compliance is enforced via audit trails, and RBAC policies ensure the new
   * receptionist is granted only member-level, logistics-related permissions.
   * Duplicate email validation is strictly enforced.
   *
   * This endpoint is accessible without authentication but is audited in
   * compliance logs. It integrates with subsequent security operations (login,
   * password reset, MFA enablement) required for production deployment.
   *
   * Security is enforced according to organizational policies and best
   * practices for healthcare data onboarding. Failed registrations (e.g.,
   * duplicate, missing required fields) are returned with specific error codes
   * and do not result in persistent entities.
   *
   * This endpoint should be paired with the login and refresh endpoints to
   * enable a complete authentication lifecycle for receptionists.
   *
   * @param connection
   * @param body Receptionist registration data for account creation
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IHealthcarePlatformReceptionist.ICreate,
  ): Promise<IHealthcarePlatformReceptionist.IAuthorized> {
    try {
      return await postauthReceptionistJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a receptionist and issue JWT tokens
   * (healthcare_platform_receptionists).
   *
   * This endpoint allows a receptionist with an existing account to
   * authenticate to the healthcarePlatform using credentials stored in the
   * 'healthcare_platform_receptionists' and
   * 'healthcare_platform_user_authentications' tables. It verifies the provided
   * password or external authentication provider and, on success, returns a JWT
   * access/refresh token pair for use in member-level administrative
   * workflows.
   *
   * Authentication is denied for inactive or deleted receptionist accounts, and
   * all failed attempts are logged for compliance and security monitoring.
   * Credentials are validated against records with strict enforcement of
   * account status, RBAC policies, and audit trail requirements.
   *
   * Repeated failed logins may trigger account lockout or security incidents
   * according to the organization's security posture.
   *
   * Use this endpoint as part of the core receptionist sign-in flow, typically
   * following initial 'join' registration. Pair with the refresh endpoint to
   * enable seamless session continuity.
   *
   * @param connection
   * @param body Receptionist login credential data
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IHealthcarePlatformReceptionist.ILogin,
  ): Promise<IHealthcarePlatformReceptionist.IAuthorized> {
    try {
      return await postauthReceptionistLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh a receptionist's JWT tokens (healthcare_platform_auth_sessions).
   *
   * This endpoint allows an authenticated receptionist to refresh their access
   * token using a valid refresh token. It looks up the receptionist's session
   * in 'healthcare_platform_auth_sessions', ensuring the refresh token is still
   * valid and active. If successful, new JWT credentials are returned,
   * extending access for ongoing member-level administrative tasks.
   *
   * Token refresh is denied if the underlying receptionist account is inactive
   * or deleted, or if the refresh token is expired or revoked. All operations
   * are strictly audit logged for compliance, enabling full traceability of
   * authentication lifecycle events.
   *
   * This endpoint supports seamless session continuity for receptionist users
   * and should always be paired with the login endpoint for initial sign-in
   * flows. It is unavailable to unauthenticated or invalid sessions.
   *
   * @param connection
   * @param body Credentials required to refresh receptionist access token
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IHealthcarePlatformReceptionist.IRefresh,
  ): Promise<IHealthcarePlatformReceptionist.IAuthorized> {
    try {
      return await postauthReceptionistRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
