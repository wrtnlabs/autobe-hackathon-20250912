import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists } from "../../../../../providers/posthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists";
import { MedicaldoctorAuth } from "../../../../../decorators/MedicaldoctorAuth";
import { MedicaldoctorPayload } from "../../../../../decorators/payload/MedicaldoctorPayload";
import { patchhealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists } from "../../../../../providers/patchhealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists";
import { gethealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId } from "../../../../../providers/gethealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId";
import { puthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId } from "../../../../../providers/puthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId";

import { IHealthcarePlatformAppointmentWaitlist } from "../../../../../api/structures/IHealthcarePlatformAppointmentWaitlist";
import { IPageIHealthcarePlatformAppointmentWaitlist } from "../../../../../api/structures/IPageIHealthcarePlatformAppointmentWaitlist";

@Controller(
  "/healthcarePlatform/medicalDoctor/appointments/:appointmentId/waitlists",
)
export class HealthcareplatformMedicaldoctorAppointmentsWaitlistsController {
  /**
   * Add a waitlist entry for a patient to a specific appointment (join
   * waitlist).
   *
   * Create a new waitlist entry for a patient on a particular appointment.
   * Patients may self-join the waitlist for an appointment that is currently
   * full; authorized staff can add patients on their behalf in accordance with
   * scheduling policy.
   *
   * Business rules validate that a patient cannot be waitlisted more than once
   * per appointment, and that organization, department, and appointment status
   * permit further waitlisting. All creation events are properly audited, with
   * join time and current status set per schema documentation. Sensitive
   * patient information, if present in the request, is only processed by
   * authorized roles.
   *
   * Implements compliance with organizational scheduling policies and privacy
   * protections, with all events creating audit logs as enforced by the
   * healthcare platform's business rules. Errors are returned if the
   * appointment does not permit further waitlisting or if business policy is
   * violated.
   *
   * @param connection
   * @param appointmentId Unique identifier for the target appointment where
   *   waitlisting is requested.
   * @param body Patient and contextual information needed to join the waitlist.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.ICreate,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await posthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists(
        {
          medicalDoctor,
          appointmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the waitlist for a given appointment from the appointment
   * waitlists table.
   *
   * Retrieve the waitlist for a specified appointment on the healthcare
   * platform, returning a paginated, filtered list of users waiting for a slot.
   * The operation supports advanced query features such as sorting by join time
   * or status and filtering by patient or waitlist entry status.
   *
   * Authorization is enforced according to organization, department, or patient
   * context, ensuring callers see only the waitlist entries they are permitted
   * to access under strict RBAC. Patients only see their own status, while
   * appropriate staff (receptionists, nurses, admins) can view the entire list
   * for coordination purposes. Sensitive patient identifiers are filtered
   * according to user role.
   *
   * As per schema documentation, this retrieves the
   * `healthcare_platform_appointment_waitlists` related to an `appointmentId`,
   * providing audit and compliance features so that data access is properly
   * monitored and restricted. Pagination ensures performant retrieval even for
   * busy time slots. Handling includes validation of appointmentId and clear
   * error signaling for restricted access.
   *
   * @param connection
   * @param appointmentId Unique identifier of the appointment for which to
   *   retrieve the waitlist.
   * @param body Query and pagination/filter parameters for searching the
   *   waitlist.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.IRequest,
  ): Promise<IPageIHealthcarePlatformAppointmentWaitlist.ISummary> {
    try {
      return await patchhealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlists(
        {
          medicalDoctor,
          appointmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific appointment waitlist entry.
   *
   * Retrieve detailed information for an individual appointment waitlist entry,
   * including patient, join time, current status (active, promoted, removed),
   * and relevant patient metadata where authorized. Sensitive fields are
   * presented only to authorized roles per privacy and compliance constraints.
   *
   * User permissions are strictly enforcedâ€”patients can only view their own
   * waitlist entries, while organization and department staff with appropriate
   * scheduling or administrative roles (e.g., receptionist, department head)
   * can access any entry within their allowed scope. Every access is logged and
   * auditable to support HIPAA/data compliance.
   *
   * Handles validation on appointmentId and waitlistId, returns appropriate
   * error messages for invalid, restricted, or not found entries. This is a
   * single-resource GET operation referencing
   * healthcare_platform_appointment_waitlists as described in the Prisma schema
   * and ERD.
   *
   * @param connection
   * @param appointmentId Unique identifier for the appointment containing the
   *   waitlist.
   * @param waitlistId Unique identifier of the waitlist entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":waitlistId")
  public async at(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedParam("waitlistId")
    waitlistId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await gethealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId(
        {
          medicalDoctor,
          appointmentId,
          waitlistId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Edit a specific waitlist entry for an appointment.
   *
   * Update a specific entry on an appointment's waitlist, such as by changing
   * status (e.g., promoted when a slot opens, or removed on patient/clinic
   * action), updating rationale, or other permissible fields per system
   * business rules. The operation is carefully restricted under RBAC; only
   * staff with authority or the patient for their own record may make changes.
   *
   * All changes are audited to satisfy compliance, and unauthorized edits
   * result in clear business errors. Validates presence of both appointmentId
   * and waitlistId, enforces that edits are permitted by current status and
   * complies with privacy and safety rules consistent with Prisma model
   * documentation.
   *
   * Operation references the `healthcare_platform_appointment_waitlists` table
   * and its relationships; all successful changes generate audit logs and
   * enforce any derived business policy such as automatic removal from
   * waitlists on promotion.
   *
   * @param connection
   * @param appointmentId Unique identifier for the appointment containing the
   *   waitlist entry.
   * @param waitlistId Unique identifier of the waitlist entry to update.
   * @param body Fields to update on the waitlist entry, including
   *   status/rationale.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":waitlistId")
  public async update(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("appointmentId")
    appointmentId: string & tags.Format<"uuid">,
    @TypedParam("waitlistId")
    waitlistId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAppointmentWaitlist.IUpdate,
  ): Promise<IHealthcarePlatformAppointmentWaitlist> {
    try {
      return await puthealthcarePlatformMedicalDoctorAppointmentsAppointmentIdWaitlistsWaitlistId(
        {
          medicalDoctor,
          appointmentId,
          waitlistId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
