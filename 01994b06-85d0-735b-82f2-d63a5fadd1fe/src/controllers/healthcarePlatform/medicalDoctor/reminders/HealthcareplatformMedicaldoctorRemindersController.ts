import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformMedicalDoctorReminders } from "../../../../providers/posthealthcarePlatformMedicalDoctorReminders";
import { MedicaldoctorAuth } from "../../../../decorators/MedicaldoctorAuth";
import { MedicaldoctorPayload } from "../../../../decorators/payload/MedicaldoctorPayload";
import { patchhealthcarePlatformMedicalDoctorReminders } from "../../../../providers/patchhealthcarePlatformMedicalDoctorReminders";
import { gethealthcarePlatformMedicalDoctorRemindersReminderId } from "../../../../providers/gethealthcarePlatformMedicalDoctorRemindersReminderId";
import { puthealthcarePlatformMedicalDoctorRemindersReminderId } from "../../../../providers/puthealthcarePlatformMedicalDoctorRemindersReminderId";
import { deletehealthcarePlatformMedicalDoctorRemindersReminderId } from "../../../../providers/deletehealthcarePlatformMedicalDoctorRemindersReminderId";

import { IHealthcarePlatformReminder } from "../../../../api/structures/IHealthcarePlatformReminder";
import { IPageIHealthcarePlatformReminder } from "../../../../api/structures/IPageIHealthcarePlatformReminder";

@Controller("/healthcarePlatform/medicalDoctor/reminders")
export class HealthcareplatformMedicaldoctorRemindersController {
  /**
   * Create a new scheduled reminder for user or staff.
   *
   * Create a new reminder entry for future delivery, specifying recipient,
   * type, scheduled delivery window, and message/payload.
   *
   * Used by staff, providers, or system automation to set up reminders for
   * clinical, compliance, appointment, or medication flows. Enforces
   * organizational and role scoping, audit logging, and validation of
   * recipient/channel compatibility. Fails if schedule is invalid, recipient is
   * not found, or the user lacks authorization.
   *
   * This endpoint writes to the healthcare_platform_reminders table and
   * triggers downstream notification or escalation workflows as per system
   * policy. Related endpoints include search/list reminders and detailed
   * reminder retrieval.
   *
   * @param connection
   * @param body The information required to create a new scheduled reminder,
   *   including target, type, payload, schedule, and delivery metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedBody()
    body: IHealthcarePlatformReminder.ICreate,
  ): Promise<IHealthcarePlatformReminder> {
    try {
      return await posthealthcarePlatformMedicalDoctorReminders({
        medicalDoctor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list reminders with filter, sorting, and pagination.
   *
   * Obtain a filtered and paginated list of reminders stored in the platform,
   * filtered by user role and query parameters.
   *
   * The reminders system is responsible for delivering scheduled notifications
   * to users and staff (e.g., appointment, compliance, medication). This
   * operation enables searching, filtering, and sorting reminders according to
   * criteria such as recipient, status, time window, delivery outcome, and
   * organization context, supporting bulk reminder management or analytics.
   * Authorization is typically required for any user account able to view
   * reminders in their organization scope; compliance and privacy rules apply.
   *
   * This endpoint operates on the healthcare_platform_reminders table,
   * returning reminder summaries and supporting paging through large volumes of
   * data. Related endpoints include single reminder fetch and reminder
   * creation.
   *
   * @param connection
   * @param body Search and filter parameters for retrieving reminders
   *   (recipient, status, scheduled window, etc.) with pagination and sorting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedBody()
    body: IHealthcarePlatformReminder.IRequest,
  ): Promise<IPageIHealthcarePlatformReminder.ISummary> {
    try {
      return await patchhealthcarePlatformMedicalDoctorReminders({
        medicalDoctor,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single reminder by ID (detail view).
   *
   * Retrieve the full details for a specified reminder ID, including recipient,
   * type/class, delivery schedule, status, notification channel, and lifecycle
   * history.
   *
   * This operation allows users with valid access rights to inspect a reminder
   * record by its unique UUID, supporting user portals, compliance review, or
   * troubleshooting workflows. It ensures that PHI or sensitive notification
   * content is only accessible to users authorized by organizational or
   * role-based policy.
   *
   * This endpoint operates on the healthcare_platform_reminders table and
   * includes detailed reminder fields. Audit or compliance logs may require
   * additional review when accessing sensitive reminder data. Related
   * operations include listing reminders and creating new scheduled reminders.
   *
   * @param connection
   * @param reminderId The unique identifier (UUID) of the reminder to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reminderId")
  public async at(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("reminderId")
    reminderId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformReminder> {
    try {
      return await gethealthcarePlatformMedicalDoctorRemindersReminderId({
        medicalDoctor,
        reminderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing healthcare platform reminder (reminderId) in the
   * healthcare_platform_reminders table.
   *
   * The update operation is designed for scenarios where reminder details such
   * as delivery time, message content, reminder type, or delivery channel must
   * be changed â€” for example, when patient follow-up schedules change, staff
   * coverage is updated, or a business policy requires adjustments. The
   * operation requires that the caller has the necessary permission for the
   * targeted reminder (patient, staff, or organization context). It supports
   * all reminder fields except immutable system audit fields and can be invoked
   * by patients, staff, or automation depending on access rights. All changes
   * are strictly recorded for audit, and business logic prevents update of
   * reminders where business rules require completion or archival (e.g.,
   * compliance holds, completed reminders, scheduled medication reminders
   * delivered). If a reminder is already soft-deleted, the operation returns an
   * appropriate error. The update operation is critical for maintaining
   * accurate reminder schedules, effective communication, and regulatory
   * compliance in healthcare workflows. Responses include the updated reminder
   * object. Error handling covers permission validation, validation of reminder
   * state, and data consistency enforcement. This operation relates directly to
   * the healthcare_platform_reminders table in the Prisma schema.
   *
   * @param connection
   * @param reminderId Unique identifier of the reminder to update.
   * @param body Updated fields for the healthcare platform reminder entity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reminderId")
  public async update(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("reminderId")
    reminderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformReminder.IUpdate,
  ): Promise<IHealthcarePlatformReminder> {
    try {
      return await puthealthcarePlatformMedicalDoctorRemindersReminderId({
        medicalDoctor,
        reminderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a healthcare platform reminder (reminderId) from the
   * healthcare_platform_reminders table (sets deleted_at).
   *
   * The erase operation allows authorized users to disable (soft delete) an
   * existing reminder, remove it from active workflow, and ensure the change
   * and rationale are captured in audit logs. Reminders in finalized, active
   * compliance workflows, or those that are already soft-deleted are protected
   * from deletion and return errors if deletion is attempted. Soft deletion
   * means that the reminder is excluded from active queries but preserved for
   * compliance retention and recovery. Role-based access rules enforce that
   * only users with organizational or reminder ownership may execute the
   * operation. Every delete operation is recorded with user, timestamp, and
   * context for audit trail purposes, supporting full lifecycle traceability.
   * This operation concretely supports healthcare_platform_reminders table
   * logic and the foundational business rules set out for regulatory
   * obligations in the domain.
   *
   * @param connection
   * @param reminderId Unique identifier of the reminder to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reminderId")
  public async erase(
    @MedicaldoctorAuth()
    medicalDoctor: MedicaldoctorPayload,
    @TypedParam("reminderId")
    reminderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformMedicalDoctorRemindersReminderId({
        medicalDoctor,
        reminderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
