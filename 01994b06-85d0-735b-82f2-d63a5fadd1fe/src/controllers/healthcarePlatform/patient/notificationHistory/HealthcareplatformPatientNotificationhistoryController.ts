import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformPatientNotificationHistory } from "../../../../providers/patchhealthcarePlatformPatientNotificationHistory";
import { PatientAuth } from "../../../../decorators/PatientAuth";
import { PatientPayload } from "../../../../decorators/payload/PatientPayload";
import { gethealthcarePlatformPatientNotificationHistoryNotificationHistoryId } from "../../../../providers/gethealthcarePlatformPatientNotificationHistoryNotificationHistoryId";

import { IPageIHealthcarePlatformNotificationHistory } from "../../../../api/structures/IPageIHealthcarePlatformNotificationHistory";
import { IHealthcarePlatformNotificationHistory } from "../../../../api/structures/IHealthcarePlatformNotificationHistory";

@Controller("/healthcarePlatform/patient/notificationHistory")
export class HealthcareplatformPatientNotificationhistoryController {
  /**
   * Search and filter notification delivery history
   * (healthcare_platform_notification_history table).
   *
   * This endpoint provides a mechanism to search and retrieve system
   * notification history events. Each event details an attempt or outcome
   * (delivered, failed, retried, acknowledged, escalated, etc.) associated with
   * notification delivery through various channels (email, SMS, in-app, push).
   * The operation allows filtering by user, organization, date range, delivery
   * channel, notification type, delivery status, and acknowledgment outcome.
   *
   * Pagination and full-text search are available to support browsing large
   * volumes of notification events in high-activity organizations. API clients
   * must have appropriate authorization to view notification history for self
   * or, in the case of administrators, their organization's users.
   *
   * Error handling includes protection against data leakage across org
   * boundaries, improper filter use, or exceeding rate limits for bulk history
   * export. This operation supports audit, SLA verification, and compliance
   * workflows to ensure reliable communication and traceability of critical
   * events in the system.
   *
   * Related endpoints include individual notification history view (GET),
   * notification summary stats, and notification resend/retry operations (if
   * permitted).
   *
   * @param connection
   * @param body Search and filter criteria for notification delivery history,
   *   including user/org, date range, delivery channel, status, and
   *   notification type, as well as pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PatientAuth()
    patient: PatientPayload,
    @TypedBody()
    body: IHealthcarePlatformNotificationHistory.IRequest,
  ): Promise<IPageIHealthcarePlatformNotificationHistory> {
    try {
      return await patchhealthcarePlatformPatientNotificationHistory({
        patient,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single notification delivery history event
   * (healthcare_platform_notification_history table).
   *
   * This endpoint retrieves the details of an individual notification history
   * event, including the delivery/acknowledgment status, delivery channel,
   * recipient/user, associated notification event, timestamps, and extended
   * delivery outcome metadata. It is used by users to audit notification
   * receipt or by admins to investigate communication status for SLA/incident
   * reporting.
   *
   * Authorization logic ensures that only properly privileged users (self,
   * organization admin, patient) can view notification delivery history within
   * their org boundaries.
   *
   * Typical errors include referencing non-existent or unauthorized event IDs,
   * or attempts to access another organization's data.
   *
   * Related operations include retrieving notification details, delivery status
   * (PATCH), or related escalation event/context for auditing communication
   * escalation and response compliance.
   *
   * @param connection
   * @param notificationHistoryId Unique identifier for the notification
   *   delivery history event to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationHistoryId")
  public async at(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("notificationHistoryId")
    notificationHistoryId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformNotificationHistory> {
    try {
      return await gethealthcarePlatformPatientNotificationHistoryNotificationHistoryId(
        {
          patient,
          notificationHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
