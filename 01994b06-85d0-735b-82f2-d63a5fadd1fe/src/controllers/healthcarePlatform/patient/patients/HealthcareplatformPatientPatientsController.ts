import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformPatientPatientsPatientId } from "../../../../providers/gethealthcarePlatformPatientPatientsPatientId";
import { PatientAuth } from "../../../../decorators/PatientAuth";
import { PatientPayload } from "../../../../decorators/payload/PatientPayload";
import { puthealthcarePlatformPatientPatientsPatientId } from "../../../../providers/puthealthcarePlatformPatientPatientsPatientId";
import { posthealthcarePlatformPatientPatients } from "../../../../providers/posthealthcarePlatformPatientPatients";

import { IHealthcarePlatformPatient } from "../../../../api/structures/IHealthcarePlatformPatient";

@Controller("/healthcarePlatform/patient/patients")
export class HealthcareplatformPatientPatientsController {
  /**
   * Retrieve a specific patient profile by patientId from
   * healthcare_platform_patients.
   *
   * Retrieve a single patient user profile by specifying the unique patientId.
   * This operation is used to display or process detailed patient information
   * as stored in the healthcare_platform_patients table, including core
   * attributes (email, full_name, date_of_birth, phone, created_at, updated_at,
   * and deleted_at fields). Only active (not soft-deleted) records are
   * returned, and the operation enforces strict tenant data isolation—users can
   * only access patients within their organization context.
   *
   * Security and audit rules require that only roles with appropriate
   * permission, such as medicalDoctor, nurse, organizationAdmin, receptionist,
   * and the patient themselves, can access the profile, with all access events
   * logged for compliance and traceability. Attempts to view patient profiles
   * outside scope or organization boundaries are denied and audited per
   * policy.
   *
   * This GET endpoint is intended for use alongside related API endpoints that
   * reference patients, such as listing their appointments or billing status.
   * It handles errors for not found, unauthorized, or deleted records and
   * surfaces audit trail entries as required for regulatory compliance.
   *
   * @param connection
   * @param patientId Unique identifier of the target patient user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":patientId")
  public async at(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await gethealthcarePlatformPatientPatientsPatientId({
        patient,
        patientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing patient user profile in healthcare_platform_patients.
   *
   * Update the patient user profile for an existing patient in the system by
   * specifying their patientId and providing the updated fields. The operation
   * is anchored on the healthcare_platform_patients table and governs changes
   * to core profile information, including email, full_name, date_of_birth, and
   * phone. Update attempts are controlled by role-based access and input
   * validation (including uniqueness for email), and only permitted for
   * authorized users or the patient themselves as dictated by the
   * organization’s compliance and audit policies.
   *
   * The endpoint logs all changes for security, audit trail, and reportability
   * purposes. It supports integrations with dependent records such as patient
   * appointments and billing, ensuring changes propagate according to business
   * requirements. Error scenarios for invalid patientId, data conflicts, or
   * unauthorized modification requests are handled with appropriate responses,
   * ensuring compliance at every update event.
   *
   * @param connection
   * @param patientId Unique identifier of the patient to update.
   * @param body Fields to update for the patient profile as per
   *   healthcare_platform_patients schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":patientId")
  public async update(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPatient.IUpdate,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await puthealthcarePlatformPatientPatientsPatientId({
        patient,
        patientId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Register a new patient user profile in healthcare_platform_patients.
   *
   * Register a new patient user profile in the platform, capturing required
   * demographic and identity information as defined in the
   * healthcare_platform_patients table. Required fields include email, full
   * name, and date of birth, with phone as optional. The POST operation
   * validates input for uniqueness (especially email), regulatory standards,
   * and readiness for audit trail logging. It integrates with downstream
   * patient workflows, including appointments, billing, and consent management,
   * as well as security and notification preferences.
   *
   * Role-based access ensures that both staff (such as receptionists and
   * organization admins) and patients (via self-service registration) can
   * create accounts as permitted by business policy. Error handling covers
   * duplicate email, invalid input, and compliance failures, with all creations
   * subject to audit and legal traceability. The response returns the created
   * patient profile and links it to the organization's patient record domain
   * for further operations and workflow integration.
   *
   * @param connection
   * @param body Patient registration/provisioning information according to
   *   healthcare_platform_patients schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PatientAuth()
    patient: PatientPayload,
    @TypedBody()
    body: IHealthcarePlatformPatient.ICreate,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await posthealthcarePlatformPatientPatients({
        patient,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
