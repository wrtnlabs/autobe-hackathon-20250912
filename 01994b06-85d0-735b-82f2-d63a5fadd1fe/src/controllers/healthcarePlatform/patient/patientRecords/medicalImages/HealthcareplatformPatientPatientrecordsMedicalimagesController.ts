import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformPatientPatientRecordsPatientRecordIdMedicalImagesMedicalImageId } from "../../../../../providers/gethealthcarePlatformPatientPatientRecordsPatientRecordIdMedicalImagesMedicalImageId";
import { PatientAuth } from "../../../../../decorators/PatientAuth";
import { PatientPayload } from "../../../../../decorators/payload/PatientPayload";

import { IHealthcarePlatformMedicalImage } from "../../../../../api/structures/IHealthcarePlatformMedicalImage";

@Controller(
  "/healthcarePlatform/patient/patientRecords/:patientRecordId/medicalImages/:medicalImageId",
)
export class HealthcareplatformPatientPatientrecordsMedicalimagesController {
  /**
   * Retrieve a medical image's metadata and access link under a patient record
   * (healthcare_platform_medical_images table).
   *
   * Fetches the detailed metadata and access URI for a single medical image
   * related to the specified patient record. Medical images may include DICOM,
   * JPEG, or other clinical media files used for diagnosis and care
   * documentation. The response includes image type, upload history, metadata
   * (acquisition, modality), storage URI, and references to the uploading
   * technician and encounter. Audit trails are enforced for every read,
   * supporting regulatory investigation and privacy requirements.
   *
   * Access to medical images is governed by the user's role and may also
   * require patient consent verification. Retrieval is logged at the access
   * layer, noting requesting user, time, purpose, and governing
   * organization/department context. Images flagged as sensitive or under a
   * privacy lock are only delivered if policy is satisfied. This operation
   * never delivers image binaries directly, but instead provides a secure URI
   * for authorized viewing/download.
   *
   * If the specified medical image does not exist under the patient record, is
   * deleted, or access is denied by policy (e.g., consent revoked, under legal
   * hold), the system returns a policy-appropriate error (404 or 403) and logs
   * the attempt for compliance reporting.
   *
   * This operation is key for provider review, multidisciplinary care, external
   * consults, and patient portal access (subject to configuration and privacy).
   * It complements broader record operations (EHR, audit trail) as defined in
   * platform requirements.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the parent patient record
   *   (UUID).
   * @param medicalImageId Unique identifier of the target medical image (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @PatientAuth()
    patient: PatientPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("medicalImageId")
    medicalImageId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformMedicalImage> {
    try {
      return await gethealthcarePlatformPatientPatientRecordsPatientRecordIdMedicalImagesMedicalImageId(
        {
          patient,
          patientRecordId,
          medicalImageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
