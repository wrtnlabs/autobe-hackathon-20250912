import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformReceptionistAppointmentStatuses } from "../../../../providers/patchhealthcarePlatformReceptionistAppointmentStatuses";
import { ReceptionistAuth } from "../../../../decorators/ReceptionistAuth";
import { ReceptionistPayload } from "../../../../decorators/payload/ReceptionistPayload";
import { gethealthcarePlatformReceptionistAppointmentStatusesStatusId } from "../../../../providers/gethealthcarePlatformReceptionistAppointmentStatusesStatusId";

import { IPageIHealthcarePlatformAppointmentStatus } from "../../../../api/structures/IPageIHealthcarePlatformAppointmentStatus";
import { IHealthcarePlatformAppointmentStatus } from "../../../../api/structures/IHealthcarePlatformAppointmentStatus";

@Controller("/healthcarePlatform/receptionist/appointmentStatuses")
export class HealthcareplatformReceptionistAppointmentstatusesController {
  /**
   * List and search all appointment statuses in the scheduling module.
   *
   * This API operation allows users with scheduling management privileges to
   * search and retrieve appointment status definitions across the platform.
   * Appointment statuses define the possible states of appointments (e.g.,
   * scheduled, confirmed, canceled, no-show) and are critical for scheduling
   * workflows, UI flow, and business rules enforcement.
   *
   * This operation queries the healthcare_platform_appointment_statuses table,
   * returning paginated and optionally filtered results. Supported filters may
   * include business_status, display_name, or custom sort_order. The operation
   * returns both core codes and user-facing display names.
   *
   * Security: Typically, this endpoint is available to authenticated users
   * (e.g., receptionists, clinical operations staff) to power UI components,
   * dashboard analytics, or business settings screens. No sensitive data is
   * exposed—content is non-PHI but critical for workflow logic.
   *
   * Validation: If filters or sorting parameters are invalid, a validation
   * error is generated. Pagination ensures efficient retrieval even with large
   * status dictionaries. Related endpoints include status creation, update, or
   * detail retrieval per appointment status.
   *
   * @param connection
   * @param body Searching, filtering, or sorting criteria for appointment
   *   statuses (e.g., by status_code, display_name, or order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedBody()
    body: IHealthcarePlatformAppointmentStatus.IRequest,
  ): Promise<IPageIHealthcarePlatformAppointmentStatus.ISummary> {
    try {
      return await patchhealthcarePlatformReceptionistAppointmentStatuses({
        receptionist,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details for a single appointment status identified by statusId.
   *
   * This API operation is used to fetch the detailed definition of a specific
   * appointment status. It returns information such as the workflow code,
   * display label, business grouping (active, closed), and UI sorting order for
   * the status requested by statusId.
   *
   * Access to this operation is typically required by scheduling staff, system
   * administrators, or integration clients needing to understand or validate
   * appointment state flows. The associated table
   * (healthcare_platform_appointment_statuses) acts as the canonical registry
   * for system-wide and organizational status options.
   *
   * Security: There is minimal sensitivity—the data is non-PHI and may be
   * accessible to authenticated reception, admin, and scheduling roles. The
   * operation supports business/operational UI and workflow configuration, and
   * is essential for custom rule-building or display logic in downstream
   * applications.
   *
   * Validation: If statusId does not exist, an error is returned. This endpoint
   * is read-only; updates and creation are managed via separate endpoints.
   *
   * @param connection
   * @param statusId Unique identifier for the target appointment status to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusId")
  public async at(
    @ReceptionistAuth()
    receptionist: ReceptionistPayload,
    @TypedParam("statusId")
    statusId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAppointmentStatus> {
    try {
      return await gethealthcarePlatformReceptionistAppointmentStatusesStatusId(
        {
          receptionist,
          statusId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
