import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformDepartmentHeadNurses } from "../../../../providers/posthealthcarePlatformDepartmentHeadNurses";
import { DepartmentheadAuth } from "../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../decorators/payload/DepartmentheadPayload";
import { patchhealthcarePlatformDepartmentHeadNurses } from "../../../../providers/patchhealthcarePlatformDepartmentHeadNurses";
import { gethealthcarePlatformDepartmentHeadNursesNurseId } from "../../../../providers/gethealthcarePlatformDepartmentHeadNursesNurseId";
import { puthealthcarePlatformDepartmentHeadNursesNurseId } from "../../../../providers/puthealthcarePlatformDepartmentHeadNursesNurseId";

import { IHealthcarePlatformNurse } from "../../../../api/structures/IHealthcarePlatformNurse";
import { IPageIHealthcarePlatformNurse } from "../../../../api/structures/IPageIHealthcarePlatformNurse";

@Controller("/healthcarePlatform/departmentHead/nurses")
export class HealthcareplatformDepartmentheadNursesController {
  /**
   * Create a new nurse staff account in the healthcare_platform_nurses table.
   *
   * Allows privileged organization administrators or department heads to
   * register new nurses into the healthcarePlatform. The required properties
   * are validated against the healthcare_platform_nurses schema: a business
   * email (unique), full legal name, state-issued license number (unique for
   * compliance), specialty (optional), phone contact (optional), and any
   * additional structured fields required for business onboarding or audit.
   * Creates metadata such as timestamps and initial status (e.g., 'active' or
   * 'pending').
   *
   * Business logic applies strong email and license number uniqueness
   * checks—duplicate entries trigger meaningful error messages. Creation events
   * are fully audited, including the actor initiating creation. Any
   * relationship mapping to departments or initial assignment is enforced per
   * business rules.
   *
   * Upon success, the operation responds with the full nurse record, confirming
   * all stored properties.
   *
   * @param connection
   * @param body Nurse profile information required for creation (email, name,
   *   license, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedBody()
    body: IHealthcarePlatformNurse.ICreate,
  ): Promise<IHealthcarePlatformNurse> {
    try {
      return await posthealthcarePlatformDepartmentHeadNurses({
        departmentHead,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of nurses from the
   * healthcarePlatform system (healthcare_platform_nurses table).
   *
   * This operation enables organizational stakeholders to access a
   * comprehensive index of nurses registered in the healthcarePlatform system.
   * Utilizing the healthcare_platform_nurses schema, it supports highly
   * granular filtering and search—by name, license, email, status, department,
   * and speciality. Results are paginated, facilitating large rosters and
   * regulatory reporting needs.
   *
   * Security is enforced via strict authorization: only those with appropriate
   * privileges (for example, organizationAdmin or departmentHead) can access
   * non-anonymized nurse lists. Result details are limited according to role;
   * PHI and sensitive contact details are exposed only to roles with proper
   * clearance. Rate limiting and audit logging are implemented to deter misuse
   * and provide traceability.
   *
   * Implemented pagination allows scalable listing suitable for dashboards or
   * onboarding flows. Query logic adheres to organizational and
   * department-level isolation, in compliance with HIPAA and internal data
   * governance. The endpoint handles edge cases such as inactive, deleted, or
   * pending account states, and provides actionable errors for permission
   * violations or invalid query syntax.
   *
   * @param connection
   * @param body Filtering, searching, and pagination options for nurse index
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedBody()
    body: IHealthcarePlatformNurse.IRequest,
  ): Promise<IPageIHealthcarePlatformNurse.ISummary> {
    try {
      return await patchhealthcarePlatformDepartmentHeadNurses({
        departmentHead,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed nurse profile by nurseId from the
   * healthcare_platform_nurses table.
   *
   * Fetches a single nurse's complete record from the healthcarePlatform, as
   * defined in the healthcare_platform_nurses table. This includes unique ID,
   * business email, legal full name, license/certification number, specialty,
   * phone number, and audit metadata.
   *
   * Authorization is enforced so that only organization administrators,
   * department heads, and staff with specific permissions may view sensitive or
   * identifying staff information. Access attempts are logged for compliance.
   * If a nurse's record is deactivated (soft-deleted), the operation will
   * return an error or indicate account status accordingly.
   *
   * This endpoint plays a key role in HR, compliance, and clinical scheduling
   * interfaces, providing a consistent data source for profile viewing,
   * onboarding, or credentialing verification workflows. Error handling
   * gracefully manages lookup failures, permission violations, and invalid
   * UUIDs.
   *
   * @param connection
   * @param nurseId The unique identifier (UUID) of the target nurse to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":nurseId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("nurseId")
    nurseId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformNurse> {
    try {
      return await gethealthcarePlatformDepartmentHeadNursesNurseId({
        departmentHead,
        nurseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update nurse staff member profile information in healthcare_platform_nurses
   * by nurseId.
   *
   * Enables authorized organizationAdmin or departmentHead to update profile
   * attributes of a nurse in the healthcare_platform_nurses table. Input
   * payload is validated for field-level constraints, including email
   * uniqueness, license number validity, and business process permissions
   * (e.g., only certain fields modifiable post-onboarding). All updates are
   * timestamped, and the actor's ID is logged for audit.
   *
   * Role checks restrict who can update which fields; attempts to alter
   * immutable properties or modify inactive/deleted records will fail with
   * detailed error feedback. The newly updated nurse profile is returned on
   * success, reflecting all changes; sensitive data exposure is limited based
   * on actor's permissions.
   *
   * This operation is essential for HR change requests, compliance credential
   * updates, or clinical staff onboarding adjustments. Edge cases (e.g.,
   * lockouts or inactive status) are handled with actionable error responses.
   *
   * @param connection
   * @param nurseId UUID of the nurse account to update.
   * @param body Fields and values for nurse profile update.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":nurseId")
  public async update(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("nurseId")
    nurseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformNurse.IUpdate,
  ): Promise<IHealthcarePlatformNurse> {
    try {
      return await puthealthcarePlatformDepartmentHeadNursesNurseId({
        departmentHead,
        nurseId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
