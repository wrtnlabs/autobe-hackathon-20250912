import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals } from "../../../../../../providers/posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals";
import { DepartmentheadAuth } from "../../../../../../decorators/DepartmentheadAuth";
import { DepartmentheadPayload } from "../../../../../../decorators/payload/DepartmentheadPayload";
import { patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals } from "../../../../../../providers/patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals";
import { gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitalsVitalId } from "../../../../../../providers/gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitalsVitalId";

import { IHealthcarePlatformVital } from "../../../../../../api/structures/IHealthcarePlatformVital";
import { IPageIHealthcarePlatformVital } from "../../../../../../api/structures/IPageIHealthcarePlatformVital";

@Controller(
  "/healthcarePlatform/departmentHead/patientRecords/:patientRecordId/encounters/:encounterId/vitals",
)
export class HealthcareplatformDepartmentheadPatientrecordsEncountersVitalsController {
  /**
   * Create a new patient vital sign entry for an encounter
   * (healthcare_platform_vitals).
   *
   * Creates a new vital sign entry (e.g., heart rate, respiratory rate, blood
   * pressure, temperature) for a patient as part of a specific EHR encounter.
   * The request body provides the vital type, value, unit, measurement
   * timestamp, and attribution to the recording nurse or clinician.
   *
   * Clinical business logic validates that measurement values and units conform
   * to acceptable medical standards and that the provider has current
   * assignment to the given encounter. The resulting entry is available
   * immediately for charts, trend analysis, analytics, and PHI audit trail.
   * Access restricted to nurses, doctors, and applicable department heads.
   *
   * Error handling includes forbidden when context/role is insufficient, not
   * found if record/encounter is missing, and input validation errors for
   * improper value/unit/type. All create attempts are logged for
   * audit/compliance reporting.
   *
   * @param connection
   * @param patientRecordId Patient record's unique identifier
   * @param encounterId EHR encounter ID for the vitals entry
   * @param body Information for new vital sign entry in patient encounter
   *   (type, value, measured_at, clinical attribution, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformVital.ICreate,
  ): Promise<IHealthcarePlatformVital> {
    try {
      return await posthealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals(
        {
          departmentHead,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of patient vital sign
   * entries for an encounter (healthcare_platform_vitals).
   *
   * Retrieves a filtered and paginated list of vital sign entries for a patient
   * encounter, allowing clinicians and staff to search, sort, and analyze vital
   * data by type, value, measurement timestamp, and recording nurse.
   *
   * The request body supports detailed filtering and complex searches, with
   * options such as measurement intervals, value ranges, and vital type
   * specificity. The response includes paginated vital entry data, and
   * role-based filtering is applied to ensure organizational/departmental
   * boundaries are respected.
   *
   * Security: Only users in care roles (medical doctor, nurse, department head)
   * with organizational context are allowed access. All data retrievals are
   * recorded in audit logs for compliance and incident review.
   *
   * Error handling includes forbidden for lack of privileges, not found for
   * invalid encounter or record IDs, and paginated empty results when no vitals
   * match the criteria.
   *
   * @param connection
   * @param patientRecordId Target patient record's ID
   * @param encounterId EHR encounter ID, parent to vitals
   * @param body Search, filter, and pagination parameters for vitals retrieval
   *   in the encounter context
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformVital.IRequest,
  ): Promise<IPageIHealthcarePlatformVital> {
    try {
      return await patchhealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitals(
        {
          departmentHead,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific patient vital entry for an encounter
   * (healthcare_platform_vitals).
   *
   * Retrieves a single vital sign record (i.e., distinct entry for temperature,
   * blood pressure, or other vital) from a given patient encounter, using the
   * record UUID as lookup.
   *
   * Used for chart review, correction workflows, or clinical interventions. The
   * response contains all fields associated with the vital sign, with full
   * detail and attribution. Role-based filtering ensures that only staff
   * responsible for or assigned to the encounter may access the resource, and
   * all views are PHI-audited.
   *
   * Errors: not found if any path parameter does not exist, forbidden for
   * scope/permission failure, and audit log creation for all data access
   * events. Related endpoints: vitals list, vitals update, and patient
   * encounter summary.
   *
   * @param connection
   * @param patientRecordId Target patient record's ID
   * @param encounterId EHR encounter ID
   * @param vitalId Unique identifier for the vital entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":vitalId")
  public async at(
    @DepartmentheadAuth()
    departmentHead: DepartmentheadPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedParam("vitalId")
    vitalId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformVital> {
    try {
      return await gethealthcarePlatformDepartmentHeadPatientRecordsPatientRecordIdEncountersEncounterIdVitalsVitalId(
        {
          departmentHead,
          patientRecordId,
          encounterId,
          vitalId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
