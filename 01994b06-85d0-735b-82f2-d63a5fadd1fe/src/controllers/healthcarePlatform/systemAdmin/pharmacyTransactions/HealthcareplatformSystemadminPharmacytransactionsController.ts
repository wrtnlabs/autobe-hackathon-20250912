import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminPharmacyTransactions } from "../../../../providers/patchhealthcarePlatformSystemAdminPharmacyTransactions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminPharmacyTransactionsPharmacyTransactionId } from "../../../../providers/gethealthcarePlatformSystemAdminPharmacyTransactionsPharmacyTransactionId";

import { IPageIHealthcarePlatformPharmacyTransaction } from "../../../../api/structures/IPageIHealthcarePlatformPharmacyTransaction";
import { IHealthcarePlatformPharmacyTransaction } from "../../../../api/structures/IHealthcarePlatformPharmacyTransaction";

@Controller("/healthcarePlatform/systemAdmin/pharmacyTransactions")
export class HealthcareplatformSystemadminPharmacytransactionsController {
  /**
   * Retrieve filtered and paginated list of pharmacy transactions
   * (healthcare_platform_pharmacy_transactions).
   *
   * Retrieve a filtered, paginated, and optionally sorted list of pharmacy
   * transaction records from the healthcare_platform_pharmacy_transactions
   * table.
   *
   * This endpoint supports advanced searching by transaction type, status,
   * creation window, pharmacy integration, or other properties to enable audit,
   * compliance, and troubleshooting workflows for healthcare organizations.
   * Only authorized administrative or system users can retrieve this
   * information due to the sensitivity of pharmacy-related data and integration
   * metadata.
   *
   * The operation returns complete transaction details for each record,
   * including organization link, pharmacy integration ID, transaction type
   * (e.g., 'new eRx', 'refill', etc.), transaction statuses and timestamps,
   * error or status messages, and full audit metadata. No write or modification
   * capability is exposed in this endpoint—transaction creation, modification,
   * or error handling is exclusively system- or integration-driven.
   *
   * Pagination parameters ensure efficient retrieval of large volumes of
   * transaction logs, and the response includes metadata about total counts,
   * page sizes, and current page for optimal UI/UX integration. This endpoint
   * is critical for API-level integration troubleshooting, audit trail
   * completion, and pharmacy workflow analytics.
   *
   * Typical users of this endpoint are platform/system administrators,
   * organization admins, or integration operations analysts who require
   * comprehensive review or search capabilities for all pharmacy transaction
   * records associated with their tenant.
   *
   * @param connection
   * @param body Search filters and pagination/sorting criteria for pharmacy
   *   transaction query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPharmacyTransaction.IRequest,
  ): Promise<IPageIHealthcarePlatformPharmacyTransaction> {
    try {
      return await patchhealthcarePlatformSystemAdminPharmacyTransactions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a single pharmacy transaction
   * (healthcare_platform_pharmacy_transactions).
   *
   * Retrieve the detail for a specific pharmacy transaction record in the
   * healthcare_platform_pharmacy_transactions table using its unique
   * identifier.
   *
   * This endpoint provides all available details about the pharmacy
   * transaction, including organization context, pharmacy integration link,
   * transaction type (e.g., 'new eRx', 'refill', etc.), external transaction
   * ID, full status and message logs, all relevant timestamps, payload
   * reference, and audit metadata.
   *
   * Security and privacy controls ensure that only system, administrative, or
   * organization-level users can access this endpoint, as pharmacy transaction
   * data is considered highly sensitive and operationally critical.
   *
   * No updates, deletion, or modifications can be performed via this
   * endpoint—data is read-only and reflects the system/integration managed
   * history for the life of the record. This endpoint is used in operational
   * troubleshooting, integration audit, and compliance workflows for pharmacy
   * and e-prescribing operations.
   *
   * @param connection
   * @param pharmacyTransactionId Unique identifier for the pharmacy transaction
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pharmacyTransactionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("pharmacyTransactionId")
    pharmacyTransactionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPharmacyTransaction> {
    try {
      return await gethealthcarePlatformSystemAdminPharmacyTransactionsPharmacyTransactionId(
        {
          systemAdmin,
          pharmacyTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
