import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminUserOrgAssignments } from "../../../../providers/posthealthcarePlatformSystemAdminUserOrgAssignments";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminUserOrgAssignments } from "../../../../providers/patchhealthcarePlatformSystemAdminUserOrgAssignments";
import { gethealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId } from "../../../../providers/gethealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId";
import { puthealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId } from "../../../../providers/puthealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId";
import { deletehealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId } from "../../../../providers/deletehealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId";

import { IHealthcarePlatformUserOrgAssignment } from "../../../../api/structures/IHealthcarePlatformUserOrgAssignment";
import { IPageIHealthcarePlatformUserOrgAssignment } from "../../../../api/structures/IPageIHealthcarePlatformUserOrgAssignment";

@Controller("/healthcarePlatform/systemAdmin/userOrgAssignments")
export class HealthcareplatformSystemadminUserorgassignmentsController {
  /**
   * Create a new user-organization assignment
   * (healthcare_platform_user_org_assignments).
   *
   * POST /userOrgAssignments enables system or organization administrators to
   * provision a new user-organization link by creating a row in the
   * healthcare_platform_user_org_assignments Prisma table. This is essential
   * for assigning staff, clinical users, or admin users to an organization
   * context with clearly designated role and assignment metadata.
   *
   * Input validation ensures the referenced user and organization exist, the
   * role_code is valid for the org, and the assignment_status is permissible
   * (e.g., 'active', 'pending'). The operation triggers any onboarding or
   * access provisioning hooks defined in business logic. Audit requirements
   * ensure the assignment is recorded with all relevant metadata for review or
   * compliance.
   *
   * Error handling includes duplicate assignment detection, permission
   * validation, and appropriate feedback for invalid data. This API is related
   * to update, erase, and listing/search endpoints to provide the full RBAC
   * management cycle.
   *
   * @param connection
   * @param body Required information for assigning a user to an organization
   *   and role.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformUserOrgAssignment.ICreate,
  ): Promise<IHealthcarePlatformUserOrgAssignment> {
    try {
      return await posthealthcarePlatformSystemAdminUserOrgAssignments({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate user-organization assignment records
   * (healthcare_platform_user_org_assignments).
   *
   * The PATCH /userOrgAssignments endpoint retrieves a filtered, paginated list
   * of user-organization-role assignments from the
   * healthcare_platform_user_org_assignments Prisma model. Administrators and
   * system staff can search, sort, and paginate assignments by user,
   * organization, role code, and assignment status, which is essential for
   * platform-wide RBAC enforcement and audits.
   *
   * The request body supports granular filtering (e.g., users with a specific
   * role within an organization, assignments pending approval, or recently
   * updated links). Security is vital; only users with system, organization, or
   * designated RBAC admin roles can access the full listing, and search results
   * are filtered to the requesting user's scope.
   *
   * Returned records provide summary assignment details (user_id,
   * organization_id, role, status, created/updated timestamps) useful for
   * auditing, onboarding/offboarding, or role review workflows. This operation
   * complements create, update, and erase endpoints for full user access
   * management.
   *
   * @param connection
   * @param body Filter, sort, and pagination controls for user-organization
   *   assignments search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformUserOrgAssignment.IRequest,
  ): Promise<IPageIHealthcarePlatformUserOrgAssignment> {
    try {
      return await patchhealthcarePlatformSystemAdminUserOrgAssignments({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch details of a specific user-organization assignment
   * (healthcare_platform_user_org_assignments).
   *
   * GET /userOrgAssignments/{userOrgAssignmentId} provides complete details of
   * a user-organization assignment mapping via the
   * healthcare_platform_user_org_assignments Prisma table. It is used by system
   * and organization administrators to audit, review, or verify membership,
   * permission, and RBAC assignment history for a specific user within a
   * tenant.
   *
   * The operation requires a valid UUID for the assignment. It returns
   * assignment metadata (user, organization, role, status,
   * created/updated/deleted timestamps), enabling workflows like offboarding,
   * reassignment, or compliance review. Security checks ensure only authorized
   * staff can view sensitive assignment information, with scope filtering as
   * required by business rules.
   *
   * This operation is closely related to the search (list), create, update, and
   * erase endpoints for assignment management. Error handling includes
   * addressal of invalid, deleted, or non-existent IDs, returning useful HTTP
   * errors.
   *
   * @param connection
   * @param userOrgAssignmentId Unique identifier for the user-organization
   *   assignment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userOrgAssignmentId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userOrgAssignmentId")
    userOrgAssignmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformUserOrgAssignment> {
    try {
      return await gethealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId(
        {
          systemAdmin,
          userOrgAssignmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing user-organization assignment
   * (healthcare_platform_user_org_assignments).
   *
   * This endpoint allows authorized staff to update an existing
   * user-organization assignment record in the healthcarePlatform. Multi-tenant
   * healthcare organizations rely on correct, up-to-date mapping of users
   * (system admins, medical staff, support) to their assigned organizations for
   * all RBAC and business logic.
   *
   * On update, only valid, active organization and role_code assignments are
   * allowed, and changes are strictly audit-logged. Business rules enforce
   * single assignment per user-org combination, requiring unique and active
   * assignment status. Role assignments may trigger additional workflows such
   * as credential checks or session invalidation for privilege downgrades.
   * Critical roles (organizationAdmin, departmentHead, medicalDoctor) require
   * additional verification and may affect open patient cases or operational
   * approvals.
   *
   * Attempting to update with an invalid or deactivated role, inactive
   * organization, or conflicting assignment produces explicit validation
   * errors. All changes are tracked in financial, compliance, and core audit
   * logs to support HIPAA and internal investigations. If a user attempts to
   * update a record outside their permission scope or with insufficient
   * privilege, the system denies the update and logs the access attempt.
   *
   * This operation is closely related to userOrgAssignment creation (for
   * onboarding) and deletion/termination endpoints (for offboarding).
   *
   * @param connection
   * @param userOrgAssignmentId Unique identifier for the user-organization
   *   assignment to update
   * @param body Fields and values to update for this userOrgAssignment record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userOrgAssignmentId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userOrgAssignmentId")
    userOrgAssignmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformUserOrgAssignment.IUpdate,
  ): Promise<IHealthcarePlatformUserOrgAssignment> {
    try {
      return await puthealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId(
        {
          systemAdmin,
          userOrgAssignmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a user-organization assignment
   * (healthcare_platform_user_org_assignments).
   *
   * Allows an authorized system or organization administrator to remove a
   * user-organization assignment by marking it as deleted (soft delete).
   *
   * Deleting a user-org assignment is a sensitive operation affecting a user's
   * RBAC and business workflow assignments. The endpoint enforces strict
   * business validation to prevent removal of critical assignments unless
   * safely transferable (for example, a department head role cannot be deleted
   * if there are open duties). Attempts to delete non-existent or non-active
   * assignments result in a clear error.
   *
   * All deletions are recorded for audit/compliance review, and access is
   * denied if the acting user lacks sufficient privilege. The operation is
   * related to the update (for role/status changes) and create endpoints (when
   * onboarding new staff or medical users).
   *
   * @param connection
   * @param userOrgAssignmentId Unique identifier for the user-organization
   *   assignment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userOrgAssignmentId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userOrgAssignmentId")
    userOrgAssignmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminUserOrgAssignmentsUserOrgAssignmentId(
        {
          systemAdmin,
          userOrgAssignmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
