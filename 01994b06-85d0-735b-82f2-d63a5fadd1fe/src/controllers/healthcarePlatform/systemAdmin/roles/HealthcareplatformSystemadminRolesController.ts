import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminRoles } from "../../../../providers/posthealthcarePlatformSystemAdminRoles";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminRoles } from "../../../../providers/patchhealthcarePlatformSystemAdminRoles";
import { gethealthcarePlatformSystemAdminRolesRoleId } from "../../../../providers/gethealthcarePlatformSystemAdminRolesRoleId";
import { puthealthcarePlatformSystemAdminRolesRoleId } from "../../../../providers/puthealthcarePlatformSystemAdminRolesRoleId";
import { deletehealthcarePlatformSystemAdminRolesRoleId } from "../../../../providers/deletehealthcarePlatformSystemAdminRolesRoleId";

import { IHealthcarePlatformRole } from "../../../../api/structures/IHealthcarePlatformRole";
import { IPageIHealthcarePlatformRole } from "../../../../api/structures/IPageIHealthcarePlatformRole";

@Controller("/healthcarePlatform/systemAdmin/roles")
export class HealthcareplatformSystemadminRolesController {
  /**
   * Create a new RBAC role (platform/org/department) in healthcarePlatform.
   *
   * Create a new role in the healthcarePlatform, which may apply at the
   * platform, organization, or department scope, and is used for mapping
   * permissions, controlling access, and managing role-based security. Roles
   * created through this endpoint support hierarchical access models and
   * support all compliance and audit requirements as described in the Prisma
   * schema.
   *
   * Security: Only system administrators can create new top-level roles, while
   * organization administrators may create organization or department specific
   * roles, subject to business logic constraints and compliance reviews. Role
   * codes must be unique within their scope. Care must be taken to avoid
   * accidental creation of redundant or conflicting roles.
   *
   * Relationships: The role entity is referenced from user assignments and
   * defines boundaries for all permission grants and business rule enforcement.
   * Changes may impact user access and workflow eligibility across the system.
   *
   * Validation and Business Logic: Code and name fields are required;
   * scope_type must be one of the supported RBAC segmentation types; status
   * should reflect intended operational state; creation and update timestamps
   * are managed by the system. After creation, roles are available for
   * assignment to users or business operations.
   *
   * Related Operations: Role creation is often performed prior to bulk user
   * onboarding, permission mapping, or organization setup. Ensure that
   * permissions are mapped for the new role via the permissions endpoint.
   *
   * @param connection
   * @param body Data required to define the new RBAC role, including code,
   *   display name, scope level, and operational status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformRole.ICreate,
  ): Promise<IHealthcarePlatformRole> {
    try {
      return await posthealthcarePlatformSystemAdminRoles({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate the list of roles in the platform
   * (healthcare_platform_roles table).
   *
   * This endpoint provides advanced search capabilities for listing roles
   * managed by the platform. Users can apply flexible search criteria, sort
   * results by creation date, name, or code, and paginate through potentially
   * large result sets. The request body allows detailed filtering on properties
   * such as code, name, scope_type (platform, organization, department), and
   * status (active, retired, system-only, archived), reflecting the RBAC policy
   * structure outlined in the Prisma schema.
   *
   * Results support organization-scoped queries and can be restricted or
   * ordered by scope and status as necessary for administrative management of
   * roles. Performance is optimized for filtered, paginated retrieval and
   * integrates role-based access control logic to ensure users only view roles
   * within their permitted administrative scope.
   *
   * The output is a paginated container (IPageIHealthcarePlatformRole.ISummary)
   * suitable for management UI and auditing functions. Errors related to
   * invalid filters or lack of permission are clearly reported.
   *
   * @param connection
   * @param body Role search and pagination parameters as described by
   *   IHealthcarePlatformRole.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformRole.IRequest,
  ): Promise<IPageIHealthcarePlatformRole.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminRoles({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific role entity by ID (healthcare_platform_roles
   * table).
   *
   * This endpoint enables platform and organizational administrators to
   * retrieve full details about a specific role by its unique identifier
   * (roleId). The output includes all fields annotated in the
   * healthcare_platform_roles Prisma schema, such as the role's code, display
   * name, scope_type (platform, organization, department), current status, and
   * creation/update timestamps.
   *
   * Access to this endpoint is governed by administrative privileges as
   * outlined in the RBAC configuration. The operation is essential for
   * reviewing and confirming role definitions, ensuring compliance with RBAC
   * policies, and providing source-of-truth data for audits. Errors are
   * returned when access is denied or the role is not found.
   *
   * @param connection
   * @param roleId Globally unique identifier of the role to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roleId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRole> {
    try {
      return await gethealthcarePlatformSystemAdminRolesRoleId({
        systemAdmin,
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing RBAC role's display name, status, or description.
   *
   * Update mutable fields of a role entity, specifically supporting changes to
   * name, status, and display information. Use case includes correcting
   * nomenclature, retiring a role, or activating a dormant RBAC definition.
   * Role codes and scope_type are immutable after creation for security and
   * compliance reasons, as enforcing these constraints is critical for
   * auditable identity and access management.
   *
   * Security: Only system administrators or organization administrators at the
   * appropriate scope may perform updates. The operation checks for reference
   * integrity to prevent updates that would violate downstream RBAC or workflow
   * dependencies.
   *
   * Relationship and Impact: This change is reflected in all RBAC assignments,
   * permissions, and workflow authorizations tied to the updated role. Inactive
   * or retired roles may not be reassigned to users post-update, but all
   * historical audit/use information is retained as per Prisma schema
   * guidelines and regulatory compliance.
   *
   * Validation: All updates must comply with input validation logic—name and
   * status fields must not be empty and status must match allowed business
   * values. Attempting to change locked fields (code/scope_type) will result in
   * validation errors.
   *
   * Error Handling: If the roleId does not reference a valid existing role, the
   * operation will return a 404 error; business rules violation or malformed
   * update details will cause 400 validation errors.
   *
   * @param connection
   * @param roleId Unique identifier for the RBAC role to update.
   * @param body Fields to update for the target RBAC role (name, status,
   *   description). Code and scope_type are immutable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":roleId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRole.IUpdate,
  ): Promise<IHealthcarePlatformRole> {
    try {
      return await puthealthcarePlatformSystemAdminRolesRoleId({
        systemAdmin,
        roleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove an unassigned RBAC role from the healthcarePlatform
   * system.
   *
   * Permanently delete a role record from the healthcarePlatform. This
   * operation enforces reference checks to guarantee the role is not assigned
   * or in use before removal; attempts to delete assigned or active roles will
   * result in error responses. Roles eligible for deletion are completely
   * removed from system access lists and cannot be restored—this operation is a
   * hard delete, not a soft delete, according to the Prisma schema. All audit
   * trails of role usage persist per the system's compliance policies.
   *
   * Security: Erasure of roles can only be performed by a system administrator.
   * This is typically a maintenance operation for deprecated or erroneous roles
   * no longer required by business logic, and is subject to strict audit
   * requirements.
   *
   * Relationship: If a role is referenced, deletion triggers validation errors.
   * Deletion of unreferenced roles has no impact on audit logs or historical
   * access.
   *
   * Error Handling: Deleting a non-existent role, or any role still in use,
   * results in 4XX error codes and descriptive error responses, in line with
   * strict compliance enforcement demands.
   *
   * @param connection
   * @param roleId Unique identifier of the RBAC role to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":roleId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminRolesRoleId({
        systemAdmin,
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
