import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminInsuranceApiIntegrations } from "../../../../providers/posthealthcarePlatformSystemAdminInsuranceApiIntegrations";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminInsuranceApiIntegrations } from "../../../../providers/patchhealthcarePlatformSystemAdminInsuranceApiIntegrations";
import { gethealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId } from "../../../../providers/gethealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId";
import { puthealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId } from "../../../../providers/puthealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId";
import { deletehealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId } from "../../../../providers/deletehealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId";

import { IHealthcarePlatformInsuranceApiIntegration } from "../../../../api/structures/IHealthcarePlatformInsuranceApiIntegration";
import { IPageIHealthcarePlatformInsuranceApiIntegration } from "../../../../api/structures/IPageIHealthcarePlatformInsuranceApiIntegration";

@Controller("/healthcarePlatform/systemAdmin/insuranceApiIntegrations")
export class HealthcareplatformSystemadminInsuranceapiintegrationsController {
  /**
   * Create a new insurance API integration configuration for an organization.
   *
   * Create a new insurance API integration for a specific healthcare
   * organization, providing details such as the insurance vendor code, API
   * connection URI, supported transaction types (e.g., eligibility, claims),
   * and operational status. This operation supports onboarding new insurance
   * vendors or changing integration configuration while ensuring compliance
   * with the organization's boundary and audit requirements.
   *
   * The operation enforces data integrity by requiring a unique combination of
   * organization ID and insurance vendor code. Status must be appropriate to
   * the deployment state (active, test, failed, etc), and connection URIs are
   * validated for reachability and standards compliance. Only systemAdmins or
   * organizationAdmins may perform this action, as insurance integrations
   * affect compliance and external communications.
   *
   * After successful creation, the new integration becomes available for
   * workflow automation, including claims and eligibility checks. Failure
   * scenarios include uniqueness violations or invalid configuration, in which
   * case errors detail the required correction.
   *
   * @param connection
   * @param body Information required to create an insurance API integration
   *   configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsuranceApiIntegration.ICreate,
  ): Promise<IHealthcarePlatformInsuranceApiIntegration> {
    try {
      return await posthealthcarePlatformSystemAdminInsuranceApiIntegrations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve filtered and paginated list of insurance API integrations
   * (healthcare_platform_insurance_api_integrations).
   *
   * Retrieve a filtered, paginated, and optionally sorted list of insurance API
   * integration configuration records from the
   * healthcare_platform_insurance_api_integrations table.
   *
   * This endpoint supports advanced searching by integration type, status,
   * organization, supported transaction types, or other properties to enable
   * audit, compliance, and troubleshooting of insurance-related workflows and
   * payer data exchange setups. Only authorized administrative or system users
   * can retrieve this information due to the sensitivity of payer integration
   * metadata and API secrets.
   *
   * The operation returns configuration details, including unique connection
   * URIs, insurance vendor codes, status, and supported transaction types for
   * each integration. No write, update, or delete operation is supported in
   * this endpoint: integration creation and modification are managed through
   * restricted or back-office workflows outside this API.
   *
   * Pagination parameters allow efficient access and display of many
   * configuration records with summary metadata. This endpoint is critical for
   * compliance, payer integration monitoring, and operational readiness reviews
   * for both system and organization administrators.
   *
   * @param connection
   * @param body Search filters and pagination/sorting criteria for insurance
   *   API integration query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformInsuranceApiIntegration.IRequest,
  ): Promise<IPageIHealthcarePlatformInsuranceApiIntegration> {
    try {
      return await patchhealthcarePlatformSystemAdminInsuranceApiIntegrations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a single insurance API integration
   * (healthcare_platform_insurance_api_integrations).
   *
   * Retrieve the detail for a single insurance API integration configuration
   * from the healthcare_platform_insurance_api_integrations table using its
   * unique identifier.
   *
   * This endpoint provides comprehensive detail on the insurance API
   * integration, including organization reference, payer/vendor code,
   * connection URI, supported transaction types (e.g., eligibility, claims,
   * realtime), current status, and configuration change/audit history if
   * applicable.
   *
   * These records are highly sensitive and must be restricted to administrative
   * or back-office user roles due to the presence of API credentials or
   * security-relevant metadata; access is not available to general users. All
   * configuration management or change workflows are managed outside this API:
   * usage here is strictly read-only for operational review, troubleshooting,
   * or audit.
   *
   * This endpoint supports compliance requirements, integration lifecycle
   * management, and system health monitoring for insurance API integrations
   * across the multi-tenant environment.
   *
   * @param connection
   * @param insuranceApiIntegrationId Unique identifier for the insurance API
   *   integration record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":insuranceApiIntegrationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceApiIntegrationId")
    insuranceApiIntegrationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformInsuranceApiIntegration> {
    try {
      return await gethealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId(
        {
          systemAdmin,
          insuranceApiIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update configuration of an existing insurance API integration.
   *
   * Update an existing insurance API integration configuration record, allowing
   * reconfiguration of vendor code, connection URI, supported transaction
   * types, or operational status. This operation ensures that only one
   * integration per vendor per organization exists and prevents accidental
   * overwrites.
   *
   * Security is enforced via administrator-level roles, with write-access
   * limited to systemAdmins and organizationAdmins of the relevant tenant.
   * Invalid input, such as an incorrect URI format or unsupported transaction
   * type, results in actionable validation errors. Configuration changes are
   * immediately auditable in system logs and take effect upon next integration
   * use.
   *
   * If an integration is marked as inactive, it is excluded from eligibility or
   * claim submissions until reactivated by administrators.
   *
   * @param connection
   * @param insuranceApiIntegrationId Unique identifier of the insurance API
   *   integration to update
   * @param body Updated configuration for the insurance API integration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insuranceApiIntegrationId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceApiIntegrationId")
    insuranceApiIntegrationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceApiIntegration.IUpdate,
  ): Promise<IHealthcarePlatformInsuranceApiIntegration> {
    try {
      return await puthealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId(
        {
          systemAdmin,
          insuranceApiIntegrationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an insurance API integration configuration.
   *
   * Delete an insurance API integration configuration record from the system.
   * This operation removes the record entirely from the
   * healthcare_platform_insurance_api_integrations table, including connection
   * details and configuration.
   *
   * Due to the risk of disrupting insurance workflows, delete operations are
   * restricted to systemAdmins and organizationAdmins. Prior to deletion, any
   * associations with outstanding claims or transactions should be reviewed to
   * avoid workflow impact.
   *
   * This operation is a hard delete; after execution, the integration cannot be
   * recovered. The action is logged in the audit trail for regulatory
   * compliance.
   *
   * @param connection
   * @param insuranceApiIntegrationId Unique identifier of the insurance API
   *   integration to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":insuranceApiIntegrationId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insuranceApiIntegrationId")
    insuranceApiIntegrationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminInsuranceApiIntegrationsInsuranceApiIntegrationId(
        {
          systemAdmin,
          insuranceApiIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
