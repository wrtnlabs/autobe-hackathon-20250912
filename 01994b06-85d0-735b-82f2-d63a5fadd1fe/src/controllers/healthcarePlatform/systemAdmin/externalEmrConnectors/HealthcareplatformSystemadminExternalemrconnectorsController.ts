import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminExternalEmrConnectors } from "../../../../providers/posthealthcarePlatformSystemAdminExternalEmrConnectors";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminExternalEmrConnectors } from "../../../../providers/patchhealthcarePlatformSystemAdminExternalEmrConnectors";
import { gethealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId } from "../../../../providers/gethealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId";
import { puthealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId } from "../../../../providers/puthealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId";
import { deletehealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId } from "../../../../providers/deletehealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId";

import { IHealthcarePlatformExternalEmrConnector } from "../../../../api/structures/IHealthcarePlatformExternalEmrConnector";
import { IPageIHealthcarePlatformExternalEmrConnector } from "../../../../api/structures/IPageIHealthcarePlatformExternalEmrConnector";

@Controller("/healthcarePlatform/systemAdmin/externalEmrConnectors")
export class HealthcareplatformSystemadminExternalemrconnectorsController {
  /**
   * Create a new external EMR connector record for interoperability (table:
   * healthcare_platform_external_emr_connectors).
   *
   * Register a new external EMR connector configuration in the system,
   * specifying all required fields for integration with an EMR/EHR vendor. The
   * request body must include organization mapping, connector type/vendor,
   * connection endpoint, and initial status. Upon creation, the configuration
   * is stored in healthcare_platform_external_emr_connectors and made available
   * for monitoring, health checks, system dashboards, and integration
   * workflows.
   *
   * Input validation is strict: the combination of organization and connector
   * type must be unique, required fields (URI, status, etc.) must be present
   * and valid, and compliance policies such as secure credential handling are
   * enforced. Only system and organization admins may create new connectors.
   * Error handling covers uniqueness violations, validation errors, and
   * compliance policy enforcement.
   *
   * The operation is typically paired with configuration management UX for
   * onboarding external EMR/EHR systems and supports readiness for operational
   * dashboards and compliance audits.
   *
   * @param connection
   * @param body Detailed data for creating a new external EMR connector record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformExternalEmrConnector.ICreate,
  ): Promise<IHealthcarePlatformExternalEmrConnector> {
    try {
      return await posthealthcarePlatformSystemAdminExternalEmrConnectors({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of external EMR connector
   * configurations (table: healthcare_platform_external_emr_connectors).
   *
   * Retrieve a paginated and filtered list of external EMR connector
   * configurations from the healthcare_platform_external_emr_connectors table,
   * supporting filtering by organization, vendor type, operational status, or
   * last sync time. This list is essential for administrators managing the
   * interoperability landscape of the healthcare platform—allowing proactive
   * readiness review, troubleshooting, and cross-organization audit.
   *
   * Query parameters and request body allow for complex search, sorting, and
   * paging. Security ensures only users with platform or organization admin
   * roles can enumerate connectors. Access logging and compliance requirements
   * are enforced, with sensitive integration credentials never returned via
   * API.
   *
   * Typical use cases include configuration audits, visualization in
   * integration dashboards, or pre-checks for onboarding new organizations. The
   * endpoint interacts closely with monitoring and system health logic,
   * ensuring that platform reliability is maintained across integrations with
   * EMR vendors.
   *
   * @param connection
   * @param body Query and pagination parameters for searching external EMR
   *   connectors.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformExternalEmrConnector.IRequest,
  ): Promise<IPageIHealthcarePlatformExternalEmrConnector.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminExternalEmrConnectors({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch the complete configuration details for a specific external EMR
   * connector by ID (table: healthcare_platform_external_emr_connectors).
   *
   * Fetch detailed configuration and status information for a single external
   * EMR connector record, using its connector ID as the lookup key from
   * healthcare_platform_external_emr_connectors. The returned information
   * includes vendor type, connection endpoints, status, last synchronization
   * date, and related metadata relevant for administration, auditing, and
   * troubleshooting.
   *
   * Security and access are tightly controlled—the endpoint is available only
   * to system and organization administrators, ensuring role-based visibility
   * boundaries in accordance with multi-tenant platform standards. Sensitive
   * fields, such as credentials or internal tokens, are either excluded or
   * masked from API output by implementation policy.
   *
   * The operation supports operational monitoring, compliance readiness, and
   * integration lifecycle management for connected EMR/EHR vendors. All access
   * events are logged for security and compliance review.
   *
   * @param connection
   * @param externalEmrConnectorId Unique identifier (UUID) of the external EMR
   *   connector to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalEmrConnectorId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalEmrConnectorId")
    externalEmrConnectorId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformExternalEmrConnector> {
    try {
      return await gethealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId(
        {
          systemAdmin,
          externalEmrConnectorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an external EMR connector configuration
   * (healthcare_platform_external_emr_connectors).
   *
   * Updates the configuration or metadata of an existing external EMR
   * (Electronic Medical Record) connector, corresponding to a specific
   * connector record in the healthcare_platform_external_emr_connectors table.
   * This operation allows administrative users to change properties such as
   * connector type, connection URI, operational status, last sync time, or
   * custom parameters for integration with third-party EMR/EHR systems.
   *
   * Strict platform and organizational checks apply for this endpoint, which is
   * limited to users with administrative roles due to the potential impact on
   * global health data flows and compliance boundaries.
   *
   * All changes are subject to audit trail requirements, and validation logic
   * must ensure that status transitions, connector types, and endpoints conform
   * to allowed values. The operation should fail gracefully with proper
   * messages if the connector ID is missing, invalid, soft-deleted, or if the
   * update would cause loss of audit data or breach interoperability
   * constraints.
   *
   * Related operations may include creation and deletion of EMR connectors,
   * querying available connectors, and system-wide health checks on connector
   * status.
   *
   * @param connection
   * @param externalEmrConnectorId Unique identifier of the external EMR
   *   connector to update.
   * @param body Update information for an external EMR connector, such as
   *   connection_uri, status, or connector_type.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":externalEmrConnectorId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalEmrConnectorId")
    externalEmrConnectorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformExternalEmrConnector.IUpdate,
  ): Promise<IHealthcarePlatformExternalEmrConnector> {
    try {
      return await puthealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId(
        {
          systemAdmin,
          externalEmrConnectorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard remove) an external EMR connector
   * (healthcare_platform_external_emr_connectors).
   *
   * Permanently removes an external EMR connector configuration record from the
   * database by its unique identifier. The operation is mapped to the
   * healthcare_platform_external_emr_connectors table and is intended for use
   * only by highly privileged systemAdmin or organizationAdmin roles.
   *
   * All deletions must be recorded in the audit log, and the system must
   * confirm that the specified connector exists and is not already deleted. The
   * removal should fail with a meaningful error if the ID does not exist or the
   * connector is linked to active processes. There are no soft delete semantics
   * for this operation, and the record will be eliminated from persistent
   * storage.
   *
   * This endpoint is complementary to operations for connector creation and
   * update and should only be used in scenarios of connector decommission or
   * critical incident remediation.
   *
   * @param connection
   * @param externalEmrConnectorId Unique identifier of the external EMR
   *   connector to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":externalEmrConnectorId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalEmrConnectorId")
    externalEmrConnectorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminExternalEmrConnectorsExternalEmrConnectorId(
        {
          systemAdmin,
          externalEmrConnectorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
