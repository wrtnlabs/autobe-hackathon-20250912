import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminAuthSessions } from "../../../../providers/patchhealthcarePlatformSystemAdminAuthSessions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminAuthSessionsAuthSessionId } from "../../../../providers/gethealthcarePlatformSystemAdminAuthSessionsAuthSessionId";
import { deletehealthcarePlatformSystemAdminAuthSessionsAuthSessionId } from "../../../../providers/deletehealthcarePlatformSystemAdminAuthSessionsAuthSessionId";

import { IPageIHealthcarePlatformAuthSession } from "../../../../api/structures/IPageIHealthcarePlatformAuthSession";
import { IHealthcarePlatformAuthSession } from "../../../../api/structures/IHealthcarePlatformAuthSession";

@Controller("/healthcarePlatform/systemAdmin/authSessions")
export class HealthcareplatformSystemadminAuthsessionsController {
  /**
   * Search, paginate, and filter authentication sessions from
   * healthcare_platform_auth_sessions.
   *
   * This endpoint is responsible for advanced session search and monitoring. It
   * operates on the 'healthcare_platform_auth_sessions' table, which tracks
   * issued tokens (JWT/refresh), session state, expiry, revocation info, user
   * agent, and IP address for all resource owners (any user type: systemadmin,
   * orgadmin, doctor, etc).
   *
   * Patch requests allow for provided filters such as user_id, session_token,
   * user_type, status (active, revoked), date ranges (issued_at, expires_at),
   * device fingerprints, and network source (IP). Pagination and sorting
   * options enable navigation through high-volume session data, crucial for
   * operational support and regulatory audit trails.
   *
   * Access is restricted to privileged system administrators due to the
   * sensitivity of session information. All query events must themselves be
   * logged for audit review. Typical use cases include auditing login history,
   * investigating suspicious activity, or forcibly inspecting expired/revoked
   * sessions. Related operations may include detail retrieval or deletion via
   * GET/DELETE on /authSessions/{authSessionId}.
   *
   * @param connection
   * @param body Session query/search and pagination parameters to filter list
   *   of authentication sessions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAuthSession.IRequest,
  ): Promise<IPageIHealthcarePlatformAuthSession.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminAuthSessions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific authentication session by
   * session ID from healthcare_platform_auth_sessions.
   *
   * This endpoint obtains the full metadata for a specific authentication
   * session by its session ID (authSessionId). The
   * 'healthcare_platform_auth_sessions' table records all session-related
   * information, such as session_token, user_id, user_type, revoked_at
   * timestamp for forced terminations, device signature, and IP address (if
   * available).
   *
   * The operation is restricted to system administrators, ensuring only
   * authorized roles may query sensitive session detail. Use cases include
   * confirming whether a session is active or revoked, investigating login from
   * a suspicious device, or reviewing access context for compliance audit.
   *
   * If the session is not found or the ID is malformed or expired, the endpoint
   * must return an error response with appropriate logging for regulatory
   * reviews. This API may be used together with the search or deletion
   * operations for full lifecycle session control.
   *
   * @param connection
   * @param authSessionId Unique identifier (UUID) for the target authentication
   *   session record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":authSessionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authSessionId")
    authSessionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAuthSession> {
    try {
      return await gethealthcarePlatformSystemAdminAuthSessionsAuthSessionId({
        systemAdmin,
        authSessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (revoke) a specific authentication session record and immediately
   * terminate access, only permitted for system administrators.
   *
   * This endpoint irrevocably deletes or revokes an authentication session
   * record selected by its authSessionId, targeting entries in the
   * 'healthcare_platform_auth_sessions' table. Each session represents active,
   * expired, or revoked token state for resource owner logins across any user
   * type (systemadmin/orgadmin/doctor/etc.).
   *
   * Session revocation or force deletion is typically used for security
   * enforcement: forcibly logging out users in case of credential compromise,
   * disciplinary action, or as part of account deactivation workflows. Events
   * must be fully auditable for regulatory and incident response requirements.
   *
   * If a non-existent or already-revoked session is specified, the operation
   * should signal a clear error while logging the action for compliance
   * reasons. Related operations include session listing, retrieval, or
   * searching for tokens.
   *
   * This action is always restricted to systemAdmin roles following least
   * privilege policy.
   *
   * @param connection
   * @param authSessionId Unique identifier (UUID) for the target authentication
   *   session to revoke/delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":authSessionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authSessionId")
    authSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminAuthSessionsAuthSessionId(
        {
          systemAdmin,
          authSessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
