import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminNotificationPreferences } from "../../../../providers/posthealthcarePlatformSystemAdminNotificationPreferences";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminNotificationPreferences } from "../../../../providers/patchhealthcarePlatformSystemAdminNotificationPreferences";
import { gethealthcarePlatformSystemAdminNotificationPreferencesNotificationPreferenceId } from "../../../../providers/gethealthcarePlatformSystemAdminNotificationPreferencesNotificationPreferenceId";

import { IHealthcarePlatformNotificationPreference } from "../../../../api/structures/IHealthcarePlatformNotificationPreference";
import { IPageIHealthcarePlatformNotificationPreference } from "../../../../api/structures/IPageIHealthcarePlatformNotificationPreference";

@Controller("/healthcarePlatform/systemAdmin/notificationPreferences")
export class HealthcareplatformSystemadminNotificationpreferencesController {
  /**
   * Create a new notification preference entry
   * (healthcare_platform_notification_preferences table).
   *
   * This API endpoint allows a user or platform administrator to create a
   * notification preference, which determines the method (channel), type, and
   * scope of notifications a user will receive. The
   * healthcare_platform_notification_preferences table stores whether the
   * preference is enabled, what kinds of escalation apply, and any mute or
   * do-not-disturb window for the alerts.
   *
   * Proper validation ensures the combination of (user_id,
   * notification_channel, notification_type) is unique, as enforced by the
   * schema. Users typically manage their own notification preferences, but
   * organizational administrators can manage preferences for their users via
   * elevated privileges.
   *
   * If a preference already exists for the requested combination, the system
   * should return a conflict or ignore duplicates according to business policy.
   * All creations are logged for compliance.
   *
   * On success, the full notification preference record is returned, showing
   * the current settings. This endpoint is foundational to personalized
   * alerting and granular preference control in the healthcare SaaS platform.
   *
   * @param connection
   * @param body Specification for the notification preference being created,
   *   including channel, notification type, enable/disable state, and
   *   escalation details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformNotificationPreference.ICreate,
  ): Promise<IHealthcarePlatformNotificationPreference> {
    try {
      return await posthealthcarePlatformSystemAdminNotificationPreferences({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of notification preferences
   * (healthcare_platform_notification_preferences table).
   *
   * This API provides a paginated, filtered list of notification preferences
   * across the platform or within a user's context. The
   * healthcare_platform_notification_preferences table tracks per-user or
   * per-organization notification delivery channels, types, statuses
   * (enabled/disabled), mute settings, and escalation policy for each alert
   * type.
   *
   * Request body allows specifying search filters such as channel, type,
   * enabled flag, as well as page size and sorting fields. Only active and
   * relevant notification preferences are returned, according to the
   * requestor's access permissions.
   *
   * Sensitivity: Users should only be able to query their own preferences
   * unless granted administrative rights. Audit logs should record all
   * search/filter accesses for compliance.
   *
   * This functionality helps manage notification blast radius and user
   * communication policy at scale.
   *
   * @param connection
   * @param body Search and pagination criteria for filtering notification
   *   preferences.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformNotificationPreference.IRequest,
  ): Promise<IPageIHealthcarePlatformNotificationPreference> {
    try {
      return await patchhealthcarePlatformSystemAdminNotificationPreferences({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific notification preference by its ID
   * (healthcare_platform_notification_preferences table).
   *
   * This endpoint returns full details for a single notification preference
   * record, identified by notificationPreferenceId. Each notification
   * preference governs whether a user or organization receives a certain type
   * of notification over a particular channel (email, sms, in-app, etc.). The
   * healthcare_platform_notification_preferences table includes preferences for
   * mute windows, escalation handling, and enabled status.
   *
   * Security: Users may only access their own notification preferences unless
   * they have explicit privilege (admin roles). Sensitive or organizational
   * preferences may require elevated permissions. All access to user
   * configuration should be recorded for auditability.
   *
   * This is often used in user profile or notification settings views, and is
   * the foundation for interfaces that allow preference updates. Failure to
   * find the preference returns 404 Not Found.
   *
   * @param connection
   * @param notificationPreferenceId The unique identifier for the notification
   *   preference to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationPreferenceId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("notificationPreferenceId")
    notificationPreferenceId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformNotificationPreference> {
    try {
      return await gethealthcarePlatformSystemAdminNotificationPreferencesNotificationPreferenceId(
        {
          systemAdmin,
          notificationPreferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
