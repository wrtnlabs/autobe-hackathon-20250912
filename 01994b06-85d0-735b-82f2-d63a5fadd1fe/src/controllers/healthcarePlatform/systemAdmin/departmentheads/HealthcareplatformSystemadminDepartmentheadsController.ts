import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminDepartmentheads } from "../../../../providers/posthealthcarePlatformSystemAdminDepartmentheads";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminDepartmentheads } from "../../../../providers/patchhealthcarePlatformSystemAdminDepartmentheads";
import { gethealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId } from "../../../../providers/gethealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId";
import { puthealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId } from "../../../../providers/puthealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId";
import { deletehealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId } from "../../../../providers/deletehealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId";

import { IHealthcarePlatformDepartmentHead } from "../../../../api/structures/IHealthcarePlatformDepartmentHead";
import { IPageIHealthcarePlatformDepartmenthead } from "../../../../api/structures/IPageIHealthcarePlatformDepartmenthead";

@Controller("/healthcarePlatform/systemAdmin/departmentheads")
export class HealthcareplatformSystemadminDepartmentheadsController {
  /**
   * Create a new Department Head in the healthcare platform (table:
   * healthcare_platform_departmentheads).
   *
   * This operation is used to create a new Department Head representing
   * clinical or operational leadership within an existing healthcare
   * organization. Department Heads are responsible for scheduling, performance
   * management, and approvals within their domain. Department Heads must
   * provide a business-verified email address for compliance purposes, and can
   * have an optional phone number for notifications and alerting. The creation
   * process enforces unique email and business-legal identity, reflected in the
   * system's audit logs for onboarding and compliance validation.
   *
   * Security and permissions are enforced so that only organization-level
   * administrators or system administrators may onboard Department Heads. The
   * new Department Head record is linked to broader RBAC and department
   * assignment workflows, but assignment to specific departments and
   * organizations is handled separately from this creation process to ensure
   * clean separation of concerns and auditability. Error responses include
   * unique constraint violations (non-unique email) and insufficient
   * permissions.
   *
   * Operation integration is critical for multi-tenant environments. All
   * Department Head records support soft deletion and full auditability for
   * role onboarding changes, meeting all business rules for clinical
   * administration.
   *
   * @param connection
   * @param body Information required to create a new Department Head (email,
   *   full name, optional phone)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.ICreate,
  ): Promise<IHealthcarePlatformDepartmentHead> {
    try {
      return await posthealthcarePlatformSystemAdminDepartmentheads({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list department heads (healthcare_platform_departmentheads),
   * with pagination and filters.
   *
   * Retrieves a filtered and paginated list of department heads, leveraging the
   * 'healthcare_platform_departmentheads' schema. The request body can contain
   * search parameters such as partial name match, email keyword, and
   * creation/update timeframe filters.
   *
   * The returned page contains department head summary or detail records,
   * supporting list display, selection, and bulk assignment workflows for
   * administrators. Result metadata includes total items, page size, and
   * pagination state.
   *
   * Access is restricted to users with system or organizational admin
   * privileges, enabling them to manage, review, and audit department head
   * assignments. All searches are logged for compliance and visibility. If
   * filters produce no results, the response is an empty page dataset.
   *
   * @param connection
   * @param body Query and filter parameters for searching department heads.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.IRequest,
  ): Promise<IPageIHealthcarePlatformDepartmenthead> {
    try {
      return await patchhealthcarePlatformSystemAdminDepartmentheads({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a department head's full record by ID
   * (healthcare_platform_departmentheads).
   *
   * Fetches the full record for a single department head, as specified by their
   * unique identifier, from the department heads dataset. Used for audits,
   * staff management, or organizational workflow reviews, the operation returns
   * data such as full legal name, email, phone, and timestamps.
   *
   * Access is restricted by RBAC; only admins or platform roles may view this
   * information in accordance with compliance and privacy policy. The operation
   * logs access for regulatory review. If the record is missing or deleted, an
   * error is returned with clear messaging around staff record status.
   *
   * @param connection
   * @param departmentHeadId The unique identifier (UUID) of the department head
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":departmentHeadId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("departmentHeadId")
    departmentHeadId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDepartmentHead> {
    try {
      return await gethealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId(
        {
          systemAdmin,
          departmentHeadId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update business details of a Department Head record (table:
   * healthcare_platform_departmentheads).
   *
   * This operation enables authorized platform or organization administrators
   * to update key details of a Department Head, including business-verified
   * email, full name, and optional phone number. Changes are validated for
   * uniqueness (notably for email), business logic compliance, and consistency
   * with organization role policies.
   *
   * Security validation ensures that only authorized roles—specifically
   * Organization Admins or System Admins—can modify Department Head records.
   * All updates are recorded in the system's audit log, allowing for
   * retrospective review of clinical leadership changes for compliance,
   * regulatory, or legal investigation. The operation does not handle
   * department reassignments or role escalations, which are managed through
   * separate APIs. Error responses cover missing Department Head, unique
   * constraint violations, and permission errors.
   *
   * The endpoint maintains conformance with RBAC best practices and supports
   * all business certification requirements for leadership role management in
   * healthcare organizations.
   *
   * @param connection
   * @param departmentHeadId Unique identifier for the Department Head to update
   * @param body Updated data for the Department Head (may include email, full
   *   name, phone)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":departmentHeadId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("departmentHeadId")
    departmentHeadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDepartmentHead.IUpdate,
  ): Promise<IHealthcarePlatformDepartmentHead> {
    try {
      return await puthealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId(
        {
          systemAdmin,
          departmentHeadId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a Department Head by ID (table:
   * healthcare_platform_departmentheads).
   *
   * This operation allows privileged administrators (organizationAdmin and
   * systemAdmin) to perform permanent removal of a Department Head from the
   * healthcare platform. Hard deletion is enforced due to the lack of an
   * explicit soft-delete ('deleted_at') column in the
   * 'healthcare_platform_departmentheads' schema. This operation is restricted
   * to ensure only highly privileged users can execute irreversible deletions,
   * and all actions are logged in the system's audit trails for legal and
   * compliance purposes.
   *
   * Care must be taken before deletion to avoid orphaning organizational
   * department assignments. Pre-deletion checks are recommended in the
   * front-end or service layer. No content is returned upon success, only a
   * standard confirmation code. Attempting to delete a non-existent record will
   * result in a meaningful error message and audit logging. Operation does not
   * affect related department or user assignments, which must be handled
   * independently.
   *
   * @param connection
   * @param departmentHeadId Unique identifier of the Department Head to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":departmentHeadId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("departmentHeadId")
    departmentHeadId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminDepartmentheadsDepartmentHeadId(
        {
          systemAdmin,
          departmentHeadId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
