import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrails } from "../../../../../providers/patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrails";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { gethealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrailsRecordAuditTrailId } from "../../../../../providers/gethealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrailsRecordAuditTrailId";

import { IPageIHealthcarePlatformRecordAuditTrail } from "../../../../../api/structures/IPageIHealthcarePlatformRecordAuditTrail";
import { IHealthcarePlatformRecordAuditTrail } from "../../../../../api/structures/IHealthcarePlatformRecordAuditTrail";

@Controller(
  "/healthcarePlatform/systemAdmin/patientRecords/:patientRecordId/recordAuditTrails",
)
export class HealthcareplatformSystemadminPatientrecordsRecordaudittrailsController {
  /**
   * Search and retrieve a filtered, paginated list of audit trail entries for a
   * specific patient record (healthcare_platform_record_audit_trails table).
   *
   * This endpoint allows authorized users (typically compliance officers,
   * admins, or clinicians with audit privilege) to search and review audit
   * trail entries for a given patient record identified by patientRecordId. It
   * operates on the healthcare_platform_record_audit_trails table.
   *
   * Search parameters, pagination, and sorting options can be provided in the
   * request body, following the IHealthcarePlatformRecordAuditTrail.IRequest
   * DTO contract, to enable targeted review of events such as access, updates,
   * lock/unlock, deletions, and emergency overrides. All access to this
   * endpoint should itself be recorded for full traceability.
   *
   * Results are returned in a paginated format, type
   * IPageIHealthcarePlatformRecordAuditTrail, including event metadata for each
   * entry. Business logic must ensure only users with sufficient privileges and
   * organizational scope may execute this operation, and sensitive details are
   * redacted in accordance with legal audit requirements. Related APIs include
   * single entry lookups and actions on recordAmendments and recordLocks.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record whose audit
   *   trail is being queried (UUID).
   * @param body Search and pagination criteria for filtering patient record
   *   audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformRecordAuditTrail.IRequest,
  ): Promise<IPageIHealthcarePlatformRecordAuditTrail> {
    try {
      return await patchhealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrails(
        {
          systemAdmin,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed single audit log entry for a patient record
   * (healthcare_platform_record_audit_trails table).
   *
   * This endpoint allows authorized administrative or compliance personnel to
   * view details for a single patient-related audit log entry identified by
   * recordAuditTrailId under a given patient record (patientRecordId). The
   * healthcare_platform_record_audit_trails table provides comprehensive,
   * immutable forensic logging of actions (access, update, lock/unlock, etc.)
   * on medical records.
   *
   * The endpoint enforces strict permission checks, returning all permitted
   * details about the audited event, supporting legal investigation and
   * security monitoring workflows. If the recordAuditTrailId does not exist or
   * the requesting user lacks sufficient privilege, a not-found or unauthorized
   * error is returned, with all access attempts logged for regulatory
   * compliance. Typical use cases include confirming compliance actions,
   * investigating suspicious events, or generating legal reports.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record with the
   *   audit trail entry (UUID).
   * @param recordAuditTrailId Unique identifier of the audit trail entry
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recordAuditTrailId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("recordAuditTrailId")
    recordAuditTrailId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRecordAuditTrail> {
    try {
      return await gethealthcarePlatformSystemAdminPatientRecordsPatientRecordIdRecordAuditTrailsRecordAuditTrailId(
        {
          systemAdmin,
          patientRecordId,
          recordAuditTrailId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
