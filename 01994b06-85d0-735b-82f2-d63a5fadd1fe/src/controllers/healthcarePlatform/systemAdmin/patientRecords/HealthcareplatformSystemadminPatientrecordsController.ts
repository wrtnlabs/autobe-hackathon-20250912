import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformSystemAdminPatientRecordsPatientRecordId } from "../../../../providers/gethealthcarePlatformSystemAdminPatientRecordsPatientRecordId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminPatientRecordsPatientRecordId } from "../../../../providers/puthealthcarePlatformSystemAdminPatientRecordsPatientRecordId";
import { deletehealthcarePlatformSystemAdminPatientRecordsPatientRecordId } from "../../../../providers/deletehealthcarePlatformSystemAdminPatientRecordsPatientRecordId";
import { posthealthcarePlatformSystemAdminPatientRecords } from "../../../../providers/posthealthcarePlatformSystemAdminPatientRecords";

import { IHealthcarePlatformPatientRecord } from "../../../../api/structures/IHealthcarePlatformPatientRecord";

@Controller("/healthcarePlatform/systemAdmin/patientRecords")
export class HealthcareplatformSystemadminPatientrecordsController {
  /**
   * Retrieve a specific patient record by ID from
   * healthcare_platform_patient_records database table.
   *
   * This endpoint allows retrieval of a detailed patient record profile by
   * patientRecordId, as defined in the 'healthcare_platform_patient_records'
   * table. The operation returns all main columns: organization and department
   * assignment, patient user reference, external patient number if set, legal
   * full name, date of birth, gender, record status, extensible demographics
   * JSON, timestamps for creation and update, and the current soft delete
   * status.
   *
   * Access to this operation must be tightly controlled and audited due to the
   * presence of protected health information (PHI). Only authenticated and
   * authorized roles, such as clinical staff (doctor, nurse), department heads,
   * and admins, can invoke this endpoint with all access logged for HIPAA
   * compliance.
   *
   * Business logic includes: 1) Ensuring that only users within the same
   * organization or with explicit delegated rights can access the record; 2)
   * Checking the 'deleted_at' soft delete flag—records with this set are
   * excluded unless under audit special circumstances; 3) Supporting regulatory
   * workflows, audit requirements, and patient self-access consent rules as
   * described in business specifications. Errors are handled by returning not
   * found for non-existent or ineligible records, and special messaging when
   * access is denied due to consent or assignment boundaries.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the patient record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":patientRecordId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPatientRecord> {
    try {
      return await gethealthcarePlatformSystemAdminPatientRecordsPatientRecordId(
        {
          systemAdmin,
          patientRecordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing patient record identified by patientRecordId in the main
   * patient records schema.
   *
   * This endpoint enables authorized users to update the properties of a given
   * patient record entry identified by patientRecordId. Allowed modification
   * fields, as defined in the patient records Prisma schema, include legal
   * name, demographics JSON, department, gender, status, and other
   * non-immutable fields (excluding organization and primary user references,
   * which are not generally modifiable post-creation).
   *
   * Update attempts are tightly controlled: only clinical staff with proper
   * permissions, organization admins, or department heads may update records.
   * The operation validates input, checks for conflicting soft delete status
   * (deleted_at), and ensures consistency with regulatory requirements. All
   * modifications are recorded in the audit trail, and significant changes may
   * trigger versioning and amendment flows for compliance, depending on
   * organizational policy and legal requirements.
   *
   * Business logic must also check for legal holds, privacy flags, and explicit
   * patient consent requirements before applying updates. Rejected changes due
   * to regulatory or consent restrictions are handled with descriptive errors,
   * and client logic may prompt for required approvals.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the patient record to update.
   * @param body Fields required to update a patient record, respecting business
   *   validation rules and data isolation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":patientRecordId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPatientRecord.IUpdate,
  ): Promise<IHealthcarePlatformPatientRecord> {
    try {
      return await puthealthcarePlatformSystemAdminPatientRecordsPatientRecordId(
        {
          systemAdmin,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase (hard delete) a patient record by ID from
   * healthcare_platform_patient_records.
   *
   * This endpoint serves to PERMANENTLY remove a patient record identified by
   * patientRecordId, as represented in the
   * 'healthcare_platform_patient_records' table. As the schema includes a soft
   * delete timestamp field (deleted_at), normal business logic would employ
   * soft deletion for routine deactivation. However, this operation executes a
   * HARD DELETE – completely erasing the record from the database, along with
   * all foreign key and dependent data as required by referential integrity
   * constraints.
   *
   * This function is suitable ONLY for tightly controlled workflows such as
   * compliance-driven purging after required legal retention periods, erroneous
   * test data removal by system administrators, or when necessitated by
   * regulatory guidance. All such actions MUST be audit-logged and reviewed for
   * appropriateness. Only senior administrative roles with explicit purge
   * rights may invoke this operation, consistent with organizational and legal
   * policy as described in the requirements. Attempting to delete a record out
   * of policy, or for non-existent IDs, must result in clear errors with
   * appropriate logging.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the patient record to be
   *   permanently deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":patientRecordId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminPatientRecordsPatientRecordId(
        {
          systemAdmin,
          patientRecordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new patient record in healthcare_platform_patient_records table.
   *
   * This endpoint allows for creating a new patient record within a specified
   * organization (and optionally mapped department), as defined by the
   * 'healthcare_platform_patient_records' table. Required fields include
   * patient user reference, full legal name, date of birth, demographic data in
   * JSON format if available, and business status. Optional fields such as
   * external patient number, gender, and department ID support advanced mapping
   * or integration needs. Timestamps for creation and updates are managed by
   * the system.
   *
   * Roles allowed to use this operation are tightly regulated: patient creation
   * can be performed by the organization's admin staff, clinical staff with
   * patient onboarding permissions, or by authorized receptionists during
   * intake. The business logic validates all required fields, checks for
   * duplicate assignments by patient_user_id, and applies organizational data
   * isolation rules. A successfully created record is returned for further use
   * in EHR flows, appointment booking, or regulatory workflows.
   *
   * If records are created for patients already active, appropriate errors or
   * contextual data (e.g., merging, archival logic) are triggered to align with
   * platform business rules. All creation actions are audit logged for
   * regulatory compliance and incident investigation.
   *
   * @param connection
   * @param body Data required to create a new patient record, including user
   *   reference, demographics, and business metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPatientRecord.ICreate,
  ): Promise<IHealthcarePlatformPatientRecord> {
    try {
      return await posthealthcarePlatformSystemAdminPatientRecords({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
