import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminUserAuthentications } from "../../../../providers/posthealthcarePlatformSystemAdminUserAuthentications";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminUserAuthentications } from "../../../../providers/patchhealthcarePlatformSystemAdminUserAuthentications";
import { gethealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId } from "../../../../providers/gethealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId";
import { puthealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId } from "../../../../providers/puthealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId";
import { deletehealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId } from "../../../../providers/deletehealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId";

import { IHealthcarePlatformUserAuthentication } from "../../../../api/structures/IHealthcarePlatformUserAuthentication";
import { IPageIHealthcarePlatformUserAuthentication } from "../../../../api/structures/IPageIHealthcarePlatformUserAuthentication";

@Controller("/healthcarePlatform/systemAdmin/userAuthentications")
export class HealthcareplatformSystemadminUserauthenticationsController {
  /**
   * Create a new user authentication credential record
   * (healthcare_platform_user_authentications).
   *
   * Create a new user authentication record for a user, supporting a wide range
   * of authentication providers including local, SSO, and federated mechanisms.
   * The request accepts all required fields as defined in the
   * healthcare_platform_user_authentications schema: user_id, user_type (to
   * reference actor table), provider (login mechanism), provider_key, and any
   * optional password_hash or configuration required by the selected provider.
   * For local credentials, password strength and format are validated according
   * to platform security policy.
   *
   * **For security, password hashes and credential secrets are strictly
   * write-only and NEVER returned or exposed in any API response.**
   *
   * Access to this endpoint is strictly limited to privileged roles (system
   * administrators, organization administrators), and all actions are logged
   * for identity traceability and regulatory compliance. The operation returns
   * the complete newly-created authentication record for further processing
   * (such as issuing a login session or associating with user profile), or
   * error information if policy checks fail or data is invalid.
   *
   * @param connection
   * @param body Data required to create a new user authentication record,
   *   including user, provider, and credential information.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformUserAuthentication.ICreate,
  ): Promise<IHealthcarePlatformUserAuthentication> {
    try {
      return await posthealthcarePlatformSystemAdminUserAuthentications({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of user authentication
   * records (healthcare_platform_user_authentications).
   *
   * Retrieve a paginated and filtered set of user authentication records from
   * the system, supporting use cases such as security audits, credential
   * inventory management, or compliance reviews in the healthcarePlatform. This
   * endpoint enables searching by user_type, authentication provider,
   * provider_key, organizational context, last_authenticated_at timestamps, and
   * credential status, with the option to use multiple combined filters and
   * sorting.
   *
   * All records returned reflect current and historical user authentication
   * configurations used for sign-in (including SSO, AD, OAuth2, and local
   * login), enabling system and organization administrators to view or audit
   * the credential lifecycle. The endpoint is optimized for use cases such as
   * periodic access review, investigation of sign-in anomalies, and
   * compliance/reporting dashboards. Response data includes paginated summary
   * objects suitable for UI display, with relevant metadata such as pagination,
   * record count, and navigation context.
   *
   * **For security, credential secret fields such as password hashes are never
   * returned in responses.**
   *
   * Access to this endpoint is restricted to roles with platform-level or
   * organization-level authentication management privileges (e.g.,
   * 'systemAdmin', 'organizationAdmin'), and the response is filtered based on
   * the caller's organization scopes.
   *
   * @param connection
   * @param body Search filters and pagination parameters for user
   *   authentication record retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformUserAuthentication.IRequest,
  ): Promise<IPageIHealthcarePlatformUserAuthentication.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminUserAuthentications({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details for a user authentication record
   * (healthcare_platform_user_authentications) by ID.
   *
   * Get detailed information for a specific user authentication record,
   * identified by the userAuthenticationId path parameter, as defined in the
   * healthcare_platform_user_authentications database schema. The operation
   * returns all stored attributes for the record, including user_type,
   * authentication provider, provider_key, last authentication timestamps, and
   * associated meta-information.
   *
   * **For security, password hashes and any credential secrets are never
   * included in the response.**
   *
   * This endpoint is intended for privileged roles such as system
   * administrators and organization administrators, and is generally invoked
   * for diagnosing authentication issues, reviewing SSO or authentication
   * configuration for a particular user, or investigating audit-related
   * incidents. Access is strictly limited to authorized personnel, and the
   * operation logs all requests for compliance and forensic purposes.
   *
   * A correct userAuthenticationId (UUID) must be provided in the path, with
   * access checks ensuring the caller has organization/platform scope for the
   * requested record. The operation also returns error information in the case
   * of missing or unauthorized access attempts.
   *
   * @param connection
   * @param userAuthenticationId Unique identifier for the user authentication
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userAuthenticationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userAuthenticationId")
    userAuthenticationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformUserAuthentication> {
    try {
      return await gethealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId(
        {
          systemAdmin,
          userAuthenticationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update authentication credential record for a user
   * (healthcare_platform_user_authentications) by ID.
   *
   * Modify the fields of an existing user authentication record by its unique
   * ID (userAuthenticationId), according to the
   * healthcare_platform_user_authentications database schema. This operation
   * supports updates such as password rotation (for local credentials),
   * SSO/federated configuration changes, status changes (enabled/disabled), or
   * provider/provider_key changes as per platform policy. Fields included in
   * the request body are validated against organizational security
   * requirements, and sensitive data such as passwords are securely handled and
   * must NEVER be returned in any API response.
   *
   * All update actions are fully logged for compliance, supporting use cases
   * such as account remediation, deprovisioning, or credential reset workflows
   * for internal security or audit. The operation returns the fully-updated
   * authentication record on success, or includes error context in the case of
   * invalid, unauthorized, or policy-violating updates.
   *
   * **Credential secrets are always write-onlyâ€”never returned or exposed in any
   * way.**
   *
   * Access is restricted to system administrators or organization
   * administrators, who are responsible for complying with platform/corporate
   * security requirements.
   *
   * @param connection
   * @param userAuthenticationId Unique identifier for the user authentication
   *   record to update.
   * @param body Fields to update for the user authentication record, based on
   *   the provider and organizational policy.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userAuthenticationId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userAuthenticationId")
    userAuthenticationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformUserAuthentication.IUpdate,
  ): Promise<IHealthcarePlatformUserAuthentication> {
    try {
      return await puthealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId(
        {
          systemAdmin,
          userAuthenticationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently deletes a specified user authentication record by its unique ID
   * from healthcare_platform_user_authentications.
   *
   * This endpoint is responsible for the hard deletion of a user authentication
   * entry. The operation targets the 'healthcare_platform_user_authentications'
   * table, where each record contains provider, provider key, user type, and
   * password hash information supporting login via email/password, SSO, or
   * federated identification for any user role (systemadmin, orgadmin, etc).
   *
   * By supplying a valid userAuthenticationId, administrators can revoke all
   * access through this particular authentication provider. Security checks
   * must ensure that only privileged system admins can execute deletions, and
   * the operation should log all such events to the audit subsystem. Deleting
   * authentication entries is strictly a privileged action due to its impact on
   * access control and auditability. This action is irreversibleâ€”once deleted,
   * the authentication method cannot be used unless re-created.
   *
   * Attempted deletion of non-existent or mismatched IDs should trigger clear
   * error responses and comprehensive logging for compliance review. This
   * operation can be combined with session invalidation APIs to enforce full
   * credential revocation across all login providers.
   *
   * @param connection
   * @param userAuthenticationId Unique identifier (UUID) of the user
   *   authentication record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userAuthenticationId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("userAuthenticationId")
    userAuthenticationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminUserAuthenticationsUserAuthenticationId(
        {
          systemAdmin,
          userAuthenticationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
