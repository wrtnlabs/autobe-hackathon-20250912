import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminAnalyticsDashboards } from "../../../../providers/posthealthcarePlatformSystemAdminAnalyticsDashboards";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminAnalyticsDashboards } from "../../../../providers/patchhealthcarePlatformSystemAdminAnalyticsDashboards";
import { gethealthcarePlatformSystemAdminAnalyticsDashboardsDashboardId } from "../../../../providers/gethealthcarePlatformSystemAdminAnalyticsDashboardsDashboardId";

import { IHealthcarePlatformAnalyticsDashboard } from "../../../../api/structures/IHealthcarePlatformAnalyticsDashboard";
import { IPageIHealthcarePlatformAnalyticsDashboard } from "../../../../api/structures/IPageIHealthcarePlatformAnalyticsDashboard";

@Controller("/healthcarePlatform/systemAdmin/analyticsDashboards")
export class HealthcareplatformSystemadminAnalyticsdashboardsController {
  /**
   * Create a new analytics dashboard definition.
   *
   * Creates a new analytics dashboard, accepting details from the request body
   * including title, layout/configuration JSON, owning user, organizational and
   * department context, visibility (public/private), and description. The
   * healthcare_platform_analytics_dashboards schema enforces unique constraints
   * per organization and user for active dashboards and validates configuration
   * structure.
   *
   * The operation ensures only authorized roles (systemAdmin,
   * organizationAdmin) may create dashboards, enforcing relevant constraints
   * and business rules for sharing and access control. On success, the endpoint
   * returns the complete analytics dashboard object as stored, which can be
   * used for immediate rendering, editing, or access management. If duplicate
   * constraints are violated or data is invalid, proper error codes and
   * validation messages are returned.
   *
   * Typical workflows supported include the onboarding of new analytics
   * products, automation of dashboards by admin scripts, and business
   * intelligence staff self-service provisioning.
   *
   * @param connection
   * @param body New analytics dashboard details and configuration to create
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.ICreate,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await posthealthcarePlatformSystemAdminAnalyticsDashboards({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve analytics dashboards with advanced filtering and
   * pagination.
   *
   * This operation allows analytics users, administrators, and business
   * intelligence staff to search for analytics dashboards using a variety of
   * filters and query parameters. The system supports filtering by dashboard
   * owner, organization, department, visibility (public/private), and search by
   * title or description. Pagination and sorting options allow efficient
   * browsing of large sets of dashboards, accommodating scenarios where
   * organizations, departments, or users maintain multiple dashboard
   * variations.
   *
   * The healthcare_platform_analytics_dashboards schema serves as the backing
   * store for these dashboards, tying each to an owner, organization, and
   * optionally a department. Search operations are constrained by user
   * authorization: users may view only dashboards to which they have access (by
   * ownership, organization, public visibility, or department scope). Complex
   * queries and sorting allow integration with analytics administration,
   * dashboard management UIs, and automation for compliance or best practices.
   *
   * The returned data structure is a paginated collection of dashboard summary
   * objects, as defined in the Prisma schema, optimized for quick list
   * rendering and actionable navigation.
   *
   * @param connection
   * @param body Filtering, search criteria, and pagination parameters for
   *   finding dashboards
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.IRequest,
  ): Promise<IPageIHealthcarePlatformAnalyticsDashboard.ISummary> {
    try {
      return await patchhealthcarePlatformSystemAdminAnalyticsDashboards({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific analytics dashboard by its identifier.
   *
   * Fetches the full record of an analytics dashboard specified by the
   * dashboardId path parameter. The healthcare_platform_analytics_dashboards
   * schema holds all metadata and configuration necessary to render dashboards
   * for end users, including dashboard title, description, configuration JSON,
   * owner, visibility, and linkage to organization or department contexts.
   *
   * This endpoint is commonly used in analytics and reporting applications, as
   * well as in administrative workflows managing dashboard access,
   * customization, and sharing. It is crucial for supporting real-time
   * dashboard rendering, editing, copying, and compliance review. Authorization
   * checks restrict access so users may only see dashboards they own or are
   * allowed to view by organizational or department-level policies.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dashboardId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await gethealthcarePlatformSystemAdminAnalyticsDashboardsDashboardId(
        {
          systemAdmin,
          dashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
