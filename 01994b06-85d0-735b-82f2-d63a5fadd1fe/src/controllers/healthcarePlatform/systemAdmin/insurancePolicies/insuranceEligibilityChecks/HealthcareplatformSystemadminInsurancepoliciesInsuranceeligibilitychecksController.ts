import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks } from "../../../../../providers/posthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { patchhealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks } from "../../../../../providers/patchhealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks";
import { gethealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId } from "../../../../../providers/gethealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId";
import { puthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId } from "../../../../../providers/puthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId";

import { IHealthcarePlatformInsuranceEligibilityCheck } from "../../../../../api/structures/IHealthcarePlatformInsuranceEligibilityCheck";
import { IPageIHealthcarePlatformInsuranceEligibilityCheck } from "../../../../../api/structures/IPageIHealthcarePlatformInsuranceEligibilityCheck";

@Controller(
  "/healthcarePlatform/systemAdmin/insurancePolicies/:insurancePolicyId/insuranceEligibilityChecks",
)
export class HealthcareplatformSystemadminInsurancepoliciesInsuranceeligibilitychecksController {
  /**
   * Create a new insurance eligibility check entry
   * (healthcare_platform_insurance_eligibility_checks).
   *
   * Creates a new eligibility check transaction against a payer for the
   * specified insurance policy. Authorized billing or admin staff use this
   * endpoint to trigger and record eligibility verifications for billing,
   * claims, or scheduling workflows. The endpoint will store information about
   * who performed the check, response from the payer, and all related outcome
   * data.
   *
   * This operation requires validation of the request body per business rules:
   * the insurancePolicyId must match an active policy, the staff performing the
   * check must have billing permission, and the payer details must be properly
   * populated for audit/compliance reporting. All created records are appended
   * for regulatory trace and support appeals or appeals audit. The endpoint
   * enforces data isolation by policy and organization.
   *
   * @param connection
   * @param insurancePolicyId Unique insurance policy ID under which the
   *   eligibility check is created.
   * @param body Eligibility check and payer response details for creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceEligibilityCheck.ICreate,
  ): Promise<IHealthcarePlatformInsuranceEligibilityCheck> {
    try {
      return await posthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks(
        {
          systemAdmin,
          insurancePolicyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve all insurance eligibility checks for a policy
   * (healthcare_platform_insurance_eligibility_checks).
   *
   * Retrieve a paginated, filtered list of insurance eligibility checks
   * associated with a single insurance policy. This enables billing staff,
   * admins, or authorized users to review all eligibility verification
   * transactions for a patient or payer within a particular policy, supporting
   * regulatory audits and appeals.
   *
   * Results can be filtered by status, performed_by_id, check timestamp range,
   * and payer response details. Pagination and sorting allow practical review
   * of large eligibility check histories. Security enforces that only users
   * with the proper billing, admin, or compliance roles can access the detailed
   * eligibility check data for the given insurance policy.
   *
   * This query joins the insurance policy context for data isolation and
   * compliance enforcement and draws on
   * healthcare_platform_insurance_eligibility_checks (filtered by
   * insurancePolicyId).
   *
   * @param connection
   * @param insurancePolicyId Unique identifier of the insurance policy whose
   *   eligibility checks are being searched.
   * @param body Search parameters, filters, sort, and pagination criteria for
   *   eligibility checks under the policy.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceEligibilityCheck.IRequest,
  ): Promise<IPageIHealthcarePlatformInsuranceEligibilityCheck> {
    try {
      return await patchhealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecks(
        {
          systemAdmin,
          insurancePolicyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single insurance eligibility check record
   * (healthcare_platform_insurance_eligibility_checks).
   *
   * Returns a detailed record of one insurance eligibility check performed for
   * a given policy. This is used for auditing eligibility verification, claims
   * processing, or payer dispute review by authorized staff or admins.
   *
   * The operation enforces access to eligibility check details only for users
   * with billing or administrative authority for accounts within the given
   * insurance policy's organization. It references the
   * healthcare_platform_insurance_eligibility_checks schema and policy context
   * for strict data isolation and compliance.
   *
   * Properties include the eligibility check's status, timestamp, response from
   * payer, outcome, and relationships to staff, policy, and claim records. The
   * endpoint is strictly read-only and logs all access events in audit trails.
   *
   * @param connection
   * @param insurancePolicyId Unique identifier of the insurance policy whose
   *   eligibility check is returned.
   * @param insuranceEligibilityCheckId Unique identifier for the eligibility
   *   check record being retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":insuranceEligibilityCheckId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
    @TypedParam("insuranceEligibilityCheckId")
    insuranceEligibilityCheckId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformInsuranceEligibilityCheck> {
    try {
      return await gethealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId(
        {
          systemAdmin,
          insurancePolicyId,
          insuranceEligibilityCheckId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing insurance eligibility check record
   * (healthcare_platform_insurance_eligibility_checks).
   *
   * Updates selected metadata or review status of a single insurance
   * eligibility check record for a given insurance policy. This is used
   * primarily by billing or compliance staff to update audit-relevant fields,
   * error corrections, or status flags after appeal, review, or payer feedback
   * workflows.
   *
   * Update rules enforce business constraints: only certain fields may be
   * updated (dependent on audit policies), and the staff making updates must
   * have billing/admin/compliance rights for the organization assigned to the
   * policy. All changes are strictly recorded in the audit trail. The operation
   * references the healthcare_platform_insurance_eligibility_checks schema,
   * matching insuranceEligibilityCheckId and insurancePolicyId for data
   * isolation and regulatory compliance. On success, the updated eligibility
   * check record is returned.
   *
   * @param connection
   * @param insurancePolicyId Unique insurance policy ID whose eligibility check
   *   is being updated.
   * @param insuranceEligibilityCheckId Unique identifier for the eligibility
   *   check being updated.
   * @param body Property updates permitted under billing/compliance policy for
   *   eligibility check.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":insuranceEligibilityCheckId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("insurancePolicyId")
    insurancePolicyId: string & tags.Format<"uuid">,
    @TypedParam("insuranceEligibilityCheckId")
    insuranceEligibilityCheckId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformInsuranceEligibilityCheck.IUpdate,
  ): Promise<IHealthcarePlatformInsuranceEligibilityCheck> {
    try {
      return await puthealthcarePlatformSystemAdminInsurancePoliciesInsurancePolicyIdInsuranceEligibilityChecksInsuranceEligibilityCheckId(
        {
          systemAdmin,
          insurancePolicyId,
          insuranceEligibilityCheckId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
