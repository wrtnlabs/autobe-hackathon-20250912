import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId } from "../../../../providers/gethealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { puthealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId } from "../../../../providers/puthealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId";
import { deletehealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId } from "../../../../providers/deletehealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId";
import { posthealthcarePlatformSystemAdminPharmacyIntegrations } from "../../../../providers/posthealthcarePlatformSystemAdminPharmacyIntegrations";

import { IHealthcarePlatformPharmacyIntegration } from "../../../../api/structures/IHealthcarePlatformPharmacyIntegration";

@Controller("/healthcarePlatform/systemAdmin/pharmacyIntegrations")
export class HealthcareplatformSystemadminPharmacyintegrationsController {
  /**
   * Get configuration details for a specific pharmacy integration by ID
   * (healthcare_platform_pharmacy_integrations).
   *
   * This operation returns all configuration details for the given pharmacy
   * integration record, as defined in the
   * healthcare_platform_pharmacy_integrations table. The primary purpose is to
   * enable organization administrators or IT/security staff to view provider
   * credentials, endpoint URIs, communication protocols, and status for
   * integration with external pharmacy systems such as Surescripts or NCPDP.
   *
   * With a valid pharmacyIntegrationId, the endpoint returns information
   * including the pharmacy vendor code, connection URI, supported protocol, and
   * the operational status of the integration. It does not expose or return
   * sensitive secrets, only connection metadata and linkage for deployment and
   * monitoring.
   *
   * Access is restricted to users with configuration or integration management
   * privilegesâ€”typically orgAdmin or systemAdmin. Unauthorized users will
   * receive an access denied response with a corresponding audit log entry. The
   * endpoint will validate the pharmacyIntegrationId as a UUID and return a 404
   * error if not found. Integrations that are logically deleted (soft deleted
   * via deleted_at) are excluded unless specifically requested by audit
   * workflows.
   *
   * @param connection
   * @param pharmacyIntegrationId Unique identifier of the pharmacy integration
   *   record (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pharmacyIntegrationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("pharmacyIntegrationId")
    pharmacyIntegrationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPharmacyIntegration> {
    try {
      return await gethealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId(
        {
          systemAdmin,
          pharmacyIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a pharmacy integration by ID
   * (healthcare_platform_pharmacy_integrations).
   *
   * This operation updates the specified pharmacy integration record, as
   * identified by pharmacyIntegrationId, in the
   * healthcare_platform_pharmacy_integrations table. The request body includes
   * new configuration values such as updated endpoint URI, protocol, status, or
   * vendor code.
   *
   * It is used by organization or system administrators when pharmacy network
   * partners change protocols, connection settings, or undergo operational
   * changes. Inputs are validated for allowed values, URI correctness, and
   * duplicate active status (cannot activate the same
   * pharmacy_vendor_code/integration more than once per organization).
   *
   * The operation enforces audit logging and may trigger compliance
   * notifications if changes affect regulated connectivity or impact
   * e-prescribing workflows. Unauthorized or insufficient permission attempts
   * are denied with appropriate error responses. Soft-deleted integrations
   * cannot be updated unless restored first. A successful update returns the
   * new configuration object; operations are subject to all normal validation
   * and business logic constraints.
   *
   * @param connection
   * @param pharmacyIntegrationId Unique identifier of the pharmacy integration
   *   record (UUID) to update
   * @param body Fields to update for the pharmacy integration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pharmacyIntegrationId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("pharmacyIntegrationId")
    pharmacyIntegrationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPharmacyIntegration.IUpdate,
  ): Promise<IHealthcarePlatformPharmacyIntegration> {
    try {
      return await puthealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId(
        {
          systemAdmin,
          pharmacyIntegrationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a pharmacy integration by ID
   * (healthcare_platform_pharmacy_integrations).
   *
   * This operation marks a pharmacy integration as deleted by setting its
   * deleted_at timestamp to the current time, as performed in the
   * healthcare_platform_pharmacy_integrations table. No physical data is
   * removed, preserving the configuration for compliance audit and recovery if
   * necessary.
   *
   * Only organizationAdmin or systemAdmin roles may delete a pharmacy
   * integration; other access attempts are denied with a 403 error and audit
   * log entry. Deleting an integration immediately removes it from all active
   * connection, e-prescribe, and sync workflows, and may propagate disconnect
   * or alert actions elsewhere in the system. Attempts to delete
   * already-deleted or non-existent records result in a 404 Not Found error.
   *
   * Hard physical deletion is not permitted by compliance policy; this
   * operation performs a soft delete only (institutional record retention
   * enforcement). All deletes are audit-logged, and associated
   * credential/secrets storage should be invalidated elsewhere as needed.
   * Recovery of deleted configurations may require additional compliance
   * workflow steps.
   *
   * @param connection
   * @param pharmacyIntegrationId Unique identifier of the pharmacy integration
   *   record (UUID) to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pharmacyIntegrationId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("pharmacyIntegrationId")
    pharmacyIntegrationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformSystemAdminPharmacyIntegrationsPharmacyIntegrationId(
        {
          systemAdmin,
          pharmacyIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new pharmacy integration for the organization
   * (healthcare_platform_pharmacy_integrations).
   *
   * This operation creates a new row in the
   * healthcare_platform_pharmacy_integrations table, representing a new
   * pharmacy network or e-prescribing integration for the organization. The
   * request body must include all required configuration properties, such as
   * the pharmacy vendor code, connection URI, protocol, and operational
   * status.
   *
   * This API is typically called by an organizationAdmin or a systemAdmin when
   * onboarding a new pharmacy network (such as Surescripts or NCPDP) or
   * configuring access to a custom or partner pharmacy provider for
   * prescription workflows.
   *
   * The system validates input for uniqueness per organization and
   * pharmacy_vendor_code, prevents duplicate active connectors, and ensures
   * field constraints such as connection URI format and allowed protocol types
   * are met. Any audit or compliance triggers (such as change tracking for
   * regulated connections) are enforced in provider logic.
   *
   * Error responses include validation failure (400), duplication (409), and
   * insufficient permission (403). Newly created integrations are available for
   * immediate use, but full connectivity status may be pending external
   * validation or credentialing steps. Sensitive credentials are not directly
   * stored in this table, only connection metadata and mapping. All actions are
   * audit-logged for security and compliance traceability.
   *
   * @param connection
   * @param body Pharmacy integration configuration and connection details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPharmacyIntegration.ICreate,
  ): Promise<IHealthcarePlatformPharmacyIntegration> {
    try {
      return await posthealthcarePlatformSystemAdminPharmacyIntegrations({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
