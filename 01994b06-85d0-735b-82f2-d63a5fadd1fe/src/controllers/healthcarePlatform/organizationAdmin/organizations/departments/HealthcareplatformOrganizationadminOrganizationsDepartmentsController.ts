import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments } from "../../../../../providers/posthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments } from "../../../../../providers/patchhealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments";
import { gethealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId } from "../../../../../providers/gethealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId";
import { puthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId } from "../../../../../providers/puthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId";
import { deletehealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId } from "../../../../../providers/deletehealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId";

import { IHealthcarePlatformDepartment } from "../../../../../api/structures/IHealthcarePlatformDepartment";
import { IPageIHealthcarePlatformDepartment } from "../../../../../api/structures/IPageIHealthcarePlatformDepartment";

@Controller(
  "/healthcarePlatform/organizationAdmin/organizations/:organizationId/departments",
)
export class HealthcareplatformOrganizationadminOrganizationsDepartmentsController {
  /**
   * Creates a new department within a specified organization (organizationId)
   * in healthcare_platform_departments.
   *
   * Create a new department under an existing organization by specifying the
   * organizationId in the path. The request body must provide the necessary
   * department metadata, such as code, name, status, and any other required
   * information per the Prisma schema. Ensures that the department is unique
   * within the organization context and that all required business rules for
   * cross-system mapping or audit are satisfied.
   *
   * Security: Only organization administrators or higher may invoke this
   * operation. Automatically sets created_at/updated_at timestamps and audit
   * trails.
   *
   * Related: Newly created departments become the basis for resource, staff,
   * and scheduling management within organizations.
   *
   * Errors: Violations of unique constraints (code, name within org) should be
   * returned with appropriate error messages. Any business rule violation or
   * schema constraint should be handled with clear feedback.
   *
   * @param connection
   * @param organizationId UUID of the organization in which the new department
   *   is being created.
   * @param body Department creation data for the new department under the
   *   organization.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDepartment.ICreate,
  ): Promise<IHealthcarePlatformDepartment> {
    try {
      return await posthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments(
        {
          organizationAdmin,
          organizationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieves a paginated, filtered list of departments for a specified
   * organization (organizationId) from healthcare_platform_departments.
   *
   * Fetch a filtered and paginated list of all departments belonging to a given
   * organization (organizationId). Uses advanced query parameters provided in
   * the request body to enable searching by department code, name, status, and
   * supports paged view for large organizations.
   *
   * Security: Typically accessed by users with organization admin privileges or
   * above. Ensure only authorized users of the appropriate organization scope
   * can view the department list.
   *
   * This operation is critical for admin dashboards, resource allocation, and
   * staff assignment flows. Department data includes links to organization
   * context and is subject to compliance/audit policy.
   *
   * Errors: If organizationId does not exist or is soft-deleted, the operation
   * should return an informative error.
   *
   * @param connection
   * @param organizationId Unique identifier of the organization whose
   *   departments are being retrieved (UUID)
   * @param body Filter, search, and pagination criteria for departments within
   *   the organization.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDepartment.IRequest,
  ): Promise<IPageIHealthcarePlatformDepartment.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartments(
        {
          organizationAdmin,
          organizationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Gets detailed information for a single department (departmentId) in a
   * specified organization (organizationId) from
   * healthcare_platform_departments.
   *
   * Obtain full details about a single department under a specific
   * organization, identified by the combination of organizationId and
   * departmentId. Returns metadata such as department code, status, timestamps,
   * and parent organization reference. Useful in organization admin portals for
   * configuration, scheduling, and compliance workflows.
   *
   * Security: Only users with organization admin or higher privileges should
   * access this data. Ensure department and organization relationship integrity
   * as per schema.
   *
   * Related: This API is part of a suite of admin tools for managing
   * organizational units. Detailed department records are referenced in staff
   * management, resource scheduling, and analytics modules.
   *
   * Errors: If departmentId or organizationId is invalid, or if the department
   * is not part of the organization, return an informative error. Soft-deleted
   * records should only be returned for users with audit privileges.
   *
   * @param connection
   * @param organizationId UUID of the organization to which the department
   *   belongs.
   * @param departmentId UUID of the department to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":departmentId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedParam("departmentId")
    departmentId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDepartment> {
    try {
      return await gethealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId(
        {
          organizationAdmin,
          organizationId,
          departmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing department entity for a given organization
   * (healthcare_platform_departments table).
   *
   * This endpoint is used by authorized organizational administrators to update
   * the key properties of a department within a healthcare organization.
   * Updates may include altering the department code, display name, status
   * (active, suspended, archived), organizational association, and timestamps.
   * The operation enforces strict auditabilityâ€”every change is recorded with
   * before and after states, as required by compliance policies.
   *
   * Authorization must be checked to ensure only organization admins and
   * department heads with proper rights and current assignments may update this
   * resource. The operation enforces business logic to prevent breaking unique
   * constraints (such as unique (organization_id, code) per department) and
   * forbids modification if the department is currently locked (for audit or
   * legal hold).
   *
   * Full validation logic ensures that department information aligns with its
   * parent organization's policies. Attempts to update deleted, retired, or
   * archived departments are rejected. Success returns the updated department
   * entity with all fields as defined in the Prisma schema. Errors are handled
   * robustly with clear responses for constraint, permission, and not-found
   * failures.
   *
   * @param connection
   * @param organizationId Globally unique identifier of the target organization
   *   in which the department resides.
   * @param departmentId Globally unique identifier of the target department to
   *   update.
   * @param body Fields to update in the department. Must match the updatable
   *   fields as defined in IHealthcarePlatformDepartment.IUpdate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":departmentId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedParam("departmentId")
    departmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDepartment.IUpdate,
  ): Promise<IHealthcarePlatformDepartment> {
    try {
      return await puthealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId(
        {
          organizationAdmin,
          organizationId,
          departmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a department entity for a given organization
   * (healthcare_platform_departments table) by setting the deleted_at
   * timestamp.
   *
   * This endpoint is intended for use by authorized organization admins and
   * department heads to delete a department from a healthcare organization. It
   * performs either a soft or hard delete based on the presence of a
   * 'deleted_at' column: here, as per the Prisma schema, deleted_at is present,
   * so the operation will set this timestamp instead of physically removing the
   * record to fulfill audit and compliance requirements.
   *
   * The operation validates that the department is not under legal hold or
   * audit lock and that there are no in-progress resources or active
   * assignments that would block deletion. All dependent records are handled
   * per defined referential integrity policies (cascading, restriction, etc.)
   * as specified in the underlying Prisma schema.
   *
   * When successful, the department is marked as deleted (with 'deleted_at'
   * set), effectively removing it from active lists but preserving it for
   * compliance retention and recovery. A robust error handling process informs
   * users if deletion is forbidden, blocked by business logic, or if the
   * department does not exist.
   *
   * @param connection
   * @param organizationId Globally unique identifier of the target
   *   organization.
   * @param departmentId Globally unique identifier of the department to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":departmentId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("organizationId")
    organizationId: string & tags.Format<"uuid">,
    @TypedParam("departmentId")
    departmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminOrganizationsOrganizationIdDepartmentsDepartmentId(
        {
          organizationAdmin,
          organizationId,
          departmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
