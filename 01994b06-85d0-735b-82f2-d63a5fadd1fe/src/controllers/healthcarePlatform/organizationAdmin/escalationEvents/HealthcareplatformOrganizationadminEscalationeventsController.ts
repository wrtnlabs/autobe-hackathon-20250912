import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminEscalationEvents } from "../../../../providers/posthealthcarePlatformOrganizationAdminEscalationEvents";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminEscalationEvents } from "../../../../providers/patchhealthcarePlatformOrganizationAdminEscalationEvents";
import { gethealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId } from "../../../../providers/gethealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId";
import { puthealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId } from "../../../../providers/puthealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId";

import { IHealthcarePlatformEscalationEvent } from "../../../../api/structures/IHealthcarePlatformEscalationEvent";
import { IPageIHealthcarePlatformEscalationEvent } from "../../../../api/structures/IPageIHealthcarePlatformEscalationEvent";

@Controller("/healthcarePlatform/organizationAdmin/escalationEvents")
export class HealthcareplatformOrganizationadminEscalationeventsController {
  /**
   * Create a new escalation event record in
   * healthcare_platform_escalation_events.
   *
   * Create a new escalation event for an actionable alert, SLA violation,
   * compliance workflow, or regulatory notification. The endpoint facilitates
   * the creation of escalation records in response to time-critical or
   * critical-urgency incidents, assigning the case to a responsible user or
   * role, defining the escalation type (e.g. breach, compliance_required,
   * business_policy), setting escalation level (e.g. critical, urgent),
   * deadline, and tracking disposition. The operation ensures business and
   * compliance rules are enforced by validating all required fields for
   * escalation event creation and managing notification triggers or follow-up
   * actions as configured. Audit trails record the creation for regulatory
   * requirements.
   *
   * @param connection
   * @param body Parameters and escalation metadata for escalation event
   *   creation, including notification reference, escalation target, type,
   *   level, deadline, and summary.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformEscalationEvent.ICreate,
  ): Promise<IHealthcarePlatformEscalationEvent> {
    try {
      return await posthealthcarePlatformOrganizationAdminEscalationEvents({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of escalation events from the
   * healthcare_platform_escalation_events table.
   *
   * Retrieve a filtered and paginated list of escalation events from the
   * healthcarePlatform escalation registry. Each escalation event documents
   * when an actionable incident or SLA breach has required notification and
   * escalated attention, as defined in the
   * healthcare_platform_escalation_events table. This registry supports
   * workflows for compliance, incident response, critical notification
   * follow-up, and operational audit. The operation enables filtering by status
   * (e.g. open, in_progress, resolved, expired), escalation type (e.g.
   * sla_violation, breach), escalation level (e.g. normal, urgent, critical),
   * deadline, assigned user/role, and resolution outcome, leveraging indices
   * for efficient lookup.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for escalation event
   *   filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformEscalationEvent.IRequest,
  ): Promise<IPageIHealthcarePlatformEscalationEvent.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminEscalationEvents({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific escalation event in
   * healthcare_platform_escalation_events.
   *
   * Retrieve details of a specific escalation event by its unique identifier
   * (escalationEventId) from the escalation events registry. This operation
   * exposes the full escalation event record for operational audit, compliance
   * review, or workflow status checks. Fields returned include escalation type
   * (e.g. sla_violation, breach, compliance_required), escalation level
   * (normal, urgent, critical), associated user/role, creation and deadline
   * timestamps, current resolution status, and complete audit trail linkage.
   * Access is tightly restricted, with fine-grained authorization allowing only
   * designated compliance or administrator roles to view sensitive escalation
   * event data.
   *
   * @param connection
   * @param escalationEventId Unique identifier for the escalation event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":escalationEventId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("escalationEventId")
    escalationEventId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformEscalationEvent> {
    try {
      return await gethealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId(
        {
          organizationAdmin,
          escalationEventId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing escalation event in
   * healthcare_platform_escalation_events.
   *
   * Update selected fields on an escalation event, such as assignment,
   * escalation level, type, deadline, status, and resolution notes. Used for
   * progressing an escalation through workflow stages (assignment, handling,
   * closure), modifying responder, marking resolution, or adding
   * compliance-related annotations. Enforces validation of field changes,
   * captures audit trail, and triggers notifications or workflow actions if the
   * escalation is resolved or advanced. This maintains synchronous visibility
   * and accountability for prioritized incidents across organizations.
   *
   * @param connection
   * @param escalationEventId Unique identifier of the escalation event to
   *   update.
   * @param body Fields to update for the escalation event, including
   *   assignment, escalation metadata, status, resolution notes, and
   *   deadlines.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":escalationEventId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("escalationEventId")
    escalationEventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEscalationEvent.IUpdate,
  ): Promise<IHealthcarePlatformEscalationEvent> {
    try {
      return await puthealthcarePlatformOrganizationAdminEscalationEventsEscalationEventId(
        {
          organizationAdmin,
          escalationEventId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
