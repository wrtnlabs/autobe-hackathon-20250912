import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminTelemedicineSessions } from "../../../../providers/posthealthcarePlatformOrganizationAdminTelemedicineSessions";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminTelemedicineSessions } from "../../../../providers/patchhealthcarePlatformOrganizationAdminTelemedicineSessions";
import { gethealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId } from "../../../../providers/gethealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId";
import { puthealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId } from "../../../../providers/puthealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId";
import { deletehealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId";

import { IHealthcarePlatformTelemedicineSession } from "../../../../api/structures/IHealthcarePlatformTelemedicineSession";
import { IPageIHealthcarePlatformTelemedicineSessions } from "../../../../api/structures/IPageIHealthcarePlatformTelemedicineSessions";
import { IHealthcarePlatformTelemedicineSessions } from "../../../../api/structures/IHealthcarePlatformTelemedicineSessions";

@Controller("/healthcarePlatform/organizationAdmin/telemedicineSessions")
export class HealthcareplatformOrganizationadminTelemedicinesessionsController {
  /**
   * Create a new telemedicine session record (TelemedicineSession table) in
   * healthcarePlatform.
   *
   * Create a new telemedicine session for a scheduled appointment. This
   * operation is used by authorized staff or system processes to generate
   * secure telemedicine sessions linked to a specific appointment.
   *
   * During creation, all required information about the appointment, session
   * start/end times, secure access link, and provider/patient associations must
   * be provided. Security controls ensure only authorized roles (such as
   * systemAdmin, organizationAdmin, or medicalDoctor) can invoke this
   * operation. Session creation is logged for audit.
   *
   * On success, the response includes the full session record with join link
   * and timing details, suitable for further integration with video platforms
   * or calendar notifications.
   *
   * @param connection
   * @param body Payload for creating a telemedicine session including
   *   appointment association, times, join link, and recording flag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformTelemedicineSession.ICreate,
  ): Promise<IHealthcarePlatformTelemedicineSession> {
    try {
      return await posthealthcarePlatformOrganizationAdminTelemedicineSessions({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of telemedicine sessions.
   *
   * Return a paginated and optionally filtered list of telemedicine session
   * records to eligible users. The API leverages advanced search features
   * including search by appointment ID, user participation, date/time window,
   * recording status, and other session-level attributes stored in the
   * healthcare_platform_telemedicine_sessions table.
   *
   * The core use case is to allow providers, clinical admins, or scheduling
   * staff to audit and review telemedicine activity, join/leave times,
   * attendance status, recording status, or compliance with telemedicine
   * policy. Results support pagination, custom sorting (by time, provider,
   * patient, session recorded), and other administrative filters defined in the
   * request schema. Authorization is enforced so that only organization staff
   * involved in telemedicine workflows, or with audit authority, may access
   * these lists.
   *
   * Sensitive or protected fields (such as secure join links or internal notes)
   * are included for administrative personnel only. Patient portal or
   * non-privileged users may not use this operation.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for telemedicine
   *   session records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformTelemedicineSessions.IRequest,
  ): Promise<IPageIHealthcarePlatformTelemedicineSessions.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminTelemedicineSessions(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific telemedicine session.
   *
   * Return comprehensive details about a specific telemedicine session. This
   * includes timestamps (scheduled, actual, provider/patient joined, session
   * start/end), secure join links (for authorized roles), session recording
   * status, attendance, appointment linkage, and all other fields as defined in
   * the healthcare_platform_telemedicine_sessions schema.
   *
   * This endpoint is used for administrative review, compliance audit, internal
   * troubleshooting, or clinical outcome workflow analysis after a telemedicine
   * session has occurred. Authorization logic must restrict access to
   * organization administrators or providers who are linked to the appointment
   * or responsible for the patient care episode. All access to session details
   * is logged for audit.
   *
   * If a telemedicine session does not exist, or if unauthorized users attempt
   * access, the system must return an appropriate not found or forbidden error
   * and log the event for compliance.
   *
   * @param connection
   * @param telemedicineSessionId Unique identifier of the telemedicine session
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":telemedicineSessionId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("telemedicineSessionId")
    telemedicineSessionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformTelemedicineSessions> {
    try {
      return await gethealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId(
        {
          organizationAdmin,
          telemedicineSessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details for a telemedicine session (TelemedicineSession table) by
   * telemedicineSessionId.
   *
   * Update details of an existing telemedicine session such as session
   * start/end times, link, or session recording flag. Only authorized staff
   * (organizationAdmin, medicalDoctor, or systemAdmin) may perform updates, and
   * actions are audited for compliance.
   *
   * The session identifier in the path parameter selects the telemedicine
   * session record to update. The request body must include the fields to be
   * modified as defined in the update schema. This operation supports modifying
   * the session (for example, to reschedule, update links, or change recording
   * preferences) as business workflows require. Auditing ensures tracking of
   * all changes for security and compliance review.
   *
   * @param connection
   * @param telemedicineSessionId Unique identifier (UUID) of the telemedicine
   *   session to be updated.
   * @param body Fields to update in the telemedicine session (times, join link,
   *   session_recorded, etc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":telemedicineSessionId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("telemedicineSessionId")
    telemedicineSessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformTelemedicineSession.IUpdate,
  ): Promise<IHealthcarePlatformTelemedicineSession> {
    try {
      return await puthealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId(
        {
          organizationAdmin,
          telemedicineSessionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a telemedicine session by telemedicineSessionId
   * (TelemedicineSession table hard delete).
   *
   * Permanently remove an existing telemedicine session. Only users with
   * systemAdmin, organizationAdmin, or medicalDoctor roles are authorized to
   * perform this action. The operation is audited for compliance purposes.
   *
   * This operation should be used with care, as deleted session records and
   * metadata cannot be restored. Deletion checks may prevent removal if the
   * session is still linked to future appointments or is in use.
   *
   * @param connection
   * @param telemedicineSessionId Unique identifier (UUID) for the telemedicine
   *   session that should be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":telemedicineSessionId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("telemedicineSessionId")
    telemedicineSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminTelemedicineSessionsTelemedicineSessionId(
        {
          organizationAdmin,
          telemedicineSessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
