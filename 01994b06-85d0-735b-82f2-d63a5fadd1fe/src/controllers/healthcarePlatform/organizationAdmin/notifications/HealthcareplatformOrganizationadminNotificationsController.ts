import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminNotifications } from "../../../../providers/posthealthcarePlatformOrganizationAdminNotifications";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminNotifications } from "../../../../providers/patchhealthcarePlatformOrganizationAdminNotifications";
import { gethealthcarePlatformOrganizationAdminNotificationsNotificationId } from "../../../../providers/gethealthcarePlatformOrganizationAdminNotificationsNotificationId";
import { puthealthcarePlatformOrganizationAdminNotificationsNotificationId } from "../../../../providers/puthealthcarePlatformOrganizationAdminNotificationsNotificationId";

import { IHealthcarePlatformNotification } from "../../../../api/structures/IHealthcarePlatformNotification";
import { IPageIHealthcarePlatformNotification } from "../../../../api/structures/IPageIHealthcarePlatformNotification";

@Controller("/healthcarePlatform/organizationAdmin/notifications")
export class HealthcareplatformOrganizationadminNotificationsController {
  /**
   * Create and issue a new notification to recipient(s) (Notifications table).
   *
   * Enables authorized staff or service components to issue new notifications
   * to users, organizations, or roles within the healthcarePlatform. The
   * request body encapsulates all notification creation parameters: recipient
   * identifiers, organization, notification type, channel, subject, message
   * body, critical status, and optional escalation instructions.
   *
   * The operation validates the payload according to strict notification schema
   * comments, ensuring delivery channels and recipient roles are permitted and
   * that content respects privacy and compliance regulations. Upon successful
   * creation, the notification is queued for delivery, targeting channels
   * (email, SMS, in-app, etc.) as configured. Returns the newly created
   * notification's full data for tracking or user interface display.
   *
   * Security checks ensure only permitted roles (typically admin, staff, or
   * trusted integration services) may invoke this endpoint to create
   * notifications. Audit trails are automatically generated. Related APIs
   * include notification search, recipient preference queries, and delivery
   * status updates.
   *
   * @param connection
   * @param body Information for creating a new notification, including content,
   *   recipient, and delivery parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformNotification.ICreate,
  ): Promise<IHealthcarePlatformNotification> {
    try {
      return await posthealthcarePlatformOrganizationAdminNotifications({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve notifications with advanced filtering and pagination
   * (Notifications table).
   *
   * This API operation provides a comprehensive, advanced search endpoint for
   * retrieving notifications issued in the healthcarePlatform system.
   * Leveraging the Notifications table and utilizing all available filtering
   * and sorting options, the operation supports multi-tenant, role-aware
   * searches by notification type (e.g., appointment reminder, billing alert),
   * delivery channel (email, SMS, in-app), criticality, status, recipient,
   * sender, and more.
   *
   * All search criteria—including pagination, sorting parameters, criticality
   * flag, status codes, and date ranges—are encapsulated in the request body,
   * which is validated against the Notifications schema comments for correct
   * use. Output is paginated, providing summary data for each notification
   * (IDs, types, status, timestamps, subject, body preview, and metadata for
   * display purposes).
   *
   * Security policies are strictly enforced; the caller only receives
   * notifications for which they are authorized, according to organization,
   * role, and privacy configuration. Sensitive notification bodies are
   * appropriately redacted or omitted for unauthorized parties. The
   * implementation makes use of JSONB/Gin indexes and supports highly
   * responsive search even in high-volume environments.
   *
   * Related APIs: individual notification retrieval, notification creation, or
   * acknowledgement operations. Error handling covers invalid search criteria,
   * forbidden access, and pagination range errors.
   *
   * @param connection
   * @param body Notification search and filter criteria, including pagination
   *   and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformNotification.IRequest,
  ): Promise<IPageIHealthcarePlatformNotification.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminNotifications({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a specific notification (Notifications table).
   *
   * This API endpoint fetches the full record of a notification event by its
   * unique notificationId. Drawing on the Notifications schema, it returns
   * detailed data including notification type, channel, criticality, recipient,
   * sender, subject, full body, delivery attempts and status, time stamps, and
   * any escalation or acknowledgement data linked to the notification.
   *
   * Access is role-checked: only the intended recipient, sender, organization
   * administrators, or permitted compliance staff may view the notification.
   * The API will redact message content or deny access if the requester's role
   * and context do not match privacy and compliance policies. All access
   * requests are logged in the audit subsystem for full traceability.
   *
   * Handles error conditions such as invalid or missing notificationId,
   * unauthorized access, or already-deleted records. Related APIs enable
   * listing notifications, sending new notifications, or managing delivery
   * status.
   *
   * @param connection
   * @param notificationId The unique identifier of the notification to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformNotification> {
    try {
      return await gethealthcarePlatformOrganizationAdminNotificationsNotificationId(
        {
          organizationAdmin,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update editable fields of an existing notification by ID (Notifications
   * table).
   *
   * This API endpoint allows permitted admin or workflow users to update the
   * details of a specific notification, as identified by notificationId.
   * Updatable fields include delivery status, acknowledgment state, escalation
   * linkages, or compliance notations. The request body must conform to
   * update-allowed attributes per the Notifications schema comments and
   * business logic: certain fields (e.g., notificationId, created_at) are
   * immutable and cannot be changed through this operation.
   *
   * The operation is intended for administrative interventions, retry of failed
   * delivery, or manual escalation/acknowledgment in compliance or incident
   * workflows. Attempts to update immutable or restricted fields will result in
   * error responses. Every invocation triggers audit log entries for compliance
   * monitoring.
   *
   * Strict authorization policies are enforced: general users cannot update
   * notification records (use acknowledgement APIs instead); only admins or
   * system integrations can update. Related endpoints include notification
   * creation, status audit, and access log queries.
   *
   * @param connection
   * @param notificationId The unique identifier of the notification to update.
   * @param body Details for updating allowed attributes of the notification
   *   (delivery status, escalation, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":notificationId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformNotification.IUpdate,
  ): Promise<IHealthcarePlatformNotification> {
    try {
      return await puthealthcarePlatformOrganizationAdminNotificationsNotificationId(
        {
          organizationAdmin,
          notificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
