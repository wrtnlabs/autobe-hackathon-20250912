import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminEquipmentReservations } from "../../../../providers/posthealthcarePlatformOrganizationAdminEquipmentReservations";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminEquipmentReservations } from "../../../../providers/patchhealthcarePlatformOrganizationAdminEquipmentReservations";
import { gethealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId } from "../../../../providers/gethealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId";
import { puthealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId } from "../../../../providers/puthealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId";
import { deletehealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId";

import { IHealthcarePlatformEquipmentReservation } from "../../../../api/structures/IHealthcarePlatformEquipmentReservation";
import { IPageIHealthcarePlatformEquipmentReservation } from "../../../../api/structures/IPageIHealthcarePlatformEquipmentReservation";

@Controller("/healthcarePlatform/organizationAdmin/equipmentReservations")
export class HealthcareplatformOrganizationadminEquipmentreservationsController {
  /**
   * Create a new equipment reservation for operational or clinical scheduling
   * (healthcare_platform_equipment_reservations table).
   *
   * Allows authorized organizational users to create a new reservation for a
   * piece of equipment, specifying the organization, equipment resource, time
   * slot, reservation type, and related context. It supports department and
   * org-specific scheduling flows and enforces audit compliance, including
   * timestamps, business rationale, and linkage to appointments where
   * relevant.
   *
   * Authorization logic ensures only permitted users (systemAdmin,
   * organizationAdmin, departmentHead) can create reservations in their
   * respective scopes. All entries are checked against existing reservations
   * for conflicts and must obey maintenance or blackout logic as configured in
   * the organization's settings.
   *
   * Validation occurs for time windows, required fields, resource existence,
   * and business rules such as no duplicate reservations for the same equipment
   * and slot.
   *
   * @param connection
   * @param body Equipment reservation creation details, including resource,
   *   scheduling, and organizational assignment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformEquipmentReservation.ICreate,
  ): Promise<IHealthcarePlatformEquipmentReservation> {
    try {
      return await posthealthcarePlatformOrganizationAdminEquipmentReservations(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of equipment reservations
   * (healthcare_platform_equipment_reservations table).
   *
   * Retrieve a filtered and paginated list of equipment reservations within the
   * healthcare platform. This supports key operational activities including
   * scheduling, maintenance, and resource allocation for procedures or
   * appointments.
   *
   * Security and access are governed by role-based permissions (e.g.,
   * systemAdmin, organizationAdmin, departmentHead), ensuring that only
   * authorized staff may view or manage reservations relevant to their
   * organizational context. Users may search by resource type, time slot,
   * resource assignment, reservation reason/type, and status.
   *
   * This operation is based on the healthcare_platform_equipment_reservations
   * table, offering all fields necessary for compliance/audit reporting and
   * workflow optimization. The response provides detailed reservation data,
   * including any linked room, appointment, or blackout period, and includes
   * pagination for scalable access.
   *
   * Related APIs include creation (POST), update (PUT), and detail retrieval
   * (GET) for single reservations. Error handling will include validation for
   * search parameters, role visibility limitations, and anti-pattern detection
   * for overlapping/conflicting reservations.
   *
   * @param connection
   * @param body Advanced search and pagination criteria for querying equipment
   *   reservations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformEquipmentReservation.IRequest,
  ): Promise<IPageIHealthcarePlatformEquipmentReservation> {
    try {
      return await patchhealthcarePlatformOrganizationAdminEquipmentReservations(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single equipment reservation's details by its unique identifier
   * (healthcare_platform_equipment_reservations table).
   *
   * Obtain the full detail of a specific equipment reservation using its unique
   * identifier. Used for schedule review, operational management, and
   * compliance auditing. Access is appropriately restricted to users in roles
   * such as systemAdmin, organizationAdmin, or departmentHead for the relevant
   * organization or department.
   *
   * All fields are returned as specified in the
   * healthcare_platform_equipment_reservations schema, including reservation
   * type, status, associated appointment, resource linkage, and timestamps.
   * Authorization is enforced at the organization/unit level according to user
   * assignments.
   *
   * Validation ensures the reservationId exists and the user has permission to
   * read it. Errors are returned for missing, deleted, or inaccessible
   * reservations.
   *
   * @param connection
   * @param equipmentReservationId Unique identifier of the equipment
   *   reservation record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":equipmentReservationId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("equipmentReservationId")
    equipmentReservationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformEquipmentReservation> {
    try {
      return await gethealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId(
        {
          organizationAdmin,
          equipmentReservationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing equipment reservation record
   * (healthcare_platform_equipment_reservations table) by identifier.
   *
   * Allows authorized users (systemAdmin, organizationAdmin, departmentHead in
   * relevant org/unit) to update the details of an equipment reservation in the
   * system. Fields such as reservation window, resource identifiers, status,
   * and reason/type may be modified, and audit trails are maintained for all
   * changes.
   *
   * Validation ensures the target record exists, is active, and is modifiable
   * by the user (i.e., not archived or soft-deleted), and checks for updated
   * scheduling conflicts and compliance with organizational rules.
   *
   * Related operations include creation (POST), single record retrieval (GET),
   * and list search (PATCH) for reservations. Error conditions such as invalid
   * UUID, unauthorized edits, or scheduling conflicts are surfaced as API
   * validation errors.
   *
   * @param connection
   * @param equipmentReservationId Unique identifier of the equipment
   *   reservation to update.
   * @param body Updated fields and values for the equipment reservation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":equipmentReservationId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("equipmentReservationId")
    equipmentReservationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEquipmentReservation.IUpdate,
  ): Promise<IHealthcarePlatformEquipmentReservation> {
    try {
      return await puthealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId(
        {
          organizationAdmin,
          equipmentReservationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an equipment reservation in the
   * healthcare_platform_equipment_reservations table.
   *
   * Delete an equipment reservation from the system using its
   * equipmentReservationId. This operation is typically used by
   * organization-level administrators or scheduling staff to remove a
   * reservation when equipment is no longer needed for a particular time
   * window, or if there was a scheduling mistake.
   *
   * The operation ensures that the equipment is marked available again for new
   * reservations, updating internal resource availability logic. Deletion is
   * irreversible and permanently removes the reservation from the
   * healthcare_platform_equipment_reservations table. Attempting to delete a
   * non-existent or unauthorized reservation will trigger an error event, and
   * all actions are audit-logged for compliance.
   *
   * Security and data integrity are paramount; therefore, appropriate access
   * controls are enforced, and cascading effects such as linked appointments or
   * blocks must be resolved or prevented before deletion. This operation aligns
   * with business policies for auditability and traceable resource allocation.
   *
   * @param connection
   * @param equipmentReservationId Unique identifier of the equipment
   *   reservation to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":equipmentReservationId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("equipmentReservationId")
    equipmentReservationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminEquipmentReservationsEquipmentReservationId(
        {
          organizationAdmin,
          equipmentReservationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
