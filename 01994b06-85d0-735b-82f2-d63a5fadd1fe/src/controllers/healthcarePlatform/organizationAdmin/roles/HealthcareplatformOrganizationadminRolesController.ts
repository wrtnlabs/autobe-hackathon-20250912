import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminRoles } from "../../../../providers/patchhealthcarePlatformOrganizationAdminRoles";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminRolesRoleId } from "../../../../providers/gethealthcarePlatformOrganizationAdminRolesRoleId";

import { IPageIHealthcarePlatformRole } from "../../../../api/structures/IPageIHealthcarePlatformRole";
import { IHealthcarePlatformRole } from "../../../../api/structures/IHealthcarePlatformRole";

@Controller("/healthcarePlatform/organizationAdmin/roles")
export class HealthcareplatformOrganizationadminRolesController {
  /**
   * Search and paginate the list of roles in the platform
   * (healthcare_platform_roles table).
   *
   * This endpoint provides advanced search capabilities for listing roles
   * managed by the platform. Users can apply flexible search criteria, sort
   * results by creation date, name, or code, and paginate through potentially
   * large result sets. The request body allows detailed filtering on properties
   * such as code, name, scope_type (platform, organization, department), and
   * status (active, retired, system-only, archived), reflecting the RBAC policy
   * structure outlined in the Prisma schema.
   *
   * Results support organization-scoped queries and can be restricted or
   * ordered by scope and status as necessary for administrative management of
   * roles. Performance is optimized for filtered, paginated retrieval and
   * integrates role-based access control logic to ensure users only view roles
   * within their permitted administrative scope.
   *
   * The output is a paginated container (IPageIHealthcarePlatformRole.ISummary)
   * suitable for management UI and auditing functions. Errors related to
   * invalid filters or lack of permission are clearly reported.
   *
   * @param connection
   * @param body Role search and pagination parameters as described by
   *   IHealthcarePlatformRole.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformRole.IRequest,
  ): Promise<IPageIHealthcarePlatformRole.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminRoles({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific role entity by ID (healthcare_platform_roles
   * table).
   *
   * This endpoint enables platform and organizational administrators to
   * retrieve full details about a specific role by its unique identifier
   * (roleId). The output includes all fields annotated in the
   * healthcare_platform_roles Prisma schema, such as the role's code, display
   * name, scope_type (platform, organization, department), current status, and
   * creation/update timestamps.
   *
   * Access to this endpoint is governed by administrative privileges as
   * outlined in the RBAC configuration. The operation is essential for
   * reviewing and confirming role definitions, ensuring compliance with RBAC
   * policies, and providing source-of-truth data for audits. Errors are
   * returned when access is denied or the role is not found.
   *
   * @param connection
   * @param roleId Globally unique identifier of the role to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roleId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformRole> {
    try {
      return await gethealthcarePlatformOrganizationAdminRolesRoleId({
        organizationAdmin,
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
