import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminLabIntegrations } from "../../../../providers/posthealthcarePlatformOrganizationAdminLabIntegrations";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminLabIntegrations } from "../../../../providers/patchhealthcarePlatformOrganizationAdminLabIntegrations";
import { gethealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId } from "../../../../providers/gethealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId";
import { puthealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId } from "../../../../providers/puthealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId";
import { deletehealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId";

import { IHealthcarePlatformLabIntegration } from "../../../../api/structures/IHealthcarePlatformLabIntegration";
import { IPageIHealthcarePlatformLabIntegration } from "../../../../api/structures/IPageIHealthcarePlatformLabIntegration";

@Controller("/healthcarePlatform/organizationAdmin/labIntegrations")
export class HealthcareplatformOrganizationadminLabintegrationsController {
  /**
   * Create a new lab provider integration configuration
   * (healthcare_platform_lab_integrations table).
   *
   * This operation allows an organization administrator or system administrator
   * to register a new laboratory integration for their organization.
   * Integrations set up through this endpoint will be used for sending and
   * receiving laboratory orders/results, and include required fields for lab
   * provider code, interface URIs, and which structured data/message format the
   * integration supports. All fields entered are subject to validation –
   * provider codes must be unique per organization, and connection URIs should
   * adhere to secure platform patterns. Security: Only staff with appropriate
   * privileges should perform this operation since improper configuration could
   * expose patient data or hinder care. The response contains a detailed object
   * representing the created integration, suitable for audit and technical
   * validation purposes. If duplicate provider codes are submitted, or if
   * required fields are missing, the endpoint returns a validation error.
   *
   * @param connection
   * @param body Integration configuration for a new external lab provider.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLabIntegration.ICreate,
  ): Promise<IHealthcarePlatformLabIntegration> {
    try {
      return await posthealthcarePlatformOrganizationAdminLabIntegrations({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filtered list of lab integration connectors
   * (healthcare_platform_lab_integrations).
   *
   * Returns a paginated and filtered list of lab integration connection
   * definitions (for vendors such as LabCorp, Quest Diagnostics, or custom
   * labs) based on query parameters. This operation reads from the
   * healthcare_platform_lab_integrations table, supporting search and filtering
   * by vendor code, connection status, message format, and organization
   * assignment.
   *
   * Users require appropriate system or organizational privileges, and access
   * will be scoped to lab integrations in their assigned organizations. Results
   * are ordered and paginated according to standard list operation conventions,
   * and the request body can include search text, filter objects, or sorting
   * criteria.
   *
   * This operation is commonly used in administrative dashboards for
   * integration health, audit readiness, and onboarding workflows. It
   * complements individual lab integration detail retrieval, creation, update,
   * and deletion endpoints.
   *
   * @param connection
   * @param body Search and filter criteria for lab integration list retrieval,
   *   such as status, vendor code, organization.id, or
   *   supported_message_format.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLabIntegration.IRequest,
  ): Promise<IPageIHealthcarePlatformLabIntegration.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminLabIntegrations({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the details of a specific lab integration connector
   * (healthcare_platform_lab_integrations).
   *
   * Fetches the full configuration and status details for a specific lab
   * integration point, corresponding to a row in the
   * healthcare_platform_lab_integrations table. The result includes lab vendor
   * identity, connection URI, supported formats, status, timestamps, and
   * metadata fields, supporting compliance review, integration setup, and
   * incident investigation.
   *
   * The operation is restricted to administrative users responsible for
   * maintaining or auditing lab connections, and the returned fields must match
   * the schema definition for lab integrations. The endpoint will return an
   * error response if the labIntegrationId does not exist or is not accessible
   * to the requesting user's organization.
   *
   * @param connection
   * @param labIntegrationId Unique identifier of the lab integration to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":labIntegrationId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("labIntegrationId")
    labIntegrationId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLabIntegration> {
    try {
      return await gethealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId(
        {
          organizationAdmin,
          labIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific organization's laboratory integration configuration
   * (healthcare_platform_lab_integrations table).
   *
   * Using this operation, an organization administrator can update properties
   * of an existing lab integration, modifying aspects such as provider API
   * endpoints or status flags. The operation enforces business rules – for
   * example, changes to provider codes must remain unique within the
   * organization. The endpoint validates all fields and only allows updates on
   * active (non-deleted) records. Updates are logged for audit traceability.
   * Security: Only administrators with organizational or higher privileges may
   * perform integration updates. Attempting to update a non-existent or deleted
   * integration returns a not-found or forbidden error. Business impact:
   * Adjusting integration endpoints may immediately affect lab order flows and
   * result delivery, so use with caution and coordinate with involved clinical
   * staff as needed.
   *
   * @param connection
   * @param labIntegrationId Unique identifier of the laboratory integration to
   *   update.
   * @param body New configuration values for the laboratory integration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":labIntegrationId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("labIntegrationId")
    labIntegrationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLabIntegration.IUpdate,
  ): Promise<IHealthcarePlatformLabIntegration> {
    try {
      return await puthealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId(
        {
          organizationAdmin,
          labIntegrationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an organization's laboratory integration
   * (healthcare_platform_lab_integrations table).
   *
   * This operation enables an organization administrator to soft-delete a
   * laboratory integration, which disables the connection for future lab order
   * workflows while retaining all previous records for compliance. The deletion
   * is reversable by restoring the deleted_at timestamp via internal processes.
   * Only non-deleted records may be marked as deleted, and business rules
   * prevent hard deletion to ensure retention for audit and traceability. Any
   * attempt to delete an already deleted or non-existent record results in an
   * error. Only administrators are permitted to delete integrations, reflecting
   * the sensitivity of disabling external laboratory communications.
   *
   * @param connection
   * @param labIntegrationId Unique identifier of the laboratory integration to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":labIntegrationId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("labIntegrationId")
    labIntegrationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminLabIntegrationsLabIntegrationId(
        {
          organizationAdmin,
          labIntegrationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
