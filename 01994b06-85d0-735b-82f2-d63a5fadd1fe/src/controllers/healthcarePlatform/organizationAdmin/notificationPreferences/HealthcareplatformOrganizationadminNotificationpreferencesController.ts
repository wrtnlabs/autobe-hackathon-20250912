import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { puthealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId } from "../../../../providers/puthealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { deletehealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId";

import { IHealthcarePlatformNotificationPreference } from "../../../../api/structures/IHealthcarePlatformNotificationPreference";

@Controller(
  "/healthcarePlatform/organizationAdmin/notificationPreferences/:notificationPreferenceId",
)
export class HealthcareplatformOrganizationadminNotificationpreferencesController {
  /**
   * Update a notification preference record for a user
   * (healthcare_platform_notification_preferences table).
   *
   * This API operation permits the update of an individual notification
   * preference setting for a user or staff member. The preference record
   * determines how notifications are delivered (e.g., by email, SMS, in-app,
   * etc.), as well as whether certain types of notifications (reminders,
   * alerts, escalations) are enabled or muted per organization and notification
   * type.
   *
   * The request is subject to business logic validating that the specified
   * notificationPreferenceId exists, is owned by the acting user or modifiable
   * by an administrator, and adheres to organizational policy. Changes to
   * notification preference may require audit logging for compliance with user
   * opt-in/opt-out rights and organizational escalation rules. The endpoint
   * supports changes to mute windows (DND), escalation routing, and explicit
   * enable/disable per channel and type.
   *
   * Only authorized roles (the notificationPreference owner or organization
   * admin with explicit privilege) can modify notification preferences for a
   * user. System-wide or org-level notification defaults are enforced as
   * fallback if no user preference exists.
   *
   * Related operations include creating a new preference (POST), retrieving all
   * preferences for a user (GET/PATCH), or deleting a preference (DELETE).
   * Error scenarios include invalid IDs, attempts to modify preferences outside
   * a user's org context, or violating business rules for critical
   * notifications.
   *
   * @param connection
   * @param notificationPreferenceId Unique identifier for the notification
   *   preference record to update.
   * @param body Notification preference update payload, including channel,
   *   type, mute window, enable state, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("notificationPreferenceId")
    notificationPreferenceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformNotificationPreference.IUpdate,
  ): Promise<IHealthcarePlatformNotificationPreference> {
    try {
      return await puthealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId(
        {
          organizationAdmin,
          notificationPreferenceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft-delete) a notification preference record for a user
   * (healthcare_platform_notification_preferences table).
   *
   * This API operation allows a user or administrator to delete a specific
   * notification preference record, reverting notification delivery to the
   * organization-level or system default configuration for channel, mute, and
   * escalation policies. The operation marks the preference entry as deleted
   * (soft delete via deleted_at), preserving it for audit and compliance review
   * per policy.
   *
   * Proper authorization is enforced - only the preference owner or an
   * organization admin with privilege can delete a preference. Soft deletion
   * ensures historical opt-in/opt-out records are available for regulatory
   * queries. Open reminders or notifications are unaffected; future messages
   * will follow fallback notification rules.
   *
   * Error scenarios include invalid notificationPreferenceId, attempts to
   * delete records outside the user's org, or system-protected notification
   * types which cannot be disabled due to criticality or regulatory policy. The
   * operation does not physically remove records immediately to comply with
   * audit standards.
   *
   * Related operations include creating/updating preferences, retrieving the
   * full preference set for a user, or restoring/re-enabling deleted
   * preferences for audit recourse.
   *
   * @param connection
   * @param notificationPreferenceId Unique identifier for the notification
   *   preference record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("notificationPreferenceId")
    notificationPreferenceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminNotificationPreferencesNotificationPreferenceId(
        {
          organizationAdmin,
          notificationPreferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
