import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBillingDiscountPolicies } from "../../../../providers/posthealthcarePlatformOrganizationAdminBillingDiscountPolicies";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBillingDiscountPolicies } from "../../../../providers/patchhealthcarePlatformOrganizationAdminBillingDiscountPolicies";
import { gethealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId } from "../../../../providers/gethealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId";
import { puthealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId } from "../../../../providers/puthealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId";
import { deletehealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId";

import { IHealthcarePlatformBillingDiscountPolicy } from "../../../../api/structures/IHealthcarePlatformBillingDiscountPolicy";
import { IPageIHealthcarePlatformBillingDiscountPolicy } from "../../../../api/structures/IPageIHealthcarePlatformBillingDiscountPolicy";

@Controller("/healthcarePlatform/organizationAdmin/billingDiscountPolicies")
export class HealthcareplatformOrganizationadminBillingdiscountpoliciesController {
  /**
   * Create a new billing discount policy in
   * healthcare_platform_billing_discount_policies.
   *
   * This operation allows organizationAdmins to add a new billing discount
   * policy to their organization's configuration via the
   * healthcare_platform_billing_discount_policies table. The policy defines
   * available/approved discount logic, display names, and description for
   * financial workflows.
   *
   * POST body requires all fields necessary per the
   * IHealthcarePlatformBillingDiscountPolicy.ICreate schema, including
   * policy_name, discount_type, description (optional), and is_active flag.
   * Created policies are subject to compliance review and business rules about
   * uniqueness and policy rationale. Only admins with financial permissions can
   * execute this operation according to the Prisma model's description and RBAC
   * boundary.
   *
   * Failure modes include attempts to duplicate a policy_name within the same
   * organization, inadequate permissions, or invalid data. On success, the new
   * policy record is returned for reference and further management.
   *
   * @param connection
   * @param body New billing discount policy data as defined by the ICreate DTO.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingDiscountPolicy.ICreate,
  ): Promise<IHealthcarePlatformBillingDiscountPolicy> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingDiscountPolicies(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated search for billing discount policies
   * (healthcare_platform_billing_discount_policies).
   *
   * This API enables organization admins to search, filter, and paginate
   * through all billing discount policy records within their organization. The
   * healthcare_platform_billing_discount_policies table defines all allowed
   * discounting schemes (e.g., charity, sliding scale, policy-driven discounts)
   * and their business activation status. Clients may use criteria such as
   * policy name, type, organization, or status to narrow the result set.
   *
   * Full response includes all policy metadata, descriptions, activation
   * status, and timestamps, supporting administrative review, policy compliance
   * checks, and downstream integration with other billing flows (such as
   * invoice adjustments or plan setup). The operation is strictly for
   * organizationAdmin-level access, with robust input validation for query
   * filters on policy_name, status, and activation. Paginated results ensure
   * efficient management of large policy catalogs in major organizations.
   *
   * Errors are clearly returned for permission failures, malformed queries, or
   * pagination parameter issues. The endpoint integrates with other billing
   * administration APIs for comprehensive financial policy management
   * workflows.
   *
   * @param connection
   * @param body Filter, sort, and pagination parameters for discount policy
   *   search, using IHealthcarePlatformBillingDiscountPolicy.IRequest
   *   structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingDiscountPolicy.IRequest,
  ): Promise<IPageIHealthcarePlatformBillingDiscountPolicy.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBillingDiscountPolicies(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific billing discount policy by ID from
   * healthcare_platform_billing_discount_policies.
   *
   * Fetches the full record for a billing discount policy as defined in the
   * healthcare_platform_billing_discount_policies table. This operation is
   * essential for admins and billing staff who need to review the details and
   * current status of a particular discount policyâ€”such as charity care,
   * hardship, or staff discounts.
   *
   * The API requires the billingDiscountPolicyId as a UUID path parameter.
   * Security and organizational RBAC boundaries are enforced; only
   * organizationAdmins (and above) may fetch policies for their own
   * organization. Sensitive configuration and is_active flags are included for
   * compliance/audit review.
   *
   * Returns all non-deleted fields, including business logic description,
   * policy type, discount method (percentage/fixed), and timestamps for
   * creation and last update. Errors are provided if the ID is not found or if
   * access is denied by the RBAC model.
   *
   * @param connection
   * @param billingDiscountPolicyId Unique identifier for the billing discount
   *   policy record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingDiscountPolicyId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingDiscountPolicyId")
    billingDiscountPolicyId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingDiscountPolicy> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId(
        {
          organizationAdmin,
          billingDiscountPolicyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing billing discount policy by ID in
   * healthcare_platform_billing_discount_policies.
   *
   * This operation allows organization-level administrators to modify an
   * existing billing discount policy, such as updating whether it is active,
   * changing description or names, or altering business logic for allowed
   * financial discounts.
   *
   * The target policy is specified by billingDiscountPolicyId (UUID path
   * parameter). The PUT body uses the
   * IHealthcarePlatformBillingDiscountPolicy.IUpdate DTO, which supports
   * patching policy_name, discount_type, description, or is_active flags. Full
   * audit trails and compliance checks are enforced to track changes.
   *
   * Validation ensures policy integrity, uniqueness (no duplicate names within
   * the same organization), and prevents modification if the record is
   * soft-deleted. Only authorized organizationAdmins may perform updates.
   * Returns the updated policy record on success, or errors for
   * permission/validation failures.
   *
   * @param connection
   * @param billingDiscountPolicyId Unique identifier of the billing discount
   *   policy to update.
   * @param body The updated billing discount policy fields. All updatable
   *   fields per IUpdate DTO.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingDiscountPolicyId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingDiscountPolicyId")
    billingDiscountPolicyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingDiscountPolicy.IUpdate,
  ): Promise<IHealthcarePlatformBillingDiscountPolicy> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId(
        {
          organizationAdmin,
          billingDiscountPolicyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a billing discount policy by ID from
   * healthcare_platform_billing_discount_policies.
   *
   * This operation allows organization-level administrators to perform a
   * soft-delete on a billing discount policy using its billingDiscountPolicyId
   * (UUID). It marks the policy as deleted for audit and compliance without
   * physical removal from the database, maintaining retention and honoring
   * legal/investigation requirements.
   *
   * The operation enforces RBAC so that only authorized admins may archive
   * policies belonging to their organization. Soft-delete is performed by
   * setting deleted_at. All references, such as invoices and adjustments, will
   * respect this policy's is_active and deleted_at status. Deletion is blocked
   * if the policy is referenced by active financial operations. Returns a
   * confirmation on success or appropriate validation error on dependency or
   * permission failure.
   *
   * @param connection
   * @param billingDiscountPolicyId Unique identifier of the billing discount
   *   policy to soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingDiscountPolicyId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingDiscountPolicyId")
    billingDiscountPolicyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingDiscountPoliciesBillingDiscountPolicyId(
        {
          organizationAdmin,
          billingDiscountPolicyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
