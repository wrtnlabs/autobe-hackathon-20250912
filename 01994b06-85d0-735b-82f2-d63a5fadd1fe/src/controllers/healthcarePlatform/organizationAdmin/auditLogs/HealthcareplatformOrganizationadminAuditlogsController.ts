import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminAuditLogs } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAuditLogs";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminAuditLogsAuditLogId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAuditLogsAuditLogId";

import { IPageIHealthcarePlatformAuditLog } from "../../../../api/structures/IPageIHealthcarePlatformAuditLog";
import { IHealthcarePlatformAuditLog } from "../../../../api/structures/IHealthcarePlatformAuditLog";

@Controller("/healthcarePlatform/organizationAdmin/auditLogs")
export class HealthcareplatformOrganizationadminAuditlogsController {
  /**
   * Search and retrieve a paginated, filterable list of audit logs for
   * compliance and security audit.
   *
   * Retrieve a list of audit logs, enabling compliance staff, auditors, or
   * system administrators to monitor, investigate, and export records of user
   * and system actions. This operation supports complex search criteria, such
   * as actor, organization, action_type, date ranges, and business entities
   * affected, supporting both broad and fine-grained investigations required by
   * HIPAA, SOC 2, and internal policy.
   *
   * Security is paramount; only authorized roles may access full records, with
   * query responses restricted by organization and permission scope. Sensitive
   * context is subject to redaction for non-privileged users. The operation
   * leverages the healthcare_platform_audit_logs Prisma table, incorporating
   * primary, foreign key, and time indexing for high-performance queries.
   * Results can be further filtered by related entities or action context, with
   * sorting by date, severity, or actor. Implementation includes comprehensive
   * error handling for invalid filters, unauthorized access attempts, and
   * ensures soft-deleted records (if any) are excluded from standard result
   * sets.
   *
   * This operation is essential for compliance audits, breach review, and
   * retrospective security incident analysis, working together with per-item
   * retrieval endpoints and export operations for regulatory reporting.
   * Pagination is supported to manage large result sets efficiently.
   *
   * @param connection
   * @param body Search and filter criteria, including action types, actor,
   *   organization, date range, entity type, pagination, and sorting options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAuditLog.IRequest,
  ): Promise<IPageIHealthcarePlatformAuditLog.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAuditLogs({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed audit log entry by auditLogId for forensic
   * investigation or compliance review.
   *
   * Fetch a detailed audit log entry by unique auditLogId for focused
   * compliance, audit, or security analysis.
   *
   * The operation provides full event context, including actor, organization,
   * action_type, related entity, IP address, and structured event metadata.
   * Only users with high-level audit or administrative roles may access
   * complete entries, and records are filtered by organization where necessary
   * to ensure tenant data isolation. Fields containing sensitive context may be
   * redacted based on role privileges.
   *
   * Designed for integration with list/search endpoints, this operation enables
   * drill-down on suspicious or significant events, documentation of forensic
   * results, and access for compliance reporting workflows. Detailed error
   * handling is implemented for invalid IDs, access violations, or non-existent
   * records, returning appropriate error responses. This is frequently used
   * together with audit log search, incident management, and export workflows.
   *
   * @param connection
   * @param auditLogId Unique identifier of the audit log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAuditLog> {
    try {
      return await gethealthcarePlatformOrganizationAdminAuditLogsAuditLogId({
        organizationAdmin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
