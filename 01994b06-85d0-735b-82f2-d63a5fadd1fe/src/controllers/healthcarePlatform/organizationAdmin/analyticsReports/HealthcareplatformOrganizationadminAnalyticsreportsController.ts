import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminAnalyticsReports } from "../../../../providers/posthealthcarePlatformOrganizationAdminAnalyticsReports";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminAnalyticsReports } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAnalyticsReports";
import { gethealthcarePlatformOrganizationAdminAnalyticsReportsReportId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAnalyticsReportsReportId";
import { puthealthcarePlatformOrganizationAdminAnalyticsReportsReportId } from "../../../../providers/puthealthcarePlatformOrganizationAdminAnalyticsReportsReportId";
import { deletehealthcarePlatformOrganizationAdminAnalyticsReportsReportId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminAnalyticsReportsReportId";

import { IHealthcarePlatformAnalyticsReport } from "../../../../api/structures/IHealthcarePlatformAnalyticsReport";
import { IPageIHealthcarePlatformAnalyticsReport } from "../../../../api/structures/IPageIHealthcarePlatformAnalyticsReport";

@Controller("/healthcarePlatform/organizationAdmin/analyticsReports")
export class HealthcareplatformOrganizationadminAnalyticsreportsController {
  /**
   * Create a new analytics report definition in the
   * healthcare_platform_analytics_reports table.
   *
   * Allows authorized organization administrators to define and register a new
   * analytics report template for use in dashboards, business intelligence, or
   * compliance processing. The POST operation creates a record in the
   * healthcare_platform_analytics_reports table, assigning template
   * configuration, naming, activation state, and visibility scope
   * (organization, department, or user level) according to the Prisma schema
   * fields.
   *
   * Security validation ensures only users with appropriate privileges can
   * create reports for their organization or department, with automatic
   * attribution of creator identity and timestamps per the schema. The
   * operation supports audit trails, versioning, and business governance for
   * analytics/reporting workflows. Reports created are immediately available
   * for further refinement, attachment to dashboards, and role-based analytics
   * export. Error handling covers name uniqueness, permission boundaries, and
   * JSON validation errors for config fields.
   *
   * This operation is complemented by GET /analyticsReports/{reportId} for
   * detail retrieval and PUT /analyticsReports/{reportId} for template
   * updates.
   *
   * @param connection
   * @param body Required fields for creating an analytics report, including
   *   name, description, configuration, and access control.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsReport.ICreate,
  ): Promise<IHealthcarePlatformAnalyticsReport> {
    try {
      return await posthealthcarePlatformOrganizationAdminAnalyticsReports({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated analytics report records
   * (IHealthcarePlatformAnalyticsReport) with filters and sorting.
   *
   * Retrieves a filtered, paginated list of analytics report definitions to
   * which the user has access, based on search, filter, and sort criteria
   * specified in the request body. Operates on the
   * healthcare_platform_analytics_reports table and is used to provide users
   * with access to analytics configuration, reporting dashboards, and
   * organization/department-scoped reports. The
   * IHealthcarePlatformAnalyticsReport.IRequest request body enables deliberate
   * querying for report name, creator, department, and status, as well as
   * supports pagination and sorting. The results are returned as an
   * IPageIHealthcarePlatformAnalyticsReport, providing all attributes suitable
   * for reporting UIs. Authorization may include any authenticated user with
   * analytics/report permissions in the organization or platform. Error
   * handling includes validation of query parameters, enforcement of RBAC/data
   * scope, and paginated output for large result sets.
   *
   * @param connection
   * @param body Search, filter, pagination, and sort configuration for
   *   analytics reports.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsReport.IRequest,
  ): Promise<IPageIHealthcarePlatformAnalyticsReport> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAnalyticsReports({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific analytics report by ID from
   * healthcare_platform_analytics_reports table.
   *
   * Retrieve an analytics report template's complete metadata and configuration
   * JSON given its reportId. This operation supports compliance and business
   * workflows by exposing all information about a specific analytics report,
   * including its assigned organization and department, creator user reference,
   * and internal configuration fields as stored in the
   * healthcare_platform_analytics_reports Prisma model.
   *
   * Security is enforced so that only users in the relevant
   * organization/departments, or with sufficient privilege (admin, dashboard
   * owner), may read this resource. The returned information is suitable for
   * debugging, auditing, or rendering report details in the application UI.
   * Unauthorized users receive appropriate access denied errors that are also
   * logged for audit review. All field references and values are aligned with
   * the Prisma model, with audit compliance metadata included as appropriate.
   *
   * This operation is read-only and should be used in conjunction with PATCH
   * /analyticsReports for list searching or GET /analyticsDashboards for
   * dashboard-level operations.
   *
   * @param connection
   * @param reportId Unique identifier (UUID) of the target analytics report.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reportId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAnalyticsReport> {
    try {
      return await gethealthcarePlatformOrganizationAdminAnalyticsReportsReportId(
        {
          organizationAdmin,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update specific analytics report configuration or metadata by reportId in
   * the healthcare_platform_analytics_reports table.
   *
   * Allows authorized organization administrators to update the details,
   * configuration, and template of an existing analytics report, as uniquely
   * identified by reportId. This operation accesses the
   * healthcare_platform_analytics_reports Prisma model to support updates to
   * key fields, such as the report name, configuration JSON, description,
   * department assignment, and active status. Audit trails and full versioning
   * are enforced per business and compliance policy.
   *
   * Security validation restricts access to administrators within the
   * appropriate organization, ensuring that changes are recorded with
   * attribution and timestamp. Operations are subject to validation for name
   * uniqueness, correct configuration JSON syntactic correctness, and
   * permission checks based on the department and organization scope. All
   * update attempts (successful or denied) are recorded for audit tracking and
   * compliance review.
   *
   * Transactional error handling is implemented for concurrency conflicts,
   * invalid updates, or restricted status changes. This operation works in
   * conjunction with GET /analyticsReports/{reportId} for retrieving current
   * values and PATCH /analyticsReports for report search.
   *
   * @param connection
   * @param reportId Unique identifier (UUID) of the analytics report to update.
   * @param body Updated fields for the analytics report, including
   *   configuration, metadata, and scope.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reportId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsReport.IUpdate,
  ): Promise<IHealthcarePlatformAnalyticsReport> {
    try {
      return await puthealthcarePlatformOrganizationAdminAnalyticsReportsReportId(
        {
          organizationAdmin,
          reportId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an analytics report by reportId from the
   * healthcare_platform_analytics_reports table (hard delete).
   *
   * Enables authorized organization administrators to delete a specific
   * analytics report, as identified by reportId, from the platform. This
   * operation performs a hard delete of the analytics report record in the
   * healthcare_platform_analytics_reports Prisma table and immediately removes
   * its dashboard/reporting presence in business workflows.
   *
   * Compliance, audit, and business policy are strictly enforced—attempts to
   * delete reports that are locked or referenced in regulatory or active
   * analytics workflows will raise an error and log the incident for review.
   * Every delete action is recorded in the audit trail for compliance and
   * accountability. Hard delete is performed as no soft delete field is present
   * in this Prisma schema for analytics reports.
   *
   * The operation completes the report lifecycle together with POST (create),
   * PUT (update), GET (retrieve), and PATCH (search) endpoints.
   *
   * @param connection
   * @param reportId Unique identifier (UUID) for the analytics report to be
   *   removed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reportId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("reportId")
    reportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminAnalyticsReportsReportId(
        {
          organizationAdmin,
          reportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
