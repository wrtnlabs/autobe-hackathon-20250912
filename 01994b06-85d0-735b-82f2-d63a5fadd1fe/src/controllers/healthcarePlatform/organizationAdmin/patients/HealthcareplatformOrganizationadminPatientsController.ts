import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminPatients } from "../../../../providers/posthealthcarePlatformOrganizationAdminPatients";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminPatients } from "../../../../providers/patchhealthcarePlatformOrganizationAdminPatients";
import { gethealthcarePlatformOrganizationAdminPatientsPatientId } from "../../../../providers/gethealthcarePlatformOrganizationAdminPatientsPatientId";
import { puthealthcarePlatformOrganizationAdminPatientsPatientId } from "../../../../providers/puthealthcarePlatformOrganizationAdminPatientsPatientId";
import { deletehealthcarePlatformOrganizationAdminPatientsPatientId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminPatientsPatientId";

import { IHealthcarePlatformPatient } from "../../../../api/structures/IHealthcarePlatformPatient";
import { IPageIHealthcarePlatformPatient } from "../../../../api/structures/IPageIHealthcarePlatformPatient";

@Controller("/healthcarePlatform/organizationAdmin/patients")
export class HealthcareplatformOrganizationadminPatientsController {
  /**
   * Register a new patient user profile in healthcare_platform_patients.
   *
   * Register a new patient user profile in the platform, capturing required
   * demographic and identity information as defined in the
   * healthcare_platform_patients table. Required fields include email, full
   * name, and date of birth, with phone as optional. The POST operation
   * validates input for uniqueness (especially email), regulatory standards,
   * and readiness for audit trail logging. It integrates with downstream
   * patient workflows, including appointments, billing, and consent management,
   * as well as security and notification preferences.
   *
   * Role-based access ensures that both staff (such as receptionists and
   * organization admins) and patients (via self-service registration) can
   * create accounts as permitted by business policy. Error handling covers
   * duplicate email, invalid input, and compliance failures, with all creations
   * subject to audit and legal traceability. The response returns the created
   * patient profile and links it to the organization's patient record domain
   * for further operations and workflow integration.
   *
   * @param connection
   * @param body Patient registration/provisioning information according to
   *   healthcare_platform_patients schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPatient.ICreate,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await posthealthcarePlatformOrganizationAdminPatients({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list patient accounts with filters and pagination in
   * healthcare_platform_patients.
   *
   * Retrieves a filtered and paginated list of patients within the
   * healthcarePlatform. Supports advanced search criteria and ordering for
   * audit, administration, and record location workflows.
   *
   * The API receives search conditions, sort order, and pagination input in the
   * request body (IHealthcarePlatformPatient.IRequest) and returns a result
   * page (IPageIHealthcarePlatformPatient.ISummary). Major filters include
   * full_name (partial match), date_of_birth, email, registration dates, and
   * status. Only authorized viewers (e.g., organizationAdmin or systemAdmin)
   * may view detailed results; access is privacy-checked for each row.
   *
   * The healthcare_platform_patients model enforces unique email and includes
   * fields required for compliance/audit. Data returned respects privacy flags
   * and consent as required by law/policy. Results are suitable for list UIs,
   * admin dashboards, and reporting workflows. Related endpoints exist for
   * individual record access and update.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for patients
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformPatient.IRequest,
  ): Promise<IPageIHealthcarePlatformPatient.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminPatients({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific patient profile by patientId from
   * healthcare_platform_patients.
   *
   * Retrieve a single patient user profile by specifying the unique patientId.
   * This operation is used to display or process detailed patient information
   * as stored in the healthcare_platform_patients table, including core
   * attributes (email, full_name, date_of_birth, phone, created_at, updated_at,
   * and deleted_at fields). Only active (not soft-deleted) records are
   * returned, and the operation enforces strict tenant data isolation—users can
   * only access patients within their organization context.
   *
   * Security and audit rules require that only roles with appropriate
   * permission, such as medicalDoctor, nurse, organizationAdmin, receptionist,
   * and the patient themselves, can access the profile, with all access events
   * logged for compliance and traceability. Attempts to view patient profiles
   * outside scope or organization boundaries are denied and audited per
   * policy.
   *
   * This GET endpoint is intended for use alongside related API endpoints that
   * reference patients, such as listing their appointments or billing status.
   * It handles errors for not found, unauthorized, or deleted records and
   * surfaces audit trail entries as required for regulatory compliance.
   *
   * @param connection
   * @param patientId Unique identifier of the target patient user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":patientId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await gethealthcarePlatformOrganizationAdminPatientsPatientId({
        organizationAdmin,
        patientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing patient user profile in healthcare_platform_patients.
   *
   * Update the patient user profile for an existing patient in the system by
   * specifying their patientId and providing the updated fields. The operation
   * is anchored on the healthcare_platform_patients table and governs changes
   * to core profile information, including email, full_name, date_of_birth, and
   * phone. Update attempts are controlled by role-based access and input
   * validation (including uniqueness for email), and only permitted for
   * authorized users or the patient themselves as dictated by the
   * organization’s compliance and audit policies.
   *
   * The endpoint logs all changes for security, audit trail, and reportability
   * purposes. It supports integrations with dependent records such as patient
   * appointments and billing, ensuring changes propagate according to business
   * requirements. Error scenarios for invalid patientId, data conflicts, or
   * unauthorized modification requests are handled with appropriate responses,
   * ensuring compliance at every update event.
   *
   * @param connection
   * @param patientId Unique identifier of the patient to update.
   * @param body Fields to update for the patient profile as per
   *   healthcare_platform_patients schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":patientId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformPatient.IUpdate,
  ): Promise<IHealthcarePlatformPatient> {
    try {
      return await puthealthcarePlatformOrganizationAdminPatientsPatientId({
        organizationAdmin,
        patientId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a patient user profile by patientId (hard delete) from
   * healthcare_platform_patients.
   *
   * Permanently remove an existing patient user profile by their patientId in
   * the healthcare_platform_patients table. Normally, patient records are
   * soft-deleted (marked via deleted_at), retaining the data for compliance and
   * audit, but this DELETE endpoint is for cases requiring irreversible erasure
   * after full compliance review. Only superuser roles, such as
   * organizationAdmin, may use this operation, and all deletions are tracked in
   * audit logs for regulatory reporting and traceability.
   *
   * This operation is dangerous and should be guarded by compliance-check
   * workflows, including retention time validation and double-confirmation
   * under organizational escalation policy. It does not affect downstream
   * linked records, which may still be subject to regulatory hold or retention,
   * but will block access to the main patient profile from end-user and staff
   * interfaces. All failures, including unauthorized attempts, audit triggers,
   * and invalid patientId errors, are handled per organizational and compliance
   * standards.
   *
   * @param connection
   * @param patientId Unique identifier of the patient to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":patientId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("patientId")
    patientId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminPatientsPatientId({
        organizationAdmin,
        patientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
