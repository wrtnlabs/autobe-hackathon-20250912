import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminCalendarSettings } from "../../../../providers/posthealthcarePlatformOrganizationAdminCalendarSettings";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminCalendarSettings } from "../../../../providers/patchhealthcarePlatformOrganizationAdminCalendarSettings";
import { gethealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId } from "../../../../providers/gethealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId";
import { puthealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId } from "../../../../providers/puthealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId";
import { deletehealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId";

import { IHealthcarePlatformCalendarSetting } from "../../../../api/structures/IHealthcarePlatformCalendarSetting";
import { IPageIHealthcarePlatformCalendarSetting } from "../../../../api/structures/IPageIHealthcarePlatformCalendarSetting";
import { IHealthcarePlatformCalendarSettings } from "../../../../api/structures/IHealthcarePlatformCalendarSettings";

@Controller("/healthcarePlatform/organizationAdmin/calendarSettings")
export class HealthcareplatformOrganizationadminCalendarsettingsController {
  /**
   * Create a new calendar setting in the healthcare_platform_calendar_settings
   * table.
   *
   * Create a new calendar setting for an organization, department, or
   * individual resource by specifying the scheduling parameters, working hours,
   * blackout dates, and restriction rules for booking and cancellations. This
   * operation enables administrators to define resource or org-wide scheduling
   * logic, which is immediately incorporated into appointment workflows and
   * resource availability algorithms.
   *
   * Inputs are validated for data integrity, business rule conformity, and
   * conflict with existing settings. Creation is fully audit-logged for
   * compliance tracking. The resulting new calendar setting is returned with
   * complete details, allowing system UI to update available scheduling options
   * or resource calendars for staff and patients.
   *
   * Security and operational controls restrict this operation to users with
   * appropriate org-level privileges and prevent the accidental creation of
   * conflicting schedule rules or data integrity errors.
   *
   * @param connection
   * @param body Data for the new calendar setting including rules for
   *   scheduling, blackout dates, lead/cancellation windows, and resource
   *   assignments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformCalendarSetting.ICreate,
  ): Promise<IHealthcarePlatformCalendarSetting> {
    try {
      return await posthealthcarePlatformOrganizationAdminCalendarSettings({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filtered list of calendar settings from
   * healthcare_platform_calendar_settings.
   *
   * Retrieve a paginated, filtered list of calendar settings that define
   * scheduling rules for providers, rooms, equipment, or entire organizations.
   * The search supports filtering by resource type, resourceId, business days,
   * availability hours, and other configurable properties, as well as
   * pagination and sorting parameters for result navigation.
   *
   * This search operation is used by staff responsible for managing or auditing
   * scheduling setup, making it possible to locate and review specific calendar
   * settings, identify gaps, or assess rule effectiveness. System includes rate
   * limiting and role-based control to prevent excessive query loads. Output
   * includes summary details for each calendar setting, allowing further
   * drill-down. The returned data supports compliance, quality control, and
   * operational reporting workflows in the scheduling domain.
   *
   * The operation ensures all returned calendar settings are constrained to the
   * user's assigned organization or permitted scope. Error handling includes
   * validation of search queries and safe pagination controls.
   *
   * @param connection
   * @param body Search and filter parameters for calendar settings list
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformCalendarSetting.IRequest,
  ): Promise<IPageIHealthcarePlatformCalendarSetting.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminCalendarSettings({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific calendar setting from
   * healthcare_platform_calendar_settings.
   *
   * Retrieve details for a calendar setting identified by calendarSettingId.
   * This detailed operation provides all the attributes necessary for
   * scheduling system integration and management, including business day
   * definitions, standard availability windows, special blackout dates,
   * resource assignments, cancellation and booking restrictions, and
   * organizational assignment context.
   *
   * Usage supports operational dashboard display, in-depth scheduling system
   * review, or configuration workflows needed by scheduling administrators.
   * Output includes all details as found in the
   * healthcare_platform_calendar_settings table. Security controls ensure that
   * only authorized users from the correct organization have view access. All
   * requests are audit-logged for compliance monitoring.
   *
   * If the requested calendar setting does not exist or is out of scope, the
   * operation returns an informative error indicating the issue, and no data is
   * exposed outside the permitted scope.
   *
   * @param connection
   * @param calendarSettingId Unique identifier for the calendar setting to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":calendarSettingId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("calendarSettingId")
    calendarSettingId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformCalendarSetting> {
    try {
      return await gethealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId(
        {
          organizationAdmin,
          calendarSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing calendar setting in the
   * healthcare_platform_calendar_settings table.
   *
   * Update core scheduling or calendar settings for a health organization or
   * provider resource. The API allows organization administrators to modify
   * open/close hours, business/available days, minimum advance booking and
   * cancellation periods, specific resource blackout dates (e.g., vacations or
   * maintenance), and locale parameters (such as date/time formats) that affect
   * provider and patient scheduling.
   *
   * The underlying healthcare_platform_calendar_settings table only allows
   * these fields to be updated; organizational-level and resource-type rules
   * are enforced, and changes are logged for audit. All updates are versioned
   * by timestamp and last update field for regulatory compliance. This
   * operation must validate that only authorized administrators for the
   * organization or resource may perform the update, and that all changed
   * fields conform to acceptable values (e.g., only valid day names for
   * business_days, correctly formatted availability_hours, etc).
   *
   * This operation is used as part of the scheduling administrative workflow
   * and may affect all subsequent bookings, appointment reminders, and
   * portal/in-app availability displays. It is not used for soft deletes or
   * recovery, only for formal direct updates. Changes made are visible to
   * appointment schedulers, admins, and may be reflected in patient
   * self-service booking tools.
   *
   * @param connection
   * @param calendarSettingId Unique identifier of the calendar setting record
   *   to update.
   * @param body New scheduling and business configuration for this calendar
   *   setting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":calendarSettingId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("calendarSettingId")
    calendarSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformCalendarSettings.IUpdate,
  ): Promise<IHealthcarePlatformCalendarSettings> {
    try {
      return await puthealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId(
        {
          organizationAdmin,
          calendarSettingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a calendar setting record in the
   * healthcare_platform_calendar_settings table.
   *
   * This API endpoint performs a soft delete of an existing calendar setting
   * entity. When an administrator invokes this operation, the deleted_at field
   * of the healthcare_platform_calendar_settings record is set to the current
   * timestamp, making the setting inactive in user and scheduling workflows
   * while preserving it for compliance audits and restoration if permitted.
   *
   * Only organization administrators are permitted to delete calendar settings,
   * and authorization checks must be enforced before marking a record as
   * deleted. All deletion events are logged in compliance with healthcare audit
   * requirements. This operation is used when retiring old resource schedules,
   * business hour exceptions, or no longer applicable booking rules. Hard
   * deletion (physical removal from the table) is not performed to meet
   * regulatory data retention needs.
   *
   * @param connection
   * @param calendarSettingId Unique identifier of the calendar setting to
   *   delete (soft-delete by marking deleted_at).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":calendarSettingId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("calendarSettingId")
    calendarSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminCalendarSettingsCalendarSettingId(
        {
          organizationAdmin,
          calendarSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
