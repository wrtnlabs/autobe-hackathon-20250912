import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminAuditLogArchives } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAuditLogArchives";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminAuditLogArchivesAuditLogArchiveId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAuditLogArchivesAuditLogArchiveId";

import { IPageIHealthcarePlatformAuditLogArchive } from "../../../../api/structures/IPageIHealthcarePlatformAuditLogArchive";
import { IHealthcarePlatformAuditLogArchive } from "../../../../api/structures/IHealthcarePlatformAuditLogArchive";

@Controller("/healthcarePlatform/organizationAdmin/auditLogArchives")
export class HealthcareplatformOrganizationadminAuditlogarchivesController {
  /**
   * Searches and retrieves a filtered, paginated list of audit log archive
   * records for long-term compliance review.
   *
   * This operation is used by highly privileged system administrators and
   * organizational compliance officers to search, monitor, and review long-term
   * audit log archives. Each record represents a batch of historical audit data
   * that has been moved into regulated cold storage, with strict metadata
   * tracking required by HIPAA, SOC 2, and organizational policies.
   *
   * The operation allows for advanced filtering by archive type, organization
   * context, archive creation/internal date windows, and retention period
   * endpoints. Pagination and sorting support enable efficient review of large
   * volumes of long-term audit data archives. Only users with appropriate
   * platform or org-level compliance permissions can access this endpoint.
   *
   * Business validations in the request may include validation of the
   * organizationâ€™s compliance status and data retention policies, ensuring only
   * authorized access and valid organization/archive context. The resulting
   * data is critical for external audits, compliance inspections, and legal
   * proceedings.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination fields for listing audit log
   *   archive records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAuditLogArchive.IRequest,
  ): Promise<IPageIHealthcarePlatformAuditLogArchive> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAuditLogArchives({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieves complete details of a specific audit log archive record by its
   * ID.
   *
   * This operation provides detailed retrieval of all metadata and associated
   * context for a specific audit log archive batch, as referenced by
   * auditLogArchiveId in the healthcare_platform_audit_log_archives table.
   *
   * The returned data includes organization, archive type, storage URI,
   * retention and expiry fields, creation timestamp, and all business-required
   * tracking parameters. The endpoint is accessed by compliance teams/system
   * admins in scenarios such as preparing for audits, fulfilling regulatory
   * requests, or validating archive/retention windows.
   *
   * Access control is strictly enforced at the platform and organization scope
   * to prevent unauthorized disclosure. All access events should themselves be
   * audited as per compliance policy.
   *
   * @param connection
   * @param auditLogArchiveId Archive record ID (UUID) of the audit log archive
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogArchiveId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("auditLogArchiveId")
    auditLogArchiveId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAuditLogArchive> {
    try {
      return await gethealthcarePlatformOrganizationAdminAuditLogArchivesAuditLogArchiveId(
        {
          organizationAdmin,
          auditLogArchiveId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
