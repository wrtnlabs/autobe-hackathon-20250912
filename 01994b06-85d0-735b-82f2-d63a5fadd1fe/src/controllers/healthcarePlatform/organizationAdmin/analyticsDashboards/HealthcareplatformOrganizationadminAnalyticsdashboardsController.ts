import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminAnalyticsDashboards } from "../../../../providers/posthealthcarePlatformOrganizationAdminAnalyticsDashboards";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminAnalyticsDashboards } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAnalyticsDashboards";
import { gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId";
import { puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId } from "../../../../providers/puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId";
import { deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId";

import { IHealthcarePlatformAnalyticsDashboard } from "../../../../api/structures/IHealthcarePlatformAnalyticsDashboard";
import { IPageIHealthcarePlatformAnalyticsDashboard } from "../../../../api/structures/IPageIHealthcarePlatformAnalyticsDashboard";

@Controller("/healthcarePlatform/organizationAdmin/analyticsDashboards")
export class HealthcareplatformOrganizationadminAnalyticsdashboardsController {
  /**
   * Create a new analytics dashboard definition.
   *
   * Creates a new analytics dashboard, accepting details from the request body
   * including title, layout/configuration JSON, owning user, organizational and
   * department context, visibility (public/private), and description. The
   * healthcare_platform_analytics_dashboards schema enforces unique constraints
   * per organization and user for active dashboards and validates configuration
   * structure.
   *
   * The operation ensures only authorized roles (systemAdmin,
   * organizationAdmin) may create dashboards, enforcing relevant constraints
   * and business rules for sharing and access control. On success, the endpoint
   * returns the complete analytics dashboard object as stored, which can be
   * used for immediate rendering, editing, or access management. If duplicate
   * constraints are violated or data is invalid, proper error codes and
   * validation messages are returned.
   *
   * Typical workflows supported include the onboarding of new analytics
   * products, automation of dashboards by admin scripts, and business
   * intelligence staff self-service provisioning.
   *
   * @param connection
   * @param body New analytics dashboard details and configuration to create
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.ICreate,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await posthealthcarePlatformOrganizationAdminAnalyticsDashboards({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve analytics dashboards with advanced filtering and
   * pagination.
   *
   * This operation allows analytics users, administrators, and business
   * intelligence staff to search for analytics dashboards using a variety of
   * filters and query parameters. The system supports filtering by dashboard
   * owner, organization, department, visibility (public/private), and search by
   * title or description. Pagination and sorting options allow efficient
   * browsing of large sets of dashboards, accommodating scenarios where
   * organizations, departments, or users maintain multiple dashboard
   * variations.
   *
   * The healthcare_platform_analytics_dashboards schema serves as the backing
   * store for these dashboards, tying each to an owner, organization, and
   * optionally a department. Search operations are constrained by user
   * authorization: users may view only dashboards to which they have access (by
   * ownership, organization, public visibility, or department scope). Complex
   * queries and sorting allow integration with analytics administration,
   * dashboard management UIs, and automation for compliance or best practices.
   *
   * The returned data structure is a paginated collection of dashboard summary
   * objects, as defined in the Prisma schema, optimized for quick list
   * rendering and actionable navigation.
   *
   * @param connection
   * @param body Filtering, search criteria, and pagination parameters for
   *   finding dashboards
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.IRequest,
  ): Promise<IPageIHealthcarePlatformAnalyticsDashboard.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAnalyticsDashboards({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific analytics dashboard by its identifier.
   *
   * Fetches the full record of an analytics dashboard specified by the
   * dashboardId path parameter. The healthcare_platform_analytics_dashboards
   * schema holds all metadata and configuration necessary to render dashboards
   * for end users, including dashboard title, description, configuration JSON,
   * owner, visibility, and linkage to organization or department contexts.
   *
   * This endpoint is commonly used in analytics and reporting applications, as
   * well as in administrative workflows managing dashboard access,
   * customization, and sharing. It is crucial for supporting real-time
   * dashboard rendering, editing, copying, and compliance review. Authorization
   * checks restrict access so users may only see dashboards they own or are
   * allowed to view by organizational or department-level policies.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dashboardId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId(
        {
          organizationAdmin,
          dashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing analytics dashboard's configuration or content
   * (healthcare_platform_analytics_dashboards table).
   *
   * This operation enables authorized users to update the configuration,
   * contents, or metadata of a specific analytics dashboard already created in
   * the system. The target dashboard is referenced by its unique dashboardId,
   * which must exist in the healthcare_platform_analytics_dashboards table.
   * Users can update fields such as dashboard title, description, department
   * association, visibility (public/private), and the JSON widget/layout
   * configuration. Role-based access ensures only the dashboard owner or
   * permitted admins can perform updates.
   *
   * All update attempts are subject to validation for field correctness,
   * concurrency control (optimistic locking as required), and audit logging for
   * traceability. Any immutable, system-controlled, or deleted dashboards are
   * excluded from modification. Error scenarios include invalid dashboard ID,
   * update attempts on non-owned or role-ineligible dashboards, and business
   * validation failures for field values or configuration content.
   *
   * All dashboard update actions are logged for complete compliance
   * traceability and review by audit or organization admin roles.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard being updated.
   * @param body Updated properties for the target analytics dashboard.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":dashboardId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformAnalyticsDashboard.IUpdate,
  ): Promise<IHealthcarePlatformAnalyticsDashboard> {
    try {
      return await puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId(
        {
          organizationAdmin,
          dashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an analytics dashboard (soft delete via deleted_at;
   * healthcare_platform_analytics_dashboards table).
   *
   * When called, this operation soft-deletes an analytics dashboard identified
   * by dashboardId from the healthcare_platform_analytics_dashboards table,
   * rendering it inaccessible in normal workflows but retaining the record for
   * audit, compliance, and possible future restoration. Only users with
   * sufficient privileges (dashboard owner, organization admin, or department
   * head) can delete dashboards.
   *
   * Deletion requests are validated for dashboard existence, user
   * authorization, and that the dashboard is not already deleted or
   * system-locked. The deleted_at field is set to the current timestamp.
   * Attempts to delete non-existent or unowned dashboards result in error
   * responses. This operation is strictly tracked in system audit logs for
   * regulatory and accountability requirements.
   *
   * Dashboards flagged as deleted may be retained per organization policy for a
   * defined retention window. Recovery or permanent deletion processes are
   * managed separately.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard to be soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":dashboardId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardId(
        {
          organizationAdmin,
          dashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
