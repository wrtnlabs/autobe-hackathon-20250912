import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences } from "../../../../../providers/posthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences } from "../../../../../providers/patchhealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences";
import { gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId } from "../../../../../providers/gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId";
import { puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId } from "../../../../../providers/puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId";
import { deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId } from "../../../../../providers/deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId";

import { IHealthcarePlatformDashboardPreference } from "../../../../../api/structures/IHealthcarePlatformDashboardPreference";
import { IPageIHealthcarePlatformDashboardPreference } from "../../../../../api/structures/IPageIHealthcarePlatformDashboardPreference";

@Controller(
  "/healthcarePlatform/organizationAdmin/analyticsDashboards/:dashboardId/preferences",
)
export class HealthcareplatformOrganizationadminAnalyticsdashboardsPreferencesController {
  /**
   * Create a new analytics dashboard preferences record
   * (IHealthcarePlatformDashboardPreference) for a specific dashboard.
   *
   * Creates a new preference record for dashboard customization, storing
   * user-specific settings such as theme, layout, filters, widget
   * configuration, and last-view state for the given dashboardId parameter. The
   * operation writes to the healthcare_platform_dashboard_preferences table,
   * tying the new record to the requesting user and the dashboard specified by
   * the path parameter. Authorization is required to ensure the user owns or
   * has been granted edit access to the dashboard. The request body must follow
   * the IHealthcarePlatformDashboardPreference.ICreate schema, including the
   * necessary configuration parameters for preferences creation. On success,
   * the operation returns the newly created
   * IHealthcarePlatformDashboardPreference object, reflecting all
   * user-specified settings and the dashboard association. Error handling
   * includes validation for dashboard existence, permission checks, and
   * duplicate profile handling where a preference already exists for the
   * user/dashboard combination.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the user preferences are being created.
   * @param body User's dashboard preference configuration data for creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDashboardPreference.ICreate,
  ): Promise<IHealthcarePlatformDashboardPreference> {
    try {
      return await posthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences(
        {
          organizationAdmin,
          dashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate dashboard preferences for a specific analytics
   * dashboard (healthcare_platform_dashboard_preferences table).
   *
   * This operation fetches a paginated, possibly filtered list of user
   * preference records associated with a specific analytics dashboard,
   * referenced by dashboardId. It reads from the
   * healthcare_platform_dashboard_preferences table and returns a list of
   * matching preference objects, supporting advanced search, sorting, and
   * pagination through the request body.
   *
   * Security is enforced such that only the dashboard owner, admins, or users
   * with proper assignment can access preference data for the dashboard. Input
   * request parameters allow filtering by userId, search keywords, or custom
   * metadata contained in the preferences. The response pages and sorts results
   * based on standard fields like last_viewed_at, created_at, or updated_at.
   *
   * All access is logged for audit purposes. Attempts to fetch preferences for
   * non-existent or inaccessible dashboards return business validation errors.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard whose preferences are
   *   being queried.
   * @param body Filter, search, and pagination parameters for dashboard
   *   preference retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDashboardPreference.IRequest,
  ): Promise<IPageIHealthcarePlatformDashboardPreference> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferences(
        {
          organizationAdmin,
          dashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific dashboard preference object by dashboardId and
   * preferenceId (healthcare_platform_dashboard_preferences table).
   *
   * Provides detailed information about a single userâ€™s dashboard preference
   * settings, identified by preferenceId and associated with a specific
   * dashboardId. It queries healthcare_platform_dashboard_preferences, ensuring
   * the record exists, that the requester is authorized (dashboard owner,
   * assigned user, or admin), and returns the full preference object.
   *
   * Error conditions include missing or mismatched dashboard and preference
   * IDs, unauthorized access, or if the preference has been deleted. Data
   * returned supports user experience personalization, auditing, and preference
   * management requirements.
   *
   * The operation is audited; all retrievals are tracked for compliance and
   * outlier monitoring. Related APIs include preference search/list (PATCH
   * /analyticsDashboards/{dashboardId}/preferences) and update operations.
   *
   * @param connection
   * @param dashboardId Unique identifier of the dashboard to which the
   *   preference belongs.
   * @param preferenceId Unique identifier of the dashboard preference being
   *   retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":preferenceId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDashboardPreference> {
    try {
      return await gethealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId(
        {
          organizationAdmin,
          dashboardId,
          preferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update analytics dashboard preferences
   * (IHealthcarePlatformDashboardPreference) for a specific dashboard and
   * preference.
   *
   * Updates an existing preference record for dashboard customization, allowing
   * users to change saved settings like theme, dashboard layout, widget
   * configuration, and personal filter states for the identified dashboard and
   * preferenceId. The operation mandates authorization to ensure that only the
   * preference owner or users with matching permissions can update the
   * settings. The request body follows the
   * IHealthcarePlatformDashboardPreference.IUpdate schema, specifying the exact
   * configuration updates desired. The operation writes to the
   * healthcare_platform_dashboard_preferences table, ensuring audit logs are
   * maintained for all changes as per compliance requirements. On success, it
   * returns the updated IHealthcarePlatformDashboardPreference object,
   * reflecting the new state. Validation handles dashboard and preference
   * existence, authorization checks, and ensures no other preference is
   * overwritten by mistake.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the user preference is being updated.
   * @param preferenceId The unique identifier for the user dashboard preference
   *   record to update.
   * @param body Dashboard preferences configuration changes to update (partial
   *   or full).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":preferenceId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDashboardPreference.IUpdate,
  ): Promise<IHealthcarePlatformDashboardPreference> {
    try {
      return await puthealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId(
        {
          organizationAdmin,
          dashboardId,
          preferenceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (soft-delete) dashboard preferences
   * (IHealthcarePlatformDashboardPreference) for a given dashboard and
   * preference.
   *
   * Permanently disables a user or organization's dashboard preference settings
   * by marking the specified preference record as deleted via the deleted_at
   * column in the healthcare_platform_dashboard_preferences table (soft
   * delete). This disables all customizations for the specified dashboard until
   * a new preference is created. Authorization is required to ensure only the
   * owner or designated admin can erase the preference record. Successful
   * response returns no content. Validation includes existence checks for both
   * dashboard and preferenceId, as well as proper permission enforcement. If
   * preference is already deleted, the operation is idempotent and returns
   * success.
   *
   * @param connection
   * @param dashboardId The unique identifier of the analytics dashboard for
   *   which the preference is erased.
   * @param preferenceId The unique identifier for the user dashboard preference
   *   record to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":preferenceId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("dashboardId")
    dashboardId: string & tags.Format<"uuid">,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminAnalyticsDashboardsDashboardIdPreferencesPreferenceId(
        {
          organizationAdmin,
          dashboardId,
          preferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
