import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminAccessLogs } from "../../../../providers/patchhealthcarePlatformOrganizationAdminAccessLogs";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminAccessLogsAccessLogId } from "../../../../providers/gethealthcarePlatformOrganizationAdminAccessLogsAccessLogId";

import { IPageIHealthcarePlatformAccessLog } from "../../../../api/structures/IPageIHealthcarePlatformAccessLog";
import { IHealthcarePlatformAccessLog } from "../../../../api/structures/IHealthcarePlatformAccessLog";

@Controller("/healthcarePlatform/organizationAdmin/accessLogs")
export class HealthcareplatformOrganizationadminAccesslogsController {
  /**
   * Search and retrieve a paginated, filterable list of access logs for
   * compliance and access reporting.
   *
   * Search and retrieve access logs, enabling compliance, administrative, and
   * audit staff to track all read/view access events on sensitive system
   * resources such as EHR, patient records, and business-critical
   * configurations. This operation supports advanced query parameters for actor
   * (user), organization, resource type, resource ID, purpose, IP, and access
   * date range, with the ability to paginate and sort results by any indexed
   * field.
   *
   * Security and privacy are enforced by restricting data returned based on the
   * caller's authorization roles and organization boundaries. Sensitive fields,
   * such as access justification, may be masked for non-privileged users. This
   * operation relies on the healthcare_platform_access_logs table, supporting
   * investigation, breach review, and regulatory reporting. Full audit trails
   * of access attempts, including user, resource, purpose, and network origin,
   * are available for eligible roles. Edge-case handling includes soft-deletion
   * filtering and robust query validation.
   *
   * @param connection
   * @param body Filter and pagination criteria for searching access logs,
   *   supporting actor, organization, resource type, access purpose, date
   *   range, and sorting options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformAccessLog.IRequest,
  ): Promise<IPageIHealthcarePlatformAccessLog.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminAccessLogs({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific access log entry by accessLogId for audit and
   * investigative review.
   *
   * Retrieve detailed information for a specific access log entry by its
   * accessLogId. The record contains the actor/user, organization, resource
   * type, resource ID, access purpose, IP address, and timestamp. Only users
   * with systemAdmin or organizationAdmin roles may access full detail, with
   * enforcement of tenant boundaries to ensure that cross-org access is
   * prevented.
   *
   * This operation is intended for investigative workflows when list or search
   * queries indicate suspicious or critical accesses. It allows drill-down for
   * user activity analysis, breach investigations, or verification of access
   * appropriateness. Robust error handling returns clear responses on invalid
   * accessLogId, access denial, or records not found. Used together with access
   * log search endpoints and incident response operations.
   *
   * @param connection
   * @param accessLogId Unique identifier of the access log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":accessLogId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("accessLogId")
    accessLogId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformAccessLog> {
    try {
      return await gethealthcarePlatformOrganizationAdminAccessLogsAccessLogId({
        organizationAdmin,
        accessLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
