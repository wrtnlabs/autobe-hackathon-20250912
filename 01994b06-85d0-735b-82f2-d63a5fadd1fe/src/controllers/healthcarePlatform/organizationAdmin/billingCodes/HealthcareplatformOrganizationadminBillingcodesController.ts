import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBillingCodes } from "../../../../providers/posthealthcarePlatformOrganizationAdminBillingCodes";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBillingCodes } from "../../../../providers/patchhealthcarePlatformOrganizationAdminBillingCodes";
import { gethealthcarePlatformOrganizationAdminBillingCodesBillingCodeId } from "../../../../providers/gethealthcarePlatformOrganizationAdminBillingCodesBillingCodeId";
import { puthealthcarePlatformOrganizationAdminBillingCodesBillingCodeId } from "../../../../providers/puthealthcarePlatformOrganizationAdminBillingCodesBillingCodeId";
import { deletehealthcarePlatformOrganizationAdminBillingCodesBillingCodeId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminBillingCodesBillingCodeId";

import { IHealthcarePlatformBillingCode } from "../../../../api/structures/IHealthcarePlatformBillingCode";
import { IPageIHealthcarePlatformBillingCode } from "../../../../api/structures/IPageIHealthcarePlatformBillingCode";

@Controller("/healthcarePlatform/organizationAdmin/billingCodes")
export class HealthcareplatformOrganizationadminBillingcodesController {
  /**
   * Create a new billing code entry (healthcare_platform_billing_codes table).
   *
   * This API operation enables authorized billing and administrative users to
   * add a new billing code to the core reference table,
   * healthcare_platform_billing_codes. Typical use cases include adding new CPT
   * or ICD-10 codes, custom fee schedule items, or legacy codes needed for
   * regulatory reporting or historical reconciliation.
   *
   * The POST request body collects all mandatory and optional code fields (per
   * Prisma schema): code, code_system, name, description, active flag, and
   * reference metadata. Uniqueness of code/code_system is enforced according to
   * schema constraints. Upon success, the new code record is returned in full,
   * accessible for subsequent use in invoice items or claims.
   *
   * This operation is secured to organizationAdmin or similarly privileged
   * roles. Validation logic ensures correct format for code, code system, and
   * all string fields, and may block duplicate entries or codes marked
   * inactive. Creation errors may include violation of uniqueness, missing
   * required values, or business logic mismatches.
   *
   * This endpoint is essential for maintaining the organization's
   * billing/charge master and code mapping catalog, in compliance with
   * financial controls and regulatory reporting policies.
   *
   * @param connection
   * @param body Properties required to create a new billing code (code,
   *   code_system, name, etc.) as defined in the Prisma schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingCode.ICreate,
  ): Promise<IHealthcarePlatformBillingCode> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingCodes({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list billing codes with filter, sort, and pagination
   * (healthcare_platform_billing_codes table).
   *
   * This API operation provides a paginated, filterable search of all billing
   * codes available in the healthcare_platform_billing_codes table. Results
   * include all required attributes for each code such as code, code_system,
   * name, description, and active status, supporting both clinical and
   * financial workflows.
   *
   * Intended for use by organization administrators, billing managers, or
   * clinical informaticists who need to reference, select, or maintain valid
   * code lists for invoicing, claims, and external reporting. The response type
   * delivers summary detail for each code and includes metadata for UI
   * filtering, pagination, and search-as-you-type functions.
   *
   * Security should ensure only authorized administrative or clinical staff
   * have access to the full code library, if required by organization policy.
   * Business rules support filtering by code system (CPT, ICD-10, etc), code
   * name or partial match, active/inactive status, and custom sort orders.
   * Unusual queries or bulk extracting large code sets for regulatory scrutiny
   * are rate-limited and logged under audit policies.
   *
   * Error conditions include malformed filter syntax, invalid pagination
   * parameters, or unrecognized code systems. The business implementation
   * references the description fields from Prisma schema to ensure field and
   * relationship accuracy.
   *
   * @param connection
   * @param body Search and pagination parameters for billing code lookup
   *   (filter, sort, page, pageSize, code_system, active, etc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformBillingCode.IRequest,
  ): Promise<IPageIHealthcarePlatformBillingCode.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBillingCodes({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific billing code
   * (healthcare_platform_billing_codes table).
   *
   * This API operation retrieves all available details for a single billing
   * code, identified by billingCodeId, from the
   * healthcare_platform_billing_codes table. It is used by billing admins,
   * organization administrators, or clinical coders to review characteristics,
   * definition, code system origin (CPT, ICD-10, etc), description, status, and
   * usage policies as configured for the organization.
   *
   * Security and audit policies enforce that only authorized users can access
   * code details, especially for internal or legacy custom codes. The operation
   * supports drill-down from code lookup UIs or coding worklists, and is
   * essential for reviewing code eligibility before use in invoice line items,
   * claims, or reporting.
   *
   * Error responses occur if the code is not found, is archived, or the user
   * lacks sufficient privileges. Related operations include code search (PATCH
   * /billingCodes) and code creation or edit (POST/PUT). All fields in the
   * response strictly match those documented in the Prisma schema.
   *
   * @param connection
   * @param billingCodeId Unique identifier for the target billing code (UUID
   *   format)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingCodeId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingCodeId")
    billingCodeId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingCode> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingCodesBillingCodeId(
        {
          organizationAdmin,
          billingCodeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a billing code's metadata in the healthcarePlatform billing system.
   *
   * Update the properties of a single billing code within the
   * healthcarePlatform system. By specifying the billingCodeId path parameter,
   * authorized administrators can change details such as the billing code's
   * name, code system, description, and active status.
   *
   * This operation enforces audit logging of all changes and restricts access
   * to users with appropriate privileges (e.g., systemAdmin,
   * organizationAdmin). All code modifications are tracked for compliance. Any
   * update must conform to schema requirements, including validation of unique
   * constraints on the code and code_system pair.
   *
   * Security controls include role-based access and full record of update
   * events for possible regulatory review. Related APIs include code creation,
   * listing, and metadata retrieval endpoints.
   *
   * @param connection
   * @param billingCodeId The unique identifier of the billing code to update.
   * @param body Updated properties and metadata for the billing code.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingCodeId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingCodeId")
    billingCodeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingCode.IUpdate,
  ): Promise<IHealthcarePlatformBillingCode> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingCodesBillingCodeId(
        {
          organizationAdmin,
          billingCodeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a billing code from the healthcarePlatform billing code catalog.
   *
   * Permanently delete a billing code from the healthcarePlatform's billing
   * codes catalog. This operation requires the billingCodeId path parameter and
   * is restricted to system-level or organization-level administrative roles.
   *
   * All deletions are audit-logged for compliance and traceability. Once
   * deleted, the billing code cannot be referenced in new invoices or claims,
   * and related business logic will prevent its future use. Attempting to
   * delete an in-use or referenced code should result in a validation error
   * describing dependencies. Access is controlled strictly via authorization
   * roles, and all delete actions are permanently recorded.
   *
   * @param connection
   * @param billingCodeId The unique identifier of the billing code to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingCodeId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingCodeId")
    billingCodeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingCodesBillingCodeId(
        {
          organizationAdmin,
          billingCodeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
