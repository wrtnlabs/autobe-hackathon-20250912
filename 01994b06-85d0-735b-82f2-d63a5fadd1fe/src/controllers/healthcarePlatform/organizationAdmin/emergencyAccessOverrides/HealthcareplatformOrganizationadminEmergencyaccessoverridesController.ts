import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminEmergencyAccessOverrides } from "../../../../providers/patchhealthcarePlatformOrganizationAdminEmergencyAccessOverrides";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminEmergencyAccessOverridesEmergencyAccessOverrideId } from "../../../../providers/gethealthcarePlatformOrganizationAdminEmergencyAccessOverridesEmergencyAccessOverrideId";

import { IPageIHealthcarePlatformEmergencyAccessOverride } from "../../../../api/structures/IPageIHealthcarePlatformEmergencyAccessOverride";
import { IHealthcarePlatformEmergencyAccessOverride } from "../../../../api/structures/IHealthcarePlatformEmergencyAccessOverride";

@Controller("/healthcarePlatform/organizationAdmin/emergencyAccessOverrides")
export class HealthcareplatformOrganizationadminEmergencyaccessoverridesController {
  /**
   * Searches and retrieves a filtered, paginated list of emergency access
   * override records for compliance and audit review.
   *
   * This operation is used for compliance reviews, regulatory audits, and
   * internal investigations to track all instances of emergency access override
   * events, commonly known as 'break-the-glass' scenarios, across the
   * healthcarePlatform system.
   *
   * Each record in the healthcare_platform_emergency_access_overrides table
   * logs the user, organization, access scope, justification, window of
   * override, and post-event review status. Use this API to query by multiple
   * filters (organization, user ID, date range, review status, override scope),
   * supporting advanced search requirements. Permission to use this endpoint is
   * typically reserved for systemAdmin, organizationAdmin, and compliance
   * auditor roles.
   *
   * The operation supports full pagination and advanced sorting (e.g.,
   * timestamp, urgency, review status), returning rich details necessary for
   * investigation and regulatory reporting. Requesting users must have
   * privileged audit permissions. The result set is strictly filtered to the
   * user's granted organizations/departments.
   *
   * @param connection
   * @param body Search filters, pagination, and sorting options for querying
   *   emergency access override logs, including organization, user, scope,
   *   status, date range, and review fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformEmergencyAccessOverride.IRequest,
  ): Promise<IPageIHealthcarePlatformEmergencyAccessOverride> {
    try {
      return await patchhealthcarePlatformOrganizationAdminEmergencyAccessOverrides(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieves full details for a specific emergency access override audit
   * record by its ID.
   *
   * This operation allows compliance officers, organization admins, and system
   * administrators to view the full, detailed information of a single emergency
   * access override record, identified by emergencyAccessOverrideId.
   *
   * The record contains all fields mandated by regulatory and business rules:
   * user identity, role, justification, accessed data scope, override period,
   * review/revocation metadata, and cross-references to related audit events.
   * It is used in post-incident workflow to verify proper compliance,
   * procedural justification, and to document the responsible reviewer's
   * actions.
   *
   * The returned data supports legal review, security investigation, and
   * detailed compliance documentation, consistent with the
   * healthcare_platform_emergency_access_overrides schema, including all
   * timestamps, reason fields, and outcome metrics. Query is strictly
   * authorized to privileged auditing roles, with access scope enforcement
   * implemented in backend logic.
   *
   * @param connection
   * @param emergencyAccessOverrideId Unique identifier (UUID) of the emergency
   *   access override record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":emergencyAccessOverrideId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("emergencyAccessOverrideId")
    emergencyAccessOverrideId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformEmergencyAccessOverride> {
    try {
      return await gethealthcarePlatformOrganizationAdminEmergencyAccessOverridesEmergencyAccessOverrideId(
        {
          organizationAdmin,
          emergencyAccessOverrideId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
