import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminOutcomeMetrics } from "../../../../providers/posthealthcarePlatformOrganizationAdminOutcomeMetrics";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminOutcomeMetrics } from "../../../../providers/patchhealthcarePlatformOrganizationAdminOutcomeMetrics";
import { gethealthcarePlatformOrganizationAdminOutcomeMetricsMetricId } from "../../../../providers/gethealthcarePlatformOrganizationAdminOutcomeMetricsMetricId";
import { puthealthcarePlatformOrganizationAdminOutcomeMetricsMetricId } from "../../../../providers/puthealthcarePlatformOrganizationAdminOutcomeMetricsMetricId";
import { deletehealthcarePlatformOrganizationAdminOutcomeMetricsMetricId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminOutcomeMetricsMetricId";

import { IHealthcarePlatformOutcomeMetric } from "../../../../api/structures/IHealthcarePlatformOutcomeMetric";
import { IPageIHealthcarePlatformOutcomeMetric } from "../../../../api/structures/IPageIHealthcarePlatformOutcomeMetric";

@Controller("/healthcarePlatform/organizationAdmin/outcomeMetrics")
export class HealthcareplatformOrganizationadminOutcomemetricsController {
  /**
   * Create a new outcome metric timeseries record in
   * healthcare_platform_outcome_metrics for analytics.
   *
   * Create a new outcome metric record under the
   * healthcare_platform_outcome_metrics table, capturing key performance
   * indicators or quality metrics for organization or department analytics. The
   * submitted data must include metric names, cohort definitions, observed
   * values, timestamps, and association to organizational or departmental
   * scope. All submitted records are validated for duplication, format
   * correctness, and permission scope before saving.
   *
   * On success, the operation returns the detailed created outcome metric for
   * immediate analytics integration. Errors are returned for duplicate record
   * attempts (metric name and observedAt not unique within org/department),
   * malformed cohort definitions, or permission violations. All creations are
   * logged for compliance and quality improvement traceability.
   *
   * @param connection
   * @param body Information for creating a new outcome metric record
   *   (metricName, cohort, value, timestamp, and context).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOutcomeMetric.ICreate,
  ): Promise<IHealthcarePlatformOutcomeMetric> {
    try {
      return await posthealthcarePlatformOrganizationAdminOutcomeMetrics({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of outcome metrics for
   * analytics using healthcare_platform_outcome_metrics.
   *
   * Retrieve a paginated and filtered list of outcome metrics defined in the
   * healthcare_platform_outcome_metrics table. This endpoint is foundational
   * for analytics dashboards, organizational performance reviews, and
   * compliance trend analysis. The incoming request supports complex filters,
   * such as organizationId, departmentId, metricName (supports partial/text
   * search), observed_at date range, value threshold filtering, and
   * cohort-based inclusion/exclusion (using cohortDefinition fields). Sorting
   * can be performed on metricName, observed_at, and observedValue.
   *
   * Role-based data access is strictly enforced according to user role,
   * limiting the scope of returned metrics as appropriate (e.g., departmentHead
   * sees only department metrics; organizationAdmin sees all their
   * organization's metrics; systemAdmin sees all). All read access is logged
   * for audit.
   *
   * Pagination and performance must accommodate trends analysis over long time
   * windows. Error handling should address invalid filter criteria, permission
   * violations, or inconsistent search parameters. This operation directly
   * supports quality improvement, regulatory reporting, and benchmarking.
   *
   * @param connection
   * @param body Search/filter and pagination parameters for finding outcome
   *   metrics.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformOutcomeMetric.IRequest,
  ): Promise<IPageIHealthcarePlatformOutcomeMetric.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminOutcomeMetrics({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single outcome metric record and its metadata by metricId from
   * healthcare_platform_outcome_metrics.
   *
   * Retrieve the full detail of a specific outcome metric using metricId. This
   * includes metric name, observed value, cohort definition, observed_at
   * timestamp, organizational/department scope, and calculation metadata. The
   * response enables in-depth review, audit, and drill-down for analytics
   * dashboards or compliance workflows.
   *
   * Role-based authorization is required: systemAdmin can access any metric;
   * organizationAdmin is limited to their organization; departmentHead is
   * limited to their department's metrics. If the metricId is invalid, deleted,
   * or the user lacks permissions, an error response is returned for clarity
   * and auditing. This operation is essential for interactive analytics,
   * organizational benchmarking, and regulatory quality tracking.
   *
   * Where applicable, links to related KPI snapshots or benchmark records can
   * be referenced for context.
   *
   * @param connection
   * @param metricId Unique identifier of the outcome metric to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":metricId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("metricId")
    metricId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformOutcomeMetric> {
    try {
      return await gethealthcarePlatformOrganizationAdminOutcomeMetricsMetricId(
        {
          organizationAdmin,
          metricId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific healthcare outcome metric record
   * (IHealthcarePlatformOutcomeMetric).
   *
   * Update a single outcome metric time-series record to reflect corrected or
   * re-benchmarked healthcare analytics data. Outcome metric records, as
   * defined in the Prisma schema (healthcare_platform_outcome_metrics), track
   * organizational or departmental quality and performance measures (e.g.,
   * readmission_rate, infection_rate) along with observed values, timepoints,
   * and cohort logic. This endpoint allows authorized users to change any
   * updatable property such as the metric's name, description, observed value,
   * observed_at timepoint, cohort definition, or departmental/organizational
   * assignment.
   *
   * Security checks mandate that the requesting user has analytics dashboard
   * management, quality management, or admin privileges over the owning
   * organization or department, as per role and org_id/department_id
   * relationship enforcement. All updates are captured with timestamps, and
   * prior values may be retained through revision logic or external version
   * tracking for thorough auditability. Business logic ensures updating a
   * metric cannot violate unique constraints (e.g.,
   * org_id+metric_name+observed_at) or retroactively invalidate benchmark
   * comparisons.
   *
   * This update flow is critical for maintaining regulatory, outcome-based, and
   * quality improvement analytics, where precise and trusted reporting is
   * required. Integrations with dashboards and KPI trend reporting rely on the
   * accuracy of this outcome metric master table. API consumers should be aware
   * of concurrent edits: last-write-wins is enforced at the API layer, but
   * clients are encouraged to implement basic collision checks if working with
   * user-facing editing workflows.
   *
   * @param connection
   * @param metricId The unique identifier (UUID) for the outcome metric record
   *   to update.
   * @param body The updated information for the outcome metric, following the
   *   IHealthcarePlatformOutcomeMetric.IUpdate DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":metricId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("metricId")
    metricId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformOutcomeMetric.IUpdate,
  ): Promise<IHealthcarePlatformOutcomeMetric> {
    try {
      return await puthealthcarePlatformOrganizationAdminOutcomeMetricsMetricId(
        {
          organizationAdmin,
          metricId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a healthcare outcome metric record by metricId (hard
   * delete).
   *
   * Permanently erase an outcome metric record from the healthcare analytics
   * metrics table using its unique metricId (UUID). The
   * healthcare_platform_outcome_metrics schema does not include a soft-delete
   * field; thus, the removal is irreversible and physically deletes the row.
   * Before performing this action, implementers MUST ensure that the metric is
   * not referenced by time-series trendlines, active dashboards, or open
   * regulatory/compliance reporting cycles—irreversible deletion may leave gaps
   * in analytics continuity or audit history.
   *
   * Authorized users must possess full organization admin or system admin
   * privileges to prevent accidental or malicious loss of metrics. A successful
   * call ensures compliance-grade logging of the deletion event, and downstream
   * consumers (dashboards, reports) should be notified or given time to refresh
   * caches to prevent data mismatch. Errors are generated if the metricId does
   * not exist.
   *
   * This operation should be used only after thorough review and, preferably,
   * with a business workflow layer prompting for confirmation and rationale
   * documentation.
   *
   * @param connection
   * @param metricId The unique identifier (UUID) of the outcome metric record
   *   to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":metricId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("metricId")
    metricId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminOutcomeMetricsMetricId(
        {
          organizationAdmin,
          metricId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
