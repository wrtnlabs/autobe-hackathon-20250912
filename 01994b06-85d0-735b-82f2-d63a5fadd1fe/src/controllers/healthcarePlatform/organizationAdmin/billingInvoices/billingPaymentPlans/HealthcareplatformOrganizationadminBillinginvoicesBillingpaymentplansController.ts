import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans } from "../../../../../providers/posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans";
import { OrganizationadminAuth } from "../../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans } from "../../../../../providers/patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans";
import { gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId } from "../../../../../providers/gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId";
import { puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId } from "../../../../../providers/puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId";
import { deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId } from "../../../../../providers/deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId";

import { IHealthcarePlatformBillingPaymentPlan } from "../../../../../api/structures/IHealthcarePlatformBillingPaymentPlan";
import { IPageIHealthcarePlatformBillingPaymentPlan } from "../../../../../api/structures/IPageIHealthcarePlatformBillingPaymentPlan";

@Controller(
  "/healthcarePlatform/organizationAdmin/billingInvoices/:billingInvoiceId/billingPaymentPlans",
)
export class HealthcareplatformOrganizationadminBillinginvoicesBillingpaymentplansController {
  /**
   * Create a new payment plan tied to a specific billing invoice.
   *
   * Create and associate a new payment plan for a specific billing invoice.
   * Authorized users (organizationAdmin or billing staff) can specify terms
   * such as amount, schedule, and plan type (self-pay, insurance, deferred,
   * etc.). The operation validates inputs for permissible plan types and
   * business rules, ensures no conflicting or duplicate active payment plans
   * exist, and persists the new plan entry in
   * healthcare_platform_billing_payment_plans. Audit logging of the operation
   * captures user, terms, created plan, and relevant invoice linkage. If
   * validation fails (e.g., duplicate plan, invalid data, or insufficient
   * authorization), errors are returned and failed attempts are logged for
   * incident review.
   *
   * Related endpoints: PATCH to search/list payment plans, GET by paymentPlanId
   * to retrieve details. All creations trigger compliance audit trail on the
   * finance log table.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier for the target billing invoice to
   *   which the payment plan will be associated
   * @param body Complete payment plan creation data, including type, schedule,
   *   amount, and terms, for the designated billing invoice.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPaymentPlan.ICreate,
  ): Promise<IHealthcarePlatformBillingPaymentPlan> {
    try {
      return await posthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans(
        {
          organizationAdmin,
          billingInvoiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated list of payment plans for a billing invoice.
   *
   * Retrieve a filtered, paginated list of payment plans tied to a specific
   * billing invoice. This endpoint provides advanced search and pagination,
   * allowing billing staff to review all existing payment plans for an invoice,
   * including active, completed, or defaulted schedules. Filtering options may
   * include plan type, status, start/end dates, and outstanding amounts.
   * Security controls ensure only authorized billing or administrative users
   * (such as organizationAdmin roles) can access detailed financial records,
   * with all accesses recorded in the healthcare_platform_financial_audit_logs
   * for traceability and compliance.
   *
   * Related operations: use GET
   * /billingInvoices/{billingInvoiceId}/billingPaymentPlans/{billingPaymentPlanId}
   * to retrieve a single payment plan by identifier, or POST to create a new
   * plan for the invoice. All retrievals should respect data isolation and
   * role-based access as configured for the tenant/organization. Errors are
   * logged for attempted unauthorized access or invalid invoice references.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier for the target billing invoice
   * @param body Search and filter criteria for retrieving payment plans
   *   associated with a billing invoice, supporting pagination and sorting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPaymentPlan.IRequest,
  ): Promise<IPageIHealthcarePlatformBillingPaymentPlan.ISummary> {
    try {
      return await patchhealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlans(
        {
          organizationAdmin,
          billingInvoiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific payment plan for a billing invoice by ID.
   *
   * Retrieve detailed information for a single payment plan linked to a
   * specific billing invoice. This operation returns all fields for the payment
   * plan, such as terms, status, total amount, installment schedule, and
   * associated audit history. Access is limited to users with elevated billing
   * or admin rights (organizationAdmin role), and all retrievals trigger audit
   * log entries in healthcare_platform_financial_audit_logs. If the payment
   * plan does not exist for the given invoice, or access is denied, appropriate
   * error handling and compliance alerts are triggered.
   *
   * The payment plan is uniquely identified by its paymentPlanId within the
   * context of the billingInvoiceId. Related endpoints: use PATCH
   * /billingInvoices/{billingInvoiceId}/billingPaymentPlans for searching lists
   * or POST to create new payment plans. Data visibility is strictly enforced
   * by organization and record status.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier for the target billing invoice
   * @param billingPaymentPlanId Unique identifier for the payment plan
   *   associated with the billing invoice
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":billingPaymentPlanId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentPlanId")
    billingPaymentPlanId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformBillingPaymentPlan> {
    try {
      return await gethealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentPlanId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment plan associated with a billing invoice.
   *
   * Update the details of a payment plan linked to a specific billing invoice.
   * The update operation allows authorized users to modify allowable aspects of
   * the payment plan, such as terms, schedule, status, or description,
   * according to business constraints and financial compliance. Prior to
   * update, validation ensures the plan is in an updatable state (i.e., not
   * completed or defaulted), the changes do not conflict with other active
   * payments, and audit logging of the change is enforced. All modifications
   * are appended to the healthcare_platform_financial_audit_logs.
   *
   * If update fails due to invalid status, data, or permissions, the endpoint
   * returns errors and compliance incident logs. The paymentPlanId and
   * billingInvoiceId parameters uniquely identify the plan to update. For
   * creation, use POST to the same collection endpoint.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier for the billing invoice to which
   *   the payment plan belongs
   * @param billingPaymentPlanId Unique identifier for the specific payment plan
   *   to be updated
   * @param body Fields and updated values for the payment plan, as allowed by
   *   business and compliance rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":billingPaymentPlanId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentPlanId")
    billingPaymentPlanId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformBillingPaymentPlan.IUpdate,
  ): Promise<IHealthcarePlatformBillingPaymentPlan> {
    try {
      return await puthealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentPlanId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a billing payment plan from a billing invoice
   * (healthcare_platform_billing_payment_plans).
   *
   * Deletes a billing payment plan linked to a given billing invoice. This
   * endpoint is utilized when a financial agreement for payment installments or
   * scheduled settlements must be removed, such as when a patient switches to a
   * different payment method, or the invoice is paid in full. To prevent
   * compliance or audit issues, only plans that are not active or have not yet
   * had payments initiated may be deleted, and all actions are logged for
   * regulatory compliance.
   *
   * The endpoint checks the existence and relationship of both the
   * billingInvoiceId and billingPaymentPlanId provided. If successful, the
   * billing payment plan record is permanently removed from the database, with
   * financial audit logs updated accordingly.
   *
   * Authorization is restricted to finance roles, such as organizationAdmin or
   * higher, and the operation is logged for audit/compliance traceability.
   * Deleted payment plans cannot be restored except through backup restoration
   * or legal request.
   *
   * Errors include attempts to delete plans with active payments, nonexistent
   * records, or insufficient permissions.
   *
   * @param connection
   * @param billingInvoiceId Unique identifier of the billing invoice to which
   *   the payment plan belongs
   * @param billingPaymentPlanId Unique identifier of the billing payment plan
   *   to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":billingPaymentPlanId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("billingInvoiceId")
    billingInvoiceId: string & tags.Format<"uuid">,
    @TypedParam("billingPaymentPlanId")
    billingPaymentPlanId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminBillingInvoicesBillingInvoiceIdBillingPaymentPlansBillingPaymentPlanId(
        {
          organizationAdmin,
          billingInvoiceId,
          billingPaymentPlanId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
