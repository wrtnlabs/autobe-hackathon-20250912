import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posthealthcarePlatformOrganizationAdminDecisionSupportRules } from "../../../../providers/posthealthcarePlatformOrganizationAdminDecisionSupportRules";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { patchhealthcarePlatformOrganizationAdminDecisionSupportRules } from "../../../../providers/patchhealthcarePlatformOrganizationAdminDecisionSupportRules";
import { gethealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId } from "../../../../providers/gethealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId";
import { puthealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId } from "../../../../providers/puthealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId";
import { deletehealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId } from "../../../../providers/deletehealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId";

import { IHealthcarePlatformDecisionSupportRule } from "../../../../api/structures/IHealthcarePlatformDecisionSupportRule";
import { IPageIHealthcarePlatformDecisionSupportRule } from "../../../../api/structures/IPageIHealthcarePlatformDecisionSupportRule";

@Controller("/healthcarePlatform/organizationAdmin/decisionSupportRules")
export class HealthcareplatformOrganizationadminDecisionsupportrulesController {
  /**
   * Create a new clinical decision support rule (CDS) in the platform.
   *
   * Create a new clinical decision support (CDS) rule by submitting all
   * required configuration and business fields to the
   * 'healthcare_platform_decision_support_rules' table. Request requires valid
   * authentication and privileged roles such as systemAdmin or
   * organizationAdmin, with scope to authorized organizations.
   *
   * Request body includes organization linkage, rule_code, title, trigger
   * event, rule logic (expression_json), optional description, and enablement
   * status. All submitted data must meet platform and compliance validation
   * (unique code, acceptable rule syntax, organization binding). The response
   * returns the created and persisted rule including all metadata and
   * system-generated fields (timestamps, ID).
   *
   * Security ensures only properly scoped admins or configuration managers can
   * introduce new rules. Errors are returned on validation failures (e.g.,
   * duplicate codes, missing logic, syntax errors). This operation supports
   * internal organizational program growth, patient safety, and compliance
   * documentation needs.
   *
   * @param connection
   * @param body Complete definition required to create a new CDS rule,
   *   including logic, triggers, and scope.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDecisionSupportRule.ICreate,
  ): Promise<IHealthcarePlatformDecisionSupportRule> {
    try {
      return await posthealthcarePlatformOrganizationAdminDecisionSupportRules({
        organizationAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of clinical decision
   * support (CDS) rules in the healthcare platform.
   *
   * Retrieve a filtered and paginated list of clinical decision support rules
   * (CDS) from the 'healthcare_platform_decision_support_rules' table. This
   * endpoint allows privileged clinical administrators and analytics roles to
   * search, filter, and sort CDS rules relevant to their organization or
   * department context.
   *
   * Security requires valid authentication and role-based access. Only users
   * with appropriate administrative, analytics, or compliance permissions may
   * access the full rule catalog. Rule details are visible based on
   * organizational scoping and user assignment, preventing unauthorized
   * cross-tenant access.
   *
   * The API incorporates multi-field searching (title, trigger event, CDS rule
   * status), ordering, and supports queries against is_enabled status as well
   * as temporal filters (created_at/updated_at). It directly supports audit
   * reviews and policy adjustments per clinical best practices, enabling
   * organizations to maintain regulatory fidelity and optimize patient safety
   * programs.
   *
   * @param connection
   * @param body Filter, search, and pagination criteria for retrieving CDS
   *   rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformDecisionSupportRule.IRequest,
  ): Promise<IPageIHealthcarePlatformDecisionSupportRule> {
    try {
      return await patchhealthcarePlatformOrganizationAdminDecisionSupportRules(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch complete details for a specific CDS rule by rule ID in the platform.
   *
   * Retrieve all details for a specific clinical decision support rule from
   * 'healthcare_platform_decision_support_rules' by rule ID. This endpoint is
   * essential for administrative, analytics, or compliance roles to view rule
   * metadata, logic (expression_json), trigger event, lifecycle metadata,
   * enabled status, and audit history.
   *
   * Authorization checks ensure that only users with appropriate administrative
   * or analytic privileges and proper organization/department scoping can
   * access this rule detail. The rule ID must be a valid UUID; errors are
   * returned for invalid IDs or lack of permissions.
   *
   * Expected behaviors include full rule details in a compliance-ready
   * structure, error and not-found handling, and compatibility with audit and
   * workflow configuration tools. This is used in conjunction with the rule
   * search/list endpoint to permit full lifecycle management of CDS rule
   * entities in the production system.
   *
   * @param connection
   * @param ruleId Unique identifier (UUID) of the CDS rule to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ruleId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformDecisionSupportRule> {
    try {
      return await gethealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId(
        {
          organizationAdmin,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing clinical decision support rule (CDS) by rule ID.
   *
   * Update a clinical decision support rule in
   * 'healthcare_platform_decision_support_rules' by rule ID, modifying fields
   * such as title, trigger event, rule logic (expression_json), description,
   * activation status, or organizational linkage. Path parameter ruleId must be
   * a valid UUID and reference an existing rule; request body supplies new or
   * changed attributes.
   *
   * Operation is limited to users with administrative privileges and
   * organizational or system scope according to the RBAC matrix. Full
   * validation is enforced on all changes (e.g., business logic, code
   * uniqueness if modified, expression syntax/structure). The response returns
   * the complete, updated rule object including system metadata (updated_at).
   *
   * Behavior includes detailed error messages for not found, permission denied,
   * or validation failures. Audit logging is enforced for compliance and system
   * configuration lifecycle tracking. Typically used to maintain up-to-date
   * clinical policies and respond to advances in clinical practice or
   * compliance requirements.
   *
   * @param connection
   * @param ruleId Unique identifier (UUID) of the CDS rule to update.
   * @param body Fields required to update an existing CDS rule (any modifiable
   *   attribute).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ruleId")
  public async update(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformDecisionSupportRule.IUpdate,
  ): Promise<IHealthcarePlatformDecisionSupportRule> {
    try {
      return await puthealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId(
        {
          organizationAdmin,
          ruleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a clinical decision support rule by ruleId from the
   * healthcare_platform_decision_support_rules table.
   *
   * Delete a specific clinical decision support (CDS) rule from the system by
   * ruleId. This operation functions as a hard delete, permanently removing the
   * CDS rule from the healthcare_platform_decision_support_rules table. The
   * rule may represent business logic that triggers patient safety alerts
   * (e.g., drug interactions, lab notifications), and its removal should be
   * performed with extreme caution and proper authorization.
   *
   * Access to this endpoint must be restricted to system administrators or
   * organization administrators to ensure regulatory compliance and prevent
   * unintended service disruptions. When a rule is deleted, all future CDS
   * processing related to this rule will cease, and dashboards or analytics
   * referencing it may be affected. Downstream data, such as previously
   * generated clinical alerts, remains available for compliance audits.
   * Comprehensive audit logs are recorded for every deletion, preserving action
   * time, actor identity, justification, and affected rule details.
   *
   * Validation includes confirming existence of the specified ruleId, ensuring
   * the user has legitimate access, and capturing attempts to delete
   * non-existent or already-deleted rules. Any errors (invalid ID, permissions,
   * system failures) are reported with appropriate messages and audit notes.
   *
   * @param connection
   * @param ruleId Unique identifier (UUID) of the decision support rule to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ruleId")
  public async erase(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletehealthcarePlatformOrganizationAdminDecisionSupportRulesRuleId(
        {
          organizationAdmin,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
