import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformOrganizationAdminLabOrderTransactions } from "../../../../providers/patchhealthcarePlatformOrganizationAdminLabOrderTransactions";
import { OrganizationadminAuth } from "../../../../decorators/OrganizationadminAuth";
import { OrganizationadminPayload } from "../../../../decorators/payload/OrganizationadminPayload";
import { gethealthcarePlatformOrganizationAdminLabOrderTransactionsLabOrderTransactionId } from "../../../../providers/gethealthcarePlatformOrganizationAdminLabOrderTransactionsLabOrderTransactionId";

import { IPageIHealthcarePlatformLabOrderTransaction } from "../../../../api/structures/IPageIHealthcarePlatformLabOrderTransaction";
import { IHealthcarePlatformLabOrderTransaction } from "../../../../api/structures/IHealthcarePlatformLabOrderTransaction";

@Controller("/healthcarePlatform/organizationAdmin/labOrderTransactions")
export class HealthcareplatformOrganizationadminLabordertransactionsController {
  /**
   * Retrieve/search laboratory order transactions with advanced filters and
   * pagination (healthcare_platform_lab_order_transactions table).
   *
   * The endpoint supports complex search and reporting on all lab order
   * submission events within the system. Administrators and authorized staff
   * can filter by organization, lab integration, order status, time boundaries,
   * and more. Pagination and sorting are provided for large result sets. Only
   * administrators and authorized technical support users should access this
   * endpoint, as the data can include PHI, audit information, and delivery
   * telemetry important to laboratory workflows. The operation returns a
   * paginated result structure, and integrates with the system's broader
   * reporting and troubleshooting infrastructure. Validation ensures only
   * accessible and non-deleted records are returned, and filters are sanitized
   * for system security.
   *
   * @param connection
   * @param body Search and filter criteria for querying lab order transactions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedBody()
    body: IHealthcarePlatformLabOrderTransaction.IRequest,
  ): Promise<IPageIHealthcarePlatformLabOrderTransaction> {
    try {
      return await patchhealthcarePlatformOrganizationAdminLabOrderTransactions(
        {
          organizationAdmin,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific lab order transaction detail by labOrderTransactionId
   * (healthcare_platform_lab_order_transactions table).
   *
   * Retrieve a detailed laboratory order transaction record using the unique
   * labOrderTransactionId. This information is vital for verifying the status,
   * timestamps (requested, transmitted, acknowledged), error or status
   * messages, and reconciliation with upstream lab systems. The operation
   * references the healthcare_platform_lab_order_transactions Prisma schema,
   * which includes fields for organization, lab integration, and external
   * references.
   *
   * API consumers must possess appropriate roles (such as staff assigned to the
   * organization) due to the presence of sensitive audit and operational data.
   * Security controls should align with organizational RBAC policies and audit
   * requirements. Laboratories, compliance officers, and technical teams may
   * use this API for diagnostics and regulatory traceability.
   *
   * In case the transaction is not found or the provided identifier is invalid,
   * the API will return a standard not-found or validation error. Errors in
   * underlying integration (such as network or authentication errors with the
   * lab system) will surface through status and message fields, aiding in
   * troubleshooting. This endpoint works in conjunction with broader query
   * endpoints for lab order transaction search, reporting, and analytics.
   *
   * @param connection
   * @param labOrderTransactionId Lab order transaction record's unique
   *   identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":labOrderTransactionId")
  public async at(
    @OrganizationadminAuth()
    organizationAdmin: OrganizationadminPayload,
    @TypedParam("labOrderTransactionId")
    labOrderTransactionId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLabOrderTransaction> {
    try {
      return await gethealthcarePlatformOrganizationAdminLabOrderTransactionsLabOrderTransactionId(
        {
          organizationAdmin,
          labOrderTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
