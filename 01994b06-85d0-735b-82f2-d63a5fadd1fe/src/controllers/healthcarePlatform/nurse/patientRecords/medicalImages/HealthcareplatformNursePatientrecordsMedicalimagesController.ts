import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { gethealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId } from "../../../../../providers/gethealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId";
import { NurseAuth } from "../../../../../decorators/NurseAuth";
import { NursePayload } from "../../../../../decorators/payload/NursePayload";
import { puthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId } from "../../../../../providers/puthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId";
import { posthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImages } from "../../../../../providers/posthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImages";

import { IHealthcarePlatformMedicalImage } from "../../../../../api/structures/IHealthcarePlatformMedicalImage";

@Controller(
  "/healthcarePlatform/nurse/patientRecords/:patientRecordId/medicalImages",
)
export class HealthcareplatformNursePatientrecordsMedicalimagesController {
  /**
   * Retrieve a medical image's metadata and access link under a patient record
   * (healthcare_platform_medical_images table).
   *
   * Fetches the detailed metadata and access URI for a single medical image
   * related to the specified patient record. Medical images may include DICOM,
   * JPEG, or other clinical media files used for diagnosis and care
   * documentation. The response includes image type, upload history, metadata
   * (acquisition, modality), storage URI, and references to the uploading
   * technician and encounter. Audit trails are enforced for every read,
   * supporting regulatory investigation and privacy requirements.
   *
   * Access to medical images is governed by the user's role and may also
   * require patient consent verification. Retrieval is logged at the access
   * layer, noting requesting user, time, purpose, and governing
   * organization/department context. Images flagged as sensitive or under a
   * privacy lock are only delivered if policy is satisfied. This operation
   * never delivers image binaries directly, but instead provides a secure URI
   * for authorized viewing/download.
   *
   * If the specified medical image does not exist under the patient record, is
   * deleted, or access is denied by policy (e.g., consent revoked, under legal
   * hold), the system returns a policy-appropriate error (404 or 403) and logs
   * the attempt for compliance reporting.
   *
   * This operation is key for provider review, multidisciplinary care, external
   * consults, and patient portal access (subject to configuration and privacy).
   * It complements broader record operations (EHR, audit trail) as defined in
   * platform requirements.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the parent patient record
   *   (UUID).
   * @param medicalImageId Unique identifier of the target medical image (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":medicalImageId")
  public async at(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("medicalImageId")
    medicalImageId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformMedicalImage> {
    try {
      return await gethealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId(
        {
          nurse,
          patientRecordId,
          medicalImageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata or classification for a medical image under a patient
   * (healthcare_platform_medical_images table).
   *
   * Allows authorized users (technicians or healthcare staff) to revise
   * metadata on an already uploaded medical image, such as correcting image
   * type, modality, or annotating clinical context. This does not replace the
   * underlying media file, but updates references, metadata fields, or EHR
   * linkage for improved traceability and analytics.
   *
   * Strict validation checks are run to guarantee the parent record and image
   * exist, the user has role-based access, and the record/image are not under a
   * legal hold or compliance lock. All updates are recorded in the audit trail,
   * including before/after states and user rationale if required.
   *
   * Edits to image metadata may be restricted if the corresponding patient
   * record or image is soft-deleted, under privacy restriction, or in
   * compliance investigation. Failed or unauthorized attempts return a clear
   * error and are logged for regulatory monitoring. This API is intended for
   * technical or clinical roles; patient self-service metadata updates are not
   * supported unless future requirements expand this capability.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the parent patient record
   *   (UUID).
   * @param medicalImageId Unique identifier for the target medical image
   *   (UUID).
   * @param body Fields to update for the medical image. Does not update the
   *   file/URI itself, only metadata/classification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":medicalImageId")
  public async update(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("medicalImageId")
    medicalImageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformMedicalImage.IUpdate,
  ): Promise<IHealthcarePlatformMedicalImage> {
    try {
      return await puthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImagesMedicalImageId(
        {
          nurse,
          patientRecordId,
          medicalImageId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Upload a new medical image and associate it to the given patient record
   * (healthcare_platform_medical_images table).
   *
   * Creates a new medical image record under the specified patient record,
   * storing metadata (e.g., type, modality, acquisition details), a URI to the
   * uploaded image, and references to the uploading technician and parent EHR
   * encounter. Upon successful creation, the system triggers audit trail
   * entries, optionally notifies relevant care team members, and links the file
   * to the encounter for downstream clinical review.
   *
   * RBAC restricts this API to healthcare professionals (technician, nurse,
   * doctor) unless patient self-uploads are explicitly allowed by
   * organizational policy. Strict validation ensures the parent patient record
   * exists and is accessible by the uploading user, the uploaded file meets
   * type/format requirements (e.g., DICOM, JPEG), and the storage URI is secure
   * and tamper-proof. All uploads (including self-service) are logged, and
   * privacy/policy flags are applied as relevant.
   *
   * In case of validation or policy errors (invalid patient record, file
   * format, permissions, or attempts to upload to a locked/archived record),
   * the system rejects the request and provides actionable error details.
   * Recovery or retry logic is determined by platform business policy.
   *
   * @param connection
   * @param patientRecordId Unique identifier of the parent patient record
   *   (UUID).
   * @param body Metadata and secure file URI for the uploaded medical image.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformMedicalImage.ICreate,
  ): Promise<IHealthcarePlatformMedicalImage> {
    try {
      return await posthealthcarePlatformNursePatientRecordsPatientRecordIdMedicalImages(
        {
          nurse,
          patientRecordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
