import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResults } from "../../../../../../providers/patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResults";
import { NurseAuth } from "../../../../../../decorators/NurseAuth";
import { NursePayload } from "../../../../../../decorators/payload/NursePayload";
import { gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId } from "../../../../../../providers/gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId";

import { IPageIHealthcarePlatformLabResult } from "../../../../../../api/structures/IPageIHealthcarePlatformLabResult";
import { IHealthcarePlatformLabResult } from "../../../../../../api/structures/IHealthcarePlatformLabResult";

@Controller(
  "/healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/labResults",
)
export class HealthcareplatformNursePatientrecordsEncountersLabresultsController {
  /**
   * Search and retrieve paginated laboratory results for a specific encounter
   * and patient record.
   *
   * This API operation retrieves a filtered, paginated list of laboratory
   * results for a given patient record and related clinical encounter (visit,
   * admission, telemedicine, etc.), leveraging the
   * healthcare_platform_lab_results table as described in the Prisma schema.
   * The user must specify both the patientRecordId and encounterId in the path;
   * both IDs are validated as UUIDs, ensuring correct parent-child relationship
   * and data isolation.
   *
   * The request body provides complex search parameters, allowing filtering by
   * test name, result flag (e.g., normal/abnormal/critical), result status
   * (pending, completed), and date/time range of the result, as well as lab
   * integration provider when applicable. Paginated responses include summary
   * fields suitable for list views and navigation to detailed records.
   *
   * Security and authorization checks ensure only properly scoped users are
   * able to view laboratory results for patients within organizations,
   * departments, or assignments as per RBAC definitions. Audit logging is
   * executed for access, and access is denied if the requestor lacks necessary
   * permissions or patient consent. The operation is suitable for dashboards,
   * clinical review screens, or audit purposes.
   *
   * @param connection
   * @param patientRecordId The unique identifier of the patient record for
   *   which to retrieve lab results
   * @param encounterId The unique identifier of the EHR encounter linked to the
   *   requested lab results
   * @param body Search criteria, pagination, and filter options for lab result
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformLabResult.IRequest,
  ): Promise<IPageIHealthcarePlatformLabResult.ISummary> {
    try {
      return await patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResults(
        {
          nurse,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed laboratory result by ID for a given patient record and
   * encounter.
   *
   * This API operation returns the full detail of a laboratory result entity,
   * using the healthcare_platform_lab_results table, as indicated by the
   * labResultId path parameter. The patientRecordId and encounterId ensure
   * proper scoping and data isolation. The lab result includes metadata such as
   * test name, result values, clinical flags (normal/abnormal/critical),
   * integration/provenance information, and all structured result fields as per
   * the schema definition.
   *
   * Authorization checks guarantee only users with appropriate clinical,
   * technical, or department-level roles may access this sensitive result, and
   * audit logs are maintained for every access event. If the user does not have
   * permission, the operation will return an access denied response. Security
   * and compliance mechanisms are enforced according to the RBAC and record
   * privacy logic.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the parent patient record
   * @param encounterId Unique identifier for the parent EHR encounter
   * @param labResultId Unique identifier of the laboratory result to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":labResultId")
  public async at(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedParam("labResultId")
    labResultId: string & tags.Format<"uuid">,
  ): Promise<IHealthcarePlatformLabResult> {
    try {
      return await gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdLabResultsLabResultId(
        {
          nurse,
          patientRecordId,
          encounterId,
          labResultId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
