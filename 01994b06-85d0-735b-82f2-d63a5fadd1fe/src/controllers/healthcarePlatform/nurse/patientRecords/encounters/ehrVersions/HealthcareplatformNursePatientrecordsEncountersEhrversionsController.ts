import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersions } from "../../../../../../providers/patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersions";
import { NurseAuth } from "../../../../../../decorators/NurseAuth";
import { NursePayload } from "../../../../../../decorators/payload/NursePayload";
import { gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersionsVersionNumber } from "../../../../../../providers/gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersionsVersionNumber";

import { IPageIHealthcarePlatformEhrVersion } from "../../../../../../api/structures/IPageIHealthcarePlatformEhrVersion";
import { IHealthcarePlatformEhrVersion } from "../../../../../../api/structures/IHealthcarePlatformEhrVersion";

@Controller(
  "/healthcarePlatform/nurse/patientRecords/:patientRecordId/encounters/:encounterId/ehrVersions",
)
export class HealthcareplatformNursePatientrecordsEncountersEhrversionsController {
  /**
   * List/filter all EHR version snapshots for a patient encounter with paging
   * and access control.
   *
   * This endpoint allows a secure, paginated, and filterable listing of all EHR
   * version snapshots associated with a particular patient's clinical
   * encounter. It serves the healthcare_platform_ehr_versions table and
   * supports advanced queries, including date filtering, submitted by, and
   * update reason.
   *
   * Security considerations require that requesting users have appropriate
   * role-based access (e.g., doctor for the encounter, nurse with assignment,
   * department head, compliance officer). All access is logged for compliance,
   * and sensitive information is filtered by role scope. Pagination and
   * advanced search parameters are supported in the request body for efficient
   * chart review, legal audits, or clinical investigations.
   *
   * Business logic enforces that only records linked to the provided patient
   * and encounter are included in the result, and error handling covers
   * unauthorized access, not found, or out-of-scope query attempts. Operations
   * related are retrieving a specific version, amending records, and reviewing
   * version history for compliance review.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the patient's record.
   * @param encounterId Unique identifier for the EHR encounter.
   * @param body Search, filter, and pagination options for EHR version snapshot
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IHealthcarePlatformEhrVersion.IRequest,
  ): Promise<IPageIHealthcarePlatformEhrVersion> {
    try {
      return await patchhealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersions(
        {
          nurse,
          patientRecordId,
          encounterId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific EHR version snapshot for a patient encounter by version
   * number.
   *
   * This endpoint enables authorized users to fetch the complete data for an
   * individual EHR version, as identified by patient record ID, encounter ID,
   * and version number. Each EHR version captures point-in-time clinical
   * information and reasoning for updates.
   *
   * Role-based access control determines the extent of viewable data, with
   * doctors (for their patients/encounters), nurses (within their scope),
   * department heads, and system administrators permitted to view. All
   * retrievals are logged in the audit trail for compliance requirements, and
   * invalid or unauthorized requests are appropriately denied with detailed
   * error messages.
   *
   * Business rules require that all identifiers are valid and present, and
   * attempts to retrieve unlinked or non-existent versions result in 404
   * errors. Related operations include listing all versions or comparing
   * version histories for patient safety and legal purposes.
   *
   * @param connection
   * @param patientRecordId Unique identifier for the patient's record.
   * @param encounterId Unique identifier for the EHR encounter.
   * @param versionNumber EHR version sequence number to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":versionNumber")
  public async at(
    @NurseAuth()
    nurse: NursePayload,
    @TypedParam("patientRecordId")
    patientRecordId: string & tags.Format<"uuid">,
    @TypedParam("encounterId")
    encounterId: string & tags.Format<"uuid">,
    @TypedParam("versionNumber")
    versionNumber: number & tags.Type<"int32">,
  ): Promise<IHealthcarePlatformEhrVersion> {
    try {
      return await gethealthcarePlatformNursePatientRecordsPatientRecordIdEncountersEncounterIdEhrVersionsVersionNumber(
        {
          nurse,
          patientRecordId,
          encounterId,
          versionNumber,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
