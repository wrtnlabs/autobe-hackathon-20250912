import jwt from "jsonwebtoken";
import { MyGlobal } from "../MyGlobal";
import typia, { tags } from "typia";
import { Prisma } from "@prisma/client";
import { v4 } from "uuid";
import { toISOStringSafe } from "../util/toISOStringSafe";
import { IHealthcarePlatformClinicalAlert } from "@ORGANIZATION/PROJECT-api/lib/structures/IHealthcarePlatformClinicalAlert";
import { IPageIHealthcarePlatformClinicalAlert } from "@ORGANIZATION/PROJECT-api/lib/structures/IPageIHealthcarePlatformClinicalAlert";
import { OrganizationadminPayload } from "../decorators/payload/OrganizationadminPayload";

/**
 * Search and paginate clinical alerts generated by the CDS engine in the
 * healthcare_platform_clinical_alerts table.
 *
 * This operation searches clinical alert records for an organization admin,
 * enforcing RBAC to restrict queries to the admin's organization. Supports
 * advanced filtering on status, department, CDS rule, alert type, subject
 * search, and event time windows, returning a paginated set of alerts. All
 * date/datetime fields are fully normalized as string &
 * tags.Format<'date-time'> to ensure API and OpenAPI consistency, never leaking
 * native Date.
 *
 * @param props - Parameters for the search operation
 * @param props.organizationAdmin - Authenticated organizationadmin making the
 *   request (org-scoped RBAC enforced)
 * @param props.body - Search and pagination filters for querying alerts
 * @returns Paginated, filtered results of clinical alerts matching search
 *   parameters, with all fields properly typed/normalized for API output
 * @throws {Error} If authorization fails, RBAC org mismatch, or if query
 *   parameters are malformed
 */
export async function patchhealthcarePlatformOrganizationAdminClinicalAlerts(props: {
  organizationAdmin: OrganizationadminPayload;
  body: IHealthcarePlatformClinicalAlert.IRequest;
}): Promise<IPageIHealthcarePlatformClinicalAlert> {
  const { organizationAdmin, body } = props;
  // Always scope to authenticated admin's organization_id
  const orgId = organizationAdmin.id;
  // Defaults
  const page = body.page ?? 1;
  const limit = body.limit ?? 50;
  const skip = (Number(page) - 1) * Number(limit);
  // Only whitelisted sort keys supported
  const ALLOWED_SORTS = ["created_at", "status", "alert_type"] as const;
  const sortField =
    body.sort && ALLOWED_SORTS.includes(body.sort) ? body.sort : "created_at";
  // Build WHERE clause; exclude deleted alerts always
  const where = {
    organization_id: orgId,
    deleted_at: null,
    ...(body.department_id !== undefined &&
      body.department_id !== null && {
        department_id: body.department_id,
      }),
    ...(body.decision_support_rule_id !== undefined &&
      body.decision_support_rule_id !== null && {
        decision_support_rule_id: body.decision_support_rule_id,
      }),
    ...(body.status !== undefined &&
      body.status !== null && {
        status: body.status,
      }),
    ...(body.alert_type !== undefined &&
      body.alert_type !== null && {
        alert_type: body.alert_type,
      }),
    ...(body.subject_summary !== undefined &&
      body.subject_summary !== null && {
        subject_summary: { contains: body.subject_summary },
      }),
    ...((body.start_date !== undefined && body.start_date !== null) ||
    (body.end_date !== undefined && body.end_date !== null)
      ? {
          created_at: {
            ...(body.start_date !== undefined &&
              body.start_date !== null && {
                gte: body.start_date,
              }),
            ...(body.end_date !== undefined &&
              body.end_date !== null && {
                lte: body.end_date,
              }),
          },
        }
      : {}),
  };
  // Fetch filtered paginated results and total count
  const [alerts, total] = await Promise.all([
    MyGlobal.prisma.healthcare_platform_clinical_alerts.findMany({
      where,
      orderBy: { [sortField]: "desc" },
      skip: Number(skip),
      take: Number(limit),
    }),
    MyGlobal.prisma.healthcare_platform_clinical_alerts.count({ where }),
  ]);
  // Map DB results to API DTOs (date handling enforced, null/undefined checks)
  const data: IHealthcarePlatformClinicalAlert[] = alerts.map((a) => ({
    id: a.id,
    decision_support_rule_id: a.decision_support_rule_id,
    triggered_by_user_id:
      a.triggered_by_user_id === undefined || a.triggered_by_user_id === null
        ? undefined
        : a.triggered_by_user_id,
    organization_id: a.organization_id,
    department_id:
      a.department_id === undefined || a.department_id === null
        ? undefined
        : a.department_id,
    alert_type: a.alert_type,
    subject_summary: a.subject_summary,
    detail: a.detail === undefined || a.detail === null ? undefined : a.detail,
    status: a.status,
    acknowledged_at:
      a.acknowledged_at === undefined || a.acknowledged_at === null
        ? undefined
        : toISOStringSafe(a.acknowledged_at),
    resolved_at:
      a.resolved_at === undefined || a.resolved_at === null
        ? undefined
        : toISOStringSafe(a.resolved_at),
    created_at: toISOStringSafe(a.created_at),
    updated_at: toISOStringSafe(a.updated_at),
    deleted_at:
      a.deleted_at === undefined || a.deleted_at === null
        ? undefined
        : toISOStringSafe(a.deleted_at),
  }));
  // Compose pagination object, strip branding for numeric fields
  const result: IPageIHealthcarePlatformClinicalAlert = {
    pagination: {
      current: Number(page),
      limit: Number(limit),
      records: total,
      pages: Math.ceil(total / Number(limit)),
    },
    data,
  };
  return result;
}
