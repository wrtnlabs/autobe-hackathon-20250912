import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IHealthcarePlatformAppointment } from "@ORGANIZATION/PROJECT-api/lib/structures/IHealthcarePlatformAppointment";
import type { IHealthcarePlatformAppointmentReminder } from "@ORGANIZATION/PROJECT-api/lib/structures/IHealthcarePlatformAppointmentReminder";
import type { IHealthcarePlatformDepartmentHead } from "@ORGANIZATION/PROJECT-api/lib/structures/IHealthcarePlatformDepartmentHead";

/**
 * End-to-end test for department head creating a reminder for an
 * appointment using the healthcare platform API.
 *
 * 1. Register a new department head account (generating unique email/name).
 * 2. Login as that department head to obtain valid authentication context.
 * 3. Create a sample appointment as department head (with a provider and
 *    patient generated by typia.random).
 * 4. Create a valid reminder for the appointment: use the appointment's
 *    patient_id as the recipient_id, and set recipient_type to 'patient'
 *    (valid channel: 'email').
 * 5. Validate the returned reminder record matches request and is correctly
 *    linked to the appointment.
 * 6. Attempt error scenario: create a reminder with a random, invalid
 *    recipient_id not matching provider or patient (should fail with
 *    error).
 * 7. (Edge) Try creating a reminder for a random non-existent appointment_id
 *    (should also fail). (Note: List/check reminders for an appointment
 *    would be tested if API function for listing was present.)
 */
export async function test_api_reminder_creation_for_department_head_appointment_e2e(
  connection: api.IConnection,
) {
  // 1. Register department head
  const joinBody = {
    email: typia.random<string & tags.Format<"email">>(),
    full_name: RandomGenerator.name(),
    password: RandomGenerator.alphaNumeric(12),
    phone: RandomGenerator.mobile(),
  } satisfies IHealthcarePlatformDepartmentHead.IJoinRequest;
  const join = await api.functional.auth.departmentHead.join(connection, {
    body: joinBody,
  });
  typia.assert(join);

  // 2. Login as department head
  await api.functional.auth.departmentHead.login(connection, {
    body: {
      email: joinBody.email,
      password: joinBody.password,
    } satisfies IHealthcarePlatformDepartmentHead.ILoginRequest,
  });

  // 3. Create appointment
  const appointmentBody =
    typia.random<IHealthcarePlatformAppointment.ICreate>();
  const appointment =
    await api.functional.healthcarePlatform.departmentHead.appointments.create(
      connection,
      {
        body: appointmentBody,
      },
    );
  typia.assert(appointment);

  // 4. Create valid reminder
  const validReminderBody = {
    reminder_time: new Date(Date.now() + 1000 * 60 * 60).toISOString(), // 1 hour from now
    recipient_type: "patient",
    recipient_id: appointment.patient_id,
    delivery_channel: "email",
  } satisfies IHealthcarePlatformAppointmentReminder.ICreate;
  const reminder =
    await api.functional.healthcarePlatform.departmentHead.appointments.reminders.create(
      connection,
      {
        appointmentId: appointment.id,
        body: validReminderBody,
      },
    );
  typia.assert(reminder);
  TestValidator.equals(
    "reminder linked to appointment",
    reminder.appointment_id,
    appointment.id,
  );
  TestValidator.equals(
    "reminder recipient id matches",
    reminder.recipient_id,
    appointment.patient_id,
  );
  TestValidator.equals(
    "reminder recipient type is patient",
    reminder.recipient_type,
    "patient",
  );
  TestValidator.equals(
    "reminder delivery channel is email",
    reminder.delivery_channel,
    "email",
  );

  // 5. Create reminder with invalid recipient (not patient or provider)
  await TestValidator.error("invalid recipient id should fail", async () => {
    await api.functional.healthcarePlatform.departmentHead.appointments.reminders.create(
      connection,
      {
        appointmentId: appointment.id,
        body: {
          reminder_time: new Date(Date.now() + 1000 * 60 * 60).toISOString(),
          recipient_type: "patient",
          recipient_id: typia.random<string & tags.Format<"uuid">>(), // Random not patient_id
          delivery_channel: "email",
        } satisfies IHealthcarePlatformAppointmentReminder.ICreate,
      },
    );
  });

  // 6. Create reminder for invalid appointment id
  await TestValidator.error(
    "reminder with invalid appointment id should fail",
    async () => {
      await api.functional.healthcarePlatform.departmentHead.appointments.reminders.create(
        connection,
        {
          appointmentId: typia.random<string & tags.Format<"uuid">>(),
          body: validReminderBody,
        },
      );
    },
  );
}
