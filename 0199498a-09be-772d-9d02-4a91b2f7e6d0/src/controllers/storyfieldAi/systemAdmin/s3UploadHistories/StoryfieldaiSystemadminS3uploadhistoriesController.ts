import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminS3UploadHistories } from "../../../../providers/patchstoryfieldAiSystemAdminS3UploadHistories";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminS3UploadHistoriesS3UploadHistoryId } from "../../../../providers/getstoryfieldAiSystemAdminS3UploadHistoriesS3UploadHistoryId";

import { IPageIStoryfieldAiS3UploadHistory } from "../../../../api/structures/IPageIStoryfieldAiS3UploadHistory";
import { IStoryfieldAiS3UploadHistory } from "../../../../api/structures/IStoryfieldAiS3UploadHistory";

@Controller("/storyfieldAi/systemAdmin/s3UploadHistories")
export class StoryfieldaiSystemadminS3uploadhistoriesController {
  /**
   * Search and retrieve paginated S3 upload histories
   * (storyfield_ai_s3_upload_histories).
   *
   * Search and retrieve a filtered, paginated list of S3 upload history events
   * for the system. System administrators can review recent and historical
   * upload attempts, status outcomes (e.g., SUCCESS, FAILURE), file details,
   * and error diagnostics.
   *
   * Access is restricted to the 'systemAdmin' role due to inclusion of
   * sensitive file paths, error messages, and operational diagnostics linked to
   * user-generated content. Search criteria include filename, media type,
   * upload status, creation date, and text-based error search; sorting for
   * audit use cases is also supported.
   *
   * This operation references the storyfield_ai_s3_upload_histories table,
   * logging all S3 upload events, traceability details, and error outcomes for
   * compliance and platform health analysis. Standard error handling applies
   * for permission checks, parameter validation, and result set constraints.
   *
   * @param connection
   * @param body Search and pagination filters for S3 upload history retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiS3UploadHistory.IRequest,
  ): Promise<IPageIStoryfieldAiS3UploadHistory> {
    try {
      return await patchstoryfieldAiSystemAdminS3UploadHistories({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve S3 upload history detail (storyfield_ai_s3_upload_histories) by
   * ID.
   *
   * Retrieve detailed S3 upload event information by specifying a unique
   * s3UploadHistoryId in the path. This operation exposes all diagnostic,
   * status, and traceability fields for a single file upload event, which can
   * be critical for postmortem, incident, or compliance review.
   *
   * Access to this endpoint is available only to users with the 'systemAdmin'
   * role, as upload event logs may contain user file names, error diagnostics,
   * internal URIs, or sensitive operational timing. The response includes
   * upload parameters, error context (if any), S3 URL returned by Spring, and
   * audit fields for the associated upload.
   *
   * This operation references the storyfield_ai_s3_upload_histories table and
   * enforces role and identifier format validation. Errors are returned where
   * access is unauthorized, the upload history record does not exist, or the
   * s3UploadHistoryId is incorrectly formatted.
   *
   * @param connection
   * @param s3UploadHistoryId Unique identifier of the S3 upload history event
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":s3UploadHistoryId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("s3UploadHistoryId")
    s3UploadHistoryId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiS3UploadHistory> {
    try {
      return await getstoryfieldAiSystemAdminS3UploadHistoriesS3UploadHistoryId(
        {
          systemAdmin,
          s3UploadHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
