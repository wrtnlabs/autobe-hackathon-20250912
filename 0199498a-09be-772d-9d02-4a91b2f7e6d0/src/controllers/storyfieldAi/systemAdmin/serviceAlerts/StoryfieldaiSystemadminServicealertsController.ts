import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { poststoryfieldAiSystemAdminServiceAlerts } from "../../../../providers/poststoryfieldAiSystemAdminServiceAlerts";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchstoryfieldAiSystemAdminServiceAlerts } from "../../../../providers/patchstoryfieldAiSystemAdminServiceAlerts";
import { getstoryfieldAiSystemAdminServiceAlertsServiceAlertId } from "../../../../providers/getstoryfieldAiSystemAdminServiceAlertsServiceAlertId";
import { putstoryfieldAiSystemAdminServiceAlertsServiceAlertId } from "../../../../providers/putstoryfieldAiSystemAdminServiceAlertsServiceAlertId";
import { deletestoryfieldAiSystemAdminServiceAlertsServiceAlertId } from "../../../../providers/deletestoryfieldAiSystemAdminServiceAlertsServiceAlertId";

import { IStoryfieldAiServiceAlert } from "../../../../api/structures/IStoryfieldAiServiceAlert";
import { IPageIStoryfieldAiServiceAlert } from "../../../../api/structures/IPageIStoryfieldAiServiceAlert";

@Controller("/storyfieldAi/systemAdmin/serviceAlerts")
export class StoryfieldaiSystemadminServicealertsController {
  /**
   * Create a new service alert or technical event record
   * (storyfield_ai_service_alerts table).
   *
   * Create a new service alert or technical/system event record for monitoring,
   * incident response, or compliance tracking. This API endpoint is restricted
   * to system administrators, requiring all mandatory information about the
   * alert (e.g., alertType, alertCode, content, environment) to be supplied in
   * the request body.
   *
   * All new alerts are immediately available for search, dashboard display, and
   * operational review. This operation is closely aligned with the
   * storyfield_ai_service_alerts Prisma schema. Required fields include the
   * alert type (such as error, warning, info, incident, quota), a unique
   * business or technical alert code, the human-readable content describing the
   * event, the target environment (production, staging, etc.), and optional
   * resolution notes if the alert represents a closed incident.
   *
   * Insertions are logged for audit and compliance. Validation is enforced for
   * all mandatory fields, and only users with the "systemAdmin" role are
   * permitted to create new alert/event records in the system.
   *
   * @param connection
   * @param body Details for the new service alert/event to be created (type,
   *   code, content, environment, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiServiceAlert.ICreate,
  ): Promise<IStoryfieldAiServiceAlert> {
    try {
      return await poststoryfieldAiSystemAdminServiceAlerts({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List, search, and paginate service alert event records
   * (storyfield_ai_service_alerts table).
   *
   * Retrieve a paginated and filterable list of service alerts from the system
   * alert and event notification log. This operation supports complex search
   * parameters including filtering by alert type (error, warning, info, quota,
   * incident, recovery), event environment (production, staging, etc.),
   * resolution status, and time window.
   *
   * The response contains summary information for each alert, facilitating
   * rapid triage by platform administrators and allowing detailed drill-down
   * into specific service events. Authorization is strictly limited to users
   * with the "systemAdmin" role. Pagination, sorting, and advanced filtering
   * capabilities are supported by the request body schema, ensuring rapid and
   * targeted access to incidents, warnings, or informational events.
   *
   * This API is based on the storyfield_ai_service_alerts Prisma model, which
   * tracks all major service system events, including errors, warnings, quota
   * breaches, automated recovery, and incident reports for system reliability.
   *
   * @param connection
   * @param body Filtering, search, and pagination criteria for service alerts
   *   index/search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiServiceAlert.IRequest,
  ): Promise<IPageIStoryfieldAiServiceAlert.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminServiceAlerts({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a service alert event record by ID
   * (storyfield_ai_service_alerts table).
   *
   * Fetch detailed information about a specific service alert event by unique
   * ID for inspection, incident review, or compliance documentation. This API
   * only grants access to users with the "systemAdmin" role, supporting full
   * retrieval of all alert metadata including alert type (error, warning, info,
   * incident), alert code, descriptive content, target environment,
   * resolution/closure status, and associated resolution notes.
   *
   * This operation enforces strict access control, ensuring no sensitive
   * operational data is exposed to non-authorized users. Internally, it queries
   * the storyfield_ai_service_alerts table, returning all fields specified for
   * alert diagnostics and administrative action tracking. If the requested
   * alert does not exist, a well-defined error message is returned according to
   * business logic.
   *
   * @param connection
   * @param serviceAlertId Unique identifier of the service alert event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":serviceAlertId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("serviceAlertId")
    serviceAlertId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiServiceAlert> {
    try {
      return await getstoryfieldAiSystemAdminServiceAlertsServiceAlertId({
        systemAdmin,
        serviceAlertId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing service alert record in the storyfield_ai_service_alerts
   * table.
   *
   * This API operation is responsible for updating a specific service alert in
   * the storyfield_ai_service_alerts table, as referenced by the unique
   * serviceAlertId path parameter (UUID).
   *
   * The operation enables system administrators to edit various fields of an
   * existing alert: alert_type (e.g., error, warning, info), alert_code
   * (optional), content, environment (such as production or staging), resolved
   * (boolean indicating whether the issue has been addressed), and
   * resolution_note (optional note for closure). Changing the "resolved" status
   * is a typical workflow for this endpoint, as resolved alerts can be marked
   * as closed with a note about the resolution steps.
   *
   * To maintain system integrity, only users with the "systemAdmin" role are
   * authorized to invoke this operation. Requests by unauthorized users must be
   * rejected and logged.
   *
   * The operation is tightly coupled to the storyfield_ai_service_alerts
   * entity, following its schema for updatable fields. All changes should be
   * fully validatedâ€”e.g., only allowable values for alert_type, sanitized text
   * for content, and corresponding notes where appropriate. Each update must be
   * subject to audit logging as required by compliance policies.
   *
   * This operation may be used in conjunction with alert listing (PATCH
   * /serviceAlerts) and deletion (DELETE /serviceAlerts/{serviceAlertId}),
   * forming part of the administrative alert lifecycle management capabilities.
   * If the specified alert does not exist or has been previously deleted (soft
   * delete), the system should return a not-found or conflict error status as
   * appropriate.
   *
   * @param connection
   * @param serviceAlertId Unique identifier of the service alert to be updated.
   * @param body Fields to update for the service alert record. Includes mutable
   *   attributes such as alert_type, alert_code, content, environment,
   *   resolved, and resolution_note.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":serviceAlertId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("serviceAlertId")
    serviceAlertId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiServiceAlert.IUpdate,
  ): Promise<IStoryfieldAiServiceAlert> {
    try {
      return await putstoryfieldAiSystemAdminServiceAlertsServiceAlertId({
        systemAdmin,
        serviceAlertId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logical removal) a specific service alert record for system
   * administration.
   *
   * This API operation implements soft deletion of a specific service alert in
   * the storyfield_ai_service_alerts table, identified by the unique
   * serviceAlertId provided as a path parameter.
   *
   * Only system administrators are permitted to delete service alerts. The
   * operation sets the deleted_at timestamp, marking the alert as inactive for
   * business and reporting purposes, but retaining it for compliance and future
   * audit. It does not physically erase the record.
   *
   * Logic includes verifying the existence and non-deleted status of the target
   * alert. If the alert does not exist or has already been deleted, an
   * appropriate not-found or conflict error is returned, and such attempts are
   * logged for administrative review. This operation is integral to lifecycle
   * management of health/incident alerts for the StoryField AI system.
   *
   * All successful and failed deletion attempts must be audit logged, in
   * accordance with policy. Related operations include alert creation,
   * updating, and retrieval, particularly in cases of incident investigation or
   * administrative review.
   *
   * @param connection
   * @param serviceAlertId Unique identifier of the service alert to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":serviceAlertId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("serviceAlertId")
    serviceAlertId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminServiceAlertsServiceAlertId({
        systemAdmin,
        serviceAlertId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
