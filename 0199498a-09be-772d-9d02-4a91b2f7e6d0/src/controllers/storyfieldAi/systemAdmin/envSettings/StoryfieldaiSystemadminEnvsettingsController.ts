import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { poststoryfieldAiSystemAdminEnvSettings } from "../../../../providers/poststoryfieldAiSystemAdminEnvSettings";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchstoryfieldAiSystemAdminEnvSettings } from "../../../../providers/patchstoryfieldAiSystemAdminEnvSettings";
import { getstoryfieldAiSystemAdminEnvSettingsEnvSettingId } from "../../../../providers/getstoryfieldAiSystemAdminEnvSettingsEnvSettingId";
import { putstoryfieldAiSystemAdminEnvSettingsEnvSettingId } from "../../../../providers/putstoryfieldAiSystemAdminEnvSettingsEnvSettingId";
import { deletestoryfieldAiSystemAdminEnvSettingsEnvSettingId } from "../../../../providers/deletestoryfieldAiSystemAdminEnvSettingsEnvSettingId";

import { IStoryfieldAiEnvSetting } from "../../../../api/structures/IStoryfieldAiEnvSetting";
import { IPageIStoryfieldAiEnvSetting } from "../../../../api/structures/IPageIStoryfieldAiEnvSetting";

@Controller("/storyfieldAi/systemAdmin/envSettings")
export class StoryfieldaiSystemadminEnvsettingsController {
  /**
   * Create a new environment setting record (storyfield_ai_env_settings).
   *
   * This operation creates a new entry in the storyfield_ai_env_settings table,
   * representing a configuration setting for a specific runtime environment
   * (development, staging, production, or local). The request requires
   * specifying the environment, key, value, the identity of the admin making
   * the change, and the business reason for the new or changed value.
   *
   * Environment settings are critical for operational correctness, as they
   * govern external API keys, feature toggles, and infrastructure URLs. Proper
   * use of this endpoint supports secure, audited deployments and enables rapid
   * restoration/rollback for incident response.
   *
   * Only authorized systemAdmin roles may call this operation. Audit fields,
   * including who created the setting and their change justification, are
   * mandatory. The response provides the complete resulting environment setting
   * object, confirming correct persistence and registration in the
   * configuration audit log.
   *
   * Note: Sensitive data in env_value should follow masking policies in the
   * system's response payloads, and not all values are suitable for disclosure
   * to UI clients.
   *
   * @param connection
   * @param body The full details for the new environment setting to create,
   *   including environment name, key, value, administrating user, and reason
   *   for the change.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiEnvSetting.ICreate,
  ): Promise<IStoryfieldAiEnvSetting> {
    try {
      return await poststoryfieldAiSystemAdminEnvSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve environment settings with filtering and pagination
   * (storyfield_ai_env_settings table).
   *
   * This API endpoint retrieves a filtered and paginated list of environment
   * settings from the 'storyfield_ai_env_settings' table. Environment settings
   * store key=value pairs representing sensitive or operational configuration
   * items, change control information, and change audit traceability by
   * environment context.
   *
   * System administrators use this endpoint to manage configuration drift,
   * detect unauthorized changes, and perform audit reviews. Supported filters
   * include environment name, key name, and changed_by, and results are
   * paginated for efficient list navigation. Business rules require that only
   * systemAdmin users may access or enumerate environment settings, to avoid
   * accidental exposure of sensitive material.
   *
   * Input includes filter criteria, sort order, and pagination parameters
   * (e.g., page, page size, sort field/direction). The response returns a
   * paginated dataset of environment setting records, with all relevant audit
   * fields and masking of sensitive values as required for compliance.
   *
   * Errors are returned for invalid pagination parameters, insufficient
   * privileges, or system errors. This operation is typically paired with
   * administrative creation or update endpoints for full lifecycle environment
   * and configuration management.
   *
   * @param connection
   * @param body Request criteria for searching/filtering environment settings
   *   including pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiEnvSetting.IRequest,
  ): Promise<IPageIStoryfieldAiEnvSetting> {
    try {
      return await patchstoryfieldAiSystemAdminEnvSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific environment setting by its unique ID
   * (storyfield_ai_env_settings).
   *
   * This operation allows retrieval of a single environment setting by
   * specifying its unique identifier. It queries the storyfield_ai_env_settings
   * table, which holds per-environment configuration key-value pairs and change
   * metadata.
   *
   * This endpoint is intended for use by system administrators when reviewing
   * or troubleshooting deployments, auditing configuration changes, and
   * diagnosing operational issues. The permission is strictâ€”only authorized
   * systemAdmin actors can query these records due to the sensitivity of
   * environment configuration data.
   *
   * Returned information includes environment key, value (masked if sensitive),
   * the target environment (e.g., production, staging), the user/admin who last
   * changed the value, the reason for the change, and timestamps for creation
   * and updates. This level of access helps ensure traceability of system
   * configuration changes and supports incident investigations or rollbacks
   * when needed.
   *
   * Careful access control must be enforced, and audit logs should record
   * access to this endpoint for compliance purposes.
   *
   * @param connection
   * @param envSettingId Unique identifier of the environment setting to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":envSettingId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("envSettingId")
    envSettingId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiEnvSetting> {
    try {
      return await getstoryfieldAiSystemAdminEnvSettingsEnvSettingId({
        systemAdmin,
        envSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing environment setting by its unique ID
   * (storyfield_ai_env_settings).
   *
   * This operation modifies a specific environment setting record given its
   * unique envSettingId, allowing system administrators to change configuration
   * keys or values, or to adjust environment assignments (e.g., switching a
   * feature toggle from 'off' to 'on' for production).
   *
   * Each update requires complete payload details including the new key, value,
   * which administrator is making the change, and a supporting business reason
   * for the modification. This supports policy and regulatory compliance by
   * ensuring an immutable audit trail of all config/value changes, who
   * performed them, and why.
   *
   * The endpoint strictly limits access to systemAdmin role, reflecting the
   * high business risk of improper environment configuration management.
   * Responses include the fully updated env setting object for confirmation.
   * All update actions should also be logged for potential security or incident
   * review.
   *
   * @param connection
   * @param envSettingId Unique identifier of the environment setting to update.
   * @param body Full update payload for the target environment setting,
   *   including changed key, value, administrator, and audit fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":envSettingId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("envSettingId")
    envSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiEnvSetting.IUpdate,
  ): Promise<IStoryfieldAiEnvSetting> {
    try {
      return await putstoryfieldAiSystemAdminEnvSettingsEnvSettingId({
        systemAdmin,
        envSettingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a specific environment setting by unique ID
   * (storyfield_ai_env_settings).
   *
   * This operation irreversibly deletes an environment setting from the
   * configuration registry using its unique envSettingId. Removal is intended
   * only for settings that are no longer required, are unsafe to retain (such
   * as expired API keys), or were added in error. Unlike soft deletes, this
   * operation physically removes the record, making restoration impossible once
   * completed.
   *
   * Strict access is enforced: only users with systemAdmin role may invoke this
   * endpoint, and every execution must be auditable. Deletion of critical
   * environment variables should be accompanied by additional policy review to
   * prevent accidental or malicious service impact.
   *
   * Audit logs must record the administrator, time, and contextual
   * justification for each action, ensuring support for post-incident analysis
   * and compliance reviews. This operation does not return a response body on
   * success.
   *
   * @param connection
   * @param envSettingId Unique identifier of the environment setting to
   *   permanently remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":envSettingId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("envSettingId")
    envSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminEnvSettingsEnvSettingId({
        systemAdmin,
        envSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
