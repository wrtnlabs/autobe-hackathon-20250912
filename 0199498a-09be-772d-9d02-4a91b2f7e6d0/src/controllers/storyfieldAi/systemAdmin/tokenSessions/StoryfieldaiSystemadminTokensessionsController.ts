import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminTokenSessions } from "../../../../providers/patchstoryfieldAiSystemAdminTokenSessions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminTokenSessionsTokenSessionId } from "../../../../providers/getstoryfieldAiSystemAdminTokenSessionsTokenSessionId";
import { putstoryfieldAiSystemAdminTokenSessionsTokenSessionId } from "../../../../providers/putstoryfieldAiSystemAdminTokenSessionsTokenSessionId";
import { deletestoryfieldAiSystemAdminTokenSessionsTokenSessionId } from "../../../../providers/deletestoryfieldAiSystemAdminTokenSessionsTokenSessionId";

import { IPageIStoryfieldAiTokenSession } from "../../../../api/structures/IPageIStoryfieldAiTokenSession";
import { IStoryfieldAiTokenSession } from "../../../../api/structures/IStoryfieldAiTokenSession";

@Controller("/storyfieldAi/systemAdmin/tokenSessions")
export class StoryfieldaiSystemadminTokensessionsController {
  /**
   * List and search authentication token sessions (admin only) from
   * storyfield_ai_token_sessions.
   *
   * Retrieve a paginated, filtered list of authentication sessions across all
   * users and system administrators. This operation supports complex queries
   * over the storyfield_ai_token_sessions table from the Prisma schema.
   * Administrators can search by user ID, admin ID, issued_at, expires_at,
   * token hash (fingerprint), and session status (active, expired, revoked).
   * All search criteria must correspond to actual fields documented in the
   * schema specification.
   *
   * Only system administrators are permitted to access this endpoint,
   * reflecting the critical role of session monitoring and control for platform
   * security. Returned sessions include both authenticated user- and
   * admin-linked records, as well as session lifecycle details: issued_at,
   * expires_at, last_activity_at, refresh status, deletion (soft), plus
   * fingerprints for device/browser validation.
   *
   * Strong data governance and privacy rules must be applied: token_hash is
   * shown as hashed only, never the actual token value. All session data
   * presented must be audit-safe and traceable for compliance. This operation
   * should support admin troubleshooting of login problems, forced logout, or
   * abuse detectionâ€”never for business-user-level session viewing.
   *
   * @param connection
   * @param body Complex filter, pagination, and search criteria for session
   *   records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiTokenSession.IRequest,
  ): Promise<IPageIStoryfieldAiTokenSession.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminTokenSessions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information on an authentication token session by ID (admin
   * only).
   *
   * Retrieve all detailed information for a specified authentication token
   * session. This endpoint fetches the complete storyfield_ai_token_sessions
   * record by tokenSessionId, allowing system administrators to audit session
   * history, troubleshoot security incidents, resolve user access problems, or
   * validate session lifecycle compliance.
   *
   * The response includes all session attributes defined in the Prisma schema:
   * session ID, links to the associated authenticated user or system admin,
   * fingerprint, issued_at, expires_at, refreshed_at, last_activity_at, and
   * soft deletion timestamp if applicable. Real token values are never
   * revealed; only the hash stored in the DB is shown. Ensures strong
   * traceability for operational and compliance use.
   *
   * Strict role restriction: only systemAdmin users may access this operation,
   * and only for operational security or audit. Nonexistent or expired sessions
   * return clear error responses as per platform error handling policy.
   *
   * @param connection
   * @param tokenSessionId Unique identifier (UUID) of the target authentication
   *   token session
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tokenSessionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("tokenSessionId")
    tokenSessionId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiTokenSession> {
    try {
      return await getstoryfieldAiSystemAdminTokenSessionsTokenSessionId({
        systemAdmin,
        tokenSessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific authentication token session's allowed fields by ID
   * (admin only).
   *
   * Update mutable attributes of a given authentication token session by its
   * ID. Only accessible by system administrators, this operation enables
   * operational control over session lifecycle adjustments as required by
   * security policy: forced expiry (logout), fingerprint modification for
   * device corrections, or adjusting refresh timestamps as part of compliance
   * workflows.
   *
   * The request body must adhere to the IStoryfieldAiTokenSession.IUpdate
   * schema, which is strictly limited to safe, permissible session fields. This
   * does not allow changing user/admin linkage, actual token value (which
   * should remain only as a hash), or other immutable identifiers. Error
   * handling includes session not found, invalid update attempts, and
   * compliance violation cases.
   *
   * Successful updates return the full, updated token session record for
   * administrative confirmation. Logging of update actions for audit trails is
   * strongly recommended. Only system administrators may use this endpoint, as
   * improper use could impact overall system integrity.
   *
   * @param connection
   * @param tokenSessionId UUID of the authentication session to update
   * @param body Fields to update for the session (expires_at, fingerprint,
   *   etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tokenSessionId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("tokenSessionId")
    tokenSessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiTokenSession.IUpdate,
  ): Promise<IStoryfieldAiTokenSession> {
    try {
      return await putstoryfieldAiSystemAdminTokenSessionsTokenSessionId({
        systemAdmin,
        tokenSessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (force logout) a specified authentication token session (admin
   * only).
   *
   * Permanently disables (soft-deletes) a targeted authentication token session
   * by setting its deleted_at timestamp via the storyfield_ai_token_sessions
   * schema. Employed by system administrators to forcibly logout a user or
   * admin, respond to abuse or compromise, or close a session as part of policy
   * enforcement. After this action, the session is invalid for any further
   * authentication attempts but remains in the database for compliance tracking
   * and audit review.
   *
   * Only system admins are permitted access to this operation; non-admins
   * cannot forcibly remove session records. If the tokenSessionId does not
   * exist or is already deleted, the result is a compliant error with a
   * detailed message. No request body is used. Audit logs are recommended for
   * all such administrative deactions to ensure traceability of forced logouts
   * and session terminations.
   *
   * @param connection
   * @param tokenSessionId UUID of the token session to be deactivated
   *   (soft-delete)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tokenSessionId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("tokenSessionId")
    tokenSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminTokenSessionsTokenSessionId({
        systemAdmin,
        tokenSessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
