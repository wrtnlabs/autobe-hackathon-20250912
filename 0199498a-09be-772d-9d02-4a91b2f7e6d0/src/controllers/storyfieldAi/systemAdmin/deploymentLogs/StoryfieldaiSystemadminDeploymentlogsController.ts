import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { poststoryfieldAiSystemAdminDeploymentLogs } from "../../../../providers/poststoryfieldAiSystemAdminDeploymentLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchstoryfieldAiSystemAdminDeploymentLogs } from "../../../../providers/patchstoryfieldAiSystemAdminDeploymentLogs";
import { getstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId } from "../../../../providers/getstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId";
import { putstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId } from "../../../../providers/putstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId";
import { deletestoryfieldAiSystemAdminDeploymentLogsDeploymentLogId } from "../../../../providers/deletestoryfieldAiSystemAdminDeploymentLogsDeploymentLogId";

import { IStoryfieldAiDeploymentLog } from "../../../../api/structures/IStoryfieldAiDeploymentLog";
import { IPageIStoryfieldAiDeploymentLog } from "../../../../api/structures/IPageIStoryfieldAiDeploymentLog";

@Controller("/storyfieldAi/systemAdmin/deploymentLogs")
export class StoryfieldaiSystemadminDeploymentlogsController {
  /**
   * Create a new deployment/rollback event log entry
   * (storyfield_ai_deployment_logs).
   *
   * This operation enables system administrators to record every deployment,
   * rollback, hotfix, configuration change, or related system event affecting
   * the StoryField AI server's environment. When invoked, a new log record is
   * created in the storyfield_ai_deployment_logs table, capturing action type,
   * deployment label, environment, initiator, outcome, status, summary, and
   * timestamps.
   *
   * Strict input validation is enforced: deployment_label must be unique for
   * the environment, action_type is constrained to allowed values (e.g.,
   * deploy, rollback, hotfix, config-change), and referential integrity is
   * maintained. The operation is only allowed for system administrators with
   * valid authentication. All operations are recorded for compliance. Other
   * relevant APIs: PATCH /deploymentLogs for log search, GET
   * /deploymentLogs/{deploymentLogId} for record retrieval, PUT
   * /deploymentLogs/{deploymentLogId} for log updates.
   *
   * @param connection
   * @param body Full information for the event log entry to be created, such as
   *   deployment metadata, action type, environment, status, initiator, and
   *   summary.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiDeploymentLog.ICreate,
  ): Promise<IStoryfieldAiDeploymentLog> {
    try {
      return await poststoryfieldAiSystemAdminDeploymentLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve deployment/rollback event logs in a paginated,
   * filterable list (storyfield_ai_deployment_logs).
   *
   * This operation enables system administrators and authorized support staff
   * to retrieve the history of all deploy, rollback, and hotfix events on the
   * StoryField AI server. The storyfield_ai_deployment_logs table is queried
   * with filtering, search, and pagination parameters so that relevant
   * operational events can be rapidly identified by status, environment, or
   * deployment_label.
   *
   * All returned records include deployment label, action type (deploy,
   * rollback, hotfix, config-change), environment, initiator, status
   * (success/failed/in-progress/aborted), timestamps, and summary. Sensitive
   * information is redacted as appropriate. Audit logs facilitate compliance,
   * troubleshooting, and accountability.
   *
   * Only admins or privileged operations team members should use this API.
   * Access is strictly logged and all usage is monitored for security
   * compliance. Related APIs include GET /deploymentLogs/{deploymentLogId} for
   * detailed viewing, and POST/PUT endpoints for log creation and update.
   *
   * @param connection
   * @param body List, search, and pagination filter for deployment/rollback
   *   event logs of the StoryField AI service.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiDeploymentLog.IRequest,
  ): Promise<IPageIStoryfieldAiDeploymentLog.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminDeploymentLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed record for a specific deployment or rollback event log
   * (storyfield_ai_deployment_logs).
   *
   * This API operation retrieves all relevant information for a single
   * deployment, rollback, or hotfix log entry identified by deploymentLogId in
   * the storyfield_ai_deployment_logs table. It includes deployment label,
   * action type (deploy, rollback, hotfix), target environment, initiator
   * identity, status, audit summary, timestamps, and deletion status if any,
   * along with supplementary notes.
   *
   * Used by system administrators for postmortem investigations, compliance
   * audits, or detailed history review. Only privileged or admin roles should
   * access this API. Requires strict authentication, with all accesses logged
   * for compliance. Returns full record with all available fields for the
   * identified event log.
   *
   * @param connection
   * @param deploymentLogId The unique identifier (UUID) for the target
   *   deployment log event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deploymentLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deploymentLogId")
    deploymentLogId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiDeploymentLog> {
    try {
      return await getstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId({
        systemAdmin,
        deploymentLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing deployment/rollback event log entry by deploymentLogId
   * (storyfield_ai_deployment_logs).
   *
   * This API operation is for system administrators to modify an existing
   * deployment, rollback, or related operational event record in the deployment
   * logs table. By specifying deploymentLogId, admins may update fields such as
   * the operational status (e.g., in-progress, failed, success), deployment
   * summary, or add a resolution note. This supports complete incident
   * lifecycle documentation for compliance and troubleshooting audits.
   *
   * Only users with systemAdmin privileges may update log entries. All updates
   * are tracked for audit, change history, and security purposes. Error
   * handling includes protection of required fields, uniqueness of
   * deployment_label within environment, and referential constraints. Use in
   * conjunction with record GET/PATCH endpoints for review.
   *
   * @param connection
   * @param deploymentLogId The unique identifier (UUID) for the deployment or
   *   rollback event log to update.
   * @param body Patchable fields for the deployment/rollback event log, such as
   *   status, summary, or resolution note.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":deploymentLogId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deploymentLogId")
    deploymentLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiDeploymentLog.IUpdate,
  ): Promise<IStoryfieldAiDeploymentLog> {
    try {
      return await putstoryfieldAiSystemAdminDeploymentLogsDeploymentLogId({
        systemAdmin,
        deploymentLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a deployment log record (storyfield_ai_deployment_logs
   * table).
   *
   * This API endpoint allows system administrators to permanently remove a
   * deployment log record from the database. Its primary purpose is to enforce
   * compliance with data retention policies or correct operational errors
   * related to service deployments. The deployment log identified by
   * deploymentLogId will be deleted entirely, making the information
   * irrecoverable.
   *
   * Only administrators with the "systemAdmin" role are authorized to execute
   * this operation. All removals must be logged for audit and compliance
   * purposes, guaranteeing traceability of administrative actions. Attempts to
   * delete a nonexistent or unauthorized log will return clear error messages,
   * as determined by business rules.
   *
   * This operation relates to the storyfield_ai_deployment_logs Prisma model,
   * which stores deployment, rollback, and hotfix event data with status,
   * initiator, environment, and summary information. There are no soft-deletion
   * semantics: all removed records are hard deleted. Related administrative
   * records should also be reviewed for downstream impacts.
   *
   * @param connection
   * @param deploymentLogId Unique identifier of the deployment log to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":deploymentLogId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("deploymentLogId")
    deploymentLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminDeploymentLogsDeploymentLogId({
        systemAdmin,
        deploymentLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
