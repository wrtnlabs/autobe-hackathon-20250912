import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminStories } from "../../../../providers/patchstoryfieldAiSystemAdminStories";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminStoriesStoryId } from "../../../../providers/getstoryfieldAiSystemAdminStoriesStoryId";
import { putstoryfieldAiSystemAdminStoriesStoryId } from "../../../../providers/putstoryfieldAiSystemAdminStoriesStoryId";
import { deletestoryfieldAiSystemAdminStoriesStoryId } from "../../../../providers/deletestoryfieldAiSystemAdminStoriesStoryId";

import { IPageIStoryfieldAiStory } from "../../../../api/structures/IPageIStoryfieldAiStory";
import { IStoryfieldAiStory } from "../../../../api/structures/IStoryfieldAiStory";

@Controller("/storyfieldAi/systemAdmin/stories")
export class StoryfieldaiSystemadminStoriesController {
  /**
   * Retrieve a paginated and filtered index of AI-generated stories
   * (storyfield_ai_stories table).
   *
   * Fetch a paginated, filterable list of AI-generated fairy tales belonging to
   * authenticated users. This endpoint allows flexible filtering and searching
   * by story title (partial matches), language, owner user ID, creation time
   * range, and soft deletion status. The result set can be sorted by creation
   * or update timestamps.
   *
   * Authentication is required; only authenticated users can retrieve their own
   * stories, while system admins may access all with appropriate search
   * parameters. Pagination supports page size and offset parameters. This
   * endpoint references the storyfield_ai_stories Prisma schema, capturing all
   * user stories, their metadata, and compliance fields including created_at,
   * updated_at, and deleted_at.
   *
   * Sensitive fields such as deleted_at are included in admin results for
   * moderation and GDPR compliance, while regular users only see non-deleted
   * stories they own. Common errors include invalid filters, excessive page
   * sizes, and unauthorized access attempts. Related endpoints are available
   * for retrieving story details, updating, and deleting records.
   *
   * @param connection
   * @param body Story search, filter, and pagination parameters for index
   *   listings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiStory.IRequest,
  ): Promise<IPageIStoryfieldAiStory> {
    try {
      return await patchstoryfieldAiSystemAdminStories({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detail information for a specific story by its ID
   * (storyfield_ai_stories table).
   *
   * Retrieve the full detail view for a single AI-generated story, including
   * title, plot, language, and audit fields. The endpoint uses the story ID as
   * a path parameter, referencing the storyfield_ai_stories table in the Prisma
   * schema. Only the story owner or a system admin may access the story;
   * unauthorized users are denied access.
   *
   * This operation does not directly include child resources like pages or
   * images; use related endpoints to fetch those. Security checks enforce story
   * ownership for authenticated users and full access for system admins for
   * moderation, copyright review, or compliance. Soft-deleted (deleted_at set)
   * stories are only accessible to system admins for audit or recovery
   * operations, not to normal users.
   *
   * Validation covers invalid UUIDs, unauthorized access, and not found errors.
   * This endpoint is tightly coupled to the storyfield_ai_stories table by
   * story ID.
   *
   * @param connection
   * @param storyId Unique identifier (UUID) for the target story record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storyId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("storyId")
    storyId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiStory> {
    try {
      return await getstoryfieldAiSystemAdminStoriesStoryId({
        systemAdmin,
        storyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing story's metadata by ID (storyfield_ai_stories table).
   *
   * Modify the details of an existing AI-generated story by specifying its
   * unique storyId in the path. This endpoint allows updates to fields such as
   * story title, main plot, and language option. It directly uses the
   * storyfield_ai_stories Prisma schema table and enforces ownership rules;
   * only the record owner or a system admin can perform updates.
   *
   * Soft-deleted stories (deleted_at is set) may not be modified and will
   * return an error if update is attempted. The operation is strictly for
   * metadata modification; secondary entities such as pages, images, or TTS
   * results are unaffected by this endpoint. The updated_at audit field is set
   * to the current timestamp on every change.
   *
   * Typical error cases include unauthorized access, not found, invalid input,
   * or business rule violations such as duplicate titles per owner. The
   * endpoint is central to story lifecycle management.
   *
   * @param connection
   * @param storyId Unique identifier (UUID) of the story to update.
   * @param body Update payload including fields to modify in the story record
   *   (e.g., title, main_plot, language).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":storyId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("storyId")
    storyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiStory.IUpdate,
  ): Promise<IStoryfieldAiStory> {
    try {
      return await putstoryfieldAiSystemAdminStoriesStoryId({
        systemAdmin,
        storyId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (delete) an AI-generated story from storyfield_ai_stories (hard
   * delete).
   *
   * This endpoint enables authenticated users or system administrators to
   * permanently erase a story from the StoryField AI platform. When invoked,
   * the operation performs a hard delete action, removing the story record from
   * the database rather than setting a soft delete timestamp. This ensures
   * compliance with user requests for complete content erasure or
   * administrative content management.
   *
   * Access control policies require that a standard authenticated user may
   * delete only their own stories, while a system administrator may delete any
   * story. All delete actions are audited for compliance, and attempts to erase
   * stories not belonging to the requesting user are rejected with an
   * authorization error. This procedure aligns with GDPR and company data
   * deletion policies.
   *
   * Upon successful deletion, all associated pages, images, and TTS results are
   * cascaded and subsequently purged according to foreign key constraints.
   * Error handling logic provides clear messages for attempts to delete
   * non-existent or already-deleted stories.
   *
   * @param connection
   * @param storyId Unique identifier of the target story to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":storyId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("storyId")
    storyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminStoriesStoryId({
        systemAdmin,
        storyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
