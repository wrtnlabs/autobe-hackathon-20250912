import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchstoryfieldAiSystemAdminSystemAdmins } from "../../../../providers/patchstoryfieldAiSystemAdminSystemAdmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getstoryfieldAiSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/getstoryfieldAiSystemAdminSystemAdminsSystemAdminId";
import { putstoryfieldAiSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/putstoryfieldAiSystemAdminSystemAdminsSystemAdminId";
import { deletestoryfieldAiSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/deletestoryfieldAiSystemAdminSystemAdminsSystemAdminId";

import { IPageIStoryfieldAiSystemAdmin } from "../../../../api/structures/IPageIStoryfieldAiSystemAdmin";
import { IStoryfieldAiSystemAdmin } from "../../../../api/structures/IStoryfieldAiSystemAdmin";

@Controller("/storyfieldAi/systemAdmin/systemAdmins")
export class StoryfieldaiSystemadminSystemadminsController {
  /**
   * Search, filter, and paginate system administrator accounts
   * (storyfield_ai_systemadmins table).
   *
   * Use this operation to retrieve a list of registered StoryField AI system
   * administrator accounts with advanced filtering and pagination capabilities.
   * Typical use cases include system admin listing for monitoring, audit, and
   * emergency access management purposes.
   *
   * The endpoint supports rich query options, including searching by email
   * address, actor type, account creation/update dates, and last login
   * timestamp. Pagination and sorting options are provided for efficient
   * navigation of potentially large admin lists. Input validation ensures only
   * authorized actions and parameters are permitted.
   *
   * This endpoint operates on the storyfield_ai_systemadmins entity as defined
   * in the database schema. Role-based authorization ensures that only users
   * with system admin privileges can access the data, thus protecting sensitive
   * operational information. Results include only active and non-soft-deleted
   * admin accounts by default, unless filtering specifies otherwise.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for system
   *   administrator account retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IStoryfieldAiSystemAdmin.IRequest,
  ): Promise<IPageIStoryfieldAiSystemAdmin.ISummary> {
    try {
      return await patchstoryfieldAiSystemAdminSystemAdmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch detailed info for a single system administrator
   * (storyfield_ai_systemadmins table) by ID.
   *
   * This operation fetches the full profile and metadata for a specific
   * StoryField AI system administrator account, identified by its systemAdminId
   * parameter (UUID, primary key).
   *
   * Detailed information includes external_admin_id, admin email, role
   * descriptor, audit timestamps (created_at, updated_at, last_login_at),
   * privilege notes, and soft deletion status. This function is essential for
   * auditing, privilege escalation, emergency lockout, or compliance review.
   *
   * The operation enforces strict systemAdmin role authorization. System admin
   * account details are confidential and only accessible to users with elevated
   * system-level privileges. If the account is soft deleted, this is indicated
   * in the response.
   *
   * Related operations include admin list/search (PATCH /systemAdmins), admin
   * account modification (PUT), and admin account removal (DELETE).
   *
   * @param connection
   * @param systemAdminId Unique identifier for the target system administrator.
   *   Must be a valid UUID string.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemAdminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<IStoryfieldAiSystemAdmin> {
    try {
      return await getstoryfieldAiSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update profile or admin notes of a system administrator
   * (storyfield_ai_systemadmins table).
   *
   * Use this operation to update core properties of a StoryField AI system
   * administrator account, identified by the systemAdminId path parameter
   * (UUID).
   *
   * Allowed updates may include admin email, privilege/role descriptor
   * (actor_type), administrative notes, and status toggling (where applicable).
   * Timestamp fields are updated automatically. Strict input validation is
   * enforced according to the database schema. Changes are permanently recorded
   * in audit trails for compliance and forensic review.
   *
   * System-level role authorization is required to modify any administrator
   * account. This operation is typically combined with the GET (detail) and
   * PATCH (list/search) endpoints for lifecycle management of admin users.
   *
   * @param connection
   * @param systemAdminId Unique identifier of the administrator to update. Must
   *   be a valid UUID string.
   * @param body Update fields for the targeted system administrator, such as
   *   email, role, privilege notes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemAdminId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IStoryfieldAiSystemAdmin.IUpdate,
  ): Promise<IStoryfieldAiSystemAdmin> {
    try {
      return await putstoryfieldAiSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (deactivate) a system administrator account
   * (storyfield_ai_systemadmins table).
   *
   * This operation marks the specified admin account as deleted by updating the
   * deleted_at field (soft delete) in the storyfield_ai_systemadmins table. The
   * account then becomes inaccessible for login or management actions, although
   * data is retained for audit and compliance.
   *
   * The operation is restricted to users with systemAdmin privileges. No hard
   * deletion is performed, preserving business history and traceability.
   * Attempts to delete a non-existent or already-deleted account return
   * appropriate error messaging.
   *
   * This endpoint is often used together with admin user search, detail, and
   * update operations to support the full lifecycle management of system
   * administrators.
   *
   * @param connection
   * @param systemAdminId UUID of the system administrator account to
   *   soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemAdminId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletestoryfieldAiSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
