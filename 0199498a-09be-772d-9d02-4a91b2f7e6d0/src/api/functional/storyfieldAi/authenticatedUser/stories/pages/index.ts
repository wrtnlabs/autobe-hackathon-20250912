import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiStoryPage } from "../../../../../structures/IStoryfieldAiStoryPage";
import { IPageIStoryfieldAiStoryPage } from "../../../../../structures/IPageIStoryfieldAiStoryPage";

/**
 * Create a new page for a given storyId in storyfield_ai_story_pages (insert).
 *
 * Insert a new page into an existing AI-generated fairy tale. Authenticated
 * users may add pages to their own stories, while system administrators can
 * modify any story as required for moderation, recovery, or technical editing.
 * Security rules ensure only authorized users can alter story content.
 *
 * The API requires structured data specifying the new page's content, such as
 * the textual content, intended page number, and optional metadata. Upon
 * successful creation, the operation returns the completed page entity,
 * including all audit fields (creation/update timestamps, soft deletion support
 * fields).
 *
 * Any attempt to add a page to a story not owned by the user or to non-existent
 * stories results in error responses. The operation upholds content compliance,
 * auditability, and full traceability.
 *
 * @param props.connection
 * @param props.storyId Unique identifier of the story to which the new page
 *   will be added.
 * @param props.body Page data (text, order, metadata) required to create a new
 *   story page.
 * @path /storyfieldAi/authenticatedUser/stories/:storyId/pages
 * @accessor api.functional.storyfieldAi.authenticatedUser.stories.pages.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the story to which the new page will be added. */
    storyId: string & tags.Format<"uuid">;

    /**
     * Page data (text, order, metadata) required to create a new story
     * page.
     */
    body: IStoryfieldAiStoryPage.ICreate;
  };
  export type Body = IStoryfieldAiStoryPage.ICreate;
  export type Response = IStoryfieldAiStoryPage;

  export const METADATA = {
    method: "POST",
    path: "/storyfieldAi/authenticatedUser/stories/:storyId/pages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/authenticatedUser/stories/${encodeURIComponent(props.storyId ?? "null")}/pages`;
  export const random = (): IStoryfieldAiStoryPage =>
    typia.random<IStoryfieldAiStoryPage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storyId")(() => typia.assert(props.storyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and paginate all pages of a story (storyfield_ai_story_pages) for a
 * given storyId.
 *
 * Fetch a filtered and paginated list of pages for a particular AI-generated
 * fairy tale. This endpoint is intended for use by authenticated users seeking
 * to view their own story's content, or by system administrators reviewing any
 * story. It supports advanced pagination, search, and sorting options for
 * navigating long stories efficiently.
 *
 * Access controls are enforced so users can only access the pages of stories
 * they own, while administrators have system-wide access. Each result includes
 * page number, generated text, and audit metadata (creation and update
 * timestamps), with support for soft-deleted record filtering if required by
 * compliance workflows.
 *
 * The operation integrates the storyfield_ai_story_pages table, applying
 * filtering based on the parent story's ownership. The response returns a
 * paginated set of page summaries, suited for display in story readers or admin
 * review panels. Errors for access violations or invalid story references are
 * returned in a clear, compliant format.
 *
 * @param props.connection
 * @param props.storyId Unique identifier of the story whose pages are to be
 *   listed.
 * @param props.body Filtering and pagination options for searching story pages
 *   within a story.
 * @path /storyfieldAi/authenticatedUser/stories/:storyId/pages
 * @accessor api.functional.storyfieldAi.authenticatedUser.stories.pages.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the story whose pages are to be listed. */
    storyId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination options for searching story pages within a
     * story.
     */
    body: IStoryfieldAiStoryPage.IRequest;
  };
  export type Body = IStoryfieldAiStoryPage.IRequest;
  export type Response = IPageIStoryfieldAiStoryPage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/authenticatedUser/stories/:storyId/pages",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/authenticatedUser/stories/${encodeURIComponent(props.storyId ?? "null")}/pages`;
  export const random = (): IPageIStoryfieldAiStoryPage.ISummary =>
    typia.random<IPageIStoryfieldAiStoryPage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storyId")(() => typia.assert(props.storyId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific page (storyfield_ai_story_pages) by
 * storyId and pageId.
 *
 * This operation allows an authenticated user to retrieve the complete content
 * and metadata of a single page within their own story, or for a system
 * administrator to access any story page for moderation or review.
 * Authorization checks ensure that users can only fetch pages from stories they
 * own, while system administrators have full access for all stories.
 *
 * The response supplies detailed page information, including full AI-generated
 * text, the logical page number, creation and update timestamps, and soft
 * deletion status. This supports context-aware story viewing and targeted page
 * editing or moderation.
 *
 * If the specified pageId or storyId does not exist or does not belong to the
 * user, a clear error message is returned, describing the violation. All
 * operations comply with audit and content traceability requirements for
 * compliance and user accountability.
 *
 * @param props.connection
 * @param props.storyId Unique identifier of the parent story.
 * @param props.pageId Unique identifier of the story page to retrieve.
 * @path /storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId
 * @accessor api.functional.storyfieldAi.authenticatedUser.stories.pages.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent story. */
    storyId: string & tags.Format<"uuid">;

    /** Unique identifier of the story page to retrieve. */
    pageId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiStoryPage;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/authenticatedUser/stories/${encodeURIComponent(props.storyId ?? "null")}/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): IStoryfieldAiStoryPage =>
    typia.random<IStoryfieldAiStoryPage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storyId")(() => typia.assert(props.storyId));
      assert.param("pageId")(() => typia.assert(props.pageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update text and ordering for a specific story page belonging to a
 * user-generated fairy tale (storyfield_ai_story_pages table).
 *
 * This operation allows an authenticated user to update the text and page
 * number of a specific page within their own AI-generated story, as defined in
 * the storyfield_ai_story_pages table. The path parameters uniquely identify
 * both the story and the page, providing fine-grained access control for
 * revision scenarios, such as fixing typos or reorganizing story flow.
 *
 * Permission checks are enforced: only the page's creator (matched to the
 * session's authenticatedUser) or a system administrator can update a page. The
 * endpoint ensures the parent story/page is not soft-deleted (deleted_at is
 * null) before proceeding, and it rejects attempts to modify pages of deleted
 * or unauthorized stories. All updates require explicit verification that the
 * user owns the parent story or holds the admin role.
 *
 * This operation is critical for ensuring all edits are logged for compliance
 * and traceability. Business logic includes atomic update of textual content,
 * page number, and updated_at timestamp, while preserving the original creator
 * and audit trail. Error handling returns precise codes for unauthorized
 * access, invalid/soft-deleted resources, and input validation failures. If the
 * page does not exist or is deleted, a not-found error is returned.
 *
 * Related operations include get, creation, and deletion of pages, all of which
 * enforce the same role and ownership logic for secure management of user
 * content.
 *
 * @param props.connection
 * @param props.storyId Unique identifier for the target story (UUID of the
 *   parent story in storyfield_ai_stories).
 * @param props.pageId Unique identifier for the page to be updated (UUID in
 *   storyfield_ai_story_pages).
 * @param props.body Payload specifying the updated text and page number for the
 *   story page. All fields are validated for business rules and policy
 *   compliance. Uses IStoryfieldAiStoryPage.IUpdate.
 * @path /storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId
 * @accessor api.functional.storyfieldAi.authenticatedUser.stories.pages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier for the target story (UUID of the parent story in
     * storyfield_ai_stories).
     */
    storyId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the page to be updated (UUID in
     * storyfield_ai_story_pages).
     */
    pageId: string & tags.Format<"uuid">;

    /**
     * Payload specifying the updated text and page number for the story
     * page. All fields are validated for business rules and policy
     * compliance. Uses IStoryfieldAiStoryPage.IUpdate.
     */
    body: IStoryfieldAiStoryPage.IUpdate;
  };
  export type Body = IStoryfieldAiStoryPage.IUpdate;
  export type Response = IStoryfieldAiStoryPage;

  export const METADATA = {
    method: "PUT",
    path: "/storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/authenticatedUser/stories/${encodeURIComponent(props.storyId ?? "null")}/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): IStoryfieldAiStoryPage =>
    typia.random<IStoryfieldAiStoryPage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storyId")(() => typia.assert(props.storyId));
      assert.param("pageId")(() => typia.assert(props.pageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (deactivate) a specific story page in storyfield_ai_story_pages
 * for content removal, audit, or compliance.
 *
 * This operation allows an authenticated user or system administrator to delete
 * a specific page of a story they own, as represented in the
 * storyfield_ai_story_pages table. Deletion is performed as a soft delete by
 * setting the deleted_at field, preserving data for audit, recovery, or
 * compliance purposes. The operation enforces that only the original content
 * creator or a systemAdmin may delete the page, and checks that the page and
 * its parent story are not already deleted.
 *
 * When invoked, the operation updates the relevant page's deleted_at timestamp,
 * making it inaccessible in standard queries or list operations. This ensures
 * that users cannot delete or modify content they do not own. The system
 * enforces strict permission checks at the API boundary, and inadequate
 * privileges or attempts to modify deleted/nonexistent pages return clear error
 * messages.
 *
 * This endpoint integrates with audit log flows and supports cross-entity
 * cleanup (such as hiding attached images or TTS). It should be used alongside
 * creation and update of pages, always enforcing the same role and ownership
 * rules. All business policies for page-level deletion—including compliance and
 * parental content protection—are respected by this operation.
 *
 * @param props.connection
 * @param props.storyId Unique identifier for the parent story (UUID in
 *   storyfield_ai_stories).
 * @param props.pageId Unique identifier for the page targeted for deletion
 *   (UUID in storyfield_ai_story_pages).
 * @path /storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId
 * @accessor api.functional.storyfieldAi.authenticatedUser.stories.pages.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier for the parent story (UUID in
     * storyfield_ai_stories).
     */
    storyId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the page targeted for deletion (UUID in
     * storyfield_ai_story_pages).
     */
    pageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/storyfieldAi/authenticatedUser/stories/:storyId/pages/:pageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/authenticatedUser/stories/${encodeURIComponent(props.storyId ?? "null")}/pages/${encodeURIComponent(props.pageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storyId")(() => typia.assert(props.storyId));
      assert.param("pageId")(() => typia.assert(props.pageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
