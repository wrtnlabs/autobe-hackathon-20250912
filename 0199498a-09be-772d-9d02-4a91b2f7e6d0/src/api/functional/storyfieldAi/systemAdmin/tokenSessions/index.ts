import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiTokenSession } from "../../../../structures/IStoryfieldAiTokenSession";
import { IPageIStoryfieldAiTokenSession } from "../../../../structures/IPageIStoryfieldAiTokenSession";

/**
 * List and search authentication token sessions (admin only) from
 * storyfield_ai_token_sessions.
 *
 * Retrieve a paginated, filtered list of authentication sessions across all
 * users and system administrators. This operation supports complex queries over
 * the storyfield_ai_token_sessions table from the Prisma schema. Administrators
 * can search by user ID, admin ID, issued_at, expires_at, token hash
 * (fingerprint), and session status (active, expired, revoked). All search
 * criteria must correspond to actual fields documented in the schema
 * specification.
 *
 * Only system administrators are permitted to access this endpoint, reflecting
 * the critical role of session monitoring and control for platform security.
 * Returned sessions include both authenticated user- and admin-linked records,
 * as well as session lifecycle details: issued_at, expires_at,
 * last_activity_at, refresh status, deletion (soft), plus fingerprints for
 * device/browser validation.
 *
 * Strong data governance and privacy rules must be applied: token_hash is shown
 * as hashed only, never the actual token value. All session data presented must
 * be audit-safe and traceable for compliance. This operation should support
 * admin troubleshooting of login problems, forced logout, or abuse
 * detectionâ€”never for business-user-level session viewing.
 *
 * @param props.connection
 * @param props.body Complex filter, pagination, and search criteria for session
 *   records
 * @path /storyfieldAi/systemAdmin/tokenSessions
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenSessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Complex filter, pagination, and search criteria for session records */
    body: IStoryfieldAiTokenSession.IRequest;
  };
  export type Body = IStoryfieldAiTokenSession.IRequest;
  export type Response = IPageIStoryfieldAiTokenSession.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/tokenSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/tokenSessions";
  export const random = (): IPageIStoryfieldAiTokenSession.ISummary =>
    typia.random<IPageIStoryfieldAiTokenSession.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information on an authentication token session by ID (admin
 * only).
 *
 * Retrieve all detailed information for a specified authentication token
 * session. This endpoint fetches the complete storyfield_ai_token_sessions
 * record by tokenSessionId, allowing system administrators to audit session
 * history, troubleshoot security incidents, resolve user access problems, or
 * validate session lifecycle compliance.
 *
 * The response includes all session attributes defined in the Prisma schema:
 * session ID, links to the associated authenticated user or system admin,
 * fingerprint, issued_at, expires_at, refreshed_at, last_activity_at, and soft
 * deletion timestamp if applicable. Real token values are never revealed; only
 * the hash stored in the DB is shown. Ensures strong traceability for
 * operational and compliance use.
 *
 * Strict role restriction: only systemAdmin users may access this operation,
 * and only for operational security or audit. Nonexistent or expired sessions
 * return clear error responses as per platform error handling policy.
 *
 * @param props.connection
 * @param props.tokenSessionId Unique identifier (UUID) of the target
 *   authentication token session
 * @path /storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target authentication token session */
    tokenSessionId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiTokenSession;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/tokenSessions/${encodeURIComponent(props.tokenSessionId ?? "null")}`;
  export const random = (): IStoryfieldAiTokenSession =>
    typia.random<IStoryfieldAiTokenSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tokenSessionId")(() => typia.assert(props.tokenSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific authentication token session's allowed fields by ID (admin
 * only).
 *
 * Update mutable attributes of a given authentication token session by its ID.
 * Only accessible by system administrators, this operation enables operational
 * control over session lifecycle adjustments as required by security policy:
 * forced expiry (logout), fingerprint modification for device corrections, or
 * adjusting refresh timestamps as part of compliance workflows.
 *
 * The request body must adhere to the IStoryfieldAiTokenSession.IUpdate schema,
 * which is strictly limited to safe, permissible session fields. This does not
 * allow changing user/admin linkage, actual token value (which should remain
 * only as a hash), or other immutable identifiers. Error handling includes
 * session not found, invalid update attempts, and compliance violation cases.
 *
 * Successful updates return the full, updated token session record for
 * administrative confirmation. Logging of update actions for audit trails is
 * strongly recommended. Only system administrators may use this endpoint, as
 * improper use could impact overall system integrity.
 *
 * @param props.connection
 * @param props.tokenSessionId UUID of the authentication session to update
 * @param props.body Fields to update for the session (expires_at, fingerprint,
 *   etc.)
 * @path /storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the authentication session to update */
    tokenSessionId: string & tags.Format<"uuid">;

    /** Fields to update for the session (expires_at, fingerprint, etc.) */
    body: IStoryfieldAiTokenSession.IUpdate;
  };
  export type Body = IStoryfieldAiTokenSession.IUpdate;
  export type Response = IStoryfieldAiTokenSession;

  export const METADATA = {
    method: "PUT",
    path: "/storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/systemAdmin/tokenSessions/${encodeURIComponent(props.tokenSessionId ?? "null")}`;
  export const random = (): IStoryfieldAiTokenSession =>
    typia.random<IStoryfieldAiTokenSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tokenSessionId")(() => typia.assert(props.tokenSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (force logout) a specified authentication token session (admin
 * only).
 *
 * Permanently disables (soft-deletes) a targeted authentication token session
 * by setting its deleted_at timestamp via the storyfield_ai_token_sessions
 * schema. Employed by system administrators to forcibly logout a user or admin,
 * respond to abuse or compromise, or close a session as part of policy
 * enforcement. After this action, the session is invalid for any further
 * authentication attempts but remains in the database for compliance tracking
 * and audit review.
 *
 * Only system admins are permitted access to this operation; non-admins cannot
 * forcibly remove session records. If the tokenSessionId does not exist or is
 * already deleted, the result is a compliant error with a detailed message. No
 * request body is used. Audit logs are recommended for all such administrative
 * deactions to ensure traceability of forced logouts and session terminations.
 *
 * @param props.connection
 * @param props.tokenSessionId UUID of the token session to be deactivated
 *   (soft-delete)
 * @path /storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the token session to be deactivated (soft-delete) */
    tokenSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/storyfieldAi/systemAdmin/tokenSessions/:tokenSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/tokenSessions/${encodeURIComponent(props.tokenSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tokenSessionId")(() => typia.assert(props.tokenSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
