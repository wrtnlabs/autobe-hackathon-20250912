import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiTokenRevocation } from "../../../../structures/IStoryfieldAiTokenRevocation";
import { IPageIStoryfieldAiTokenRevocation } from "../../../../structures/IPageIStoryfieldAiTokenRevocation";

/**
 * Search, filter, and retrieve a paginated list of token revocation events
 * (systemAdmin only; storyfield_ai_token_revocations).
 *
 * Retrieve a filtered and paginated list of all authentication token revocation
 * events from the system. This allows system administrators to search for
 * revoked tokens issued to any user or admin, filter by revocation reason or
 * time, and view which administrator acted on each revocation. Each record
 * includes the token hash, revocation rationale, related user or admin, and
 * timestamps for traceability.
 *
 * This operation operates on the storyfield_ai_token_revocations table in the
 * database. Security considerations require that only users with the
 * systemAdmin role should have access, since revocation event details may
 * reveal sensitive incident response actions or compromise context.
 *
 * The search parameters may include token hash, admin or user identifiers,
 * creation dates, and reason for revocation. Pagination and sorting are
 * supported for efficient auditing of large volumes of records. Results only
 * include summary views (no full session or token detail is returned here).
 *
 * Appropriate validation prevents exposure of sensitive token values and
 * ensures revocation audit logs remain readonly to admins only. Related
 * operations include viewing a single revocation record in detail and creating
 * a new revocation event (by business flow, not direct user API).
 *
 * Expected error cases include insufficient authorization (non-admin attempting
 * to access logs) or unmatchable query parameters. All query activity should be
 * tracked for compliance review.
 *
 * @param props.connection
 * @param props.body Query, filtering, and pagination parameters for revocation
 *   records, such as token hash, admin/user, date range, and reason.
 * @path /storyfieldAi/systemAdmin/tokenRevocations
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenRevocations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query, filtering, and pagination parameters for revocation records,
     * such as token hash, admin/user, date range, and reason.
     */
    body: IStoryfieldAiTokenRevocation.IRequest;
  };
  export type Body = IStoryfieldAiTokenRevocation.IRequest;
  export type Response = IPageIStoryfieldAiTokenRevocation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/tokenRevocations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/tokenRevocations";
  export const random = (): IPageIStoryfieldAiTokenRevocation.ISummary =>
    typia.random<IPageIStoryfieldAiTokenRevocation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * View detailed information about a specific token revocation event
 * (systemAdmin only; storyfield_ai_token_revocations).
 *
 * Retrieve detailed information about an individual token revocation event from
 * the storyfield_ai_token_revocations table. This is typically used by system
 * administrators when investigating security incidents, abuse reports, or user
 * access control issues. The returned record includes contextual data, such as
 * which session or user was involved, which administrator performed the
 * revocation, the explicit reason recorded for revocation, timestamp, relevant
 * IP address, and the (hashed) token reference.
 *
 * For audit integrity, only systemAdmin users can access this information, and
 * full token values are never exposedâ€”only their hashes and related metadata.
 * This endpoint is closely related to the list/search of revocations, and may
 * be used after finding a record of interest via the broader search API.
 *
 * Access and usage of this endpoint are logged for compliance. Authorization
 * failure and not-found errors are handled with clear, specific error
 * responses. No editing or deletion of revocation logs is possible.
 *
 * @param props.connection
 * @param props.tokenRevocationId Unique identifier (UUID) of the token
 *   revocation event to retrieve.
 * @path /storyfieldAi/systemAdmin/tokenRevocations/:tokenRevocationId
 * @accessor api.functional.storyfieldAi.systemAdmin.tokenRevocations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the token revocation event to retrieve. */
    tokenRevocationId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiTokenRevocation;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/tokenRevocations/:tokenRevocationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/tokenRevocations/${encodeURIComponent(props.tokenRevocationId ?? "null")}`;
  export const random = (): IStoryfieldAiTokenRevocation =>
    typia.random<IStoryfieldAiTokenRevocation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tokenRevocationId")(() =>
        typia.assert(props.tokenRevocationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
