import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStoryfieldAiServiceAlert } from "../../../../structures/IStoryfieldAiServiceAlert";
import { IPageIStoryfieldAiServiceAlert } from "../../../../structures/IPageIStoryfieldAiServiceAlert";

/**
 * Create a new service alert or technical event record
 * (storyfield_ai_service_alerts table).
 *
 * Create a new service alert or technical/system event record for monitoring,
 * incident response, or compliance tracking. This API endpoint is restricted to
 * system administrators, requiring all mandatory information about the alert
 * (e.g., alertType, alertCode, content, environment) to be supplied in the
 * request body.
 *
 * All new alerts are immediately available for search, dashboard display, and
 * operational review. This operation is closely aligned with the
 * storyfield_ai_service_alerts Prisma schema. Required fields include the alert
 * type (such as error, warning, info, incident, quota), a unique business or
 * technical alert code, the human-readable content describing the event, the
 * target environment (production, staging, etc.), and optional resolution notes
 * if the alert represents a closed incident.
 *
 * Insertions are logged for audit and compliance. Validation is enforced for
 * all mandatory fields, and only users with the "systemAdmin" role are
 * permitted to create new alert/event records in the system.
 *
 * @param props.connection
 * @param props.body Details for the new service alert/event to be created
 *   (type, code, content, environment, etc).
 * @path /storyfieldAi/systemAdmin/serviceAlerts
 * @accessor api.functional.storyfieldAi.systemAdmin.serviceAlerts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details for the new service alert/event to be created (type, code,
     * content, environment, etc).
     */
    body: IStoryfieldAiServiceAlert.ICreate;
  };
  export type Body = IStoryfieldAiServiceAlert.ICreate;
  export type Response = IStoryfieldAiServiceAlert;

  export const METADATA = {
    method: "POST",
    path: "/storyfieldAi/systemAdmin/serviceAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/serviceAlerts";
  export const random = (): IStoryfieldAiServiceAlert =>
    typia.random<IStoryfieldAiServiceAlert>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List, search, and paginate service alert event records
 * (storyfield_ai_service_alerts table).
 *
 * Retrieve a paginated and filterable list of service alerts from the system
 * alert and event notification log. This operation supports complex search
 * parameters including filtering by alert type (error, warning, info, quota,
 * incident, recovery), event environment (production, staging, etc.),
 * resolution status, and time window.
 *
 * The response contains summary information for each alert, facilitating rapid
 * triage by platform administrators and allowing detailed drill-down into
 * specific service events. Authorization is strictly limited to users with the
 * "systemAdmin" role. Pagination, sorting, and advanced filtering capabilities
 * are supported by the request body schema, ensuring rapid and targeted access
 * to incidents, warnings, or informational events.
 *
 * This API is based on the storyfield_ai_service_alerts Prisma model, which
 * tracks all major service system events, including errors, warnings, quota
 * breaches, automated recovery, and incident reports for system reliability.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination criteria for service
 *   alerts index/search.
 * @path /storyfieldAi/systemAdmin/serviceAlerts
 * @accessor api.functional.storyfieldAi.systemAdmin.serviceAlerts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search, and pagination criteria for service alerts
     * index/search.
     */
    body: IStoryfieldAiServiceAlert.IRequest;
  };
  export type Body = IStoryfieldAiServiceAlert.IRequest;
  export type Response = IPageIStoryfieldAiServiceAlert.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/storyfieldAi/systemAdmin/serviceAlerts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/storyfieldAi/systemAdmin/serviceAlerts";
  export const random = (): IPageIStoryfieldAiServiceAlert.ISummary =>
    typia.random<IPageIStoryfieldAiServiceAlert.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a service alert event record by ID
 * (storyfield_ai_service_alerts table).
 *
 * Fetch detailed information about a specific service alert event by unique ID
 * for inspection, incident review, or compliance documentation. This API only
 * grants access to users with the "systemAdmin" role, supporting full retrieval
 * of all alert metadata including alert type (error, warning, info, incident),
 * alert code, descriptive content, target environment, resolution/closure
 * status, and associated resolution notes.
 *
 * This operation enforces strict access control, ensuring no sensitive
 * operational data is exposed to non-authorized users. Internally, it queries
 * the storyfield_ai_service_alerts table, returning all fields specified for
 * alert diagnostics and administrative action tracking. If the requested alert
 * does not exist, a well-defined error message is returned according to
 * business logic.
 *
 * @param props.connection
 * @param props.serviceAlertId Unique identifier of the service alert event to
 *   retrieve.
 * @path /storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId
 * @accessor api.functional.storyfieldAi.systemAdmin.serviceAlerts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the service alert event to retrieve. */
    serviceAlertId: string & tags.Format<"uuid">;
  };
  export type Response = IStoryfieldAiServiceAlert;

  export const METADATA = {
    method: "GET",
    path: "/storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/serviceAlerts/${encodeURIComponent(props.serviceAlertId ?? "null")}`;
  export const random = (): IStoryfieldAiServiceAlert =>
    typia.random<IStoryfieldAiServiceAlert>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("serviceAlertId")(() => typia.assert(props.serviceAlertId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing service alert record in the storyfield_ai_service_alerts
 * table.
 *
 * This API operation is responsible for updating a specific service alert in
 * the storyfield_ai_service_alerts table, as referenced by the unique
 * serviceAlertId path parameter (UUID).
 *
 * The operation enables system administrators to edit various fields of an
 * existing alert: alert_type (e.g., error, warning, info), alert_code
 * (optional), content, environment (such as production or staging), resolved
 * (boolean indicating whether the issue has been addressed), and
 * resolution_note (optional note for closure). Changing the "resolved" status
 * is a typical workflow for this endpoint, as resolved alerts can be marked as
 * closed with a note about the resolution steps.
 *
 * To maintain system integrity, only users with the "systemAdmin" role are
 * authorized to invoke this operation. Requests by unauthorized users must be
 * rejected and logged.
 *
 * The operation is tightly coupled to the storyfield_ai_service_alerts entity,
 * following its schema for updatable fields. All changes should be fully
 * validated—e.g., only allowable values for alert_type, sanitized text for
 * content, and corresponding notes where appropriate. Each update must be
 * subject to audit logging as required by compliance policies.
 *
 * This operation may be used in conjunction with alert listing (PATCH
 * /serviceAlerts) and deletion (DELETE /serviceAlerts/{serviceAlertId}),
 * forming part of the administrative alert lifecycle management capabilities.
 * If the specified alert does not exist or has been previously deleted (soft
 * delete), the system should return a not-found or conflict error status as
 * appropriate.
 *
 * @param props.connection
 * @param props.serviceAlertId Unique identifier of the service alert to be
 *   updated.
 * @param props.body Fields to update for the service alert record. Includes
 *   mutable attributes such as alert_type, alert_code, content, environment,
 *   resolved, and resolution_note.
 * @path /storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId
 * @accessor api.functional.storyfieldAi.systemAdmin.serviceAlerts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the service alert to be updated. */
    serviceAlertId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the service alert record. Includes mutable
     * attributes such as alert_type, alert_code, content, environment,
     * resolved, and resolution_note.
     */
    body: IStoryfieldAiServiceAlert.IUpdate;
  };
  export type Body = IStoryfieldAiServiceAlert.IUpdate;
  export type Response = IStoryfieldAiServiceAlert;

  export const METADATA = {
    method: "PUT",
    path: "/storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/storyfieldAi/systemAdmin/serviceAlerts/${encodeURIComponent(props.serviceAlertId ?? "null")}`;
  export const random = (): IStoryfieldAiServiceAlert =>
    typia.random<IStoryfieldAiServiceAlert>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("serviceAlertId")(() => typia.assert(props.serviceAlertId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (logical removal) a specific service alert record for system
 * administration.
 *
 * This API operation implements soft deletion of a specific service alert in
 * the storyfield_ai_service_alerts table, identified by the unique
 * serviceAlertId provided as a path parameter.
 *
 * Only system administrators are permitted to delete service alerts. The
 * operation sets the deleted_at timestamp, marking the alert as inactive for
 * business and reporting purposes, but retaining it for compliance and future
 * audit. It does not physically erase the record.
 *
 * Logic includes verifying the existence and non-deleted status of the target
 * alert. If the alert does not exist or has already been deleted, an
 * appropriate not-found or conflict error is returned, and such attempts are
 * logged for administrative review. This operation is integral to lifecycle
 * management of health/incident alerts for the StoryField AI system.
 *
 * All successful and failed deletion attempts must be audit logged, in
 * accordance with policy. Related operations include alert creation, updating,
 * and retrieval, particularly in cases of incident investigation or
 * administrative review.
 *
 * @param props.connection
 * @param props.serviceAlertId Unique identifier of the service alert to be
 *   deleted.
 * @path /storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId
 * @accessor api.functional.storyfieldAi.systemAdmin.serviceAlerts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the service alert to be deleted. */
    serviceAlertId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/storyfieldAi/systemAdmin/serviceAlerts/:serviceAlertId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/storyfieldAi/systemAdmin/serviceAlerts/${encodeURIComponent(props.serviceAlertId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("serviceAlertId")(() => typia.assert(props.serviceAlertId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
