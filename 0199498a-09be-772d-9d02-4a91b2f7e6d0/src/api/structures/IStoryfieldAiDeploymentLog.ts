import { tags } from "typia";

/**
 * Deployment and rollback event log record, representing all major deployment,
 * rollback, hotfix, or environment configuration changes in the StoryField AI
 * system. This schema rigorously defines all key metadata fields tracked for
 * operational, compliance, and incident root-cause audit tracing.
 *
 * Includes full event context for deployment management workflows, CI/CD,
 * changelog review, management dashboards, and long-term compliance reporting.
 * Closely aligned with deployment policy, rollback security, and forensic
 * review requirements. Fully defines relationships to status, outcome,
 * initiator, time, and environment for precise cross-incident correlation.
 *
 * Based on the storyfield_ai_deployment_logs table in Prisma schema, with
 * required audit and compliance metadata as defined by business and regulatory
 * requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiDeploymentLog = {
  /**
   * Unique identifier for the deployment event log record. This is
   * system-generated, using a UUID scheme, and is required for all entity
   * traceability, compliance history, and downstream lookup operations.
   *
   * Generated and persisted as a primary key per business compliance and
   * platform audit rules.
   */
  id: string & tags.Format<"uuid">;

  /**
   * A label identifying this deployment, rollback, or hotfix event. Commonly
   * reflects semantic versioning for releases (e.g., 'v1.10.7'), or unique
   * branch/ticket refs (e.g., 'hotfix-abcdef'). Uniqueness per environment is
   * enforced for both auditing and validation of incident traceability.
   *
   * This property is required for all deployment- and rollback-related
   * actions, and is vital for root cause analysis and monitoring dashboards.
   */
  deployment_label: string;

  /**
   * Type of deployment action. Must be one of: 'deploy', 'rollback',
   * 'hotfix', or 'config-change'.
   *
   * Controls downstream business logic, operational routing, and compliance
   * categorization for deployment management.
   *
   * The value must match system-defined constants for deployment operation
   * style to enable cross-operation analytics and reporting.
   */
  action_type: string;

  /**
   * The name of the environment for which this event log is recorded (e.g.,
   * 'production', 'staging', 'development').
   *
   * The environment value is essential for change management, system
   * diagnostics, and separation of incident resolution between business
   * environments.
   */
  environment: string;

  /**
   * String identifier for who or what triggered the deployment. Typically an
   * administrator email, account name, or CI/CD user, but may also reference
   * system scripts as appropriate. Required for all compliance, incident
   * resolution, and operational review workflows.
   *
   * Directly links each deployment to the responsible party or automated
   * system.
   */
  initiated_by: string;

  /**
   * Status of the deployment event. Typical values are: 'success', 'failed',
   * 'in-progress', or 'aborted'. This controls system visibility on
   * dashboards, compliance review, and operational incident tracking.
   *
   * Required to enable systematic tracking of ended and unresolved deployment
   * cycles.
   */
  status: string;

  /**
   * A textual summary describing the context, purpose, outcome, or impact of
   * this deployment/rollback event. Used for audit, review, and
   * business/technical communication to future administrators and compliance
   * reviewers.
   *
   * The summary field should provide sufficient insight into the nature and
   * impact of this system event for traceability.
   */
  summary: string;

  /**
   * ISO 8601 timestamp indicating when the deployment/rollback event began.
   * Automatically generated by system on creation.
   *
   * Used for audit trail, event ordering, and incident timing analysis.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 timestamp recording when this log entry was last updated.
   * System-managed for traceability of all changes and lifecycle events.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. If present, the record has been logically
   * removed (decommissioned, superceded, or redacted for compliance
   * reasons).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiDeploymentLog {
  /**
   * Request query or body structure for searching and retrieving a paginated
   * list of deployment or rollback events in operational or audit workflows.
   * All properties are optional; supplied parameters are used as search
   * criteria.
   */
  export type IRequest = {
    /**
     * Label identifying the deployment, rollback, or hotfix event (e.g.,
     * version or build tag). String property, used for searching for a
     * specific deployment action.
     */
    deployment_label?: string | undefined;

    /**
     * Type of deployment action. Supports 'deploy', 'rollback', 'hotfix',
     * or 'config-change'. Used as a search/filter criterion.
     */
    action_type?: string | undefined;

    /**
     * The environment context for the deployment event (e.g., 'production',
     * 'staging', 'development'). Enables filtering by environment.
     */
    environment?: string | undefined;

    /**
     * Admin or user identity that performed the
     * deployment/rollback/hotfix/config change event. Used for search.
     */
    initiated_by?: string | undefined;

    /**
     * Outcome/status of the deployment event (e.g., 'success', 'failed',
     * 'in-progress', 'aborted'). Used to filter for events by result.
     */
    status?: string | undefined;

    /**
     * Free-form summary or notes for deployment/rollback event for flexible
     * searching.
     */
    summary?: string | undefined;

    /**
     * Earliest deployment event creation timestamp for filtering/search
     * window (inclusive). ISO 8601 format.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Latest deployment event creation timestamp for filtering/search
     * window (inclusive). ISO 8601 format.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination parameter indicating which page of results to return
     * (1-based). Optional. Default if omitted = 1.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Pagination parameter for number of records per page. Optional.
     * Defaults to system config or 50.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Payload structure for creating a new deployment/rollback/hotfix event log
   * in the StoryField AI platform. This schema strictly enumerates all
   * required deployment metadata, context, and documentation fields for
   * platform traceability, compliance, and incident root-cause triage.
   *
   * Business rules enforce uniqueness of deployment_label within environment,
   * strong typing of action_type and status, and requirement for clear audit
   * trail on all creation events.
   *
   * This create payload is mapped to the storyfield_ai_deployment_logs Prisma
   * table, enabling business-technical handoffs, changelog generation,
   * SOX-style compliance, and incident tracking at scale.
   */
  export type ICreate = {
    /**
     * A label, such as semantic version, rollout name, or hotfix branch
     * reference, required for business and deployment review. Must be
     * unique per environment.
     */
    deployment_label: string;

    /**
     * Deployment event type. Must be one of: 'deploy', 'rollback',
     * 'hotfix', or 'config-change'. Controls operational routing and
     * analytics.
     */
    action_type: string;

    /**
     * Deployment environment context, such as 'production', 'staging', or
     * 'development'. Business logic and roll-back scope are segregated by
     * environment.
     */
    environment: string;

    /**
     * Identifier for admin or CI/CD user/process triggering this deployment
     * event. Enables compliance and audit traceability.
     */
    initiated_by: string;

    /**
     * Lifecycle status for the deployment: one of 'success', 'failed',
     * 'in-progress', or 'aborted'. Used for compliance incident and
     * monitoring cycles.
     */
    status: string;

    /**
     * Human-readable context for deployment, required for audit,
     * diagnostics, and compliance communications.
     */
    summary: string;
  };

  /**
   * Object schema for updates to deployment/rollback event logs. May include
   * status changes, corrections to operational/event classification, and
   * summary clarifications. Only fields provided are patched; all updates are
   * fully logged for audit compliance.
   *
   * This update contract covers business correction, operational review, and
   * retroactive log enhancement flows, supporting full lifecycle visibility
   * and control over all deployment/rollback event metadata.
   */
  export type IUpdate = {
    /**
     * Update the event's type if there was a misclassification or
     * re-statement of deployment/rollback/hotfix.
     */
    action_type?: string | undefined;

    /**
     * Change the scope or target environment for the logged event if
     * needed, e.g., correcting staging/production misroutes.
     */
    environment?: string | undefined;

    /**
     * New status; e.g., to mark previously 'in-progress' events as
     * 'success', 'failed', or 'aborted' as real-world progression occurs.
     */
    status?: string | undefined;

    /**
     * Update log summary to provide or clarify incident details, context,
     * or remediation as they become known.
     */
    summary?: string | undefined;
  };

  /**
   * Summary of a deployment, rollback, hotfix, or config-change event in
   * platform operations.
   *
   * Based on storyfield_ai_deployment_logs. Omits full summary text/details;
   * intended for list/search reporting in admin UIs or audit dashboards.
   * Includes minimal identifying context, status, and timeline.
   */
  export type ISummary = {
    /**
     * Unique identifier for the deployment/rollback event log.
     *
     * Matches storyfield_ai_deployment_logs.id. For direct reference.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Label naming the deployment or rollback event (e.g., version tag,
     * branch, ticket).
     *
     * From storyfield_ai_deployment_logs.deployment_label.
     */
    deployment_label: string;

    /**
     * Type of operation: 'deploy', 'rollback', 'hotfix', 'config-change',
     * etc.
     *
     * From storyfield_ai_deployment_logs.action_type.
     */
    action_type: string;

    /**
     * Target runtime environment for this deployment/rollback (e.g.,
     * 'production', 'staging', 'development').
     *
     * From storyfield_ai_deployment_logs.environment.
     */
    environment: string;

    /**
     * Current/last status of the deployment event (e.g., 'success',
     * 'failed', 'in-progress', 'aborted').
     *
     * From storyfield_ai_deployment_logs.status.
     */
    status: string;

    /**
     * Timestamp when this deployment/rollback event was initiated.
     *
     * From storyfield_ai_deployment_logs.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when this event record was last updated.
     *
     * From storyfield_ai_deployment_logs.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of deletion (if soft-deleted). Null if active. See
     * storyfield_ai_deployment_logs.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
