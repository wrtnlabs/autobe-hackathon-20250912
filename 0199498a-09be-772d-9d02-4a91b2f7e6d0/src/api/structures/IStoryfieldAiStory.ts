import { tags } from "typia";

/**
 * AI-generated fairy tale entity from the `storyfield_ai_stories` table in
 * StoryField AI.
 *
 * This object captures the core business record linking user identity to
 * AI-generated story content, complete with all audit, compliance, and
 * lifecycle fields. Content is always tied to a valid authenticated user and
 * supports full trackability for content moderation, copyright, and operational
 * management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiStory = {
  /**
   * Primary key: unique story identifier, as assigned in
   * `storyfield_ai_stories` table. Used for entity relationships,
   * traceability, and business logic linkage.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key for story owner, referencing authenticated user record in
   * `storyfield_ai_authenticatedusers` table.
   *
   * Enforces ownership and access control in StoryField AI; required for all
   * authenticated business operations involving user-generated content.
   */
  storyfield_ai_authenticateduser_id: string & tags.Format<"uuid">;

  /**
   * Title of the story, either user-provided or AI-generated.
   *
   * Directly taken from the `title` column; required for content browsing and
   * compliance audit.
   */
  title: string;

  /**
   * The main plot or summary of the story provided/selected by the user. Used
   * as a core input for AI generation.
   *
   * Sourced from `main_plot`, this is nullable for user/AI flow flexibility.
   */
  main_plot?: string | null | undefined;

  /**
   * Primary language or dialect in which the story is written (e.g., 'ko-KR',
   * 'Gyeongsang').
   *
   * Maps to the `language` column, required for localization, dialect
   * transformation, and moderation.
   */
  language: string;

  /**
   * Datetime at which the story was created, for audit, compliance, and
   * ordering.
   *
   * Directly reflects `created_at` in schema, used for business and
   * regulatory reporting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Datetime of last update for the story, for trace and incremental
   * compliance audits.
   *
   * From `updated_at` in table.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for story soft deletion (if deactivated/removed). Null if the
   * story is active; set otherwise for GDPR/compliance audit.
   *
   * Directly maps to `deleted_at` in the Prisma schema.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiStory {
  /**
   * Filtering, pagination, and search DTO for AI-generated story index
   * endpoints.
   *
   * Defines search filters for story listing, supporting business dashboard
   * audit and user portals. Maps directly to the Prisma model. Optional;
   * presence of fields modifies the query behavior for flexible business
   * requirements.
   */
  export type IRequest = {
    /** Page number to consume; for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Page size (number of records per page) for pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Partial or exact title of story, for substring search/filter in index
     * view.
     */
    title?: string | undefined;

    /**
     * Language/dialect code or label for story search (e.g., 'ko-KR',
     * 'Gyeongsang').
     *
     * Directly filters stories by the `language` attribute.
     */
    language?: string | undefined;

    /** Start of search time window in ISO 8601 for story `created_at` field. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End boundary (inclusive) of time window in ISO 8601 for story
     * `created_at`.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Start of window for `updated_at` filter, for delta/compliance use
     * cases.
     */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** End boundary for `updated_at` window filter. */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Whether to return soft-deleted (deleted_at != null) stories or not. */
    deleted?: boolean | undefined;
  };

  /**
   * DTO for creating a new AI-generated story. Must specify the required
   * business fields except ownership, id, or audit fields (those are set by
   * the system or derived from authentication context). Based on
   * storyfield_ai_stories Prisma schema.
   *
   * - 'title': Main display name for the story, must be unique per user.
   * - 'main_plot': Optional summary or prompt for content generation.
   * - 'language': Required; determines the story's language/dialect for text
   *   and TTS synthesis.
   *
   * Security Note: User/ownership fields (foreign keys) are not included;
   * story is always owned by the authenticated principal issuing the
   * request.
   */
  export type ICreate = {
    /**
     * Title of the story as provided or generated by the user. This field
     * must be unique per authenticated user. Cannot be empty, may contain
     * Unicode characters, and should be relevant to the main plot or
     * keywords supplied for story generation. Represents the primary label
     * for each AI-generated story on the platform. Source:
     * storyfield_ai_stories.title (Prisma).
     */
    title: string;

    /**
     * The main plot or summary for the story. This is the user's input
     * describing the general theme, scenario, moral, or summary of the
     * story to be generated. Optional. Used as the core prompt or
     * inspiration for the AI. May be omitted for auto-generated plot cases.
     * Source: storyfield_ai_stories.main_plot (Prisma).
     */
    main_plot?: string | null | undefined;

    /**
     * Primary language or dialect option chosen for this story instance
     * (e.g., 'ko', 'en', '경상도'). Must match a supported language/dialect
     * code in the business domain. Required. Source:
     * storyfield_ai_stories.language (Prisma).
     */
    language: string;
  };

  /**
   * Metadata fields permitted for updating a story: only mutable fields
   * allowed. id/ownership is immutable; updated_at is handled by the system.
   *
   * All properties are optional for partial update (PATCH semantic). If a
   * property is omitted, its value is retained. Based on
   * storyfield_ai_stories Prisma schema, business rules, and security
   * requirements.
   */
  export type IUpdate = {
    /**
     * Updated title of the story. If provided, must remain unique for the
     * same user. May be omitted to leave title unchanged. Sourced from
     * storyfield_ai_stories.title (Prisma).
     */
    title?: string | undefined;

    /**
     * Optional updated main plot or summary for the story. May be cleared
     * by setting to null, or replaced with a new string. Linked to
     * storyfield_ai_stories.main_plot (Prisma).
     */
    main_plot?: string | null | undefined;

    /**
     * Updated language or dialect for the story. If provided, must match
     * the list of supported language/dialect codes. Tied to
     * storyfield_ai_stories.language (Prisma).
     */
    language?: string | undefined;
  };
}
