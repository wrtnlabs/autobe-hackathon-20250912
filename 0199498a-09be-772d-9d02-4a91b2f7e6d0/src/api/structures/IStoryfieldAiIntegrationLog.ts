import { tags } from "typia";

/**
 * Integration event and audit log entry for all cross-system or external
 * connector operations.
 *
 * Tracks events such as API calls to external services, S3 uploads, connector
 * triggers, error or retry events. Includes references to user or story where
 * appropriate, along with full event categorization, subsystem, business
 * status, descriptive messages, request/trace identifiers, and full
 * audit/compliance timestamps. Supports system-wide monitoring,
 * troubleshooting, and operational audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStoryfieldAiIntegrationLog = {
  /**
   * Unique identifier for the integration log record. Primary key in
   * database, used for referencing this event in audits or operations. Always
   * a UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional reference to the user involved in the integration event. Null if
   * unrelated to a specific user. Critical for business and compliance
   * review.
   */
  storyfield_ai_authenticateduser_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * Optional reference to the story associated with the event. Null for
   * system-level or userless events. Supports cross-object traceability for
   * compliance and root cause analysis.
   */
  storyfield_ai_story_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type or category of integration event (API_CALL, CONNECTOR_TRIGGER,
   * S3_UPLOAD, ERROR). Indicates the business process or connector
   * responsible for the event.
   */
  event_type: string;

  /**
   * Name of the business or technical subsystem or connector involved (e.g.,
   * s3, openai, tts_engine). Used in business process monitoring and audit.
   */
  subsystem: string;

  /**
   * Business status or result of the integration event (e.g., SUCCESS,
   * FAILURE, PARTIAL). Used by compliance, reliability, and operational
   * dashboards.
   */
  status: string;

  /**
   * Human-friendly description, diagnostic trace, or error message associated
   * with this integration event. Nullable for events that succeeded with no
   * descriptive message.
   */
  message?: string | null | undefined;

  /**
   * Request or correlation identifier for distributed event mapping. Enables
   * root cause tracing and relationship tracking for external integrations.
   */
  request_id?: string | null | undefined;

  /**
   * Timestamp for when the integration event occurred or was logged
   * (ISO8601). Used for business, compliance, and operational timelines.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last log entry update (ISO8601). Reflects business event
   * completion, retries, or audit adjustments.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion or logical removal timestamp (ISO8601) for the integration
   * event if applicable. Null if not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IStoryfieldAiIntegrationLog {
  /**
   * Request structure for querying integration event logs with rich filters
   * and pagination.
   *
   * Used by system administrators and auditors to search integration logs by
   * type, subsystem, status, time-range, free-text keywords, or sorted order.
   * Enables fast and precise filtering for operational monitoring,
   * troubleshooting, or compliance review. Pagination support is present for
   * scalable result navigation.
   */
  export type IRequest = {
    /**
     * Filter for event logs by the type of integration event (e.g.,
     * API_CALL, S3_UPLOAD, ERROR, RECOVERY). Enables focused searches for
     * operational, audit, or forensic review.
     */
    event_type?: string | undefined;

    /**
     * Subsystem or integration connector involved in the event log (e.g.,
     * s3, spring_backend, openai, tts_engine). Used to limit results to a
     * specific external system or integration point.
     */
    subsystem?: string | undefined;

    /**
     * Filter by execution/result status (e.g., SUCCESS, FAILURE, PARTIAL).
     * Supports incident review and operational reliability analysis.
     */
    status?: string | undefined;

    /**
     * Earliest creation timestamp to include in results (ISO8601). Enables
     * time-range filtering for business periods, incidents, or compliance
     * reviews.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Latest creation timestamp to include in results (ISO8601). Useful for
     * narrowing focus to recent events or specific incident windows.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Search filter for matching text in the message context field. Used to
     * find events related to specific errors, operations, user IDs, or
     * external incident codes.
     */
    keyword?: string | undefined;

    /**
     * Requested page number for pagination. Default is usually 1 if unset.
     * Used for paginated or windowed result sets in client UIs.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of results per page (pagination window size). Business
     * or technical policy may dictate maximums for performance.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort field selector, such as created_at or status. Used to control
     * order in which integration events are returned to the client.
     */
    sort_by?: string | undefined;

    /**
     * Order of sort, ascending or descending. Accepted values are 'asc' or
     * 'desc', always check for enum.
     */
    sort_order?: "asc" | "desc" | undefined;
  };
}
