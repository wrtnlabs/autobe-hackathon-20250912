import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId } from "../../../../../providers/getjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId";
import { ManagerAuth } from "../../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../../decorators/payload/ManagerPayload";
import { putjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId } from "../../../../../providers/putjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId";
import { deletejobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId } from "../../../../../providers/deletejobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId";
import { postjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasks } from "../../../../../providers/postjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasks";

import { IJobPerformanceEvalTask } from "../../../../../api/structures/IJobPerformanceEvalTask";

@Controller("/jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks")
export class JobperformanceevalManagerTaskgroupsTasksController {
  /**
   * Retrieve a task by its ID within a task group.
   *
   * Retrieve detailed information about a specific task within a task group in
   * the Job Performance Evaluation system. This operation fetches the task's
   * unique code, name, optional description, and related knowledge area
   * reference if available.
   *
   * Security is enforced; this operation allows only authenticated users with
   * roles 'employee' or 'manager'. This ensures data integrity and
   * confidentiality.
   *
   * This API corresponds directly to the job_performance_eval_tasks table in
   * the Prisma schema. It returns all relevant fields including timestamps in
   * ISO 8601 format.
   *
   * The parameters 'taskGroupId' and 'taskId' must be valid UUIDs referencing
   * existing resources.
   *
   * This is a read-only operation supporting safe retrieval and will return
   * errors for unauthorized access or non-existent tasks.
   *
   * @param connection
   * @param taskGroupId UUID of the target task group containing the task
   * @param taskId UUID of the target task to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskId")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalTask> {
    try {
      return await getjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId(
        {
          manager,
          taskGroupId,
          taskId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task within a task group.
   *
   * Update the details of an existing task within a task group in the Job
   * Performance Evaluation system. Provides ability to modify fields such as
   * the task code, name, description, and associated knowledge area.
   *
   * Only authenticated users with roles 'employee' or 'manager' may perform
   * this update to maintain job data integrity.
   *
   * The API uses taskGroupId and taskId as path parameters to specify the
   * target task.
   *
   * The request body is validated against the task update schema. Upon success,
   * the updated task data is returned with timestamps.
   *
   * This endpoint supports full task record updates and maintains audit
   * information automatically.
   *
   * @param connection
   * @param taskGroupId UUID of the task group containing the target task
   * @param taskId UUID of the task to update
   * @param body Information to update a task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":taskId")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTask.IUpdate,
  ): Promise<IJobPerformanceEvalTask> {
    try {
      return await putjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId(
        {
          manager,
          taskGroupId,
          taskId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a task within a task group.
   *
   * Permanently delete a task from a specific task group in the Job Performance
   * Evaluation system. This operation removes the task record entirely from the
   * database.
   *
   * Requires valid taskGroupId and taskId path parameters to identify the
   * target task.
   *
   * Accessible only to authenticated users with roles 'employee' or 'manager'
   * to prevent unauthorized deletions.
   *
   * This operation is irreversible and will remove all associated task data
   * completely.
   *
   * Appropriate error responses are returned for invalid IDs or unauthorized
   * access.
   *
   * @param connection
   * @param taskGroupId UUID of the task group containing the task to delete
   * @param taskId UUID of the task to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":taskId")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerTaskGroupsTaskGroupIdTasksTaskId(
        {
          manager,
          taskGroupId,
          taskId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new task within a task group.
   *
   * Create a new task under a specific task group in the Job Performance
   * Evaluation system. The request body includes the task's unique code, name,
   * optional description, and optional knowledge area association.
   *
   * Only authenticated roles 'employee' or 'manager' are permitted to create
   * tasks to ensure controlled job data consistency.
   *
   * The endpoint validates the input JSON against the Prisma schema for the
   * task entity. On success, the newly created task's full data representation
   * is returned, including timestamps.
   *
   * Soft delete is supported in the schema but not exposed via this API.
   *
   * This operation supports updating organizational job definitions securely
   * and correctly.
   *
   * @param connection
   * @param taskGroupId UUID of the task group under which the new task will be
   *   created
   * @param body Information for creating a task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTask.ICreate,
  ): Promise<IJobPerformanceEvalTask> {
    try {
      return await postjobPerformanceEvalManagerTaskGroupsTaskGroupIdTasks({
        manager,
        taskGroupId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
