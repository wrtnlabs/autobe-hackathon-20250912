import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerManagers } from "../../../../providers/patchjobPerformanceEvalManagerManagers";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerManagersId } from "../../../../providers/getjobPerformanceEvalManagerManagersId";
import { putjobPerformanceEvalManagerManagersId } from "../../../../providers/putjobPerformanceEvalManagerManagersId";
import { deletejobPerformanceEvalManagerManagersId } from "../../../../providers/deletejobPerformanceEvalManagerManagersId";

import { IPageIJobPerformanceEvalManager } from "../../../../api/structures/IPageIJobPerformanceEvalManager";
import { IJobPerformanceEvalManager } from "../../../../api/structures/IJobPerformanceEvalManager";

@Controller("/jobPerformanceEval/manager/managers")
export class JobperformanceevalManagerManagersController {
  /**
   * Search and retrieve a filtered, paginated list of managers.
   *
   * This PATCH API endpoint enables complex querying and retrieval of manager
   * records with support for pagination, filters, and sorting. It operates on
   * the job_performance_eval_managers database table.
   *
   * Clients can specify filtering criteria such as name, email, or creation
   * date ranges, along with pagination parameters like page number and size to
   * efficiently retrieve relevant subsets of manager data.
   *
   * The response includes paginated results with manager summary data,
   * providing essential details needed for listing and selection in
   * administrative interfaces.
   *
   * Access control ensures only authorized management users can perform this
   * operation due to the sensitivity of manager data.
   *
   * Error handling includes validation of request parameters and providing
   * informative error responses.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for manager filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalManager.IRequest,
  ): Promise<IPageIJobPerformanceEvalManager.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerManagers({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve manager details by ID.
   *
   * Retrieve detailed information for a manager by their unique identifier.
   * This API operation accesses the job_performance_eval_managers table, which
   * stores manager authentication and profile data.
   *
   * This operation requires authentication and authorization to ensure that
   * only permitted users (such as managers or employees) can access sensitive
   * information.
   *
   * The returned manager data includes the manager's ID, email, name, and
   * timestamps for record creation and updates. Password hashes are never
   * exposed through this API to maintain security.
   *
   * This operation is commonly used in management dashboards or administrative
   * interfaces where individual manager details are displayed for review or
   * further processing.
   *
   * If the manager ID does not exist, the API will return a suitable error
   * indicating the resource was not found.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalManager> {
    try {
      return await getjobPerformanceEvalManagerManagersId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update manager information by ID in the job performance evaluation system.
   * This operation modifies the manager's profile details such as email and
   * name.
   *
   * Password changes are not supported in this endpoint and should be managed
   * via a separate password update API to ensure security best practices.
   *
   * The operation requires a valid manager ID path parameter and a request body
   * with updated fields respecting data validation rules.
   *
   * Upon success, the updated manager details are returned.
   *
   * Authorization is restricted to employees and managers with rights to edit
   * their own or subordinate profiles.
   *
   * This endpoint supports management of user data for authentication and
   * administrative purposes.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @param body Manager update request data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalManager.IUpdate,
  ): Promise<IJobPerformanceEvalManager> {
    try {
      return await putjobPerformanceEvalManagerManagersId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a manager by ID in the job performance evaluation system. This
   * marks the manager record as deleted by setting the deleted_at timestamp.
   *
   * Physical removal of the record is not performed to maintain audit trails
   * and data integrity.
   *
   * The operation requires a manager ID path parameter.
   *
   * Only users with employee and manager privileges can execute this deletion.
   *
   * This function is crucial for managing active managers list by logically
   * removing inactive or removed personnel from the system without losing
   * historical records.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerManagersId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
