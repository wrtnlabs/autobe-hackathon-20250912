import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerEmployeeComments } from "../../../../providers/patchjobPerformanceEvalManagerEmployeeComments";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerEmployeeCommentsId } from "../../../../providers/getjobPerformanceEvalManagerEmployeeCommentsId";

import { IPageIJobPerformanceEvalEmployeeComments } from "../../../../api/structures/IPageIJobPerformanceEvalEmployeeComments";
import { IJobPerformanceEvalEmployeeComments } from "../../../../api/structures/IJobPerformanceEvalEmployeeComments";

@Controller("/jobPerformanceEval/manager/employeeComments")
export class JobperformanceevalManagerEmployeecommentsController {
  /**
   * Search and retrieve employee comments.
   *
   * Retrieve a paginated list of employee comments on job performance
   * evaluations with support for search, filtering, and pagination.
   *
   * Employee comments capture qualitative feedback linked to evaluation cycles
   * for context.
   *
   * Authorization roles: 'employee' and 'manager'.
   *
   * Request Body: Search criteria and pagination details. Response Body:
   * Paginated list of employee comments summaries.
   *
   * @param connection
   * @param body Search and pagination parameters for employee comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEmployeeComments.IRequest,
  ): Promise<IPageIJobPerformanceEvalEmployeeComments.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerEmployeeComments({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get employee comment details by ID.
   *
   * Get detailed information of an employee comment by its unique UUID `id`.
   *
   * Includes comment text, association to employee and evaluation cycle, and
   * timestamps.
   *
   * Authorization roles: 'employee' and 'manager'.
   *
   * @param connection
   * @param id Unique identifier of the employee comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEmployeeComments> {
    try {
      return await getjobPerformanceEvalManagerEmployeeCommentsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
