import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalManagerManagerEvaluations } from "../../../../providers/postjobPerformanceEvalManagerManagerEvaluations";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { patchjobPerformanceEvalManagerManagerEvaluations } from "../../../../providers/patchjobPerformanceEvalManagerManagerEvaluations";
import { getjobPerformanceEvalManagerManagerEvaluationsId } from "../../../../providers/getjobPerformanceEvalManagerManagerEvaluationsId";
import { putjobPerformanceEvalManagerManagerEvaluationsId } from "../../../../providers/putjobPerformanceEvalManagerManagerEvaluationsId";
import { deletejobPerformanceEvalManagerManagerEvaluationsId } from "../../../../providers/deletejobPerformanceEvalManagerManagerEvaluationsId";

import { IJobPerformanceEvalManagerEvaluation } from "../../../../api/structures/IJobPerformanceEvalManagerEvaluation";
import { IPageIJobPerformanceEvalManagerEvaluation } from "../../../../api/structures/IPageIJobPerformanceEvalManagerEvaluation";

@Controller("/jobPerformanceEval/manager/managerEvaluations")
export class JobperformanceevalManagerManagerevaluationsController {
  /**
   * Create a new manager evaluation entry with scores and comments for an
   * employee within a specific evaluation cycle.
   *
   * The manager provides scores on work performance, knowledge and skills,
   * problem solving and collaboration, innovation, and an overall comment.
   *
   * This operation is restricted to users with manager role to ensure security
   * and data integrity.
   *
   * Upon success, the newly created evaluation record is returned.
   *
   * Validation includes checking for valid user IDs, cycle IDs, score ranges
   * (1-5), and required comment fields.
   *
   * Errors may occur if required fields are missing, IDs are invalid, or
   * authorization is not granted.
   *
   * @param connection
   * @param body Manager evaluation creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalManagerEvaluation.ICreate,
  ): Promise<IJobPerformanceEvalManagerEvaluation> {
    try {
      return await postjobPerformanceEvalManagerManagerEvaluations({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of manager evaluations.
   *
   * This API operation allows authenticated managers (role: manager) to search,
   * filter, and paginate through manager evaluation records. The operation
   * accepts comprehensive request body parameters to support complex query
   * scenarios for finding evaluation data by employee, evaluation cycle, score
   * ranges, dates, and other criteria.
   *
   * Security measures ensure access is limited to evaluations for which the
   * requesting manager is authorized. The results return summary information to
   * optimize frontend display.
   *
   * This search endpoint complements detailed read and write operations,
   * facilitating managerial oversight and evaluation management.
   *
   * @param connection
   * @param body Request body containing filters and pagination settings for
   *   manager evaluations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalManagerEvaluation.IRequest,
  ): Promise<IPageIJobPerformanceEvalManagerEvaluation.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerManagerEvaluations({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed manager evaluation by ID.
   *
   * Retrieve a manager's evaluation entry by its unique ID from the
   * job_performance_eval_manager_evaluations table.
   *
   * This operation is intended for managers to view the detailed evaluation
   * they have performed on employees during specific evaluation cycles. The
   * evaluation data includes scores for work performance, knowledge and skills,
   * problem solving and collaboration, innovation, and an overall comment.
   *
   * The endpoint returns the full evaluation record, including management of
   * timestamps and soft deletion status for auditing.
   *
   * Security considerations ensure only authorized roles such as managers can
   * retrieve this information.
   *
   * Possible errors include attempts to access non-existent IDs or unauthorized
   * access attempts.
   *
   * The API supports relationships to employee and evaluation cycle data, which
   * should be referenced separately as needed.
   *
   * @param connection
   * @param id Unique identifier of the manager evaluation record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalManagerEvaluation> {
    try {
      return await getjobPerformanceEvalManagerManagerEvaluationsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a manager evaluation by ID.
   *
   * Update an existing manager evaluation record by its ID.
   *
   * Managers can modify scores for work performance, knowledge and skills,
   * problem solving and collaboration, innovation, and update the comprehensive
   * comment field.
   *
   * This ensures evaluation corrections or amendments can be tracked with audit
   * timestamps.
   *
   * Only users with manager role have permission to perform this update.
   *
   * Error handling covers non-existent records, invalid input data, and
   * unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the manager evaluation to update
   * @param body Manager evaluation update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalManagerEvaluation.IUpdate,
  ): Promise<IJobPerformanceEvalManagerEvaluation> {
    try {
      return await putjobPerformanceEvalManagerManagerEvaluationsId({
        manager,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a manager evaluation by ID.
   *
   * Permanently remove a manager evaluation record identified by its unique ID.
   *
   * This hard delete operation completely deletes the record from the database
   * and cannot be undone.
   *
   * Only users with manager role are authorized to perform this deletion.
   *
   * Error scenarios include attempting to delete a non-existent record or
   * unauthorized access attempts.
   *
   * No response body is returned upon successful deletion.
   *
   * @param connection
   * @param id Unique identifier of the manager evaluation to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalManagerManagerEvaluationsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
