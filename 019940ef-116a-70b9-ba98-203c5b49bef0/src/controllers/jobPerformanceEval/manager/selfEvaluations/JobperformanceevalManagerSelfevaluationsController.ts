import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerSelfEvaluations } from "../../../../providers/patchjobPerformanceEvalManagerSelfEvaluations";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerSelfEvaluationsId } from "../../../../providers/getjobPerformanceEvalManagerSelfEvaluationsId";

import { IPageIJobPerformanceEvalSelfEvaluation } from "../../../../api/structures/IPageIJobPerformanceEvalSelfEvaluation";
import { IJobPerformanceEvalSelfEvaluation } from "../../../../api/structures/IJobPerformanceEvalSelfEvaluation";

@Controller("/jobPerformanceEval/manager/selfEvaluations")
export class JobperformanceevalManagerSelfevaluationsController {
  /**
   * Search and retrieve paginated employee self-evaluations.
   *
   * This API endpoint allows clients to search and retrieve a filtered,
   * paginated list of employee self-evaluations. These self-evaluations include
   * scores for job performance, knowledge/skill proficiency, problem solving,
   * collaboration, and innovation, submitted by employees during defined
   * evaluation cycles.
   *
   * The request body accepts detailed search criteria allowing filtering by
   * employee, evaluation cycle, score thresholds, and other relevant parameters
   * to narrow results. Pagination controls enable clients to fetch manageable
   * pages of data.
   *
   * The response provides summarized information on each self-evaluation,
   * optimized for list views. Authorization restricts access to authorized
   * roles such as employees and managers.
   *
   * This operation corresponds to the job_performance_eval_self_evaluations
   * table, facilitating review and management of evaluation records.
   *
   * @param connection
   * @param body Search criteria for employee self-evaluations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchSelfEvaluations(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalSelfEvaluation.IRequest,
  ): Promise<IPageIJobPerformanceEvalSelfEvaluation.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerSelfEvaluations({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific employee self-evaluation by ID.
   *
   * This API endpoint fetches complete details of a single employee
   * self-evaluation, identified by its unique ID in UUID format.
   *
   * Clients must provide the self-evaluation ID as a path parameter. The
   * response includes all evaluation scores, comments, and metadata associated
   * with that evaluation.
   *
   * Access is restricted to authorized users, ensuring privacy and data
   * protection.
   *
   * This operation maps to the job_performance_eval_self_evaluations table in
   * Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the target self-evaluation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atSelfEvaluation(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalSelfEvaluation> {
    try {
      return await getjobPerformanceEvalManagerSelfEvaluationsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
