import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchjobPerformanceEvalManagerEvaluationSnapshots } from "../../../../providers/patchjobPerformanceEvalManagerEvaluationSnapshots";
import { ManagerAuth } from "../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../decorators/payload/ManagerPayload";
import { getjobPerformanceEvalManagerEvaluationSnapshotsId } from "../../../../providers/getjobPerformanceEvalManagerEvaluationSnapshotsId";

import { IPageIJobPerformanceEvalEvaluationSnapshots } from "../../../../api/structures/IPageIJobPerformanceEvalEvaluationSnapshots";
import { IJobPerformanceEvalEvaluationSnapshots } from "../../../../api/structures/IJobPerformanceEvalEvaluationSnapshots";
import { IJobPerformanceEvalEvaluationSnapshot } from "../../../../api/structures/IJobPerformanceEvalEvaluationSnapshot";

@Controller("/jobPerformanceEval/manager/evaluationSnapshots")
export class JobperformanceevalManagerEvaluationsnapshotsController {
  /**
   * List paginated evaluation snapshots with filtering.
   *
   * Retrieve a paginated list of job performance evaluation snapshots
   * representing historical combined employee and manager evaluation data.
   *
   * This operation allows filtering by evaluation cycle, employee, and other
   * criteria using a flexible request body schema. Pagination and sorting
   * improve usability for large datasets.
   *
   * Authorization roles include managers who review evaluation histories for
   * compliance, trend tracking, and HR decision making.
   *
   * The response returns paginated evaluation snapshot summaries suitable for
   * listing and detail exploration.
   *
   * @param connection
   * @param body Filtering, pagination, and sorting parameters for evaluation
   *   snapshots
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedBody()
    body: IJobPerformanceEvalEvaluationSnapshots.IRequest,
  ): Promise<IPageIJobPerformanceEvalEvaluationSnapshots.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerEvaluationSnapshots({
        manager,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific job performance evaluation snapshot by ID.
   *
   * Retrieve a detailed snapshot of job performance evaluation for a specific
   * evaluation record identified by its unique ID. This snapshot includes both
   * employee self-assessment and manager evaluation scores across multiple
   * categories such as work performance, knowledge/skills, problem-solving and
   * collaboration, and innovation.
   *
   * The operation retrieves data from the
   * job_performance_eval_evaluation_snapshots table, which serves as an
   * immutable historical record for evaluations conducted during specific
   * evaluation cycles. It includes timestamps and supports soft deletion for
   * logical record management.
   *
   * Security considerations require that only authorized users such as HR
   * personnel, managers, or administrators access this detailed data. Proper
   * validation of the snapshot ID is necessary to avoid invalid or unauthorized
   * data access.
   *
   * This operation returns the full detailed evaluation snapshot, useful for
   * report generation, historical analysis, and audit compliance. No request
   * body is required as this is a read-only GET operation. Errors such as not
   * found or unauthorized access should be handled at the application layer.
   *
   * @param connection
   * @param id Unique identifier of the evaluation snapshot to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEvaluationSnapshot> {
    try {
      return await getjobPerformanceEvalManagerEvaluationSnapshotsId({
        manager,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
