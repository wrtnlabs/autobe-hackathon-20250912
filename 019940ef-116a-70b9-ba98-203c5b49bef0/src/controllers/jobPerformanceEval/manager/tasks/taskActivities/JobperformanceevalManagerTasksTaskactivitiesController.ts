import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalManagerTasksTaskIdTaskActivities } from "../../../../../providers/postjobPerformanceEvalManagerTasksTaskIdTaskActivities";
import { ManagerAuth } from "../../../../../decorators/ManagerAuth";
import { ManagerPayload } from "../../../../../decorators/payload/ManagerPayload";
import { patchjobPerformanceEvalManagerTasksTaskIdTaskActivities } from "../../../../../providers/patchjobPerformanceEvalManagerTasksTaskIdTaskActivities";
import { getjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId } from "../../../../../providers/getjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId";
import { putjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId } from "../../../../../providers/putjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId";

import { IJobPerformanceEvalTaskActivity } from "../../../../../api/structures/IJobPerformanceEvalTaskActivity";
import { IPageIJobPerformanceEvalTaskActivity } from "../../../../../api/structures/IPageIJobPerformanceEvalTaskActivity";

@Controller("/jobPerformanceEval/manager/tasks/:taskId/taskActivities")
export class JobperformanceevalManagerTasksTaskactivitiesController {
  /**
   * Create a new task activity under a task.
   *
   * Create a new task activity under the task specified by taskId. The request
   * body should provide the necessary task activity data such as code, name,
   * and optional description according to the creation schema.
   *
   * The operation requires authorization with either 'employee' or 'manager'
   * roles.
   *
   * Successful creation returns the full detail of the newly created task
   * activity entity.
   *
   * Validation errors and duplicate codes cause error responses.
   *
   * The parameter taskId associates the new activity with the corresponding
   * parent task.
   *
   * @param connection
   * @param taskId Unique identifier of the parent task
   * @param body Data needed to create a new task activity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskActivity.ICreate,
  ): Promise<IJobPerformanceEvalTaskActivity> {
    try {
      return await postjobPerformanceEvalManagerTasksTaskIdTaskActivities({
        manager,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve list of task activities under a task.
   *
   * Retrieve a paginated and filtered list of task activities associated with
   * the specified task identified by taskId. This operation fetches data from
   * the job_performance_eval_task_activities table, returning details such as
   * code, name, description, and timestamps.
   *
   * The path parameter taskId is a UUID that uniquely identifies the parent
   * task. The request body supports complex filters and pagination options to
   * efficiently query large sets of task activities.
   *
   * Only users with roles 'employee' or 'manager' are authorized to access this
   * endpoint.
   *
   * Errors caused by invalid or non-existent taskId result in 404 or 400 HTTP
   * responses managed by the system.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Filtering and pagination criteria for listing task activities
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskActivity.IRequest,
  ): Promise<IPageIJobPerformanceEvalTaskActivity.ISummary> {
    try {
      return await patchjobPerformanceEvalManagerTasksTaskIdTaskActivities({
        manager,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific task activity by taskActivityId
   * under the task identified by taskId. The returned data includes activity
   * code, name, description, creation and update timestamps as per the
   * job_performance_eval_task_activities schema.
   *
   * Authorized users with the roles 'employee' or 'manager' can perform this
   * read operation.
   *
   * Invalid path parameters or missing records result in HTTP error responses.
   *
   * @param connection
   * @param taskId Unique identifier of the parent task
   * @param taskActivityId Unique identifier of the task activity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskActivityId")
  public async at(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("taskActivityId")
    taskActivityId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalTaskActivity> {
    try {
      return await getjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId(
        {
          manager,
          taskId,
          taskActivityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task activity's details.
   *
   * Update the specified task activity identified by taskActivityId under the
   * task specified by taskId. The request body contains updated properties
   * compliant with the update schema.
   *
   * This operation requires roles 'employee' or 'manager' for authorization.
   *
   * Successful updates return the updated task activity entity data.
   *
   * Errors for invalid IDs or validation issues are returned appropriately.
   *
   * @param connection
   * @param taskId Unique identifier of the parent task
   * @param taskActivityId Unique identifier of the task activity to be updated
   * @param body Updated task activity data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":taskActivityId")
  public async update(
    @ManagerAuth()
    manager: ManagerPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("taskActivityId")
    taskActivityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskActivity.IUpdate,
  ): Promise<IJobPerformanceEvalTaskActivity> {
    try {
      return await putjobPerformanceEvalManagerTasksTaskIdTaskActivitiesTaskActivityId(
        {
          manager,
          taskId,
          taskActivityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
