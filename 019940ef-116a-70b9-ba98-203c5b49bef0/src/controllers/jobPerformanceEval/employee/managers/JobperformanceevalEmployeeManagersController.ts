import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getjobPerformanceEvalEmployeeManagersId } from "../../../../providers/getjobPerformanceEvalEmployeeManagersId";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { putjobPerformanceEvalEmployeeManagersId } from "../../../../providers/putjobPerformanceEvalEmployeeManagersId";
import { deletejobPerformanceEvalEmployeeManagersId } from "../../../../providers/deletejobPerformanceEvalEmployeeManagersId";

import { IJobPerformanceEvalManager } from "../../../../api/structures/IJobPerformanceEvalManager";

@Controller("/jobPerformanceEval/employee/managers/:id")
export class JobperformanceevalEmployeeManagersController {
  /**
   * Retrieve manager details by ID.
   *
   * Retrieve detailed information for a manager by their unique identifier.
   * This API operation accesses the job_performance_eval_managers table, which
   * stores manager authentication and profile data.
   *
   * This operation requires authentication and authorization to ensure that
   * only permitted users (such as managers or employees) can access sensitive
   * information.
   *
   * The returned manager data includes the manager's ID, email, name, and
   * timestamps for record creation and updates. Password hashes are never
   * exposed through this API to maintain security.
   *
   * This operation is commonly used in management dashboards or administrative
   * interfaces where individual manager details are displayed for review or
   * further processing.
   *
   * If the manager ID does not exist, the API will return a suitable error
   * indicating the resource was not found.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalManager> {
    try {
      return await getjobPerformanceEvalEmployeeManagersId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update manager information by ID in the job performance evaluation system.
   * This operation modifies the manager's profile details such as email and
   * name.
   *
   * Password changes are not supported in this endpoint and should be managed
   * via a separate password update API to ensure security best practices.
   *
   * The operation requires a valid manager ID path parameter and a request body
   * with updated fields respecting data validation rules.
   *
   * Upon success, the updated manager details are returned.
   *
   * Authorization is restricted to employees and managers with rights to edit
   * their own or subordinate profiles.
   *
   * This endpoint supports management of user data for authentication and
   * administrative purposes.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @param body Manager update request data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalManager.IUpdate,
  ): Promise<IJobPerformanceEvalManager> {
    try {
      return await putjobPerformanceEvalEmployeeManagersId({
        employee,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a manager by ID in the job performance evaluation system. This
   * marks the manager record as deleted by setting the deleted_at timestamp.
   *
   * Physical removal of the record is not performed to maintain audit trails
   * and data integrity.
   *
   * The operation requires a manager ID path parameter.
   *
   * Only users with employee and manager privileges can execute this deletion.
   *
   * This function is crucial for managing active managers list by logically
   * removing inactive or removed personnel from the system without losing
   * historical records.
   *
   * @param connection
   * @param id Unique identifier of the manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeManagersId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
