import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeSelfEvaluations } from "../../../../providers/postjobPerformanceEvalEmployeeSelfEvaluations";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeSelfEvaluations } from "../../../../providers/patchjobPerformanceEvalEmployeeSelfEvaluations";
import { getjobPerformanceEvalEmployeeSelfEvaluationsId } from "../../../../providers/getjobPerformanceEvalEmployeeSelfEvaluationsId";
import { putjobPerformanceEvalEmployeeSelfEvaluationsId } from "../../../../providers/putjobPerformanceEvalEmployeeSelfEvaluationsId";
import { deletejobPerformanceEvalEmployeeSelfEvaluationsId } from "../../../../providers/deletejobPerformanceEvalEmployeeSelfEvaluationsId";

import { IJobPerformanceEvalSelfEvaluation } from "../../../../api/structures/IJobPerformanceEvalSelfEvaluation";
import { IPageIJobPerformanceEvalSelfEvaluation } from "../../../../api/structures/IPageIJobPerformanceEvalSelfEvaluation";

@Controller("/jobPerformanceEval/employee/selfEvaluations")
export class JobperformanceevalEmployeeSelfevaluationsController {
  /**
   * Create a new self-evaluation record for an employee.
   *
   * This API operation enables authenticated employees (role: employee) to
   * create a self-evaluation for a specified evaluation cycle. The
   * self-evaluation includes integer scores ranging from 1 to 5 for work
   * performance level, knowledge/skill, problem solving and collaboration, and
   * innovation. A mandatory overall comment summarizing their self-assessment
   * must also be provided.
   *
   * This operation requires employee authentication and authorization, linking
   * the evaluation to the specific employee and evaluation cycle. It stores
   * timestamps for creation and updates for auditing, and supports soft
   * deletion for data lifecycle management.
   *
   * The API complements read operations used by employees and managers to
   * retrieve evaluations and related comments, supporting comprehensive
   * evaluation data governance.
   *
   * @param connection
   * @param body Input data for creating a self-evaluation record, including
   *   scores and evaluation cycle reference
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalSelfEvaluation.ICreate,
  ): Promise<IJobPerformanceEvalSelfEvaluation> {
    try {
      return await postjobPerformanceEvalEmployeeSelfEvaluations({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated employee self-evaluations.
   *
   * This API endpoint allows clients to search and retrieve a filtered,
   * paginated list of employee self-evaluations. These self-evaluations include
   * scores for job performance, knowledge/skill proficiency, problem solving,
   * collaboration, and innovation, submitted by employees during defined
   * evaluation cycles.
   *
   * The request body accepts detailed search criteria allowing filtering by
   * employee, evaluation cycle, score thresholds, and other relevant parameters
   * to narrow results. Pagination controls enable clients to fetch manageable
   * pages of data.
   *
   * The response provides summarized information on each self-evaluation,
   * optimized for list views. Authorization restricts access to authorized
   * roles such as employees and managers.
   *
   * This operation corresponds to the job_performance_eval_self_evaluations
   * table, facilitating review and management of evaluation records.
   *
   * @param connection
   * @param body Search criteria for employee self-evaluations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchSelfEvaluations(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalSelfEvaluation.IRequest,
  ): Promise<IPageIJobPerformanceEvalSelfEvaluation.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeSelfEvaluations({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific employee self-evaluation by ID.
   *
   * This API endpoint fetches complete details of a single employee
   * self-evaluation, identified by its unique ID in UUID format.
   *
   * Clients must provide the self-evaluation ID as a path parameter. The
   * response includes all evaluation scores, comments, and metadata associated
   * with that evaluation.
   *
   * Access is restricted to authorized users, ensuring privacy and data
   * protection.
   *
   * This operation maps to the job_performance_eval_self_evaluations table in
   * Prisma schema.
   *
   * @param connection
   * @param id Unique identifier of the target self-evaluation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atSelfEvaluation(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalSelfEvaluation> {
    try {
      return await getjobPerformanceEvalEmployeeSelfEvaluationsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing self-evaluation record by ID.
   *
   * This API operation allows authenticated employees (role: employee) to
   * update their own self-evaluation record by its unique ID. Scores for work
   * performance, knowledge/skill, problem solving and collaboration, and
   * innovation can be modified, along with the mandatory overall comment.
   *
   * The update enforces ownership and authorization checks and updates
   * timestamps for audit purposes. Soft deletion is respected to maintain data
   * integrity and history.
   *
   * This endpoint facilitates corrections before finalizing the evaluation
   * submission during the evaluation period.
   *
   * @param connection
   * @param id Unique identifier of the self-evaluation record to update
   * @param body Fields to update in the self-evaluation record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalSelfEvaluation.IUpdate,
  ): Promise<IJobPerformanceEvalSelfEvaluation> {
    try {
      return await putjobPerformanceEvalEmployeeSelfEvaluationsId({
        employee,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a self-evaluation record by ID.
   *
   * This API operation allows employees (role: employee) to soft delete their
   * self-evaluation record using the record's UUID. The system sets the
   * deleted_at timestamp instead of permanently deleting the record, ensuring
   * logical removal while maintaining data integrity and history.
   *
   * Authorization checks ensure only permitted users may perform this
   * operation. No content is returned upon success.
   *
   * This complements create and update operations in lifecycle management of
   * evaluation data.
   *
   * @param connection
   * @param id Unique identifier of the self-evaluation record to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeSelfEvaluationsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
