import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeKnowledgeAreas } from "../../../../providers/postjobPerformanceEvalEmployeeKnowledgeAreas";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeKnowledgeAreas } from "../../../../providers/patchjobPerformanceEvalEmployeeKnowledgeAreas";
import { getjobPerformanceEvalEmployeeKnowledgeAreasId } from "../../../../providers/getjobPerformanceEvalEmployeeKnowledgeAreasId";

import { IJobPerformanceEvalKnowledgeArea } from "../../../../api/structures/IJobPerformanceEvalKnowledgeArea";
import { IPageIJobPerformanceEvalKnowledgeArea } from "../../../../api/structures/IPageIJobPerformanceEvalKnowledgeArea";

@Controller("/jobPerformanceEval/employee/knowledgeAreas")
export class JobperformanceevalEmployeeKnowledgeareasController {
  /**
   * Create a new knowledge area entry in the job performance evaluation system.
   * This operation allows authorized users to add new knowledge domains
   * relevant to job tasks.
   *
   * Validation ensures the uniqueness of code and other required fields. Users
   * must be authenticated and authorized to perform this creation.
   *
   * The response includes the full details of the newly created knowledge area.
   * Errors occur if required fields are missing or constraints violated.
   *
   * @param connection
   * @param body Creation info of the knowledge area
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalKnowledgeArea.ICreate,
  ): Promise<IJobPerformanceEvalKnowledgeArea> {
    try {
      return await postjobPerformanceEvalEmployeeKnowledgeAreas({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of knowledge areas.
   *
   * Retrieve a filtered and paginated list of knowledge areas within the job
   * performance evaluation system. This operation enables users to search
   * knowledge areas by various criteria such as code, name, or description,
   * which helps in organizing and managing domains of expertise relevant to job
   * tasks.
   *
   * Security considerations require authentication and appropriate permissions
   * to access sensitive organizational knowledge data. The operation integrates
   * directly with the job_performance_eval_knowledge_areas table, incorporating
   * all relevant fields as defined in the Prisma schema.
   *
   * Search filters, pagination parameters, and sorting options can be specified
   * in the request body, supporting flexible queries tailored to user needs.
   * The response provides a paginated summary of knowledge areas, facilitating
   * efficient UI rendering and user experience.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for knowledge area
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalKnowledgeArea.IRequest,
  ): Promise<IPageIJobPerformanceEvalKnowledgeArea.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeKnowledgeAreas({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a knowledge area by ID.
   *
   * Retrieve detailed information of a specific knowledge area by its unique
   * identifier. This operation fetches the full data record from the
   * job_performance_eval_knowledge_areas table representing the knowledge
   * domain relevant to job tasks.
   *
   * Users must provide the knowledge area ID as the path parameter. Security
   * measures require authentication and authorization to ensure only permitted
   * users can access detailed knowledge area data.
   *
   * This endpoint supports viewing a single knowledge area for inspection or
   * editing purposes, returning comprehensive attributes including descriptive
   * and metadata fields.
   *
   * @param connection
   * @param id Unique identifier of the target knowledge area
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalKnowledgeArea> {
    try {
      return await getjobPerformanceEvalEmployeeKnowledgeAreasId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
