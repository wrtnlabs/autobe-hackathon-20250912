import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeEmployeeComments } from "../../../../providers/postjobPerformanceEvalEmployeeEmployeeComments";
import { EmployeeAuth } from "../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeEmployeeComments } from "../../../../providers/patchjobPerformanceEvalEmployeeEmployeeComments";
import { getjobPerformanceEvalEmployeeEmployeeCommentsId } from "../../../../providers/getjobPerformanceEvalEmployeeEmployeeCommentsId";
import { putjobPerformanceEvalEmployeeEmployeeCommentsId } from "../../../../providers/putjobPerformanceEvalEmployeeEmployeeCommentsId";
import { deletejobPerformanceEvalEmployeeEmployeeCommentsId } from "../../../../providers/deletejobPerformanceEvalEmployeeEmployeeCommentsId";

import { IJobPerformanceEvalEmployeeComments } from "../../../../api/structures/IJobPerformanceEvalEmployeeComments";
import { IPageIJobPerformanceEvalEmployeeComments } from "../../../../api/structures/IPageIJobPerformanceEvalEmployeeComments";

@Controller("/jobPerformanceEval/employee/employeeComments")
export class JobperformanceevalEmployeeEmployeecommentsController {
  /**
   * Create a new employee comment with required fields employee ID, evaluation
   * cycle ID, and comment text.
   *
   * Only accessible to users with role 'employee'.
   *
   * @param connection
   * @param body Data required to create an employee comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalEmployeeComments.ICreate,
  ): Promise<IJobPerformanceEvalEmployeeComments> {
    try {
      return await postjobPerformanceEvalEmployeeEmployeeComments({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve employee comments.
   *
   * Retrieve a paginated list of employee comments on job performance
   * evaluations with support for search, filtering, and pagination.
   *
   * Employee comments capture qualitative feedback linked to evaluation cycles
   * for context.
   *
   * Authorization roles: 'employee' and 'manager'.
   *
   * Request Body: Search criteria and pagination details. Response Body:
   * Paginated list of employee comments summaries.
   *
   * @param connection
   * @param body Search and pagination parameters for employee comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedBody()
    body: IJobPerformanceEvalEmployeeComments.IRequest,
  ): Promise<IPageIJobPerformanceEvalEmployeeComments.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeEmployeeComments({
        employee,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get employee comment details by ID.
   *
   * Get detailed information of an employee comment by its unique UUID `id`.
   *
   * Includes comment text, association to employee and evaluation cycle, and
   * timestamps.
   *
   * Authorization roles: 'employee' and 'manager'.
   *
   * @param connection
   * @param id Unique identifier of the employee comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalEmployeeComments> {
    try {
      return await getjobPerformanceEvalEmployeeEmployeeCommentsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an employee comment by ID.
   *
   * Update an existing employee comment by its unique ID.
   *
   * This operation modifies the comment text of the employee comment record.
   * The record is identified using the employee comment's unique UUID path
   * parameter. The updated comment must comply with content length and format
   * policies and is linked to an employee and an evaluation cycle in the
   * database.
   *
   * Only authenticated users with employee role authorization may perform this
   * update. The operation ensures that the related audit fields such as
   * updated_at are managed accordingly.
   *
   * No other record fields such as employee ID or evaluation cycle ID can be
   * changed using this method. The operation supports soft deletion logic
   * internally but does not expose soft delete via API.
   *
   * This API is integral for managing employee-submitted qualitative remarks
   * within the Job Performance Evaluation service.
   *
   * @param connection
   * @param id Unique identifier of the employee comment to update
   * @param body New content for the employee comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateEmployeeComment(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalEmployeeComments.IUpdate,
  ): Promise<IJobPerformanceEvalEmployeeComments> {
    try {
      return await putjobPerformanceEvalEmployeeEmployeeCommentsId({
        employee,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an employee comment by ID.
   *
   * This operation permanently removes the employee comment record from the
   * database, identified by the UUID path parameter.
   *
   * Only users authenticated as employees can perform this deletion. Once
   * deleted, the comment cannot be restored through this API.
   *
   * This endpoint is critical for users managing their qualitative feedback and
   * comments related to their evaluations within the system.
   *
   * @param connection
   * @param id Unique identifier of the employee comment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseEmployeeComment(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeEmployeeCommentsId({
        employee,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
