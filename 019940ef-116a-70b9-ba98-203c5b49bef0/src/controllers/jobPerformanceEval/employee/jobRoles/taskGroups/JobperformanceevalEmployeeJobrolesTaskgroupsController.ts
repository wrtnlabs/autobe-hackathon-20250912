import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups } from "../../../../../providers/postjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups";
import { EmployeeAuth } from "../../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups } from "../../../../../providers/patchjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups";
import { getjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId } from "../../../../../providers/getjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId";
import { putjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId } from "../../../../../providers/putjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId";
import { deletejobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId } from "../../../../../providers/deletejobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId";

import { IJobPerformanceEvalTaskGroup } from "../../../../../api/structures/IJobPerformanceEvalTaskGroup";
import { IPageIJobPerformanceEvalTaskGroup } from "../../../../../api/structures/IPageIJobPerformanceEvalTaskGroup";

@Controller("/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups")
export class JobperformanceevalEmployeeJobrolesTaskgroupsController {
  /**
   * Create a new task group under a job role.
   *
   * Creates a new task group within the specified job role.
   *
   * This API enables authorized users to add a task group that logically
   * organizes tasks under a given job role identified by 'jobRoleId'. The task
   * group must have a unique 'code' and a descriptive 'name'; an optional
   * 'description' may also be included.
   *
   * The operation ensures hierarchical consistency and enforces uniqueness
   * rules as per the Prisma schema definition. System fields like 'created_at'
   * and 'updated_at' are managed automatically.
   *
   * Errors due to invalid 'jobRoleId' or duplicate 'code' will result in
   * appropriate error responses.
   *
   * This operation supports organizational hierarchy management within the job
   * performance evaluation system.
   *
   * @param connection
   * @param jobRoleId The ID of the job role to which the new task group belongs
   * @param body Information needed to create a task group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createTaskGroup(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskGroup.ICreate,
  ): Promise<IJobPerformanceEvalTaskGroup> {
    try {
      return await postjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups({
        employee,
        jobRoleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List task groups of a job role with filtering.
   *
   * This endpoint returns a filtered and paginated list of task groups under a
   * given job role. Task groups are logical groupings of tasks relevant to the
   * job role, facilitating clearer management and categorization.
   *
   * Users with authorized roles 'employee' or 'manager' can access this list.
   *
   * Filtering, sorting, and pagination parameters can be provided in the
   * request body to refine the results.
   *
   * This operation corresponds to the 'job_performance_eval_task_groups' table,
   * returning summaries of task group entries.
   *
   * The response includes paginated data structured to enable efficient
   * client-side rendering and navigation through potentially large datasets.
   *
   * @param connection
   * @param jobRoleId Unique identifier of the target job role
   * @param body Filtering and pagination criteria for task groups
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskGroup.IRequest,
  ): Promise<IPageIJobPerformanceEvalTaskGroup.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroups({
        employee,
        jobRoleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed task group information by ID.
   *
   * This endpoint fetches detailed information about a specific task group
   * within a job role. Task groups consist of related tasks grouped for better
   * organization and management.
   *
   * The operation relies on 'jobRoleId' and 'taskGroupId' path parameters to
   * locate the targeted task group record in the database.
   *
   * Users with roles 'employee' or 'manager' have access to this endpoint for
   * security reasons.
   *
   * The returned data includes all relevant properties of the task group entity
   * as defined in the Prisma schema, suitable for full detail views or editing
   * interfaces.
   *
   * @param connection
   * @param jobRoleId Unique identifier of the target job role
   * @param taskGroupId Unique identifier of the target task group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":taskGroupId")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalTaskGroup> {
    try {
      return await getjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId(
        {
          employee,
          jobRoleId,
          taskGroupId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task group within a job role.
   *
   * Updates an existing task group within the specified job role.
   *
   * Authorized users can modify attributes of a task group, including 'code',
   * 'name', and optionally 'description'. The task group is uniquely identified
   * by 'taskGroupId' and linked to the parent job role via 'jobRoleId'.
   *
   * The operation prevents updates of the parent job role association and
   * handles auditing fields internally.
   *
   * Validation errors such as duplicate codes or invalid IDs will produce
   * suitable HTTP error messages.
   *
   * This endpoint is critical for maintaining an accurate and consistent job
   * structure hierarchy in the system.
   *
   * @param connection
   * @param jobRoleId The ID of the parent job role of the task group
   * @param taskGroupId The ID of the task group to update
   * @param body Updated information for the task group
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":taskGroupId")
  public async updateTaskGroup(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalTaskGroup.IUpdate,
  ): Promise<IJobPerformanceEvalTaskGroup> {
    try {
      return await putjobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId(
        {
          employee,
          jobRoleId,
          taskGroupId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing task group within a job role.
   *
   * Deletes a task group permanently from the specified job role.
   *
   * This operation removes the task group with the given 'taskGroupId' linked
   * to 'jobRoleId'. It performs a hard delete, permanently removing associated
   * data.
   *
   * Only authorized employees may execute this operation.
   *
   * No request body is required, and a successful deletion returns no content.
   *
   * Clients must handle scenarios of non-existent or already deleted task
   * groups with appropriate error responses.
   *
   * @param connection
   * @param jobRoleId The ID of the parent job role of the task group
   * @param taskGroupId The ID of the task group to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":taskGroupId")
  public async eraseTaskGroup(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedParam("taskGroupId")
    taskGroupId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeJobRolesJobRoleIdTaskGroupsTaskGroupId(
        {
          employee,
          jobRoleId,
          taskGroupId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
