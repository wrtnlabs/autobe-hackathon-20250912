import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles } from "../../../../../providers/postjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles";
import { EmployeeAuth } from "../../../../../decorators/EmployeeAuth";
import { EmployeePayload } from "../../../../../decorators/payload/EmployeePayload";
import { patchjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles } from "../../../../../providers/patchjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles";
import { getjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId } from "../../../../../providers/getjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId";
import { putjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId } from "../../../../../providers/putjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId";
import { deletejobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId } from "../../../../../providers/deletejobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId";

import { IJobPerformanceEvalJobRole } from "../../../../../api/structures/IJobPerformanceEvalJobRole";
import { IPageIJobPerformanceEvalJobRole } from "../../../../../api/structures/IPageIJobPerformanceEvalJobRole";

@Controller("/jobPerformanceEval/employee/jobSeries/:jobSeriesId/jobRoles")
export class JobperformanceevalEmployeeJobseriesJobrolesController {
  /**
   * Create a new job role under a specified job series.
   *
   * This POST operation allows for creation of a new job role linked to a
   * specific job series.
   *
   * The jobSeriesId path parameter ensures the role is correctly associated
   * with the parent job series.
   *
   * The request body captures all required and optional job role details,
   * following the schema's definitions for creation data.
   *
   * The newly created job role entity is returned upon success for immediate
   * client-side use.
   *
   * Authorization is granted to employees and managers with appropriate
   * privileges to add job roles.
   *
   * @param connection
   * @param jobSeriesId UUID of the parent job series
   * @param body New job role creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobRole.ICreate,
  ): Promise<IJobPerformanceEvalJobRole> {
    try {
      return await postjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles({
        employee,
        jobSeriesId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list job roles within a job series with pagination and
   * filtering.
   *
   * This PATCH operation enables clients to search and retrieve a paginated
   * list of job roles under a specified job series.
   *
   * The jobSeriesId path parameter scopes the roles within the specified job
   * series. The request body supports various filtering options such as job
   * role name, growth level, and other attributes.
   *
   * Results are paginated and sortable, providing efficient querying
   * capabilities for large datasets.
   *
   * Authorization is set to allow employees and managers to access this
   * operation.
   *
   * The response contains a paginated collection of job role summaries, useful
   * for display in UI listings or further processing.
   *
   * @param connection
   * @param jobSeriesId UUID of the job series to list roles for
   * @param body Filter and pagination parameters for job role search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobRole.IRequest,
  ): Promise<IPageIJobPerformanceEvalJobRole.ISummary> {
    try {
      return await patchjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRoles({
        employee,
        jobSeriesId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific job role by ID under a job series.
   *
   * This GET operation fetches detailed information of a specific job role
   * identified by jobRoleId, scoped within a job series identified by
   * jobSeriesId.
   *
   * The endpoint ensures hierarchical integrity by requiring the parent
   * jobSeriesId.
   *
   * Authorized employees and managers can retrieve fields including code, name,
   * description, growth level, creation and update timestamps.
   *
   * No request body is necessary. The operation returns a full entity
   * representation for use in detailed views or editing.
   *
   * @param connection
   * @param jobSeriesId UUID of the parent job series
   * @param jobRoleId UUID of the target job role
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobRoleId")
  public async at(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
  ): Promise<IJobPerformanceEvalJobRole> {
    try {
      return await getjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId(
        {
          employee,
          jobSeriesId,
          jobRoleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific job role in a job series.
   *
   * This endpoint updates details of a specific job role attached to a job
   * series, enabling editing of role code, name, description, and growth level
   * classifications. It operates on the 'job_performance_eval_job_roles' table
   * in the database, which stores the hierarchical job role structures used for
   * employee job assignments and evaluations.
   *
   * Users with appropriate privileges such as 'employee' or 'manager' roles can
   * modify job role details to keep job definitions current and aligned with
   * organizational needs.
   *
   * The operation enforces validation rules for unique codes and proper data
   * types. It uses path parameters 'jobSeriesId' and 'jobRoleId' to target the
   * precise job role resource while preserving referential integrity in the job
   * hierarchy.
   *
   * In case of data conflicts such as duplicate codes, the operation will
   * reject the update with appropriate errors.
   *
   * @param connection
   * @param jobSeriesId Unique identifier of the target job series
   * @param jobRoleId Unique identifier of the target job role
   * @param body Update data for job role
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jobRoleId")
  public async update(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IJobPerformanceEvalJobRole.IUpdate,
  ): Promise<IJobPerformanceEvalJobRole> {
    try {
      return await putjobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId(
        {
          employee,
          jobSeriesId,
          jobRoleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a job role from a job series.
   *
   * Deletes a job role permanently from the given job series by its identifier.
   * This operation affects the 'job_performance_eval_job_roles' table, removing
   * the job role record entirely from the database.
   *
   * While the 'job_performance_eval_job_roles' table supports a 'deleted_at'
   * field for soft deletion, this operation performs hard delete, permanently
   * removing data without recovery.
   *
   * Users with 'employee' or 'manager' roles are authorized to carry out this
   * operation.
   *
   * There is no request body or returned response content for this deletion.
   * Appropriate errors will be returned if the identifiers do not exist.
   *
   * @param connection
   * @param jobSeriesId Unique identifier of the target job series
   * @param jobRoleId Unique identifier of the target job role
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jobRoleId")
  public async erase(
    @EmployeeAuth()
    employee: EmployeePayload,
    @TypedParam("jobSeriesId")
    jobSeriesId: string & tags.Format<"uuid">,
    @TypedParam("jobRoleId")
    jobRoleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletejobPerformanceEvalEmployeeJobSeriesJobSeriesIdJobRolesJobRoleId(
        {
          employee,
          jobSeriesId,
          jobRoleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
