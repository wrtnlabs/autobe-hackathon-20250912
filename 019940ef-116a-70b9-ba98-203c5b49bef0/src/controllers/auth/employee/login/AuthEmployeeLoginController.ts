import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEmployeeLogin } from "../../../../providers/postauthEmployeeLogin";

import { IJobPerformanceEvalEmployee } from "../../../../api/structures/IJobPerformanceEvalEmployee";

@Controller("/auth/employee/login")
export class AuthEmployeeLoginController {
  /**
   * Employee login with email and password, issuing JWT tokens, related to
   * job_performance_eval_employees table.
   *
   * Authenticate employee user via email and password, issuing JWT tokens upon
   * success. Uses job_performance_eval_employees table for credential
   * validation and user identity. This is a public endpoint enabling regular
   * users to login.
   *
   * Ensures password hash comparison and secure token issuance with
   * IJobPerformanceEvalEmployee.IAuthorized in response.
   *
   * Critical for member-role authentication workflows, paired with join and
   * refresh operations.
   *
   * Authentication failures result in HTTP 401 with clear error messages.
   *
   * Allows session management consistent with JWT-based security.
   *
   * @param connection
   * @param body Login credentials payload for employee authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginEmployee(
    @TypedBody()
    body: IJobPerformanceEvalEmployee.ILogin,
  ): Promise<IJobPerformanceEvalEmployee.IAuthorized> {
    try {
      return await postauthEmployeeLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
