import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthEmployeeRefresh } from "../../../../providers/postauthEmployeeRefresh";

import { IJobPerformanceEvalEmployee } from "../../../../api/structures/IJobPerformanceEvalEmployee";

@Controller("/auth/employee/refresh")
export class AuthEmployeeRefreshController {
  /**
   * Refresh JWT tokens for employee user, related to
   * job_performance_eval_employees table.
   *
   * Refresh JWT tokens using a valid refresh token for employee users.
   * Validates token association with the job_performance_eval_employees table.
   *
   * Returns new JWT tokens in the response for continued authenticated
   * sessions.
   *
   * Facilitates seamless session continuity for member role users.
   *
   * Requires secure validation to prevent token misuse.
   *
   * Works as part of the full authentication flow along with join and login
   * operations.
   *
   * @param connection
   * @param body Refresh token payload for employee authentication renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshEmployee(
    @TypedBody()
    body: IJobPerformanceEvalEmployee.IRefresh,
  ): Promise<IJobPerformanceEvalEmployee.IAuthorized> {
    try {
      return await postauthEmployeeRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
