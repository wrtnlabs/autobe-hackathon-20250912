import { tags } from "typia";

/**
 * Knowledge Area represents domains of expertise or knowledge relevant to job
 * tasks. It categorizes knowledge areas to support task and skill mappings.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Jobs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IJobPerformanceEvalKnowledgeArea = {
  /**
   * Primary Key.
   *
   * Unique identifier of the knowledge area.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique code identifying the knowledge area.
   *
   * Code must be unique across all knowledge areas.
   */
  code: string;

  /**
   * Name of the knowledge area.
   *
   * Provides a descriptive name representing the knowledge domain.
   */
  name: string;

  /**
   * Detailed description of the knowledge area.
   *
   * Optional rich text detailing the knowledge area.
   */
  description?: string | null | undefined;

  /**
   * Record creation timestamp.
   *
   * ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * ISO 8601 date-time format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp, if applicable.
   *
   * Nullable ISO 8601 date-time.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IJobPerformanceEvalKnowledgeArea {
  /**
   * Request type for filtering and paginating knowledge areas in the system.
   * Includes optional fields to filter by code and name, specify pagination,
   * and define sorting. All properties are optional and nullable.
   */
  export type IRequest = {
    /** Optional code filter for partial matching. Nullable. */
    code?: string | null | undefined;

    /** Optional name filter for partial matching. Nullable. */
    name?: string | null | undefined;

    /** Optional page number for pagination. Nullable. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Optional limit of records per page for pagination. Nullable. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Optional field name for sorting. Nullable. */
    orderBy?: string | null | undefined;

    /** Optional sort direction, e.g. "asc" or "desc". Nullable. */
    orderDirection?: string | null | undefined;
  };

  /**
   * Request type for creating a knowledge area.
   *
   * Requires code and name; description optional.
   */
  export type ICreate = {
    /** Unique code identifying the knowledge area. */
    code: string;

    /** Name of the knowledge area. */
    name: string;

    /**
     * Detailed description of the knowledge area.
     *
     * Optional string or null.
     */
    description?: string | null | undefined;
  };

  /**
   * Request type for updating a knowledge area.
   *
   * All fields optional, allow partial updates.
   *
   * Id and timestamps are not updateable.
   */
  export type IUpdate = {
    /**
     * Unique code identifying the knowledge area.
     *
     * Optional string or null when updating.
     */
    code?: string | null | undefined;

    /**
     * Name of the knowledge area.
     *
     * Optional string or null when updating.
     */
    name?: string | null | undefined;

    /**
     * Detailed description of the knowledge area.
     *
     * Optional string or null when updating.
     */
    description?: string | null | undefined;

    /**
     * Nullable soft deletion timestamp. Usually managed internally.
     *
     * Optional string or null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of a knowledge area used for categorizing domains of
   * expertise relevant to job tasks. This includes essential fields for
   * identification and display.
   *
   * Properties:
   *
   * - Id: Unique UUID
   * - Code: Unique code string
   * - Name: Descriptive name
   *
   * This summary type omits detailed description and timestamps for brevity
   * and UI efficiency.
   */
  export type ISummary = {
    /** Unique identifier of the knowledge area. */
    id: string & tags.Format<"uuid">;

    /** Unique code identifying the knowledge area. */
    code: string;

    /** Name of the knowledge area. */
    name: string;
  };
}
