import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalManager } from "../../../structures/IJobPerformanceEvalManager";

/**
 * Register manager account, creates job_performance_eval_managers user and
 * returns JWT tokens.
 *
 * Register a new manager account by providing valid email and password
 * credentials. This operation creates a new manager entity in the
 * job_performance_eval_managers table and returns JWT tokens for subsequent
 * authentication.
 *
 * The operation ensures email uniqueness by checking against existing entries
 * in job_performance_eval_managers.email.
 *
 * Password must be securely hashed and stored as password_hash.
 *
 * Returns authorized JWT tokens upon successful registration.
 *
 * This is a public endpoint with no authentication required.
 *
 * Related to login and token refresh operations to maintain authentication
 * lifecycle.
 *
 * @param props.connection
 * @param props.body Manager registration request containing email and password
 *   credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/manager/join
 * @accessor api.functional.auth.manager.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Manager registration request containing email and password
     * credentials.
     */
    body: IJobPerformanceEvalManager.ICreate;
  };
  export type Body = IJobPerformanceEvalManager.ICreate;
  export type Response = IJobPerformanceEvalManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/manager/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/manager/join";
  export const random = (): IJobPerformanceEvalManager.IAuthorized =>
    typia.random<IJobPerformanceEvalManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate manager and issue JWT tokens.
 *
 * Authenticate manager with email and password and issue JWT tokens upon
 * successful validation.
 *
 * This operation checks credentials against the
 * job_performance_eval_managers.email and password_hash fields.
 *
 * Returns JWT access and refresh tokens required for session authorization.
 *
 * Does not require prior authentication.
 *
 * Related to join and token refresh operations for lifecycle management.
 *
 * @param props.connection
 * @param props.body Manager login request with email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/manager/login
 * @accessor api.functional.auth.manager.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Manager login request with email and password. */
    body: IJobPerformanceEvalManager.ILogin;
  };
  export type Body = IJobPerformanceEvalManager.ILogin;
  export type Response = IJobPerformanceEvalManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/manager/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/manager/login";
  export const random = (): IJobPerformanceEvalManager.IAuthorized =>
    typia.random<IJobPerformanceEvalManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for manager role.
 *
 * Refresh JWT tokens for manager with a valid refresh token.
 *
 * Ensures continued authenticated sessions.
 *
 * No prior login required when a valid refresh token is presented.
 *
 * Returns new JWT tokens upon success.
 *
 * Related to join and login lifecycle operations.
 *
 * @param props.connection
 * @param props.body Refresh token request with current refresh token.
 * @setHeader token.access Authorization
 *
 * @path /auth/manager/refresh
 * @accessor api.functional.auth.manager.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request with current refresh token. */
    body: IJobPerformanceEvalManager.IRefresh;
  };
  export type Body = IJobPerformanceEvalManager.IRefresh;
  export type Response = IJobPerformanceEvalManager.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/manager/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/manager/refresh";
  export const random = (): IJobPerformanceEvalManager.IAuthorized =>
    typia.random<IJobPerformanceEvalManager.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
