import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalEvaluationScore } from "../../../../structures/IJobPerformanceEvalEvaluationScore";
import { IPageIJobPerformanceEvalEvaluationScore } from "../../../../structures/IPageIJobPerformanceEvalEvaluationScore";

/**
 * Create evaluation score record.
 *
 * Create a new job performance evaluation score record.
 *
 * Requires an evaluation ID referencing either a self or manager evaluation, a
 * category name (e.g., work_performance), and an integer score between 1 and
 * 5.
 *
 * Access is restricted to authorized users with roles 'employee' and 'manager'.
 *
 * On success, returns the full created evaluation score record with timestamps.
 *
 * Errors occur if evaluation ID is invalid or score outside allowed range.
 *
 * This operation is part of the full CRUD lifecycle for evaluation score
 * management.
 *
 * @param props.connection
 * @param props.body Payload data to create a new evaluation score record
 * @path /jobPerformanceEval/manager/evaluationScores
 * @accessor api.functional.jobPerformanceEval.manager.evaluationScores.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload data to create a new evaluation score record */
    body: IJobPerformanceEvalEvaluationScore.ICreate;
  };
  export type Body = IJobPerformanceEvalEvaluationScore.ICreate;
  export type Response = IJobPerformanceEvalEvaluationScore;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/evaluationScores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/evaluationScores";
  export const random = (): IJobPerformanceEvalEvaluationScore =>
    typia.random<IJobPerformanceEvalEvaluationScore>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of evaluation scores.
 *
 * Retrieve a paginated collection of job performance evaluation scores matching
 * specified search and filter criteria.
 *
 * This operation enables users to query evaluation scores across categories and
 * evaluations, with support for pagination and sorting to manage large datasets
 * efficiently.
 *
 * Security considerations enforce role-based access control, ensuring that only
 * users with 'employee' or 'manager' roles can access this data.
 *
 * The endpoint maps to the job_performance_eval_evaluation_scores table in the
 * database, guaranteeing accurate and up-to-date evaluation scoring
 * information.
 *
 * Related API operations include fetching individual evaluation scores by ID,
 * creating new score entries, and updating existing records.
 *
 * @param props.connection
 * @param props.body Request payload for filtering and paging job performance
 *   evaluation scores
 * @path /jobPerformanceEval/manager/evaluationScores
 * @accessor api.functional.jobPerformanceEval.manager.evaluationScores.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request payload for filtering and paging job performance evaluation
     * scores
     */
    body: IJobPerformanceEvalEvaluationScore.IRequest;
  };
  export type Body = IJobPerformanceEvalEvaluationScore.IRequest;
  export type Response = IPageIJobPerformanceEvalEvaluationScore;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/evaluationScores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/evaluationScores";
  export const random = (): IPageIJobPerformanceEvalEvaluationScore =>
    typia.random<IPageIJobPerformanceEvalEvaluationScore>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get job performance evaluation score by ID.
 *
 * Fetch detailed information of a single evaluation score by its unique
 * identifier.
 *
 * The operation ensures retrieval of all relevant properties including
 * evaluation linkage, category, score, and audit timestamps.
 *
 * Permissions restrict access to users with 'employee' or 'manager' roles.
 *
 * This API complements the listing, creation, and update operations for
 * evaluation scores, facilitating comprehensive management of evaluation data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation score
 * @path /jobPerformanceEval/manager/evaluationScores/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationScores.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the evaluation score */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalEvaluationScore;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/evaluationScores/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/evaluationScores/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEvaluationScore =>
    typia.random<IJobPerformanceEvalEvaluationScore>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update evaluation score record by ID.
 *
 * Update an existing job performance evaluation score by its unique ID.
 *
 * Allows updating the category and score values while keeping the evaluation ID
 * immutable.
 *
 * Access restricted to users with 'employee' or 'manager' roles.
 *
 * Returns the updated evaluation score record including timestamps.
 *
 * Handles errors such as invalid IDs or data validation failures.
 *
 * Complements creation, retrieval, and listing APIs for comprehensive score
 * management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the evaluation score to update
 * @param props.body Payload data to update evaluation score fields
 * @path /jobPerformanceEval/manager/evaluationScores/:id
 * @accessor api.functional.jobPerformanceEval.manager.evaluationScores.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the evaluation score to update */
    id: string & tags.Format<"uuid">;

    /** Payload data to update evaluation score fields */
    body: IJobPerformanceEvalEvaluationScore.IUpdate;
  };
  export type Body = IJobPerformanceEvalEvaluationScore.IUpdate;
  export type Response = IJobPerformanceEvalEvaluationScore;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/evaluationScores/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/evaluationScores/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEvaluationScore =>
    typia.random<IJobPerformanceEvalEvaluationScore>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
