import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalJobGroup } from "../../../../structures/IJobPerformanceEvalJobGroup";
import { IJobPerformanceEvalJobGroups } from "../../../../structures/IJobPerformanceEvalJobGroups";
import { IPageIJobPerformanceEvalJobGroups } from "../../../../structures/IPageIJobPerformanceEvalJobGroups";
export * as jobSeries from "./jobSeries/index";

/**
 * Create a new job group in job_performance_eval_job_groups table.
 *
 * Create a new job group entry in the system.
 *
 * This API allows authorized managers to add new job groups used in the
 * organizational hierarchy. The input includes unique code, name, and optional
 * description. The system validates uniqueness of the code.
 *
 * Security measures require 'manager' role authorization to restrict access to
 * authorized personnel only.
 *
 * On success, the API returns the created job group record with detailed
 * attributes including creation and update timestamps.
 *
 * Related operations are retrieving, updating, and deleting job groups.
 *
 * Validation errors or duplicate codes will result in error responses.
 *
 * @param props.connection
 * @param props.body Request body to create a job group
 * @path /jobPerformanceEval/manager/jobGroups
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Request body to create a job group */
    body: IJobPerformanceEvalJobGroup.ICreate;
  };
  export type Body = IJobPerformanceEvalJobGroup.ICreate;
  export type Response = IJobPerformanceEvalJobGroup;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/jobGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/jobGroups";
  export const random = (): IJobPerformanceEvalJobGroup =>
    typia.random<IJobPerformanceEvalJobGroup>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of job groups.
 *
 * Retrieve filtered and paginated list of job groups in the job performance
 * evaluation system. The operation supports criteria such as code, name, and
 * creation range filtering.
 *
 * Job groups represent the highest level category of job hierarchy managed
 * within the system.
 *
 * This API endpoint provides pagination and sorting features for efficient data
 * handling.
 *
 * Only authorized users with employee or manager permissions can access this
 * resource.
 *
 * The response provides summarized data of job groups suitable for listings.
 *
 * @param props.connection
 * @param props.body Job group search and pagination parameters
 * @path /jobPerformanceEval/manager/jobGroups
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Job group search and pagination parameters */
    body: IJobPerformanceEvalJobGroups.IRequest;
  };
  export type Body = IJobPerformanceEvalJobGroups.IRequest;
  export type Response = IPageIJobPerformanceEvalJobGroups.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/jobGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/jobGroups";
  export const random = (): IPageIJobPerformanceEvalJobGroups.ISummary =>
    typia.random<IPageIJobPerformanceEvalJobGroups.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a job group by its ID from the job_performance_eval_job_groups
 * table.
 *
 * Retrieve detailed information of a specific job group identified by its
 * unique ID.
 *
 * This API retrieves data from the job_performance_eval_job_groups table,
 * including the unique code, name, and optional description of the job group.
 * It is intended for authenticated users who need to view job group details for
 * management or reporting purposes.
 *
 * Security considerations include requiring authenticated access to prevent
 * unauthorized data exposure. The system validates the UUID format of the job
 * group ID.
 *
 * Related operations include creating, updating, and deleting job groups which
 * manage the lifecycle of job group records.
 *
 * This operation returns the full job group data including timestamps for
 * creation and last update.
 *
 * Errors such as not found or invalid ID format will result in appropriate HTTP
 * error responses.
 *
 * @param props.connection
 * @param props.id Unique identifier of the job group (UUID)
 * @path /jobPerformanceEval/manager/jobGroups/:id
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the job group (UUID) */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalJobGroup;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/jobGroups/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalJobGroup =>
    typia.random<IJobPerformanceEvalJobGroup>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a job group by its ID in job_performance_eval_job_groups table.
 *
 * Update details of a specific job group by ID.
 *
 * Allows authorized managers to modify existing job group information. Fields
 * such as the code, name, and description can be updated. The system checks for
 * unique code constraints on update.
 *
 * This operation requires path parameter 'id' as UUID to identify the job
 * group. The request body must conform to IJobPerformanceEvalJobGroup.IUpdate
 * type.
 *
 * Security restrictions limit access to 'manager' users.
 *
 * Upon success, returns the updated job group details.
 *
 * Errors include not found, invalid UUID, or validation failures for input
 * fields.
 *
 * Related endpoints include creating and deleting job groups.
 *
 * @param props.connection
 * @param props.id Unique identifier of the job group (UUID)
 * @param props.body Request body to update a job group
 * @path /jobPerformanceEval/manager/jobGroups/:id
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the job group (UUID) */
    id: string & tags.Format<"uuid">;

    /** Request body to update a job group */
    body: IJobPerformanceEvalJobGroup.IUpdate;
  };
  export type Body = IJobPerformanceEvalJobGroup.IUpdate;
  export type Response = IJobPerformanceEvalJobGroup;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/jobGroups/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalJobGroup =>
    typia.random<IJobPerformanceEvalJobGroup>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a job group by ID (hard delete) in job_performance_eval_job_groups
 * table.
 *
 * Permanently remove a job group from the system by its ID.
 *
 * This operation performs a hard delete of the job group record from the
 * job_performance_eval_job_groups table. Once deleted, the record cannot be
 * recovered.
 *
 * Because there is no soft delete timestamp in this schema, the deletion is
 * permanent.
 *
 * Path parameter 'id' specifies the target job group's UUID.
 *
 * Access is restricted to 'manager' users to prevent accidental or unauthorized
 * deletion.
 *
 * No request body is required. On success, the operation returns no content.
 *
 * Relevant related operations include retrieval, creation, and update of job
 * groups.
 *
 * @param props.connection
 * @param props.id Unique identifier of the job group (UUID)
 * @path /jobPerformanceEval/manager/jobGroups/:id
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the job group (UUID) */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/jobGroups/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
