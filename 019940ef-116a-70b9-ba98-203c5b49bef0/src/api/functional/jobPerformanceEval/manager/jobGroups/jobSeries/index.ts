import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalJobSeries } from "../../../../../structures/IJobPerformanceEvalJobSeries";
import { IPageIJobPerformanceEvalJobSeries } from "../../../../../structures/IPageIJobPerformanceEvalJobSeries";

/**
 * Create a new job series under a job group.
 *
 * Create a new job series under the specified job group. The input includes
 * details needed to define the job series such as its unique code, name, and
 * description optionally.
 *
 * The operation respects the relationship to the parent job group to maintain
 * organizational hierarchy. Access control limits this operation to employees
 * and managers with appropriate authorization.
 *
 * A successful creation returns the full details of the newly created job
 * series entry.
 *
 * @param props.connection
 * @param props.jobGroupId Unique identifier of the target job group
 * @param props.body Creation data for a new job series
 * @path /jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.jobSeries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target job group */
    jobGroupId: string & tags.Format<"uuid">;

    /** Creation data for a new job series */
    body: IJobPerformanceEvalJobSeries.ICreate;
  };
  export type Body = IJobPerformanceEvalJobSeries.ICreate;
  export type Response = IJobPerformanceEvalJobSeries;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.jobGroupId ?? "null")}/jobSeries`;
  export const random = (): IJobPerformanceEvalJobSeries =>
    typia.random<IJobPerformanceEvalJobSeries>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobGroupId")(() => typia.assert(props.jobGroupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search job series within a specific job group.
 *
 * Retrieve a filtered and paginated list of job series under a specified job
 * group. This operation provides detailed access to job series data within the
 * context of the job group identified by the path parameter 'jobGroupId'. Users
 * with roles 'employee' or 'manager' can perform advanced searches and sorting
 * to locate particular job series relevant to organizational management.
 *
 * Security considerations include role-based access control, ensuring only
 * employees and managers authorized for the job group can access job series
 * data. The operation correlates directly with the
 * 'job_performance_eval_job_series' table in the Prisma schema, utilizing
 * properties such as 'code', 'name', 'description', and relational constraints
 * referencing the parent job group.
 *
 * This endpoint supports pagination and search criteria passed in the request
 * body to enable scalable data retrieval. The response includes a paginated
 * list of summarized job series entries optimized for list displays.
 *
 * @param props.connection
 * @param props.jobGroupId Unique identifier of the target job group
 * @param props.body Search criteria and pagination parameters for job series
 *   filtering
 * @path /jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.jobSeries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target job group */
    jobGroupId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for job series filtering */
    body: IJobPerformanceEvalJobSeries.IRequest;
  };
  export type Body = IJobPerformanceEvalJobSeries.IRequest;
  export type Response = IPageIJobPerformanceEvalJobSeries.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.jobGroupId ?? "null")}/jobSeries`;
  export const random = (): IPageIJobPerformanceEvalJobSeries.ISummary =>
    typia.random<IPageIJobPerformanceEvalJobSeries.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobGroupId")(() => typia.assert(props.jobGroupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific job series by ID within a job group.
 *
 * Retrieve detailed information about a specific job series within the given
 * job group. This endpoint provides comprehensive data stored in the
 * 'job_performance_eval_job_series' table including unique code, name,
 * description, creation and modification timestamps.
 *
 * Security considerations ensure that only authorized employees or managers can
 * access this detailed information. The operation validates 'jobGroupId' and
 * 'jobSeriesId' parameters to correctly locate the requested job series.
 *
 * This operation is essential for UI detail views or administrative workflows
 * requiring single job series data retrieval.
 *
 * @param props.connection
 * @param props.jobGroupId Unique identifier of the target job group
 * @param props.jobSeriesId Unique identifier of the target job series
 * @path /jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.jobSeries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target job group */
    jobGroupId: string & tags.Format<"uuid">;

    /** Unique identifier of the target job series */
    jobSeriesId: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalJobSeries;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.jobGroupId ?? "null")}/jobSeries/${encodeURIComponent(props.jobSeriesId ?? "null")}`;
  export const random = (): IJobPerformanceEvalJobSeries =>
    typia.random<IJobPerformanceEvalJobSeries>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobGroupId")(() => typia.assert(props.jobGroupId));
      assert.param("jobSeriesId")(() => typia.assert(props.jobSeriesId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific job series within a job group.
 *
 * Update an existing job series under the given job group. Input data may
 * include updates to the job series code, name, and description.
 *
 * The operation ensures the target job series identified by path parameters
 * exists and is properly linked to the specified job group.
 *
 * Role-based access restricts operation to authorized employees and managers.
 *
 * Return data includes the updated details after successful update.
 *
 * @param props.connection
 * @param props.jobGroupId Unique identifier of the target job group
 * @param props.jobSeriesId Unique identifier of the target job series
 * @param props.body Updated data for the job series
 * @path /jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.jobSeries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target job group */
    jobGroupId: string & tags.Format<"uuid">;

    /** Unique identifier of the target job series */
    jobSeriesId: string & tags.Format<"uuid">;

    /** Updated data for the job series */
    body: IJobPerformanceEvalJobSeries.IUpdate;
  };
  export type Body = IJobPerformanceEvalJobSeries.IUpdate;
  export type Response = IJobPerformanceEvalJobSeries;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.jobGroupId ?? "null")}/jobSeries/${encodeURIComponent(props.jobSeriesId ?? "null")}`;
  export const random = (): IJobPerformanceEvalJobSeries =>
    typia.random<IJobPerformanceEvalJobSeries>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobGroupId")(() => typia.assert(props.jobGroupId));
      assert.param("jobSeriesId")(() => typia.assert(props.jobSeriesId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific job series by ID within a job group.
 *
 * This DELETE operation targets the job_performance_eval_job_series table,
 * allowing authorized users to permanently remove a specific job series by its
 * unique identifier.
 *
 * As the job series is hierarchically linked to a job group, this endpoint
 * requires both the jobGroupId and jobSeriesId path parameters for precise
 * identification.
 *
 * The system performs a hard delete; records are irreversibly removed from the
 * database with no recovery option. Appropriate authorization checks ensure
 * that only users with roles 'employee' or 'manager' can access this endpoint
 * to protect data integrity.
 *
 * No response body is returned upon successful deletion. Error handling
 * includes notifying the client if the specified job series does not exist or
 * unauthorized access is attempted.
 *
 * @param props.connection
 * @param props.jobGroupId UUID of the parent job group for context
 * @param props.jobSeriesId UUID of the target job series to delete
 * @path /jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId
 * @accessor api.functional.jobPerformanceEval.manager.jobGroups.jobSeries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent job group for context */
    jobGroupId: string & tags.Format<"uuid">;

    /** UUID of the target job series to delete */
    jobSeriesId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/jobGroups/:jobGroupId/jobSeries/:jobSeriesId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/jobGroups/${encodeURIComponent(props.jobGroupId ?? "null")}/jobSeries/${encodeURIComponent(props.jobSeriesId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobGroupId")(() => typia.assert(props.jobGroupId));
      assert.param("jobSeriesId")(() => typia.assert(props.jobSeriesId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
