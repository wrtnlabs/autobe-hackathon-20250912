import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalManagerComments } from "../../../../structures/IJobPerformanceEvalManagerComments";
import { IPageIJobPerformanceEvalManagerComments } from "../../../../structures/IPageIJobPerformanceEvalManagerComments";

/**
 * Create a manager comment for evaluation cycle.
 *
 * Create a new manager comment linking a manager to an evaluation cycle with a
 * textual comment. This API validates the manager's identity and requires a
 * valid evaluation cycle. Manager comments provide qualitative insights
 * complementing numeric evaluation scores.
 *
 * Authorization is restricted to authenticated managers. The system
 * automatically timestamps creation and updates, and supports soft deletion.
 *
 * This operation corresponds to the job_performance_eval_manager_comments table
 * described in the Prisma schema, which includes references to the manager and
 * evaluation cycle entities along with comment content. The created record can
 * later be retrieved or updated. Errors result from invalid foreign keys or
 * missing required fields.
 *
 * @param props.connection
 * @param props.body Manager comment creation data
 * @path /jobPerformanceEval/manager/managerComments
 * @accessor api.functional.jobPerformanceEval.manager.managerComments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Manager comment creation data */
    body: IJobPerformanceEvalManagerComments.ICreate;
  };
  export type Body = IJobPerformanceEvalManagerComments.ICreate;
  export type Response = IJobPerformanceEvalManagerComments;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/managerComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/managerComments";
  export const random = (): IJobPerformanceEvalManagerComments =>
    typia.random<IJobPerformanceEvalManagerComments>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate manager comments.
 *
 * Retrieve a paginated list of manager comments with filtering and search
 * capabilities.
 *
 * This operation allows querying manager comments by various criteria including
 * manager ID, evaluation cycle, date ranges, and keywords. It supports sorting
 * and pagination parameters in the request body.
 *
 * The returned results are paginated and use a summary DTO for optimized
 * client-side display.
 *
 * Authorization is restricted to users with manager role due to the sensitive
 * nature of managerial evaluation comments.
 *
 * This API supports effective management and review of qualitative managerial
 * feedback within the job performance evaluation system.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for manager comments
 * @path /jobPerformanceEval/manager/managerComments
 * @accessor api.functional.jobPerformanceEval.manager.managerComments.searchManagerComments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchManagerComments(
  connection: IConnection,
  props: searchManagerComments.Props,
): Promise<searchManagerComments.Response> {
  return true === connection.simulate
    ? searchManagerComments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchManagerComments.METADATA,
          path: searchManagerComments.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchManagerComments {
  export type Props = {
    /** Search and filter criteria for manager comments */
    body: IJobPerformanceEvalManagerComments.IRequest;
  };
  export type Body = IJobPerformanceEvalManagerComments.IRequest;
  export type Response = IPageIJobPerformanceEvalManagerComments.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/managerComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/managerComments";
  export const random = (): IPageIJobPerformanceEvalManagerComments.ISummary =>
    typia.random<IPageIJobPerformanceEvalManagerComments.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchManagerComments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchManagerComments.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a manager comment by ID.
 *
 * Retrieve detail of a manager comment by its unique ID.
 *
 * This operation fetches the manager comment information identified by the UUID
 * from the path parameter. It includes manager info, evaluation cycle linkage,
 * comment content, and timestamps.
 *
 * Access is limited to users with manager role authorization.
 *
 * The operation does not allow modifications, only retrieval.
 *
 * This API is essential for auditing and reviewing manager qualitative feedback
 * on employee evaluations.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager comment to retrieve
 * @path /jobPerformanceEval/manager/managerComments/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerComments.atManagerComment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atManagerComment(
  connection: IConnection,
  props: atManagerComment.Props,
): Promise<atManagerComment.Response> {
  return true === connection.simulate
    ? atManagerComment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atManagerComment.METADATA,
          path: atManagerComment.path(props),
          status: null,
        },
      );
}
export namespace atManagerComment {
  export type Props = {
    /** Unique identifier of the manager comment to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalManagerComments;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/managerComments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managerComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManagerComments =>
    typia.random<IJobPerformanceEvalManagerComments>();
  export const simulate = (
    connection: IConnection,
    props: atManagerComment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atManagerComment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a manager comment by ID.
 *
 * Update the text content of a manager comment identified by its ID. This API
 * allows managers to revise their evaluation comments for employees during
 * active evaluation cycles.
 *
 * Authorization is limited to the comment author or authorized managers. Data
 * integrity and soft deletion status are handled by the system.
 *
 * The request requires the comment ID path parameter and the updated comment
 * data in the request body. Successful update returns the updated record.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager comment to update
 * @param props.body Updated manager comment data
 * @path /jobPerformanceEval/manager/managerComments/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerComments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the manager comment to update */
    id: string & tags.Format<"uuid">;

    /** Updated manager comment data */
    body: IJobPerformanceEvalManagerComments.IUpdate;
  };
  export type Body = IJobPerformanceEvalManagerComments.IUpdate;
  export type Response = IJobPerformanceEvalManagerComments;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/managerComments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/managerComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManagerComments =>
    typia.random<IJobPerformanceEvalManagerComments>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a manager comment by ID.
 *
 * Delete a manager comment identified by its ID. This operation removes the
 * record completely from the database.
 *
 * Only authorized managers can delete comments, ensuring compliance and
 * accountability.
 *
 * The process does not return any content. Errors result from invalid IDs or
 * authorization failures.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager comment to delete
 * @path /jobPerformanceEval/manager/managerComments/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerComments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the manager comment to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/managerComments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managerComments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
