import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalManager } from "../../../../structures/IJobPerformanceEvalManager";
import { IPageIJobPerformanceEvalManager } from "../../../../structures/IPageIJobPerformanceEvalManager";

/**
 * Search and retrieve a filtered, paginated list of managers.
 *
 * This PATCH API endpoint enables complex querying and retrieval of manager
 * records with support for pagination, filters, and sorting. It operates on the
 * job_performance_eval_managers database table.
 *
 * Clients can specify filtering criteria such as name, email, or creation date
 * ranges, along with pagination parameters like page number and size to
 * efficiently retrieve relevant subsets of manager data.
 *
 * The response includes paginated results with manager summary data, providing
 * essential details needed for listing and selection in administrative
 * interfaces.
 *
 * Access control ensures only authorized management users can perform this
 * operation due to the sensitivity of manager data.
 *
 * Error handling includes validation of request parameters and providing
 * informative error responses.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for manager
 *   filtering
 * @path /jobPerformanceEval/manager/managers
 * @accessor api.functional.jobPerformanceEval.manager.managers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for manager filtering */
    body: IJobPerformanceEvalManager.IRequest;
  };
  export type Body = IJobPerformanceEvalManager.IRequest;
  export type Response = IPageIJobPerformanceEvalManager.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/managers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/managers";
  export const random = (): IPageIJobPerformanceEvalManager.ISummary =>
    typia.random<IPageIJobPerformanceEvalManager.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve manager details by ID.
 *
 * Retrieve detailed information for a manager by their unique identifier. This
 * API operation accesses the job_performance_eval_managers table, which stores
 * manager authentication and profile data.
 *
 * This operation requires authentication and authorization to ensure that only
 * permitted users (such as managers or employees) can access sensitive
 * information.
 *
 * The returned manager data includes the manager's ID, email, name, and
 * timestamps for record creation and updates. Password hashes are never exposed
 * through this API to maintain security.
 *
 * This operation is commonly used in management dashboards or administrative
 * interfaces where individual manager details are displayed for review or
 * further processing.
 *
 * If the manager ID does not exist, the API will return a suitable error
 * indicating the resource was not found.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager
 * @path /jobPerformanceEval/manager/managers/:id
 * @accessor api.functional.jobPerformanceEval.manager.managers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the manager */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalManager;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/managers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManager =>
    typia.random<IJobPerformanceEvalManager>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update manager information by ID in the job performance evaluation system.
 * This operation modifies the manager's profile details such as email and
 * name.
 *
 * Password changes are not supported in this endpoint and should be managed via
 * a separate password update API to ensure security best practices.
 *
 * The operation requires a valid manager ID path parameter and a request body
 * with updated fields respecting data validation rules.
 *
 * Upon success, the updated manager details are returned.
 *
 * Authorization is restricted to employees and managers with rights to edit
 * their own or subordinate profiles.
 *
 * This endpoint supports management of user data for authentication and
 * administrative purposes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager
 * @param props.body Manager update request data
 * @path /jobPerformanceEval/manager/managers/:id
 * @accessor api.functional.jobPerformanceEval.manager.managers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the manager */
    id: string & tags.Format<"uuid">;

    /** Manager update request data */
    body: IJobPerformanceEvalManager.IUpdate;
  };
  export type Body = IJobPerformanceEvalManager.IUpdate;
  export type Response = IJobPerformanceEvalManager;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/managers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/managers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManager =>
    typia.random<IJobPerformanceEvalManager>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a manager by ID in the job performance evaluation system. This
 * marks the manager record as deleted by setting the deleted_at timestamp.
 *
 * Physical removal of the record is not performed to maintain audit trails and
 * data integrity.
 *
 * The operation requires a manager ID path parameter.
 *
 * Only users with employee and manager privileges can execute this deletion.
 *
 * This function is crucial for managing active managers list by logically
 * removing inactive or removed personnel from the system without losing
 * historical records.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager
 * @path /jobPerformanceEval/manager/managers/:id
 * @accessor api.functional.jobPerformanceEval.manager.managers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the manager */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/managers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
