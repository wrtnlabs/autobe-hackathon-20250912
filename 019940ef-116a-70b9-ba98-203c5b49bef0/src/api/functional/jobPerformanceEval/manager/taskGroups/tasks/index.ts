import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalTask } from "../../../../../structures/IJobPerformanceEvalTask";

/**
 * Retrieve a task by its ID within a task group.
 *
 * Retrieve detailed information about a specific task within a task group in
 * the Job Performance Evaluation system. This operation fetches the task's
 * unique code, name, optional description, and related knowledge area reference
 * if available.
 *
 * Security is enforced; this operation allows only authenticated users with
 * roles 'employee' or 'manager'. This ensures data integrity and
 * confidentiality.
 *
 * This API corresponds directly to the job_performance_eval_tasks table in the
 * Prisma schema. It returns all relevant fields including timestamps in ISO
 * 8601 format.
 *
 * The parameters 'taskGroupId' and 'taskId' must be valid UUIDs referencing
 * existing resources.
 *
 * This is a read-only operation supporting safe retrieval and will return
 * errors for unauthorized access or non-existent tasks.
 *
 * @param props.connection
 * @param props.taskGroupId UUID of the target task group containing the task
 * @param props.taskId UUID of the target task to retrieve
 * @path /jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId
 * @accessor api.functional.jobPerformanceEval.manager.taskGroups.tasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target task group containing the task */
    taskGroupId: string & tags.Format<"uuid">;

    /** UUID of the target task to retrieve */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalTask;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTask =>
    typia.random<IJobPerformanceEvalTask>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task within a task group.
 *
 * Update the details of an existing task within a task group in the Job
 * Performance Evaluation system. Provides ability to modify fields such as the
 * task code, name, description, and associated knowledge area.
 *
 * Only authenticated users with roles 'employee' or 'manager' may perform this
 * update to maintain job data integrity.
 *
 * The API uses taskGroupId and taskId as path parameters to specify the target
 * task.
 *
 * The request body is validated against the task update schema. Upon success,
 * the updated task data is returned with timestamps.
 *
 * This endpoint supports full task record updates and maintains audit
 * information automatically.
 *
 * @param props.connection
 * @param props.taskGroupId UUID of the task group containing the target task
 * @param props.taskId UUID of the task to update
 * @param props.body Information to update a task
 * @path /jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId
 * @accessor api.functional.jobPerformanceEval.manager.taskGroups.tasks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the task group containing the target task */
    taskGroupId: string & tags.Format<"uuid">;

    /** UUID of the task to update */
    taskId: string & tags.Format<"uuid">;

    /** Information to update a task */
    body: IJobPerformanceEvalTask.IUpdate;
  };
  export type Body = IJobPerformanceEvalTask.IUpdate;
  export type Response = IJobPerformanceEvalTask;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTask =>
    typia.random<IJobPerformanceEvalTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a task within a task group.
 *
 * Permanently delete a task from a specific task group in the Job Performance
 * Evaluation system. This operation removes the task record entirely from the
 * database.
 *
 * Requires valid taskGroupId and taskId path parameters to identify the target
 * task.
 *
 * Accessible only to authenticated users with roles 'employee' or 'manager' to
 * prevent unauthorized deletions.
 *
 * This operation is irreversible and will remove all associated task data
 * completely.
 *
 * Appropriate error responses are returned for invalid IDs or unauthorized
 * access.
 *
 * @param props.connection
 * @param props.taskGroupId UUID of the task group containing the task to delete
 * @param props.taskId UUID of the task to delete
 * @path /jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId
 * @accessor api.functional.jobPerformanceEval.manager.taskGroups.tasks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the task group containing the task to delete */
    taskGroupId: string & tags.Format<"uuid">;

    /** UUID of the task to delete */
    taskId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks/:taskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}/tasks/${encodeURIComponent(props.taskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new task within a task group.
 *
 * Create a new task under a specific task group in the Job Performance
 * Evaluation system. The request body includes the task's unique code, name,
 * optional description, and optional knowledge area association.
 *
 * Only authenticated roles 'employee' or 'manager' are permitted to create
 * tasks to ensure controlled job data consistency.
 *
 * The endpoint validates the input JSON against the Prisma schema for the task
 * entity. On success, the newly created task's full data representation is
 * returned, including timestamps.
 *
 * Soft delete is supported in the schema but not exposed via this API.
 *
 * This operation supports updating organizational job definitions securely and
 * correctly.
 *
 * @param props.connection
 * @param props.taskGroupId UUID of the task group under which the new task will
 *   be created
 * @param props.body Information for creating a task
 * @path /jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks
 * @accessor api.functional.jobPerformanceEval.manager.taskGroups.tasks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the task group under which the new task will be created */
    taskGroupId: string & tags.Format<"uuid">;

    /** Information for creating a task */
    body: IJobPerformanceEvalTask.ICreate;
  };
  export type Body = IJobPerformanceEvalTask.ICreate;
  export type Response = IJobPerformanceEvalTask;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/taskGroups/:taskGroupId/tasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}/tasks`;
  export const random = (): IJobPerformanceEvalTask =>
    typia.random<IJobPerformanceEvalTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
