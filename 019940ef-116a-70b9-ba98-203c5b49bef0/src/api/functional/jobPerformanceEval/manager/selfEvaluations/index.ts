import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalSelfEvaluation } from "../../../../structures/IJobPerformanceEvalSelfEvaluation";
import { IPageIJobPerformanceEvalSelfEvaluation } from "../../../../structures/IPageIJobPerformanceEvalSelfEvaluation";

/**
 * Search and retrieve paginated employee self-evaluations.
 *
 * This API endpoint allows clients to search and retrieve a filtered, paginated
 * list of employee self-evaluations. These self-evaluations include scores for
 * job performance, knowledge/skill proficiency, problem solving, collaboration,
 * and innovation, submitted by employees during defined evaluation cycles.
 *
 * The request body accepts detailed search criteria allowing filtering by
 * employee, evaluation cycle, score thresholds, and other relevant parameters
 * to narrow results. Pagination controls enable clients to fetch manageable
 * pages of data.
 *
 * The response provides summarized information on each self-evaluation,
 * optimized for list views. Authorization restricts access to authorized roles
 * such as employees and managers.
 *
 * This operation corresponds to the job_performance_eval_self_evaluations
 * table, facilitating review and management of evaluation records.
 *
 * @param props.connection
 * @param props.body Search criteria for employee self-evaluations
 * @path /jobPerformanceEval/manager/selfEvaluations
 * @accessor api.functional.jobPerformanceEval.manager.selfEvaluations.searchSelfEvaluations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchSelfEvaluations(
  connection: IConnection,
  props: searchSelfEvaluations.Props,
): Promise<searchSelfEvaluations.Response> {
  return true === connection.simulate
    ? searchSelfEvaluations.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchSelfEvaluations.METADATA,
          path: searchSelfEvaluations.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchSelfEvaluations {
  export type Props = {
    /** Search criteria for employee self-evaluations */
    body: IJobPerformanceEvalSelfEvaluation.IRequest;
  };
  export type Body = IJobPerformanceEvalSelfEvaluation.IRequest;
  export type Response = IPageIJobPerformanceEvalSelfEvaluation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/selfEvaluations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/selfEvaluations";
  export const random = (): IPageIJobPerformanceEvalSelfEvaluation.ISummary =>
    typia.random<IPageIJobPerformanceEvalSelfEvaluation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchSelfEvaluations.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchSelfEvaluations.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific employee self-evaluation by ID.
 *
 * This API endpoint fetches complete details of a single employee
 * self-evaluation, identified by its unique ID in UUID format.
 *
 * Clients must provide the self-evaluation ID as a path parameter. The response
 * includes all evaluation scores, comments, and metadata associated with that
 * evaluation.
 *
 * Access is restricted to authorized users, ensuring privacy and data
 * protection.
 *
 * This operation maps to the job_performance_eval_self_evaluations table in
 * Prisma schema.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target self-evaluation
 * @path /jobPerformanceEval/manager/selfEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.manager.selfEvaluations.atSelfEvaluation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atSelfEvaluation(
  connection: IConnection,
  props: atSelfEvaluation.Props,
): Promise<atSelfEvaluation.Response> {
  return true === connection.simulate
    ? atSelfEvaluation.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atSelfEvaluation.METADATA,
          path: atSelfEvaluation.path(props),
          status: null,
        },
      );
}
export namespace atSelfEvaluation {
  export type Props = {
    /** Unique identifier of the target self-evaluation */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalSelfEvaluation;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/selfEvaluations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/selfEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalSelfEvaluation =>
    typia.random<IJobPerformanceEvalSelfEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: atSelfEvaluation.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atSelfEvaluation.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
