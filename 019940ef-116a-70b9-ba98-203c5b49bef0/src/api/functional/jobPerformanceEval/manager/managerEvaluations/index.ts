import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalManagerEvaluation } from "../../../../structures/IJobPerformanceEvalManagerEvaluation";
import { IPageIJobPerformanceEvalManagerEvaluation } from "../../../../structures/IPageIJobPerformanceEvalManagerEvaluation";

/**
 * Create a new manager evaluation entry with scores and comments for an
 * employee within a specific evaluation cycle.
 *
 * The manager provides scores on work performance, knowledge and skills,
 * problem solving and collaboration, innovation, and an overall comment.
 *
 * This operation is restricted to users with manager role to ensure security
 * and data integrity.
 *
 * Upon success, the newly created evaluation record is returned.
 *
 * Validation includes checking for valid user IDs, cycle IDs, score ranges
 * (1-5), and required comment fields.
 *
 * Errors may occur if required fields are missing, IDs are invalid, or
 * authorization is not granted.
 *
 * @param props.connection
 * @param props.body Manager evaluation creation data
 * @path /jobPerformanceEval/manager/managerEvaluations
 * @accessor api.functional.jobPerformanceEval.manager.managerEvaluations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Manager evaluation creation data */
    body: IJobPerformanceEvalManagerEvaluation.ICreate;
  };
  export type Body = IJobPerformanceEvalManagerEvaluation.ICreate;
  export type Response = IJobPerformanceEvalManagerEvaluation;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/manager/managerEvaluations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/managerEvaluations";
  export const random = (): IJobPerformanceEvalManagerEvaluation =>
    typia.random<IJobPerformanceEvalManagerEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of manager evaluations.
 *
 * This API operation allows authenticated managers (role: manager) to search,
 * filter, and paginate through manager evaluation records. The operation
 * accepts comprehensive request body parameters to support complex query
 * scenarios for finding evaluation data by employee, evaluation cycle, score
 * ranges, dates, and other criteria.
 *
 * Security measures ensure access is limited to evaluations for which the
 * requesting manager is authorized. The results return summary information to
 * optimize frontend display.
 *
 * This search endpoint complements detailed read and write operations,
 * facilitating managerial oversight and evaluation management.
 *
 * @param props.connection
 * @param props.body Request body containing filters and pagination settings for
 *   manager evaluations
 * @path /jobPerformanceEval/manager/managerEvaluations
 * @accessor api.functional.jobPerformanceEval.manager.managerEvaluations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request body containing filters and pagination settings for manager
     * evaluations
     */
    body: IJobPerformanceEvalManagerEvaluation.IRequest;
  };
  export type Body = IJobPerformanceEvalManagerEvaluation.IRequest;
  export type Response = IPageIJobPerformanceEvalManagerEvaluation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/manager/managerEvaluations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/manager/managerEvaluations";
  export const random =
    (): IPageIJobPerformanceEvalManagerEvaluation.ISummary =>
      typia.random<IPageIJobPerformanceEvalManagerEvaluation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed manager evaluation by ID.
 *
 * Retrieve a manager's evaluation entry by its unique ID from the
 * job_performance_eval_manager_evaluations table.
 *
 * This operation is intended for managers to view the detailed evaluation they
 * have performed on employees during specific evaluation cycles. The evaluation
 * data includes scores for work performance, knowledge and skills, problem
 * solving and collaboration, innovation, and an overall comment.
 *
 * The endpoint returns the full evaluation record, including management of
 * timestamps and soft deletion status for auditing.
 *
 * Security considerations ensure only authorized roles such as managers can
 * retrieve this information.
 *
 * Possible errors include attempts to access non-existent IDs or unauthorized
 * access attempts.
 *
 * The API supports relationships to employee and evaluation cycle data, which
 * should be referenced separately as needed.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager evaluation record
 * @path /jobPerformanceEval/manager/managerEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerEvaluations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the manager evaluation record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalManagerEvaluation;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/manager/managerEvaluations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managerEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManagerEvaluation =>
    typia.random<IJobPerformanceEvalManagerEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a manager evaluation by ID.
 *
 * Update an existing manager evaluation record by its ID.
 *
 * Managers can modify scores for work performance, knowledge and skills,
 * problem solving and collaboration, innovation, and update the comprehensive
 * comment field.
 *
 * This ensures evaluation corrections or amendments can be tracked with audit
 * timestamps.
 *
 * Only users with manager role have permission to perform this update.
 *
 * Error handling covers non-existent records, invalid input data, and
 * unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager evaluation to update
 * @param props.body Manager evaluation update data
 * @path /jobPerformanceEval/manager/managerEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerEvaluations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the manager evaluation to update */
    id: string & tags.Format<"uuid">;

    /** Manager evaluation update data */
    body: IJobPerformanceEvalManagerEvaluation.IUpdate;
  };
  export type Body = IJobPerformanceEvalManagerEvaluation.IUpdate;
  export type Response = IJobPerformanceEvalManagerEvaluation;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/manager/managerEvaluations/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/manager/managerEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalManagerEvaluation =>
    typia.random<IJobPerformanceEvalManagerEvaluation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a manager evaluation by ID.
 *
 * Permanently remove a manager evaluation record identified by its unique ID.
 *
 * This hard delete operation completely deletes the record from the database
 * and cannot be undone.
 *
 * Only users with manager role are authorized to perform this deletion.
 *
 * Error scenarios include attempting to delete a non-existent record or
 * unauthorized access attempts.
 *
 * No response body is returned upon successful deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the manager evaluation to delete
 * @path /jobPerformanceEval/manager/managerEvaluations/:id
 * @accessor api.functional.jobPerformanceEval.manager.managerEvaluations.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the manager evaluation to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/manager/managerEvaluations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/manager/managerEvaluations/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
