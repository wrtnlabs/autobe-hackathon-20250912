import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalKnowledgeArea } from "../../../../structures/IJobPerformanceEvalKnowledgeArea";
import { IPageIJobPerformanceEvalKnowledgeArea } from "../../../../structures/IPageIJobPerformanceEvalKnowledgeArea";

/**
 * Create a new knowledge area entry in the job performance evaluation system.
 * This operation allows authorized users to add new knowledge domains relevant
 * to job tasks.
 *
 * Validation ensures the uniqueness of code and other required fields. Users
 * must be authenticated and authorized to perform this creation.
 *
 * The response includes the full details of the newly created knowledge area.
 * Errors occur if required fields are missing or constraints violated.
 *
 * @param props.connection
 * @param props.body Creation info of the knowledge area
 * @path /jobPerformanceEval/employee/knowledgeAreas
 * @accessor api.functional.jobPerformanceEval.employee.knowledgeAreas.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the knowledge area */
    body: IJobPerformanceEvalKnowledgeArea.ICreate;
  };
  export type Body = IJobPerformanceEvalKnowledgeArea.ICreate;
  export type Response = IJobPerformanceEvalKnowledgeArea;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/employee/knowledgeAreas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/knowledgeAreas";
  export const random = (): IJobPerformanceEvalKnowledgeArea =>
    typia.random<IJobPerformanceEvalKnowledgeArea>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of knowledge areas.
 *
 * Retrieve a filtered and paginated list of knowledge areas within the job
 * performance evaluation system. This operation enables users to search
 * knowledge areas by various criteria such as code, name, or description, which
 * helps in organizing and managing domains of expertise relevant to job tasks.
 *
 * Security considerations require authentication and appropriate permissions to
 * access sensitive organizational knowledge data. The operation integrates
 * directly with the job_performance_eval_knowledge_areas table, incorporating
 * all relevant fields as defined in the Prisma schema.
 *
 * Search filters, pagination parameters, and sorting options can be specified
 * in the request body, supporting flexible queries tailored to user needs. The
 * response provides a paginated summary of knowledge areas, facilitating
 * efficient UI rendering and user experience.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for knowledge
 *   area filtering
 * @path /jobPerformanceEval/employee/knowledgeAreas
 * @accessor api.functional.jobPerformanceEval.employee.knowledgeAreas.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for knowledge area
     * filtering
     */
    body: IJobPerformanceEvalKnowledgeArea.IRequest;
  };
  export type Body = IJobPerformanceEvalKnowledgeArea.IRequest;
  export type Response = IPageIJobPerformanceEvalKnowledgeArea.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/employee/knowledgeAreas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/jobPerformanceEval/employee/knowledgeAreas";
  export const random = (): IPageIJobPerformanceEvalKnowledgeArea.ISummary =>
    typia.random<IPageIJobPerformanceEvalKnowledgeArea.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a knowledge area by ID.
 *
 * Retrieve detailed information of a specific knowledge area by its unique
 * identifier. This operation fetches the full data record from the
 * job_performance_eval_knowledge_areas table representing the knowledge domain
 * relevant to job tasks.
 *
 * Users must provide the knowledge area ID as the path parameter. Security
 * measures require authentication and authorization to ensure only permitted
 * users can access detailed knowledge area data.
 *
 * This endpoint supports viewing a single knowledge area for inspection or
 * editing purposes, returning comprehensive attributes including descriptive
 * and metadata fields.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target knowledge area
 * @path /jobPerformanceEval/employee/knowledgeAreas/:id
 * @accessor api.functional.jobPerformanceEval.employee.knowledgeAreas.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target knowledge area */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalKnowledgeArea;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/employee/knowledgeAreas/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/knowledgeAreas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalKnowledgeArea =>
    typia.random<IJobPerformanceEvalKnowledgeArea>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
