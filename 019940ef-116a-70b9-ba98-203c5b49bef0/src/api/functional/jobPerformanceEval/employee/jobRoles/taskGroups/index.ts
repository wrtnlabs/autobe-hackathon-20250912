import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalTaskGroup } from "../../../../../structures/IJobPerformanceEvalTaskGroup";
import { IPageIJobPerformanceEvalTaskGroup } from "../../../../../structures/IPageIJobPerformanceEvalTaskGroup";

/**
 * Create a new task group under a job role.
 *
 * Creates a new task group within the specified job role.
 *
 * This API enables authorized users to add a task group that logically
 * organizes tasks under a given job role identified by 'jobRoleId'. The task
 * group must have a unique 'code' and a descriptive 'name'; an optional
 * 'description' may also be included.
 *
 * The operation ensures hierarchical consistency and enforces uniqueness rules
 * as per the Prisma schema definition. System fields like 'created_at' and
 * 'updated_at' are managed automatically.
 *
 * Errors due to invalid 'jobRoleId' or duplicate 'code' will result in
 * appropriate error responses.
 *
 * This operation supports organizational hierarchy management within the job
 * performance evaluation system.
 *
 * @param props.connection
 * @param props.jobRoleId The ID of the job role to which the new task group
 *   belongs
 * @param props.body Information needed to create a task group
 * @path /jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups
 * @accessor api.functional.jobPerformanceEval.employee.jobRoles.taskGroups.createTaskGroup
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createTaskGroup(
  connection: IConnection,
  props: createTaskGroup.Props,
): Promise<createTaskGroup.Response> {
  return true === connection.simulate
    ? createTaskGroup.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createTaskGroup.METADATA,
          path: createTaskGroup.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createTaskGroup {
  export type Props = {
    /** The ID of the job role to which the new task group belongs */
    jobRoleId: string & tags.Format<"uuid">;

    /** Information needed to create a task group */
    body: IJobPerformanceEvalTaskGroup.ICreate;
  };
  export type Body = IJobPerformanceEvalTaskGroup.ICreate;
  export type Response = IJobPerformanceEvalTaskGroup;

  export const METADATA = {
    method: "POST",
    path: "/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups`;
  export const random = (): IJobPerformanceEvalTaskGroup =>
    typia.random<IJobPerformanceEvalTaskGroup>();
  export const simulate = (
    connection: IConnection,
    props: createTaskGroup.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createTaskGroup.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List task groups of a job role with filtering.
 *
 * This endpoint returns a filtered and paginated list of task groups under a
 * given job role. Task groups are logical groupings of tasks relevant to the
 * job role, facilitating clearer management and categorization.
 *
 * Users with authorized roles 'employee' or 'manager' can access this list.
 *
 * Filtering, sorting, and pagination parameters can be provided in the request
 * body to refine the results.
 *
 * This operation corresponds to the 'job_performance_eval_task_groups' table,
 * returning summaries of task group entries.
 *
 * The response includes paginated data structured to enable efficient
 * client-side rendering and navigation through potentially large datasets.
 *
 * @param props.connection
 * @param props.jobRoleId Unique identifier of the target job role
 * @param props.body Filtering and pagination criteria for task groups
 * @path /jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups
 * @accessor api.functional.jobPerformanceEval.employee.jobRoles.taskGroups.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target job role */
    jobRoleId: string & tags.Format<"uuid">;

    /** Filtering and pagination criteria for task groups */
    body: IJobPerformanceEvalTaskGroup.IRequest;
  };
  export type Body = IJobPerformanceEvalTaskGroup.IRequest;
  export type Response = IPageIJobPerformanceEvalTaskGroup.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups`;
  export const random = (): IPageIJobPerformanceEvalTaskGroup.ISummary =>
    typia.random<IPageIJobPerformanceEvalTaskGroup.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed task group information by ID.
 *
 * This endpoint fetches detailed information about a specific task group within
 * a job role. Task groups consist of related tasks grouped for better
 * organization and management.
 *
 * The operation relies on 'jobRoleId' and 'taskGroupId' path parameters to
 * locate the targeted task group record in the database.
 *
 * Users with roles 'employee' or 'manager' have access to this endpoint for
 * security reasons.
 *
 * The returned data includes all relevant properties of the task group entity
 * as defined in the Prisma schema, suitable for full detail views or editing
 * interfaces.
 *
 * @param props.connection
 * @param props.jobRoleId Unique identifier of the target job role
 * @param props.taskGroupId Unique identifier of the target task group
 * @path /jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId
 * @accessor api.functional.jobPerformanceEval.employee.jobRoles.taskGroups.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target job role */
    jobRoleId: string & tags.Format<"uuid">;

    /** Unique identifier of the target task group */
    taskGroupId: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalTaskGroup;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTaskGroup =>
    typia.random<IJobPerformanceEvalTaskGroup>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing task group within a job role.
 *
 * Updates an existing task group within the specified job role.
 *
 * Authorized users can modify attributes of a task group, including 'code',
 * 'name', and optionally 'description'. The task group is uniquely identified
 * by 'taskGroupId' and linked to the parent job role via 'jobRoleId'.
 *
 * The operation prevents updates of the parent job role association and handles
 * auditing fields internally.
 *
 * Validation errors such as duplicate codes or invalid IDs will produce
 * suitable HTTP error messages.
 *
 * This endpoint is critical for maintaining an accurate and consistent job
 * structure hierarchy in the system.
 *
 * @param props.connection
 * @param props.jobRoleId The ID of the parent job role of the task group
 * @param props.taskGroupId The ID of the task group to update
 * @param props.body Updated information for the task group
 * @path /jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId
 * @accessor api.functional.jobPerformanceEval.employee.jobRoles.taskGroups.updateTaskGroup
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateTaskGroup(
  connection: IConnection,
  props: updateTaskGroup.Props,
): Promise<updateTaskGroup.Response> {
  return true === connection.simulate
    ? updateTaskGroup.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateTaskGroup.METADATA,
          path: updateTaskGroup.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateTaskGroup {
  export type Props = {
    /** The ID of the parent job role of the task group */
    jobRoleId: string & tags.Format<"uuid">;

    /** The ID of the task group to update */
    taskGroupId: string & tags.Format<"uuid">;

    /** Updated information for the task group */
    body: IJobPerformanceEvalTaskGroup.IUpdate;
  };
  export type Body = IJobPerformanceEvalTaskGroup.IUpdate;
  export type Response = IJobPerformanceEvalTaskGroup;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}`;
  export const random = (): IJobPerformanceEvalTaskGroup =>
    typia.random<IJobPerformanceEvalTaskGroup>();
  export const simulate = (
    connection: IConnection,
    props: updateTaskGroup.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateTaskGroup.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing task group within a job role.
 *
 * Deletes a task group permanently from the specified job role.
 *
 * This operation removes the task group with the given 'taskGroupId' linked to
 * 'jobRoleId'. It performs a hard delete, permanently removing associated
 * data.
 *
 * Only authorized employees may execute this operation.
 *
 * No request body is required, and a successful deletion returns no content.
 *
 * Clients must handle scenarios of non-existent or already deleted task groups
 * with appropriate error responses.
 *
 * @param props.connection
 * @param props.jobRoleId The ID of the parent job role of the task group
 * @param props.taskGroupId The ID of the task group to delete
 * @path /jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId
 * @accessor api.functional.jobPerformanceEval.employee.jobRoles.taskGroups.eraseTaskGroup
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseTaskGroup(
  connection: IConnection,
  props: eraseTaskGroup.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseTaskGroup.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseTaskGroup.METADATA,
          path: eraseTaskGroup.path(props),
          status: null,
        },
      );
}
export namespace eraseTaskGroup {
  export type Props = {
    /** The ID of the parent job role of the task group */
    jobRoleId: string & tags.Format<"uuid">;

    /** The ID of the task group to delete */
    taskGroupId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/jobPerformanceEval/employee/jobRoles/:jobRoleId/taskGroups/:taskGroupId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/jobRoles/${encodeURIComponent(props.jobRoleId ?? "null")}/taskGroups/${encodeURIComponent(props.taskGroupId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseTaskGroup.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseTaskGroup.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobRoleId")(() => typia.assert(props.jobRoleId));
      assert.param("taskGroupId")(() => typia.assert(props.taskGroupId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
