import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IJobPerformanceEvalEmployee } from "../../../../structures/IJobPerformanceEvalEmployee";

/**
 * Retrieve detailed information of a specific employee by ID.
 *
 * This GET API endpoint allows clients to fetch the personal and
 * authentication-related information of a single employee identified by their
 * unique UUID. It provides essential details such as employee email and name,
 * which are fundamental for identification and notification purposes within the
 * Job Performance Evaluation system.
 *
 * Access to this resource is restricted to authenticated employees or managers
 * who require employee information for management or operational tasks.
 *
 * The operation directly queries the job_performance_eval_employees table in
 * the database, ensuring the latest data is retrieved, including timestamps for
 * creation and updates. Since employee data is sensitive, authorization and
 * authentication measures are enforced.
 *
 * Error handling includes returning an appropriate error if the employee ID
 * does not exist. This endpoint is foundational for user profile management and
 * further operations involving employee-related data.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target employee
 * @path /jobPerformanceEval/employee/employees/:id
 * @accessor api.functional.jobPerformanceEval.employee.employees.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target employee */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IJobPerformanceEvalEmployee;

  export const METADATA = {
    method: "GET",
    path: "/jobPerformanceEval/employee/employees/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/jobPerformanceEval/employee/employees/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEmployee =>
    typia.random<IJobPerformanceEvalEmployee>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing employee information by ID.
 *
 * This PUT API endpoint allows modification of an existing employee's data
 * identified by their unique UUID. The operation supports updating employee
 * email, hashed password, and name fields which are necessary for
 * authentication and personal records.
 *
 * The endpoint is critical for user account management workflows, enabling
 * updates to credentials and identifying information. The system expects input
 * to comply with validation rules, including unique email constraints and
 * secure password hashing.
 *
 * Security considerations include ensuring only authorized users with
 * appropriate role-based access can perform updates. Input validation and error
 * handling are key to prevent inconsistent or duplicate data.
 *
 * The operation interacts with the job_performance_eval_employees table,
 * updating the record while preserving timestamp fields for record creation,
 * updates, and soft deletion. It returns the updated employee data upon
 * success.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target employee
 * @param props.body Updated employee data
 * @path /jobPerformanceEval/employee/employees/:id
 * @accessor api.functional.jobPerformanceEval.employee.employees.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target employee */
    id: string & tags.Format<"uuid">;

    /** Updated employee data */
    body: IJobPerformanceEvalEmployee.IUpdate;
  };
  export type Body = IJobPerformanceEvalEmployee.IUpdate;
  export type Response = IJobPerformanceEvalEmployee;

  export const METADATA = {
    method: "PUT",
    path: "/jobPerformanceEval/employee/employees/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/jobPerformanceEval/employee/employees/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IJobPerformanceEvalEmployee =>
    typia.random<IJobPerformanceEvalEmployee>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
