{"operations":[{"specification":"This API operation implements the registration (join) process for a regular user. It enables creation of a new user account in the system's recipe_sharing_regularusers table by accepting necessary registration information. Upon successful registration, initial JWT tokens are issued to authenticate the user session. This endpoint is public and requires no prior authentication since it serves new users.\n\nThe process creates a new user record with unique email and username, storing a hashed password under the password_hash field for security. The created_at and updated_at timestamps record creation and modification times. The deleted_at is null initially as the account is active.\n\nRole-specific integration: This operation is for role 'regularUser' representing regular platform members.\n\nSecurity considerations: Password hashes must be stored securely, and the system must enforce uniqueness constraints on email and username to prevent duplication.\n\nThis operation proceeds the authentication flow, enabling subsequent login and refresh token issuance.\n\nRelated operations include login and token refresh generation.\n\nThis operation targets the recipe_sharing_regularusers Prisma DB table.","authorizationType":"join","description":"Register a new regular user account by creating an entry in recipe_sharing_regularusers table. The API accepts email, username, and a hashed password (password_hash). The operation ensures email and username uniqueness, sets creation and update timestamps, and initializes deleted_at as null. Successful registration issues JWT tokens for access and refresh, allowing the user to proceed to login and refresh sessions.\n\nThe operation is publicly accessible without authentication.\n\nReferences schema fields: email, username, password_hash, created_at, updated_at, deleted_at.\n\nThis API is the entry point for new users and validates unique credentials before storing sensitive data securely as hashes.","summary":"Register new regularUser in recipe_sharing_regularusers","parameters":[],"requestBody":{"description":"New user registration details including email, username, and hashed password","typeName":"IRecipeSharingRegularUser.ICreate"},"responseBody":{"description":"Authorized response with JWT tokens for newly registered regularUser","typeName":"IRecipeSharingRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"join","path":"/auth/regularUser/join","method":"post"},{"specification":"This API operation implements the login process for a regular user role in the recipe_sharing_regularusers table. It validates user credentials by matching email and password hash against stored records. Upon verification, the API issues JWT access and refresh tokens for the user's session. This operation is public, requiring no existing authentication.\n\nThe operation references the email and password_hash fields for authentication. Timestamps and uniqueness constraints on email and username ensure secure access.\n\nLogin is a critical part of the authentication flow used after registration, for session establishment.\n\nRelated operations: join (registration), refresh (token renewal).\n\nSecurity considerations include safe password hash comparison and timing attack prevention.\n\nThe API endpoint accepts login credentials and returns an authorized response structure.","authorizationType":"login","description":"Log in an existing regularUser by validating email and password hash against recipe_sharing_regularusers records. On successful authentication, return JWT tokens for session management. This operation enforces unique user credentials stored in password_hash and email fields.\n\nThe endpoint is publicly accessible.\n\nUses schema fields: email, password_hash, username for response.\n\nEnsures security best practices for password verification and JWT token issuance.","summary":"Login existing regularUser in recipe_sharing_regularusers","parameters":[],"requestBody":{"description":"User login credentials including email and password hash","typeName":"IRecipeSharingRegularUser.ILogin"},"responseBody":{"description":"Authorized response with JWT tokens for authenticated regularUser","typeName":"IRecipeSharingRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"login","path":"/auth/regularUser/login","method":"post"},{"specification":"This operation handles token refresh for regular users stored in the recipe_sharing_regularusers table. It accepts a valid refresh token and issues a new access token with extended validity, maintaining continuous authenticated sessions without requiring re-login.\n\nThis is an important part of the secure token lifecycle management for the regularUser role.\n\nSecurity considerations: the refresh token must be validated strictly; tokens must be revoked on password changes or logout.\n\nThe operation only requires the refresh token parameter and returns new JWT tokens.\n\nThe response body type references IRecipeSharingRegularUser.IAuthorized, consistent with login and join operations.\n\nThis API endpoint helps maintain session continuity safely.\n\nRelated operations include join and login.","authorizationType":"refresh","description":"Refresh JWT tokens for an authenticated regularUser. Requires a valid refresh token to issue a new access token and refresh token pair. This maintains session security and continuity. The operation targets recipe_sharing_regularusers role users.\n\nUses schema constraints and security for token validation.\n\nRelated authentication lifecycle endpoints include join and login.\n\nRefresh token expiration and revocation are managed according to security policies.","summary":"Refresh JWT tokens for regularUser in recipe_sharing_regularusers","parameters":[],"requestBody":{"description":"Refresh token details for regularUser token renewal","typeName":"IRecipeSharingRegularUser.IRefresh"},"responseBody":{"description":"Authorized response with new JWT tokens","typeName":"IRecipeSharingRegularUser.IAuthorized"},"authorizationRole":"regularUser","name":"refresh","path":"/auth/regularUser/refresh","method":"post"},{"specification":"This API operation handles the registration (join) of a premium user in the recipe sharing backend system. It allows new premium users to create an account by providing necessary registration credentials. According to the Prisma DB schema, it relates to the `recipe_sharing_premiumusers` table, which includes fields such as `email`, `password_hash`, `username`, `premium_since`, and audit timestamps. The operation validates input data, creates a new user record, hashes the password securely, assigns an initial premium activation timestamp, and issues JWT tokens upon success for authorization. This is a public endpoint that does not require authenticated access.\n\nDetailed security considerations include secure password handling, email uniqueness validation, and token issuance per the role's authentication requirements.\n\nThis operation is part of the core auth workflow and should be complemented by login and refresh token generation for seamless session management.\n\nRelations to other API operations are the login and refresh operations with complementary functions in token lifecycle management.\n\nThis operation's expected behavior is to return a successful authorization response containing JWT access and refresh tokens wrapped in the type `IRecipeSharingPremiumUser.IAuthorized`. Errors in registration due to validation failures return detailed error messages.","authorizationType":"join","description":"Register a new premium user account in the system. This operation stores user credentials, assigns premium subscription activation time, and returns authorized JWT tokens for session establishment. It references `recipe_sharing_premiumusers` schema fields including `email`, `password_hash`, `username`, and `premium_since`. Handles input validation, uniqueness checks, and secure password hashing.","summary":"Register a new premium user account (recipe_sharing_premiumusers)","parameters":[],"requestBody":{"description":"Payload to create a new premium user account (IRecipeSharingPremiumUser.ICreate)","typeName":"IRecipeSharingPremiumUser.ICreate"},"responseBody":{"description":"Authorized credentials for the registered premium user (IRecipeSharingPremiumUser.IAuthorized)","typeName":"IRecipeSharingPremiumUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/premiumUser/join","method":"post"},{"specification":"Authenticate a premium user by verifying credentials and issuing JWT tokens for secure access. This operation corresponds to the `recipe_sharing_premiumusers` table in the Prisma schema which stores email, hashed passwords, username, and premium activation date.\n\nThe operation verifies the provided credentials against stored secure hashes, checks account status, and if valid, generates and returns access and refresh tokens within the response type `IRecipeSharingPremiumUser.IAuthorized`. This endpoint is public and requires no prior authentication.\n\nSecurity measures include secure password comparison, brute force protection, and token lifecycle management aligned with the premium user role.\n\nThis operation integrates with the join (registration) and refresh token operations to support full authentication flows.\n\nExpected behavior is to return authorized tokens for valid credentials or appropriate error messages for failure.","authorizationType":"login","description":"Login a premium user by validating credentials stored in `recipe_sharing_premiumusers` fields such as `email` and `password_hash`. On successful authentication, returns JWT tokens for session management within `IRecipeSharingPremiumUser.IAuthorized`. Includes security checks for account status and password validity.","summary":"Login a premium user account (recipe_sharing_premiumusers)","parameters":[],"requestBody":{"description":"Login credentials for a premium user (IRecipeSharingPremiumUser.ILogin)","typeName":"IRecipeSharingPremiumUser.ILogin"},"responseBody":{"description":"Authorized credentials for the premium user (IRecipeSharingPremiumUser.IAuthorized)","typeName":"IRecipeSharingPremiumUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/premiumUser/login","method":"post"},{"specification":"Refresh the JWT tokens of a premium user to maintain session security and access. This operation targets the `recipe_sharing_premiumusers` role and ensures that users with valid refresh tokens can obtain new access and refresh tokens without re-authenticating.\n\nIt references the relevant schema for the role, specifically `recipe_sharing_premiumusers`, to ensure tokens correspond to valid active accounts.\n\nSecurity considerations include verifying the validity of refresh tokens, expiration handling, and reissuing tokens securely. The operation returns the updated tokens wrapped in `IRecipeSharingPremiumUser.IAuthorized` response type. This endpoint requires the user to present a valid refresh token and does not require login credentials.\n\nThis operation complements the join and login endpoints for full token lifecycle management.","authorizationType":"refresh","description":"Refresh JWT access and refresh tokens for premium users based on valid refresh tokens. Validates tokens and reissues new tokens tied to the `recipe_sharing_premiumusers` schema. Returns `IRecipeSharingPremiumUser.IAuthorized` for continued authenticated access.","summary":"Refresh premium user JWT tokens (recipe_sharing_premiumusers)","parameters":[],"requestBody":{"description":"Refresh token payload for a premium user (IRecipeSharingPremiumUser.IRefresh)","typeName":"IRecipeSharingPremiumUser.IRefresh"},"responseBody":{"description":"Refreshed authorized credentials for the premium user (IRecipeSharingPremiumUser.IAuthorized)","typeName":"IRecipeSharingPremiumUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/premiumUser/refresh","method":"post"},{"specification":"This endpoint allows a moderator user to register an account in the system. It is designed for recipe_sharing_moderators database table representing moderators responsible for content moderation, flag reviews, and category approvals. The operation accepts email, password, and username to create the moderator record with hashed password stored securely. It uses soft deletion timestamps to mark deletion without removing the data. This operation enables moderators to obtain authentication tokens upon successful registration, supporting secure login functionality. It validates the uniqueness of email and username as constrained by the database. The endpoint supports signing up new moderators and issues JWT tokens for subsequent authorized access.","authorizationType":"join","description":"This endpoint creates a new moderator user account in the Recipe Sharing Backend system by inserting a new record into the recipe_sharing_moderators table. It accepts the moderator's email, hashed password, and unique username. Upon successful registration, the system issues JWT tokens to enable authenticated session management. The operation ensures unique email and username constraints while enabling soft delete via nullable deleted_at. This registration flow is a crucial starting point for moderators who manage flagged content, approve categories, and enforce platform policies.","summary":"Register a new moderator user in the recipe_sharing_moderators table and issue JWT tokens upon success.","parameters":[],"requestBody":{"description":"Information needed to create a new moderator user account.","typeName":"IRecipeSharingModerator.ICreate"},"responseBody":{"description":"Authorized moderator user data including JWT tokens.","typeName":"IRecipeSharingModerator.IAuthorized"},"authorizationRole":"moderator","name":"join","path":"/auth/moderator/join","method":"post"},{"specification":"This endpoint allows a moderator user to login to the system with their email and password credentials to obtain fresh JWT access tokens. The operation validates the email and password against the recipe_sharing_moderators table and checks for non-deleted accounts. Successful login results in issuing JWT tokens for secure authenticated sessions. The login endpoint supports session management and security for admin-privileged moderator users responsible for content moderation and category approvals.","authorizationType":"login","description":"This endpoint authenticates a moderator user with email and password credential verification against stored hashed passwords in the recipe_sharing_moderators table. It denies access for deleted accounts (soft deleted via deleted_at). Upon successful login, it issues JWT tokens representing the moderator's authenticated session state. This is a core authentication operation allowing moderators to perform moderation actions securely.","summary":"Authenticate moderator user and issue JWT tokens upon successful login.","parameters":[],"requestBody":{"description":"Moderator login credentials including email and password.","typeName":"IRecipeSharingModerator.ILogin"},"responseBody":{"description":"Authorized moderator user data including JWT tokens.","typeName":"IRecipeSharingModerator.IAuthorized"},"authorizationRole":"moderator","name":"login","path":"/auth/moderator/login","method":"post"},{"specification":"This endpoint refreshes JWT access and refresh tokens for an authenticated moderator user. It accepts a valid refresh token, validates it against the session state, and issues new tokens to continue secure authenticated sessions. This process is critical for maintaining ongoing secure access without requiring complete reauthentication. The operation relies on the recipe_sharing_moderators table for identity and permission context.","authorizationType":"refresh","description":"This endpoint allows a moderator user to refresh their authentication tokens using a valid refresh token. It verifies token validity, expiration, and associated user permissions. Upon validation, it generates new JWT tokens for the moderator to maintain an active session without re-login. Token refresh operations are essential for security and usability in managing session lifespan securely.","summary":"Refresh JWT tokens for the authenticated moderator user.","parameters":[],"requestBody":{"description":"Refresh token payload for moderator user.","typeName":"IRecipeSharingModerator.IRefresh"},"responseBody":{"description":"Newly issued authorized moderator user data with JWT tokens.","typeName":"IRecipeSharingModerator.IAuthorized"},"authorizationRole":"moderator","name":"refresh","path":"/auth/moderator/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of regular users from the Recipe Sharing platform. It queries the table recipe_sharing_regularusers which stores user identity data including email, username, hashed password, creation/update timestamps, and optional soft deletion timestamp. The operation supports advanced filtering, searching, and sorting to find users based on various criteria such as email or username. It returns a paginated summary list without exposing sensitive fields such as password_hash. This endpoint is typically restricted to administrative roles or trusted services that manage or audit user data.","description":"This endpoint allows clients to query and retrieve a paginated list of regular users.\n\nEach regular user represents a platform member with credentials including email and username, used for authentication and identification in the recipe sharing system.\n\nThe system stores timestamps for record creation and updates, and soft deletion support through a nullable deleted_at timestamp.\n\nFor security reasons, sensitive password hashes are never exposed in the response.\n\nThis operation enables filtering by email, username, or other attributes through the request body parameters, supporting pagination and sorting to handle large user bases efficiently.\n\nAuthorization to access this list should be restricted to regularUser or premiumUser roles.\n\nResponse data includes essential summary information suitable for user management or audit interfaces, excluding sensitive fields.\n\nNo sensitive data such as password hashes are returned.\n\nErrors may occur if invalid filter parameters are provided or authorization fails.","summary":"Search and retrieve a filtered, paginated list of regular users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering regular users","typeName":"IRecipeSharingRegularUser.IRequest"},"responseBody":{"description":"Paginated list of regular user summaries matching search criteria","typeName":"IPageIRecipeSharingRegularUser.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/regularUsers","method":"patch","name":"index"},{"specification":"This operation retrieves a paginated list of regular users from the Recipe Sharing platform. It queries the table recipe_sharing_regularusers which stores user identity data including email, username, hashed password, creation/update timestamps, and optional soft deletion timestamp. The operation supports advanced filtering, searching, and sorting to find users based on various criteria such as email or username. It returns a paginated summary list without exposing sensitive fields such as password_hash. This endpoint is typically restricted to administrative roles or trusted services that manage or audit user data.","description":"This endpoint allows clients to query and retrieve a paginated list of regular users.\n\nEach regular user represents a platform member with credentials including email and username, used for authentication and identification in the recipe sharing system.\n\nThe system stores timestamps for record creation and updates, and soft deletion support through a nullable deleted_at timestamp.\n\nFor security reasons, sensitive password hashes are never exposed in the response.\n\nThis operation enables filtering by email, username, or other attributes through the request body parameters, supporting pagination and sorting to handle large user bases efficiently.\n\nAuthorization to access this list should be restricted to regularUser or premiumUser roles.\n\nResponse data includes essential summary information suitable for user management or audit interfaces, excluding sensitive fields.\n\nNo sensitive data such as password hashes are returned.\n\nErrors may occur if invalid filter parameters are provided or authorization fails.","summary":"Search and retrieve a filtered, paginated list of regular users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering regular users","typeName":"IRecipeSharingRegularUser.IRequest"},"responseBody":{"description":"Paginated list of regular user summaries matching search criteria","typeName":"IPageIRecipeSharingRegularUser.ISummary"},"authorizationType":null,"authorizationRole":"premiumUser","path":"/recipeSharing/premiumUser/regularUsers","method":"patch","name":"index"},{"specification":"This operation retrieves the detailed information of a specific regular user by their unique ID. It accesses the recipe_sharing_regularusers table in the database, which contains user identity data such as email, username, password_hash, and relevant timestamps including soft deletion. The operation returns a single user entity excluding sensitive fields like password_hash for security.\n\nThe endpoint accepts the user ID as a path parameter and validates its format. Access to this operation should be limited to regularUser or premiumUser roles due to the sensitivity of user data.\n\nErrors may arise if the ID is not found or if the requesting client lacks sufficient permissions.","description":"Retrieve detailed information about a specific regular user identified by their unique ID.\n\nThe user record includes public fields such as email and username, creation and update timestamps, and a nullable deleted_at to indicate soft deletion.\n\nSensitive information such as password hashes is excluded from the response for security.\n\nThis operation is typically restricted to regularUser or premiumUser roles.\n\nAppropriate error handling ensures responses for not found IDs and unauthorized access.\n\nThis endpoint uses the 'get' method and requires a UUID formatted 'id' path parameter.\n\nThe response provides detailed user information for management or auditing purposes.","summary":"Retrieve detailed information of a regular user by ID","parameters":[{"name":"id","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested regular user","typeName":"IRecipeSharingRegularUser"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/regularUsers/{id}","method":"get","name":"at"},{"specification":"This operation retrieves the detailed information of a specific regular user by their unique ID. It accesses the recipe_sharing_regularusers table in the database, which contains user identity data such as email, username, password_hash, and relevant timestamps including soft deletion. The operation returns a single user entity excluding sensitive fields like password_hash for security.\n\nThe endpoint accepts the user ID as a path parameter and validates its format. Access to this operation should be limited to regularUser or premiumUser roles due to the sensitivity of user data.\n\nErrors may arise if the ID is not found or if the requesting client lacks sufficient permissions.","description":"Retrieve detailed information about a specific regular user identified by their unique ID.\n\nThe user record includes public fields such as email and username, creation and update timestamps, and a nullable deleted_at to indicate soft deletion.\n\nSensitive information such as password hashes is excluded from the response for security.\n\nThis operation is typically restricted to regularUser or premiumUser roles.\n\nAppropriate error handling ensures responses for not found IDs and unauthorized access.\n\nThis endpoint uses the 'get' method and requires a UUID formatted 'id' path parameter.\n\nThe response provides detailed user information for management or auditing purposes.","summary":"Retrieve detailed information of a regular user by ID","parameters":[{"name":"id","description":"Unique identifier of the target regular user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested regular user","typeName":"IRecipeSharingRegularUser"},"authorizationType":null,"authorizationRole":"premiumUser","path":"/recipeSharing/premiumUser/regularUsers/{id}","method":"get","name":"at"},{"specification":"This operation updates the information of an existing regular user identified by their ID. It operates on the recipe_sharing_regularusers database table, which stores user emails, usernames, hashed passwords, and timestamps including soft deletion timestamps. Modifications are restricted to permitted fields excluding the primary key. Password updates must be handled carefully to maintain security. Soft deletion flags are not modified by this API.\n\nThe endpoint requires the user's ID as a path parameter and expects the update data in the request body. Access should be limited to regularUser or premiumUser roles due to the sensitivity of user data.\n\nValidation ensures emails and usernames remain unique where applicable.\n\nErrors occur if the user does not exist, the input is invalid, or uniqueness constraints are violated.","description":"Update the data of an existing regular user identified by their unique ID.\n\nThis operation allows modification of public user information such as email and username.\n\nPassword updates are performed by changing the password_hash field with securely hashed values.\n\nSoft deletion timestamps are not directly modifiable here.\n\nAccess to this operation is restricted to regularUser or premiumUser roles.\n\nThe endpoint accepts the user ID as a path parameter and the updated user data in the request body.\n\nValidation checks uniqueness constraints for email and username.\n\nErrors are returned if input validation fails or the user ID is not found.\n\nSuccessful updates return the updated user entity excluding sensitive password fields.\n\nThe method used is PUT and requires a UUID formatted 'id' path parameter.\n\n","summary":"Update an existing regular user's information by ID","parameters":[{"name":"id","description":"Unique identifier of the regular user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the regular user","typeName":"IRecipeSharingRegularUser.IUpdate"},"responseBody":{"description":"Updated details of the regular user","typeName":"IRecipeSharingRegularUser"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/regularUsers/{id}","method":"put","name":"update"},{"specification":"This operation updates the information of an existing regular user identified by their ID. It operates on the recipe_sharing_regularusers database table, which stores user emails, usernames, hashed passwords, and timestamps including soft deletion timestamps. Modifications are restricted to permitted fields excluding the primary key. Password updates must be handled carefully to maintain security. Soft deletion flags are not modified by this API.\n\nThe endpoint requires the user's ID as a path parameter and expects the update data in the request body. Access should be limited to regularUser or premiumUser roles due to the sensitivity of user data.\n\nValidation ensures emails and usernames remain unique where applicable.\n\nErrors occur if the user does not exist, the input is invalid, or uniqueness constraints are violated.","description":"Update the data of an existing regular user identified by their unique ID.\n\nThis operation allows modification of public user information such as email and username.\n\nPassword updates are performed by changing the password_hash field with securely hashed values.\n\nSoft deletion timestamps are not directly modifiable here.\n\nAccess to this operation is restricted to regularUser or premiumUser roles.\n\nThe endpoint accepts the user ID as a path parameter and the updated user data in the request body.\n\nValidation checks uniqueness constraints for email and username.\n\nErrors are returned if input validation fails or the user ID is not found.\n\nSuccessful updates return the updated user entity excluding sensitive password fields.\n\nThe method used is PUT and requires a UUID formatted 'id' path parameter.\n\n","summary":"Update an existing regular user's information by ID","parameters":[{"name":"id","description":"Unique identifier of the regular user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the regular user","typeName":"IRecipeSharingRegularUser.IUpdate"},"responseBody":{"description":"Updated details of the regular user","typeName":"IRecipeSharingRegularUser"},"authorizationType":null,"authorizationRole":"premiumUser","path":"/recipeSharing/premiumUser/regularUsers/{id}","method":"put","name":"update"},{"specification":"This operation permanently removes a regular user record from the system by their unique ID. It performs a hard delete on the recipe_sharing_regularusers table, which stores user identity data. Since this table supports soft deletion through a deleted_at timestamp, this operation explicitly deletes the user record from the database. Only authorized regularUser and premiumUser roles are permitted to perform this action.\n\nThe API accepts the user ID as a path parameter and does not require a request body or return any content.\n\nErrors occur if the user ID is invalid or the user does not exist.\n\nDue to the irreversible nature of this deletion, this operation should be used with caution.\n\nThis is an HTTP DELETE method.","description":"Permanently delete a regular user from the database by their unique ID.\n\nThis operation deletes the user record entirely, bypassing any soft delete mechanisms.\n\nAccess is restricted to regularUser and premiumUser roles.\n\nThe endpoint requires the user ID as a UUID formatted path parameter.\n\nNo request body is needed.\n\nNo response body is returned.\n\nErrors are returned if the user ID is not found.\n\nUse this operation with caution as deletion is irreversible.","summary":"Permanently delete a regular user by ID","parameters":[{"name":"id","description":"Unique identifier of the regular user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/regularUsers/{id}","method":"delete","name":"erase"},{"specification":"This operation permanently removes a regular user record from the system by their unique ID. It performs a hard delete on the recipe_sharing_regularusers table, which stores user identity data. Since this table supports soft deletion through a deleted_at timestamp, this operation explicitly deletes the user record from the database. Only authorized regularUser and premiumUser roles are permitted to perform this action.\n\nThe API accepts the user ID as a path parameter and does not require a request body or return any content.\n\nErrors occur if the user ID is invalid or the user does not exist.\n\nDue to the irreversible nature of this deletion, this operation should be used with caution.\n\nThis is an HTTP DELETE method.","description":"Permanently delete a regular user from the database by their unique ID.\n\nThis operation deletes the user record entirely, bypassing any soft delete mechanisms.\n\nAccess is restricted to regularUser and premiumUser roles.\n\nThe endpoint requires the user ID as a UUID formatted path parameter.\n\nNo request body is needed.\n\nNo response body is returned.\n\nErrors are returned if the user ID is not found.\n\nUse this operation with caution as deletion is irreversible.","summary":"Permanently delete a regular user by ID","parameters":[{"name":"id","description":"Unique identifier of the regular user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"premiumUser","path":"/recipeSharing/premiumUser/regularUsers/{id}","method":"delete","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of premium users from the Recipe Sharing backend system. It accesses the recipe_sharing_premiumusers table to enable search functionalities with pagination, filtering, and sorting. The operation supports detailed query capabilities to list premium users efficiently, filtering by email, username, and date fields while excluding soft deleted entries.","description":"Retrieve a paginated list of premium users. This operation supports advanced search filtering, sorting, and pagination. It accesses the recipe_sharing_premiumusers table, applying soft deletion filters to exclude deleted users.\n\nOnly authenticated users with roles 'regularUser' or 'premiumUser' can access this endpoint. The response includes paginated premium user summaries, allowing client-side listing and management of premium subscribers.\n\nTypical use cases include administrative UI to manage premium users and analytics dashboards for subscription tracking.","summary":"Search and retrieve a filtered, paginated list of premium users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for premium user filtering","typeName":"IRecipeSharingPremiumUser.IRequest"},"responseBody":{"description":"Paginated list of premium users that match the search criteria","typeName":"IPageIRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/premiumUsers","method":"patch","name":"index","authorizationType":null,"authorizationRole":"regularUser"},{"specification":"This operation retrieves a filtered and paginated list of premium users from the Recipe Sharing backend system. It accesses the recipe_sharing_premiumusers table to enable search functionalities with pagination, filtering, and sorting. The operation supports detailed query capabilities to list premium users efficiently, filtering by email, username, and date fields while excluding soft deleted entries.","description":"Retrieve a paginated list of premium users. This operation supports advanced search filtering, sorting, and pagination. It accesses the recipe_sharing_premiumusers table, applying soft deletion filters to exclude deleted users.\n\nOnly authenticated users with roles 'regularUser' or 'premiumUser' can access this endpoint. The response includes paginated premium user summaries, allowing client-side listing and management of premium subscribers.\n\nTypical use cases include administrative UI to manage premium users and analytics dashboards for subscription tracking.","summary":"Search and retrieve a filtered, paginated list of premium users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for premium user filtering","typeName":"IRecipeSharingPremiumUser.IRequest"},"responseBody":{"description":"Paginated list of premium users that match the search criteria","typeName":"IPageIRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/premiumUsers","method":"patch","name":"index","authorizationType":null,"authorizationRole":"premiumUser"},{"specification":"Retrieves detailed information about a specific premium user by unique identifier. The operation reads from the recipe_sharing_premiumusers table and returns all profile fields except sensitive data such as passwords.\n\nAccess to this detail is restricted to users with 'regularUser' or 'premiumUser' roles, ensuring users can view their own information and administrators can manage premium accounts.\n\nIf the requested premium user is deleted or does not exist, a 404 error is returned.\n\nThe returned data includes user ID, email, username, premium_since timestamp, and audit fields like created_at and updated_at.","description":"Retrieve detailed information of a premium user by their unique identifier.\n\nThis operation fetches all standard profile data from the recipe_sharing_premiumusers record and omits sensitive fields such as password_hash.\n\nAuthorization checks ensure only users with appropriate access can retrieve this information.\n\nIf the premium user is soft deleted, the operation will treat the record as non-existent.\n\nProper error responses are issued for missing or inaccessible users.","summary":"Retrieve detailed premium user information by ID","parameters":[{"name":"id","description":"Target premium user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed premium user information","typeName":"IRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/premiumUsers/{id}","method":"get","name":"at","authorizationType":null,"authorizationRole":"regularUser"},{"specification":"Retrieves detailed information about a specific premium user by unique identifier. The operation reads from the recipe_sharing_premiumusers table and returns all profile fields except sensitive data such as passwords.\n\nAccess to this detail is restricted to users with 'regularUser' or 'premiumUser' roles, ensuring users can view their own information and administrators can manage premium accounts.\n\nIf the requested premium user is deleted or does not exist, a 404 error is returned.\n\nThe returned data includes user ID, email, username, premium_since timestamp, and audit fields like created_at and updated_at.","description":"Retrieve detailed information of a premium user by their unique identifier.\n\nThis operation fetches all standard profile data from the recipe_sharing_premiumusers record and omits sensitive fields such as password_hash.\n\nAuthorization checks ensure only users with appropriate access can retrieve this information.\n\nIf the premium user is soft deleted, the operation will treat the record as non-existent.\n\nProper error responses are issued for missing or inaccessible users.","summary":"Retrieve detailed premium user information by ID","parameters":[{"name":"id","description":"Target premium user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed premium user information","typeName":"IRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/premiumUsers/{id}","method":"get","name":"at","authorizationType":null,"authorizationRole":"premiumUser"},{"specification":"Updates profile details for an existing premium user identified by UUID. This operation modifies allowed fields in the recipe_sharing_premiumusers table such as email, username, and premium_since timestamp.\n\nAccess control restricts updates to the user themselves or authorized administrators with roles 'regularUser' or 'premiumUser'.\n\nPassword and soft delete fields are not modifiable with this operation to ensure security and data integrity.\n\nValidation ensures uniquely constrained fields like email and username remain valid upon update.\n\nOn success, the updated user profile data excluding password hashes is returned.","description":"Update profile details of a premium user.\n\nAllows modification of email, username, and premium_since date fields with appropriate validation.\n\nThis operation is restricted to the user or administrators with specified roles.\n\nPassword or deletion-related fields cannot be updated through this method.\n\nA successful update returns the updated premium user information excluding sensitive credentials.\n\nInvalid inputs or permission denials return error responses.","summary":"Update premium user details by ID","parameters":[{"name":"id","description":"Target premium user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Profile update data for the premium user","typeName":"IRecipeSharingPremiumUser.IUpdate"},"responseBody":{"description":"Updated premium user information","typeName":"IRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/premiumUsers/{id}","method":"put","name":"update","authorizationType":null,"authorizationRole":"regularUser"},{"specification":"Updates profile details for an existing premium user identified by UUID. This operation modifies allowed fields in the recipe_sharing_premiumusers table such as email, username, and premium_since timestamp.\n\nAccess control restricts updates to the user themselves or authorized administrators with roles 'regularUser' or 'premiumUser'.\n\nPassword and soft delete fields are not modifiable with this operation to ensure security and data integrity.\n\nValidation ensures uniquely constrained fields like email and username remain valid upon update.\n\nOn success, the updated user profile data excluding password hashes is returned.","description":"Update profile details of a premium user.\n\nAllows modification of email, username, and premium_since date fields with appropriate validation.\n\nThis operation is restricted to the user or administrators with specified roles.\n\nPassword or deletion-related fields cannot be updated through this method.\n\nA successful update returns the updated premium user information excluding sensitive credentials.\n\nInvalid inputs or permission denials return error responses.","summary":"Update premium user details by ID","parameters":[{"name":"id","description":"Target premium user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Profile update data for the premium user","typeName":"IRecipeSharingPremiumUser.IUpdate"},"responseBody":{"description":"Updated premium user information","typeName":"IRecipeSharingPremiumUser"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/premiumUsers/{id}","method":"put","name":"update","authorizationType":null,"authorizationRole":"premiumUser"},{"specification":"Permanently deletes a premium user record by their unique ID. This is a hard delete operation removing the user data from the recipe_sharing_premiumusers table.\n\nAuthorization is limited strictly to the 'premiumUser' role to ensure deletion safety.\n\nNo payload is required for this operation.\n\nNo content is returned upon success; errors are returned for non-existing or unauthorized requests.\n\nThis operation enforces data integrity and security through role-restricted access and responsible deletion practices.","description":"Delete a premium user permanently by their unique identifier.\n\nThis operation removes the corresponding user record fully from the database.\n\nOnly users with 'premiumUser' role are authorized to execute this action.\n\nRequests to delete non-existent or already removed users will result in error responses.\n\nNo response content is provided upon successful deletion.\n\nProper error handling maintains system stability and security.","summary":"Delete premium user by ID","parameters":[{"name":"id","description":"Target premium user's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["premiumUser"],"path":"/recipeSharing/premiumUser/premiumUsers/{id}","method":"delete","name":"erase","authorizationType":null,"authorizationRole":"premiumUser"},{"specification":"This operation retrieves a paginated list of moderators from the Recipe Sharing Backend system. It operates on the recipe_sharing_moderators table within the Identity namespace, providing filters, search, sorting, and pagination capabilities. The moderators represent users with auditing and moderation responsibilities including managing flagged content, review moderation, and category approvals. The operation supports searching moderators by email, username, and creation/update timestamps, enabling administrative overview and user management functionalities.","description":"Retrieve a filtered and paginated list of moderator accounts in the Recipe Sharing Backend system. This operation supports searching and sorting by moderator attributes including email, username, and timestamps for creation and last update.\n\nSecurity for this endpoint requires authentication with the 'moderator' role to prevent unauthorized access to sensitive user data. The response returns summary information optimized for management interfaces showing essential moderator details.\n\nThe operation corresponds to the recipe_sharing_moderators table which stores authentication and auditing information for moderators, including email, hashed passwords, and timestamps. Pagination ensures scalable retrieval for large numbers of moderators.\n\nThis endpoint integrates standard pagination parameters alongside search criteria in the request body, allowing flexible queries. The response provides a paginated list structure with moderator summary information.","summary":"Search and retrieve a list of moderator user accounts","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering moderators","typeName":"IRecipeSharingModerator.IRequest"},"responseBody":{"description":"Paginated list of moderator summaries matching search criteria","typeName":"IPageIRecipeSharingModerator.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/recipeSharing/moderator/moderators","method":"patch"},{"specification":"This operation retrieves detailed information of a specific moderator by their ID from the Identity database. It accesses the recipe_sharing_moderators table which contains user credentials and audit timestamps for moderators responsible for content and user moderation in the Recipe Sharing Backend.\n\nThe operation requires a path parameter of moderator id (UUID) to identify the target moderator. Secure authorization is enforced for users with the 'moderator' role to protect sensitive authentication data.\n\nSuccessful execution returns comprehensive moderator attributes including id, email, username, and auditing timestamps without password hash exposure.\n\nThis GET operation supports administrative user management and individual moderator detail review within the backend system.","description":"Retrieve detailed information of a single moderator user identified by their unique ID in the Recipe Sharing Backend system. This includes email, username, creation and update timestamps. Password hashes are not returned to ensure security.\n\nThe operation requires a path parameter 'id' that corresponds to the moderator's UUID. Only authenticated users with the 'moderator' role may access this information, ensuring data protection.\n\nThe moderator data is sourced from the recipe_sharing_moderators Prisma model, which manages authentication and audit information. This operation is useful for administrative user account management and status checking.","summary":"Get detailed moderator information by ID","parameters":[{"name":"id","description":"Unique identifier of the target moderator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator information","typeName":"IRecipeSharingModerator"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/recipeSharing/moderator/moderators/{id}","method":"get"},{"specification":"This operation updates the information of a specific moderator user by ID in the Identity system. It accesses the recipe_sharing_moderators table which contains authentication credentials and audit timestamps for moderating users.\n\nThe operation uses the HTTP PUT method requiring a path parameter for the moderator 'id' and a request body with updated moderator information adhering to IRecipeSharingModerator.IUpdate type structure. Valid fields for update include email, username, and potentially password modifications with hashed storage.\n\nRole-based authorization restricts this endpoint to users with the 'moderator' role for security and administrative control.\n\nSuccessful execution returns the updated moderator user details.","description":"Update a moderator user's information by their unique ID. The update may include changes to the email, username, or password hash. This operation enforces security by limiting access to authenticated moderators.\n\nInput validation ensures email uniqueness and username format compliance. The update reflects in the recipe_sharing_moderators database table, maintaining audit timestamps.\n\nThis endpoint supports administrative maintenance of moderator accounts such as credential updates and profile management.","summary":"Update moderator user information by ID","parameters":[{"name":"id","description":"Unique identifier of the target moderator user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the moderator user","typeName":"IRecipeSharingModerator.IUpdate"},"responseBody":{"description":"Updated moderator user information","typeName":"IRecipeSharingModerator"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/recipeSharing/moderator/moderators/{id}","method":"put"},{"specification":"This operation performs a hard delete of a specific moderator user by their unique ID. It permanently removes the moderator record from the recipe_sharing_moderators database table within the Identity namespace.\n\nThe delete action requires a path parameter 'id' to specify which moderator to remove. Deletion must be restricted to users with the 'moderator' role for security and administrative control.\n\nThis operation does not accept a request body and does not return a response body. The deletion is a hard delete, permanently eradicating the record with no recovery.\n\nIt supports administrative user lifecycle management, enabling cleanup or deactivation of moderator accounts that are no longer valid or compromised.","description":"Permanently delete a moderator user from the system by their unique ID. This is a hard delete operation that cannot be undone. It removes all associated data from the recipe_sharing_moderators table.\n\nThe operation requires the path parameter 'id' as the unique identifier of the moderator to erase. Only users with the 'moderator' role may perform this action to ensure strict control.\n\nThere is no request body or response content. The successful execution results in the complete removal of the moderator user record.","summary":"Delete a moderator user by ID","parameters":[{"name":"id","description":"Unique identifier of the target moderator user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/recipeSharing/moderator/moderators/{id}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of recipes from the recipe_sharing_recipes table as defined in the Prisma schema. It supports complex search and filtering using request parameters to find recipes based on title, status, creation date, and other criteria. Pagination parameters allow clients to retrieve the recipe list in pages, with sorting options to order by date or relevance. This endpoint is designed to allow users (regular or premium) to search and browse the recipe catalog efficiently.","path":"/recipeSharing/regularUser/recipes","method":"patch","summary":"Search and retrieve a filtered, paginated list of recipes","description":"Fetches a paginated list of recipes stored in the system with support for complex search filters.\n\nThis operation enables users to search for recipes by various criteria including partial title matches, status filtering (e.g., published, draft), and sorted results.\n\nSecurity considerations ensure that only authenticated users (regular or premium) can access this list. Sensitive recipe information is filtered according to user roles.\n\nThe operation relates to the recipe_sharing_recipes Prisma DB table, leveraging all searchable fields and supporting pagination for efficient data transmission.\n\nValidation rules ensure valid pagination parameters and allowed sorting options.\n\nThis operation is commonly used prior to fetching detailed recipe information through the detail endpoint.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recipe filtering","typeName":"IRecipeSharingRecipes.IRequest"},"responseBody":{"description":"Paginated list of recipe summary information matching search criteria","typeName":"IPageIRecipeSharingRecipes.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index"},{"specification":"Retrieves detailed information of a single recipe by its unique identifier from the recipe_sharing_recipes table. This operation fetches all relevant fields including title, description, status, creation timestamps, and relational data such as creator user. It enables users to view full recipe details for use in display or editing flows.\n\nOnly authenticated users (regular or premium) are authorized. The recipe is identified by the recipeId path parameter of UUID format.","path":"/recipeSharing/regularUser/recipes/{recipeId}","method":"get","summary":"Retrieve detailed information of a recipe by ID","description":"Fetches detailed recipe information by recipe ID.\n\nUsers must provide a valid recipe UUID to retrieve the details. Authentication ensures that only authorized users access this data.\n\nThis operation interfaces directly with the Prisma DB recipe_sharing_recipes table and returns all fields necessary for comprehensive recipe display.\n\nIf the recipe does not exist, an appropriate error response is returned.\n\nThis fetch is typically followed by update or deletion operations if the user owns the recipe.","parameters":[{"name":"recipeId","description":"Unique identifier of the target recipe","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed recipe information","typeName":"IRecipeSharingRecipes"},"authorizationType":null,"authorizationRole":"regularUser","name":"at"},{"specification":"Creates a new recipe record in the recipe_sharing_recipes table using the data provided in the request body. Validations are performed on mandatory fields such as unique title per user, positive ingredient quantities, and required preparation steps.\n\nOnly authenticated users (regular or premium) may create recipes, which become associated with their user ID internally. The system sets timestamps and status appropriately.\n\nThis operation supports the core business function of recipe creation by users, enabling new recipe sharing and management.","path":"/recipeSharing/regularUser/recipes","method":"post","summary":"Create a new recipe","description":"Creates a new recipe entry in the system.\n\nUsers submit the required recipe details including title, description, ingredients, status, and nutritional information.\n\nThe operation validates that the title is unique per user and fields meet numeric and formatting constraints.\n\nSuccessful creation returns the full recipe data including assigned IDs and timestamps.\n\nThis endpoint is essential for user content generation within the platform.","parameters":[],"requestBody":{"description":"Creation info of the recipe","typeName":"IRecipeSharingRecipes.ICreate"},"responseBody":{"description":"Information of the created recipe","typeName":"IRecipeSharingRecipes"},"authorizationType":null,"authorizationRole":"regularUser","name":"create"},{"specification":"Updates an existing recipe entry in the recipe_sharing_recipes table identified by recipeId. The operation modifies any or all mutable recipe fields such as title, description, status, and ingredients. Ownership verification is enforced in business logic to allow only recipe owners to update their records.\n\nAuthenticated users (regular or premium) may update recipes they own. The system updates the updated_at timestamp accordingly.\n\nValidation ensures all modified fields meet required constraints. Partial updates are supported within the PUT operation structure.\n\nThis endpoint is critical for managing recipe modifications and keeping user content current.","path":"/recipeSharing/regularUser/recipes/{recipeId}","method":"put","summary":"Update an existing recipe by ID","description":"Updates an existing recipe by ID.\n\nUsers provide updated recipe information conforming to the schema.\n\nThe endpoint enforces that only the creator of the recipe can update it.\n\nValidation errors are returned if any field is invalid.\n\nSuccessful update returns the full updated recipe data.\n\nThis operation maintains content accuracy and user ownership.","parameters":[{"name":"recipeId","description":"Unique identifier of the target recipe","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the recipe","typeName":"IRecipeSharingRecipes.IUpdate"},"responseBody":{"description":"Information of the updated recipe","typeName":"IRecipeSharingRecipes"},"authorizationType":null,"authorizationRole":"regularUser","name":"update"},{"specification":"This operation permanently deletes a recipe from the Recipe Sharing platform database. It acts upon the recipe_sharing_recipes table, which holds detailed user-created recipes linked to their owner users. The deletion is a hard-delete that fully removes the record identified by the provided recipeId UUID path parameter, as the Prisma schema for recipe_sharing_recipes includes a nullable deleted_at timestamp but this API defines hard deletion explicitly. Only authorized users, typically the recipe owner or admin roles, should invoke this endpoint to prevent unauthorized data loss. No request body or response body is required, and the operation returns HTTP status codes to indicate success or failure.","path":"/recipeSharing/regularUser/recipes/{recipeId}","method":"delete","summary":"Permanently delete a recipe by recipeId","parameters":[{"name":"recipeId","description":"Unique identifier of the recipe to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","description":"Deletes a specific recipe identified by recipeId from the recipe_sharing_recipes table. This is a hard delete operation that removes the recipe completely from the database with no recovery possible from this endpoint.\n\nAccess is restricted to authorized users such as the recipe owner.\n\nIf the recipe does not exist, a 404 error is returned. Other access and server errors are handled per standard HTTP conventions.\n\nThis operation complements other recipe management APIs including recipe creation, update, and retrieval.\n\nNo request body is needed for this DELETE operation, and no response body is returned upon successful execution."},{"specification":"Retrieve a filtered and paginated list of ingredients from the recipe_sharing_ingredients table. This table stores master ingredient data including name, optional brand information, and timestamps important for recipe management and substitutions. The operation accepts complex filtering and pagination criteria in the request body to support searching by ingredient name or brand and returns a paginated list of ingredient summaries. Access requires authenticated user role regularUser.\n\nThis operation enables users to browse available ingredients for recipe creation, dietary planning, and shopping list management.","path":"/recipeSharing/regularUser/ingredients","method":"patch","summary":"Search and retrieve a list of ingredients with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for ingredient filtering","typeName":"IRecipeSharingIngredient.IRequest"},"responseBody":{"description":"Paginated list of ingredients matching filter criteria","typeName":"IPageIRecipeSharingIngredient.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","description":"Search and retrieve a paginated list of ingredients. Supports filtering by name, brand, and sorting with search criteria detailed in the request body.\n\nRequires authenticated access.\n\nReturns paginated ingredient summaries suitable for display in ingredient exploration and substitution lists."},{"specification":"Retrieves detailed information of an ingredient by ingredientId from the recipe_sharing_ingredients master table. This table contains ingredient names, optional brand data, and audit timestamps for creation and updates. The endpoint requires authenticated regularUser role to access detailed ingredient data for recipe and shopping list management.\n\nReturns complete ingredient details or a 404 Not Found error if the ingredient does not exist.","path":"/recipeSharing/regularUser/ingredients/{ingredientId}","method":"get","summary":"Retrieve detailed information of an ingredient by ingredientId","parameters":[{"name":"ingredientId","description":"Unique identifier of the target ingredient","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Ingredient detailed information","typeName":"IRecipeSharingIngredient"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","description":"Get detailed ingredient information identified by ingredientId.\n\nAccessible to authenticated users to facilitate recipe creation and substitutions.\n\nReturns full ingredient data including name, brand, and timestamps."},{"specification":"Creates a new ingredient in the ingredient master table recipe_sharing_ingredients, which stores ingredient names, optional brand info, and audit timestamps. This operation accepts creation data in the request body and returns the full created ingredient entity including assigned UUID and timestamps. It requires the caller to have role regularUser to manage ingredient catalog data.\n\nThe system validates unique ingredient names and optional brand fields. Errors are returned for validation failures or unauthorized access.\n\nThis operation complements ingredient retrieval, update, and deletion APIs.","path":"/recipeSharing/regularUser/ingredients","method":"post","summary":"Create a new ingredient in the master catalog","parameters":[],"requestBody":{"description":"Creation information for a new ingredient","typeName":"IRecipeSharingIngredient.ICreate"},"responseBody":{"description":"Details of the created ingredient","typeName":"IRecipeSharingIngredient"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","description":"Create a new ingredient record in the master ingredient table.\n\nRequires authorized user role to perform ingredient management.\n\nReturns the fully detailed created ingredient including UUID and timestamps."},{"specification":"This operation updates a specific ingredient in the recipe_sharing_ingredients table in the Recipe Sharing backend database. It accepts the unique ingredient identifier and allows modification of the ingredient's name and optional brand, maintaining audit timestamps. Only authenticated regular or premium users are authorized to perform this update. The system ensures name uniqueness and validation of input data before persistence.","description":"This endpoint allows updating the details of an existing ingredient by specifying the ingredientId path parameter. The request body must include the updated details such as name and optionally brand. The response returns the updated ingredient record.\n\nUsers performing this action must have appropriate authorization as either regular or premium users.\n\nThe operation ensures data validation, uniqueness of ingredient names, and audit timestamp modification. Proper error handling returns 400 for invalid input, 403 for unauthorized access, and 404 if the ingredient does not exist.\n\nOther relevant operations include retrieving ingredients, managing substitutions, and deletion.\n\nThis operation performs a hard update without changing soft deletion flags.","summary":"Update details of an ingredient in the recipe_sharing_ingredients table","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":{"description":"Updated ingredient details","typeName":"IRecipeSharingIngredient.IUpdate"},"responseBody":{"description":"The updated ingredient record","typeName":"IRecipeSharingIngredient"},"authorizationType":null,"authorizationRole":"regularUser","name":"updateIngredient","path":"/recipeSharing/regularUser/ingredients/{ingredientId}","method":"put"},{"specification":"This operation updates a specific ingredient in the recipe_sharing_ingredients table in the Recipe Sharing backend database. It accepts the unique ingredient identifier and allows modification of the ingredient's name and optional brand, maintaining audit timestamps. Only authenticated regular or premium users are authorized to perform this update. The system ensures name uniqueness and validation of input data before persistence.","description":"This endpoint allows updating the details of an existing ingredient by specifying the ingredientId path parameter. The request body must include the updated details such as name and optionally brand. The response returns the updated ingredient record.\n\nUsers performing this action must have appropriate authorization as either regular or premium users.\n\nThe operation ensures data validation, uniqueness of ingredient names, and audit timestamp modification. Proper error handling returns 400 for invalid input, 403 for unauthorized access, and 404 if the ingredient does not exist.\n\nOther relevant operations include retrieving ingredients, managing substitutions, and deletion.\n\nThis operation performs a hard update without changing soft deletion flags.","summary":"Update details of an ingredient in the recipe_sharing_ingredients table","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":{"description":"Updated ingredient details","typeName":"IRecipeSharingIngredient.IUpdate"},"responseBody":{"description":"The updated ingredient record","typeName":"IRecipeSharingIngredient"},"authorizationType":null,"authorizationRole":"premiumUser","name":"updateIngredient","path":"/recipeSharing/premiumUser/ingredients/{ingredientId}","method":"put"},{"specification":"This operation permanently deletes a specified ingredient record from the recipe_sharing_ingredients table by its unique identifier. This hard delete removes the record entirely, disregarding soft deletion timestamps.\n\nOnly authorized regular and premium users may perform deletion. No request body is necessary. No response body is returned upon success. Errors include 403 for unauthorized and 404 for ingredient not found.\n\nThis function complements the ingredient management lifecycle including creation, reading, updating, and substitution management.","description":"This endpoint facilitates permanent deletion of an ingredient by ingredientId. The user must have regular or premium authorization.\n\nSuccessful deletion removes the ingredient record from the database completely with no response body.\n\nErrors include unauthorized access or non-existent ingredient.\n\nRelated operations include ingredient retrieval, updates, and substitution management.\n\nThis is a hard delete ignoring soft delete timestamps.","summary":"Permanent deletion of an ingredient from the recipe_sharing_ingredients table","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"eraseIngredient","path":"/recipeSharing/regularUser/ingredients/{ingredientId}","method":"delete"},{"specification":"This operation permanently deletes a specified ingredient record from the recipe_sharing_ingredients table by its unique identifier. This hard delete removes the record entirely, disregarding soft deletion timestamps.\n\nOnly authorized regular and premium users may perform deletion. No request body is necessary. No response body is returned upon success. Errors include 403 for unauthorized and 404 for ingredient not found.\n\nThis function complements the ingredient management lifecycle including creation, reading, updating, and substitution management.","description":"This endpoint facilitates permanent deletion of an ingredient by ingredientId. The user must have regular or premium authorization.\n\nSuccessful deletion removes the ingredient record from the database completely with no response body.\n\nErrors include unauthorized access or non-existent ingredient.\n\nRelated operations include ingredient retrieval, updates, and substitution management.\n\nThis is a hard delete ignoring soft delete timestamps.","summary":"Permanent deletion of an ingredient from the recipe_sharing_ingredients table","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"premiumUser","name":"eraseIngredient","path":"/recipeSharing/premiumUser/ingredients/{ingredientId}","method":"delete"},{"specification":"This operation retrieves a paginated list of ingredient substitutions related to a specified ingredient in the recipe_sharing_ingredient_substitutions table. The endpoint supports advanced filtering, pagination, and sorting based on the IRequest request body.\n\nAuthorized users with roles regularUser and premiumUser may access this endpoint. The response includes detailed summaries of substitutions, including substitute ingredients, conversion ratios, and moderation status.\n\nThis operation enables users to understand substitution options for ingredients, facilitating recipe modification, nutritional recalculation, and cost adjustments.\n\nCommon errors include 404 for non-existing ingredient and 403 for unauthorized access.","description":"This endpoint retrieves a paginated list of ingredient substitutions for a specific ingredient identified by ingredientId.\n\nThe request body supports filtering and pagination criteria. The response returns a paginated list of substitution summaries.\n\nOnly users with regularUser or premiumUser roles may access.\n\nRelated endpoints provide substitution details, creation, update, and deletion capabilities.\n\nErrors include 404 if the ingredient is not found or 403 if the user is unauthorized.","summary":"List available substitutions for a specified ingredient","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":{"description":"Substitution search criteria and pagination parameters","typeName":"IRecipeSharingIngredientSubstitution.IRequest"},"responseBody":{"description":"Paginated list of ingredient substitution summaries","typeName":"IPageIRecipeSharingIngredientSubstitution.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"indexIngredientSubstitutions","path":"/recipeSharing/regularUser/ingredients/{ingredientId}/substitutions","method":"patch"},{"specification":"This operation retrieves a paginated list of ingredient substitutions related to a specified ingredient in the recipe_sharing_ingredient_substitutions table. The endpoint supports advanced filtering, pagination, and sorting based on the IRequest request body.\n\nAuthorized users with roles regularUser and premiumUser may access this endpoint. The response includes detailed summaries of substitutions, including substitute ingredients, conversion ratios, and moderation status.\n\nThis operation enables users to understand substitution options for ingredients, facilitating recipe modification, nutritional recalculation, and cost adjustments.\n\nCommon errors include 404 for non-existing ingredient and 403 for unauthorized access.","description":"This endpoint retrieves a paginated list of ingredient substitutions for a specific ingredient identified by ingredientId.\n\nThe request body supports filtering and pagination criteria. The response returns a paginated list of substitution summaries.\n\nOnly users with regularUser or premiumUser roles may access.\n\nRelated endpoints provide substitution details, creation, update, and deletion capabilities.\n\nErrors include 404 if the ingredient is not found or 403 if the user is unauthorized.","summary":"List available substitutions for a specified ingredient","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"}],"requestBody":{"description":"Substitution search criteria and pagination parameters","typeName":"IRecipeSharingIngredientSubstitution.IRequest"},"responseBody":{"description":"Paginated list of ingredient substitution summaries","typeName":"IPageIRecipeSharingIngredientSubstitution.ISummary"},"authorizationType":null,"authorizationRole":"premiumUser","name":"indexIngredientSubstitutions","path":"/recipeSharing/premiumUser/ingredients/{ingredientId}/substitutions","method":"patch"},{"specification":"This operation retrieves detailed information about a specific ingredient substitution identified by substitutionId for an ingredient identified by ingredientId in the recipe_sharing_ingredient_substitutions table.\n\nOnly users with regularUser or premiumUser roles may access. The response includes full substitution details such as conversion ratios and moderation status.\n\nThe operation accepts no request body and requires valid path parameters. Errors include 404 for missing records and 403 for access violations.\n\nThis supports detailed modification and display of ingredient substitutions within recipes.","description":"This endpoint returns detailed information about a specific ingredient substitution.\n\nPath parameters ingredientId and substitutionId are required to identify the substitution.\n\nNo request body is needed.\n\nResponse contains the full substitution record.\n\nAccess is limited to users with regularUser or premiumUser roles.\n\nRelated operations cover substitution listing, creation, update, and deletion.\n\nErrors include 404 not found and 403 unauthorized.","summary":"Retrieve detailed information about a specific ingredient substitution","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"},{"name":"substitutionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target substitution"}],"requestBody":null,"responseBody":{"description":"Detailed ingredient substitution record","typeName":"IRecipeSharingIngredientSubstitution"},"authorizationType":null,"authorizationRole":"regularUser","name":"atIngredientSubstitution","path":"/recipeSharing/regularUser/ingredients/{ingredientId}/substitutions/{substitutionId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific ingredient substitution identified by substitutionId for an ingredient identified by ingredientId in the recipe_sharing_ingredient_substitutions table.\n\nOnly users with regularUser or premiumUser roles may access. The response includes full substitution details such as conversion ratios and moderation status.\n\nThe operation accepts no request body and requires valid path parameters. Errors include 404 for missing records and 403 for access violations.\n\nThis supports detailed modification and display of ingredient substitutions within recipes.","description":"This endpoint returns detailed information about a specific ingredient substitution.\n\nPath parameters ingredientId and substitutionId are required to identify the substitution.\n\nNo request body is needed.\n\nResponse contains the full substitution record.\n\nAccess is limited to users with regularUser or premiumUser roles.\n\nRelated operations cover substitution listing, creation, update, and deletion.\n\nErrors include 404 not found and 403 unauthorized.","summary":"Retrieve detailed information about a specific ingredient substitution","parameters":[{"name":"ingredientId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target ingredient"},{"name":"substitutionId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target substitution"}],"requestBody":null,"responseBody":{"description":"Detailed ingredient substitution record","typeName":"IRecipeSharingIngredientSubstitution"},"authorizationType":null,"authorizationRole":"premiumUser","name":"atIngredientSubstitution","path":"/recipeSharing/premiumUser/ingredients/{ingredientId}/substitutions/{substitutionId}","method":"get"},{"specification":"This operation creates a new ingredient substitution for a specified ingredient in the Recipe Sharing platform. It operates on the recipe_sharing_ingredient_substitutions table in the Prisma database schema. Users provide the substitute ingredient ID and conversion ratio, which defines how much substitute is needed to replace the original ingredient. Only approved substitutions with valid statuses are allowed. The operation validates existence of ingredient and substitute IDs, creation timestamps are auto-set by the system, and the typical moderation status field must be managed appropriately elsewhere.","description":"Create a new ingredient substitution entry for a particular ingredient identified by 'ingredientId'. This substitution defines an alternative ingredient along with a conversion ratio indicating how to adjust quantities when substituting.\n\nThe substitution must be linked to a valid existing ingredient and an approved substitute ingredient in the system. Users are required to provide the substitute ingredient ID and conversion ratio.\n\nTimestamps for creation and update are managed automatically by the system, ensuring accurate audit trails. This operation requires authenticated users with appropriate permissions to add substitutions.\n\nNote that the substitution status field exists in the database but its value must be managed by moderation processes and is not set during creation.\n\nIf substitution with the same ingredient and substitute combination exists, the system rejects duplication.\n\nThe created substitution can be managed subsequently via update or delete operations.\n","summary":"Create a new ingredient substitution for a given ingredient","parameters":[{"name":"ingredientId","description":"ID of the ingredient to add substitution for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to create an ingredient substitution entry","typeName":"IRecipeSharingIngredientSubstitution.ICreate"},"responseBody":{"description":"The created ingredient substitution","typeName":"IRecipeSharingIngredientSubstitution"},"authorizationType":null,"authorizationRole":"moderator","path":"/recipeSharing/moderator/ingredients/{ingredientId}/substitutions","method":"post","name":"createSubstitution"},{"specification":"This operation updates an existing ingredient substitution record identified by the substitutionId and ingredientId in the Recipe Sharing platform. It modifies properties such as the substitute ingredient ID, conversion ratio, and moderation status. The operation ensures that the specified substitution exists and belongs to the given ingredient.\n\nModification of creation timestamp is disallowed and update timestamp is set automatically. The operation enforces validation on IDs and the substitution status, which must be one of the predefined values ('pending', 'approved', 'rejected').\n\nAuthenticated users with admin or moderator roles can perform this action. The updated substitution record is returned upon successful update.","description":"Update an existing ingredient substitution linked to a given ingredient identified by 'ingredientId' and 'substitutionId'.\n\nThis allows modification of the substitute ingredient, conversion ratio, and moderation status.\n\nModeration statuses are strict enum values: 'pending', 'approved', 'rejected' must be used exactly.\n\nCreation timestamp remains unchanged. Update timestamp updates automatically.\n\nThis operation requires authenticated admin or moderator role for authorization.\n\nValidation ensures the substitution belongs to the specified ingredient and identifiers are valid UUIDs.\n","summary":"Update an ingredient substitution by its ID under a specific ingredient","parameters":[{"name":"ingredientId","description":"ID of the ingredient to which substitution belongs","schema":{"type":"string","format":"uuid"}},{"name":"substitutionId","description":"ID of the substitution to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update an ingredient substitution entry","typeName":"IRecipeSharingIngredientSubstitution.IUpdate"},"responseBody":{"description":"The updated ingredient substitution","typeName":"IRecipeSharingIngredientSubstitution"},"authorizationType":null,"authorizationRole":"moderator","path":"/recipeSharing/moderator/ingredients/{ingredientId}/substitutions/{substitutionId}","method":"put","name":"updateSubstitution"},{"specification":"This operation permanently deletes an ingredient substitution specified by substitutionId and associated with ingredientId in the Recipe Sharing system. The database table is recipe_sharing_ingredient_substitutions, which supports soft deletion via the deleted_at timestamp, but this operation performs a hard removal of the record.\n\nAuthentication restricted to admin and moderator roles. No request body or response body is required.\n\nAll relational constraints and indexing ensure integrity. Upon successful deletion, the substitution is irrecoverably removed.","description":"Erase (permanently delete) an ingredient substitution record linked to a specific ingredient.\n\nThis action removes the substitution entirely from the database with no recovery. It does not soft delete.\n\nAuthorization requires admin or moderator role.\n\nPath parameters must correctly specify the ingredient and substitution IDs.\n\nNo request body or response body is needed.\n","summary":"Delete an ingredient substitution by ID","parameters":[{"name":"ingredientId","description":"ID of the ingredient linked to the substitution","schema":{"type":"string","format":"uuid"}},{"name":"substitutionId","description":"ID of the ingredient substitution to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","path":"/recipeSharing/moderator/ingredients/{ingredientId}/substitutions/{substitutionId}","method":"delete","name":"eraseSubstitution"},{"specification":"Retrieve a paginated list of nutrition facts for ingredients from the recipe_sharing_nutrition_facts table in the Recipe Sharing database. Supports filtering, searching and sorting based on multiple nutrition attributes.\n\nIntended for moderators and admins to manage nutrition data centrally.\n\nSearch parameters and pagination details are provided in the request body. The response is paginated summaries of nutrition facts.\n\nThis operation enforces authorization for admin and moderator roles due to sensitive management nature.","description":"Fetch a filtered and paginated list of ingredient nutrition facts.\n\nSupports searching by nutrient values, ranges, and keyword filters.\n\nPagination allows efficient navigation through large data sets.\n\nOnly users with admin or moderator privileges may invoke this operation.\n\nProper use of request filters can optimize querying performance.\n\nResponse data includes summarized nutrition fact entries suitable for list displays.\n","summary":"Search and list nutrition facts with filtering and pagination","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for nutrition facts","typeName":"IRecipeSharingNutritionFact.IRequest"},"responseBody":{"description":"Paginated list of nutrition fact summaries matching criteria","typeName":"IPageIRecipeSharingNutritionFact.ISummary"},"authorizationType":null,"authorizationRole":"moderator","path":"/recipeSharing/moderator/nutritionFacts","method":"patch","name":"searchNutritionFacts"},{"specification":"This operation retrieves detailed nutritional information for a specific nutrition fact entry identified by nutritionFactId. It operates on the recipe_sharing_nutrition_facts table in the Prisma schema, which stores detailed nutrition data including calories, protein, carbohydrates, fat, fiber, sodium, sugar, vitamins A, C, D, iron, and calcium associated with ingredients. This GET operation returns the full nutrition fact record, enabling clients to fetch comprehensive nutrition details by unique identifier.","description":"Retrieve detailed nutritional information for a specific nutrition fact entry. This endpoint operates on the recipe_sharing_nutrition_facts database entity, which holds granular nutritional data for ingredients, including macros and micronutrients.\n\nClients can fetch calories, protein, carbohydrates, fat, fiber, sodium, sugar, vitamin A, C, D, iron, and calcium values for the ingredient's nutrition fact by its unique ID.\n\nAuthentication is not required for this data, making it accessible to public users for nutritional reference.\n\nThe endpoint requires a valid nutritionFactId path parameter, which must correspond to an existing nutrition fact record.\n\nErrors are returned when the ID is invalid or not found.","summary":"Retrieve a specific nutrition fact by ID","parameters":[{"name":"nutritionFactId","description":"Unique identifier of the nutrition fact","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed nutrition fact data for the specified ID","typeName":"IRecipeSharingNutritionFact"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/recipeSharing/nutritionFacts/{nutritionFactId}","method":"get"},{"specification":"This operation creates a new nutrition fact entry in the recipe_sharing_nutrition_facts table. The nutrition fact includes detailed nutritional values linked to an existing ingredient. The POST request body must provide all required nutritional values according to the schema. The operation validates the input fields and returns the created nutrition fact entity upon success. This API requires appropriate user authentication and authorization, allowing only privileged users to add nutrition facts.","description":"Create a new nutrition fact record associated with an ingredient. This POST operation inserts detailed nutritional data such as calories, protein, fat, carbohydrates, fiber, sodium, sugar, vitamins, and minerals into the database. It links the nutrition fact to an existing ingredient via ingredient_id.\n\nThe system validates that the ingredient exists and that all numeric nutrition values are provided as positive or zero floats where applicable.\n\nOnly authorized users can create nutrition facts, typically administrative or content management roles.\n\nUpon successful creation, the full nutrition fact record is returned.","summary":"Create a new nutrition fact record","parameters":[],"requestBody":{"description":"Information needed to create a nutrition fact","typeName":"IRecipeSharingNutritionFact.ICreate"},"responseBody":{"description":"Created nutrition fact record","typeName":"IRecipeSharingNutritionFact"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/nutritionFacts","method":"post"},{"specification":"This operation updates an existing nutrition fact identified by nutritionFactId in the recipe_sharing_nutrition_facts table. The PUT request body must provide updated nutritional values as per the schema. The operation validates the data and applies changes to the record. Only authorized users can perform updates like administrators or content managers. The updated nutrition fact record is returned upon success.","description":"Update an existing nutrition fact entry by its ID. This PUT operation modifies nutritional data such as calories, protein, carbs, fat, fiber, sodium, sugar, vitamins, and minerals. It requires the nutritionFactId path parameter and a valid update payload reflecting changes.\n\nThe system performs validation on the updated values and ensures referential integrity with the linked ingredient.\n\nOnly authorized roles like administrators can update nutrition facts.\n\nReturns the updated nutrition fact record after applying changes.","summary":"Update a nutrition fact by ID","parameters":[{"name":"nutritionFactId","description":"Unique identifier of the nutrition fact to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated nutrition fact data","typeName":"IRecipeSharingNutritionFact.IUpdate"},"responseBody":{"description":"Updated nutrition fact record","typeName":"IRecipeSharingNutritionFact"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/nutritionFacts/{nutritionFactId}","method":"put"},{"specification":"Deletes the nutrition fact record specified by nutritionFactId from the recipe_sharing_nutrition_facts table. This DELETE method permanently removes the record from the database. Only users with admin role can perform this operation. No request body or response body is returned. The operation results in hard deletion without soft delete functionality for this model.","description":"Delete a nutrition fact record by its unique ID. This operation permanently removes the nutrition fact from the database. Only administrators have permission to delete nutrition facts.\n\nThe nutritionFactId path parameter is required and must reference an existing nutrition fact record.\n\nNo response body is returned upon successful deletion.\n\nThis is a hard delete operation with no recovery after deletion.","summary":"Delete a nutrition fact by ID","parameters":[{"name":"nutritionFactId","description":"Unique identifier of the nutrition fact to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/recipeSharing/regularUser/nutritionFacts/{nutritionFactId}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of recipe categories from the recipe_sharing_recipe_categories table. It supports advanced filtering, sorting, and pagination capabilities, allowing clients to find categories by type or name. The response is a paginated summary of categories, enabling efficient browsing or searching of recipe categories in the system.","description":"Retrieve a filtered and paginated list of recipe categories stored in the system. This operation enables clients to search and browse categories by filtering on attributes such as category_type and name.\n\nUsers can receive partial lists or full pages of category summaries. The system indexes category names for efficient partial/match searches.\n\nSecurity permissions ensure this endpoint is publicly accessible as category browsing is a common operation for recipe discovery.\n\nThe recipe_sharing_recipe_categories table contains recipe category definitions such as cuisine types, diet categories, and difficulty levels with descriptive metadata.\n\nThis operation is foundational for client UIs to present categorization options for recipes and to enable tagging and filter-based browsing.\n\nRobust error handling is in place to handle filtering parameters and ensure that invalid inputs yield clear errors.\n\nThis API supports integration with tagging and recipe search modules by providing category data.","path":"/recipeSharing/recipeCategories","method":"patch","summary":"Search and retrieve a filtered, paginated list of recipe categories","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recipe category filtering","typeName":"IRecipeSharingRecipeCategory.IRequest"},"responseBody":{"description":"Paginated list of recipe category summaries matching search criteria","typeName":"IPageIRecipeSharingRecipeCategory.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"search"},{"specification":"This operation retrieves detailed information about a specific recipe category identified by recipeCategoryId from the recipe_sharing_recipe_categories table. It returns full category details including type, name, and description.","description":"Retrieve detailed information about a specific recipe category by its unique identifier.\n\nThis operation supports client UI components that require full category details for display or editing.\n\nSecurity considerations ensure that category data can be publicly accessed for browsing purposes.\n\nThe recipe_sharing_recipe_categories table stores categorized recipe information to enable filtering and tagging of recipes. Clients use this endpoint to obtain metadata for specific categories.\n\nIf the requested category does not exist, the operation returns a not found error.\n\nNo request body is required for this GET operation.","path":"/recipeSharing/recipeCategories/{recipeCategoryId}","method":"get","summary":"Retrieve details of a specific recipe category by ID","parameters":[{"name":"recipeCategoryId","description":"Unique identifier of the recipe category","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested recipe category","typeName":"IRecipeSharingRecipeCategory"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new recipe category in the recipe_sharing_recipe_categories table. It accepts category_type, name, and optional description. The operation validates uniqueness of the category name per type and persists the category with creation timestamps.","description":"Create a new recipe category in the system.\n\nInputs must include category type (e.g., cuisine, diet, difficulty) and unique category name.\n\nOptional description allows further metadata about the category.\n\nThe system validates inputs and uniqueness constraints before saving.\n\nOnly authorized users (e.g., moderators) can perform this operation to maintain controlled taxonomy.\n\nUpon successful creation, the full category entity is returned.\n\nThis is foundational for expanding category options for recipe tagging and filtering.\n\nError handling captures duplicate names and validation failures with meaningful messages.","path":"/recipeSharing/moderator/recipeCategories","method":"post","summary":"Create a new recipe category","parameters":[],"requestBody":{"description":"Creation info for a new recipe category","typeName":"IRecipeSharingRecipeCategory.ICreate"},"responseBody":{"description":"The newly created recipe category","typeName":"IRecipeSharingRecipeCategory"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation updates an existing recipe category identified by recipeCategoryId in the recipe_sharing_recipe_categories table. It accepts fields for category_type, name, and description to modify the stored category data.\n\nThe system validates the existence of the category and input constraints before updating.\n\nOnly authorized users such as moderators may perform this operation.\n\nOn success, the updated category entity is returned, allowing clients to refresh cached category data.\n\nError handling manages not found cases and validation failures properly.","description":"Update an existing recipe category with specified details.\n\nThis operation supports modification of category type, name, and description.\n\nInput is validated for uniqueness and compliance with schema.\n\nOnly authorized moderators can perform updates to preserve taxonomy integrity.\n\nThe response returns the full updated category record upon success.\n\nErrors are returned when the category is not found or inputs are invalid.","path":"/recipeSharing/moderator/recipeCategories/{recipeCategoryId}","method":"put","summary":"Update an existing recipe category by ID","parameters":[{"name":"recipeCategoryId","description":"Unique identifier of the recipe category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info for an existing recipe category","typeName":"IRecipeSharingRecipeCategory.IUpdate"},"responseBody":{"description":"The updated recipe category","typeName":"IRecipeSharingRecipeCategory"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation deletes a specific recipe category from the system, fully removing its record from the recipe_sharing_recipe_categories table. It requires the category's unique identifier to locate the record. The operation performs a hard delete, permanently removing the category and its associated data from the database. This endpoint is intended for moderators who manage recipe categorization and oversee content taxonomy. Care must be taken to ensure the deletion does not orphan dependent recipe tags or data.","path":"/recipeSharing/moderator/recipeCategories/{recipeCategoryId}","method":"delete","summary":"Delete a recipe category by ID","description":"Delete a recipe category by its unique identifier.\n\nThis operation permanently removes the recipe category record identified by `recipeCategoryId` from the database. As recipe categories are fundamental to recipe organization, deletion should be performed only by authorized moderators with a clear need. Upon successful deletion, the category will no longer be available for tagging or filtering recipes.\n\nThe request requires a valid UUID of the recipe category. Proper authentication and authorization checks for moderator role access are expected.\n\nRelated operations include retrieval or updating of recipe categories.\n\nErrors may occur if the category is associated with active recipes or if the ID does not exist.\n\nConsumers should handle these cases appropriately.","parameters":[{"name":"recipeCategoryId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the recipe category to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation retrieves a paginated list of recipe tags with advanced filtering and search capabilities. It operates on the recipe_sharing_tags table providing tag names and descriptions. Users (including authenticated regular and premium users) can search tags by name or description using partial matching and obtain paginated results with sorting options.","path":"/recipeSharing/regularUser/tags","method":"patch","summary":"Search and retrieve a list of recipe tags","description":"Retrieve a filtered and paginated list of recipe tags.\n\nThis endpoint allows searching among tags by name or description using substring matching.\nPagination and sorting options enable users to browse the tag collection efficiently.\n\nSecurity considerations ensure only authenticated users can access this endpoint.\n\nThe response provides paged tag summary information suitable for listing displays.\n\nRelated endpoints include creating new tags and retrieving specific tag details.\n\nErrors may arise from invalid filters or pagination parameters.\n\nConsumers should implement retry or fallback logic as needed.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for tag filtering","typeName":"IRecipeSharingTags.IRequest"},"responseBody":{"description":"Paginated list of recipe tags matching search criteria","typeName":"IPageIRecipeSharingTags.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index"},{"specification":"This operation retrieves a paginated list of recipe tags with advanced filtering and search capabilities. It operates on the recipe_sharing_tags table providing tag names and descriptions. Users (including authenticated regular and premium users) can search tags by name or description using partial matching and obtain paginated results with sorting options.","path":"/recipeSharing/premiumUser/tags","method":"patch","summary":"Search and retrieve a list of recipe tags","description":"Retrieve a filtered and paginated list of recipe tags.\n\nThis endpoint allows searching among tags by name or description using substring matching.\nPagination and sorting options enable users to browse the tag collection efficiently.\n\nSecurity considerations ensure only authenticated users can access this endpoint.\n\nThe response provides paged tag summary information suitable for listing displays.\n\nRelated endpoints include creating new tags and retrieving specific tag details.\n\nErrors may arise from invalid filters or pagination parameters.\n\nConsumers should implement retry or fallback logic as needed.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for tag filtering","typeName":"IRecipeSharingTags.IRequest"},"responseBody":{"description":"Paginated list of recipe tags matching search criteria","typeName":"IPageIRecipeSharingTags.ISummary"},"authorizationType":null,"authorizationRole":"premiumUser","name":"index"},{"specification":"Retrieve detailed information for a single recipe tag identified by tagId. This operation fetches all properties of a tag from the recipe_sharing_tags table, including name and description. It is accessible to authenticated users who require full detail about specific tags for display or management purposes.","path":"/recipeSharing/regularUser/tags/{tagId}","method":"get","summary":"Get recipe tag details by ID","description":"Fetch a recipe tag's full detail by its unique ID.\n\nThis endpoint returns all stored information of a tag including name and description fields.\n\nAuthentication is required to access detailed tag data.\n\nRelated endpoints include tag listing and creation.\n\nClient applications should gracefully handle cases where the tag ID does not exist.","parameters":[{"name":"tagId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the recipe tag"}],"requestBody":null,"responseBody":{"description":"Detailed tag information","typeName":"IRecipeSharingTags"},"authorizationType":null,"authorizationRole":"regularUser","name":"at"},{"specification":"Retrieve detailed information for a single recipe tag identified by tagId. This operation fetches all properties of a tag from the recipe_sharing_tags table, including name and description. It is accessible to authenticated users who require full detail about specific tags for display or management purposes.","path":"/recipeSharing/premiumUser/tags/{tagId}","method":"get","summary":"Get recipe tag details by ID","description":"Fetch a recipe tag's full detail by its unique ID.\n\nThis endpoint returns all stored information of a tag including name and description fields.\n\nAuthentication is required to access detailed tag data.\n\nRelated endpoints include tag listing and creation.\n\nClient applications should gracefully handle cases where the tag ID does not exist.","parameters":[{"name":"tagId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the recipe tag"}],"requestBody":null,"responseBody":{"description":"Detailed tag information","typeName":"IRecipeSharingTags"},"authorizationType":null,"authorizationRole":"premiumUser","name":"at"},{"specification":"Create a new recipe tag using provided data in the request body. This operation inserts a new record into the recipe_sharing_tags table, requiring tag name and optional description. It is meant for authenticated users who can contribute tags to categorize recipes. The system ensures the tag name is unique. Successful creation returns the full tag data including allocated ID and timestamps.","path":"/recipeSharing/regularUser/tags","method":"post","summary":"Create a new recipe tag","description":"Create a new recipe tag with a unique name and optional description.\n\nThe request must include a JSON body adhering to the IRecipeSharingTags.ICreate schema.\n\nAuthorization requires the user role.\n\nHandling duplicate names or validation failures returning error details is expected.\n\nOn success, the complete tag record is returned for confirmation and further use.\n\nRelated operations include listing tags and fetching individual tag details.","parameters":[],"requestBody":{"description":"Data needed to create a new recipe tag","typeName":"IRecipeSharingTags.ICreate"},"responseBody":{"description":"Newly created recipe tag information","typeName":"IRecipeSharingTags"},"authorizationType":null,"authorizationRole":"regularUser","name":"create"},{"specification":"Create a new recipe tag using provided data in the request body. This operation inserts a new record into the recipe_sharing_tags table, requiring tag name and optional description. It is meant for authenticated users who can contribute tags to categorize recipes. The system ensures the tag name is unique. Successful creation returns the full tag data including allocated ID and timestamps.","path":"/recipeSharing/premiumUser/tags","method":"post","summary":"Create a new recipe tag","description":"Create a new recipe tag with a unique name and optional description.\n\nThe request must include a JSON body adhering to the IRecipeSharingTags.ICreate schema.\n\nAuthorization requires the user role.\n\nHandling duplicate names or validation failures returning error details is expected.\n\nOn success, the complete tag record is returned for confirmation and further use.\n\nRelated operations include listing tags and fetching individual tag details.","parameters":[],"requestBody":{"description":"Data needed to create a new recipe tag","typeName":"IRecipeSharingTags.ICreate"},"responseBody":{"description":"Newly created recipe tag information","typeName":"IRecipeSharingTags"},"authorizationType":null,"authorizationRole":"premiumUser","name":"create"},{"specification":"This operation updates a user tag suggested by a regular user in the recipe sharing platform. The tag represents a user-generated label that requires moderator approval before becoming public. The underlying database table is recipe_sharing_user_tags. The API allows changing the status, suggested name, or associating the tag with an existing approved tag record. The operation requires the tagId path parameter to identify the specific user tag record to update. Validation ensures only valid status values and updates to allowed fields.","description":"Update a user-suggested tag for recipes in the system. This operation targets the recipe_sharing_user_tags table, handling user-generated tags pending moderator approval.\n\nUsers can suggest tags which remain in a pending state until reviewed. Through this API, changes can be made to the suggested name, status (e.g., pending, approved, rejected), or link the tag to an approved tag record.\n\nSecurity consideration requires only the owning user or moderators with appropriate permissions can update user tags. Updates must adhere to validation rules, ensuring status values correspond to defined moderation states.\n\nRelated operations include retrieving user tag details and searching user tags with filtering on status.\n\nThis endpoint uses the HTTP PUT method with the tagId path parameter to specify target user tag.\n\nErrors result from invalid tagId, unauthorized access, or bad request payloads.\n\nSuccessful operations return the updated user tag entity details.","summary":"Update a user-suggested tag identified by tagId","parameters":[{"name":"tagId","in":"path","description":"Identifier of the user tag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User tag update data including status and suggested name","typeName":"IRecipeSharingUserTags.IUpdate"},"responseBody":{"description":"Updated user tag details","typeName":"IRecipeSharingUserTags"},"authorizationRoles":["regularUser"],"name":"updateUserTag","path":"/recipeSharing/regularUser/userTags/{tagId}","method":"put","authorizationRole":"regularUser","authorizationType":null},{"specification":"Permanently deletes a user-generated tag suggestion from the platform's database. This operation removes the record from the recipe_sharing_user_tags table entirely, representing a hard delete as there is no soft-delete column indicating otherwise.\n\nThe API requires the tagId path parameter to specify the user tag to delete. Only authorized users or moderators may perform this operation. Deletion is irreversible and removes all associated data.","description":"Delete a user tag suggestion permanently from the database.\n\nThis operation targets the recipe_sharing_user_tags table and performs a hard delete as per schema constraints.\n\nRequires path parameter tagId to identify the user tag record.\n\nAuthorization restricts deletion rights to owning users and moderators.\n\nNo request or response body is needed.\n\nErrors include invalid ID, unauthorized access, or referential integrity constraints preventing delete.\n\nSuccessful deletion returns no content.","summary":"Delete a user-suggested tag by tagId","parameters":[{"name":"tagId","in":"path","description":"Identifier of the user tag to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"eraseUserTag","path":"/recipeSharing/regularUser/userTags/{tagId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieves a list of user-generated tag suggestions filtered by optional criteria such as status. This search operation supports pagination, sorting, and detailed filtering, operating on recipe_sharing_user_tags.\n\nUsers can query their suggested tags or moderators can view all suggestions. Supports commonly used search and list retrieval patterns.\n\nSupports PATCH method with a request body specifying search filters.","description":"Search and retrieve paginated user-suggested tags.\n\nThis operation returns user tag suggestions in the recipe_sharing_user_tags table matching the given search criteria.\n\nSupports filtering by status and other attributes. Includes pagination and sorting.\n\nResults are paged and contain summary details for efficient listing.\n\nNo path parameters.\n\nRequires authentication with user role.\n\nResponse is paginated user tag summaries.","summary":"Search and list user-suggested tags","parameters":[],"requestBody":{"description":"Search criteria for user tags","typeName":"IRecipeSharingUserTags.IRequest"},"responseBody":{"description":"Paginated user tag summaries matching search filters","typeName":"IPageIRecipeSharingUserTags.ISummary"},"authorizationRoles":["regularUser"],"name":"searchUserTags","path":"/recipeSharing/regularUser/userTags","method":"patch","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieve details of a specific user-suggested tag from the recipe_sharing_user_tags table using the tag's unique identifier. Returns full details including user id, suggested name, status, and moderation state.\n\nThe API requires a tagId path parameter to specify which user tag to retrieve. Access is restricted to the tag owner and authorized users.\n\nValidation ensures the tagId is a valid UUID and the tag exists. Errors include not found or unauthorized access.","description":"Get detailed information of a user-generated tag suggestion by ID.\n\nThis operation queries the recipe_sharing_user_tags table for the specified tagId.\n\nReturns detailed information including user association, tag names, moderation status, and timestamps.\n\nRequires authorization to ensure secure access.\n\nNo request body is needed.\n\nResponse contains the full user tag entity.","summary":"Retrieve detailed user tag information by ID","parameters":[{"name":"userTagId","in":"path","description":"Unique identifier of the user tag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user tag information","typeName":"IRecipeSharingUserTags"},"authorizationRoles":["regularUser"],"name":"atUserTag","path":"/recipeSharing/regularUser/userTags/{userTagId}","method":"get","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation creates a new user tag suggestion in the recipe sharing system by storing provided information in the recipe_sharing_user_tags table from the Prisma schema. It requires authenticated access as a regularUser role. The operation captures the user ID, an optional approved tag ID, the suggested tag name, status (such as 'pending'), and timestamps for creation and update. Validation ensures values respect the schema constraints and descriptions.","path":"/recipeSharing/regularUser/userTags","method":"post","summary":"Create a new user tag suggestion","description":"Create a new user-generated tag suggestion by submitting a payload containing the submitting user ID, optional approved tag ID, suggested tag name, and status representing moderation state. The system stores the suggestion with timestamps. Only authenticated regular users can create tag suggestions. The operation refers strictly to the recipe_sharing_user_tags Prisma DB table.\n\nThe system enforces uniqueness in tag suggestions and restricts unauthorized tag creation.\n\nRelated operations include updating and deleting user tag suggestions.\n\nAny errors will be returned if validation or authorization fails, or if required fields are missing.","parameters":[],"requestBody":{"description":"User tag suggestion creation payload","typeName":"IRecipeSharingUserTags.ICreate"},"responseBody":{"description":"Created user tag suggestion details","typeName":"IRecipeSharingUserTags"},"authorizationType":null,"authorizationRole":"regularUser","name":"create"},{"specification":"Update an existing user tag suggestion identified by userTagId path parameter, acting on the recipe_sharing_user_tags table per the Prisma schema. The user making the request must be the original submitting regularUser or a moderator. The operation supports updating the suggestedName and status fields along with timestamps. It checks uniqueness of suggested names and validity of the status value. Errors returned if unauthorized or on invalid inputs. This supports the moderation workflow around user-suggested tags.","path":"/recipeSharing/regularUser/userTags/{userTagId}","method":"put","summary":"Update user tag suggestion by ID","description":"Update user-generated tag suggestion by ID.\n\nAuthorized users (owners or moderators) can update fields such as suggestedName and status.\n\nAuthentication as regularUser is required. Validation ensures the uniqueness and valid status inputs.\n\nUpdate timestamps are refreshed.\n\nReturns updated entity.\n\nErrors if ID not found or unauthorized.\n\nRelated to create and delete user tag operations.","parameters":[{"name":"userTagId","description":"UUID of the user tag suggestion to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User tag suggestion update payload","typeName":"IRecipeSharingUserTags.IUpdate"},"responseBody":{"description":"Updated user tag suggestion details","typeName":"IRecipeSharingUserTags"},"authorizationType":null,"authorizationRole":"regularUser","name":"update"},{"specification":"Delete an existing user-generated tag suggestion referencing the recipe_sharing_user_tags table by unique userTagId identifier. The operation supports hard deletion, removing the record from the database completely. Authenticated as a regularUser role and authorized as owner or moderator. The operation validates existence and permissions before deletion.","path":"/recipeSharing/regularUser/userTags/{userTagId}","method":"delete","summary":"Delete user tag suggestion by ID","description":"Delete user-generated tag suggestion by ID.\n\nOnly owners (regularUsers) or moderators may delete tag suggestions.\n\nThis operation is a hard delete removing the record from the database.\n\nReturns no content.\n\nErrors if tag not found or unauthorized.\n\nRelates to tag creation and updating.","parameters":[{"name":"userTagId","description":"UUID of the user tag suggestion to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase"},{"specification":"Retrieve a filtered and paginated list of ingredient search terms to support partial and fuzzy matching of ingredients in recipe searches. This operation queries the recipe_sharing_ingredient_search_terms table from the Prisma schema and supports flexible search criteria and pagination parameters in the request body. No authentication required for this read operation.\n\nValidation includes that pagination and filter parameters adhere to schema constraints. The operation returns paginated search term results matching the filtering criteria.\n\nRelated operations include ingredient and recipe management APIs.","path":"/recipeSharing/ingredientSearchTerms","method":"patch","summary":"Retrieve paginated ingredient search terms","description":"Retrieve ingredient search terms with filtering and pagination options.\n\nAllows searching by partial search terms and ingredient ID.\n\nOpen public access.\n\nReturns paginated lists of matching terms with metadata.\n\nErrors arise from invalid search parameter inputs.\n\nBased on recipe_sharing_ingredient_search_terms table in database.\n\nIntended for ingredient matching in advanced search feature.","parameters":[],"requestBody":{"description":"Search parameters and pagination for ingredient search terms","typeName":"IRecipeSharingIngredientSearchTerms.IRequest"},"responseBody":{"description":"Paginated list of ingredient search terms","typeName":"IPageIRecipeSharingIngredientSearchTerms"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This API operation targets the Recipe Sharing backend's ingredient search terms table, allowing retrieval of a single ingredient search term by its unique UUID identifier. The ingredient search terms support partial and fuzzy matching to enhance recipe ingredient searches. It returns detailed information including the search term string and its linked ingredient. This supports the ingredient search feature that returns recipes based on user-supplied ingredient inputs, improving search relevance and ranking.","path":"/recipeSharing/ingredientSearchTerms/{ingredientSearchTermId}","method":"get","summary":"Retrieve ingredient search term by ID","description":"Retrieve a single ingredient search term entry by its unique identifier. This operation accesses the ingredient search terms entity, which stores alternate search term variants for ingredients to support partial and fuzzy searches.\n\nSecurity considerations include ensuring only authenticated users or public read access depending on system policy can access this data. This data is used to improve search accuracy and usability when users input partial or approximate ingredient names.\n\nThis operation directly queries the recipe_sharing_ingredient_search_terms table based on the provided UUID.\n\nValidation includes verifying the UUID format and existence of the targeted record. If not found, an appropriate error will be returned.\n\nRelated operations may include updating or creating ingredient search terms, but this one is strictly for retrieving individual entries by ID without modification.\n\nResponse returns the ingredient search term object including its ID, linked ingredient ID, and search term string.","parameters":[{"name":"ingredientSearchTermId","description":"Unique UUID identifier of the ingredient search term","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The ingredient search term object matching the specified ID","typeName":"IRecipeSharingIngredientSearchTerm"},"authorizationRole":null,"authorizationType":null,"name":"at"},{"specification":"This operation retrieves a paginated list of user follower relationships within the Recipe Sharing backend social domain. It supports filtering, sorting, and pagination parameters to enable efficient querying of followers by various criteria. This API interacts with the recipe_sharing_user_followers table, which records follower-followee user relationships and includes creation, update, and soft delete timestamps.\n\nIt enables clients to explore follower connections either for a specific user or for broader social graph analysis. Filtering by follower or followee user IDs can identify particular relationships. This supports social features such as showing users who follow or are followed by a given user.\n\nSecurity and authorization depend on system policy; typically requiring authentication with roles allowing user data access.\n\nThe operation follows RESTful PATCH semantics for complex search queries, requesting a body of pagination and filter parameters, returning paginated summaries of follower relationships.","path":"/recipeSharing/regularUser/userFollowers","method":"patch","summary":"Search and retrieve paginated list of user followers","description":"Retrieve a filtered and paginated list of user follower connections in the recipe sharing platform. This list supports search, filtering by follower or followee user ID, sorting, and pagination.\n\nEach follower record identifies the follower and the followee, along with timestamps and soft deletion status if present.\n\nSecurity considerations involve ensuring only authorized users can view follower relationships, protecting privacy.\n\nRelated operations include creating new follower relationships, retrieving individual follower relationships, and deleting follows.\n\nResults aid in building social graphs, personalized feeds, and UI components displaying followers and following lists.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering user followers","typeName":"IRecipeSharingUserFollower.IRequest"},"responseBody":{"description":"Paginated list of user follower summaries matching the search parameters","typeName":"IPageIRecipeSharingUserFollower.ISummary"},"authorizationRole":"regularUser","authorizationType":null,"name":"index"},{"specification":"This API operation retrieves detailed information about a specific user follower relationship by its unique identifier UUID. It accesses the recipe_sharing_user_followers table representing follower and followee user connections with audit timestamps and soft deletion support.\n\nThis operation requires the follower relationship ID as a path parameter to fetch the exact record.\n\nSecurity measures should ensure that only authorized users can access follower information respecting user privacy.\n\nRelated operations include listing (searching) followers, creating new follower records, and deleting follower relations.\n\nThe response returns a detailed user follower object reflecting the database schema.","path":"/recipeSharing/regularUser/userFollowers/{userFollowerId}","method":"get","summary":"Retrieve user follower relationship by ID","description":"Retrieve detailed information about a user follower relationship by follower ID.\n\nThe follower entity contains the UUID of both follower and followee users and audit timestamps. This supports social features to display follower connections.\n\nSecurity considerations must protect follower relationship privacy.\n\nValidation includes UUID format and record existence verification.\n\nNo request body is needed for this GET operation.\n\nReturns the follower relationship object corresponding to the specified identifier.","parameters":[{"name":"userFollowerId","description":"Unique user follower relationship UUID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User follower relationship detailed information","typeName":"IRecipeSharingUserFollower"},"authorizationRole":"regularUser","authorizationType":null,"name":"at"},{"specification":"Create a new user follower relationship in the social domain of the Recipe Sharing backend. This operation inserts a new record into the recipe_sharing_user_followers table, recording that a follower user follows another user (followee). Data validation includes ensuring both follower and followee are valid user IDs, uniqueness of the relationship, and no duplicate following. \n\nThe API accepts follower and followee user ID parameters in the request body. Upon successful creation, the newly created follower relationship object is returned.\n\nThis API operation requires authentication, typically for the user performing the following action, allowing a user to follow other users as part of social engagement.\n\nRelated operations include listing user followers, retrieving follower details, and deleting follower records.","path":"/recipeSharing/regularUser/userFollowers","method":"post","summary":"Create a new user follower relationship","description":"Create a new user follower connection, linking follower user to followee user.\n\nThis operation is critical for social engagement features, allowing users to follow each other and receive personalized feeds.\n\nSecurity involves validating authenticated user privileges and preventing duplicate follow relationships.\n\nRequest body includes follower_user_id and followee_user_id UUIDs.\n\nResponse returns the created follower relationship with timestamps.\n\nValidation ensures both users exist, and no prior follow relationship already exists.\n\nNo request parameters are required since POST uses request body.\n\nThis operation supports social interaction in the Recipe Sharing platform.","parameters":[],"requestBody":{"description":"Follower and followee user IDs to create the follower connection","typeName":"IRecipeSharingUserFollower.ICreate"},"responseBody":{"description":"Newly created user follower relationship object","typeName":"IRecipeSharingUserFollower"},"authorizationRole":"regularUser","authorizationType":null,"name":"create"},{"specification":"This operation updates a user follower relationship by its unique identifier in the recipe sharing platform. It modifies the follower relationship row in the recipe_sharing_user_followers table, ensuring data consistency and referential integrity with the users involved. The update action allows changing the follower or followee user IDs. Validation ensures both user IDs are valid UUID strings referencing existing users. Authorization restricts access to authenticated regular or premium users managing their social connections.","description":"Update the user follower record identified by the provided userFollowerId path parameter. This record represents the follow relationship between one user (the follower) and another user (the followee). The request body contains the new follower and/or followee user IDs with valid UUID format. Only authorized users with the correct roles can perform this update.\n\nThe updating process checks that the follower and followee users exist and preserves database relations. Upon success, the operation returns the updated user follower information. Errors may occur if the provided identifier does not exist or if the input data fails validation.\n\nThis API corresponds to the recipe_sharing_user_followers table in the Prisma schema, which defines follower-followee user relations with auditing timestamps.","summary":"Update a user follower relationship by ID","parameters":[{"name":"userFollowerId","description":"Unique identifier of the user follower relationship to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User follower update information","typeName":"IRecipeSharingUserFollower.IUpdate"},"responseBody":{"description":"Updated user follower record","typeName":"IRecipeSharingUserFollower"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/userFollowers/{userFollowerId}","method":"put"},{"specification":"This operation updates a user follower relationship by its unique identifier in the recipe sharing platform. It modifies the follower relationship row in the recipe_sharing_user_followers table, ensuring data consistency and referential integrity with the users involved. The update action allows changing the follower or followee user IDs. Validation ensures both user IDs are valid UUID strings referencing existing users. Authorization restricts access to authenticated regular or premium users managing their social connections.","description":"Update the user follower record identified by the provided userFollowerId path parameter. This record represents the follow relationship between one user (the follower) and another user (the followee). The request body contains the new follower and/or followee user IDs with valid UUID format. Only authorized users with the correct roles can perform this update.\n\nThe updating process checks that the follower and followee users exist and preserves database relations. Upon success, the operation returns the updated user follower information. Errors may occur if the provided identifier does not exist or if the input data fails validation.\n\nThis API corresponds to the recipe_sharing_user_followers table in the Prisma schema, which defines follower-followee user relations with auditing timestamps.","summary":"Update a user follower relationship by ID","parameters":[{"name":"userFollowerId","description":"Unique identifier of the user follower relationship to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"User follower update information","typeName":"IRecipeSharingUserFollower.IUpdate"},"responseBody":{"description":"Updated user follower record","typeName":"IRecipeSharingUserFollower"},"authorizationType":null,"authorizationRole":"premiumUser","name":"update","path":"/recipeSharing/premiumUser/userFollowers/{userFollowerId}","method":"put"},{"specification":"This operation hard deletes a user follower relationship by ID in the recipe sharing platform. It removes the follower-followee link between two users, represented in the recipe_sharing_user_followers table. Since soft deletion timestamp is present in this table, this operation explicitly performs permanent removal of the record. Proper authorization is required to ensure only owners or authorized users can delete follower relationships.","description":"Delete a user follower record identified by the userFollowerId path parameter. This permanently removes the follower relation between users from the system database.\n\nAuthorization requires authenticated regular or premium users with permissions to modify their follower links.\n\nUpon success, no response body is returned. If the target follower record does not exist, an error is returned.\n\nThis maps to the recipe_sharing_user_followers table in the Prisma DB schema, which manages social user follower relationships.","summary":"Delete a user follower relationship by ID","parameters":[{"name":"userFollowerId","description":"Unique identifier of the user follower relationship to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/recipeSharing/regularUser/userFollowers/{userFollowerId}","method":"delete"},{"specification":"This operation hard deletes a user follower relationship by ID in the recipe sharing platform. It removes the follower-followee link between two users, represented in the recipe_sharing_user_followers table. Since soft deletion timestamp is present in this table, this operation explicitly performs permanent removal of the record. Proper authorization is required to ensure only owners or authorized users can delete follower relationships.","description":"Delete a user follower record identified by the userFollowerId path parameter. This permanently removes the follower relation between users from the system database.\n\nAuthorization requires authenticated regular or premium users with permissions to modify their follower links.\n\nUpon success, no response body is returned. If the target follower record does not exist, an error is returned.\n\nThis maps to the recipe_sharing_user_followers table in the Prisma DB schema, which manages social user follower relationships.","summary":"Delete a user follower relationship by ID","parameters":[{"name":"userFollowerId","description":"Unique identifier of the user follower relationship to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"premiumUser","name":"erase","path":"/recipeSharing/premiumUser/userFollowers/{userFollowerId}","method":"delete"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of personalized feed entries for users in the recipe sharing platform. It operates on the recipe_sharing_personalized_feeds Prisma table that stores personalized feed entries per user and recipe originator. The PATCH method allows complex request bodies with filters, sorters, and pagination parameters encapsulated in IRecipeSharingPersonalizedFeed.IRequest DTO.\n\nSecurity enforces access only to authenticated regular or premium users, returning summarized feed entries optimized for frontend display.\n\nThe operation supports search by user ID, recipe ID, and originator ID, enabling personalized feed content delivery with efficient pagination.","description":"Retrieve personalized feed entries for a user according to the supplied filtering and pagination criteria. The response contains a paginated list of summarized personalized feed entries including recipe and originator information.\n\nSupports filtering by user ID, recipe ID, originator user ID, and sorting by creation time.\n\nAuthorized access is limited to authenticated regular and premium users.\n\nThis API correlates with the recipe_sharing_personalized_feeds Prisma table that defines the personalized feed entries per user.","summary":"Search personalized feeds with filtering and pagination","parameters":[],"requestBody":{"description":"Search parameters for personalized feed filtering and pagination","typeName":"IRecipeSharingPersonalizedFeed.IRequest"},"responseBody":{"description":"Paginated list of personalized feed entries","typeName":"IPageIRecipeSharingPersonalizedFeed.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/personalizedFeeds","method":"patch"},{"specification":"This operation retrieves a paginated, filterable, and sortable list of personalized feed entries for users in the recipe sharing platform. It operates on the recipe_sharing_personalized_feeds Prisma table that stores personalized feed entries per user and recipe originator. The PATCH method allows complex request bodies with filters, sorters, and pagination parameters encapsulated in IRecipeSharingPersonalizedFeed.IRequest DTO.\n\nSecurity enforces access only to authenticated regular or premium users, returning summarized feed entries optimized for frontend display.\n\nThe operation supports search by user ID, recipe ID, and originator ID, enabling personalized feed content delivery with efficient pagination.","description":"Retrieve personalized feed entries for a user according to the supplied filtering and pagination criteria. The response contains a paginated list of summarized personalized feed entries including recipe and originator information.\n\nSupports filtering by user ID, recipe ID, originator user ID, and sorting by creation time.\n\nAuthorized access is limited to authenticated regular and premium users.\n\nThis API correlates with the recipe_sharing_personalized_feeds Prisma table that defines the personalized feed entries per user.","summary":"Search personalized feeds with filtering and pagination","parameters":[],"requestBody":{"description":"Search parameters for personalized feed filtering and pagination","typeName":"IRecipeSharingPersonalizedFeed.IRequest"},"responseBody":{"description":"Paginated list of personalized feed entries","typeName":"IPageIRecipeSharingPersonalizedFeed.ISummary"},"authorizationType":null,"authorizationRole":"premiumUser","name":"index","path":"/recipeSharing/premiumUser/personalizedFeeds","method":"patch"},{"specification":"This operation fetches detailed information of a specific personalized feed entry given its unique ID. The resource corresponds to a row in the recipe_sharing_personalized_feeds table that links users to recipes and originators for personalized content. The GET endpoint requires path parameter personalizedFeedId and returns the detailed feed entry data. Access is restricted to authenticated regular and premium users. Errors are returned if the resource does not exist or access is unauthorized.","description":"Retrieve detailed information about a personalized feed entry by its ID specified in the path parameter.\n\nThe response contains the full data for the targeted feed entry including user, recipe, and originator user information.\n\nAuthorization is required for regular and premium users to access their personalized feeds.\n\nIf the entry does not exist or access is denied, an error will be returned.\n\nThis operation maps to the recipe_sharing_personalized_feeds Prisma table representing personalized feeds.","summary":"Retrieve detailed personalized feed entry by ID","parameters":[{"name":"personalizedFeedId","description":"Target personalized feed entry ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Personalized feed entry details","typeName":"IRecipeSharingPersonalizedFeed"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/personalizedFeeds/{personalizedFeedId}","method":"get"},{"specification":"This operation fetches detailed information of a specific personalized feed entry given its unique ID. The resource corresponds to a row in the recipe_sharing_personalized_feeds table that links users to recipes and originators for personalized content. The GET endpoint requires path parameter personalizedFeedId and returns the detailed feed entry data. Access is restricted to authenticated regular and premium users. Errors are returned if the resource does not exist or access is unauthorized.","description":"Retrieve detailed information about a personalized feed entry by its ID specified in the path parameter.\n\nThe response contains the full data for the targeted feed entry including user, recipe, and originator user information.\n\nAuthorization is required for regular and premium users to access their personalized feeds.\n\nIf the entry does not exist or access is denied, an error will be returned.\n\nThis operation maps to the recipe_sharing_personalized_feeds Prisma table representing personalized feeds.","summary":"Retrieve detailed personalized feed entry by ID","parameters":[{"name":"personalizedFeedId","description":"Target personalized feed entry ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Personalized feed entry details","typeName":"IRecipeSharingPersonalizedFeed"},"authorizationType":null,"authorizationRole":"premiumUser","name":"at","path":"/recipeSharing/premiumUser/personalizedFeeds/{personalizedFeedId}","method":"get"},{"specification":"This operation creates a new personalized feed entry for a user where the feed contains a specific recipe posted by an originator user. It operates on the recipe_sharing_personalized_feeds table, linking the user who will see the feed entry, which recipe it features, and the recipe's creator. The operation supports relational integrity by requiring existing users and recipes, and automatically records creation and update timestamps.","description":"Create a new personalized feed entry that represents a recipe showing in a user's feed. This operation allows associating a recipe to a specific user feed so that the user can see content relevant to them.\n\nThe creation enforces that the user receiving the feed, the recipe to display, and the originator user who created the recipe are valid existing entities. The database relations for user, recipe, and originator user are maintained by this operation.\n\nSecurity-wise, only authenticated users should create personalized feed entries, typically managed by server logic when users follow others or new recipes are published.\n\nThis operation inserts a new record into recipe_sharing_personalized_feeds with all mandatory fields and timestamps for auditing. It ensures that the feed entry is unique per user and recipe combination.\n\nThe operation does not support manual approval or modification of feed contents; it's intended for system-driven feed population.","summary":"Create a new personalized feed entry for a user.","parameters":[],"requestBody":{"description":"Data required to create a personalized feed entry.","typeName":"IRecipeSharingPersonalizedFeed.ICreate"},"responseBody":{"description":"Newly created personalized feed entry.","typeName":"IRecipeSharingPersonalizedFeed"},"authorizationRoles":["regularUser"],"name":"create","path":"/recipeSharing/regularUser/personalizedFeeds","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates an existing personalized feed entry identified by personalizedFeedId. It operates on the recipe_sharing_personalized_feeds table and allows modification of the user, recipe, or originator user associated with this feed entry. The operation enforces referential integrity and updates modification timestamps.\n\nPatching personalized feed entries is typically done by administrative or background processes to manage feed contents, rather than users directly.","description":"Update an existing personalized feed entry by its unique identifier. This operation allows modifying the user it belongs to, the recipe it displays, or the originator user.\n\nProper authorization is required to ensure only privileged actors can update feed entries, as feed contents are generally automated.\n\nThe operation validates path parameter and input data, and updates timestamps accordingly.\n\nIf the personalizedFeedId does not exist, an error will be returned.\n\nNo partial updates: this is a full update operation replacing current data with submitted data.","summary":"Update a personalized feed entry by ID.","parameters":[{"name":"personalizedFeedId","description":"Unique identifier of the personalized feed entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the personalized feed entry.","typeName":"IRecipeSharingPersonalizedFeed.IUpdate"},"responseBody":{"description":"Updated personalized feed entry.","typeName":"IRecipeSharingPersonalizedFeed"},"authorizationRoles":["regularUser"],"name":"update","path":"/recipeSharing/regularUser/personalizedFeeds/{personalizedFeedId}","method":"put","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes a personalized feed entry identified by personalizedFeedId. It permanently removes the record from the recipe_sharing_personalized_feeds table.\n\nThis is a hard delete and removes the feed entry permanently. There is no soft deletion for this table as per schema.\n\nOnly authorized users should be able to delete feed entries. Typically, this is done as part of unwanted feed cleanup or user unfollow actions handled in business logic.\n\nThere is no request body or response body, only a 204 No Content response expected on success.","description":"Delete a personalized feed entry by its unique identifier, removing it permanently from the database.\n\nThis operation is irreversible and will clean the feed entry entirely.\n\nProper authorization is mandatory to prevent unauthorized feed removals.\n\nOnce deleted, the feed entry cannot be recovered.","summary":"Delete a personalized feed entry by ID.","parameters":[{"name":"personalizedFeedId","description":"Unique identifier of the personalized feed entry to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"erase","path":"/recipeSharing/regularUser/personalizedFeeds/{personalizedFeedId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieve a paginated list of rating records for recipes. This operation filters and sorts user ratings as stored in the recipe_sharing_ratings table.\n\nIt can be used by authenticated users to view rating data and perform analytics.\n\nSupports filtering, sorting, and pagination via the request body parameters.","description":"Retrieve a list of recipe ratings matching search criteria with pagination, filtering, and sorting options.\n\nAuthenticated users can query ratings submitted by themselves or others to view rating distributions.\n\nThe response includes paginated rating summaries with rating values and related user and recipe identifiers.\n\nThis is a read-only endpoint and does not permit modification of ratings.\n\nProper error handling ensures that invalid queries are rejected.","summary":"Search and retrieve recipe ratings with pagination.","parameters":[],"requestBody":{"description":"Search and filter parameters for ratings.","typeName":"IRecipeSharingRating.IRequest"},"responseBody":{"description":"Paginated list of ratings matching criteria.","typeName":"IPageIRecipeSharingRating"},"authorizationRoles":["regularUser"],"name":"index","path":"/recipeSharing/regularUser/ratings","method":"patch","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation retrieves a single user rating by its unique identifier from the Ratings table in the Prisma schema. It fetches the detailed rating information including the user who rated, the associated recipe, the star rating value, and audit timestamps indicating when the rating was created and updated.","description":"This API operation allows an authenticated regular user to fetch detailed information for a specific rating entry by its unique ID. It is primarily used to view user-submitted ratings on recipes, supporting functionalities such as displaying average ratings and individual user reviews.\n\nSecurity considerations ensure only authorized regular users can access rating details. The operation references the `recipe_sharing_ratings` table in the Prisma schema, which maintains user-rating relationships, star values, and timestamps for tracking creation and updates.\n\nBeing a readonly GET endpoint, it returns the full rating entity as defined in the schema, facilitating front-end display and analytics purposes. The operation expects a valid UUID path parameter `id` representing the rating's unique identifier.\n\nValidation rules require the `id` to be a valid UUID string. If no matching rating is found, a 404 error is expected to be handled by the backend service.\n\nRelated API operations include creating ratings (POST /ratings), updating ratings (PUT /ratings/{id}), and deleting ratings (DELETE /ratings/{id}). This operation returns comprehensive data for a single rating record.","summary":"Retrieve a specific rating by ID","parameters":[{"name":"id","description":"Unique identifier of the target rating","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Rating information with detailed fields","typeName":"IRecipeSharingRating"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/ratings/{id}","method":"get"},{"specification":"This operation creates a new user rating for a recipe in the system, storing the star rating value along with the user and recipe association. It operates on the Ratings table defined in the Prisma schema. The creation captures the rating integer and links it to the authenticated user and the target recipe.","description":"This API endpoint enables authenticated regular users to submit new ratings for recipes. The request body must include the rating data such as the user ID, recipe ID, and the star rating value (an integer from 1 to 5). This operation enforces uniqueness such that users can only rate a recipe once.\n\nUpon successful creation, the system records the creation and update timestamps automatically and returns the full rating entity in the response. Validation ensures the rating value falls within the 1-5 range, user and recipe IDs are valid UUIDs, and the user has permission to rate the recipe.\n\nThis operation complements GET, PUT, and DELETE rating operations to maintain the full lifecycle. Authorization restricts access to authenticated regular users, ensuring that only legitimate users can rate recipes.\n\nThe rating contributes to average score calculation seen in recipe details and user feedback modules.\n\nRequest and response structures strictly follow the IRecipeSharingRating.ICreate and IRecipeSharingRating type definitions respectively.","summary":"Create a new user rating","parameters":[],"requestBody":{"description":"Creation info of the rating","typeName":"IRecipeSharingRating.ICreate"},"responseBody":{"description":"Full rating entity after creation","typeName":"IRecipeSharingRating"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/ratings","method":"post"},{"specification":"This operation updates an existing user rating identified by its unique ID. It allows modification of the star rating value for a specific rating record in the Ratings table, adhering to schema constraints and user authorization.","description":"This endpoint permits authenticated regular users to update their own rating on a recipe. The user provides the rating ID in the path parameter and the revised rating data in the request body.\n\nThe system validates the updated star rating to be within the 1-5 range and confirms the user owns the rating record. Update timestamps are automatically managed by the system.\n\nThis operation enables users to refine their feedback on recipes and is part of the full rating lifecycle along with create, get, and delete operations. Authorization ensures only the rating owner can perform updates.\n\nRequest and response data structures adhere to IRecipeSharingRating.IUpdate and IRecipeSharingRating typed schemas.\n\nThis API enhances user engagement by allowing rating corrections and updated opinions over time.","summary":"Update an existing rating by ID","parameters":[{"name":"id","description":"Unique identifier of the target rating","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the rating","typeName":"IRecipeSharingRating.IUpdate"},"responseBody":{"description":"Updated rating entity","typeName":"IRecipeSharingRating"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/ratings/{id}","method":"put"},{"specification":"This operation deletes a user rating record identified by its unique ID. It performs a permanent removal of the rating entry from the database Ratings table as no soft delete date column is defined in the schema.","description":"This API endpoint allows authenticated regular users to delete their own rating records on recipes by providing the rating ID. The deletion is permanent, physically removing the record from the database.\n\nThe operation requires path parameter `id` which must be a valid UUID string. Upon successful deletion, no content is returned.\n\nUsers can remove ratings they no longer wish to associate with a recipe, supporting data hygiene and user choice. Authorization restricts deletion to the rating owner.\n\nThis operation complements create, read, and update APIs for managing ratings effectively.","summary":"Delete a rating by ID permanently","parameters":[{"name":"id","description":"Unique identifier of the target rating","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/recipeSharing/regularUser/ratings/{id}","method":"delete"},{"specification":"This operation searches and retrieves a filtered, paginated list of recipe sharing reviews. It operates on the recipe_sharing_reviews table from the Prisma schema. The operation supports complex filtering criteria such as filtering by user, recipe, status, and date ranges. Pagination and sorting capabilities allow the client to control the size and ordering of the result set. This search endpoint is essential for users and moderators to explore reviews according to various parameters.","description":"Retrieve a filtered and paginated list of recipe sharing reviews from the system. This operation supports advanced search capabilities, including filtering by review author, reviewed recipe, review text content, creation and update dates, and review status.\n\nThe operation returns summarized review data optimized for list display with necessary metadata to support UI rendering and navigation.\n\nSecurity considerations include ensuring that users can only access reviews visible to them according to their role and permissions. Moderators have expanded access to include all reviews regardless of status.\n\nThis endpoint facilitates managing user-generated recipe reviews, supporting moderation workflows and user interactions. Error scenarios include invalid filter parameters or pagination requests, which should be handled gracefully with meaningful messages.","summary":"Search and retrieve a filtered, paginated list of recipe sharing reviews","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recipe sharing reviews","typeName":"IRecipeSharingReview.IRequest"},"responseBody":{"description":"Paginated list of recipe sharing reviews matching search criteria","typeName":"IPageIRecipeSharingReview.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/reviews","method":"patch"},{"specification":"This operation searches and retrieves a filtered, paginated list of recipe sharing reviews. It operates on the recipe_sharing_reviews table from the Prisma schema. The operation supports complex filtering criteria such as filtering by user, recipe, status, and date ranges. Pagination and sorting capabilities allow the client to control the size and ordering of the result set. This search endpoint is essential for users and moderators to explore reviews according to various parameters.","description":"Retrieve a filtered and paginated list of recipe sharing reviews from the system. This operation supports advanced search capabilities, including filtering by review author, reviewed recipe, review text content, creation and update dates, and review status.\n\nThe operation returns summarized review data optimized for list display with necessary metadata to support UI rendering and navigation.\n\nSecurity considerations include ensuring that users can only access reviews visible to them according to their role and permissions. Moderators have expanded access to include all reviews regardless of status.\n\nThis endpoint facilitates managing user-generated recipe reviews, supporting moderation workflows and user interactions. Error scenarios include invalid filter parameters or pagination requests, which should be handled gracefully with meaningful messages.","summary":"Search and retrieve a filtered, paginated list of recipe sharing reviews","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recipe sharing reviews","typeName":"IRecipeSharingReview.IRequest"},"responseBody":{"description":"Paginated list of recipe sharing reviews matching search criteria","typeName":"IPageIRecipeSharingReview.ISummary"},"authorizationType":null,"authorizationRole":"premiumUser","name":"index","path":"/recipeSharing/premiumUser/reviews","method":"patch"},{"specification":"This operation retrieves detailed information about a specific recipe sharing review by its unique identifier. It queries the recipe_sharing_reviews table. The endpoint returns the full review details including the author, associated recipe, review text, timestamps, and moderation status if applicable.\n\nThis operation is crucial for displaying review details in UI views or for moderation by authorized users. It ensures secure and authorized access to review data. If the review is not found, an appropriate error should be returned.","description":"Retrieve detailed information for a recipe sharing review specified by its unique ID. This includes the authoring user, the reviewed recipe, the review text, creation and update timestamps, and any soft deletion status.\n\nThe operation ensures that only authorized users can access review details. Moderators have full access to all reviews, whereas regular users can only access visible reviews.\n\nIf the review does not exist, the system returns a 404 Not Found error. Error handling also includes invalid UUID formats.","summary":"Retrieve detailed recipe sharing review by ID","parameters":[{"name":"id","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the recipe sharing review","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/reviews/{id}","method":"get"},{"specification":"This operation retrieves detailed information about a specific recipe sharing review by its unique identifier. It queries the recipe_sharing_reviews table. The endpoint returns the full review details including the author, associated recipe, review text, timestamps, and moderation status if applicable.\n\nThis operation is crucial for displaying review details in UI views or for moderation by authorized users. It ensures secure and authorized access to review data. If the review is not found, an appropriate error should be returned.","description":"Retrieve detailed information for a recipe sharing review specified by its unique ID. This includes the authoring user, the reviewed recipe, the review text, creation and update timestamps, and any soft deletion status.\n\nThe operation ensures that only authorized users can access review details. Moderators have full access to all reviews, whereas regular users can only access visible reviews.\n\nIf the review does not exist, the system returns a 404 Not Found error. Error handling also includes invalid UUID formats.","summary":"Retrieve detailed recipe sharing review by ID","parameters":[{"name":"id","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the recipe sharing review","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"premiumUser","name":"at","path":"/recipeSharing/premiumUser/reviews/{id}","method":"get"},{"specification":"This operation creates a new recipe sharing review. It operates on the recipe_sharing_reviews table in the database. The client must provide the required review data including the author user ID, the associated recipe ID, and the text of the review. The system validates the input, saves the review, and returns the created review data.\n\nCreation is limited to authenticated users (regular or premium). The system records creation and update timestamps. Any violation of required fields or constraints will result in rejection with descriptive errors.\n\nThis operation supports user interaction by allowing users to share their opinions on recipes.","description":"Create a new recipe sharing review with detailed text associated with a specific recipe and user. The request body must include the author user ID, target recipe ID, and the review contents.\n\nThe system will validate the input data, ensure required fields are present, and record timestamps. Upon success, it returns the newly created review record.\n\nSecurity measures prevent unauthorized creation and ensure data integrity.","summary":"Create a new recipe sharing review","parameters":[],"requestBody":{"description":"Creation info of the recipe sharing review","typeName":"IRecipeSharingReview.ICreate"},"responseBody":{"description":"Newly created recipe sharing review information","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/reviews","method":"post"},{"specification":"This operation creates a new recipe sharing review. It operates on the recipe_sharing_reviews table in the database. The client must provide the required review data including the author user ID, the associated recipe ID, and the text of the review. The system validates the input, saves the review, and returns the created review data.\n\nCreation is limited to authenticated users (regular or premium). The system records creation and update timestamps. Any violation of required fields or constraints will result in rejection with descriptive errors.\n\nThis operation supports user interaction by allowing users to share their opinions on recipes.","description":"Create a new recipe sharing review with detailed text associated with a specific recipe and user. The request body must include the author user ID, target recipe ID, and the review contents.\n\nThe system will validate the input data, ensure required fields are present, and record timestamps. Upon success, it returns the newly created review record.\n\nSecurity measures prevent unauthorized creation and ensure data integrity.","summary":"Create a new recipe sharing review","parameters":[],"requestBody":{"description":"Creation info of the recipe sharing review","typeName":"IRecipeSharingReview.ICreate"},"responseBody":{"description":"Newly created recipe sharing review information","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"premiumUser","name":"create","path":"/recipeSharing/premiumUser/reviews","method":"post"},{"specification":"This operation updates an existing recipe sharing review by its unique ID. It applies modifications to the review text and updates timestamps accordingly. The operation ensures that only the review owner or authorized moderators can update the review. The database table affected is recipe_sharing_reviews.\n\nValidation of input is performed to confirm the presence and correctness of the update data. Soft deletion status is considered to prevent updates to deleted reviews.\n\nSuccessful updates return the updated review data.","description":"Update an existing recipe sharing review identified by its unique ID. The request body includes fields to modify such as the review text.\n\nThe system enforces authorization to ensure only the review author or moderators can perform updates. Input validation ensures data correctness and integrity.\n\nIf the review is deleted or not found, appropriate error responses are returned.\n","summary":"Update existing recipe sharing review by ID","parameters":[{"name":"id","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the recipe sharing review","typeName":"IRecipeSharingReview.IUpdate"},"responseBody":{"description":"Updated recipe sharing review information","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/reviews/{id}","method":"put"},{"specification":"This operation updates an existing recipe sharing review by its unique ID. It applies modifications to the review text and updates timestamps accordingly. The operation ensures that only the review owner or authorized moderators can update the review. The database table affected is recipe_sharing_reviews.\n\nValidation of input is performed to confirm the presence and correctness of the update data. Soft deletion status is considered to prevent updates to deleted reviews.\n\nSuccessful updates return the updated review data.","description":"Update an existing recipe sharing review identified by its unique ID. The request body includes fields to modify such as the review text.\n\nThe system enforces authorization to ensure only the review author or moderators can perform updates. Input validation ensures data correctness and integrity.\n\nIf the review is deleted or not found, appropriate error responses are returned.\n","summary":"Update existing recipe sharing review by ID","parameters":[{"name":"id","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the recipe sharing review","typeName":"IRecipeSharingReview.IUpdate"},"responseBody":{"description":"Updated recipe sharing review information","typeName":"IRecipeSharingReview"},"authorizationType":null,"authorizationRole":"premiumUser","name":"update","path":"/recipeSharing/premiumUser/reviews/{id}","method":"put"},{"specification":"This operation deletes a review from the recipe sharing platform, permanently removing the record associated with the given review ID. It corresponds to the `recipe_sharing_reviews` table. There is no soft delete column for this table, so the deletion is a hard delete. The user must be authorized to perform the deletion, typically restricted to the original author of the review or users with appropriate permissions.","description":"This API endpoint permanently deletes a recipe review identified by its unique ID. Since the `recipe_sharing_reviews` table lacks a soft delete field, this operation performs a hard delete, completely removing the review from the database.\n\nOnly authorized users, generally the creators of the review, are permitted to delete reviews to maintain data integrity and security. Unauthorized attempts to delete a review should return appropriate error responses.\n\nThis operation is critical for users to manage their created content and for moderation purposes.\n\nIt complements other review-related endpoints such as fetching, creating, and updating reviews.\n\nNo request body is required, and no response body is returned upon successful deletion.","summary":"Permanently delete a review by its unique ID","parameters":[{"name":"id","description":"Unique identifier of the review to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"erase","path":"/recipeSharing/regularUser/reviews/{id}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieve a paginated list of all helpfulness votes related to a specific review in the recipe sharing platform. Each vote records whether a user found the review helpful or not. This operation uses the `recipe_sharing_review_votes` table and supports complex pagination and filtering as specified in the request body.","description":"This operation fetches a filtered, paginated list of all review helpfulness votes linked to a particular review identified by reviewId. Each vote indicates if a user found the review helpful.\n\nClients can paginate responses and optionally filter votes via the request body parameters.\n\nAccess to this endpoint is restricted to authorized users to protect review privacy and integrity.\n\nThis operation enables display of collective feedback on reviews, supporting user decision-making and moderation.\n\nRelated endpoints include retrieving individual votes and creating or deleting votes.","summary":"Retrieve paginated list of helpfulness votes for a review","parameters":[{"name":"reviewId","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination parameters for review votes","typeName":"IRecipeSharingReviewVote.IRequest"},"responseBody":{"description":"Paginated list of review votes","typeName":"IPageIRecipeSharingReviewVote"},"authorizationRoles":["regularUser"],"name":"index","path":"/recipeSharing/regularUser/reviews/{reviewId}/votes","method":"patch","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieve detailed information about a specific helpfulness vote on a review by vote ID within a specified review identified by reviewId. The vote data includes information about the user who voted, whether the vote marks the review as helpful, and timestamps, corresponding to the `recipe_sharing_review_votes` table.","description":"This endpoint returns detailed information about a specific helpfulness vote identified by voteId, associated with a particular review identified by reviewId.\n\nThe returned vote data includes the helpful status of the vote, user identity, and timestamps.\n\nAccess is secured and restricted to authenticated users.\n\nThis operation supports UI functionality for showing vote details and administrative review processes.\n\nRelated endpoints cover vote creation, listing, and deletion.","summary":"Get details of a specific helpfulness vote on a review","parameters":[{"name":"reviewId","description":"Unique identifier of the review","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the helpfulness vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of a review vote","typeName":"IRecipeSharingReviewVote"},"authorizationRoles":["regularUser"],"name":"at","path":"/recipeSharing/regularUser/reviews/{reviewId}/votes/{voteId}","method":"get","authorizationRole":"regularUser","authorizationType":null},{"specification":"Create a new helpfulness vote for a specific review, recording whether the user found the review helpful or not. The request body includes necessary details such as the helpfulness boolean. This operation affects the `recipe_sharing_review_votes` table and enables tracking of user feedback on reviews.","description":"This operation allows authorized users to cast a helpfulness vote on a given review specified by reviewId. The vote includes a boolean field indicating the helpfulness.\n\nOnly one vote per user per review is allowed, but users may update their vote.\n\nThe request body must include the helpfulness status. Authentication ensures valid user association.\n\nRelated operations include retrieving existing votes and deleting votes.","summary":"Create a helpfulness vote for a review","parameters":[{"name":"reviewId","description":"Unique identifier of the review to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Helpfulness vote data to create","typeName":"IRecipeSharingReviewVote.ICreate"},"responseBody":{"description":"Created vote details","typeName":"IRecipeSharingReviewVote"},"authorizationRoles":["regularUser"],"name":"create","path":"/recipeSharing/regularUser/reviews/{reviewId}/votes","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates a specific vote on a recipe review by its ID. It operates on the recipe_sharing_review_votes table in the Prisma schema. The update allows changing the helpfulness flag that indicates if the vote marks the review as helpful or not. This operation is limited to authenticated users authorized to modify their own votes. The endpoint requires both the reviewId and voteId as path parameters to uniquely identify the vote record. The request body must provide the data needed to update the vote, supporting partial updates if applicable. The response returns the updated review vote entity.","description":"Update a specific helpfulness vote on a recipe review identified by voteId and associated with reviewId.\n\nThis operation updates the helpfulness flag indicating whether the vote marks the review as helpful or not. Only the user who made the vote can update it, and the operation requires authentication.\n\nThis operation interacts directly with the recipe_sharing_review_votes table in the Prisma schema, modifying the 'helpful' boolean field. The user ID and review ID in the path parameters ensure the vote record's correct targeting.\n\nAppropriate validations include ensuring the vote belongs to the authenticated user and the vote ID corresponds to an existing record.\n\nThis update operation returns the updated review vote details.","summary":"Update a helpfulness vote on a review","parameters":[{"name":"reviewId","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the target vote","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update a review vote","typeName":"IRecipeSharingReviewVote.IUpdate"},"responseBody":{"description":"Updated review vote information","typeName":"IRecipeSharingReviewVote"},"authorizationRoles":["regularUser"],"authorizationType":null,"authorizationRole":"regularUser","name":"updateVote","path":"/recipeSharing/regularUser/reviews/{reviewId}/votes/{voteId}","method":"put"},{"specification":"This operation deletes a specific helpfulness vote on a recipe review identified by its voteId associated with reviewId. The deletion is permanent, removing the vote record from the recipe_sharing_review_votes table in the Prisma schema. This action is restricted to authenticated users who own the vote. The endpoint requires both reviewId and voteId path parameters to precisely identify the vote. No request body is required. The operation returns no response body upon successful deletion.","description":"Delete a helpfulness vote on a recipe review, identified by voteId and reviewId.\n\nThis operation permanently removes the vote record from the database, disallowing recovery.\n\nOnly the owner of the vote, an authenticated user, may perform this deletion.\n\nThe operation requires reviewId and voteId as path parameters to ensure the correct vote is deleted.\n\nNo request body or response body is included for this operation.","summary":"Delete a helpfulness vote on a review","parameters":[{"name":"reviewId","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}},{"name":"voteId","description":"Unique identifier of the target vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"authorizationType":null,"authorizationRole":"regularUser","name":"eraseVote","path":"/recipeSharing/regularUser/reviews/{reviewId}/votes/{voteId}","method":"delete"},{"specification":"This operation retrieves a list of flags made by users on a specific review identified by reviewId. The flags are sourced from the recipe_sharing_review_flags table in the Prisma schema. It supports search, sorting, and pagination via request body parameters. Only moderators have access to this endpoint to manage content moderation. The response provides a paginated list of review flags matching the search criteria.","description":"Retrieve a paginated list of flags made on a specific recipe review.\n\nThis operation supports filtering, sorting, and pagination based on the request body parameters.\n\nIt interacts with the recipe_sharing_review_flags table linked to the specified reviewId.\n\nOnly users with moderator roles can access and use this endpoint to review flagged content.\n\nThe response returns a paginated list of flags with detailed information about each flag, including the reason and the user who flagged the review.","summary":"List flags on a review","parameters":[{"name":"reviewId","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for review flags","typeName":"IRecipeSharingReviewFlag.IRequest"},"responseBody":{"description":"Paginated list of review flags for the review","typeName":"IPageIRecipeSharingReviewFlag"},"authorizationRoles":["moderator"],"authorizationType":null,"authorizationRole":"moderator","name":"indexFlags","path":"/recipeSharing/moderator/reviews/{reviewId}/flags","method":"patch"},{"specification":"This operation retrieves detailed information about a specific flag on a recipe review identified by flagId and reviewId from the recipe_sharing_review_flags table. It is restricted to moderators for content management purposes. The path parameters reviewId and flagId uniquely identify the flag record. No request body is needed. The response returns the detailed flag record.","description":"Get detailed information of a specific flag on a recipe review.\n\nThis is accessible only to moderator users.\n\nThe operation requires reviewId and flagId to identify the exact flag.\n\nThe response returns comprehensive information about the flag record, including the reason, reporter, and timestamps.","summary":"Get information of a review flag","parameters":[{"name":"reviewId","description":"Unique identifier of the target review","schema":{"type":"string","format":"uuid"}},{"name":"flagId","description":"Unique identifier of the target flag","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed review flag information","typeName":"IRecipeSharingReviewFlag"},"authorizationRoles":["moderator"],"authorizationType":null,"authorizationRole":"moderator","name":"atFlag","path":"/recipeSharing/moderator/reviews/{reviewId}/flags/{flagId}","method":"get"},{"specification":"This operation creates a new flag on a specific review, allowing a user to report inappropriate or problematic content. It operates on the recipe_sharing_review_flags table in the Prisma schema. Each flag captures the user who flagged, the associated review ID, flag reason, and timestamps. This endpoint supports the platform's moderation and content quality control processes by enabling users to submit flags that moderators later review and act upon.","description":"This API enables authenticated users to flag a specific review by providing a reason such as spam or offensive content. The action is recorded in the recipe_sharing_review_flags table, linking the flag to the user and the review.\n\nProper flagging assists moderators in maintaining content quality and community standards by identifying problematic reviews for further review.\n\nSecurity considerations include verification of user credentials and ensuring users cannot flag the same review multiple times for the same reason.\n\nThe operation requires the review ID as a path parameter and expects a JSON request body specifying the flag reason. The response returns the newly created flag's details.\n\nThis operation relates to the RatingsReviews schema, providing necessary CRUD operations for user-submitted review flags. It complements moderation workflows which handle flagged reviews.","summary":"Create a new flag on a specified review for inappropriate content reporting","parameters":[{"name":"reviewId","in":"path","description":"Unique identifier of the target review to be flagged","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Flag information including the reason for flagging","typeName":"IRecipeSharingReviewFlag.ICreate"},"responseBody":{"description":"Created review flag data","typeName":"IRecipeSharingReviewFlag"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/reviews/{reviewId}/flags","method":"post","name":"createFlag"},{"specification":"This API operation updates an existing flag on a specific review identified by flagId and reviewId. It allows changing details such as the flag reason or status. The underlying recipe_sharing_review_flags table tracks these flags with relations to users and reviews. Modifying flags supports moderation processes by updating the context or status of the flag.\n\nOnly authorized users with the 'regularUser' role can update flags they have created, ensuring integrity and accountability.\n\nThe endpoint requires both reviewId and flagId path parameters and expects the updated flag data in the request body. The response returns the updated flag entity.","description":"Update an existing flag on a review to modify reason or status. Users can correct or change their flags if needed.\n\nThis supports accurate flag reporting and moderation workflows.\n\nProper authentication and authorization checks must be in place to restrict modifications to flag owners.\n\nThe operation requires reviewId and flagId parameters and a JSON request body with update information.","summary":"Update flag details on a specific review","parameters":[{"name":"reviewId","in":"path","description":"Unique identifier of the review associated with the flag","schema":{"type":"string","format":"uuid"}},{"name":"flagId","in":"path","description":"Unique identifier of the flag to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated flag information","typeName":"IRecipeSharingReviewFlag.IUpdate"},"responseBody":{"description":"Updated review flag data","typeName":"IRecipeSharingReviewFlag"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/reviews/{reviewId}/flags/{flagId}","method":"put","name":"updateFlag"},{"specification":"Permanently removes a flag from a specific review, identified by reviewId and flagId. This operation deletes the flag record from the recipe_sharing_review_flags table.\n\nAccess is restricted to authorized users with the 'regularUser' role, typically allowing users to remove flags they have placed.\n\nThe endpoint requires the reviewId and flagId path parameters. No request body or response is needed, as the deletion confirms the removal of the flag.\n\nThis hard delete operation complements the content moderation tools by allowing flag corrections and removals.","description":"Delete a flag from a review. This operation permanently removes the flag record from the database.\n\nUsers can retract flags if they were created erroneously.\n\nAuthorization ensures only flag owners or appropriate users can perform deletion.\n\nThe endpoint requires reviewId and flagId in the path and performs a hard delete, removing all traces of the flag.","summary":"Remove a specific flag from a review","parameters":[{"name":"reviewId","in":"path","description":"Unique identifier of the review associated with the flag","schema":{"type":"string","format":"uuid"}},{"name":"flagId","in":"path","description":"Unique identifier of the flag to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/reviews/{reviewId}/flags/{flagId}","method":"delete","name":"eraseFlag"},{"specification":"Retrieve a paginated list of moderation logs related to review moderation actions in the platform. These logs include information about moderation events such as hiding or unhiding reviews, moderator identities, timestamps, and optional comments.\n\nThe underlying recipe_sharing_moderation_logs table stores the audit trail of all moderation activities for transparency and compliance. This API supports moderators in reviewing historical moderation data.\n\nAccess to this endpoint is restricted to users with the 'moderator' role to ensure sensitive audit information is protected. The endpoint accepts search, filtering, and pagination parameters in the request body.\n\nThe response includes a paginated collection of moderation log entries as defined in the schema.","description":"Retrieve moderation logs for review moderation activities.\n\nIncludes detailed audit trail for compliance.\n\nAccessible only by moderators.\n\nSupports pagination, filtering, and search via request body JSON.\n\nReturns paginated list of logs.","summary":"Retrieve paginated list of moderation logs","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for moderation logs","typeName":"IRecipeSharingModerationLog.IRequest"},"responseBody":{"description":"Paginated results of moderation logs","typeName":"IPageIRecipeSharingModerationLog"},"authorizationType":null,"authorizationRole":"moderator","path":"/recipeSharing/moderator/moderation/logs","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information for a specific recipe collection identified by its collectionId. It operates on the recipe_sharing_collections table from the Prisma schema and returns full collection details including ownership, timestamps, and soft deletion status.","description":"Retrieve detailed information for a recipe collection using its unique identifier (collectionId). The collection belongs to a user and includes attributes such as name, optional description, creation and update timestamps, and soft deletion timestamp if applicable.\n\nSecurity considerations require that only authenticated users with proper permissions may access this endpoint to protect user data privacy and integrity.\n\nThe operation relates directly to the recipe_sharing_collections table, which enforces unique collection names per user and supports soft deletion via the deleted_at field.\n\nValidation ensures that collectionId is a valid UUID and the collection exists. Proper error handling is expected for non-existent or unauthorized access attempts.\n\nThis GET endpoint complements collection management APIs, facilitating read access to individual collections.","summary":"Retrieve detailed recipe collection information by collectionId","parameters":[{"name":"collectionId","description":"Unique identifier of the target recipe collection","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed recipe collection entity data","typeName":"IRecipeSharingCollections"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/collections/{collectionId}","method":"get"},{"specification":"This operation fetches a filtered and paginated list of recipe collections owned by users, allowing search and sorting based on criteria defined in the IRecipeSharingCollections.IRequest schema. It operates on the recipe_sharing_collections Prisma table while enforcing user ownership and soft deletion constraints.","description":"Retrieve a paginated list of recipe collections with filtering, searching, and sorting capabilities. Users may provide search criteria such as collection name, creation date ranges, and other filters.\n\nResults include paginated collection summaries suitable for UI display. Pagination supports page number, page size, and sorting.\n\nSecurity requires authenticated user access, ensuring only collections belonging to the user are returned.\n\nThis PATCH operation is crucial for building user interfaces that allow efficient management of multiple recipe collections.\n\nThe underlying database entity is recipe_sharing_collections, with uniqueness constraints on collection names per user and support for soft deletes.","summary":"Search and retrieve paginated list of user recipe collections","parameters":[],"requestBody":{"description":"Request body containing search filters and pagination parameters for collections","typeName":"IRecipeSharingCollections.IRequest"},"responseBody":{"description":"Paginated collection summary information","typeName":"IPageIRecipeSharingCollections.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/collections","method":"patch"},{"specification":"This operation creates a new recipe collection record for an authenticated user by inserting data into the recipe_sharing_collections Prisma table. The input payload must comply with the IRecipeSharingCollections.ICreate schema and include collection name, optional description, and association with the owner's user ID. Name uniqueness per user is enforced.","description":"Create a new recipe collection for the authenticated user. The creation request body must provide the collection name, and optionally a description.\n\nUpon successful insertion, the system returns complete details of the created collection, including timestamps and ownership identifiers.\n\nThis POST operation enables users to organize recipes via collections to enhance personalization and meal planning.\n\nThe recipe_sharing_collections table supports soft deletion and enforces unique collection names for each owner.\n\nSecurity ensures that only authenticated regular users may create collections tied to their user ID.","summary":"Create a new recipe collection for user","parameters":[],"requestBody":{"description":"Payload data for creating a new recipe collection","typeName":"IRecipeSharingCollections.ICreate"},"responseBody":{"description":"Detailed data of created recipe collection","typeName":"IRecipeSharingCollections"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/collections","method":"post"},{"specification":"This operation retrieves a specific moderation log entry detailing actions taken on flagged reviews. It queries the recipe_sharing_moderation_logs Prisma table and returns comprehensive audit data including moderator identity, action type, comments, and timestamps.","description":"Retrieve detailed information for a moderation log by its unique ID. The log includes moderator details, the action performed (e.g., hide, unhide), optional moderator comments, and timestamps for audit and compliance purposes.\n\nAccess to this endpoint is restricted to moderators to maintain auditing security.\n\nThe operation relates directly to the recipe_sharing_moderation_logs table which stores immutable audit trails for moderation actions on flagged reviews.\n\nValidations include proper UUID formatting for the log ID and existence checks.\n\nThis GET operation supports moderator workflows requiring detailed moderation activity audits to ensure transparency and accountability.","summary":"Retrieve detailed moderation log information by ID","parameters":[{"name":"id","description":"Unique identifier of the moderation log","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderation log detailed entity","typeName":"IRecipeSharingModerationLogs"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/recipeSharing/moderator/moderation/logs/{id}","method":"get"},{"specification":"This operation updates an existing collection owned by a user in the Recipe Sharing platform. The collection represents a user-defined grouping of recipes used for organization and categorization. The API updates the collection details such as its name and an optional description. The operation validates ownership by collection ID and allows updates only to active collections (not soft-deleted). It corresponds to the recipe_sharing_collections table in the Prisma schema, which includes fields: id, owner_user_id, name, description (nullable), created_at, updated_at, and deleted_at (nullable). The update operation requires verifying the collection exists and belongs to the requesting user. It returns the updated collection entity on success.","description":"Update an existing user collection in the Recipe Sharing backend system. The collection must be identified by the collectionId parameter in the path.\n\nThis operation allows changing the collection's name and description fields. It verifies the user’s ownership of the collection and ensures the collection is not soft-deleted.\n\nThe Recipe Sharing system stores collections in the recipe_sharing_collections table, which contains fields such as owner_user_id (linking to the user), name, and optional description. The created_at and updated_at timestamps are managed internally by the system.\n\nAuthorization is required to ensure only the owner can update their collection.\n\nErrors occur if the collection does not exist, is soft-deleted, or the requesting user lacks permission.\n\nSuccessful updates return the updated collection information.","summary":"Update existing collection by ID","parameters":[{"name":"collectionId","description":"Unique identifier of the target collection","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the collection","typeName":"IRecipeSharingCollections.IUpdate"},"responseBody":{"description":"Updated collection information","typeName":"IRecipeSharingCollections"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/collections/{collectionId}","method":"put","name":"updateCollection"},{"specification":"This operation permanently deletes a user collection in the Recipe Sharing backend system. It removes the collection record identified by collectionId from the database, performing a hard delete since the underlying schema supports soft deletion with a deleted_at field but this operation completely removes the record.\n\nThe operation enforces ownership validation to ensure the user owns the collection.\n\nDeletes associated relationships such as recipes included in the collection or meal plans referencing the collection must be handled at the business logic level if applicable.\n\nThe operation corresponds to the recipe_sharing_collections table in the Prisma schema.\n\nNo content body is returned on success.","description":"Permanently remove a user collection by its unique identifier. This operation performs a hard delete on the collection record.\n\nOwnership verification is required to ensure only the owner user can delete their collection.\n\nThe system deletes the collection record and all associated references.\n\nThis operation does not return a response body.\n\nUse with caution as deleted records cannot be recovered.","summary":"Delete user collection permanently","parameters":[{"name":"collectionId","description":"Unique identifier of the target collection","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/collections/{collectionId}","method":"delete","name":"eraseCollection"},{"specification":"Retrieve a paginated list of meal plans owned by the authenticated user. Meal plans are user-defined schedules associating recipes with calendar dates and meal slots. The search operation supports filtering, pagination, and sorting parameters via the request body. The operation relates to the recipe_sharing_meal_plans table in the Prisma schema, which includes fields id, owner_user_id, name, description, created_at, updated_at, deleted_at.\n\nThis operation returns a paginated summary list of meal plans that belong to the user, supporting search criteria such as name filtering or date range.\n\nAuthorization ensures the user only accesses their own meal plans.","description":"Search and retrieve a paginated list of meal plans for the authenticated user. Supports filtering, sorting, and pagination via the request body.\n\nMeal plans associate recipes to calendar dates and meal slots and belong to a specific user.\n\nThe result returns meal plan summaries optimized for list views.\n\nOnly meal plans owned by the requesting user are returned.\n\nSecurity measures ensure data privacy between users.\n\nTypical usage involves client-side page browsing and filtering.\n\nErrors return appropriate messages when filtering parameters are invalid.\n\nResponse includes pagination metadata and the list of meal plans matching the criteria.","summary":"List user's meal plans with filtering and pagination","parameters":[],"requestBody":{"description":"Search parameters and pagination options for meal plans","typeName":"IRecipeSharingMealPlans.IRequest"},"responseBody":{"description":"Paginated meal plan summaries","typeName":"IPageIRecipeSharingMealPlans.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/mealPlans","method":"patch","name":"searchMealPlans"},{"specification":"Retrieve detailed information about a specific meal plan by its unique identifier. The meal plan includes metadata like name, description, owner, and a list of associated recipe entries specifying scheduled recipes, quantities, dates, and meal slots. This operation corresponds to the recipe_sharing_meal_plans table and related entries as defined in the Prisma schema.\n\nAccess control verifies the requesting user's identity and ownership of the meal plan. The operation returns the full meal plan data including nested recipe entries.\n\nTypical usage includes viewing meal plan details in a client UI.\n\nErrors may include not found or unauthorized access.","description":"Get detailed information of a specific meal plan identified by mealPlanId.\n\nThis includes the meal plan metadata and its associated recipe entries scheduling recipes to specific dates and meal slots.\n\nAccess is restricted to the owner of the meal plan for privacy.\n\nReturns the meal plan with its recipes for client display and interaction.\n\nErrors occur if the meal plan does not exist or the user is unauthorized.\n\nThis operation supports reading with full detail.","summary":"Retrieve meal plan details by ID","parameters":[{"name":"mealPlanId","description":"Unique identifier of the target meal plan","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed meal plan information","typeName":"IRecipeSharingMealPlans"},"authorizationType":null,"authorizationRole":"regularUser","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}","method":"get","name":"atMealPlan"},{"specification":"This operation creates a new meal plan in the Recipe Sharing backend system, associated with a specific owner user by their user ID. The meal plan includes a unique name per user and optional description while recording creation and update timestamps. This operation manipulates the recipe_sharing_meal_plans table in the Prisma schema, enforcing uniqueness of meal plan names per owner. It requires authentication and authorization for regular and premium users.","description":"Create a new meal plan for a user in the system. Requires providing the owner's user ID, a unique meal plan name, and an optional description.\n\nValidations include ensuring the uniqueness of the meal plan name for the given owner.\n\nUpon successful creation, the meal plan is recorded with timestamps for auditing.\n\nOnly regular and premium authenticated users authorized.\n\nErrors occur for duplicate meal plan names per user or invalid inputs.\n\nThis operation supports user meal scheduling and planning functionality.","summary":"Create a new meal plan for a user","parameters":[],"requestBody":{"description":"Meal plan creation data including ownerUserId, name and optional description","typeName":"IRecipeSharingMealPlan.ICreate"},"responseBody":{"description":"Details of the newly created meal plan","typeName":"IRecipeSharingMealPlan"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/mealPlans","method":"post"},{"specification":"This operation creates a new meal plan in the Recipe Sharing backend system, associated with a specific owner user by their user ID. The meal plan includes a unique name per user and optional description while recording creation and update timestamps. This operation manipulates the recipe_sharing_meal_plans table in the Prisma schema, enforcing uniqueness of meal plan names per owner. It requires authentication and authorization for regular and premium users.","description":"Create a new meal plan for a user in the system. Requires providing the owner's user ID, a unique meal plan name, and an optional description.\n\nValidations include ensuring the uniqueness of the meal plan name for the given owner.\n\nUpon successful creation, the meal plan is recorded with timestamps for auditing.\n\nOnly regular and premium authenticated users authorized.\n\nErrors occur for duplicate meal plan names per user or invalid inputs.\n\nThis operation supports user meal scheduling and planning functionality.","summary":"Create a new meal plan for a user","parameters":[],"requestBody":{"description":"Meal plan creation data including ownerUserId, name and optional description","typeName":"IRecipeSharingMealPlan.ICreate"},"responseBody":{"description":"Details of the newly created meal plan","typeName":"IRecipeSharingMealPlan"},"authorizationType":null,"authorizationRole":"premiumUser","name":"create","path":"/recipeSharing/premiumUser/mealPlans","method":"post"},{"specification":"This operation updates an existing meal plan identified by mealPlanId, allowing modification of the meal plan's name and description. It operates on the recipe_sharing_meal_plans table in the Prisma schema. The update requires that the meal plan exists and that the new name remains unique per owner.\n\nAuthorization is restricted to authenticated regular and premium users who own the meal plan. Validation handles verification of the mealPlanId path parameter and requestBody fields.\n\nThis operation allows users to modify meal plans for flexible meal scheduling.","description":"Update the details of an existing meal plan such as name or description. The mealPlanId path parameter specifies the target meal plan.\n\nRequest body contains updated information, and only regular or premium users owning the meal plan have authorization to update.\n\nThe operation verifies the uniqueness of the name per owner and updates timestamps.\n\nError handling covers invalid mealPlanId, unauthorized access, or conflicting meal plan names.\n\nSupports dynamic meal plan modification.","summary":"Update an existing meal plan by ID","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated meal plan data","typeName":"IRecipeSharingMealPlan.IUpdate"},"responseBody":{"description":"Details of the updated meal plan","typeName":"IRecipeSharingMealPlan"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}","method":"put"},{"specification":"This operation updates an existing meal plan identified by mealPlanId, allowing modification of the meal plan's name and description. It operates on the recipe_sharing_meal_plans table in the Prisma schema. The update requires that the meal plan exists and that the new name remains unique per owner.\n\nAuthorization is restricted to authenticated regular and premium users who own the meal plan. Validation handles verification of the mealPlanId path parameter and requestBody fields.\n\nThis operation allows users to modify meal plans for flexible meal scheduling.","description":"Update the details of an existing meal plan such as name or description. The mealPlanId path parameter specifies the target meal plan.\n\nRequest body contains updated information, and only regular or premium users owning the meal plan have authorization to update.\n\nThe operation verifies the uniqueness of the name per owner and updates timestamps.\n\nError handling covers invalid mealPlanId, unauthorized access, or conflicting meal plan names.\n\nSupports dynamic meal plan modification.","summary":"Update an existing meal plan by ID","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated meal plan data","typeName":"IRecipeSharingMealPlan.IUpdate"},"responseBody":{"description":"Details of the updated meal plan","typeName":"IRecipeSharingMealPlan"},"authorizationType":null,"authorizationRole":"premiumUser","name":"update","path":"/recipeSharing/premiumUser/mealPlans/{mealPlanId}","method":"put"},{"specification":"This operation deletes a meal plan identified by mealPlanId from the recipe_sharing_meal_plans table. It allows hard deletion of meal plans since the schema supports soft deletion via a nullable deleted_at timestamp but does not enforce soft deletion.\n\nOnly authenticated regular and premium users owning the meal plan can perform deletion.\n\nError responses apply to non-existent mealPlanId or unauthorized deletion attempts.\n\nThis operation allows users to remove old or unwanted meal plans permanently.","description":"Permanently delete a meal plan by ID. The mealPlanId path parameter identifies the meal plan to delete.\n\nThis operation ensures only authorized regular and premium users can delete their meal plans.\n\nDeleted records cannot be recovered.\n\nErrors return for invalid IDs or unauthorized access.\n\nSupports meal plan lifecycle management via removal.","summary":"Delete an existing meal plan by ID","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}","method":"delete"},{"specification":"This operation deletes a meal plan identified by mealPlanId from the recipe_sharing_meal_plans table. It allows hard deletion of meal plans since the schema supports soft deletion via a nullable deleted_at timestamp but does not enforce soft deletion.\n\nOnly authenticated regular and premium users owning the meal plan can perform deletion.\n\nError responses apply to non-existent mealPlanId or unauthorized deletion attempts.\n\nThis operation allows users to remove old or unwanted meal plans permanently.","description":"Permanently delete a meal plan by ID. The mealPlanId path parameter identifies the meal plan to delete.\n\nThis operation ensures only authorized regular and premium users can delete their meal plans.\n\nDeleted records cannot be recovered.\n\nErrors return for invalid IDs or unauthorized access.\n\nSupports meal plan lifecycle management via removal.","summary":"Delete an existing meal plan by ID","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"premiumUser","name":"erase","path":"/recipeSharing/premiumUser/mealPlans/{mealPlanId}","method":"delete"},{"specification":"Fetch all meal plan entries for a specified meal plan using the mealPlanId path parameter. The operation queries the recipe_sharing_meal_plan_entries table to retrieve associated recipes, quantities, scheduled dates, and meal slots like breakfast or dinner.\n\nAuthorization requires authenticated ownership by regular or premium users to access their meal plan entries.\n\nThe response returns a paginated list of meal plan entries for UI presentation and management.\n\nErrors occur for invalid mealPlanId or unauthorized access.\n","description":"Retrieve all entries for a specified meal plan identified by mealPlanId. Entries include recipes planned, quantities, scheduled dates, and meal slots.\n\nAllows users to view and manage their scheduled meal recipes.\n\nRequires authentication and ownership authorization.\n\nErrors are returned for invalid or unauthorized requests.\n","summary":"List meal plan entries for a meal plan","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to retrieve entries for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of meal plan entries for the specified meal plan","typeName":"IPageIRecipeSharingMealPlanEntry"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}/entries","method":"patch"},{"specification":"Fetch all meal plan entries for a specified meal plan using the mealPlanId path parameter. The operation queries the recipe_sharing_meal_plan_entries table to retrieve associated recipes, quantities, scheduled dates, and meal slots like breakfast or dinner.\n\nAuthorization requires authenticated ownership by regular or premium users to access their meal plan entries.\n\nThe response returns a paginated list of meal plan entries for UI presentation and management.\n\nErrors occur for invalid mealPlanId or unauthorized access.\n","description":"Retrieve all entries for a specified meal plan identified by mealPlanId. Entries include recipes planned, quantities, scheduled dates, and meal slots.\n\nAllows users to view and manage their scheduled meal recipes.\n\nRequires authentication and ownership authorization.\n\nErrors are returned for invalid or unauthorized requests.\n","summary":"List meal plan entries for a meal plan","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to retrieve entries for","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Paginated list of meal plan entries for the specified meal plan","typeName":"IPageIRecipeSharingMealPlanEntry"},"authorizationType":null,"authorizationRole":"premiumUser","name":"index","path":"/recipeSharing/premiumUser/mealPlans/{mealPlanId}/entries","method":"patch"},{"specification":"This operation retrieves a specific meal plan entry identified by its unique mealPlanEntryId within the specified mealPlanId. It operates on the recipe_sharing_meal_plan_entries table which stores meal plan entries linking recipes to dates and meal slots with quantity information. The operation returns detailed information for the requested meal plan entry.","description":"Retrieve detailed information for a meal plan entry specified by mealPlanId and mealPlanEntryId. This operation validates that the requested meal plan entry exists and belongs to the meal plan provided.\n\nSecurity considerations: Only the owner of the meal plan (regular or premium user) may access this detail.\n\nThe returned data includes all fields such as recipe ID, quantity, planned date, and meal slot.\n\nIf the entry or meal plan does not exist or access is unauthorized, the operation returns appropriate error responses.\n","summary":"Retrieve a meal plan entry by mealPlanId and mealPlanEntryId","parameters":[{"name":"mealPlanId","description":"Unique identifier of the target meal plan","schema":{"type":"string","format":"uuid"}},{"name":"mealPlanEntryId","description":"Unique identifier of the target meal plan entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed meal plan entry information","typeName":"IRecipeSharingMealPlanEntry"},"authorizationRoles":["regularUser"],"name":"at","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}/entries/{mealPlanEntryId}","method":"get","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation creates a new entry under an existing meal plan. It inserts a record into recipe_sharing_meal_plan_entries linking a recipe to the meal plan, with details of quantity, planned date, and meal slot. The creation requires ownership verification of the meal plan and recipe validity.\n\nAfter successful creation, the detailed record of the new meal plan entry is returned.","description":"Create a new meal plan entry under the specified meal plan. Requires recipe ID, quantity, planned date, and meal slot.\n\nOnly the owner of the meal plan (regular or premium user) can create entries.\n\nSuccessfully returns the created meal plan entry with all specified details.","summary":"Create a new meal plan entry","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan to add a new entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Meal plan entry creation data","typeName":"IRecipeSharingMealPlanEntry.ICreate"},"responseBody":{"description":"Created meal plan entry information","typeName":"IRecipeSharingMealPlanEntry"},"authorizationRoles":["regularUser"],"name":"create","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}/entries","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates an existing meal plan entry identified by mealPlanEntryId within mealPlanId. It modifies fields such as recipe ID, quantity, planned date, and meal slot in the recipe_sharing_meal_plan_entries table. Requires ownership verification.\n\nReturns the full updated meal plan entry after modification.","description":"Update a meal plan entry by mealPlanId and mealPlanEntryId with provided update data.\n\nOnly the owning user may update entries.\n\nValidation ensures the targeted meal plan and entry exist and belong to the user.\n\nReturns updated meal plan entry information reflecting the changes.","summary":"Update a meal plan entry","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan","schema":{"type":"string","format":"uuid"}},{"name":"mealPlanEntryId","description":"Unique identifier of the meal plan entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Meal plan entry update data","typeName":"IRecipeSharingMealPlanEntry.IUpdate"},"responseBody":{"description":"Updated meal plan entry information","typeName":"IRecipeSharingMealPlanEntry"},"authorizationRoles":["regularUser"],"name":"update","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}/entries/{mealPlanEntryId}","method":"put","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes a meal plan entry permanently from the recipe_sharing_meal_plan_entries table. It requires the mealPlanId and mealPlanEntryId to identify the entry.\n\nOnly the owning user may delete an entry.\n\nThis is a hard delete despite the existence of a deleted_at column, removing the record from the database.\n\nNo response body is returned.\n\nReturns error if the meal plan or entry does not exist or if access is unauthorized.","description":"Delete a meal plan entry by mealPlanId and mealPlanEntryId.\n\nOnly the owner of the meal plan can perform this operation.\n\nThis operation permanently removes the entry from the database.\n\nNo content is returned on successful deletion.\n","summary":"Delete a meal plan entry","parameters":[{"name":"mealPlanId","description":"Unique identifier of the meal plan","schema":{"type":"string","format":"uuid"}},{"name":"mealPlanEntryId","description":"Unique identifier of the meal plan entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"erase","path":"/recipeSharing/regularUser/mealPlans/{mealPlanId}/entries/{mealPlanEntryId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation retrieves a paginated list of recurring meal plans owned by authenticated regular users, supporting filtering and searching capabilities. It operates on the recipe_sharing_recurring_meal_plans table in the Prisma schema, which stores users' recurring meal plan configurations including the recurrence pattern, start and end dates, and descriptions. The operation supports pagination to efficiently handle large datasets and allows users to manage their recurring meal plans effectively.","description":"Retrieve a filtered and paginated list of recurring meal plans belonging to the authenticated regular user. This endpoint enables users to view their recurring meal schedules, including patterns such as weekly or monthly cycles, along with start and optional end dates.\n\nSecurity considerations restrict access to authenticated regular users only, ensuring that users can access only their own recurring meal plans. The request supports various filters such as by name, recurrence pattern, and active periods.\n\nThis operation directly maps to the recipe_sharing_recurring_meal_plans table in the Prisma schema, incorporating all relevant columns and their relationships. Soft deletion is respected via the deleted_at column, so only active plans are typically shown.\n\nUsage scenarios include viewing existing recurring plans for editing, monitoring upcoming meal cycles, and managing subscription-based meal scheduling features.\n\nError handling includes returning appropriate messages for unauthorized access and invalid query parameters. Pagination ensures that response sizes remain manageable.","summary":"Search and retrieve a list of user's recurring meal plans","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recurring meal plans","typeName":"IRecipeSharingRecurringMealPlans.IRequest"},"responseBody":{"description":"Paginated list of recurring meal plans matching search criteria","typeName":"IPageIRecipeSharingRecurringMealPlans"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/recurringMealPlans","method":"patch"},{"specification":"This operation retrieves the detailed information of a specific recurring meal plan by its unique identifier. It operates on the recipe_sharing_recurring_meal_plans table containing information about meal plan recurrence, start and end dates, description, and status.\n\nThe API endpoint requires the recurring meal plan ID as a path parameter. The operation fetches the full details of the identified recurring meal plan, including its owner user ID, name, description, recurrence pattern, and active date ranges.\n\nSecurity involves checking that the requesting regular user owns the recurring meal plan or has the required permissions. If the plan is marked deleted (deleted_at set), it will not be returned.\n\nTypical use cases include viewing or editing a specific recurring meal plan in a user interface or API integration.","description":"Fetch comprehensive details about a single recurring meal plan identified by its unique ID. This includes information about its recurrence pattern (e.g., weekly, monthly), start date, optional end date, and descriptive metadata.\n\nAccess is restricted to the plan owner or authorized regular users. The plan must exist and not be deleted.\n\nThis operation supports interfaces where regular users view or modify existing recurring meal plans, facilitating meal scheduling and planning.\n\nError scenarios handled include not found errors for invalid or deleted IDs and access violations preventing unauthorized viewing.","summary":"Retrieve detailed recurring meal plan information","parameters":[{"name":"recurringMealPlanId","description":"Unique identifier of the target recurring meal plan","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the recurring meal plan","typeName":"IRecipeSharingRecurringMealPlan"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/recurringMealPlans/{recurringMealPlanId}","method":"get"},{"specification":"This operation creates a new recurring meal plan entry for the authenticated regular user. It persists information including the meal plan name, recurrence pattern, start date, optional end date, and descriptive details. The operation writes to the recipe_sharing_recurring_meal_plans table in the Prisma schema.\n\nInput data are validated for required fields, user ownership, and logical constraints such as start date before end date if provided. The system ensures unique plan names per user.\n\nUpon successful creation, the new recurring meal plan data is returned in the response. This supports premium meal scheduling features that automate meal plan repetition.\n\nErrors may occur if validation fails or unauthorized regular users attempt to create plans.","description":"Create a new recurring meal plan for the authenticated regular user with detailed recurrence scheduling. The input must define the plan's name, recurrence pattern (e.g., weekly), start date, and optional end date.\n\nThe system validates uniqueness of the plan name per user and logical consistency of dates.\n\nSuccessful creation results in returning the stored meal plan record, enabling immediate further use in scheduling interfaces.\n\nAccess control ensures only authenticated regular users can create plans, and no duplicate names exist.","summary":"Create a new recurring meal plan","parameters":[],"requestBody":{"description":"Recurring meal plan creation details","typeName":"IRecipeSharingRecurringMealPlan.ICreate"},"responseBody":{"description":"Newly created recurring meal plan information","typeName":"IRecipeSharingRecurringMealPlan"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/recurringMealPlans","method":"post"},{"specification":"This operation updates an existing recurring meal plan identified by its unique ID. It modifies properties such as the plan's name, recurrence pattern, start and end dates, and description as stored in the recipe_sharing_recurring_meal_plans table.\n\nThe API requires the recurring meal plan ID as a path parameter and the updated data in the request body. Validations ensure that the regular user owns the plan, and that name uniqueness and date consistency rules are maintained.\n\nSuccessful updates return the latest recurring meal plan details. The operation supports user interfaces allowing modification of recurring scheduling preferences.\n\nErrors include unauthorized attempts, non-existent IDs, and validation failures such as conflicting names or illogical date ranges.","description":"Update an existing recurring meal plan by ID with new scheduling details. Allows changing the plan's name, recurrence pattern, start and optional end dates, and description.\n\nThe operation validates ownership and verifies the plan exists and is active.\n\nSuccessful operations return the updated plan for immediate client synchronization.\n\nAccess controls prevent updates by unauthorized regular users or to deleted plans.\n\nErrors return suitable HTTP status codes and messages for not found, unauthorized, and validation errors.","summary":"Update an existing recurring meal plan","parameters":[{"name":"recurringMealPlanId","description":"Unique identifier of the target recurring meal plan","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Recurring meal plan update details","typeName":"IRecipeSharingRecurringMealPlan.IUpdate"},"responseBody":{"description":"Updated recurring meal plan information","typeName":"IRecipeSharingRecurringMealPlan"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/recurringMealPlans/{recurringMealPlanId}","method":"put"},{"specification":"This operation deletes a recurring meal plan by its unique identifier from the recipe_sharing_recurring_meal_plans table. It performs a permanent deletion (hard delete) as the table uses soft deletion timestamps but here deletion removes the record completely. The operation requires the recurringMealPlanId as path parameter and authorizes only users with the \"regularUser\" role to perform the deletion. User ownership and authorization checks are expected in the business logic layer.","description":"Permanently deletes a recurring meal plan from the system identified by the recurringMealPlanId path parameter.\n\nThis action removes the record from the database entirely and cannot be undone.\n\nAccess is restricted to authenticated users with the \"regularUser\" role. The implementation should verify the user’s permission to delete the specific meal plan.\n\nThe recurring meal plan data includes ownership, recurrence pattern, time boundaries, and audit timestamps as defined in the recipe_sharing_recurring_meal_plans table schema.","summary":"Permanently delete a recurring meal plan","parameters":[{"name":"recurringMealPlanId","description":"Unique identifier of the recurring meal plan to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"regularUser","name":"erase","path":"/recipeSharing/regularUser/recurringMealPlans/{recurringMealPlanId}","method":"delete"},{"specification":"This operation lists shopping lists with search, filtering and pagination capabilities. It operates on the recipe_sharing_shopping_lists table which stores user shopping lists with ownership and soft deletion metadata. The request body allows specifying search criteria such as name, ownership, and pagination parameters. The response is a paginated list of shopping list summaries matching the criteria.","description":"Retrieve a filtered and paginated list of shopping lists. Allows searching by name, filtering by owner user ID, and pagination to control result size.\n\nAccess is publicly available and does not require authentication.\n\nThe shopping lists correspond to recipe_sharing_shopping_lists records, including name, ownership, timestamps, and soft delete flag.\n\nThe results contain summary information suitable for list display with minimal details for performance.","summary":"Search and retrieve paginated shopping lists","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for shopping lists","typeName":"IRecipeSharingShoppingList.IRequest"},"responseBody":{"description":"Paginated list of shopping list summaries matching search criteria","typeName":"IPageIRecipeSharingShoppingList.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/recipeSharing/shoppingLists","method":"patch"},{"specification":"This operation retrieves detailed information about a specific shopping list by its unique identifier. The shopping list is stored in the recipe_sharing_shopping_lists table associated with the owning user and includes metadata like creation, update time, and soft deletion status. The shopping list details also include the list items stored in the shopping_list_items table with quantities and units. The operation requires the shoppingListId path parameter. Authorization is restricted to authenticated regular users.","description":"Retrieve detailed information for a shopping list identified by the shoppingListId parameter. Data includes all shopping list metadata plus individual shopping list items.\n\nOnly authenticated users with the \"regularUser\" role may access this endpoint.\n\nThe operation fetches data from the recipe_sharing_shopping_lists table and related recipe_sharing_shopping_list_items linked by shopping_list_id.\n\nThis API enables viewing or editing shopping lists within client applications.","summary":"Retrieve details of a specific shopping list","parameters":[{"name":"shoppingListId","description":"Unique identifier of the shopping list to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping list information including items","typeName":"IRecipeSharingShoppingList"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}","method":"get"},{"specification":"Create a new shopping list with optional items. This operation creates a shopping list record linked to the authenticated user, storing details such as the list's name and optionally multiple shopping list items including ingredient IDs, quantities, and units as per the recipe_sharing_shopping_lists and recipe_sharing_shopping_list_items tables. Validation ensures required fields are provided and integrity of references is maintained.","description":"Create a new shopping list with specified name and optional list items. Each item specifies ingredient reference, quantity, and unit.\n\nThe newly created shopping list will be associated with the authenticated 'regularUser'.\n\nValidations cover the presence of required data and correct ingredient references.\n\nUse this API call to manage grocery shopping linked to meal plans or collections.","summary":"Create a new shopping list","parameters":[],"requestBody":{"description":"Details of the shopping list to create including items","typeName":"IRecipeSharingShoppingList.ICreate"},"responseBody":{"description":"Created shopping list details","typeName":"IRecipeSharingShoppingList"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/shoppingLists","method":"post"},{"specification":"This operation updates an existing shopping list, identified by the unique shoppingListId. It allows modifying user-specific shopping list details such as the list name and timestamps. The operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma schema, which holds user-owned shopping lists with soft deletion capability. Only authenticated regularUser and premiumUser roles can perform this update operation. The method is PUT with a request body conforming to IRecipeSharingShoppingList.IUpdate and returns the updated shopping list entity.","description":"Update an existing shopping list belonging to the authenticated user. This operation allows modifying fields such as the shopping list's name and timestamps while maintaining data integrity and user ownership validation.\n\nSecurity considerations restrict updates to shopping lists owned by the requesting user, ensuring privacy and proper access control.\n\nThis API endpoint operates on the 'recipe_sharing_shopping_lists' table from the Prisma schema, which maintains shopping lists created for consolidating ingredient quantities needed for meal planning and grocery shopping.\n\nUpon successful update, the updated shopping list information is returned.","summary":"Update an existing shopping list by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list to update","schema":{"type":"string"}}],"requestBody":{"description":"Shopping list update data","typeName":"IRecipeSharingShoppingList.IUpdate"},"responseBody":{"description":"Updated shopping list information","typeName":"IRecipeSharingShoppingList"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}","method":"put","name":"update","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates an existing shopping list, identified by the unique shoppingListId. It allows modifying user-specific shopping list details such as the list name and timestamps. The operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma schema, which holds user-owned shopping lists with soft deletion capability. Only authenticated regularUser and premiumUser roles can perform this update operation. The method is PUT with a request body conforming to IRecipeSharingShoppingList.IUpdate and returns the updated shopping list entity.","description":"Update an existing shopping list belonging to the authenticated user. This operation allows modifying fields such as the shopping list's name and timestamps while maintaining data integrity and user ownership validation.\n\nSecurity considerations restrict updates to shopping lists owned by the requesting user, ensuring privacy and proper access control.\n\nThis API endpoint operates on the 'recipe_sharing_shopping_lists' table from the Prisma schema, which maintains shopping lists created for consolidating ingredient quantities needed for meal planning and grocery shopping.\n\nUpon successful update, the updated shopping list information is returned.","summary":"Update an existing shopping list by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list to update","schema":{"type":"string"}}],"requestBody":{"description":"Shopping list update data","typeName":"IRecipeSharingShoppingList.IUpdate"},"responseBody":{"description":"Updated shopping list information","typeName":"IRecipeSharingShoppingList"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/shoppingLists/{shoppingListId}","method":"put","name":"update","authorizationRole":"premiumUser","authorizationType":null},{"specification":"This operation deletes a shopping list identified by shoppingListId. It performs a hard delete permanently removing the shopping list and all associated items from the database. The operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma schema. Only authenticated regularUser and premiumUser roles are authorized to delete shopping lists. The method is DELETE without a request body and returns no response body upon success.","description":"Permanently delete a shopping list owned by the authenticated user. This operation removes the shopping list record and all related shopping list items from the database.\n\nSecurity measures ensure only the owner of the shopping list can perform deletion, preventing unauthorized data removal.\n\nThis API operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma Prisma schema, which stores user-generated shopping lists with soft delete support. This delete operation performs a hard delete eliminating the record entirely.\n\nNo content is returned on successful deletion.","summary":"Delete a shopping list by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list to delete","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}","method":"delete","name":"erase","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes a shopping list identified by shoppingListId. It performs a hard delete permanently removing the shopping list and all associated items from the database. The operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma schema. Only authenticated regularUser and premiumUser roles are authorized to delete shopping lists. The method is DELETE without a request body and returns no response body upon success.","description":"Permanently delete a shopping list owned by the authenticated user. This operation removes the shopping list record and all related shopping list items from the database.\n\nSecurity measures ensure only the owner of the shopping list can perform deletion, preventing unauthorized data removal.\n\nThis API operation corresponds to the 'recipe_sharing_shopping_lists' table in the Prisma Prisma schema, which stores user-generated shopping lists with soft delete support. This delete operation performs a hard delete eliminating the record entirely.\n\nNo content is returned on successful deletion.","summary":"Delete a shopping list by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list to delete","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/shoppingLists/{shoppingListId}","method":"delete","name":"erase","authorizationRole":"premiumUser","authorizationType":null},{"specification":"This operation retrieves all shopping list items for a specified shopping list identified by shoppingListId. Each item includes ingredient reference, quantity, unit, and optional notes as per the 'recipe_sharing_shopping_list_items' table in the Prisma schema. The GET method returns a list of shopping list items. Authorization requires the user to be the owner or have appropriate permissions. This API does not support pagination parameters and returns all items for the list.","description":"Retrieve all items within a specific shopping list owned by the authenticated user.\n\nEach shopping list item consists of an ingredient, its quantity, measurement unit, and optional user notes.\n\nSecurity controls restrict access to items of shopping lists owned by the user, ensuring privacy.\n\nThis operation maps to the 'recipe_sharing_shopping_list_items' table in the Prisma schema, which maintains detailed ingredient line items within shopping lists.\n\nReturns the full list of detailed shopping list item records.","summary":"List all items in a shopping list","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list whose items are requested","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"List of shopping list items","typeName":"IPageIRecipeSharingShoppingListItem.ISummary"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}/shoppingListItems","method":"get","name":"index","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation retrieves all shopping list items for a specified shopping list identified by shoppingListId. Each item includes ingredient reference, quantity, unit, and optional notes as per the 'recipe_sharing_shopping_list_items' table in the Prisma schema. The GET method returns a list of shopping list items. Authorization requires the user to be the owner or have appropriate permissions. This API does not support pagination parameters and returns all items for the list.","description":"Retrieve all items within a specific shopping list owned by the authenticated user.\n\nEach shopping list item consists of an ingredient, its quantity, measurement unit, and optional user notes.\n\nSecurity controls restrict access to items of shopping lists owned by the user, ensuring privacy.\n\nThis operation maps to the 'recipe_sharing_shopping_list_items' table in the Prisma schema, which maintains detailed ingredient line items within shopping lists.\n\nReturns the full list of detailed shopping list item records.","summary":"List all items in a shopping list","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list whose items are requested","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"List of shopping list items","typeName":"IPageIRecipeSharingShoppingListItem.ISummary"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/shoppingLists/{shoppingListId}/shoppingListItems","method":"get","name":"index","authorizationRole":"premiumUser","authorizationType":null},{"specification":"This operation retrieves a specific shopping list item identified by shoppingListItemId within a shopping list identified by shoppingListId. It returns detailed information about the item, including ingredient reference, quantity, unit of measurement, and optional notes. The GET method requires both shoppingListId and shoppingListItemId as path parameters. Authorization is limited to the owning user or users with appropriate permissions. The response matches the 'recipe_sharing_shopping_list_items' table schema in Prisma.","description":"Retrieve a specific shopping list item by its unique identifier within the specified shopping list.\n\nThe item details include ingredient reference, quantity, measurement unit, and optional notes.\n\nAccess is restricted to the shopping list owner or authorized users.\n\nThis operation leverages the 'recipe_sharing_shopping_list_items' table in the Prisma schema.\n\nReturns the detailed shopping list item entity.","summary":"Retrieve a specific shopping list item by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list containing the item","schema":{"type":"string"}},{"name":"shoppingListItemId","in":"path","description":"Unique identifier of the shopping list item to retrieve","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Shopping list item details","typeName":"IRecipeSharingShoppingListItem"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}/shoppingListItems/{shoppingListItemId}","method":"get","name":"at","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation retrieves a specific shopping list item identified by shoppingListItemId within a shopping list identified by shoppingListId. It returns detailed information about the item, including ingredient reference, quantity, unit of measurement, and optional notes. The GET method requires both shoppingListId and shoppingListItemId as path parameters. Authorization is limited to the owning user or users with appropriate permissions. The response matches the 'recipe_sharing_shopping_list_items' table schema in Prisma.","description":"Retrieve a specific shopping list item by its unique identifier within the specified shopping list.\n\nThe item details include ingredient reference, quantity, measurement unit, and optional notes.\n\nAccess is restricted to the shopping list owner or authorized users.\n\nThis operation leverages the 'recipe_sharing_shopping_list_items' table in the Prisma schema.\n\nReturns the detailed shopping list item entity.","summary":"Retrieve a specific shopping list item by ID","parameters":[{"name":"shoppingListId","in":"path","description":"Unique identifier of the shopping list containing the item","schema":{"type":"string"}},{"name":"shoppingListItemId","in":"path","description":"Unique identifier of the shopping list item to retrieve","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Shopping list item details","typeName":"IRecipeSharingShoppingListItem"},"authorizationRoles":["regularUser","premiumUser"],"path":"/recipeSharing/premiumUser/shoppingLists/{shoppingListId}/shoppingListItems/{shoppingListItemId}","method":"get","name":"at","authorizationRole":"premiumUser","authorizationType":null},{"specification":"This operation creates a new shopping list item under the specified shopping list. It uses the recipe_sharing_shopping_list_items table, which stores items including ingredient references, quantities, and units within a user's shopping list. It validates that the shoppingListId exists and allows adding ingredient, quantity, unit, and optional notes for the item entry. This supports radius cost tracking and shopping list management for users with ingredient details linked to the ingredient master table.","description":"Create a new shopping list item under a specific shopping list by providing ingredient reference, quantity, unit, and optional notes.\n\nThe operation validates that the referenced shopping list exists and associates the new item with that list. This allows users to manage their grocery items and consolidate ingredient quantities for efficient shopping.\n\nSecurity considerations include ensuring the user owns or has permission to modify the shopping list. The ingredient must be valid and exist in the system.\n\nUpon successful creation, the full shopping list item data including timestamps is returned for confirmation and further management.","summary":"Create a shopping list item in the specified shopping list","parameters":[{"name":"shoppingListId","description":"Identifier of the target shopping list","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Shopping list item creation data","typeName":"IRecipeSharingShoppingListItem.ICreate"},"responseBody":{"description":"The newly created shopping list item","typeName":"IRecipeSharingShoppingListItem"},"authorizationRoles":["regularUser"],"name":"create","path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}/shoppingListItems","method":"post","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation updates a shopping list item identified by shoppingListItemId within a specified shopping list. It edits fields such as ingredient reference, quantity, unit, and optional notes, reflecting quantity or unit changes for consolidated shopping.\n\nThe underlying table is recipe_sharing_shopping_list_items, which stores details of items in user-generated shopping lists. The operation ensures the item belongs to the user's list and validates data consistency.\n\nSuccessful update returns the updated shopping list item entity, including timestamps for last modification.","description":"Update an existing shopping list item within a shopping list, modifying ingredient, quantity, unit, or notes.\n\nThis operation validates ownership and correct association with the parent shopping list. Quantity and units changes allow granular control for shopping list management.\n\nThe response includes the full updated shopping list item record.","summary":"Update a shopping list item in a specified shopping list","parameters":[{"name":"shoppingListId","description":"Identifier of the target shopping list","schema":{"type":"string","format":"uuid"}},{"name":"shoppingListItemId","description":"Identifier of the shopping list item to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Shopping list item update data","typeName":"IRecipeSharingShoppingListItem.IUpdate"},"responseBody":{"description":"The updated shopping list item","typeName":"IRecipeSharingShoppingListItem"},"authorizationRoles":["regularUser"],"name":"update","path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}/shoppingListItems/{shoppingListItemId}","method":"put","authorizationRole":"regularUser","authorizationType":null},{"specification":"This operation deletes a shopping list item identified by shoppingListItemId within the specified shopping list. It permanently removes the item record from the recipe_sharing_shopping_list_items table and disassociates it from the shopping list.\n\nDeletion is a hard delete as no soft delete field is defined in the item table; the item is removed entirely from the database.\n\nUsers must have appropriate permissions to modify the shopping list. The operation does not return a response body.\n","description":"Permanently delete a shopping list item from a specified shopping list.\n\nThe item is completely removed and cannot be recovered. The operation validates user ownership and permissions before deletion.\n\nNo content is returned upon successful deletion.","summary":"Delete a shopping list item from a specified shopping list","parameters":[{"name":"shoppingListId","description":"Identifier of the target shopping list","schema":{"type":"string","format":"uuid"}},{"name":"shoppingListItemId","description":"Identifier of the shopping list item to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["regularUser"],"name":"erase","path":"/recipeSharing/regularUser/shoppingLists/{shoppingListId}/shoppingListItems/{shoppingListItemId}","method":"delete","authorizationRole":"regularUser","authorizationType":null},{"specification":"Retrieve a paginated list of grocery stores available for shopping list integrations. Uses recipe_sharing_grocery_stores table which includes store metadata such as name, address, phone, and website URL.\n\nThe operation supports pagination, filtering, and sorting parameters to browse grocery chain listings.\n\nIt is publicly accessible and returns summary information of grocery stores including contact details.\n","description":"Retrieve a paginated list of grocery stores with details such as name, address, phone, and website.\n\nThe list supports filtering and sorting to help users find preferred grocery chains for ingredient price tracking and availability.\n\nThis is a public endpoint accessible without authentication.","summary":"Search and browse grocery stores","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for grocery stores","typeName":"IRecipeSharingGroceryStore.IRequest"},"responseBody":{"description":"Paginated list of grocery store summaries","typeName":"IPageIRecipeSharingGroceryStore.ISummary"},"authorizationRoles":[],"name":"index","path":"/recipeSharing/groceryStores","method":"patch","authorizationRole":null,"authorizationType":null},{"specification":"This operation retrieves detailed information of a grocery store identified uniquely by its ID from the recipe_sharing_grocery_stores table in the Prisma schema. It fetches all fields such as name, address, phone, and website URL, supporting features like ingredient cost tracking and availability. The operation excludes soft-deleted entries and is authorized for moderator role access.","path":"/recipeSharing/moderator/groceryStores/{groceryStoreId}","method":"get","summary":"Retrieve grocery store information by ID","description":"Retrieve detailed information for a grocery store by its unique identifier (groceryStoreId). This operation returns all relevant details including the store's name, address, phone number, and website URL from the recipe_sharing_grocery_stores table.\n\nAccess to this endpoint is restricted to authorized moderators to protect sensitive business data. Soft-deleted grocery stores (those with a deleted_at timestamp) are excluded from results.\n\nProper error handling includes responses for non-existent or deleted store IDs. The endpoint supports shopping list cost optimization and ingredient availability checks.\n\nThis operation is a GET method at /groceryStores/{groceryStoreId} and returns a full grocery store entity matching the ID.","parameters":[{"name":"groceryStoreId","description":"Unique identifier of the grocery store","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed grocery store information","typeName":"IRecipeSharingGroceryStore"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"Create a new grocery store record in the recipe_sharing_grocery_stores table with provided details including name, optional address, phone, and website URL. The operation automatically sets audit timestamps and returns the full entity upon success. It supports the addition of new stores for ingredient price and availability tracking in the recipe sharing platform.","path":"/recipeSharing/moderator/groceryStores","method":"post","summary":"Create new grocery store","description":"Create a new grocery store with required name and optional address, phone, and website URL fields. This operation is authorized for moderators and is essential for expanding the list of stores used in ingredient cost tracking.\n\nOn successful creation, the complete grocery store object including system-generated fields such as id and timestamps is returned. This management action helps maintain up-to-date grocery store data.\n\nThis endpoint POST /groceryStores operates on the recipe_sharing_grocery_stores table and complies with soft delete conventions.","parameters":[],"requestBody":{"description":"Creation info of the grocery store","typeName":"IRecipeSharingGroceryStore.ICreate"},"responseBody":{"description":"Created grocery store information","typeName":"IRecipeSharingGroceryStore"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"Update existing grocery store details by ID in the recipe_sharing_grocery_stores table. Allows modification of the store's name, address, phone, and website URL, maintaining audit timestamps and soft delete compatibility. Restricted to moderators to ensure authorized data management.","path":"/recipeSharing/moderator/groceryStores/{groceryStoreId}","method":"put","summary":"Update grocery store information by ID","description":"Update details of a grocery store identified by groceryStoreId. Fields such as name, address, phone, and website URL can be modified. This operation is authorized only for moderators.\n\nValidation checks ensure the store exists and the updates meet all constraints. Returns the updated grocery store entity fully reflecting current data.\n\nThis is a PUT operation at /groceryStores/{groceryStoreId} targeting the recipe_sharing_grocery_stores table.","parameters":[{"name":"groceryStoreId","description":"Unique identifier of the grocery store to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the grocery store","typeName":"IRecipeSharingGroceryStore.IUpdate"},"responseBody":{"description":"Updated grocery store information","typeName":"IRecipeSharingGroceryStore"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"Delete a grocery store permanently from the recipe_sharing_grocery_stores table by its unique ID. This operation performs a hard delete, removing all traces of the store and affecting ingredient price tracking functionality. Access restricted to moderators due to the destructive nature of this operation.","path":"/recipeSharing/moderator/groceryStores/{groceryStoreId}","method":"delete","summary":"Delete grocery store by ID","description":"Delete a grocery store by its unique groceryStoreId. This hard delete is irreversible and removes the grocery store from the system's records.\n\nOnly moderators have authorization to perform this destructive action. Deletion impacts ingredient pricing and availability tracking.\n\nThis DELETE /groceryStores/{groceryStoreId} endpoint corresponds to the recipe_sharing_grocery_stores Prisma table and must confirm the store's existence before deletion.\n\nPost-deletion, the store data cannot be restored.","parameters":[{"name":"groceryStoreId","description":"Unique identifier of the grocery store to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation retrieves a paginated list of ingredient price records from grocery stores for the Recipe Sharing platform. It allows clients to request ingredient store price data with optional filtering, sorting, and pagination support. The data is based on the recipe_sharing_store_ingredient_prices table in the Prisma schema, capturing pricing and availability details for grocery stores linked with specific ingredients.","description":"Retrieve a filtered, sorted, and paginated list of ingredient prices at grocery stores. This API endpoint supports complex queries to find prices for individual ingredients across multiple stores, enabling features like shopping list cost estimation and store comparison.\n\nThe operation focuses on providing pricing, availability, and last updated timestamp information for each ingredient-store combination. Users can filter by ingredient, store, availability, price range, and sort by price or last update time.\n\nSecurity considerations include restricting access to authenticated users who require pricing information for meal planning and shopping list generation. The data reflects the current prices and availability as stored in the system, updated periodically.\n\nRelated operations include retrieval of individual ingredient price entries via a specific ID, as well as creation and updates of store ingredient prices with POST and PUT operations respectively.","summary":"Search and retrieve a paginated list of store ingredient prices with filtering and sorting","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for store ingredient prices","typeName":"IRecipeSharingStoreIngredientPrice.IRequest"},"responseBody":{"description":"Paginated results of store ingredient price records","typeName":"IPageIRecipeSharingStoreIngredientPrice.ISummary"},"authorizationType":null,"authorizationRole":"regularUser","name":"index","path":"/recipeSharing/regularUser/storeIngredientPrices","method":"patch"},{"specification":"This operation retrieves detailed information of a specific store ingredient price entity by its identifier. It accesses the recipe_sharing_store_ingredient_prices table to provide full details including grocery store association, ingredient reference, price, availability status, and update timestamps.","description":"Retrieve detailed information for a single store ingredient price entry by its unique identifier. This operation allows authenticated users to fetch complete price and availability data for a specific ingredient in a specific grocery store.\n\nThe response includes all recorded attributes of the price entity, facilitating detailed display or editing in client applications. If the specified ID does not exist, an appropriate error response is expected.\n\nThis operation complements the search endpoint and supports update and creation operations on store ingredient prices.\n\nSecurity requires authenticated user access.","summary":"Get detailed store ingredient price by ID","parameters":[{"name":"storeIngredientPriceId","description":"Identifier of the target store ingredient price","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Store ingredient price details for the specified ID","typeName":"IRecipeSharingStoreIngredientPrice"},"authorizationType":null,"authorizationRole":"regularUser","name":"at","path":"/recipeSharing/regularUser/storeIngredientPrices/{storeIngredientPriceId}","method":"get"},{"specification":"This operation creates a new store ingredient price record linking a grocery store and an ingredient with price and availability information. It inserts data into the recipe_sharing_store_ingredient_prices table in the Recipe Sharing schema, including pricing, availability, and update times.\n\nThe input data shall include references to a valid grocery store and ingredient, price value (local currency), availability boolean, and last updated timestamp.\n\nSecurity requires the caller to be an authenticated user authorized to add pricing data, typically a premium user or admin role in business logic.\n\nUpon success, the created entity is returned with its detailed information.","description":"Create a new store ingredient price entry linking an ingredient with a grocery store, specifying price and availability. This endpoint allows authorized users to input current pricing data to support cost tracking and shopping list features.\n\nInput validation includes existence of referenced grocery store and ingredient, positive price values, and valid timestamps for last updated.\n\nThis operation complements the retrieval and update APIs for store ingredient prices.","summary":"Create a new store ingredient price record","parameters":[],"requestBody":{"description":"Store ingredient price creation data","typeName":"IRecipeSharingStoreIngredientPrice.ICreate"},"responseBody":{"description":"Details of the newly created store ingredient price record","typeName":"IRecipeSharingStoreIngredientPrice"},"authorizationType":null,"authorizationRole":"premiumUser","name":"create","path":"/recipeSharing/premiumUser/storeIngredientPrices","method":"post"},{"specification":"This operation updates an existing store ingredient price record identified by its ID. Updates include price value, availability status, and last updated timestamp for the link between a grocery store and an ingredient in the recipe_sharing_store_ingredient_prices table.\n\nThe request body includes the fields to update. The ID path parameter specifies which record to modify.\n\nSecurity ensures only authorized authenticated users can perform updates.\n\nSuccessful completion returns the updated record details.","description":"Update an existing store ingredient price record identified by ID. This allows modification of price, availability, and last updated information to keep data current for shopping and costing features.\n\nInput must include the updated fields and the path parameter for the record ID.\n\nThis operation is related to create and index APIs managing store ingredient prices.\n\nAuthorization is required for access.","summary":"Update store ingredient price by ID","parameters":[{"name":"storeIngredientPriceId","description":"Identifier of the store ingredient price record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Store ingredient price update data","typeName":"IRecipeSharingStoreIngredientPrice.IUpdate"},"responseBody":{"description":"Updated store ingredient price details","typeName":"IRecipeSharingStoreIngredientPrice"},"authorizationType":null,"authorizationRole":"premiumUser","name":"update","path":"/recipeSharing/premiumUser/storeIngredientPrices/{storeIngredientPriceId}","method":"put"},{"path":"/recipeSharing/moderator/storeIngredientPrices/{storeIngredientPriceId}","method":"delete","specification":"This operation sets up a DELETE endpoint for permanently removing a store ingredient price record from the recipe_sharing_store_ingredient_prices table. It accepts a single path parameter 'storeIngredientPriceId' as a UUID string identifying the record to remove. This is a hard delete operation without soft delete support, meaning the record will be completely removed from the database and cannot be restored.","description":"This API permanently deletes a store ingredient price record identified by its unique UUID (storeIngredientPriceId) from the recipe_sharing_store_ingredient_prices table.\n\nThis operation is critical for maintaining clean store pricing data and is intended for use by administrators or authorized backend processes.\n\nSuccessful deletion results in no content returned.\n\nOnly users with the correct authorization role may invoke this endpoint.\n\nThe path parameter 'storeIngredientPriceId' is required to precisely specify which record to delete.","summary":"Delete a store ingredient price record by ID","parameters":[{"name":"storeIngredientPriceId","description":"UUID of the store ingredient price to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseStoreIngredientPrice"},{"path":"/recipeSharing/moderator/recipeCategoriesConfig","method":"patch","specification":"This operation enables searching and listing recipe category configurations stored in recipe_sharing_recipe_categories_config. It supports search criteria, pagination, and sorting via the request body of type IRecipeSharingRecipeCategoriesConfig.IRequest and returns paginated summary results per IPageIRecipeSharingRecipeCategoriesConfig.ISummary.\n\nOnly users with moderator authorization can access this endpoint.","description":"Retrieve a filtered, paginated list of recipe category configurations for administrative purposes.\n\nSupports filtering by category code, name, and description with partial matching, pagination, and sorting.\n\nThis allows frontend clients to efficiently fetch recipe categories with rich querying.\n\nNo path parameters are required.\n\nRoles with moderator privileges may access this operation.\n\nResponse includes concise summary information suitable for list views.","summary":"Search and list recipe category configurations","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for recipe category configurations","typeName":"IRecipeSharingRecipeCategoriesConfig.IRequest"},"responseBody":{"description":"Paginated list of recipe category configuration summaries","typeName":"IPageIRecipeSharingRecipeCategoriesConfig.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"indexRecipeCategoriesConfig"},{"path":"/recipeSharing/moderator/recipeCategoriesConfig/{id}","method":"get","specification":"Retrieve a single recipe category configuration's detailed information by its UUID identifier from the recipe_sharing_recipe_categories_config table. Useful for fetching all details about a category for viewing or editing purposes.\n\nRequires the path parameter 'id' as a UUID string.\n\nOnly users with moderator authorization can perform this operation.","description":"Fetch detailed information of a recipe category configuration by its unique id.\n\nIncludes all properties such as code, name, description, and timestamps.\n\nThe path parameter 'id' is required to uniquely specify the target record.\n\nAccessible only to authenticated moderators.\n\nThis facilitates viewing and editing full category details.","summary":"Get recipe category configuration by ID","parameters":[{"name":"id","description":"Unique identifier of the recipe category configuration","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Recipe category configuration information","typeName":"IRecipeSharingRecipeCategoriesConfig"},"authorizationType":null,"authorizationRole":"moderator","name":"atRecipeCategoriesConfig"},{"path":"/recipeSharing/moderator/recipeCategoriesConfig","method":"post","specification":"Create a new recipe category configuration entry in recipe_sharing_recipe_categories_config. The request body must conform to IRecipeSharingRecipeCategoriesConfig.ICreate with fields for code, name, optional description, and timestamps.\n\nThis endpoint is restricted to moderators only.\n\nResponse will return the full newly created category configuration entity.","description":"Create a new recipe category configuration. \n\nAccepts the required code and name fields, optional description, and timestamps.\n\nAccessible only by moderators for category management purposes.\n\nReturns the detailed entity of the created recipe category configuration.","summary":"Create new recipe category configuration","parameters":[],"requestBody":{"description":"Creation information for a new recipe category configuration","typeName":"IRecipeSharingRecipeCategoriesConfig.ICreate"},"responseBody":{"description":"Newly created recipe category configuration information","typeName":"IRecipeSharingRecipeCategoriesConfig"},"authorizationType":null,"authorizationRole":"moderator","name":"createRecipeCategoriesConfig"},{"specification":"This operation updates an existing recipe category configuration entry identified by its UUID. The related Prisma DB table is recipe_sharing_recipe_categories_config. The operation allows changing the category's code, name, and optional description, along with updating the record's timestamps. The API enforces input validation for required fields and preserves uniqueness constraints on code. The operation requires appropriate authorization roles, typically moderators as per available roles in the schema.","path":"/recipeSharing/moderator/recipeCategoriesConfig/{id}","method":"put","summary":"Update a specific recipe category configuration by ID","description":"Update the details of a predefined recipe category configuration.\n\nThis operation modifies a recipe category config identified by its unique ID. It enables updating the 'code' which is a unique identifier for the category, the human-readable 'name', and an optional 'description'. The update affects the respective timestamps to record the modification instant.\n\nSecurity considerations include authorization checks to ensure only permitted user roles can update category configurations, preventing unauthorized changes.\n\nThe business logic enforces uniqueness of the 'code' field to maintain consistency across the platform's category taxonomy. Related operations include creating new category configs and deleting obsolete configs.\n\nValidation rules require the 'code' and 'name' to be non-empty strings. The 'description' can be null or a descriptive string.\n\nThis operation directly updates the 'recipe_sharing_recipe_categories_config' table as defined in the Prisma schema.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the recipe category configuration to update"}],"requestBody":{"description":"Updated data for the recipe category configuration","typeName":"IRecipeSharingRecipeCategoriesConfig.IUpdate"},"responseBody":{"description":"Updated recipe category configuration details","typeName":"IRecipeSharingRecipeCategoriesConfig"},"authorizationType":null,"authorizationRole":"moderator","name":"updateRecipeCategoryConfig"},{"specification":"This operation deletes an existing recipe category configuration entry permanently by its UUID key. It interacts with the 'recipe_sharing_recipe_categories_config' Prisma schema table. The deletion operation removes the entire record from the database. The system requires appropriate moderator roles to authorize this action. Validation ensures the target record exists.","path":"/recipeSharing/moderator/recipeCategoriesConfig/{id}","method":"delete","summary":"Delete a specific recipe category configuration by ID","description":"Permanently remove a recipe category configuration identified by its unique ID.\n\nThis operation performs a hard delete on the record in the 'recipe_sharing_recipe_categories_config' table corresponding to the given ID. After deletion, the category configuration will no longer exist in the system.\n\nSecurity checks ensure only authorized user roles can execute this operation. Adequate validation confirms that the category exists before attempting deletion.\n\nRelated maintenance operations may include updating or re-creating category configurations.\n\nThis irreversible action cleanly removes all traces of the configuration entry from the database.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the recipe category configuration to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"eraseRecipeCategoryConfig"},{"specification":"This operation searches and retrieves a paginated list of diet category configurations available in the system. It corresponds to the Prisma schema table 'recipe_sharing_diet_categories'. The API supports search filters and pagination parameters via the request body schema. The response includes diet category summaries allowing clients to display lists with details such as the diet name and description. This public API allows any user to fetch diet category listings.","path":"/recipeSharing/dietCategories","method":"patch","summary":"Search and retrieve diet category listings","description":"Retrieve a paginated and optionally filtered list of diet categories.\n\nThis operation allows querying the 'recipe_sharing_diet_categories' table for diet category entries. Clients can provide filtering parameters such as name search, pagination controls, and sorting options.\n\nResults include summaries of diet categories suitable for display in user interfaces.\n\nAccess is publicly allowed with no authentication required.\n\nValidation includes conformance with pagination and filtering criteria.\n\nRelated operations include retrieving a single diet category by ID and managing categories internally.","parameters":[],"requestBody":{"description":"Filtering and pagination parameters for diet category search","typeName":"IRecipeSharingDietCategories.IRequest"},"responseBody":{"description":"Paginated diet category summaries","typeName":"IPageIRecipeSharingDietCategories.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"indexDietCategories"},{"specification":"This operation retrieves detailed information of a single diet category identified by its UUID. It pulls data from the 'recipe_sharing_diet_categories' Prisma schema table. The API returns detailed diet category properties including code, name, and optional description fields. This public read endpoint does not require authentication and is intended for client applications to display specific diet category details.","path":"/recipeSharing/dietCategories/{id}","method":"get","summary":"Retrieve a single diet category by ID","description":"Get detailed information of a specific diet category by its unique ID.\n\nThis retrieval operation returns the full details stored in the corresponding entry of the 'recipe_sharing_diet_categories' table, including the code, name, description, and timestamps.\n\nNo authentication is required for this operation, making it accessible to public clients.\n\nValidation ensures the requested ID exists and returns appropriate errors if not.\n\nThis read operation complements the diet category listing search and supports UI display of diet details.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the diet category to retrieve"}],"requestBody":null,"responseBody":{"description":"Detailed diet category information","typeName":"IRecipeSharingDietCategories"},"authorizationType":null,"authorizationRole":null,"name":"atDietCategory"},{"specification":"This operation creates a new diet category within the recipe sharing system. It manages structured diet categories such as vegan, keto, gluten-free, and paleo, enabling users and the system to classify recipes and filter them according to dietary preferences. The API interacts with the 'recipe_sharing_diet_categories' database table in the Prisma schema, which includes fields for a unique code, name, optional description, and audit timestamps. The creation operation requires supplying the diet category's code, name, and optionally its description. Upon creation, the system also records creation and update timestamps automatically. This operation is designed for administrative or system users responsible for managing dietary classifications and requires appropriate authentication roles.","path":"/recipeSharing/moderator/dietCategories","method":"post","summary":"Create a new diet category","description":"Creates a new diet category in the system to classify recipes and user dietary preferences.\n\nThis operation requires supplying a unique code and name for the diet category, with an optional description for clarity.\n\nSecurity considerations include restricting this creation endpoint to authenticated moderator roles to prevent unauthorized category manipulation.\n\nThe operation affects the 'recipe_sharing_diet_categories' table, adding a new record with automatic creation and update timestamps.\n\nValidation ensures the uniqueness of the category code and proper formatting of data, returning errors if conflicts or invalid data occur.\n\nRelated operations include updating existing diet categories and deleting them when deprecated.\n\nErrors will be returned if code or name are missing or violate uniqueness constraints.\n\n","parameters":[],"requestBody":{"description":"Information to create a new diet category","typeName":"IRecipeSharingDietCategory.ICreate"},"responseBody":{"description":"Created diet category details","typeName":"IRecipeSharingDietCategory"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation updates an existing diet category identified by its ID, allowing modification of the diet category's code, name, and description in the recipe sharing platform. The related Prisma DB table is 'recipe_sharing_diet_categories', including fields such as code, name, description, and audit timestamps. Updating requires the category ID as a path parameter and the new details in the request body. The system validates uniqueness of code and consistency of data. Authorization is typically restricted to moderator role.","path":"/recipeSharing/moderator/dietCategories/{id}","method":"put","summary":"Update an existing diet category","description":"Updates the properties of an existing diet category in the system.\n\nThe category is located by its unique ID provided as a path parameter.\n\nFields that can be updated include the category's code, name, and description to reflect changes or corrections.\n\nSecurity restrictions ensure only users with appropriate moderator permissions can perform updates.\n\nSuccessful updates modify the 'recipe_sharing_diet_categories' table record and refresh the update timestamp.\n\nValidation enforces uniqueness constraints for the code and verifies data integrity.\n\nRelated operations include creation of new diet categories and deletion of outdated ones.\n\nErrors occur if the ID is invalid or if uniqueness constraints fail.\n\n","parameters":[{"name":"id","description":"Unique identifier of the diet category to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated diet category information","typeName":"IRecipeSharingDietCategory.IUpdate"},"responseBody":{"description":"Updated diet category details","typeName":"IRecipeSharingDietCategory"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation deletes an existing diet category permanently from the system using the category's unique ID. It operates on the 'recipe_sharing_diet_categories' table from the Prisma schema, removing the record entirely as no soft delete field is specified. Access to this operation is restricted to moderator users responsible for content management and system organization. Deletion enforces security checks and returns no content upon success.","path":"/recipeSharing/moderator/dietCategories/{id}","method":"delete","summary":"Delete a diet category","description":"Deletes a diet category identified by its unique ID from the database.\n\nThis operation performs a hard deletion, permanently removing all associated records of the diet category.\n\nThe endpoint requires authorized moderator users to prevent accidental or unauthorized deletions.\n\nNo response body is returned upon successful deletion.\n\nThis affects the 'recipe_sharing_diet_categories' table in the Prisma database.\n\nErrors are returned for invalid IDs or unauthorized access.\n\n","parameters":[{"name":"id","description":"Unique identifier of the diet category to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation retrieves a paginated list of difficulty levels for classifying recipes by user skill requirements. It supports filtering, searching, and sorting based on criteria sent in the request body. The operation acts on the 'recipe_sharing_difficulty_levels' Prisma DB table, which contains information such as code, name, description, and timestamps. The response provides a paged collection of difficulty levels. This API endpoint is generally public or accessible with minimal authentication as difficulty levels are basic, non-sensitive metadata.","path":"/recipeSharing/difficultyLevels","method":"patch","summary":"Retrieve paginated list of difficulty levels","description":"Retrieve a filtered and paginated list of difficulty levels indicating recipe complexity.\n\nThis operation supports searching, filtering, and sorting capabilities for client applications.\n\nResults include pagination metadata and a collection of difficulty level entities.\n\nThe 'recipe_sharing_difficulty_levels' table contains unique codes, human-readable names, and optional descriptions for each difficulty level.\n\nSecurity roles may allow public access or require at least a user role depending on system policy.\n\nThis operation does not modify data but provides important metadata supporting user filtering and recipe classification.\n\nErrors can occur if search criteria in the request body are malformed.\n\n","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for difficulty levels","typeName":"IRecipeSharingDifficultyLevel.IRequest"},"responseBody":{"description":"Paginated list of difficulty levels matching search criteria","typeName":"IPageIRecipeSharingDifficultyLevel"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This operation retrieves a difficulty level by its unique identifier from the `recipe_sharing_difficulty_levels` table in the Recipe Sharing backend. It returns detailed information about the difficulty level, including its code, name, description, and timestamps. This GET method requires a valid difficulty level ID as a path parameter and supports read operations accessible to all users.","path":"/recipeSharing/difficultyLevels/{id}","method":"get","summary":"Get a difficulty level by ID","description":"Retrieve detailed information of a specific difficulty level identified by its ID.\n\nThis operation provides all the properties of the difficulty level, such as the unique code, the human-readable name, and any optional description. It also includes audit timestamps to trace record creation and updates.\n\nAccess is unrestricted, suitable for general consumption by both authenticated and unauthenticated users, enabling users to understand recipe classification in terms of difficulty.\n\nThe response will be the single difficulty level entity or a not found error if the ID does not exist.","parameters":[{"name":"id","description":"Unique identifier of the difficulty level","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Difficulty level entity","typeName":"IRecipeSharingDifficultyLevels"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new difficulty level in the `recipe_sharing_difficulty_levels` table. Users provide the necessary data including unique code, name, optional description. The API records creation and update timestamps automatically. This POST operation requires authenticated access for authorized roles like moderators to add new difficulty classifications for recipes.","path":"/recipeSharing/moderator/difficultyLevels","method":"post","summary":"Create new difficulty level","description":"Create a new difficulty level record with specified attributes such as code, name, and description.\n\nThe operation ensures uniqueness of the code.\n\nThis requires authorization since it modifies system classification data.\n\nAfter creation, the new difficulty level data is returned with its full details and timestamps.\n\nValidation errors will be returned if uniqueness or required fields constraints fail.","parameters":[],"requestBody":{"description":"Creation data for difficulty level","typeName":"IRecipeSharingDifficultyLevels.ICreate"},"responseBody":{"description":"Newly created difficulty level entity","typeName":"IRecipeSharingDifficultyLevels"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation updates an existing difficulty level identified by its ID in the `recipe_sharing_difficulty_levels` table. It allows modification of properties such as code, name, and description while maintaining timestamps. The endpoint enforces unique code constraints and requires authorized roles to perform the update. The updated difficulty level details are returned upon success.","path":"/recipeSharing/moderator/difficultyLevels/{id}","method":"put","summary":"Update existing difficulty level","description":"Update an existing difficulty level record by ID.\n\nAllows changing code, name, and description fields, maintaining system classifications up to date.\n\nAuthorization is required.\n\nReturns the updated difficulty level entity.\n\nValidation errors may occur if constraints such as uniqueness of code are violated.","parameters":[{"name":"id","description":"Unique identifier of the difficulty level to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for difficulty level","typeName":"IRecipeSharingDifficultyLevels.IUpdate"},"responseBody":{"description":"Updated difficulty level entity","typeName":"IRecipeSharingDifficultyLevels"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation permanently deletes a difficulty level record from the `recipe_sharing_difficulty_levels` table by its ID. Since the Prisma schema includes a soft delete field `deleted_at`, the deletion is performed as a soft deletion by setting the `deleted_at` timestamp, allowing potential recovery and compliance with audit requirements. Authorization is required to perform this operation, restricting access to moderators.","path":"/recipeSharing/moderator/difficultyLevels/{id}","method":"delete","summary":"Soft delete a difficulty level by ID","description":"Soft delete a difficulty level by its ID by setting its deleted_at timestamp.\n\nThis operation prevents the difficulty level from appearing in active queries but retains it in database for audit and recovery.\n\nRequires moderator role authorization.\n\nNo response body is returned.\n\nError handling includes invalid ID or unauthorized access.","parameters":[{"name":"id","description":"Unique identifier of the difficulty level to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation retrieves a paginated list of measurement units used for ingredient quantities in recipes. It supports advanced filtering, searching, and sorting capabilities. It operates on the recipe_sharing_units table from the Prisma schema, which stores unit codes, names, abbreviations, and timestamps for creation and updates. This endpoint is intended for users or clients to browse and select appropriate units for ingredient specification.","description":"Retrieve a filtered and paginated list of measurement units from the system. This operation allows users to search and sort units by code, name, or abbreviation.\n\nUnits are standardized labels for ingredient measurements, consistent with the recipe sharing backend's requirements for precision in ingredient quantities.\n\nSecurity considerations include read access typically available to authenticated users or public depending on system policy.\n\nThe response contains unit summary information optimized for listing purposes.\n\nThis operation interfaces with the recipe_sharing_units table, ensuring accurate reflection of units stored in the database.","summary":"Search and retrieve a filtered, paginated list of measurement units","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for unit filtering","typeName":"IRecipeSharingUnits.IRequest"},"responseBody":{"description":"Paginated list of unit summary information matching search criteria","typeName":"IPageIRecipeSharingUnits.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/recipeSharing/units","method":"patch"},{"specification":"This operation retrieves detailed information of a specific measurement unit by its unique identifier. It interacts with the recipe_sharing_units table in the Prisma schema which contains code, name, abbreviation, creation and update timestamps.\n\nThe operation requires the unit's UUID as a path parameter, guaranteeing precise unit data retrieval for ingredient specification and validation in the recipe management workflows.","description":"Retrieve detailed information of a measurement unit identified by its unique ID.\n\nThis operation ensures users obtain complete unit details including code, full name, and abbreviation.\n\nAccess control for detailed information may require authenticated user roles.\n\nThe operation corresponds with the recipe_sharing_units table structure in the Prisma schema.","summary":"Retrieve a specific measurement unit by ID","parameters":[{"name":"id","description":"Unique identifier of the measurement unit","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the measurement unit","typeName":"IRecipeSharingUnits"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/recipeSharing/units/{id}","method":"get"},{"specification":"This operation creates a new measurement unit record to be used for ingredient quantity specification in recipes. The operation acts on the recipe_sharing_units table as defined in the Prisma schema, which includes fields for unit code, name, abbreviation, and timestamps.\n\nIt accepts a request body with unit creation information including mandatory code and name fields, optional abbreviation, and ensures data validation for uniqueness on code and name as per database constraints.","description":"Create a new measurement unit for ingredient quantity specifications.\n\nThe operation requires a JSON payload describing the unit code, name, and optional abbreviation.\n\nData validation rejects duplicate codes or names.\n\nSuccessful creation returns the detailed created unit data.\n\nThis operation corresponds to the recipe_sharing_units table in the Prisma schema.","summary":"Create a new measurement unit","parameters":[],"requestBody":{"description":"Creation info of the measurement unit","typeName":"IRecipeSharingUnits.ICreate"},"responseBody":{"description":"Detailed information of the created measurement unit","typeName":"IRecipeSharingUnits"},"authorizationType":null,"authorizationRole":"regularUser","name":"create","path":"/recipeSharing/regularUser/units","method":"post"},{"specification":"This operation updates details of an existing measurement unit specified by its unique ID. It operates on the recipe_sharing_units table from the Prisma schema, allowing modification of the unit's code, name, and abbreviation fields.\n\nThe ID path parameter identifies the specific unit to update. The request body contains the update fields, which must be validated for uniqueness and allowed value constraints.\n\nSuccessful update returns the full updated unit details.","description":"Update an existing measurement unit identified by ID.\n\nAllows changing the unit code, name, and abbreviation as needed.\n\nRequest includes the path parameter for unit identification and the update payload.\n\nResponse contains the updated unit details reflecting current database state.\n\nAuthorization requires regularUser role to ensure data integrity.","summary":"Update measurement unit by ID","parameters":[{"name":"id","description":"Unique identifier of the measurement unit","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update info of the measurement unit","typeName":"IRecipeSharingUnits.IUpdate"},"responseBody":{"description":"Updated detailed information of the measurement unit","typeName":"IRecipeSharingUnits"},"authorizationType":null,"authorizationRole":"regularUser","name":"update","path":"/recipeSharing/regularUser/units/{id}","method":"put"},{"specification":"This operation deletes a unit of measure identified by an UUID from the recipe_sharing_units table. The deletion is permanent and there is no soft delete feature for units. Only moderators are authorized to perform this operation. The path contains the id parameter which must be a UUID format string representing the unique unit identifier.","path":"/recipeSharing/moderator/units/{id}","method":"delete","summary":"Delete unit of measure by ID from the database","description":"Permanently delete the specified unit of measure by its unique identifier. This operation removes the record from the database and cannot be undone. It requires moderator-level authorization to prevent accidental or unauthorized deletion.\n\nThe path parameter 'id' is the UUID identifier of the unit to delete. If the unit does not exist, an error is returned. This endpoint only supports HTTP DELETE method and does not require a request body or response body.\n\nEnsure proper validation, authorization, and error handling on the backend to maintain data integrity and security.","parameters":[{"name":"id","description":"Unique identifier of the unit to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"Retrieve a paginated, filtered list of system configurations from the recipe_sharing_system_config table with search, pagination, and sorting capabilities. This endpoint requires no authentication and supports flexible querying.","path":"/recipeSharing/systemConfig","method":"patch","summary":"Retrieve paginated system configuration entries","description":"Retrieve a paginated list of system configuration entries matching the provided search criteria. The request accepts pagination parameters such as page number and size, sorting options including ascending or descending, and filters by keys or values.\n\nThe system configurations consist of key-value pairs used globally in the application. This operation allows clients to query configurations dynamically for monitoring or administrative display.\n\nNo authentication is required, making this endpoint publicly accessible for read-only operations. Response includes total count and pages as well as data matching the search criteria.","parameters":[],"requestBody":{"description":"Request parameters including filters, search terms, pagination, and sorting","typeName":"IRecipeSharingSystemConfig.IRequest"},"responseBody":{"description":"Paginated list of matching system configuration entries","typeName":"IPageIRecipeSharingSystemConfig"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Fetch detailed information of a specific system configuration entry identified by its UUID from the recipe_sharing_system_config table. The returned data includes key, value, description, and timestamps for tracking purposes. This is a public endpoint requiring no authentication.","path":"/recipeSharing/systemConfig/{id}","method":"get","summary":"Get system configuration entry by ID","description":"Retrieve detailed data for a given system configuration by its unique ID. The response payload contains all configuration fields necessary for complete information.\n\nThe path parameter 'id' is the UUID of the system configuration to retrieve. If no matching record is found, an error is returned.\n\nThe endpoint supports HTTP GET method without a request body.\n\nThere are no authorization requirements for this operation, making it publicly accessible.\n\nUse this endpoint to fetch individual system configuration details for management or display purposes.","parameters":[{"name":"id","description":"Unique identifier of the system configuration entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed system configuration information in response","typeName":"IRecipeSharingSystemConfig"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Create a new system configuration entry in the recipe_sharing_system_config table. This operation accepts key, value, and optional description for the configuration. Administrative privileges are required to prevent unauthorized configuration creation.","path":"/recipeSharing/moderator/systemConfig","method":"post","summary":"Create new system configuration entry","description":"Add a new system configuration setting with a unique key and associated value. Optional description can provide context. The timestamps for creation and update are handled automatically.\n\nThis operation requires moderator authorization to restrict configuration changes to trusted users only.\n\nThe request body must contain all required fields to create the new system configuration entry.\n\nSuccessful creation returns the full system configuration object including timestamps.\n\nEnsure uniqueness of the 'key' field to prevent duplicate entries.","parameters":[],"requestBody":{"description":"Data required to create system configuration","typeName":"IRecipeSharingSystemConfig.ICreate"},"responseBody":{"description":"Created system configuration details","typeName":"IRecipeSharingSystemConfig"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation updates an existing system configuration entry identified by its unique ID in the recipe_sharing_system_config table. It allows modification of the configuration value and its optional description, maintaining audit timestamps for the configuration entry. This is a critical administrative function to control system-wide behavior and settings.","description":"Update a system configuration record by its unique identifier. The operation modifies the 'value' and optional 'description' fields of the system configuration, preserving creation and update timestamps automatically. Access to this operation is restricted to administrators who manage global system settings.\n\nThis operation directly interacts with the 'recipe_sharing_system_config' table, ensuring configuration consistency across the platform. Validation includes verifying the existence of the configuration ID and input data, guaranteeing integrity and security.\n\nProper error responses must be returned for invalid inputs or insufficient permissions.","summary":"Update a system configuration entry by ID","parameters":[{"name":"id","description":"Identifier of the target system configuration entry","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"System configuration update payload","typeName":"IRecipeSharingSystemConfig.IUpdate"},"responseBody":{"description":"Updated system configuration data","typeName":"IRecipeSharingSystemConfig"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/recipeSharing/moderator/systemConfig/{id}","method":"put"},{"specification":"This operation permanently deletes a system configuration entry identified by its unique ID from the recipe_sharing_system_config table. It performs a hard delete with no recovery, removing the record and any associated audit logs.","description":"Permanently remove a system configuration record by its unique identifier. Because the schema lacks soft delete columns, this operation deletes the record irreversibly.\n\nAccess is restricted to moderators responsible for system maintenance. Successful deletion returns no content.\n\nProper error handling must address non-existent records and unauthorized access attempts.","summary":"Permanently delete a system configuration by ID","parameters":[{"name":"id","description":"Unique identifier of the system configuration entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/recipeSharing/moderator/systemConfig/{id}","method":"delete"},{"specification":"This operation returns a paginated list of flagged review queues for moderator review. The flagged review queues represent user reports on reviews that require moderation attention, including reasons and current status.","description":"Retrieve a list of flagged review queues with support for pagination, filtering, and sorting. Intended for moderators to efficiently manage review flags and prioritize moderation tasks.\n\nAccess restricted to authenticated moderators only.\n\nProper validations on input filters ensure secure and controlled data retrieval.","summary":"Get paginated flagged review queue list for moderation","parameters":[],"requestBody":{"description":"Pagination and filter parameters for flagged review queues","typeName":"IRecipeSharingFlagQueues.IRequest"},"responseBody":{"description":"Paged list of flagged review queue entries","typeName":"IPageIRecipeSharingFlagQueues"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/recipeSharing/moderator/flagQueues","method":"patch"},{"specification":"This operation retrieves detailed information about a specific flagged review queue entry by its unique ID. Moderators use this to assess individual flags and determine appropriate moderation actions.","description":"Fetch detailed information for a single flagged review queue entry identified by its ID. This supports moderator decision-making in the content moderation workflow.\n\nRestricted to authenticated moderator users.\n\nIncludes comprehensive details of the flagged review, reporting user, flag reason, and status.\n\nReturns a 404 error if the entry does not exist or cannot be accessed due to permissions.","summary":"Get flagged review queue entry details by ID","parameters":[{"name":"id","description":"ID of the flagged review queue entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed flagged review queue entry data","typeName":"IRecipeSharingFlagQueues"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/recipeSharing/moderator/flagQueues/{id}","method":"get"},{"specification":"This operation creates a new flag queue entry for a flagged review, which is part of the moderation process in the recipe sharing platform. It records the review flagged by a user, the reason for flagging, and timestamps for tracking. The flag queue enables moderators to triage and respond to flagged inappropriate content efficiently. The operation writes to the recipe_sharing_flag_queues table, creating new entries for review moderation processing.","description":"This API endpoint allows authenticated users to create a new flag queue entry when they flag a review as inappropriate or requiring moderation. The user must provide the ID of the flagged review (optional), the identifier of the user who is reporting (flagging) the review, and the reason for the flag.\n\nThe operation is intended for use by regular or premium users to report problematic reviews, which then enter the moderation queue managed by moderators.\n\nThe system records creation timestamps and initializes the flag queue entry with a default status (handled internally).\n\nSecurity considerations include validating the user is authenticated and authorized to flag content.\n\nOn successful creation, the new flag queue entry is stored permanently and will appear in moderation queues until addressed.\n\nErrors include invalid references (nonexistent review IDs or user IDs) or unauthorized attempts.\n\nThis operation creates entries in the recipe_sharing_flag_queues table in the database.","summary":"Create a new flag queue entry for review moderation","parameters":[],"requestBody":{"description":"Flag queue creation details","typeName":"IRecipeSharingFlagQueue.ICreate"},"responseBody":{"description":"Created flag queue entry","typeName":"IRecipeSharingFlagQueue"},"authorizationRole":"regularUser","authorizationType":null,"path":"/recipeSharing/regularUser/flagQueues","method":"post","name":"create"},{"specification":"This operation updates an existing flag queue entry, allowing modification of the status, flag reason, or linked flagged review. It operates on the recipe_sharing_flag_queues table and is intended for use by moderators or authorized system personnel to update flag statuses during review moderation workflows.","description":"This API endpoint allows authorized moderators or system users to update an existing flag queue entry by its ID. It can modify the flag reason, status (such as pending, in_review, resolved, or dismissed), or the linked review ID.\n\nThe operation requires providing the flag queue entry ID in the path and the updated flag queue details in the request body.\n\nSecurity considerations require that only moderators have permission to update flag queues.\n\nUpon successful update, the entry is persisted in the database with updated timestamps.\n\nErrors include invalid IDs, unauthorized access, or invalid status transitions.\n\nThis operation updates records in the recipe_sharing_flag_queues table by primary key.","summary":"Update an existing flag queue entry by ID","parameters":[{"name":"id","description":"Target flag queue entry ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated flag queue details","typeName":"IRecipeSharingFlagQueue.IUpdate"},"responseBody":{"description":"Updated flag queue entry","typeName":"IRecipeSharingFlagQueue"},"authorizationRole":"moderator","authorizationType":null,"path":"/recipeSharing/moderator/flagQueues/{id}","method":"put","name":"update"},{"specification":"This operation deletes a flag queue entry by its ID, removing it completely from the moderation queue. It affects the recipe_sharing_flag_queues table and is intended for use by moderators or system personnel when resolving or dismissing flags.","description":"This API endpoint allows authorized moderators to permanently delete a flag queue entry by its ID. This removes the entry from the moderation queue and database permanently.\n\nThe operation requires the flag queue entry ID to be specified in the path.\n\nSecurity checks ensure only moderators can perform deletions.\n\nNo request body is needed.\n\nThis performs a hard delete from the recipe_sharing_flag_queues table, after which the entry cannot be recovered.\n\nErrors include non-existent IDs or unauthorized access attempts.","summary":"Delete a flag queue entry by ID","parameters":[{"name":"id","description":"Target flag queue entry ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"moderator","authorizationType":null,"path":"/recipeSharing/moderator/flagQueues/{id}","method":"delete","name":"erase"},{"specification":"This operation searches and retrieves flag queue entries for moderation purposes. It supports filtering, pagination, and sorting. It operates on the recipe_sharing_flag_queues table and is intended for use by moderators to manage and review flags efficiently.","description":"This API endpoint allows moderators to search, filter, paginate, and sort flag queue entries used in moderation workflows. It supports complex search criteria defined in the request body, such as filtering by status, flag reason, report date ranges, and reporter user ID.\n\nThe system returns a paginated list of flag queue entries matching the criteria, including relevant details like review IDs, reporter IDs, reason for flags, and timestamps.\n\nSecurity ensures only moderators can access this data.\n\nErrors include invalid query parameters or unauthorized access.\n\nThis operation facilitates effective moderation by enabling moderators to retrieve and manage the flag queue in a scalable and efficient manner.","summary":"Search and retrieve flag queue entries for moderation","parameters":[],"requestBody":{"description":"Search and filter criteria for flag queue entries","typeName":"IRecipeSharingFlagQueue.IRequest"},"responseBody":{"description":"Paginated list of flag queue entries matching filter criteria","typeName":"IPageIRecipeSharingFlagQueue"},"authorizationRole":"moderator","authorizationType":null,"path":"/recipeSharing/moderator/moderatorActions","method":"patch","name":"index"},{"specification":"This API operation retrieves detailed information about a specific moderator action in the recipe sharing system moderation module. It accesses the 'recipe_sharing_moderator_actions' Prisma table by the primary key 'id', enabling moderators and system administrators to view the history and metadata of moderation activities such as hiding or unhiding reviews, category approval, or rejection. This endpoint verifies the existence and status of an action and returns a comprehensive record including moderator ID, action type, target entity, timestamps, and optional comments. Proper authorization roles are enforced to restrict access to authorized moderators only.","description":"Retrieve a specific moderator action by its unique identifier in the recipe sharing backend moderation system.\n\nThis operation returns detailed information of the moderation action including the moderator who performed it, the exact action type, target entity, timestamps, and any comments added by the moderator. It supports audit and compliance by providing immutable logs of moderation activities.\n\nAccess control ensures only authorized moderators can access this data. The response includes all significant fields maintained in the 'recipe_sharing_moderator_actions' Prisma table such as 'moderator_id', 'action_type', 'target_id', 'action_timestamp', and audit fields like 'created_at' and 'updated_at'.\n\nNo request body is needed for this GET operation.\n\nErrors such as invalid or nonexistent IDs return appropriate HTTP error responses.","summary":"Get detailed information about a specific moderator action by ID","parameters":[{"name":"id","description":"Unique identifier of the moderator action to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Moderator action details","typeName":"IRecipeSharingModeratorActions"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/recipeSharing/moderator/moderatorActions/{id}","method":"get"},{"specification":"Create a new moderator action record in the recipe sharing backend moderation module, stored in the 'recipe_sharing_moderator_actions' Prisma table. This operation logs new moderation activities performed by moderators, including action type (e.g., hide_review, unhide_review, approve_category) and optional comments. The creation date and timestamps are managed automatically by the system backend.\n\nThis endpoint accepts a request body conforming to the 'IRecipeSharingModeratorActions.ICreate' type, which includes the moderator's ID, action type, target ID, and comments. It enforces that only authenticated moderators can perform this action to maintain secure and accurate audit trails.\n\nUpon success, the operation returns the created moderator action with all details, suitable for immediate record keeping and display in moderation audit interfaces.","description":"Create a new moderator action record documenting the moderation activity performed.\n\nThe request must specify the moderator ID, the type of action taken, the target entity ID, and optional comments describing the operation.\n\nThis is essential for maintaining an audit trail of all moderation decisions and actions taken on flagged reviews or category approvals.\n\nOnly authorized moderators can perform this operation.\n\nThe system timestamps are applied automatically and do not require client input.\n\nThe response returns the full created moderator action entity.\n\nErrors are triggered if required fields are missing or invalid.","summary":"Create a new moderator action record","parameters":[],"requestBody":{"description":"Moderator action creation details","typeName":"IRecipeSharingModeratorActions.ICreate"},"responseBody":{"description":"Created moderator action","typeName":"IRecipeSharingModeratorActions"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/recipeSharing/moderator/moderatorActions","method":"post"},{"specification":"Update an existing moderator action record in the recipe sharing backend's moderation system, stored in the 'recipe_sharing_moderator_actions' Prisma table, identified by the unique 'id' path parameter. This operation allows authorized moderators to edit moderation action details such as action type, comments, or the target entity associated with the action if corrections or updates are needed.\n\nThe request body must conform to 'IRecipeSharingModeratorActions.IUpdate', specifying the updated fields. This endpoint enforces strict authorization to ensure only moderators can modify audit trail entries.\n\nSuccessful response returns the fully updated moderator action record. Errors occur if the specified ID doesn't exist or required data is invalid.\n\nThis endpoint supports moderation workflow corrections with audit integrity.","description":"Update an existing moderator action by its ID.\n\nAllows modification of action details and comments while preserving audit compliance.\n\nOnly authorized moderators can perform updates.\n\nThe system manages timestamps for creation and updates.\n\nThe response provides the updated moderator action object.\n\nErrors occur if the ID is invalid or update data fails validation.","summary":"Update a moderator action by ID","parameters":[{"name":"id","description":"Unique identifier of the moderator action to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator action update details","typeName":"IRecipeSharingModeratorActions.IUpdate"},"responseBody":{"description":"Updated moderator action","typeName":"IRecipeSharingModeratorActions"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/recipeSharing/moderator/moderatorActions/{id}","method":"put"},{"specification":"Remove a moderator action record permanently from the recipe sharing backend moderation system, stored in the 'recipe_sharing_moderator_actions' Prisma table. This DELETE operation deletes a specific moderation action by the unique 'id' path parameter, eliminating all records of that moderation activity.\n\nAuthorization ensures only moderators can perform deletion, maintaining system integrity. As this table contains audit logs, deletion is a critical action and should be handled with care.\n\nUpon success, no response body is returned. Errors occur if the ID is invalid or not found.\n\nThis operation performs a hard delete as no soft deletion timestamps are specified for this table.","description":"Delete a moderator action from the system by its unique ID.\n\nThis permanently removes the audit log entry for the moderation activity.\n\nOnly authorized moderators can execute this operation.\n\nNo request body or response body is needed.\n\nErrors occur if the specified ID does not exist.\n\nThis is a hard delete operation removing the record entirely.","summary":"Delete a moderator action by ID","parameters":[{"name":"id","description":"Unique identifier of the moderator action to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase","path":"/recipeSharing/moderator/moderatorActions/{id}","method":"delete"},{"specification":"This operation retrieves a filtered and paginated list of user-submitted category approvals pending moderator review or already reviewed. It operates on the recipe_sharing_category_approvals table from the Prisma schema. This API supports searching, filtering by approval status and submission dates, pagination, and sorting to facilitate efficient moderation workflows.","path":"/recipeSharing/moderator/categoryApprovals","method":"patch","summary":"Search and list user-submitted category approvals","description":"Retrieves a list of category approval submissions made by users that are awaiting moderator approval or have been reviewed. This operation supports filtering by category name, approval status (pending, approved, rejected), and submission or review dates, allowing moderators or administrative users to manage category approvals efficiently.\n\nSecurity is enforced by requiring moderator roles to access this data due to its sensitive nature involving user-generated content and moderation processes.\n\nThis operation corresponds to the recipe_sharing_category_approvals table in the database schema, which stores user-submitted categories or tags pending approval, including submission timestamps and review status.\n\nThe API supports comprehensive pagination and sorting to handle potentially large numbers of submissions. Errors returned will inform on invalid parameters or authorization issues.","parameters":[],"requestBody":{"description":"Search parameters for filtering category approvals","typeName":"IRecipeSharingCategoryApprovals.IRequest"},"responseBody":{"description":"Paginated list of category approvals matching criteria","typeName":"IPageIRecipeSharingCategoryApprovals.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"This operation retrieves detailed information about a specific category approval request by its unique identifier. It allows moderators to view the submission details, user information, status, and history for moderation purposes.","path":"/recipeSharing/moderator/categoryApprovals/{id}","method":"get","summary":"Retrieve detailed information for a category approval","description":"Fetches detailed data about a category approval request identified by the provided ID. The response includes the category name, approval status, submission timestamp, review timestamp if applicable, and audit metadata. This detailed view enables moderators to assess the submission context and make informed decisions.\n\nAccess to this endpoint is restricted to users with moderator roles due to the sensitive nature of moderation data.\n\nThe operation maps to the recipe_sharing_category_approvals table in the Prisma schema, which maintains the record of user-submitted categories pending approval.\n\nInvalid IDs or unauthorized access attempts result in appropriate error messages indicating the failure reason.","parameters":[{"name":"id","description":"Unique identifier of the category approval record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed category approval information","typeName":"IRecipeSharingCategoryApprovals"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This operation allows users to submit a new category approval request to suggest new tags or categories for recipes. The submission is stored with a pending status and awaits moderator review before becoming publicly available.","path":"/recipeSharing/regularUser/categoryApprovals","method":"post","summary":"Submit a new category approval request","description":"Allows a user (typically a regular or premium user) to propose a new category or tag for approval by moderators. The submission includes the category name and related metadata. The system records the submission with a 'pending' approval status and timestamps.\n\nSecurity requirements restrict this action to authenticated users (regular or premium) capable of submitting suggestions.\n\nThe operation affects the recipe_sharing_category_approvals table, preserving the proposed category name, submitting user ID, and approval metadata.\n\nValidation errors occur if the input data is incomplete or invalid; successful submissions return the created record with unique identifiers.","parameters":[],"requestBody":{"description":"New category approval submission data","typeName":"IRecipeSharingCategoryApprovals.ICreate"},"responseBody":{"description":"Details of the newly created category approval submission","typeName":"IRecipeSharingCategoryApprovals"},"authorizationType":null,"authorizationRole":"regularUser","name":"create"},{"specification":"This operation enables moderators to update the status or details of an existing category approval request. Typical updates include approving or rejecting the submission and adding review timestamps or comments where applicable.","path":"/recipeSharing/moderator/categoryApprovals/{id}","method":"put","summary":"Update an existing category approval request","description":"Allows moderators to modify an existing category approval entry identified by its ID. This includes changing the approval status (pending, approved, rejected), adding review timestamps, and updating any relevant metadata.\n\nThis endpoint is restricted to moderator users given its critical role in content curation and quality control.\n\nThe operation corresponds to the recipe_sharing_category_approvals table, updating records that represent user-submitted category suggestions.\n\nInappropriate updates or unauthorized attempts return error messages describing the issue.","parameters":[{"name":"id","description":"Unique identifier of the category approval record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated category approval data","typeName":"IRecipeSharingCategoryApprovals.IUpdate"},"responseBody":{"description":"Updated category approval details","typeName":"IRecipeSharingCategoryApprovals"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation deletes a specific category approval request from the database. It permanently removes the user-submitted category approval record identified by the given ID, which is linked to the user who proposed the category or tag. This is a hard delete operation since the 'recipe_sharing_category_approvals' table supports soft deletion but here the operation permanently erases it from the system, ensuring the category request is no longer in the moderation queue. The operation requires authorization to ensure only users with the appropriate permissions (e.g., moderators) can remove category approval requests. The ID is a UUID formatted string corresponding to the primary key of the category approval.","path":"/recipeSharing/moderator/categoryApprovals/{id}","method":"delete","summary":"Delete a category approval request by ID","description":"This API operation permanently deletes a category approval request record from the system by its unique identifier. The category approval record links user-submitted category or tag suggestions pending moderator approval. By calling this endpoint, the specified record is removed entirely from the database and will no longer appear in moderation queues or logs.\n\nOnly users with the correct authorization roles, such as moderators, should be permitted to perform this deletion, protecting the moderation process's integrity and auditability.\n\nThe 'id' path parameter specifies the UUID of the target category approval record. If the record does not exist, the server should respond with an appropriate error code.\n\nThis operation has no request body, and the response contains no content upon successful deletion.\n\nThis DELETE operation directly manipulates data in the 'recipe_sharing_category_approvals' table from the Prisma schema.","parameters":[{"name":"id","description":"Target category approval request's unique UUID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator"],"name":"erase","authorizationRole":"moderator","authorizationType":null}],"components":{"authorization":[{"name":"regularUser","description":"Regular user who can create, share, rate, and review recipes, follow other users, create collections and meal plans.","kind":"member"},{"name":"premiumUser","description":"Premium user with advanced features including meal planning, cost tracking, and enhanced recipe management.","kind":"member"},{"name":"moderator","description":"Moderator who can review flagged content, manage reported reviews, and approve user-generated categories.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIRecipeSharingRegularUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRegularUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingPremiumUser":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingPremiumUser"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingRecipes.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRecipes.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingIngredient.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingIngredient.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingIngredientSubstitution.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingIngredientSubstitution.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingNutritionFact.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingNutritionFact.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingRecipeCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRecipeCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingTags.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingTags.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingUserTags.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingUserTags.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingIngredientSearchTerms":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingIngredientSearchTerms"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingUserFollower.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingUserFollower.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingPersonalizedFeed.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingPersonalizedFeed.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingRating":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRating"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingReview.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingReview.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingReviewVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingReviewVote"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingReviewFlag":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingReviewFlag"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingModerationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingModerationLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingCollections.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingCollections.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingMealPlans.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingMealPlans.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingMealPlanEntry":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingMealPlanEntry"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingRecurringMealPlans":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRecurringMealPlans"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingShoppingList.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingShoppingList.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingShoppingListItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingShoppingListItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingGroceryStore.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingGroceryStore.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingStoreIngredientPrice.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingStoreIngredientPrice.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingRecipeCategoriesConfig.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingRecipeCategoriesConfig.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingDietCategories.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingDietCategories.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingDifficultyLevel":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingDifficultyLevel"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingUnits.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingUnits.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingSystemConfig":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingSystemConfig"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingFlagQueues":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingFlagQueues"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingFlagQueue":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingFlagQueue"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIRecipeSharingCategoryApprovals.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IRecipeSharingCategoryApprovals.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IRecipeSharingRegularUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"User's unique email address used for login and communication."},"username":{"type":"string","description":"Unique username chosen by the user for platform identification."},"password_hash":{"type":"string","description":"Hashed password for user authentication. Stored securely, never plain text."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user account was soft deleted, if applicable."}},"required":["id","email","username","password_hash","created_at","updated_at"],"description":"Regular user entity representing registered platform members.\n\nThis schema aligns with the recipe_sharing_regularusers table in the Prisma database. It stores identity information including email, unique username, hashed password, and audit timestamps. The deleted_at field represents soft deletion status if applicable.\n\nSensitive information such as password hashes must never be exposed in response where inappropriate."},"IRecipeSharingRegularUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email for user registration."},"password_hash":{"type":"string","description":"Secure password hash for authentication."},"username":{"type":"string","description":"Unique username for user registration."}},"required":["email","password_hash","username"],"description":"Data required to create a new regular user account securely. Includes unique email, username, and hashed password data."},"IRecipeSharingRegularUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized user."},"email":{"type":"string","description":"User's unique email address used for login and communication."},"username":{"type":"string","description":"Unique username chosen by the user for platform identification."},"password_hash":{"type":"string","description":"Hashed password for user authentication. Stored securely, never plain text."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user account was soft deleted, if applicable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","username","password_hash","created_at","updated_at","token"],"description":"Authorization response containing user ID and JWT tokens post successful authentication or registration."},"IRecipeSharingRegularUser.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Login email address."},"password_hash":{"type":"string","description":"Hashed password for authentication."}},"required":["email","password_hash"],"description":"Login request requiring valid email and password hash for user authentication."},"IRecipeSharingRegularUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token used to renew access tokens."}},"required":["refresh_token"],"description":"Request to refresh JWT tokens using a valid refresh token."},"IRecipeSharingPremiumUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for premium user login\n\n@format email"},"password_hash":{"type":"string","description":"Hashed password (e.g., bcrypt hash)"},"username":{"type":"string","description":"Unique username for the premium user"}},"required":["email","password_hash","username"],"description":"Payload to create a new premium user account.\n\nRequired fields: email (unique), password_hash, username. Other fields such as timestamps and premium_since are auto-managed and not accepted in input."},"IRecipeSharingPremiumUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"ID of the authenticated premium user"},"email":{"type":"string","description":"Premium user's unique email address for login and communication.\n\nMust be unique system-wide."},"password_hash":{"type":"string","description":"Hashed password for authentication. Stored securely."},"username":{"type":"string","description":"Unique username for premium user identification.\n\nMust be unique system-wide."},"premium_since":{"type":"string","format":"date-time","description":"Timestamp marking when the user became premium. Used to track\nsubscription duration."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the premium user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the premium user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion of premium user account.\n\nNullable date-time string."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","username","premium_since","created_at","updated_at","deleted_at","token"],"description":"Authorized response containing user id and JWT tokens. Returned after successful login or token refresh."},"IRecipeSharingPremiumUser.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Premium user's email address","format":"email"},"password_hash":{"type":"string","description":"Hashed password input for authentication"}},"required":["email","password_hash"],"description":"Request body for user login. Contains user's email and hashed password."},"IRecipeSharingPremiumUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new JWT tokens"}},"required":["refresh_token"],"description":"Refresh token request body to renew JWT access and refresh tokens."},"IRecipeSharingModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique UUID identifier for the moderator."},"email":{"type":"string","description":"Moderator's unique email address used for login."},"password_hash":{"type":"string","description":"Hashed password for authentication.\n\nStored securely as a hash."},"username":{"type":"string","description":"Unique username for moderator identification."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if applicable.\n\nNullable date-time string."}},"required":["id","email","password_hash","username","created_at","updated_at","deleted_at"],"description":"Moderator user model including email, username, secure password hash, creation and update timestamps, and optional soft deletion timestamp."},"IRecipeSharingModerator.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Moderator's unique email address for login."},"password_hash":{"type":"string","description":"Hashed password for authentication, stored securely."},"username":{"type":"string","description":"Unique username for moderator identification."}},"required":["email","password_hash","username"],"description":"Request body for creating a new moderator user. Includes the essential credentials: email, password hash, and username. Timestamps and ID are generated by the system."},"IRecipeSharingModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated moderator user."},"email":{"type":"string","format":"email","description":"Moderator's unique email address used for login."},"password_hash":{"type":"string","description":"Hashed password for authentication.\n\nStored securely as a hash."},"username":{"type":"string","description":"Unique username for moderator identification."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update in ISO 8601 format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if applicable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","username","created_at","updated_at","deleted_at","token"],"description":"Authorization response containing authenticated moderator user information and JWT tokens for session management."},"IRecipeSharingModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Moderator's unique email address for login."},"password_hash":{"type":"string","description":"Hashed password for authentication, stored securely."}},"required":["email","password_hash"],"description":"Request body for moderator login. Contains email and password hash fields for authentication."},"IRecipeSharingModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to renew the JWT access token."}},"required":["refresh_token"],"description":"Request body for moderator token refresh containing the refresh token string."},"IRecipeSharingRegularUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number"},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page"},"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Email filter for searching users"},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Username filter for searching users"}},"required":[],"description":"Request parameters for searching regular users with pagination and filters."},"IRecipeSharingRegularUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Regular user's unique email address used for login and communication"},"username":{"type":"string","description":"Unique username chosen by the user for platform identification"},"password_hash":{"type":"string","description":"Hashed password for user authentication. Stored securely, never plain text."}},"required":[],"description":"Update type for regular user. All fields are optional. Does not include id or timestamp fields. password_hash can be updated but only if properly hashed."},"IRecipeSharingPremiumUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique UUID identifier for the premium user."},"email":{"type":"string","description":"Premium user's unique email address for login and communication.\n\nMust be unique system-wide."},"password_hash":{"type":"string","description":"Hashed password for authentication. Stored securely."},"username":{"type":"string","description":"Unique username for premium user identification.\n\nMust be unique system-wide."},"premium_since":{"type":"string","format":"date-time","description":"Timestamp marking when the user became premium. Used to track\nsubscription duration."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the premium user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the premium user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion of premium user account.\n\nNullable date-time string."}},"required":["id","email","password_hash","username","premium_since","created_at","updated_at","deleted_at"],"description":"Premium user entity representing users with enhanced meal planning and cost tracking access.\n\nThis entity includes identification, authentication, subscription timestamp, and audit fields to support business logic and data integrity."},"IRecipeSharingPremiumUser.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Premium user email filter for searching users."},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Premium user username filter for searching users."},"premium_since":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by premium activation start date."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records per page."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort the results."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sorting order: asc or desc."}},"required":[],"description":"Request parameters for searching and paginating premium users."},"IRecipeSharingPremiumUser.IUpdate":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Email address of the premium user."},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Username of the premium user."},"premium_since":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Premium subscription activation timestamp."}},"required":[],"description":"Request payload for updating premium user details.\n\nAllows partial update of email, username, and premium_since fields."},"IRecipeSharingModerator.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter for moderator email address."},"username":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter for moderator username."},"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Optional page size limit for pagination."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional field name to sort by."},"sortDirection":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort direction, either 'asc' or 'desc'."}},"required":[],"description":"Request filter and pagination parameters for moderator list retrieval."},"IRecipeSharingModerator.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Moderator's unique email address used for login."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"username":{"type":"string","description":"Unique username for moderator identification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if applicable; null if active."}},"required":[],"description":"Update payload for the moderator user. All fields are optional to support partial updates."},"IRecipeSharingRecipes.IRequest":{"type":"object","properties":{"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Recipe title to filter by."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status of the recipe to filter by."},"created_by_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the user who created the recipe."},"limit":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Limit of results per page."},"page":{"oneOf":[{"type":"number","format":"uint32"},{"type":"null"}],"description":"Page number to fetch."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Ordering criteria."}},"required":[],"description":"Request parameters used for filtering and pagination in recipe search."},"IRecipeSharingRecipes":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the recipe."},"created_by_id":{"type":"string","format":"uuid","description":"User ID who created the recipe."},"title":{"type":"string","description":"Unique recipe title per user."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the recipe."},"status":{"type":"string","description":"Current workflow status of the recipe (e.g., draft, published)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion."}},"required":["id","created_by_id","title","status","created_at","updated_at"],"description":"Represents a recipe created by users with title uniqueness per user, descriptive fields, status, timestamps, and optional soft deletion."},"IRecipeSharingRecipes.ICreate":{"type":"object","properties":{"created_by_id":{"type":"string","format":"uuid","description":"User ID who creates the recipe."},"title":{"type":"string","description":"Recipe title unique per user."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the recipe."},"status":{"type":"string","description":"Recipe status."}},"required":["created_by_id","title","status"],"description":"Payload to create a new recipe including user ID, title, optional description, and status."},"IRecipeSharingRecipes.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"The unique title of the recipe per user."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the recipe, optional."},"status":{"type":"string","description":"Current status of the recipe (e.g., draft, published)."}},"required":[],"description":"Request body for updating an existing recipe record."},"IRecipeSharingIngredient.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","minimum":0,"description":"Page number for pagination. Optional."},"limit":{"type":"integer","format":"int32","minimum":0,"description":"Number of records per page. Optional."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to filter ingredient names. Optional."},"brand":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Brand filter for ingredients. Optional."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to sort results by. Optional."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction - ascending or descending. Optional."}},"required":[],"description":"Request parameters for listing and searching ingredients."},"IRecipeSharingIngredient":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the ingredient."},"name":{"type":"string","description":"Name of the ingredient."},"brand":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Brand of the ingredient, if any."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."}},"required":["id","name","created_at","updated_at"],"description":"Represents a single ingredient entity in the system."},"IRecipeSharingIngredient.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Ingredient name to create."},"brand":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional brand of the ingredient."}},"required":["name"],"description":"Request body for creating a new ingredient."},"IRecipeSharingIngredient.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Name of the ingredient."},"brand":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional brand information for the ingredient."}},"required":[],"description":"Update data for IRecipeSharingIngredient.\n\nAllows partial update with optional name and brand."},"IRecipeSharingIngredientSubstitution.IRequest":{"type":"object","properties":{"ingredient_id":{"type":"string","format":"uuid","description":"Original ingredient ID to filter substitutions."},"substitute_ingredient_id":{"type":"string","format":"uuid","description":"Substitute ingredient ID to filter substitutions."},"conversion_ratio":{"type":"number","format":"double","description":"Conversion ratio from original to substitute ingredient."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the substitution."},{"const":"approved","description":"Moderation status of the substitution."},{"const":"rejected","description":"Moderation status of the substitution."}],"description":"Moderation status of the substitution."}},"required":[],"description":"Search and filtering parameters for ingredient substitutions.\n\nAllows filtering substitutions by original ingredient, substitute ingredient, conversion ratio, and moderation status."},"IRecipeSharingIngredientSubstitution":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the substitution record."},"ingredient_id":{"type":"string","format":"uuid","description":"Original ingredient ID linked with this substitution."},"substitute_ingredient_id":{"type":"string","format":"uuid","description":"Substitute ingredient ID linked with this substitution."},"conversion_ratio":{"type":"number","format":"double","description":"Conversion ratio from the original ingredient to the substitute."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the substitution entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the substitution entry was last updated."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the substitution."},{"const":"approved","description":"Moderation status of the substitution."},{"const":"rejected","description":"Moderation status of the substitution."}],"description":"Moderation status of the substitution."}},"required":["id","ingredient_id","substitute_ingredient_id","conversion_ratio","created_at","updated_at","status"],"description":"Entity representing an ingredient substitution record.\n\nDefines a substitute ingredient for a given original ingredient with a conversion ratio and moderation status.\n\nTracks creation and update timestamps."},"IRecipeSharingIngredientSubstitution.ICreate":{"type":"object","properties":{"ingredient_id":{"type":"string","format":"uuid","description":"ID of the original ingredient for which substitution is created."},"substitute_ingredient_id":{"type":"string","format":"uuid","description":"ID of the ingredient to substitute with."},"conversion_ratio":{"type":"number","format":"double","description":"Conversion ratio applied for the substitution."}},"required":["ingredient_id","substitute_ingredient_id","conversion_ratio"],"description":"Request body for creating a new ingredient substitution.\n\nRequires original ingredient ID, substitute ingredient ID, and conversion ratio."},"IRecipeSharingIngredientSubstitution.IUpdate":{"type":"object","properties":{"conversion_ratio":{"type":"number","format":"double","description":"Conversion ratio from original to substitute ingredient."},"status":{"type":"string","description":"Moderation status of substitution (e.g., pending, approved, rejected)."}},"required":["conversion_ratio","status"],"description":"Update properties for an existing ingredient substitution.\n\nOnly conversion_ratio and status can be updated.\n\nStatus must follow moderation status values."},"IRecipeSharingNutritionFact.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Number of records per page."},"ingredient_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by ingredient_id."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort order by specified fields."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search term for filtering nutrition facts."}},"required":[],"description":"Request body schema for searching nutrition facts with pagination and filtering."},"IRecipeSharingNutritionFact":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key."},"ingredient_id":{"type":"string","description":"Linked ingredient {@link recipe_sharing_ingredients.id}."},"calories":{"type":"number","format":"double","description":"Calories per serving or unit."},"protein":{"type":"number","format":"double","description":"Protein content in grams."},"carbohydrates":{"type":"number","format":"double","description":"Carbohydrates in grams."},"fat":{"type":"number","format":"double","description":"Fat content in grams."},"fiber":{"type":"number","format":"double","description":"Fiber content in grams."},"sodium":{"type":"number","format":"double","description":"Sodium content in milligrams."},"sugar":{"type":"number","format":"double","description":"Sugar content in grams."},"vitamin_a":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin A content in micrograms."},"vitamin_c":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin C content in milligrams."},"vitamin_d":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin D content in micrograms."},"iron":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Iron content in milligrams."},"calcium":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Calcium content in milligrams."}},"required":["id","ingredient_id","calories","protein","carbohydrates","fat","fiber","sodium","sugar"],"description":"Detailed nutritional information associated with ingredients or recipes.\nSupports calories, macros, fiber, sodium, sugar, vitamins, and minerals.\n\n@namespace Recipes\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IRecipeSharingNutritionFact.ICreate":{"type":"object","properties":{"ingredient_id":{"type":"string","description":"Linked ingredient {@link recipe_sharing_ingredients.id}."},"calories":{"type":"number","format":"double","description":"Calories per serving or unit."},"protein":{"type":"number","format":"double","description":"Protein content in grams."},"carbohydrates":{"type":"number","format":"double","description":"Carbohydrates in grams."},"fat":{"type":"number","format":"double","description":"Fat content in grams."},"fiber":{"type":"number","format":"double","description":"Fiber content in grams."},"sodium":{"type":"number","format":"double","description":"Sodium content in milligrams."},"sugar":{"type":"number","format":"double","description":"Sugar content in grams."},"vitamin_a":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin A content in micrograms."},"vitamin_c":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin C content in milligrams."},"vitamin_d":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin D content in micrograms."},"iron":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Iron content in milligrams."},"calcium":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Calcium content in milligrams."}},"required":["ingredient_id","calories","protein","carbohydrates","fat","fiber","sodium","sugar"],"description":"Creation properties for a nutrition fact entry."},"IRecipeSharingNutritionFact.IUpdate":{"type":"object","properties":{"calories":{"type":"number","format":"double","description":"Calories per serving or unit."},"protein":{"type":"number","format":"double","description":"Protein content in grams."},"carbohydrates":{"type":"number","format":"double","description":"Carbohydrates in grams."},"fat":{"type":"number","format":"double","description":"Fat content in grams."},"fiber":{"type":"number","format":"double","description":"Fiber content in grams."},"sodium":{"type":"number","format":"double","description":"Sodium content in milligrams."},"sugar":{"type":"number","format":"double","description":"Sugar content in grams."},"vitamin_a":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin A content in micrograms."},"vitamin_c":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin C content in milligrams."},"vitamin_d":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin D content in micrograms."},"iron":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Iron content in milligrams."},"calcium":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Calcium content in milligrams."}},"required":["calories","protein","carbohydrates","fat","fiber","sodium","sugar"],"description":"Update nutritional values of an ingredient or recipe.\n\nThis type includes all necessary macronutrients and micronutrients.\n\nOptional vitamins and minerals may be null if unavailable or not applicable."},"IRecipeSharingRecipeCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number.\n\nThe page number for paginated results.\n\nIf not provided, defaults to first page."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page.\n\nDefines how many records to return.\n\nDefaults to 100 if omitted."},"category_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of category such as cuisine, diet, or difficulty.\n\nUsed for filtering categories in search results."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the category to filter by substring matching.\n\nSupports partial matching for searching categories."}},"required":[],"description":"Request parameters for searching and filtering recipe categories.\n\nIncludes pagination controls and optional filtering by category type and name."},"IRecipeSharingRecipeCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier of the recipe category."},"category_type":{"type":"string","description":"Type of category such as cuisine, diet, or difficulty."},"name":{"type":"string","description":"Human-readable name of the category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the category, if available."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the category."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the category."}},"required":["id","category_type","name","created_at","updated_at"],"description":"Schema representing a Recipe Category in the system.\n\nIncludes category type, human-readable name, optional description, and audit timestamps."},"IRecipeSharingRecipeCategory.ICreate":{"type":"object","properties":{"category_type":{"type":"string","description":"Type of category such as cuisine, diet, or difficulty."},"name":{"type":"string","description":"Human-readable name of the category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category."}},"required":["category_type","name"],"description":"Payload for creating a new recipe category.\n\nRequires specifying the category type and name. Description is optional."},"IRecipeSharingRecipeCategory.IUpdate":{"type":"object","properties":{"category_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Type of category (e.g., cuisine, diet, difficulty). Optional for update."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Category name. Optional for update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional category description."}},"description":"Request body to update an existing recipe category.\n\nAll properties are optional and nullable for partial updates.","required":[]},"IRecipeSharingTags.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by tag name or substring"},"page":{"type":"integer","minimum":1,"description":"Pagination page number"},"limit":{"type":"integer","minimum":1,"description":"Pagination items per page"},"sort":{"type":"string","description":"Sorting order"}},"description":"Request body for searching and filtering recipe tags.\n\nIncludes optional filters for name substring, pagination, and sorting.","required":[]},"IRecipeSharingTags":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique tag ID"},"name":{"type":"string","description":"Name of the tag"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp"}},"required":["id","name","created_at","updated_at"],"description":"Defines a tag used for categorizing recipes.\n\nEach tag has a unique ID, name, and optional description.\n\nTimestamps track creation and updates."},"IRecipeSharingTags.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Name of the tag. Required."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description"}},"required":["name"],"description":"Request body to create a new tag.\n\nMust specify tag name and optional description."},"IRecipeSharingUserTags":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key.\n\nUnique identifier of the user tag suggestion."},"user_id":{"type":"string","description":"Submitting user identifier.\n\nReferences recipe_sharing_regularusers.id."},"tag_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Referenced approved tag identifier.\n\nOptional; references recipe_sharing_tags.id if approved."},"suggested_name":{"type":"string","description":"Suggested tag name by user."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the user tag suggestion.\n\nSpecifies whether the tag is awaiting moderation, approved for use, or rejected."},{"const":"approved","description":"Moderation status of the user tag suggestion.\n\nSpecifies whether the tag is awaiting moderation, approved for use, or rejected."},{"const":"rejected","description":"Moderation status of the user tag suggestion.\n\nSpecifies whether the tag is awaiting moderation, approved for use, or rejected."}],"description":"Moderation status of the user tag suggestion.\n\nSpecifies whether the tag is awaiting moderation, approved for use, or rejected."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp in ISO 8601 format."}},"required":["id","user_id","suggested_name","status","created_at","updated_at"],"description":"User-suggested tags pending moderator approval.\n\nUser-generated tags suggestions with moderation status, ownership, and timestamps.\n\nIncludes relations to submitting user and optional approved tag.\n\nUsed to support user-generated recipe classification pending review."},"IRecipeSharingUserTags.ICreate":{"type":"object","properties":{"user_id":{"type":"string","description":"Submitting user identifier.\n\nRequired and must be a valid UUID."},"tag_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Referenced approved tag identifier.\n\nOptional; null or UUID if known."},"suggested_name":{"type":"string","description":"Suggested tag name by user.\n\nRequired; non-empty string."},"status":{"const":"pending","description":"Moderation status for new user tags must be set to \"pending\".\n\nMust be exactly \"pending\" on creation."}},"required":["user_id","suggested_name","status"],"description":"Payload to create a new user-suggested tag.\n\nIncludes submitting user, suggested tag name, and moderation status set to \"pending\" by default."},"IRecipeSharingUserTags.IUpdate":{"type":"object","properties":{"tag_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to approving tag, nullable."},"suggested_name":{"type":"string","description":"User provided tag name suggestion."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of user tag suggestion.\n\nValid values are \"pending\", \"approved\", \"rejected\"."},{"const":"approved","description":"Moderation status of user tag suggestion.\n\nValid values are \"pending\", \"approved\", \"rejected\"."},{"const":"rejected","description":"Moderation status of user tag suggestion.\n\nValid values are \"pending\", \"approved\", \"rejected\"."}],"description":"Moderation status of user tag suggestion.\n\nValid values are \"pending\", \"approved\", \"rejected\"."}},"required":[],"description":"Payload to update user-suggested tag.\n\nFields nullable and optional for partial updates,\n\nIncludes moderation status which can be \"pending\", \"approved\", or \"rejected\"."},"IRecipeSharingUserTags.IRequest":{"type":"object","properties":{"user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by submitting user ID.\n\nOptional UUID string."},"tag_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by tag ID (approved tag).\n\nOptional UUID string."},"suggested_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by suggested name with optional partial matching."},"status":{"oneOf":[{"const":"pending"},{"const":"approved"},{"const":"rejected"},{"type":"null"}],"description":"Filter by moderation status.\n\nOptional enum filter: \"pending\", \"approved\", \"rejected\"."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: page number.\n\nOptional positive integer."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: number of items per page.\n\nOptional positive integer."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sorting instruction string."}},"required":[],"description":"Request payload for filtering user-suggested tags.\n\nSupports filtering by user ID, tag ID, suggested name, moderation status,\n\nalong with pagination parameters and optional sorting."},"IRecipeSharingUserTags.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the user tag record."},"suggested_name":{"type":"string","description":"The tag name suggested by the user."},"status":{"oneOf":[{"const":"pending","description":"Moderation status of the user tag suggestion."},{"const":"approved","description":"Moderation status of the user tag suggestion."},{"const":"rejected","description":"Moderation status of the user tag suggestion."}],"description":"Moderation status of the user tag suggestion."}},"required":["id","suggested_name","status"],"description":"Summary of a user-suggested tag, including id, suggested name, and moderation status."},"IRecipeSharingIngredientSearchTerms.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Pagination page number.\n\nOptional."},"limit":{"type":"integer","format":"int32","description":"Pagination page size limit.\n\nOptional."},"ingredient_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by ingredient ID.\n\nOptional."},"search_term":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term substring filter.\n\nOptional."}},"required":[],"description":"Request parameters for searching ingredient search terms.\n\nIncludes pagination, filtering by ingredient ID and search term."},"IRecipeSharingIngredientSearchTerm":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the ingredient search term."},"ingredient_id":{"type":"string","format":"uuid","description":"Linked ingredient identifier."},"search_term":{"type":"string","description":"Search term variant string used for matching."}},"required":["id","ingredient_id","search_term"],"description":"Ingredient search term entity used for partial and fuzzy ingredient matching.\n\nIncludes the search term string as a variant and its linkage to an ingredient."},"IRecipeSharingUserFollower.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Pagination page number.\n\nOptional."},"limit":{"type":"integer","format":"int32","description":"Pagination page size limit.\n\nOptional."},"follower_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by follower user ID.\n\nOptional."},"followee_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by followee user ID.\n\nOptional."},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Current status filter.\n\nOptional."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion filter flag.\n\nOptional."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Creation timestamp filter.\n\nOptional."}},"required":[],"description":"Request parameters for searching user follower relationships.\n\nSupports pagination, filtering by follower and followee IDs, status, soft deletion, and creation time."},"IRecipeSharingUserFollower":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user follower relationship."},"follower_user_id":{"type":"string","format":"uuid","description":"Follower user ID."},"followee_user_id":{"type":"string","format":"uuid","description":"Followee user ID."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if deleted, null otherwise."}},"required":["id","follower_user_id","followee_user_id","created_at","updated_at"],"description":"User follower relationship entity in the recipe sharing social network.\n\nRepresents a follower-followee link between two users with auditing and soft deletion support."},"IRecipeSharingUserFollower.ICreate":{"type":"object","description":"Request body to create a new user follower relationship.","properties":{"follower_user_id":{"type":"string","format":"uuid","description":"ID of the user who is the follower. References recipe_sharing_regularusers.id or recipe_sharing_premiumusers.id or recipe_sharing_moderators.id."},"followee_user_id":{"type":"string","format":"uuid","description":"ID of the user being followed. References recipe_sharing_regularusers.id or recipe_sharing_premiumusers.id or recipe_sharing_moderators.id."}},"required":["follower_user_id","followee_user_id"]},"IRecipeSharingUserFollower.IUpdate":{"type":"object","description":"Request body to update an existing user follower relationship.","properties":{"follower_user_id":{"type":"string","format":"uuid","description":"ID of the user who is the follower."},"followee_user_id":{"type":"string","format":"uuid","description":"ID of the user being followed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion of the following relationship."}},"required":[]},"IRecipeSharingPersonalizedFeed.IRequest":{"type":"object","description":"Request body for filtering and paginating personalized feed entries. Null values must be explicit.","properties":{"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the user owning the personalized feed entry."},"recipe_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the recipe shown in the personalized feed."},"originator_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the user who created the recipe shown in the feed."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records to return per page."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order, ascending (asc) or descending (desc)."}},"required":[]},"IRecipeSharingPersonalizedFeed":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the personalized feed entry"},"user_id":{"type":"string","format":"uuid","description":"ID of the user owning the personalized feed entry"},"recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe shown in the feed"},"originator_user_id":{"type":"string","format":"uuid","description":"ID of the user who created the recipe shown in the feed"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the feed entry was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the feed entry was last updated"}},"required":["id","user_id","recipe_id","originator_user_id","created_at","updated_at"],"description":"Personalized feed entry linking a user to a recipe and its originator user. Includes create and update timestamps."},"IRecipeSharingPersonalizedFeed.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"ID of the user owning the personalized feed entry"},"recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe shown in the feed"},"originator_user_id":{"type":"string","format":"uuid","description":"ID of the user who created the recipe shown in the feed"}},"required":["user_id","recipe_id","originator_user_id"],"description":"Request schema for creating a personalized feed entry. Requires user, recipe, and originator IDs."},"IRecipeSharingPersonalizedFeed.IUpdate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"ID of the user owning the personalized feed entry"},"recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe shown in the feed"},"originator_user_id":{"type":"string","format":"uuid","description":"ID of the user who created the recipe shown in the feed"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the feed entry was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the feed entry was last updated"}},"required":[],"description":"Request schema for updating a personalized feed entry. Optional user, recipe, and originator IDs with timestamps."},"IRecipeSharingRating":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key - Unique identifier of the rating record"},"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Belonged user's recipe_sharing_regularusers.id or recipe_sharing_premiumusers.id"},"recipe_sharing_recipe_id":{"type":"string","format":"uuid","description":"Belonged recipe's recipe_sharing_recipes.id"},"rating":{"type":"integer","description":"Star rating from 1 to 5"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the rating was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the rating was last updated"}},"required":["id","recipe_sharing_user_id","recipe_sharing_recipe_id","rating","created_at","updated_at"],"description":"User rating entity for recipes capturing the user, the rated recipe, the star rating value (1-5), and audit timestamps.\n\nThis schema defines the core rating information associating users and recipes with their rating feedback.\n\nIt serves to support user feedback UI, rating averages, and analytics.\n\nSensitive authentication data such as password hashes are excluded.\n\nThe rating field enforces a valid integer rating from 1 to 5."},"IRecipeSharingRating.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit number of records per page"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to filter ratings"},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field name"},"userId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter ratings by user ID"},"recipeId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter ratings by recipe ID"}},"required":[],"description":"Request query parameters for filtering and paginating recipe ratings."},"IRecipeSharingRating.ICreate":{"type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Belonged user who submits the rating"},"recipe_sharing_recipe_id":{"type":"string","format":"uuid","description":"Target recipe to rate"},"rating":{"type":"integer","description":"Star rating from 1 to 5"}},"required":["recipe_sharing_user_id","recipe_sharing_recipe_id","rating"],"description":"Request payload to create a new recipe rating.\n\nIncludes user id, recipe id, and rating value.\n\nUsed in endpoints accepting rating creation requests.\n\nAll fields are required, and rating must be between 1 and 5."},"IRecipeSharingRating.IUpdate":{"type":"object","properties":{"rating":{"type":"integer","description":"Updated star rating from 1 to 5"}},"required":["rating"],"description":"Request payload to update an existing recipe rating.\n\nFields are optional and used to update portions of the rating record.\n\nThe rating, if provided, must be between 1 and 5."},"IRecipeSharingReview":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key - Unique identifier of the review"},"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Belonged user who authored the review"},"recipe_sharing_recipe_id":{"type":"string","format":"uuid","description":"Target recipe of the review"},"review_text":{"type":"string","description":"Detailed review text up to 2000 characters"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the review was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp marking soft deletion of review"}},"required":["id","recipe_sharing_user_id","recipe_sharing_recipe_id","review_text","created_at","updated_at"],"description":"User review entity containing detailed text feedback on recipes.\n\nIncludes user and recipe references, main review content, and audit timestamps.\n\nSupports soft deletion marking via nullable deleted_at field."},"IRecipeSharingReview.IRequest":{"type":"object","properties":{"recipe_sharing_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by user id"},"recipe_sharing_recipe_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by recipe id"},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional text search term"},"status":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional status filter"},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination page"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination limit"}},"required":[],"description":"Request parameters for searching and filtering recipe reviews.\n\nAll properties are optional to support flexible query construction.\n\nIncludes filters by user, recipe, text search, status, and pagination.\n\nUsed by endpoints supporting review searches."},"IRecipeSharingReview.ICreate":{"type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"ID of the user submitting the review, must match an existing regular or premium user ID."},"recipe_sharing_recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe being reviewed, must be a valid recipe identifier."},"review_text":{"type":"string","description":"Text content of the review, supporting up to 2000 characters."}},"required":["recipe_sharing_user_id","recipe_sharing_recipe_id","review_text"],"description":"Create payload for a new recipe sharing review.\n\nIncludes required user and recipe IDs, and the review text.\n\nAll properties are mandatory for creating a review entry."},"IRecipeSharingReview.IUpdate":{"type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"ID of the user submitting the review; optional to allow for partial updates."},"recipe_sharing_recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe being reviewed; optional to allow partial update."},"review_text":{"type":"string","description":"Updated text content of the review; optional for partial updates."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp; if null, it indicates not deleted."}},"required":[],"description":"Update payload for an existing recipe sharing review.\n\nAll properties optional to support partial updates.\n\nIncludes nullable handling for soft deletion timestamp."},"IRecipeSharingReviewVote.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination, nullable."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Maximum number of records per page, nullable."},"sortBy":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"type":"null"}],"description":"Field to sort results by, nullable."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Order of sorting ascending or descending; nullable."},"filterByUserId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter votes by the ID of the user who voted; nullable."},"filterByReviewId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter votes by the ID of the review the vote belongs to; nullable."}},"required":[],"description":"Request parameters for listing recipe sharing review votes.\n\nSupports pagination, sorting, and filtering by user or review ID.\n\nAll properties are optional and nullable to allow flexible queries."},"IRecipeSharingReviewVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Voting user from recipe_sharing_regularusers.id"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Targeted review recipe_sharing_reviews.id"},"helpful":{"type":"boolean","description":"Whether the vote marks the review as helpful or not."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was last updated."}},"required":["id","recipe_sharing_user_id","recipe_sharing_review_id","helpful","created_at","updated_at"],"description":"Schema for user-submitted helpfulness votes on recipe reviews.\n\nEach vote indicates if the user found the review helpful and is uniquely identified.\n\nProperties track the voting user, the review voted on, and the vote's helpful status.\n\nTimestamps record creation and update moments.\n\nThis schema supports feedback aggregation.\n"},"IRecipeSharingReviewVote.ICreate":{"type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Voting user from recipe_sharing_regularusers.id"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Targeted review recipe_sharing_reviews.id"},"helpful":{"type":"boolean","description":"Whether the vote marks the review as helpful or not."}},"required":["recipe_sharing_user_id","recipe_sharing_review_id","helpful"],"description":"Request body for creating a new helpfulness vote for a recipe review.\n\nRequires user ID, review ID, and helpfulness flag.\n"},"IRecipeSharingReviewVote.IUpdate":{"type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"Voting user from recipe_sharing_regularusers.id"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Targeted review recipe_sharing_reviews.id"},"helpful":{"type":"boolean","description":"Whether the vote marks the review as helpful or not."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was last updated."}},"required":[],"description":"Request body for updating a helpfulness vote on a recipe review.\n\nAll properties are optional.\n"},"IRecipeSharingReviewFlag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term or filter string. This property enables filtering flags by criteria such as reason or user ID."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting order, e.g., 'asc' or 'desc'."}},"required":[],"description":"Request parameters for listing and searching review flags with pagination, filtering, and sorting support.\n"},"IRecipeSharingReviewFlag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"User who flagged the review recipe_sharing_regularusers.id"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Flagged review recipe_sharing_reviews.id"},"reason":{"type":"string","description":"Reason selected by the user for flagging (e.g., spam, offensive language)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."}},"required":["id","recipe_sharing_user_id","recipe_sharing_review_id","reason","created_at"],"description":"Schema defining flags raised by users on recipe reviews to report inappropriate content.\n\nIncludes user identity, the review flagged, reason, and creation timestamp.\n\nEnables moderation and content quality control via flag tracking.\n"},"IRecipeSharingReviewFlag.ICreate":{"description":"Create a new flag for a review indicating inappropriate content or other issues. This requires the user ID of the flagger, the review ID being flagged, and a reason for the flag.","type":"object","properties":{"recipe_sharing_user_id":{"type":"string","format":"uuid","description":"User who flagged the review recipe_sharing_regularusers.id"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Flagged review recipe_sharing_reviews.id"},"reason":{"type":"string","description":"Reason selected by the user for flagging (e.g., spam, offensive language)"}},"required":["recipe_sharing_user_id","recipe_sharing_review_id","reason"]},"IRecipeSharingReviewFlag.IUpdate":{"description":"Update an existing review flag reason. Only the reason field may be updated and is optional.","type":"object","properties":{"reason":{"oneOf":[{"type":"string","description":"Optional updated reason for flagging"},{"type":"null"}],"description":"Optional updated reason for flagging"}},"required":[]},"IRecipeSharingModerationLog.IRequest":{"description":"Request parameters for searching moderation logs with filtering options and pagination.","type":"object","properties":{"recipe_sharing_review_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by review ID to narrow results"},{"type":"null"}],"description":"Optional filter by review ID to narrow results"},"recipe_sharing_moderator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter by moderator ID"},{"type":"null"}],"description":"Optional filter by moderator ID"},"action":{"oneOf":[{"type":"string","description":"Optional filter by moderation action type"},{"type":"null"}],"description":"Optional filter by moderation action type"},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number for pagination"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Limit number of records per page"},{"type":"null"}],"description":"Limit number of records per page"}},"required":[]},"IRecipeSharingCollections":{"description":"User Created Recipe Collection entity representing a named recipe group owned by a user for organizing recipes. Contains optional description and supports soft deletion.","type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the collection"},"owner_user_id":{"type":"string","format":"uuid","description":"ID of the user owning this collection"},"name":{"type":"string","description":"Name of the collection"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the collection"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this collection was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this collection was last updated"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable soft delete timestamp"}},"required":["id","owner_user_id","name","created_at","updated_at"]},"IRecipeSharingCollections.ICreate":{"type":"object","properties":{"owner_user_id":{"type":"string","format":"uuid","description":"Owning user ID referencing recipe_sharing_regularusers.id or recipe_sharing_premiumusers.id."},"name":{"type":"string","description":"Name of the collection for display and organization."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description of the collection."}},"required":["owner_user_id","name"],"description":"Payload data for creating a new recipe collection."},"IRecipeSharingCollections.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the collection for display and organization."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description of the collection."}},"required":[],"description":"Update data for recipe collections."},"IRecipeSharingCollections.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by collection name"},"owner_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the owner user UUID"},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of items per page"},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting instructions like 'created_at desc'"}},"description":"Search criteria and pagination parameters for recipe collections","required":[]},"IRecipeSharingModerationLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"Reviewed flagged content recipe_sharing_reviews.id"},"recipe_sharing_moderator_id":{"type":"string","format":"uuid","description":"Moderator who performed action recipe_sharing_moderators.id"},"action":{"type":"string","description":"Moderation action taken (e.g., hide, unhide)."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment explaining the moderation decision."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when moderation action was logged."}},"required":["id","recipe_sharing_review_id","recipe_sharing_moderator_id","action","created_at"],"description":"Audit trail logging all moderation actions taken on flagged reviews, including hides, unhides, moderator identity, timestamp, and comments. Essential for compliance and transparency."},"IRecipeSharingMealPlans.IRequest":{"type":"object","properties":{"owner_user_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by owner user UUID. Nullable to allow no filtering."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by meal plan name substring. Nullable to search all."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination. Nullable to default to first page."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page size for pagination. Nullable to uses default limit."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by, e.g. 'name' or 'created_at'. Nullable for default sorting."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order: ascending or descending. Nullable for default ascending."}},"required":[],"description":"Request parameters for searching and paginating recipe sharing meal plans."},"IRecipeSharingMealPlans":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the meal plan."},"owner_user_id":{"type":"string","format":"uuid","description":"UUID of the user who owns the meal plan."},"name":{"type":"string","description":"Name of the meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the meal plan record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the meal plan record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating soft deletion; null if active."}},"required":["id","owner_user_id","name","created_at","updated_at"],"description":"Schema representing a meal plan entity in the Recipe Sharing system."},"IRecipeSharingMealPlan.ICreate":{"type":"object","properties":{"owner_user_id":{"type":"string","format":"uuid","description":"UUID of the user who will own the meal plan."},"name":{"type":"string","description":"Name of the new meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description for the meal plan."}},"required":["owner_user_id","name"],"description":"Request body schema for creating a new meal plan."},"IRecipeSharingMealPlan.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Name of the meal plan for identification."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."}},"required":["name"],"description":"Update data for modifying an existing meal plan.\n\nAllows changing the meal plan's display name and optional description.\n\nDoes NOT permit updates to ownership or audit fields."},"IRecipeSharingMealPlan":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"owner_user_id":{"type":"string","format":"uuid","description":"Owning user ID referencing recipe_sharing_regularusers.id or recipe_sharing_premiumusers.id."},"name":{"type":"string","description":"Name of the meal plan for identification."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null if active."}},"required":["id","owner_user_id","name","created_at","updated_at"],"description":"Meal plan entity representing user-defined schedules of recipes assigned to dates and meal slots.\n\nThis entity includes ownership, audit tracking with creation and update timestamps, and supports soft deletion.\n\nMeal plans allow users to organize and automate meal selections, facilitating personalized cooking and nutrition management."},"IRecipeSharingMealPlanEntry":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"meal_plan_id":{"type":"string","format":"uuid","description":"References the associated meal plan. {recipe_sharing_meal_plans.id}"},"recipe_id":{"type":"string","format":"uuid","description":"Assigned recipe reference. {recipe_sharing_recipes.id}"},"quantity":{"type":"integer","format":"int32","description":"Number of servings or repetitions for this entry."},"planned_date":{"type":"string","format":"date-time","description":"The date this recipe is planned for."},"meal_slot":{"type":"string","description":"Designation of meal slot (e.g., breakfast, lunch, dinner)."},"created_at":{"type":"string","format":"date-time","description":"Entry creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if active."}},"required":["id","meal_plan_id","recipe_id","quantity","planned_date","meal_slot","created_at","updated_at"],"description":"Meal plan entry representing assignment of a recipe to a specific date and meal slot.\n\nThis allows users to specify which recipes they plan to prepare and when, including serving quantity and timing."},"IRecipeSharingMealPlanEntry.ICreate":{"type":"object","properties":{"meal_plan_id":{"type":"string","format":"uuid","description":"References the associated meal plan. {recipe_sharing_meal_plans.id}"},"recipe_id":{"type":"string","format":"uuid","description":"Assigned recipe reference. {recipe_sharing_recipes.id}"},"quantity":{"type":"integer","format":"int32","description":"Number of servings or repetitions for this entry."},"planned_date":{"type":"string","format":"date-time","description":"The date this recipe is planned for."},"meal_slot":{"type":"string","description":"Designation of meal slot (e.g., breakfast, lunch, dinner)."}},"required":["meal_plan_id","recipe_id","quantity","planned_date","meal_slot"],"description":"Creation information for a new meal plan entry.\n\nIncludes mandatory linkage to a parent meal plan and recipe.\n\nSpecifies quantity, planned date, and meal slot designation."},"IRecipeSharingMealPlanEntry.IUpdate":{"type":"object","properties":{"meal_plan_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"References the associated meal plan. {recipe_sharing_meal_plans.id}"},"recipe_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Assigned recipe reference. {recipe_sharing_recipes.id}"},"quantity":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Number of servings or repetitions for this entry."},"planned_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The date this recipe is planned for."},"meal_slot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Designation of meal slot (e.g., breakfast, lunch, dinner)."}},"required":[],"description":"Update data for modifying a meal plan entry.\n\nFields are optional to allow partial updates and may be null to clear a value.\n\nIncludes references to meal plan, recipe, quantity, planned date, and meal slot."},"IRecipeSharingRecurringMealPlans.IRequest":{"type":"object","description":"Request schema for searching recurring meal plans with filtering, pagination, and sorting options.","properties":{"page":{"type":"integer","format":"int32","description":"Page number of the paginated list."},"limit":{"type":"integer","format":"int32","description":"Number of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword to filter recurring meal plans."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting parameter for the list."},"owner_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the user owning the recurring meal plan. Used to filter by owner."},"recurrence_pattern":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Recurrence schedule pattern such as 'weekly', 'monthly', etc."}},"required":[]},"IRecipeSharingRecurringMealPlan":{"type":"object","description":"Entity representing a recurring meal plan with scheduling, ownership, and metadata.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the recurring meal plan."},"owner_user_id":{"type":"string","format":"uuid","description":"UUID of the user who owns this recurring meal plan."},"name":{"type":"string","description":"Name of the recurring meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing more detail about the meal plan."},"recurrence_pattern":{"type":"string","description":"Recurrence schedule pattern such as 'weekly', 'biweekly', or 'monthly'."},"start_date":{"type":"string","format":"date-time","description":"Start date of the recurrence in ISO 8601 format."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date of the recurrence in ISO 8601 format, or null for indefinite recurrence."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp as ISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp as ISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp as ISO 8601 date-time string or null if active."}},"required":["id","owner_user_id","name","recurrence_pattern","start_date","created_at","updated_at"]},"IRecipeSharingRecurringMealPlan.ICreate":{"type":"object","description":"Request body for creating a new recurring meal plan entity.","properties":{"owner_user_id":{"type":"string","format":"uuid","description":"UUID of the user who owns this recurring meal plan."},"name":{"type":"string","description":"Name of the recurring meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."},"recurrence_pattern":{"type":"string","description":"Recurrence schedule pattern such as 'weekly', 'biweekly', 'monthly'."},"start_date":{"type":"string","format":"date-time","description":"Start date of the recurrence in ISO 8601 format."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date of the recurrence in ISO 8601 format, or null for indefinite recurrence."}},"required":["owner_user_id","name","recurrence_pattern","start_date"]},"IRecipeSharingRecurringMealPlan.IUpdate":{"type":"object","description":"Request body for updating a recurring meal plan entity.","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the recurring meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."},"recurrence_pattern":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Recurrence schedule pattern such as 'weekly', 'biweekly', 'monthly'."},"start_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start date of the recurrence in ISO 8601 format."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date of the recurrence in ISO 8601 format or null for indefinite recurrence."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp as ISO 8601 date-time string or null if active."}},"required":[]},"IRecipeSharingShoppingList.IRequest":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"User ID to filter shopping lists by owner. Optional filter, nullable."},"name":{"type":"string","description":"Name filter for shopping lists. Partial matching allowed. Optional, nullable."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Current page number for pagination. Optional, nullable."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of records per page for pagination. Optional, nullable."},"sort":{"type":"string","description":"Sort criteria, e.g., \"name\", \"created_at\". Optional, nullable."}},"required":[],"description":"Request parameters object for filtering and retrieving shopping lists.\nIncludes optional filtering, pagination, and sorting."},"IRecipeSharingShoppingList":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the shopping list record."},"user_id":{"type":"string","format":"uuid","description":"Owner user ID. Links to the user who owns this shopping list."},"name":{"type":"string","description":"User-defined name for the shopping list.\n\nThis should clearly identify the shopping list for the user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this shopping list was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to this shopping list."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. If null, the shopping list is active."}},"required":["id","user_id","name","created_at","updated_at","deleted_at"],"description":"Detailed shopping list entity representing a user's shopping list including ownership, timestamps, and soft deletion status."},"IRecipeSharingShoppingList.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Owner user ID. Required. Must be a UUID formatted string."},"name":{"type":"string","description":"Name of the shopping list. Required."}},"required":["user_id","name"],"description":"Request body for creating a new shopping list entry.\n\nRequires user_id and name properties."},"IRecipeSharingShoppingList.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Shopping list name. Optional, nullable."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Nullable.\n\nSetting value to a date marks the list as deleted."}},"required":[],"description":"Request body for updating an existing shopping list.\n\nAll properties optional for partial update."},"IRecipeSharingShoppingListItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping list item"},"shopping_list_id":{"type":"string","format":"uuid","description":"UUID of the parent shopping list to which this item belongs"},"ingredient_id":{"type":"string","format":"uuid","description":"UUID of the ingredient being purchased"},"quantity":{"type":"number","format":"double","description":"Quantity of the ingredient to purchase"},"unit":{"type":"string","description":"Measurement unit for the quantity, e.g., grams, cups"},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes such as brand preference or substitution hints"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping list item was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the shopping list item was last updated"}},"required":["id","shopping_list_id","ingredient_id","quantity","unit","created_at","updated_at"],"description":"A shopping list item representing one ingredient to buy including quantity and unit information."},"IRecipeSharingShoppingListItem.ICreate":{"type":"object","properties":{"shopping_list_id":{"type":"string","format":"uuid","description":"UUID of the parent shopping list"},"ingredient_id":{"type":"string","format":"uuid","description":"UUID of the ingredient"},"quantity":{"type":"number","format":"double","description":"Quantity to purchase"},"unit":{"type":"string","description":"Measurement unit"},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes, can be null"}},"required":["shopping_list_id","ingredient_id","quantity","unit"],"description":"Properties required to create a new shopping list item."},"IRecipeSharingShoppingListItem.IUpdate":{"type":"object","properties":{"shopping_list_id":{"type":"string","format":"uuid","description":"UUID of the parent shopping list"},"ingredient_id":{"type":"string","format":"uuid","description":"UUID of the ingredient"},"quantity":{"type":"number","format":"double","description":"Quantity to purchase"},"unit":{"type":"string","description":"Measurement unit"},"notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional notes, can be null"}},"required":[],"description":"Properties allowed to update for a shopping list item."},"IRecipeSharingGroceryStore.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":1000},{"type":"null"}],"description":"Maximum number of items per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Text to search grocery store names or other searchable fields."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order of the results, e.g. name|asc, created_at|desc."}},"required":[],"description":"Request type for searching grocery stores with pagination, filtering, and sorting."},"IRecipeSharingGroceryStore":{"type":"object","properties":{"id":{"type":"string","description":"Primary Key.\n\nUnique identifier for the grocery store."},"name":{"type":"string","description":"Store name.\n\nThe official name of the grocery store."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Physical address of the grocery store.\n\nOptional detailed address for the grocery store location."},"phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number for the store.\n\nOptional phone number to reach the store."},"website_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Store website URL.\n\nOptional URL to the store's website."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nISO 8601 date-time of when the store record was created."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nISO 8601 date-time of last modification of the store record."}},"required":["id","name","created_at","updated_at"],"description":"Grocery store entity representing stores where ingredient prices and availability are tracked.\n\nThis entity includes essential contact and identification information to support the shopping list and cost tracking features.\n\nTimestamps document creation and last update times for auditing and data integrity."},"IRecipeSharingGroceryStore.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Store name.\n\nThe official name of the grocery store."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Physical address of the grocery store.\n\nOptional detailed address for the grocery store location."},"phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number for the store.\n\nOptional phone number to reach the store."},"website_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Store website URL.\n\nOptional URL to the store's website."}},"required":["name"],"description":"Request body to create a new grocery store.\n\nIncludes necessary identification and optional contact details for record creation."},"IRecipeSharingGroceryStore.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Store name.\n\nThe official name of the grocery store."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Physical address of the grocery store.\n\nOptional detailed address for the grocery store location."},"phone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact phone number for the store.\n\nOptional phone number to reach the store."},"website_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Store website URL.\n\nOptional URL to the store's website."}},"required":[],"description":"Request body to update an existing grocery store.\n\nAllows modification of identification and contact details, with all fields optional."},"IRecipeSharingStoreIngredientPrice.IRequest":{"type":"object","properties":{"grocery_store_id":{"oneOf":[{"type":"string","description":"Filter by grocery store ID.\n\nOptional filter to return prices only for a specific grocery store."},{"type":"null"}],"description":"Filter by grocery store ID.\n\nOptional filter to return prices only for a specific grocery store."},"ingredient_id":{"oneOf":[{"type":"string","description":"Filter by ingredient ID.\n\nOptional filter to return prices only for a specific ingredient."},{"type":"null"}],"description":"Filter by ingredient ID.\n\nOptional filter to return prices only for a specific ingredient."},"available":{"oneOf":[{"type":"boolean","description":"Filter by availability status.\n\nOptional boolean filter to return only available or unavailable prices."},{"type":"null"}],"description":"Filter by availability status.\n\nOptional boolean filter to return only available or unavailable prices."},"min_price":{"oneOf":[{"type":"number","description":"Minimum price filter.\n\nOptional filter to return prices greater than or equal to this value."},{"type":"null"}],"description":"Minimum price filter.\n\nOptional filter to return prices greater than or equal to this value."},"max_price":{"oneOf":[{"type":"number","description":"Maximum price filter.\n\nOptional filter to return prices less than or equal to this value."},{"type":"null"}],"description":"Maximum price filter.\n\nOptional filter to return prices less than or equal to this value."},"price_sort":{"oneOf":[{"const":"asc","description":"Sort order for prices.\n\nOptional sorting of results: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort order for prices.\n\nOptional sorting of results: 'asc' for ascending, 'desc' for descending."},{"type":"null"}],"description":"Sort order for prices.\n\nOptional sorting of results: 'asc' for ascending, 'desc' for descending."},"page":{"oneOf":[{"type":"number","description":"Pagination page number.\n\nOptional page number starting at 1."},{"type":"null"}],"description":"Pagination page number.\n\nOptional page number starting at 1."},"limit":{"oneOf":[{"type":"number","description":"Pagination page size.\n\nOptional number of records per page."},{"type":"null"}],"description":"Pagination page size.\n\nOptional number of records per page."}},"required":[],"description":"Request parameters for filtering, sorting, and paginating store ingredient prices.\n\nSupports optional filters such as grocery store, ingredient, availability, price range, sorting options, and pagination."},"IRecipeSharingStoreIngredientPrice":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nRepresents the unique identifier for the store ingredient price record."},"grocery_store_id":{"type":"string","format":"uuid","description":"Referenced grocery store. Links to recipe_sharing_grocery_stores.id"},"ingredient_id":{"type":"string","format":"uuid","description":"Referenced ingredient. Links to recipe_sharing_ingredients.id"},"price":{"type":"number","description":"Price of ingredient at the store in local currency.\n\nRepresents current retail price used for cost estimation."},"available":{"type":"boolean","description":"Availability status of the ingredient at the store.\n\nTrue if ingredient is currently available; false otherwise."},"last_updated":{"type":"string","format":"date-time","description":"Timestamp of last price and availability update.\n\nISO 8601 date-time format expected."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nISO 8601 date-time format."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nISO 8601 date-time format."}},"required":["id","grocery_store_id","ingredient_id","price","available","last_updated","created_at","updated_at"],"description":"Store ingredient price entity represents the price and availability of an ingredient at a specific grocery store. Contains current pricing, availability status, and audit timestamps.\n\nThe entity links an ingredient to a grocery store along with real-time pricing and availability updates, supporting shopping list cost estimations and store comparisons.\n\nAll properties are mandatory, ensuring complete records for accurate cost tracking.\n\nRelated to grocery store and ingredient entities."},"IRecipeSharingStoreIngredientPrice.ICreate":{"type":"object","properties":{"grocery_store_id":{"type":"string","format":"uuid","description":"Referenced grocery store ID where price applies."},"ingredient_id":{"type":"string","format":"uuid","description":"Referenced ingredient ID whose price is tracked."},"price":{"type":"number","description":"Current price of the ingredient at the store."},"available":{"type":"boolean","description":"Whether the ingredient is available at the store."},"last_updated":{"type":"string","format":"date-time","description":"The datetime when the price/availability was last updated."}},"required":["grocery_store_id","ingredient_id","price","available","last_updated"],"description":"Request to create a new store ingredient price record, specifying the grocery store and ingredient, price, availability, and last update timestamp."},"IRecipeSharingStoreIngredientPrice.IUpdate":{"type":"object","properties":{"grocery_store_id":{"type":"string","format":"uuid","description":"Updated grocery store ID."},"ingredient_id":{"type":"string","format":"uuid","description":"Updated ingredient ID."},"price":{"type":"number","description":"Updated price for the ingredient."},"available":{"type":"boolean","description":"Updated availability status."},"last_updated":{"type":"string","format":"date-time","description":"Updated last updated timestamp."}},"required":[],"description":"Request to update fields of an existing store ingredient price entry. All fields are optional and can be updated individually."},"IRecipeSharingRecipeCategoriesConfig":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifier of the recipe category configuration.\n\nUnique string ID in UUID format to identify the recipe category."},"code":{"type":"string","description":"Unique code identifier for the recipe category.\n\nShort string code that uniquely identifies this category configuration."},"name":{"type":"string","description":"Human-readable name of the recipe category.\n\nDescriptive name for display and user selection."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the recipe category.\n\nAdditional information describing the category, can be null."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp.\n\nISO 8601 date-time UTC string indicating when the category configuration entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp.\n\nISO 8601 date-time UTC string indicating when the entry was last updated."}},"required":["id","code","name","created_at","updated_at"],"description":"Represents predefined recipe category configurations used for tagging and classification in the recipe sharing platform. Enables structured cuisine-type categorization such as Italian, Mexican, Asian, and supports hierarchical grouping for easy management and user selection.\n\n\n@namespace SystematicConfig\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IRecipeSharingRecipeCategoriesConfig.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Filter by code (optional)"},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by name (optional)"},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination page number (1-based)"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination page size"},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort by field name, e.g., 'name', 'created_at' (optional)"},"direction":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc' (optional)"},{"const":"desc","description":"Sort direction: 'asc' or 'desc' (optional)"}],"description":"Sort direction: 'asc' or 'desc' (optional)"}},"description":"Request type for filtering recipe categories with pagination.","required":[]},"IRecipeSharingRecipeCategoriesConfig.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key ID of the recipe category configuration."},"code":{"type":"string","description":"Unique code identifier for the category."},"name":{"type":"string","description":"Human-readable name of the category."}},"required":["id","code","name"],"description":"Summary details for a recipe category configuration\n\nIncludes ID, code, and display name."},"IRecipeSharingRecipeCategoriesConfig.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for the recipe category.\n\nRequired."},"name":{"type":"string","description":"Human-readable name of the recipe category.\n\nRequired."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the recipe category.\n\nNullable."}},"required":["code","name"],"description":"Data required to create a recipe category configuration record. Includes code, name, and optional description.\n\n@namespace SystematicConfig\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IRecipeSharingRecipeCategoriesConfig.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for the recipe category.\n\nRequired."},"name":{"type":"string","description":"Human-readable name of the recipe category.\n\nRequired."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the recipe category.\n\nNullable."}},"required":["code","name"],"description":"Data required to update a recipe category configuration record. Includes code, name, and optional description.\n\n@namespace SystematicConfig\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IRecipeSharingDietCategories.IRequest":{"type":"object","properties":{"code":{"type":"string","description":"Optional filter by code to search specific diet categories."},"name":{"type":"string","description":"Optional filter by name to search diet categories by name."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination.\n\nOptional, default 1."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of items per page.\n\nOptional, default 100."},"orderBy":{"type":"string","description":"Field name to order results by.\n\nFor example, 'name' or 'code'."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: ascending or descending.\n\nPossible values: 'asc', 'desc'."}},"required":[],"description":"Filtering and pagination parameters for requesting diet categories.\n\n@namespace SystematicConfig\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"IRecipeSharingDietCategories":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the diet category."},"code":{"type":"string","description":"Unique code for the diet category."},"name":{"type":"string","description":"Name of the diet category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing details about the diet category."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","code","name","created_at","updated_at"],"description":"Represents dietary preference categories such as vegan, keto, gluten-free, and paleo. This table supports classification of recipes and user dietary preferences for filtering and substitution prioritization.\n\n@namespace SystematicConfig\n@see Prisma model recipe_sharing_diet_categories\n"},"IRecipeSharingDietCategory.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for the diet category."},"name":{"type":"string","description":"Name of the diet category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing details about the diet category."}},"required":["code","name"],"description":"Create a new diet category.\n\nAllows specifying a unique code and user-friendly name,\noptionally including a description.\n\nUsed to classify recipes and filter by dietary preferences.\n\n@namespace SystematicConfig\n@see Prisma model recipe_sharing_diet_categories\n"},"IRecipeSharingDietCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key of the diet category."},"code":{"type":"string","description":"Unique code for the diet category."},"name":{"type":"string","description":"Name of the diet category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing details about the diet category."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."}},"required":["id","code","name","created_at","updated_at"],"description":"Represents dietary preference categories such as vegan, keto, gluten-free, and paleo. This table supports classification of recipes and user dietary preferences for filtering and substitution prioritization.\n\n@namespace SystematicConfig\n@see Prisma model recipe_sharing_diet_categories\n"},"IRecipeSharingDietCategory.IUpdate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for the diet category."},"name":{"type":"string","description":"Name of the diet category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing details about the diet category."}},"required":[],"description":"Update an existing diet category.\n\nModify code, name, or description with validation.\n\n@namespace SystematicConfig\n@see Prisma model recipe_sharing_diet_categories\n"},"IRecipeSharingDifficultyLevel.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search string to filter difficulty levels."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number (zero-based) for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Number of records per page for pagination."},"sort":{"oneOf":[{"const":"name"},{"const":"created_at"},{"const":"code"},{"type":"null"}],"description":"Sort field for ordering results."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction."}},"required":[],"description":"Request interface for filtered and paginated listing of difficulty levels supporting optional search, pagination, and sorting."},"IRecipeSharingDifficultyLevels":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the difficulty level.\n\nUniquely identifies each difficulty level."},"code":{"type":"string","description":"Unique code of the difficulty level.\n\nUnique code identifier for internal use."},"name":{"type":"string","description":"Name of the difficulty level.\n\nHuman-readable name of the difficulty level."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the difficulty level.\n\nProvides detailed information about the difficulty."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp.\n\nISO 8601 date-time string indicating when this record was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp.\n\nISO 8601 date-time string indicating when this record was last updated."}},"required":["id","code","name","created_at","updated_at"],"description":"Main difficulty level entity type."},"IRecipeSharingDifficultyLevels.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code for the difficulty level.\n\nRequired, unique."},"name":{"type":"string","description":"Name of the difficulty level.\n\nRequired."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description."}},"required":["code","name"],"description":"Request type for creation of new difficulty level."},"IRecipeSharingDifficultyLevels.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique code for the difficulty level.\n\nOptional for update."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the difficulty level.\n\nOptional for update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description."}},"required":[],"description":"Request type for updating an existing difficulty level.\n\nAll fields are optional."},"IRecipeSharingUnits":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the unit.\n\nSystem-generated UUID in string format."},"code":{"type":"string","description":"Unique unit code, e.g., 'cups' or 'g'.\n\nHuman-readable identifier used in ingredient measurements."},"name":{"type":"string","description":"Full descriptive name of the unit.\n\nExample: \"cups\", \"grams\"."},"abbreviation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional abbreviated symbol for the unit.\n\nExample: \"cup\", \"g\"."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the unit record was created.\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update of the unit record.\nISO 8601 date-time string."}},"required":["id","code","name","created_at","updated_at"],"description":"Measurement unit entity representing standardized units used in ingredient quantities within recipes.\n\nThis entity ensures consistent labeling and quantification of recipe ingredients across the platform.\n\nIncludes unique identifiers, code names, human-readable names, optional abbreviations, and audit timestamps."},"IRecipeSharingUnits.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Page number for paginated results.\n\nOptional; defaults may apply at runtime."},"limit":{"oneOf":[{"type":"integer","format":"int32"},{"type":"null"}],"description":"Items per page limit for pagination.\n\nOptional; typical default is 100."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by unit code.\n\nOptional; supports partial matching."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by unit name.\n\nOptional; supports partial matching."},"abbreviation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by abbreviation.\n\nOptional; supports partial matching."}},"required":[],"description":"Request type for retrieving paginated lists of measurement units, including filters and pagination parameters."},"IRecipeSharingUnits.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique unit code, e.g., 'cups' or 'g'.\n\nRequired for creation."},"name":{"type":"string","description":"Full descriptive name of the unit.\n\nRequired for creation."},"abbreviation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional abbreviated symbol for the unit.\n\nNullable."}},"required":["code","name"],"description":"Creation request type for adding a new measurement unit. Requires unit code and name."},"IRecipeSharingUnits.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Code of the measurement unit.\n\nOptional for updates."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Full name of the unit.\n\nOptional for updates."},"abbreviation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Abbreviation for the unit.\n\nOptional and nullable."}},"required":[],"description":"Update request type for modifying existing measurement unit details with optional fields."},"IRecipeSharingSystemConfig.IRequest":{"type":"object","properties":{"key":{"type":"string","description":"Filter by configuration key. Allows searching of configuration keys by substring or exact match.\n\nThis property is optional and can be null if not used in filter."},"value":{"type":"string","description":"Filter by configuration value. Allows searching of configuration values.\n\nThis property is optional and can be null if not used in filter."},"page":{"description":"Current page number.\n\nThis is the pagination page requested. Must be a non-negative integer.\n\nOptional and can be null, defaulting to system default.","type":"integer","format":"int32"},"limit":{"description":"Number of records per page.\n\nThis limits how many records are returned per request.\n\nOptional and can be null, defaulting to system default.","type":"integer","format":"int32"},"order_by":{"type":"string","description":"Sorting criteria.\n\nUse string format to define sorting (e.g., 'key asc').\n\nOptional and can be null."}},"required":[],"description":"Request parameters to filter, sort, and paginate system configurations."},"IRecipeSharingSystemConfig":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier (UUID) for the system configuration entry."},"key":{"type":"string","description":"Configuration key uniquely identifying the setting."},"value":{"type":"string","description":"Value associated with the configuration key."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing further context about the configuration."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the configuration record was last updated."}},"required":["id","key","value","created_at","updated_at"],"description":"A system configuration entry representing key-value pairs used for global application settings.\n\nThis entity is essential for managing runtime configuration parameters and application flags.\n\nIt comprises a unique identifier, key, value, optional description, and audit timestamps."},"IRecipeSharingSystemConfig.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Unique key used to identify the configuration."},"value":{"type":"string","description":"String value for the configuration."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"An optional description explaining the configuration entry."}},"required":["key","value"],"description":"Request body for creating a new system configuration entry.\n\nIncludes the configuration key, value, and optional descriptive text."},"IRecipeSharingSystemConfig.IUpdate":{"type":"object","properties":{"key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated key of the configuration entry.\n\nOptional and can be null."},"value":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated value of the configuration entry.\n\nOptional and can be null."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated description of the configuration entry.\n\nOptional and can be null."}},"required":[],"description":"Request body for updating an existing system configuration entry.\n\nAll fields are optional and may be null to clear values."},"IRecipeSharingFlagQueues.IRequest":{"type":"object","properties":{"recipe_sharing_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by flagged review UUID. Nullable."},"reported_by_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by reporting user UUID. Nullable."},"flag_reason":{"description":"Filter by reason for the flag. Must match one of the enum values.","type":"string"},"status":{"description":"Filter by status of the flag. Must match one of the enum values.","type":"string"},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination. Optional."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit of entries per page. Optional."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to order by. Optional."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Direction of ordering: asc or desc. Optional."},"flagsSearchTerm":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full-text search term on flag reasons."},"usersSearchTerm":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full-text search term on user identifiers."},"statusSearchTerm":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full-text search term on statuses."},"createdFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags created after this datetime. Optional."},"createdTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags created before this datetime. Optional."},"updatedFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags updated after this datetime. Optional."},"updatedTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags updated before this datetime. Optional."},"deletedFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags deleted after this datetime. Optional."},"deletedTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter for flags deleted before this datetime. Optional."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by creation timestamp. Optional."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter by update timestamp. Optional."},"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the flag queue entry."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp or null if active."},"idSearchTerm":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional full-text search term on IDs."}},"required":[],"description":"Request body containing filters, pagination, and sorting options for flag queue search."},"IRecipeSharingFlagQueues":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the flag queue entry."},"recipe_sharing_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the flagged review, if applicable."},"reported_by_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the user who reported the flag."},"flag_reason":{"type":"string","description":"Reason for flagging the review, e.g., spam, offensive language."},"status":{"type":"string","description":"Current status of the flag."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the flag was soft deleted, if applicable."}},"required":["id","reported_by_user_id","flag_reason","status","created_at","updated_at"],"description":"Represents a flag queue entry referenced in moderation workflows."},"IRecipeSharingFlagQueue.ICreate":{"type":"object","properties":{"recipe_sharing_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the flagged review. Nullable if not specified."},"reported_by_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the user reporting the flag."},"flag_reason":{"type":"string","description":"Reason for flagging the review."},"status":{"type":"string","description":"Current status of the flag upon creation."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag is created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the flag entry is last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp. Nullable."}},"required":["reported_by_user_id","flag_reason","status","created_at","updated_at"],"description":"Properties required to create a new flag queue entry."},"IRecipeSharingFlagQueue":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the flag queue entry."},"recipe_sharing_review_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Unique identifier of the flagged review, if applicable."},"reported_by_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the user who reported the flag."},"flag_reason":{"type":"string","description":"Reason for flagging the review."},"status":{"type":"string","description":"Current status of the flag."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the flag was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the flag was soft deleted, if applicable."}},"required":["id","reported_by_user_id","flag_reason","status","created_at","updated_at"],"description":"Represents a flag queue entry referenced in moderation workflows."},"IRecipeSharingFlagQueue.IUpdate":{"type":"object","properties":{"recipe_sharing_review_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The flagged review's identifier. {@link recipe_sharing_reviews.id}"},"reported_by_user_id":{"type":"string","description":"Identifier of the user who reported the content. {@link recipe_sharing_regularusers.id} or {@link recipe_sharing_premiumusers.id}"},"flag_reason":{"type":"string","description":"Reason for flagging such as spam, offensive language, or personal attacks."},"status":{"type":"string","description":"Current review flag status: pending, in_review, resolved, or dismissed."},"created_at":{"type":"string","format":"date-time","description":"Flag creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the flag record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if the flag entry is removed."}},"required":[],"description":"Allows updating the properties of an existing flag queue entry.\n\nUsers can modify related review ID, flag reason, status and timestamps as needed.\n\nThis supports accurate flag reporting and moderation workflows.\n\nProper authentication and authorization checks must be in place to restrict modifications to authorized users.\n\nAll updated properties are optional, allowing partial updates."},"IRecipeSharingFlagQueue.IRequest":{"type":"object","properties":{"recipe_sharing_review_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The flagged review's identifier. {@link recipe_sharing_reviews.id}"},"reported_by_user_id":{"type":"string","description":"Identifier of the user who reported the content. {@link recipe_sharing_regularusers.id} or {@link recipe_sharing_premiumusers.id}"},"flag_reason":{"type":"string","description":"Reason for flagging such as spam, offensive language, or personal attacks."},"status":{"type":"string","description":"Current review flag status: pending, in_review, resolved, or dismissed."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Earliest creation timestamp filter."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Latest creation timestamp filter."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Earliest updated timestamp filter."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Latest updated timestamp filter."},"deleted_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Earliest deleted timestamp filter for soft deleted entries."},"deleted_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Latest deleted timestamp filter for soft deleted entries."},"page":{"type":"integer","format":"int32","minimum":1,"description":"Page number for pagination"},"limit":{"type":"integer","format":"int32","minimum":1,"description":"Number of records per page"},"sort":{"type":"string","description":"Sorting options (e.g., created_at desc)"}},"required":[],"description":"Request parameters for searching and filtering flag queue entries.\n\nSupports filtering by associated review ID, reporting user ID, flag reasons, status, and date range filters.\n\nIncludes pagination and sorting controls for efficient data navigation.\n\nUsed by moderation tools for retrieving flag queue lists."},"IRecipeSharingModeratorActions":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"moderator_id":{"type":"string","format":"uuid","description":"Identifier of moderator performing the action. {@link recipe_sharing_moderators.id}"},"action_type":{"type":"string","description":"The moderation action type such as hide_review, unhide_review, approve_category, reject_category."},"target_id":{"type":"string","format":"uuid","description":"ID of the entity affected by the moderator action (review, category approval, etc.)."},"action_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was logged."},"comments":{"oneOf":[{"type":"string","description":"Optional comment explaining the moderation decision."},{"type":"null"}],"description":"Optional comment explaining the moderation decision."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time if the record is removed."}},"required":["id","moderator_id","action_type","target_id","action_timestamp","created_at","updated_at"],"description":"Audit trail logging all moderation actions taken on flagged reviews, including hides, unhides, moderator identity, timestamp, and comments.\nEssential for compliance and transparency."},"IRecipeSharingModeratorActions.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Identifier of moderator performing the action. {@link recipe_sharing_moderators.id}"},"action_type":{"type":"string","description":"The moderation action type such as hide_review, unhide_review, approve_category, reject_category."},"target_id":{"type":"string","format":"uuid","description":"ID of the entity affected by the moderator action (review, category approval, etc.)."},"action_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was logged."},"comments":{"oneOf":[{"type":"string","description":"Optional comment explaining the moderation decision."},{"type":"null"}],"description":"Optional comment explaining the moderation decision."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time if the record is removed."}},"required":["moderator_id","action_type","target_id","action_timestamp"],"description":"Audit records of moderator operations on flagged content and category approvals. Each action records moderator identity, action type, target entity, timestamp, and optional comments to maintain accountability and history."},"IRecipeSharingModeratorActions.IUpdate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Identifier of moderator performing the action. {@link recipe_sharing_moderators.id}"},"action_type":{"type":"string","description":"The moderation action type such as hide_review, unhide_review, approve_category, reject_category."},"target_id":{"type":"string","format":"uuid","description":"ID of the entity affected by the moderator action (review, category approval, etc.)"},"action_timestamp":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was logged."},"comments":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment explaining the moderation decision."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time if the record is removed."}},"required":[],"description":"Update a moderator action by its ID.\n\nAllows modification of action details and comments while preserving audit compliance.\n\nOnly authorized moderators can perform updates.\n\nThe system manages timestamps for creation and updates.\n\nThe response provides the updated moderator action object.\n\nErrors occur if the ID is invalid or update data fails validation."},"IRecipeSharingCategoryApprovals.IRequest":{"type":"object","properties":{"id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Primary Key."},"submitted_by_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The user who submitted the category or tag. {@link recipe_sharing_regularusers.id} or {@link recipe_sharing_premiumusers.id}"},"category_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Name of the category or tag submitted by the user for approval."},"approval_status":{"oneOf":[{"const":"pending"},{"const":"approved"},{"const":"rejected"},{"type":"null"}],"description":"Approval status of the submitted category: pending, approved, rejected."},"submitted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the submission was created."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the category submission was reviewed by a moderator."},"created_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record creation time."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Record update time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time if record was removed."}},"required":[],"description":"Retrieves a list of category approval submissions made by users that are awaiting moderator approval or have been reviewed. This operation supports filtering by category name, approval status (pending, approved, rejected), and submission or review dates, allowing moderators or administrative users to manage category approvals efficiently.\n\nSecurity is enforced by requiring moderator roles to access this data due to its sensitive nature involving user-generated content and moderation processes.\n\nThis operation corresponds to the recipe_sharing_category_approvals table in the database schema, which stores user-submitted categories or tags pending approval, including submission timestamps and review status.\n\nThe API supports comprehensive pagination and sorting to handle potentially large numbers of submissions. Errors returned will inform on invalid parameters or authorization issues."},"IRecipeSharingCategoryApprovals":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"submitted_by_user_id":{"type":"string","format":"uuid","description":"The user who submitted the category or tag. {@link recipe_sharing_regularusers.id} or {@link recipe_sharing_premiumusers.id}"},"category_name":{"type":"string","description":"Name of the category or tag submitted by the user for approval."},"approval_status":{"oneOf":[{"const":"pending","description":"Approval status of the submitted category: pending, approved, rejected."},{"const":"approved","description":"Approval status of the submitted category: pending, approved, rejected."},{"const":"rejected","description":"Approval status of the submitted category: pending, approved, rejected."}],"description":"Approval status of the submitted category: pending, approved, rejected."},"submitted_at":{"type":"string","format":"date-time","description":"Timestamp when the submission was created."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the category submission was reviewed by a moderator."},"created_at":{"type":"string","format":"date-time","description":"Record creation time."},"updated_at":{"type":"string","format":"date-time","description":"Record update time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time if record was removed."}},"required":["id","submitted_by_user_id","category_name","approval_status","submitted_at","created_at","updated_at"],"description":"This entity represents user-submitted categories or tags pending moderator approval.\n\nIncludes submitting user reference, category name, approval status, timestamps for submission and review, and auditing fields.\n\nUsed for content moderation workflows and user-generated content management.\n\nCritical for maintaining controlled vocabularies and quality control.\n\nFields encompass relationship links and state fields with timestamps for lifecycle tracking."},"IRecipeSharingCategoryApprovals.ICreate":{"type":"object","properties":{"submitted_by_user_id":{"type":"string","format":"uuid","description":"The user who submitted the category or tag. {@link recipe_sharing_regularusers.id} or {@link recipe_sharing_premiumusers.id}"},"tag_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced approved tag {@link recipe_sharing_tags.id}."},"suggested_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Suggested tag name by user."},"status":{"type":"string","description":"Moderation status (pending, approved, rejected)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if active."}},"required":["submitted_by_user_id","status","created_at","updated_at"],"description":"Create a new user tag suggestion for recipes.\n\nThis operation stores user-submitted tags pending moderator approval.\n\nIncludes submitting user ID, optional linked tag ID, suggested name, status, and audit timestamps.\n\nUsed to capture user-driven tag suggestions for content moderation workflows."},"IRecipeSharingCategoryApprovals.IUpdate":{"type":"object","properties":{"category_name":{"type":"string","description":"The user-submitted category or tag name to be reviewed or edited. Multiple words allowed."},"approval_status":{"oneOf":[{"const":"pending","description":"Approval state for category submission: pending, approved, or rejected."},{"const":"approved","description":"Approval state for category submission: pending, approved, or rejected."},{"const":"rejected","description":"Approval state for category submission: pending, approved, or rejected."}],"description":"Approval state for category submission: pending, approved, or rejected."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date and time when the submission was reviewed by the moderator. Nullable if not reviewed yet."}},"required":[],"description":"Properties used to update an existing category approval record.\n\nThis object contains the modifiable fields during moderation or user update processes.\n\nApproval status is a strict enumerated value enforcing the moderation workflow requirements.\n\nDate-time values follow standard ISO 8601 format."},"IRecipeSharingRegularUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the regular user."},"email":{"type":"string","description":"User's email address used for communication and login."},"username":{"type":"string","description":"User's platform username, unique across the system."}},"required":["id","email","username"],"description":"Summary information of a regular user including unique ID, email, and username.\n\nUsed for listing users in summaries or search results."},"IRecipeSharingModerator.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator user."},"email":{"type":"string","description":"Moderator's email address used for communication and login."},"username":{"type":"string","description":"Moderator's username unique within the moderation system."}},"required":["id","email","username"],"description":"Summary view of a moderator user including unique identifier, email, and username.\n\nUsed for management and administrative UI listings."},"IRecipeSharingRecipes.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the recipe."},"title":{"type":"string","description":"Title of the recipe for display and identification."},"status":{"type":"string","description":"Current workflow status of the recipe (draft, published, etc.)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the recipe was created."}},"required":["id","title","status","created_at"],"description":"Summary information for a recipe including ID, title, status, and creation date.\n\nUsed in recipe lists and search results where full details are not required."},"IRecipeSharingIngredient.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the ingredient."},"name":{"type":"string","description":"Name of the ingredient."},"brand":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional brand information."}},"required":["id","name"],"description":"Simplified summary of an ingredient suitable\nfor list views or brief displays."},"IRecipeSharingIngredientSubstitution.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier."},"ingredient_id":{"type":"string","format":"uuid","description":"Original ingredient ID."},"substitute_ingredient_id":{"type":"string","format":"uuid","description":"Substitute ingredient ID."},"conversion_ratio":{"type":"number","format":"double","description":"Conversion ratio."},"status":{"type":"string","description":"Moderation status, e.g., 'pending', 'approved', 'rejected'."}},"required":["id","ingredient_id","substitute_ingredient_id","conversion_ratio","status"],"description":"Summary view of ingredient substitution.\nIncludes essential fields for listing."},"IRecipeSharingNutritionFact.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the nutrition fact entry."},"ingredient_id":{"type":"string","format":"uuid","description":"Ingredient ID this nutrition fact relates to."},"calories":{"type":"number","format":"double","description":"Calories per serving or unit, double precision."},"protein":{"type":"number","format":"double","description":"Protein content in grams."},"carbohydrates":{"type":"number","format":"double","description":"Carbohydrates amount in grams."},"fat":{"type":"number","format":"double","description":"Fat amount in grams."},"fiber":{"type":"number","format":"double","description":"Fiber content in grams."},"sodium":{"type":"number","format":"double","description":"Sodium content in milligrams."},"sugar":{"type":"number","format":"double","description":"Sugar content in grams."},"vitamin_a":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin A amount in micrograms, nullable."},"vitamin_c":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin C amount in milligrams, nullable."},"vitamin_d":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Vitamin D amount in micrograms, nullable."},"iron":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Iron amount in milligrams, nullable."},"calcium":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Calcium amount in milligrams, nullable."}},"required":["id","ingredient_id","calories","protein","carbohydrates","fat","fiber","sodium","sugar"],"description":"Summary view with essential nutritional values."},"IRecipeSharingRecipeCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the recipe category."},"category_type":{"type":"string","description":"The type of category, e.g., cuisine, diet, difficulty."},"name":{"type":"string","description":"Name of the category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the category."}},"required":["id","category_type","name"],"description":"Summary variant for list displays."},"IRecipeSharingTags.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the tag."},"name":{"type":"string","description":"Name of the tag.\n\nUnique across all tags."}},"required":["id","name"],"description":"Summary of a recipe tag, including unique identifier and name."},"IRecipeSharingIngredientSearchTerms":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier of the ingredient search term."},"ingredient_id":{"type":"string","description":"ID of the linked ingredient."},"search_term":{"type":"string","description":"Search term variant for ingredient."}},"required":["id","ingredient_id","search_term"],"description":"Ingredient search term variant supporting partial and fuzzy matching."},"IRecipeSharingUserFollower.ISummary":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier for the user follower relationship."},"follower_user_id":{"type":"string","description":"ID of the follower user."},"followee_user_id":{"type":"string","description":"ID of the followee user."}},"required":["id","follower_user_id","followee_user_id"],"description":"Summary of a user follower relationship, including follower and followee IDs."},"IRecipeSharingPersonalizedFeed.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the personalized feed entry"},"recipe_id":{"type":"string","format":"uuid","description":"ID of the recipe shown in the personalized feed"},"originator_user_id":{"type":"string","format":"uuid","description":"ID of the user who created the recipe shown in the feed"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the feed entry was created"}},"required":["id","recipe_id","originator_user_id","created_at"],"description":"Summary information of a personalized feed entry containing essential identifiers and creation timestamp."},"IRecipeSharingReview.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the review"},"review_text":{"type":"string","description":"Excerpt of the review text"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the review was created"}},"required":["id","review_text","created_at"],"description":"Summary information of a recipe sharing review with essential display fields and creation timestamp."},"IRecipeSharingModerationLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the moderation log entry"},"recipe_sharing_review_id":{"type":"string","format":"uuid","description":"ID of the review that was moderated"},"recipe_sharing_moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator who performed the action"},"action":{"type":"string","description":"The moderation action taken (e.g., hide, unhide)"},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment explaining the moderation decision"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was logged"}},"required":["id","recipe_sharing_review_id","recipe_sharing_moderator_id","action","created_at"],"description":"Audit trail entry logging a moderation action taken on a flagged review, including moderator identity, action type, comments, and timestamp."},"IRecipeSharingCollections.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the collection"},"name":{"type":"string","description":"Name of the collection"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the collection was created"}},"required":["id","name","created_at"],"description":"Summary information of a user-created recipe collection including identifiers and creation timestamp."},"IRecipeSharingMealPlans.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the meal plan."},"name":{"type":"string","description":"Human-readable name of the meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the meal plan."}},"required":["id","name","description"],"description":"Summary type contains minimal fields suitable for list views.\n\nIncludes id, name, and optional description for concise display."},"IRecipeSharingRecurringMealPlans":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the recurring meal plan."},"owner_user_id":{"type":"string","format":"uuid","description":"Owner user identifier (UUID)."},"name":{"type":"string","description":"Name of the recurring meal plan."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional textual description."},"recurrence_pattern":{"type":"string","description":"Recurrence pattern string (e.g., 'weekly', 'biweekly')."},"start_date":{"type":"string","format":"date-time","description":"Start date of the recurrence."},"end_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional end date of the recurrence."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft deletion timestamp."}},"required":["id","owner_user_id","name","recurrence_pattern","start_date","created_at","updated_at"],"description":"Represents a user's recurring meal plan with details on name, recurrence, dates, and audit info."},"IRecipeSharingShoppingList.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping list."},"name":{"type":"string","description":"Name of the shopping list."}},"required":["id","name"],"description":"Summary type containing minimal fields used in lists."},"IRecipeSharingShoppingListItem.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the shopping list item.\n\nUnique identifier for the shopping list item to track it in the system."},"ingredient_id":{"type":"string","format":"uuid","description":"Unique identifier of the linked ingredient."},"quantity":{"type":"number","description":"Amount of the ingredient to purchase, expressed as a floating-point number."},"unit":{"type":"string","description":"Unit of measurement for the quantity, e.g., grams, cups."}},"required":["id","ingredient_id","quantity","unit"],"description":"Summary type for a shopping list item.\n\nIncludes essential information for list displays without detailed nested properties."},"IRecipeSharingGroceryStore.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the grocery store.\n\nThis ID is used to reference the store in other entities."},"name":{"type":"string","description":"Store name.\n\nThe name of the grocery store used for display and searches."}},"required":["id","name"],"description":"Summary view of a grocery store.\n\nIncludes only the store's unique identifier and name for listing and reference purposes."},"IRecipeSharingStoreIngredientPrice.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the store ingredient price record in the system."},"grocery_store_id":{"type":"string","format":"uuid","description":"Reference to the grocery store entity where this price applies."},"ingredient_id":{"type":"string","format":"uuid","description":"Reference to the ingredient for which this price is set."},"price":{"type":"number","description":"Price of the ingredient at the store in local currency units."},"available":{"type":"boolean","description":"Availability status indicating if the ingredient is currently in stock."},"last_updated":{"type":"string","format":"date-time","description":"Timestamp indicating the last time price or availability information was updated"}},"required":["id","grocery_store_id","ingredient_id","price","available","last_updated"],"description":"Summary information for ingredient prices at grocery stores.\n\nIncludes pricing, availability, and timestamps necessary for cost calculations and shopping list generation."},"IRecipeSharingDietCategories.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the diet category."},"code":{"type":"string","description":"Short code representing the diet category, used for filtering and classification."},"name":{"type":"string","description":"Human-readable name of the diet category suitable for presentation."}},"required":["id","code","name"],"description":"Summary type for diet category entity."},"IRecipeSharingDifficultyLevel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the difficulty level."},"code":{"type":"string","description":"Unique difficulty level code used internally."},"name":{"type":"string","description":"Descriptive name of the difficulty level."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description explaining the difficulty."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the difficulty level entry was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the difficulty level entry was last updated."}},"required":["id","code","name","created_at","updated_at"],"description":"Difficulty Level entity representing classification of recipe complexity.\n\nThis entity categorizes recipes by user skill level required, from beginner to advanced.\nIt facilitates filtering and guidance in meal planning and recipe selection."},"IRecipeSharingDifficultyLevel.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the difficulty level summary."},"code":{"type":"string","description":"Unique code representing the difficulty level."},"name":{"type":"string","description":"Human-readable name of the difficulty level."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description providing additional information about the difficulty level summary."}},"required":["id","code","name"],"description":"Summary type for listing difficulty levels including core identification and display properties."},"IRecipeSharingDifficultyLevel.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for creating the difficulty level."},"name":{"type":"string","description":"Name of the difficulty level for creation."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for creation."}},"required":["code","name"],"description":"Creation type for new difficulty levels requiring code and name with optional description."},"IRecipeSharingDifficultyLevel.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional unique code identifier for update."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional name for update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for update."}},"required":[],"description":"Update type for existing difficulty levels allowing partial modifications."},"IRecipeSharingUnits.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the unit."},"code":{"type":"string","description":"Code representing the unit."},"name":{"type":"string","description":"Full descriptive name of the unit."},"abbreviation":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional abbreviated symbol representing the unit."}},"required":["id","code","name"],"description":"Summary view of measurement unit data representing ingredient quantities."},"IRecipeSharingCategoryApprovals.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the category approval request."},"submitted_by_user_id":{"type":"string","format":"uuid","description":"Identifier of the user who submitted the approval."},"category_name":{"type":"string","description":"Name of the proposed category or tag."},"approval_status":{"oneOf":[{"const":"pending","description":"Current approval status of the category approval."},{"const":"approved","description":"Current approval status of the category approval."},{"const":"rejected","description":"Current approval status of the category approval."}],"description":"Current approval status of the category approval."},"submitted_at":{"type":"string","format":"date-time","description":"Timestamp when the approval was submitted."},"reviewed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the approval was reviewed, or null if not reviewed yet."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."}},"required":["id","submitted_by_user_id","category_name","approval_status","submitted_at","created_at","updated_at"],"description":"Summary type for user-submitted category approvals pending moderator review with status and timestamps."}}}}