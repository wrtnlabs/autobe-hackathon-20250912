import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthPremiumUserJoin } from "../../../providers/postauthPremiumUserJoin";
import { postauthPremiumUserLogin } from "../../../providers/postauthPremiumUserLogin";
import { postauthPremiumUserRefresh } from "../../../providers/postauthPremiumUserRefresh";

import { IRecipeSharingPremiumUser } from "../../../api/structures/IRecipeSharingPremiumUser";

@Controller("/auth/premiumUser")
export class AuthPremiumuserController {
  /**
   * Register a new premium user account (recipe_sharing_premiumusers).
   *
   * Register a new premium user account in the system. This operation stores
   * user credentials, assigns premium subscription activation time, and returns
   * authorized JWT tokens for session establishment. It references
   * `recipe_sharing_premiumusers` schema fields including `email`,
   * `password_hash`, `username`, and `premium_since`. Handles input validation,
   * uniqueness checks, and secure password hashing.
   *
   * @param connection
   * @param body Payload to create a new premium user account
   *   (IRecipeSharingPremiumUser.ICreate)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IRecipeSharingPremiumUser.ICreate,
  ): Promise<IRecipeSharingPremiumUser.IAuthorized> {
    try {
      return await postauthPremiumUserJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login a premium user account (recipe_sharing_premiumusers).
   *
   * Login a premium user by validating credentials stored in
   * `recipe_sharing_premiumusers` fields such as `email` and `password_hash`.
   * On successful authentication, returns JWT tokens for session management
   * within `IRecipeSharingPremiumUser.IAuthorized`. Includes security checks
   * for account status and password validity.
   *
   * @param connection
   * @param body Login credentials for a premium user
   *   (IRecipeSharingPremiumUser.ILogin)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IRecipeSharingPremiumUser.ILogin,
  ): Promise<IRecipeSharingPremiumUser.IAuthorized> {
    try {
      return await postauthPremiumUserLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh premium user JWT tokens (recipe_sharing_premiumusers).
   *
   * Refresh JWT access and refresh tokens for premium users based on valid
   * refresh tokens. Validates tokens and reissues new tokens tied to the
   * `recipe_sharing_premiumusers` schema. Returns
   * `IRecipeSharingPremiumUser.IAuthorized` for continued authenticated
   * access.
   *
   * @param connection
   * @param body Refresh token payload for a premium user
   *   (IRecipeSharingPremiumUser.IRefresh)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IRecipeSharingPremiumUser.IRefresh,
  ): Promise<IRecipeSharingPremiumUser.IAuthorized> {
    try {
      return await postauthPremiumUserRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
