import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthRegularUserJoin } from "../../../providers/postauthRegularUserJoin";
import { RegularuserAuth } from "../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../decorators/payload/RegularuserPayload";
import { postauthRegularUserLogin } from "../../../providers/postauthRegularUserLogin";
import { postauthRegularUserRefresh } from "../../../providers/postauthRegularUserRefresh";

import { IRecipeSharingRegularUser } from "../../../api/structures/IRecipeSharingRegularUser";

@Controller("/auth/regularUser")
export class AuthRegularuserController {
  /**
   * Register new regularUser in recipe_sharing_regularusers.
   *
   * Register a new regular user account by creating an entry in
   * recipe_sharing_regularusers table. The API accepts email, username, and a
   * hashed password (password_hash). The operation ensures email and username
   * uniqueness, sets creation and update timestamps, and initializes deleted_at
   * as null. Successful registration issues JWT tokens for access and refresh,
   * allowing the user to proceed to login and refresh sessions.
   *
   * The operation is publicly accessible without authentication.
   *
   * References schema fields: email, username, password_hash, created_at,
   * updated_at, deleted_at.
   *
   * This API is the entry point for new users and validates unique credentials
   * before storing sensitive data securely as hashes.
   *
   * @param connection
   * @param body New user registration details including email, username, and
   *   hashed password
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRegularUser.ICreate,
  ): Promise<IRecipeSharingRegularUser.IAuthorized> {
    try {
      return await postauthRegularUserJoin({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login existing regularUser in recipe_sharing_regularusers.
   *
   * Log in an existing regularUser by validating email and password hash
   * against recipe_sharing_regularusers records. On successful authentication,
   * return JWT tokens for session management. This operation enforces unique
   * user credentials stored in password_hash and email fields.
   *
   * The endpoint is publicly accessible.
   *
   * Uses schema fields: email, password_hash, username for response.
   *
   * Ensures security best practices for password verification and JWT token
   * issuance.
   *
   * @param connection
   * @param body User login credentials including email and password hash
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRegularUser.ILogin,
  ): Promise<IRecipeSharingRegularUser.IAuthorized> {
    try {
      return await postauthRegularUserLogin({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for regularUser in recipe_sharing_regularusers.
   *
   * Refresh JWT tokens for an authenticated regularUser. Requires a valid
   * refresh token to issue a new access token and refresh token pair. This
   * maintains session security and continuity. The operation targets
   * recipe_sharing_regularusers role users.
   *
   * Uses schema constraints and security for token validation.
   *
   * Related authentication lifecycle endpoints include join and login.
   *
   * Refresh token expiration and revocation are managed according to security
   * policies.
   *
   * @param connection
   * @param body Refresh token details for regularUser token renewal
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRegularUser.IRefresh,
  ): Promise<IRecipeSharingRegularUser.IAuthorized> {
    try {
      return await postauthRegularUserRefresh({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
