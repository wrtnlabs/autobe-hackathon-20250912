import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingIngredientSearchTerms } from "../../../providers/patchrecipeSharingIngredientSearchTerms";
import { getrecipeSharingIngredientSearchTermsIngredientSearchTermId } from "../../../providers/getrecipeSharingIngredientSearchTermsIngredientSearchTermId";

import { IPageIRecipeSharingIngredientSearchTerms } from "../../../api/structures/IPageIRecipeSharingIngredientSearchTerms";
import { IRecipeSharingIngredientSearchTerms } from "../../../api/structures/IRecipeSharingIngredientSearchTerms";
import { IRecipeSharingIngredientSearchTerm } from "../../../api/structures/IRecipeSharingIngredientSearchTerm";

@Controller("/recipeSharing/ingredientSearchTerms")
export class RecipesharingIngredientsearchtermsController {
  /**
   * Retrieve paginated ingredient search terms.
   *
   * Retrieve ingredient search terms with filtering and pagination options.
   *
   * Allows searching by partial search terms and ingredient ID.
   *
   * Open public access.
   *
   * Returns paginated lists of matching terms with metadata.
   *
   * Errors arise from invalid search parameter inputs.
   *
   * Based on recipe_sharing_ingredient_search_terms table in database.
   *
   * Intended for ingredient matching in advanced search feature.
   *
   * @param connection
   * @param body Search parameters and pagination for ingredient search terms
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRecipeSharingIngredientSearchTerms.IRequest,
  ): Promise<IPageIRecipeSharingIngredientSearchTerms> {
    try {
      return await patchrecipeSharingIngredientSearchTerms({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve ingredient search term by ID.
   *
   * Retrieve a single ingredient search term entry by its unique identifier.
   * This operation accesses the ingredient search terms entity, which stores
   * alternate search term variants for ingredients to support partial and fuzzy
   * searches.
   *
   * Security considerations include ensuring only authenticated users or public
   * read access depending on system policy can access this data. This data is
   * used to improve search accuracy and usability when users input partial or
   * approximate ingredient names.
   *
   * This operation directly queries the recipe_sharing_ingredient_search_terms
   * table based on the provided UUID.
   *
   * Validation includes verifying the UUID format and existence of the targeted
   * record. If not found, an appropriate error will be returned.
   *
   * Related operations may include updating or creating ingredient search
   * terms, but this one is strictly for retrieving individual entries by ID
   * without modification.
   *
   * Response returns the ingredient search term object including its ID, linked
   * ingredient ID, and search term string.
   *
   * @param connection
   * @param ingredientSearchTermId Unique UUID identifier of the ingredient
   *   search term
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ingredientSearchTermId")
  public async at(
    @TypedParam("ingredientSearchTermId")
    ingredientSearchTermId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingIngredientSearchTerm> {
    try {
      return await getrecipeSharingIngredientSearchTermsIngredientSearchTermId({
        ingredientSearchTermId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
