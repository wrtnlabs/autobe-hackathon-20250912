import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserMealPlansMealPlanIdEntries } from "../../../../../providers/postrecipeSharingRegularUserMealPlansMealPlanIdEntries";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserMealPlansMealPlanIdEntries } from "../../../../../providers/patchrecipeSharingRegularUserMealPlansMealPlanIdEntries";
import { getrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId } from "../../../../../providers/getrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId";
import { putrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId } from "../../../../../providers/putrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId";
import { deleterecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId } from "../../../../../providers/deleterecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId";

import { IRecipeSharingMealPlanEntry } from "../../../../../api/structures/IRecipeSharingMealPlanEntry";
import { IPageIRecipeSharingMealPlanEntry } from "../../../../../api/structures/IPageIRecipeSharingMealPlanEntry";

@Controller("/recipeSharing/regularUser/mealPlans/:mealPlanId/entries")
export class RecipesharingRegularuserMealplansEntriesController {
  /**
   * Create a new meal plan entry under the specified meal plan. Requires recipe
   * ID, quantity, planned date, and meal slot.
   *
   * Only the owner of the meal plan (regular or premium user) can create
   * entries.
   *
   * Successfully returns the created meal plan entry with all specified
   * details.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan to add a new entry
   * @param body Meal plan entry creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingMealPlanEntry.ICreate,
  ): Promise<IRecipeSharingMealPlanEntry> {
    try {
      return await postrecipeSharingRegularUserMealPlansMealPlanIdEntries({
        regularUser,
        mealPlanId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List meal plan entries for a meal plan.
   *
   * Retrieve all entries for a specified meal plan identified by mealPlanId.
   * Entries include recipes planned, quantities, scheduled dates, and meal
   * slots.
   *
   * Allows users to view and manage their scheduled meal recipes.
   *
   * Requires authentication and ownership authorization.
   *
   * Errors are returned for invalid or unauthorized requests.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan to retrieve entries
   *   for
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
  ): Promise<IPageIRecipeSharingMealPlanEntry> {
    try {
      return await patchrecipeSharingRegularUserMealPlansMealPlanIdEntries({
        regularUser,
        mealPlanId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a meal plan entry by mealPlanId and mealPlanEntryId.
   *
   * Retrieve detailed information for a meal plan entry specified by mealPlanId
   * and mealPlanEntryId. This operation validates that the requested meal plan
   * entry exists and belongs to the meal plan provided.
   *
   * Security considerations: Only the owner of the meal plan (regular or
   * premium user) may access this detail.
   *
   * The returned data includes all fields such as recipe ID, quantity, planned
   * date, and meal slot.
   *
   * If the entry or meal plan does not exist or access is unauthorized, the
   * operation returns appropriate error responses.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the target meal plan
   * @param mealPlanEntryId Unique identifier of the target meal plan entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mealPlanEntryId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
    @TypedParam("mealPlanEntryId")
    mealPlanEntryId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingMealPlanEntry> {
    try {
      return await getrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId(
        {
          regularUser,
          mealPlanId,
          mealPlanEntryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a meal plan entry by mealPlanId and mealPlanEntryId with provided
   * update data.
   *
   * Only the owning user may update entries.
   *
   * Validation ensures the targeted meal plan and entry exist and belong to the
   * user.
   *
   * Returns updated meal plan entry information reflecting the changes.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan
   * @param mealPlanEntryId Unique identifier of the meal plan entry
   * @param body Meal plan entry update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mealPlanEntryId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
    @TypedParam("mealPlanEntryId")
    mealPlanEntryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingMealPlanEntry.IUpdate,
  ): Promise<IRecipeSharingMealPlanEntry> {
    try {
      return await putrecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId(
        {
          regularUser,
          mealPlanId,
          mealPlanEntryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a meal plan entry by mealPlanId and mealPlanEntryId.
   *
   * Only the owner of the meal plan can perform this operation.
   *
   * This operation permanently removes the entry from the database.
   *
   * No content is returned on successful deletion.
   *
   * @param connection
   * @param mealPlanId Unique identifier of the meal plan
   * @param mealPlanEntryId Unique identifier of the meal plan entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mealPlanEntryId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("mealPlanId")
    mealPlanId: string & tags.Format<"uuid">,
    @TypedParam("mealPlanEntryId")
    mealPlanEntryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserMealPlansMealPlanIdEntriesMealPlanEntryId(
        {
          regularUser,
          mealPlanId,
          mealPlanEntryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
