import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingRegularUserRegularUsers } from "../../../../providers/patchrecipeSharingRegularUserRegularUsers";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { getrecipeSharingRegularUserRegularUsersId } from "../../../../providers/getrecipeSharingRegularUserRegularUsersId";
import { putrecipeSharingRegularUserRegularUsersId } from "../../../../providers/putrecipeSharingRegularUserRegularUsersId";
import { deleterecipeSharingRegularUserRegularUsersId } from "../../../../providers/deleterecipeSharingRegularUserRegularUsersId";

import { IPageIRecipeSharingRegularUser } from "../../../../api/structures/IPageIRecipeSharingRegularUser";
import { IRecipeSharingRegularUser } from "../../../../api/structures/IRecipeSharingRegularUser";

@Controller("/recipeSharing/regularUser/regularUsers")
export class RecipesharingRegularuserRegularusersController {
  /**
   * Search and retrieve a filtered, paginated list of regular users.
   *
   * This endpoint allows clients to query and retrieve a paginated list of
   * regular users.
   *
   * Each regular user represents a platform member with credentials including
   * email and username, used for authentication and identification in the
   * recipe sharing system.
   *
   * The system stores timestamps for record creation and updates, and soft
   * deletion support through a nullable deleted_at timestamp.
   *
   * For security reasons, sensitive password hashes are never exposed in the
   * response.
   *
   * This operation enables filtering by email, username, or other attributes
   * through the request body parameters, supporting pagination and sorting to
   * handle large user bases efficiently.
   *
   * Authorization to access this list should be restricted to regularUser or
   * premiumUser roles.
   *
   * Response data includes essential summary information suitable for user
   * management or audit interfaces, excluding sensitive fields.
   *
   * No sensitive data such as password hashes are returned.
   *
   * Errors may occur if invalid filter parameters are provided or authorization
   * fails.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering regular
   *   users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRegularUser.IRequest,
  ): Promise<IPageIRecipeSharingRegularUser.ISummary> {
    try {
      return await patchrecipeSharingRegularUserRegularUsers({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a regular user by ID.
   *
   * Retrieve detailed information about a specific regular user identified by
   * their unique ID.
   *
   * The user record includes public fields such as email and username, creation
   * and update timestamps, and a nullable deleted_at to indicate soft
   * deletion.
   *
   * Sensitive information such as password hashes is excluded from the response
   * for security.
   *
   * This operation is typically restricted to regularUser or premiumUser roles.
   *
   * Appropriate error handling ensures responses for not found IDs and
   * unauthorized access.
   *
   * This endpoint uses the 'get' method and requires a UUID formatted 'id' path
   * parameter.
   *
   * The response provides detailed user information for management or auditing
   * purposes.
   *
   * @param connection
   * @param id Unique identifier of the target regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRegularUser> {
    try {
      return await getrecipeSharingRegularUserRegularUsersId({
        regularUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing regular user's information by ID.
   *
   * Update the data of an existing regular user identified by their unique ID.
   *
   * This operation allows modification of public user information such as email
   * and username.
   *
   * Password updates are performed by changing the password_hash field with
   * securely hashed values.
   *
   * Soft deletion timestamps are not directly modifiable here.
   *
   * Access to this operation is restricted to regularUser or premiumUser roles.
   *
   * The endpoint accepts the user ID as a path parameter and the updated user
   * data in the request body.
   *
   * Validation checks uniqueness constraints for email and username.
   *
   * Errors are returned if input validation fails or the user ID is not found.
   *
   * Successful updates return the updated user entity excluding sensitive
   * password fields.
   *
   * The method used is PUT and requires a UUID formatted 'id' path parameter.
   *
   * @param connection
   * @param id Unique identifier of the regular user to update
   * @param body Updated information for the regular user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRegularUser.IUpdate,
  ): Promise<IRecipeSharingRegularUser> {
    try {
      return await putrecipeSharingRegularUserRegularUsersId({
        regularUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a regular user by ID.
   *
   * Permanently delete a regular user from the database by their unique ID.
   *
   * This operation deletes the user record entirely, bypassing any soft delete
   * mechanisms.
   *
   * Access is restricted to regularUser and premiumUser roles.
   *
   * The endpoint requires the user ID as a UUID formatted path parameter.
   *
   * No request body is needed.
   *
   * No response body is returned.
   *
   * Errors are returned if the user ID is not found.
   *
   * Use this operation with caution as deletion is irreversible.
   *
   * @param connection
   * @param id Unique identifier of the regular user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserRegularUsersId({
        regularUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
