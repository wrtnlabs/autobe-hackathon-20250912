import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingRegularUserStoreIngredientPrices } from "../../../../providers/patchrecipeSharingRegularUserStoreIngredientPrices";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { getrecipeSharingRegularUserStoreIngredientPricesStoreIngredientPriceId } from "../../../../providers/getrecipeSharingRegularUserStoreIngredientPricesStoreIngredientPriceId";

import { IPageIRecipeSharingStoreIngredientPrice } from "../../../../api/structures/IPageIRecipeSharingStoreIngredientPrice";
import { IRecipeSharingStoreIngredientPrice } from "../../../../api/structures/IRecipeSharingStoreIngredientPrice";

@Controller("/recipeSharing/regularUser/storeIngredientPrices")
export class RecipesharingRegularuserStoreingredientpricesController {
  /**
   * Search and retrieve a paginated list of store ingredient prices with
   * filtering and sorting.
   *
   * Retrieve a filtered, sorted, and paginated list of ingredient prices at
   * grocery stores. This API endpoint supports complex queries to find prices
   * for individual ingredients across multiple stores, enabling features like
   * shopping list cost estimation and store comparison.
   *
   * The operation focuses on providing pricing, availability, and last updated
   * timestamp information for each ingredient-store combination. Users can
   * filter by ingredient, store, availability, price range, and sort by price
   * or last update time.
   *
   * Security considerations include restricting access to authenticated users
   * who require pricing information for meal planning and shopping list
   * generation. The data reflects the current prices and availability as stored
   * in the system, updated periodically.
   *
   * Related operations include retrieval of individual ingredient price entries
   * via a specific ID, as well as creation and updates of store ingredient
   * prices with POST and PUT operations respectively.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for store ingredient
   *   prices
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingStoreIngredientPrice.IRequest,
  ): Promise<IPageIRecipeSharingStoreIngredientPrice.ISummary> {
    try {
      return await patchrecipeSharingRegularUserStoreIngredientPrices({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed store ingredient price by ID.
   *
   * Retrieve detailed information for a single store ingredient price entry by
   * its unique identifier. This operation allows authenticated users to fetch
   * complete price and availability data for a specific ingredient in a
   * specific grocery store.
   *
   * The response includes all recorded attributes of the price entity,
   * facilitating detailed display or editing in client applications. If the
   * specified ID does not exist, an appropriate error response is expected.
   *
   * This operation complements the search endpoint and supports update and
   * creation operations on store ingredient prices.
   *
   * Security requires authenticated user access.
   *
   * @param connection
   * @param storeIngredientPriceId Identifier of the target store ingredient
   *   price
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storeIngredientPriceId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("storeIngredientPriceId")
    storeIngredientPriceId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingStoreIngredientPrice> {
    try {
      return await getrecipeSharingRegularUserStoreIngredientPricesStoreIngredientPriceId(
        {
          regularUser,
          storeIngredientPriceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
