import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems } from "../../../../../providers/getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { postrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems } from "../../../../../providers/postrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems";
import { getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId } from "../../../../../providers/getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId";
import { putrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId } from "../../../../../providers/putrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId";
import { deleterecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId } from "../../../../../providers/deleterecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId";

import { IPageIRecipeSharingShoppingListItem } from "../../../../../api/structures/IPageIRecipeSharingShoppingListItem";
import { IRecipeSharingShoppingListItem } from "../../../../../api/structures/IRecipeSharingShoppingListItem";

@Controller(
  "/recipeSharing/regularUser/shoppingLists/:shoppingListId/shoppingListItems",
)
export class RecipesharingRegularuserShoppinglistsShoppinglistitemsController {
  /**
   * List all items in a shopping list.
   *
   * Retrieve all items within a specific shopping list owned by the
   * authenticated user.
   *
   * Each shopping list item consists of an ingredient, its quantity,
   * measurement unit, and optional user notes.
   *
   * Security controls restrict access to items of shopping lists owned by the
   * user, ensuring privacy.
   *
   * This operation maps to the 'recipe_sharing_shopping_list_items' table in
   * the Prisma schema, which maintains detailed ingredient line items within
   * shopping lists.
   *
   * Returns the full list of detailed shopping list item records.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list whose items
   *   are requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
  ): Promise<IPageIRecipeSharingShoppingListItem.ISummary> {
    try {
      return await getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems(
        {
          regularUser,
          shoppingListId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a shopping list item in the specified shopping list.
   *
   * Create a new shopping list item under a specific shopping list by providing
   * ingredient reference, quantity, unit, and optional notes.
   *
   * The operation validates that the referenced shopping list exists and
   * associates the new item with that list. This allows users to manage their
   * grocery items and consolidate ingredient quantities for efficient
   * shopping.
   *
   * Security considerations include ensuring the user owns or has permission to
   * modify the shopping list. The ingredient must be valid and exist in the
   * system.
   *
   * Upon successful creation, the full shopping list item data including
   * timestamps is returned for confirmation and further management.
   *
   * @param connection
   * @param shoppingListId Identifier of the target shopping list
   * @param body Shopping list item creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingShoppingListItem.ICreate,
  ): Promise<IRecipeSharingShoppingListItem> {
    try {
      return await postrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItems(
        {
          regularUser,
          shoppingListId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific shopping list item by ID.
   *
   * Retrieve a specific shopping list item by its unique identifier within the
   * specified shopping list.
   *
   * The item details include ingredient reference, quantity, measurement unit,
   * and optional notes.
   *
   * Access is restricted to the shopping list owner or authorized users.
   *
   * This operation leverages the 'recipe_sharing_shopping_list_items' table in
   * the Prisma schema.
   *
   * Returns the detailed shopping list item entity.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list containing the
   *   item
   * @param shoppingListItemId Unique identifier of the shopping list item to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shoppingListItemId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
    @TypedParam("shoppingListItemId")
    shoppingListItemId: string,
  ): Promise<IRecipeSharingShoppingListItem> {
    try {
      return await getrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId(
        {
          regularUser,
          shoppingListId,
          shoppingListItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a shopping list item in a specified shopping list.
   *
   * Update an existing shopping list item within a shopping list, modifying
   * ingredient, quantity, unit, or notes.
   *
   * This operation validates ownership and correct association with the parent
   * shopping list. Quantity and units changes allow granular control for
   * shopping list management.
   *
   * The response includes the full updated shopping list item record.
   *
   * @param connection
   * @param shoppingListId Identifier of the target shopping list
   * @param shoppingListItemId Identifier of the shopping list item to update
   * @param body Shopping list item update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shoppingListItemId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string & tags.Format<"uuid">,
    @TypedParam("shoppingListItemId")
    shoppingListItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingShoppingListItem.IUpdate,
  ): Promise<IRecipeSharingShoppingListItem> {
    try {
      return await putrecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId(
        {
          regularUser,
          shoppingListId,
          shoppingListItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping list item from a specified shopping list.
   *
   * Permanently delete a shopping list item from a specified shopping list.
   *
   * The item is completely removed and cannot be recovered. The operation
   * validates user ownership and permissions before deletion.
   *
   * No content is returned upon successful deletion.
   *
   * @param connection
   * @param shoppingListId Identifier of the target shopping list
   * @param shoppingListItemId Identifier of the shopping list item to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":shoppingListItemId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string & tags.Format<"uuid">,
    @TypedParam("shoppingListItemId")
    shoppingListItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId(
        {
          regularUser,
          shoppingListId,
          shoppingListItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
