import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserIngredients } from "../../../../providers/postrecipeSharingRegularUserIngredients";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserIngredients } from "../../../../providers/patchrecipeSharingRegularUserIngredients";
import { getrecipeSharingRegularUserIngredientsIngredientId } from "../../../../providers/getrecipeSharingRegularUserIngredientsIngredientId";
import { putrecipeSharingRegularUserIngredientsIngredientId } from "../../../../providers/putrecipeSharingRegularUserIngredientsIngredientId";
import { deleterecipeSharingRegularUserIngredientsIngredientId } from "../../../../providers/deleterecipeSharingRegularUserIngredientsIngredientId";

import { IRecipeSharingIngredient } from "../../../../api/structures/IRecipeSharingIngredient";
import { IPageIRecipeSharingIngredient } from "../../../../api/structures/IPageIRecipeSharingIngredient";

@Controller("/recipeSharing/regularUser/ingredients")
export class RecipesharingRegularuserIngredientsController {
  /**
   * Create a new ingredient in the master catalog.
   *
   * Create a new ingredient record in the master ingredient table.
   *
   * Requires authorized user role to perform ingredient management.
   *
   * Returns the fully detailed created ingredient including UUID and
   * timestamps.
   *
   * @param connection
   * @param body Creation information for a new ingredient
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingIngredient.ICreate,
  ): Promise<IRecipeSharingIngredient> {
    try {
      return await postrecipeSharingRegularUserIngredients({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a list of ingredients with filtering and pagination.
   *
   * Search and retrieve a paginated list of ingredients. Supports filtering by
   * name, brand, and sorting with search criteria detailed in the request
   * body.
   *
   * Requires authenticated access.
   *
   * Returns paginated ingredient summaries suitable for display in ingredient
   * exploration and substitution lists.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for ingredient
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingIngredient.IRequest,
  ): Promise<IPageIRecipeSharingIngredient.ISummary> {
    try {
      return await patchrecipeSharingRegularUserIngredients({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of an ingredient by ingredientId.
   *
   * Get detailed ingredient information identified by ingredientId.
   *
   * Accessible to authenticated users to facilitate recipe creation and
   * substitutions.
   *
   * Returns full ingredient data including name, brand, and timestamps.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ingredientId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingIngredient> {
    try {
      return await getrecipeSharingRegularUserIngredientsIngredientId({
        regularUser,
        ingredientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an ingredient in the recipe_sharing_ingredients table.
   *
   * This endpoint allows updating the details of an existing ingredient by
   * specifying the ingredientId path parameter. The request body must include
   * the updated details such as name and optionally brand. The response returns
   * the updated ingredient record.
   *
   * Users performing this action must have appropriate authorization as either
   * regular or premium users.
   *
   * The operation ensures data validation, uniqueness of ingredient names, and
   * audit timestamp modification. Proper error handling returns 400 for invalid
   * input, 403 for unauthorized access, and 404 if the ingredient does not
   * exist.
   *
   * Other relevant operations include retrieving ingredients, managing
   * substitutions, and deletion.
   *
   * This operation performs a hard update without changing soft deletion flags.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @param body Updated ingredient details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ingredientId")
  public async updateIngredient(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingIngredient.IUpdate,
  ): Promise<IRecipeSharingIngredient> {
    try {
      return await putrecipeSharingRegularUserIngredientsIngredientId({
        regularUser,
        ingredientId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanent deletion of an ingredient from the recipe_sharing_ingredients
   * table.
   *
   * This endpoint facilitates permanent deletion of an ingredient by
   * ingredientId. The user must have regular or premium authorization.
   *
   * Successful deletion removes the ingredient record from the database
   * completely with no response body.
   *
   * Errors include unauthorized access or non-existent ingredient.
   *
   * Related operations include ingredient retrieval, updates, and substitution
   * management.
   *
   * This is a hard delete ignoring soft delete timestamps.
   *
   * @param connection
   * @param ingredientId Unique identifier of the target ingredient
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ingredientId")
  public async eraseIngredient(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("ingredientId")
    ingredientId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserIngredientsIngredientId({
        regularUser,
        ingredientId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
