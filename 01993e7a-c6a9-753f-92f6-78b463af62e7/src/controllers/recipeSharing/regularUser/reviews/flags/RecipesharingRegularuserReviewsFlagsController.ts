import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserReviewsReviewIdFlags } from "../../../../../providers/postrecipeSharingRegularUserReviewsReviewIdFlags";
import { RegularuserAuth } from "../../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../../decorators/payload/RegularuserPayload";
import { putrecipeSharingRegularUserReviewsReviewIdFlagsFlagId } from "../../../../../providers/putrecipeSharingRegularUserReviewsReviewIdFlagsFlagId";
import { deleterecipeSharingRegularUserReviewsReviewIdFlagsFlagId } from "../../../../../providers/deleterecipeSharingRegularUserReviewsReviewIdFlagsFlagId";

import { IRecipeSharingReviewFlag } from "../../../../../api/structures/IRecipeSharingReviewFlag";

@Controller("/recipeSharing/regularUser/reviews/:reviewId/flags")
export class RecipesharingRegularuserReviewsFlagsController {
  /**
   * Create a new flag on a specified review for inappropriate content
   * reporting.
   *
   * This API enables authenticated users to flag a specific review by providing
   * a reason such as spam or offensive content. The action is recorded in the
   * recipe_sharing_review_flags table, linking the flag to the user and the
   * review.
   *
   * Proper flagging assists moderators in maintaining content quality and
   * community standards by identifying problematic reviews for further review.
   *
   * Security considerations include verification of user credentials and
   * ensuring users cannot flag the same review multiple times for the same
   * reason.
   *
   * The operation requires the review ID as a path parameter and expects a JSON
   * request body specifying the flag reason. The response returns the newly
   * created flag's details.
   *
   * This operation relates to the RatingsReviews schema, providing necessary
   * CRUD operations for user-submitted review flags. It complements moderation
   * workflows which handle flagged reviews.
   *
   * @param connection
   * @param reviewId Unique identifier of the target review to be flagged
   * @param body Flag information including the reason for flagging
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createFlag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewFlag.ICreate,
  ): Promise<IRecipeSharingReviewFlag> {
    try {
      return await postrecipeSharingRegularUserReviewsReviewIdFlags({
        regularUser,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update flag details on a specific review.
   *
   * Update an existing flag on a review to modify reason or status. Users can
   * correct or change their flags if needed.
   *
   * This supports accurate flag reporting and moderation workflows.
   *
   * Proper authentication and authorization checks must be in place to restrict
   * modifications to flag owners.
   *
   * The operation requires reviewId and flagId parameters and a JSON request
   * body with update information.
   *
   * @param connection
   * @param reviewId Unique identifier of the review associated with the flag
   * @param flagId Unique identifier of the flag to update
   * @param body Updated flag information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":flagId")
  public async updateFlag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingReviewFlag.IUpdate,
  ): Promise<IRecipeSharingReviewFlag> {
    try {
      return await putrecipeSharingRegularUserReviewsReviewIdFlagsFlagId({
        regularUser,
        reviewId,
        flagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a specific flag from a review.
   *
   * Delete a flag from a review. This operation permanently removes the flag
   * record from the database.
   *
   * Users can retract flags if they were created erroneously.
   *
   * Authorization ensures only flag owners or appropriate users can perform
   * deletion.
   *
   * The endpoint requires reviewId and flagId in the path and performs a hard
   * delete, removing all traces of the flag.
   *
   * @param connection
   * @param reviewId Unique identifier of the review associated with the flag
   * @param flagId Unique identifier of the flag to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":flagId")
  public async eraseFlag(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("flagId")
    flagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserReviewsReviewIdFlagsFlagId({
        regularUser,
        reviewId,
        flagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
