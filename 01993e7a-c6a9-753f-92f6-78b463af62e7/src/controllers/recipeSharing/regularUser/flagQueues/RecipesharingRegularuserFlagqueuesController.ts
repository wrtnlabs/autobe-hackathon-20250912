import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postrecipeSharingRegularUserFlagQueues } from "../../../../providers/postrecipeSharingRegularUserFlagQueues";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IRecipeSharingFlagQueue } from "../../../../api/structures/IRecipeSharingFlagQueue";

@Controller("/recipeSharing/regularUser/flagQueues")
export class RecipesharingRegularuserFlagqueuesController {
  /**
   * Create a new flag queue entry for review moderation.
   *
   * This API endpoint allows authenticated users to create a new flag queue
   * entry when they flag a review as inappropriate or requiring moderation. The
   * user must provide the ID of the flagged review (optional), the identifier
   * of the user who is reporting (flagging) the review, and the reason for the
   * flag.
   *
   * The operation is intended for use by regular or premium users to report
   * problematic reviews, which then enter the moderation queue managed by
   * moderators.
   *
   * The system records creation timestamps and initializes the flag queue entry
   * with a default status (handled internally).
   *
   * Security considerations include validating the user is authenticated and
   * authorized to flag content.
   *
   * On successful creation, the new flag queue entry is stored permanently and
   * will appear in moderation queues until addressed.
   *
   * Errors include invalid references (nonexistent review IDs or user IDs) or
   * unauthorized attempts.
   *
   * This operation creates entries in the recipe_sharing_flag_queues table in
   * the database.
   *
   * @param connection
   * @param body Flag queue creation details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingFlagQueue.ICreate,
  ): Promise<IRecipeSharingFlagQueue> {
    try {
      return await postrecipeSharingRegularUserFlagQueues({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
