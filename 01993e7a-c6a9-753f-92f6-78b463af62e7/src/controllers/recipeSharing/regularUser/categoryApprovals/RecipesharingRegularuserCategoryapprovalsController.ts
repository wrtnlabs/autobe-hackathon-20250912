import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postrecipeSharingRegularUserCategoryApprovals } from "../../../../providers/postrecipeSharingRegularUserCategoryApprovals";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";

import { IRecipeSharingCategoryApprovals } from "../../../../api/structures/IRecipeSharingCategoryApprovals";

@Controller("/recipeSharing/regularUser/categoryApprovals")
export class RecipesharingRegularuserCategoryapprovalsController {
  /**
   * Submit a new category approval request.
   *
   * Allows a user (typically a regular or premium user) to propose a new
   * category or tag for approval by moderators. The submission includes the
   * category name and related metadata. The system records the submission with
   * a 'pending' approval status and timestamps.
   *
   * Security requirements restrict this action to authenticated users (regular
   * or premium) capable of submitting suggestions.
   *
   * The operation affects the recipe_sharing_category_approvals table,
   * preserving the proposed category name, submitting user ID, and approval
   * metadata.
   *
   * Validation errors occur if the input data is incomplete or invalid;
   * successful submissions return the created record with unique identifiers.
   *
   * @param connection
   * @param body New category approval submission data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingCategoryApprovals.ICreate,
  ): Promise<IRecipeSharingCategoryApprovals> {
    try {
      return await postrecipeSharingRegularUserCategoryApprovals({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
