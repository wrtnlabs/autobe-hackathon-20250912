import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserRatings } from "../../../../providers/postrecipeSharingRegularUserRatings";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserRatings } from "../../../../providers/patchrecipeSharingRegularUserRatings";
import { getrecipeSharingRegularUserRatingsId } from "../../../../providers/getrecipeSharingRegularUserRatingsId";
import { putrecipeSharingRegularUserRatingsId } from "../../../../providers/putrecipeSharingRegularUserRatingsId";
import { deleterecipeSharingRegularUserRatingsId } from "../../../../providers/deleterecipeSharingRegularUserRatingsId";

import { IRecipeSharingRating } from "../../../../api/structures/IRecipeSharingRating";
import { IPageIRecipeSharingRating } from "../../../../api/structures/IPageIRecipeSharingRating";

@Controller("/recipeSharing/regularUser/ratings")
export class RecipesharingRegularuserRatingsController {
  /**
   * Create a new user rating.
   *
   * This API endpoint enables authenticated regular users to submit new ratings
   * for recipes. The request body must include the rating data such as the user
   * ID, recipe ID, and the star rating value (an integer from 1 to 5). This
   * operation enforces uniqueness such that users can only rate a recipe once.
   *
   * Upon successful creation, the system records the creation and update
   * timestamps automatically and returns the full rating entity in the
   * response. Validation ensures the rating value falls within the 1-5 range,
   * user and recipe IDs are valid UUIDs, and the user has permission to rate
   * the recipe.
   *
   * This operation complements GET, PUT, and DELETE rating operations to
   * maintain the full lifecycle. Authorization restricts access to
   * authenticated regular users, ensuring that only legitimate users can rate
   * recipes.
   *
   * The rating contributes to average score calculation seen in recipe details
   * and user feedback modules.
   *
   * Request and response structures strictly follow the
   * IRecipeSharingRating.ICreate and IRecipeSharingRating type definitions
   * respectively.
   *
   * @param connection
   * @param body Creation info of the rating
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRating.ICreate,
  ): Promise<IRecipeSharingRating> {
    try {
      return await postrecipeSharingRegularUserRatings({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve recipe ratings with pagination.
   *
   * Retrieve a list of recipe ratings matching search criteria with pagination,
   * filtering, and sorting options.
   *
   * Authenticated users can query ratings submitted by themselves or others to
   * view rating distributions.
   *
   * The response includes paginated rating summaries with rating values and
   * related user and recipe identifiers.
   *
   * This is a read-only endpoint and does not permit modification of ratings.
   *
   * Proper error handling ensures that invalid queries are rejected.
   *
   * @param connection
   * @param body Search and filter parameters for ratings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingRating.IRequest,
  ): Promise<IPageIRecipeSharingRating> {
    try {
      return await patchrecipeSharingRegularUserRatings({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific rating by ID.
   *
   * This API operation allows an authenticated regular user to fetch detailed
   * information for a specific rating entry by its unique ID. It is primarily
   * used to view user-submitted ratings on recipes, supporting functionalities
   * such as displaying average ratings and individual user reviews.
   *
   * Security considerations ensure only authorized regular users can access
   * rating details. The operation references the `recipe_sharing_ratings` table
   * in the Prisma schema, which maintains user-rating relationships, star
   * values, and timestamps for tracking creation and updates.
   *
   * Being a readonly GET endpoint, it returns the full rating entity as defined
   * in the schema, facilitating front-end display and analytics purposes. The
   * operation expects a valid UUID path parameter `id` representing the
   * rating's unique identifier.
   *
   * Validation rules require the `id` to be a valid UUID string. If no matching
   * rating is found, a 404 error is expected to be handled by the backend
   * service.
   *
   * Related API operations include creating ratings (POST /ratings), updating
   * ratings (PUT /ratings/{id}), and deleting ratings (DELETE /ratings/{id}).
   * This operation returns comprehensive data for a single rating record.
   *
   * @param connection
   * @param id Unique identifier of the target rating
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRating> {
    try {
      return await getrecipeSharingRegularUserRatingsId({
        regularUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing rating by ID.
   *
   * This endpoint permits authenticated regular users to update their own
   * rating on a recipe. The user provides the rating ID in the path parameter
   * and the revised rating data in the request body.
   *
   * The system validates the updated star rating to be within the 1-5 range and
   * confirms the user owns the rating record. Update timestamps are
   * automatically managed by the system.
   *
   * This operation enables users to refine their feedback on recipes and is
   * part of the full rating lifecycle along with create, get, and delete
   * operations. Authorization ensures only the rating owner can perform
   * updates.
   *
   * Request and response data structures adhere to IRecipeSharingRating.IUpdate
   * and IRecipeSharingRating typed schemas.
   *
   * This API enhances user engagement by allowing rating corrections and
   * updated opinions over time.
   *
   * @param connection
   * @param id Unique identifier of the target rating
   * @param body Update info of the rating
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRating.IUpdate,
  ): Promise<IRecipeSharingRating> {
    try {
      return await putrecipeSharingRegularUserRatingsId({
        regularUser,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a rating by ID permanently.
   *
   * This API endpoint allows authenticated regular users to delete their own
   * rating records on recipes by providing the rating ID. The deletion is
   * permanent, physically removing the record from the database.
   *
   * The operation requires path parameter `id` which must be a valid UUID
   * string. Upon successful deletion, no content is returned.
   *
   * Users can remove ratings they no longer wish to associate with a recipe,
   * supporting data hygiene and user choice. Authorization restricts deletion
   * to the rating owner.
   *
   * This operation complements create, read, and update APIs for managing
   * ratings effectively.
   *
   * @param connection
   * @param id Unique identifier of the target rating
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserRatingsId({
        regularUser,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
