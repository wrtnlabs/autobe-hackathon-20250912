import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingRegularUserPersonalizedFeeds } from "../../../../providers/postrecipeSharingRegularUserPersonalizedFeeds";
import { RegularuserAuth } from "../../../../decorators/RegularuserAuth";
import { RegularuserPayload } from "../../../../decorators/payload/RegularuserPayload";
import { patchrecipeSharingRegularUserPersonalizedFeeds } from "../../../../providers/patchrecipeSharingRegularUserPersonalizedFeeds";
import { getrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId } from "../../../../providers/getrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId";
import { putrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId } from "../../../../providers/putrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId";
import { deleterecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId } from "../../../../providers/deleterecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId";

import { IRecipeSharingPersonalizedFeed } from "../../../../api/structures/IRecipeSharingPersonalizedFeed";
import { IPageIRecipeSharingPersonalizedFeed } from "../../../../api/structures/IPageIRecipeSharingPersonalizedFeed";

@Controller("/recipeSharing/regularUser/personalizedFeeds")
export class RecipesharingRegularuserPersonalizedfeedsController {
  /**
   * Create a new personalized feed entry for a user.
   *
   * Create a new personalized feed entry that represents a recipe showing in a
   * user's feed. This operation allows associating a recipe to a specific user
   * feed so that the user can see content relevant to them.
   *
   * The creation enforces that the user receiving the feed, the recipe to
   * display, and the originator user who created the recipe are valid existing
   * entities. The database relations for user, recipe, and originator user are
   * maintained by this operation.
   *
   * Security-wise, only authenticated users should create personalized feed
   * entries, typically managed by server logic when users follow others or new
   * recipes are published.
   *
   * This operation inserts a new record into recipe_sharing_personalized_feeds
   * with all mandatory fields and timestamps for auditing. It ensures that the
   * feed entry is unique per user and recipe combination.
   *
   * The operation does not support manual approval or modification of feed
   * contents; it's intended for system-driven feed population.
   *
   * @param connection
   * @param body Data required to create a personalized feed entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingPersonalizedFeed.ICreate,
  ): Promise<IRecipeSharingPersonalizedFeed> {
    try {
      return await postrecipeSharingRegularUserPersonalizedFeeds({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search personalized feeds with filtering and pagination.
   *
   * Retrieve personalized feed entries for a user according to the supplied
   * filtering and pagination criteria. The response contains a paginated list
   * of summarized personalized feed entries including recipe and originator
   * information.
   *
   * Supports filtering by user ID, recipe ID, originator user ID, and sorting
   * by creation time.
   *
   * Authorized access is limited to authenticated regular and premium users.
   *
   * This API correlates with the recipe_sharing_personalized_feeds Prisma table
   * that defines the personalized feed entries per user.
   *
   * @param connection
   * @param body Search parameters for personalized feed filtering and
   *   pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedBody()
    body: IRecipeSharingPersonalizedFeed.IRequest,
  ): Promise<IPageIRecipeSharingPersonalizedFeed.ISummary> {
    try {
      return await patchrecipeSharingRegularUserPersonalizedFeeds({
        regularUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed personalized feed entry by ID.
   *
   * Retrieve detailed information about a personalized feed entry by its ID
   * specified in the path parameter.
   *
   * The response contains the full data for the targeted feed entry including
   * user, recipe, and originator user information.
   *
   * Authorization is required for regular and premium users to access their
   * personalized feeds.
   *
   * If the entry does not exist or access is denied, an error will be returned.
   *
   * This operation maps to the recipe_sharing_personalized_feeds Prisma table
   * representing personalized feeds.
   *
   * @param connection
   * @param personalizedFeedId Target personalized feed entry ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":personalizedFeedId")
  public async at(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("personalizedFeedId")
    personalizedFeedId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingPersonalizedFeed> {
    try {
      return await getrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId(
        {
          regularUser,
          personalizedFeedId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a personalized feed entry by ID.
   *
   * Update an existing personalized feed entry by its unique identifier. This
   * operation allows modifying the user it belongs to, the recipe it displays,
   * or the originator user.
   *
   * Proper authorization is required to ensure only privileged actors can
   * update feed entries, as feed contents are generally automated.
   *
   * The operation validates path parameter and input data, and updates
   * timestamps accordingly.
   *
   * If the personalizedFeedId does not exist, an error will be returned.
   *
   * No partial updates: this is a full update operation replacing current data
   * with submitted data.
   *
   * @param connection
   * @param personalizedFeedId Unique identifier of the personalized feed entry
   *   to update.
   * @param body Updated data for the personalized feed entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":personalizedFeedId")
  public async update(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("personalizedFeedId")
    personalizedFeedId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingPersonalizedFeed.IUpdate,
  ): Promise<IRecipeSharingPersonalizedFeed> {
    try {
      return await putrecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId(
        {
          regularUser,
          personalizedFeedId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a personalized feed entry by ID.
   *
   * Delete a personalized feed entry by its unique identifier, removing it
   * permanently from the database.
   *
   * This operation is irreversible and will clean the feed entry entirely.
   *
   * Proper authorization is mandatory to prevent unauthorized feed removals.
   *
   * Once deleted, the feed entry cannot be recovered.
   *
   * @param connection
   * @param personalizedFeedId Unique identifier of the personalized feed entry
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":personalizedFeedId")
  public async erase(
    @RegularuserAuth()
    regularUser: RegularuserPayload,
    @TypedParam("personalizedFeedId")
    personalizedFeedId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingRegularUserPersonalizedFeedsPersonalizedFeedId(
        {
          regularUser,
          personalizedFeedId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
