import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingDifficultyLevels } from "../../../providers/patchrecipeSharingDifficultyLevels";
import { getrecipeSharingDifficultyLevelsId } from "../../../providers/getrecipeSharingDifficultyLevelsId";

import { IPageIRecipeSharingDifficultyLevel } from "../../../api/structures/IPageIRecipeSharingDifficultyLevel";
import { IRecipeSharingDifficultyLevel } from "../../../api/structures/IRecipeSharingDifficultyLevel";
import { IRecipeSharingDifficultyLevels } from "../../../api/structures/IRecipeSharingDifficultyLevels";

@Controller("/recipeSharing/difficultyLevels")
export class RecipesharingDifficultylevelsController {
  /**
   * Retrieve paginated list of difficulty levels.
   *
   * Retrieve a filtered and paginated list of difficulty levels indicating
   * recipe complexity.
   *
   * This operation supports searching, filtering, and sorting capabilities for
   * client applications.
   *
   * Results include pagination metadata and a collection of difficulty level
   * entities.
   *
   * The 'recipe_sharing_difficulty_levels' table contains unique codes,
   * human-readable names, and optional descriptions for each difficulty level.
   *
   * Security roles may allow public access or require at least a user role
   * depending on system policy.
   *
   * This operation does not modify data but provides important metadata
   * supporting user filtering and recipe classification.
   *
   * Errors can occur if search criteria in the request body are malformed.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for difficulty levels
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRecipeSharingDifficultyLevel.IRequest,
  ): Promise<IPageIRecipeSharingDifficultyLevel> {
    try {
      return await patchrecipeSharingDifficultyLevels({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a difficulty level by ID.
   *
   * Retrieve detailed information of a specific difficulty level identified by
   * its ID.
   *
   * This operation provides all the properties of the difficulty level, such as
   * the unique code, the human-readable name, and any optional description. It
   * also includes audit timestamps to trace record creation and updates.
   *
   * Access is unrestricted, suitable for general consumption by both
   * authenticated and unauthenticated users, enabling users to understand
   * recipe classification in terms of difficulty.
   *
   * The response will be the single difficulty level entity or a not found
   * error if the ID does not exist.
   *
   * @param connection
   * @param id Unique identifier of the difficulty level
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingDifficultyLevels> {
    try {
      return await getrecipeSharingDifficultyLevelsId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
