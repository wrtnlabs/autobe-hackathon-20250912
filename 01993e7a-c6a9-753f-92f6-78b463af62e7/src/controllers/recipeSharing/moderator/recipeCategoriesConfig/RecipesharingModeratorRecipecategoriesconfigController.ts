import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorRecipeCategoriesConfig } from "../../../../providers/postrecipeSharingModeratorRecipeCategoriesConfig";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patchrecipeSharingModeratorRecipeCategoriesConfig } from "../../../../providers/patchrecipeSharingModeratorRecipeCategoriesConfig";
import { getrecipeSharingModeratorRecipeCategoriesConfigId } from "../../../../providers/getrecipeSharingModeratorRecipeCategoriesConfigId";
import { putrecipeSharingModeratorRecipeCategoriesConfigId } from "../../../../providers/putrecipeSharingModeratorRecipeCategoriesConfigId";
import { deleterecipeSharingModeratorRecipeCategoriesConfigId } from "../../../../providers/deleterecipeSharingModeratorRecipeCategoriesConfigId";

import { IRecipeSharingRecipeCategoriesConfig } from "../../../../api/structures/IRecipeSharingRecipeCategoriesConfig";
import { IPageIRecipeSharingRecipeCategoriesConfig } from "../../../../api/structures/IPageIRecipeSharingRecipeCategoriesConfig";

@Controller("/recipeSharing/moderator/recipeCategoriesConfig")
export class RecipesharingModeratorRecipecategoriesconfigController {
  /**
   * Create new recipe category configuration.
   *
   * Create a new recipe category configuration.
   *
   * Accepts the required code and name fields, optional description, and
   * timestamps.
   *
   * Accessible only by moderators for category management purposes.
   *
   * Returns the detailed entity of the created recipe category configuration.
   *
   * @param connection
   * @param body Creation information for a new recipe category configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createRecipeCategoriesConfig(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingRecipeCategoriesConfig.ICreate,
  ): Promise<IRecipeSharingRecipeCategoriesConfig> {
    try {
      return await postrecipeSharingModeratorRecipeCategoriesConfig({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list recipe category configurations.
   *
   * Retrieve a filtered, paginated list of recipe category configurations for
   * administrative purposes.
   *
   * Supports filtering by category code, name, and description with partial
   * matching, pagination, and sorting.
   *
   * This allows frontend clients to efficiently fetch recipe categories with
   * rich querying.
   *
   * No path parameters are required.
   *
   * Roles with moderator privileges may access this operation.
   *
   * Response includes concise summary information suitable for list views.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for recipe category
   *   configurations
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexRecipeCategoriesConfig(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingRecipeCategoriesConfig.IRequest,
  ): Promise<IPageIRecipeSharingRecipeCategoriesConfig.ISummary> {
    try {
      return await patchrecipeSharingModeratorRecipeCategoriesConfig({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get recipe category configuration by ID.
   *
   * Fetch detailed information of a recipe category configuration by its unique
   * id.
   *
   * Includes all properties such as code, name, description, and timestamps.
   *
   * The path parameter 'id' is required to uniquely specify the target record.
   *
   * Accessible only to authenticated moderators.
   *
   * This facilitates viewing and editing full category details.
   *
   * @param connection
   * @param id Unique identifier of the recipe category configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async atRecipeCategoriesConfig(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingRecipeCategoriesConfig> {
    try {
      return await getrecipeSharingModeratorRecipeCategoriesConfigId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific recipe category configuration by ID.
   *
   * Update the details of a predefined recipe category configuration.
   *
   * This operation modifies a recipe category config identified by its unique
   * ID. It enables updating the 'code' which is a unique identifier for the
   * category, the human-readable 'name', and an optional 'description'. The
   * update affects the respective timestamps to record the modification
   * instant.
   *
   * Security considerations include authorization checks to ensure only
   * permitted user roles can update category configurations, preventing
   * unauthorized changes.
   *
   * The business logic enforces uniqueness of the 'code' field to maintain
   * consistency across the platform's category taxonomy. Related operations
   * include creating new category configs and deleting obsolete configs.
   *
   * Validation rules require the 'code' and 'name' to be non-empty strings. The
   * 'description' can be null or a descriptive string.
   *
   * This operation directly updates the
   * 'recipe_sharing_recipe_categories_config' table as defined in the Prisma
   * schema.
   *
   * @param connection
   * @param id Unique identifier of the recipe category configuration to update
   * @param body Updated data for the recipe category configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async updateRecipeCategoryConfig(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRecipeCategoriesConfig.IUpdate,
  ): Promise<IRecipeSharingRecipeCategoriesConfig> {
    try {
      return await putrecipeSharingModeratorRecipeCategoriesConfigId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific recipe category configuration by ID.
   *
   * Permanently remove a recipe category configuration identified by its unique
   * ID.
   *
   * This operation performs a hard delete on the record in the
   * 'recipe_sharing_recipe_categories_config' table corresponding to the given
   * ID. After deletion, the category configuration will no longer exist in the
   * system.
   *
   * Security checks ensure only authorized user roles can execute this
   * operation. Adequate validation confirms that the category exists before
   * attempting deletion.
   *
   * Related maintenance operations may include updating or re-creating category
   * configurations.
   *
   * This irreversible action cleanly removes all traces of the configuration
   * entry from the database.
   *
   * @param connection
   * @param id Unique identifier of the recipe category configuration to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async eraseRecipeCategoryConfig(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorRecipeCategoriesConfigId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
