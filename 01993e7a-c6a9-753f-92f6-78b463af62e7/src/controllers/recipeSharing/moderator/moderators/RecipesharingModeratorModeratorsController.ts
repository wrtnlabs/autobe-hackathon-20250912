import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingModeratorModerators } from "../../../../providers/patchrecipeSharingModeratorModerators";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getrecipeSharingModeratorModeratorsId } from "../../../../providers/getrecipeSharingModeratorModeratorsId";
import { putrecipeSharingModeratorModeratorsId } from "../../../../providers/putrecipeSharingModeratorModeratorsId";
import { deleterecipeSharingModeratorModeratorsId } from "../../../../providers/deleterecipeSharingModeratorModeratorsId";

import { IPageIRecipeSharingModerator } from "../../../../api/structures/IPageIRecipeSharingModerator";
import { IRecipeSharingModerator } from "../../../../api/structures/IRecipeSharingModerator";

@Controller("/recipeSharing/moderator/moderators")
export class RecipesharingModeratorModeratorsController {
  /**
   * Search and retrieve a list of moderator user accounts.
   *
   * Retrieve a filtered and paginated list of moderator accounts in the Recipe
   * Sharing Backend system. This operation supports searching and sorting by
   * moderator attributes including email, username, and timestamps for creation
   * and last update.
   *
   * Security for this endpoint requires authentication with the 'moderator'
   * role to prevent unauthorized access to sensitive user data. The response
   * returns summary information optimized for management interfaces showing
   * essential moderator details.
   *
   * The operation corresponds to the recipe_sharing_moderators table which
   * stores authentication and auditing information for moderators, including
   * email, hashed passwords, and timestamps. Pagination ensures scalable
   * retrieval for large numbers of moderators.
   *
   * This endpoint integrates standard pagination parameters alongside search
   * criteria in the request body, allowing flexible queries. The response
   * provides a paginated list structure with moderator summary information.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering
   *   moderators
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingModerator.IRequest,
  ): Promise<IPageIRecipeSharingModerator.ISummary> {
    try {
      return await patchrecipeSharingModeratorModerators({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed moderator information by ID.
   *
   * Retrieve detailed information of a single moderator user identified by
   * their unique ID in the Recipe Sharing Backend system. This includes email,
   * username, creation and update timestamps. Password hashes are not returned
   * to ensure security.
   *
   * The operation requires a path parameter 'id' that corresponds to the
   * moderator's UUID. Only authenticated users with the 'moderator' role may
   * access this information, ensuring data protection.
   *
   * The moderator data is sourced from the recipe_sharing_moderators Prisma
   * model, which manages authentication and audit information. This operation
   * is useful for administrative user account management and status checking.
   *
   * @param connection
   * @param id Unique identifier of the target moderator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingModerator> {
    try {
      return await getrecipeSharingModeratorModeratorsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update moderator user information by ID.
   *
   * Update a moderator user's information by their unique ID. The update may
   * include changes to the email, username, or password hash. This operation
   * enforces security by limiting access to authenticated moderators.
   *
   * Input validation ensures email uniqueness and username format compliance.
   * The update reflects in the recipe_sharing_moderators database table,
   * maintaining audit timestamps.
   *
   * This endpoint supports administrative maintenance of moderator accounts
   * such as credential updates and profile management.
   *
   * @param connection
   * @param id Unique identifier of the target moderator user
   * @param body Update data for the moderator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingModerator.IUpdate,
  ): Promise<IRecipeSharingModerator> {
    try {
      return await putrecipeSharingModeratorModeratorsId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a moderator user by ID.
   *
   * Permanently delete a moderator user from the system by their unique ID.
   * This is a hard delete operation that cannot be undone. It removes all
   * associated data from the recipe_sharing_moderators table.
   *
   * The operation requires the path parameter 'id' as the unique identifier of
   * the moderator to erase. Only users with the 'moderator' role may perform
   * this action to ensure strict control.
   *
   * There is no request body or response content. The successful execution
   * results in the complete removal of the moderator user record.
   *
   * @param connection
   * @param id Unique identifier of the target moderator user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorModeratorsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
