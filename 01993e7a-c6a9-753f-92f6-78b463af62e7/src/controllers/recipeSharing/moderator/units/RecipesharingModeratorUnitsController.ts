import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleterecipeSharingModeratorUnitsId } from "../../../../providers/deleterecipeSharingModeratorUnitsId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

@Controller("/recipeSharing/moderator/units/:id")
export class RecipesharingModeratorUnitsController {
  /**
   * Delete unit of measure by ID from the database.
   *
   * Permanently delete the specified unit of measure by its unique identifier.
   * This operation removes the record from the database and cannot be undone.
   * It requires moderator-level authorization to prevent accidental or
   * unauthorized deletion.
   *
   * The path parameter 'id' is the UUID identifier of the unit to delete. If
   * the unit does not exist, an error is returned. This endpoint only supports
   * HTTP DELETE method and does not require a request body or response body.
   *
   * Ensure proper validation, authorization, and error handling on the backend
   * to maintain data integrity and security.
   *
   * @param connection
   * @param id Unique identifier of the unit to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorUnitsId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
