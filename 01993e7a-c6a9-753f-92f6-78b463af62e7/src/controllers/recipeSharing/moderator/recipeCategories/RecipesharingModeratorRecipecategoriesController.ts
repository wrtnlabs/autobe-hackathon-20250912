import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorRecipeCategories } from "../../../../providers/postrecipeSharingModeratorRecipeCategories";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorRecipeCategoriesRecipeCategoryId } from "../../../../providers/putrecipeSharingModeratorRecipeCategoriesRecipeCategoryId";
import { deleterecipeSharingModeratorRecipeCategoriesRecipeCategoryId } from "../../../../providers/deleterecipeSharingModeratorRecipeCategoriesRecipeCategoryId";

import { IRecipeSharingRecipeCategory } from "../../../../api/structures/IRecipeSharingRecipeCategory";

@Controller("/recipeSharing/moderator/recipeCategories")
export class RecipesharingModeratorRecipecategoriesController {
  /**
   * Create a new recipe category in the system.
   *
   * Inputs must include category type (e.g., cuisine, diet, difficulty) and
   * unique category name.
   *
   * Optional description allows further metadata about the category.
   *
   * The system validates inputs and uniqueness constraints before saving.
   *
   * Only authorized users (e.g., moderators) can perform this operation to
   * maintain controlled taxonomy.
   *
   * Upon successful creation, the full category entity is returned.
   *
   * This is foundational for expanding category options for recipe tagging and
   * filtering.
   *
   * Error handling captures duplicate names and validation failures with
   * meaningful messages.
   *
   * @param connection
   * @param body Creation info for a new recipe category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingRecipeCategory.ICreate,
  ): Promise<IRecipeSharingRecipeCategory> {
    try {
      return await postrecipeSharingModeratorRecipeCategories({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing recipe category by ID.
   *
   * Update an existing recipe category with specified details.
   *
   * This operation supports modification of category type, name, and
   * description.
   *
   * Input is validated for uniqueness and compliance with schema.
   *
   * Only authorized moderators can perform updates to preserve taxonomy
   * integrity.
   *
   * The response returns the full updated category record upon success.
   *
   * Errors are returned when the category is not found or inputs are invalid.
   *
   * @param connection
   * @param recipeCategoryId Unique identifier of the recipe category to update
   * @param body Update info for an existing recipe category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":recipeCategoryId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("recipeCategoryId")
    recipeCategoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingRecipeCategory.IUpdate,
  ): Promise<IRecipeSharingRecipeCategory> {
    try {
      return await putrecipeSharingModeratorRecipeCategoriesRecipeCategoryId({
        moderator,
        recipeCategoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a recipe category by ID.
   *
   * Delete a recipe category by its unique identifier.
   *
   * This operation permanently removes the recipe category record identified by
   * `recipeCategoryId` from the database. As recipe categories are fundamental
   * to recipe organization, deletion should be performed only by authorized
   * moderators with a clear need. Upon successful deletion, the category will
   * no longer be available for tagging or filtering recipes.
   *
   * The request requires a valid UUID of the recipe category. Proper
   * authentication and authorization checks for moderator role access are
   * expected.
   *
   * Related operations include retrieval or updating of recipe categories.
   *
   * Errors may occur if the category is associated with active recipes or if
   * the ID does not exist.
   *
   * Consumers should handle these cases appropriately.
   *
   * @param connection
   * @param recipeCategoryId Unique identifier of the recipe category to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":recipeCategoryId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("recipeCategoryId")
    recipeCategoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorRecipeCategoriesRecipeCategoryId(
        {
          moderator,
          recipeCategoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
