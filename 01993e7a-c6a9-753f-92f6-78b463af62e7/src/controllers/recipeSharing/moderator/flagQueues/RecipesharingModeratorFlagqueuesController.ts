import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingModeratorFlagQueues } from "../../../../providers/patchrecipeSharingModeratorFlagQueues";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { getrecipeSharingModeratorFlagQueuesId } from "../../../../providers/getrecipeSharingModeratorFlagQueuesId";
import { putrecipeSharingModeratorFlagQueuesId } from "../../../../providers/putrecipeSharingModeratorFlagQueuesId";
import { deleterecipeSharingModeratorFlagQueuesId } from "../../../../providers/deleterecipeSharingModeratorFlagQueuesId";

import { IPageIRecipeSharingFlagQueues } from "../../../../api/structures/IPageIRecipeSharingFlagQueues";
import { IRecipeSharingFlagQueues } from "../../../../api/structures/IRecipeSharingFlagQueues";
import { IRecipeSharingFlagQueue } from "../../../../api/structures/IRecipeSharingFlagQueue";

@Controller("/recipeSharing/moderator/flagQueues")
export class RecipesharingModeratorFlagqueuesController {
  /**
   * Get paginated flagged review queue list for moderation.
   *
   * Retrieve a list of flagged review queues with support for pagination,
   * filtering, and sorting. Intended for moderators to efficiently manage
   * review flags and prioritize moderation tasks.
   *
   * Access restricted to authenticated moderators only.
   *
   * Proper validations on input filters ensure secure and controlled data
   * retrieval.
   *
   * @param connection
   * @param body Pagination and filter parameters for flagged review queues
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingFlagQueues.IRequest,
  ): Promise<IPageIRecipeSharingFlagQueues> {
    try {
      return await patchrecipeSharingModeratorFlagQueues({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get flagged review queue entry details by ID.
   *
   * Fetch detailed information for a single flagged review queue entry
   * identified by its ID. This supports moderator decision-making in the
   * content moderation workflow.
   *
   * Restricted to authenticated moderator users.
   *
   * Includes comprehensive details of the flagged review, reporting user, flag
   * reason, and status.
   *
   * Returns a 404 error if the entry does not exist or cannot be accessed due
   * to permissions.
   *
   * @param connection
   * @param id ID of the flagged review queue entry to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingFlagQueues> {
    try {
      return await getrecipeSharingModeratorFlagQueuesId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing flag queue entry by ID.
   *
   * This API endpoint allows authorized moderators or system users to update an
   * existing flag queue entry by its ID. It can modify the flag reason, status
   * (such as pending, in_review, resolved, or dismissed), or the linked review
   * ID.
   *
   * The operation requires providing the flag queue entry ID in the path and
   * the updated flag queue details in the request body.
   *
   * Security considerations require that only moderators have permission to
   * update flag queues.
   *
   * Upon successful update, the entry is persisted in the database with updated
   * timestamps.
   *
   * Errors include invalid IDs, unauthorized access, or invalid status
   * transitions.
   *
   * This operation updates records in the recipe_sharing_flag_queues table by
   * primary key.
   *
   * @param connection
   * @param id Target flag queue entry ID
   * @param body Updated flag queue details
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingFlagQueue.IUpdate,
  ): Promise<IRecipeSharingFlagQueue> {
    try {
      return await putrecipeSharingModeratorFlagQueuesId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a flag queue entry by ID.
   *
   * This API endpoint allows authorized moderators to permanently delete a flag
   * queue entry by its ID. This removes the entry from the moderation queue and
   * database permanently.
   *
   * The operation requires the flag queue entry ID to be specified in the path.
   *
   * Security checks ensure only moderators can perform deletions.
   *
   * No request body is needed.
   *
   * This performs a hard delete from the recipe_sharing_flag_queues table,
   * after which the entry cannot be recovered.
   *
   * Errors include non-existent IDs or unauthorized access attempts.
   *
   * @param connection
   * @param id Target flag queue entry ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorFlagQueuesId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
