import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorDietCategories } from "../../../../providers/postrecipeSharingModeratorDietCategories";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorDietCategoriesId } from "../../../../providers/putrecipeSharingModeratorDietCategoriesId";
import { deleterecipeSharingModeratorDietCategoriesId } from "../../../../providers/deleterecipeSharingModeratorDietCategoriesId";

import { IRecipeSharingDietCategory } from "../../../../api/structures/IRecipeSharingDietCategory";

@Controller("/recipeSharing/moderator/dietCategories")
export class RecipesharingModeratorDietcategoriesController {
  /**
   * Create a new diet category.
   *
   * Creates a new diet category in the system to classify recipes and user
   * dietary preferences.
   *
   * This operation requires supplying a unique code and name for the diet
   * category, with an optional description for clarity.
   *
   * Security considerations include restricting this creation endpoint to
   * authenticated moderator roles to prevent unauthorized category
   * manipulation.
   *
   * The operation affects the 'recipe_sharing_diet_categories' table, adding a
   * new record with automatic creation and update timestamps.
   *
   * Validation ensures the uniqueness of the category code and proper
   * formatting of data, returning errors if conflicts or invalid data occur.
   *
   * Related operations include updating existing diet categories and deleting
   * them when deprecated.
   *
   * Errors will be returned if code or name are missing or violate uniqueness
   * constraints.
   *
   * @param connection
   * @param body Information to create a new diet category
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingDietCategory.ICreate,
  ): Promise<IRecipeSharingDietCategory> {
    try {
      return await postrecipeSharingModeratorDietCategories({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing diet category.
   *
   * Updates the properties of an existing diet category in the system.
   *
   * The category is located by its unique ID provided as a path parameter.
   *
   * Fields that can be updated include the category's code, name, and
   * description to reflect changes or corrections.
   *
   * Security restrictions ensure only users with appropriate moderator
   * permissions can perform updates.
   *
   * Successful updates modify the 'recipe_sharing_diet_categories' table record
   * and refresh the update timestamp.
   *
   * Validation enforces uniqueness constraints for the code and verifies data
   * integrity.
   *
   * Related operations include creation of new diet categories and deletion of
   * outdated ones.
   *
   * Errors occur if the ID is invalid or if uniqueness constraints fail.
   *
   * @param connection
   * @param id Unique identifier of the diet category to update
   * @param body Updated diet category information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingDietCategory.IUpdate,
  ): Promise<IRecipeSharingDietCategory> {
    try {
      return await putrecipeSharingModeratorDietCategoriesId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a diet category.
   *
   * Deletes a diet category identified by its unique ID from the database.
   *
   * This operation performs a hard deletion, permanently removing all
   * associated records of the diet category.
   *
   * The endpoint requires authorized moderator users to prevent accidental or
   * unauthorized deletions.
   *
   * No response body is returned upon successful deletion.
   *
   * This affects the 'recipe_sharing_diet_categories' table in the Prisma
   * database.
   *
   * Errors are returned for invalid IDs or unauthorized access.
   *
   * @param connection
   * @param id Unique identifier of the diet category to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorDietCategoriesId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
