import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleterecipeSharingModeratorStoreIngredientPricesStoreIngredientPriceId } from "../../../../providers/deleterecipeSharingModeratorStoreIngredientPricesStoreIngredientPriceId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

@Controller(
  "/recipeSharing/moderator/storeIngredientPrices/:storeIngredientPriceId",
)
export class RecipesharingModeratorStoreingredientpricesController {
  /**
   * Delete a store ingredient price record by ID.
   *
   * This API permanently deletes a store ingredient price record identified by
   * its unique UUID (storeIngredientPriceId) from the
   * recipe_sharing_store_ingredient_prices table.
   *
   * This operation is critical for maintaining clean store pricing data and is
   * intended for use by administrators or authorized backend processes.
   *
   * Successful deletion results in no content returned.
   *
   * Only users with the correct authorization role may invoke this endpoint.
   *
   * The path parameter 'storeIngredientPriceId' is required to precisely
   * specify which record to delete.
   *
   * @param connection
   * @param storeIngredientPriceId UUID of the store ingredient price to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseStoreIngredientPrice(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("storeIngredientPriceId")
    storeIngredientPriceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorStoreIngredientPricesStoreIngredientPriceId(
        {
          moderator,
          storeIngredientPriceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
