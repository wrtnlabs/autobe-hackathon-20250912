import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postrecipeSharingModeratorSystemConfig } from "../../../../providers/postrecipeSharingModeratorSystemConfig";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { putrecipeSharingModeratorSystemConfigId } from "../../../../providers/putrecipeSharingModeratorSystemConfigId";
import { deleterecipeSharingModeratorSystemConfigId } from "../../../../providers/deleterecipeSharingModeratorSystemConfigId";

import { IRecipeSharingSystemConfig } from "../../../../api/structures/IRecipeSharingSystemConfig";

@Controller("/recipeSharing/moderator/systemConfig")
export class RecipesharingModeratorSystemconfigController {
  /**
   * Create new system configuration entry.
   *
   * Add a new system configuration setting with a unique key and associated
   * value. Optional description can provide context. The timestamps for
   * creation and update are handled automatically.
   *
   * This operation requires moderator authorization to restrict configuration
   * changes to trusted users only.
   *
   * The request body must contain all required fields to create the new system
   * configuration entry.
   *
   * Successful creation returns the full system configuration object including
   * timestamps.
   *
   * Ensure uniqueness of the 'key' field to prevent duplicate entries.
   *
   * @param connection
   * @param body Data required to create system configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingSystemConfig.ICreate,
  ): Promise<IRecipeSharingSystemConfig> {
    try {
      return await postrecipeSharingModeratorSystemConfig({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a system configuration entry by ID.
   *
   * Update a system configuration record by its unique identifier. The
   * operation modifies the 'value' and optional 'description' fields of the
   * system configuration, preserving creation and update timestamps
   * automatically. Access to this operation is restricted to administrators who
   * manage global system settings.
   *
   * This operation directly interacts with the 'recipe_sharing_system_config'
   * table, ensuring configuration consistency across the platform. Validation
   * includes verifying the existence of the configuration ID and input data,
   * guaranteeing integrity and security.
   *
   * Proper error responses must be returned for invalid inputs or insufficient
   * permissions.
   *
   * @param connection
   * @param id Identifier of the target system configuration entry
   * @param body System configuration update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IRecipeSharingSystemConfig.IUpdate,
  ): Promise<IRecipeSharingSystemConfig> {
    try {
      return await putrecipeSharingModeratorSystemConfigId({
        moderator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a system configuration by ID.
   *
   * Permanently remove a system configuration record by its unique identifier.
   * Because the schema lacks soft delete columns, this operation deletes the
   * record irreversibly.
   *
   * Access is restricted to moderators responsible for system maintenance.
   * Successful deletion returns no content.
   *
   * Proper error handling must address non-existent records and unauthorized
   * access attempts.
   *
   * @param connection
   * @param id Unique identifier of the system configuration entry to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleterecipeSharingModeratorSystemConfigId({
        moderator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
