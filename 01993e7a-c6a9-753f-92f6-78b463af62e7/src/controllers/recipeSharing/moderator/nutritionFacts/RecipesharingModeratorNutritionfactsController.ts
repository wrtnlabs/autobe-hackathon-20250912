import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchrecipeSharingModeratorNutritionFacts } from "../../../../providers/patchrecipeSharingModeratorNutritionFacts";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IPageIRecipeSharingNutritionFact } from "../../../../api/structures/IPageIRecipeSharingNutritionFact";
import { IRecipeSharingNutritionFact } from "../../../../api/structures/IRecipeSharingNutritionFact";

@Controller("/recipeSharing/moderator/nutritionFacts")
export class RecipesharingModeratorNutritionfactsController {
  /**
   * Search and list nutrition facts with filtering and pagination.
   *
   * Fetch a filtered and paginated list of ingredient nutrition facts.
   *
   * Supports searching by nutrient values, ranges, and keyword filters.
   *
   * Pagination allows efficient navigation through large data sets.
   *
   * Only users with admin or moderator privileges may invoke this operation.
   *
   * Proper use of request filters can optimize querying performance.
   *
   * Response data includes summarized nutrition fact entries suitable for list
   * displays.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for nutrition facts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async searchNutritionFacts(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IRecipeSharingNutritionFact.IRequest,
  ): Promise<IPageIRecipeSharingNutritionFact.ISummary> {
    try {
      return await patchrecipeSharingModeratorNutritionFacts({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
