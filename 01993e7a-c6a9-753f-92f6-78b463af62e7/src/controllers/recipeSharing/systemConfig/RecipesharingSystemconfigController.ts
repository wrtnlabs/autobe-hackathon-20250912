import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingSystemConfig } from "../../../providers/patchrecipeSharingSystemConfig";
import { getrecipeSharingSystemConfigId } from "../../../providers/getrecipeSharingSystemConfigId";

import { IPageIRecipeSharingSystemConfig } from "../../../api/structures/IPageIRecipeSharingSystemConfig";
import { IRecipeSharingSystemConfig } from "../../../api/structures/IRecipeSharingSystemConfig";

@Controller("/recipeSharing/systemConfig")
export class RecipesharingSystemconfigController {
  /**
   * Retrieve paginated system configuration entries.
   *
   * Retrieve a paginated list of system configuration entries matching the
   * provided search criteria. The request accepts pagination parameters such as
   * page number and size, sorting options including ascending or descending,
   * and filters by keys or values.
   *
   * The system configurations consist of key-value pairs used globally in the
   * application. This operation allows clients to query configurations
   * dynamically for monitoring or administrative display.
   *
   * No authentication is required, making this endpoint publicly accessible for
   * read-only operations. Response includes total count and pages as well as
   * data matching the search criteria.
   *
   * @param connection
   * @param body Request parameters including filters, search terms, pagination,
   *   and sorting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IRecipeSharingSystemConfig.IRequest,
  ): Promise<IPageIRecipeSharingSystemConfig> {
    try {
      return await patchrecipeSharingSystemConfig({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get system configuration entry by ID.
   *
   * Retrieve detailed data for a given system configuration by its unique ID.
   * The response payload contains all configuration fields necessary for
   * complete information.
   *
   * The path parameter 'id' is the UUID of the system configuration to
   * retrieve. If no matching record is found, an error is returned.
   *
   * The endpoint supports HTTP GET method without a request body.
   *
   * There are no authorization requirements for this operation, making it
   * publicly accessible.
   *
   * Use this endpoint to fetch individual system configuration details for
   * management or display purposes.
   *
   * @param connection
   * @param id Unique identifier of the system configuration entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingSystemConfig> {
    try {
      return await getrecipeSharingSystemConfigId({
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
