import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchrecipeSharingPremiumUserPersonalizedFeeds } from "../../../../providers/patchrecipeSharingPremiumUserPersonalizedFeeds";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { getrecipeSharingPremiumUserPersonalizedFeedsPersonalizedFeedId } from "../../../../providers/getrecipeSharingPremiumUserPersonalizedFeedsPersonalizedFeedId";

import { IPageIRecipeSharingPersonalizedFeed } from "../../../../api/structures/IPageIRecipeSharingPersonalizedFeed";
import { IRecipeSharingPersonalizedFeed } from "../../../../api/structures/IRecipeSharingPersonalizedFeed";

@Controller("/recipeSharing/premiumUser/personalizedFeeds")
export class RecipesharingPremiumuserPersonalizedfeedsController {
  /**
   * Search personalized feeds with filtering and pagination.
   *
   * Retrieve personalized feed entries for a user according to the supplied
   * filtering and pagination criteria. The response contains a paginated list
   * of summarized personalized feed entries including recipe and originator
   * information.
   *
   * Supports filtering by user ID, recipe ID, originator user ID, and sorting
   * by creation time.
   *
   * Authorized access is limited to authenticated regular and premium users.
   *
   * This API correlates with the recipe_sharing_personalized_feeds Prisma table
   * that defines the personalized feed entries per user.
   *
   * @param connection
   * @param body Search parameters for personalized feed filtering and
   *   pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedBody()
    body: IRecipeSharingPersonalizedFeed.IRequest,
  ): Promise<IPageIRecipeSharingPersonalizedFeed.ISummary> {
    try {
      return await patchrecipeSharingPremiumUserPersonalizedFeeds({
        premiumUser,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed personalized feed entry by ID.
   *
   * Retrieve detailed information about a personalized feed entry by its ID
   * specified in the path parameter.
   *
   * The response contains the full data for the targeted feed entry including
   * user, recipe, and originator user information.
   *
   * Authorization is required for regular and premium users to access their
   * personalized feeds.
   *
   * If the entry does not exist or access is denied, an error will be returned.
   *
   * This operation maps to the recipe_sharing_personalized_feeds Prisma table
   * representing personalized feeds.
   *
   * @param connection
   * @param personalizedFeedId Target personalized feed entry ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":personalizedFeedId")
  public async at(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("personalizedFeedId")
    personalizedFeedId: string & tags.Format<"uuid">,
  ): Promise<IRecipeSharingPersonalizedFeed> {
    try {
      return await getrecipeSharingPremiumUserPersonalizedFeedsPersonalizedFeedId(
        {
          premiumUser,
          personalizedFeedId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
