import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia from "typia";
import { putrecipeSharingPremiumUserShoppingListsShoppingListId } from "../../../../providers/putrecipeSharingPremiumUserShoppingListsShoppingListId";
import { PremiumuserAuth } from "../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../decorators/payload/PremiumuserPayload";
import { deleterecipeSharingPremiumUserShoppingListsShoppingListId } from "../../../../providers/deleterecipeSharingPremiumUserShoppingListsShoppingListId";

import { IRecipeSharingShoppingList } from "../../../../api/structures/IRecipeSharingShoppingList";

@Controller("/recipeSharing/premiumUser/shoppingLists/:shoppingListId")
export class RecipesharingPremiumuserShoppinglistsController {
  /**
   * Update an existing shopping list by ID.
   *
   * Update an existing shopping list belonging to the authenticated user. This
   * operation allows modifying fields such as the shopping list's name and
   * timestamps while maintaining data integrity and user ownership validation.
   *
   * Security considerations restrict updates to shopping lists owned by the
   * requesting user, ensuring privacy and proper access control.
   *
   * This API endpoint operates on the 'recipe_sharing_shopping_lists' table
   * from the Prisma schema, which maintains shopping lists created for
   * consolidating ingredient quantities needed for meal planning and grocery
   * shopping.
   *
   * Upon successful update, the updated shopping list information is returned.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list to update
   * @param body Shopping list update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
    @TypedBody()
    body: IRecipeSharingShoppingList.IUpdate,
  ): Promise<IRecipeSharingShoppingList> {
    try {
      return await putrecipeSharingPremiumUserShoppingListsShoppingListId({
        premiumUser,
        shoppingListId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a shopping list by ID.
   *
   * Permanently delete a shopping list owned by the authenticated user. This
   * operation removes the shopping list record and all related shopping list
   * items from the database.
   *
   * Security measures ensure only the owner of the shopping list can perform
   * deletion, preventing unauthorized data removal.
   *
   * This API operation corresponds to the 'recipe_sharing_shopping_lists' table
   * in the Prisma Prisma schema, which stores user-generated shopping lists
   * with soft delete support. This delete operation performs a hard delete
   * eliminating the record entirely.
   *
   * No content is returned on successful deletion.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
  ): Promise<void> {
    try {
      return await deleterecipeSharingPremiumUserShoppingListsShoppingListId({
        premiumUser,
        shoppingListId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
