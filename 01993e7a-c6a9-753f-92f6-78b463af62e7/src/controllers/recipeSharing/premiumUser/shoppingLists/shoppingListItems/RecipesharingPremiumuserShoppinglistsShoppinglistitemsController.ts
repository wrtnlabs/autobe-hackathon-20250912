import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia from "typia";
import { getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItems } from "../../../../../providers/getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItems";
import { PremiumuserAuth } from "../../../../../decorators/PremiumuserAuth";
import { PremiumuserPayload } from "../../../../../decorators/payload/PremiumuserPayload";
import { getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId } from "../../../../../providers/getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId";

import { IPageIRecipeSharingShoppingListItem } from "../../../../../api/structures/IPageIRecipeSharingShoppingListItem";
import { IRecipeSharingShoppingListItem } from "../../../../../api/structures/IRecipeSharingShoppingListItem";

@Controller(
  "/recipeSharing/premiumUser/shoppingLists/:shoppingListId/shoppingListItems",
)
export class RecipesharingPremiumuserShoppinglistsShoppinglistitemsController {
  /**
   * List all items in a shopping list.
   *
   * Retrieve all items within a specific shopping list owned by the
   * authenticated user.
   *
   * Each shopping list item consists of an ingredient, its quantity,
   * measurement unit, and optional user notes.
   *
   * Security controls restrict access to items of shopping lists owned by the
   * user, ensuring privacy.
   *
   * This operation maps to the 'recipe_sharing_shopping_list_items' table in
   * the Prisma schema, which maintains detailed ingredient line items within
   * shopping lists.
   *
   * Returns the full list of detailed shopping list item records.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list whose items
   *   are requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
  ): Promise<IPageIRecipeSharingShoppingListItem.ISummary> {
    try {
      return await getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItems(
        {
          premiumUser,
          shoppingListId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific shopping list item by ID.
   *
   * Retrieve a specific shopping list item by its unique identifier within the
   * specified shopping list.
   *
   * The item details include ingredient reference, quantity, measurement unit,
   * and optional notes.
   *
   * Access is restricted to the shopping list owner or authorized users.
   *
   * This operation leverages the 'recipe_sharing_shopping_list_items' table in
   * the Prisma schema.
   *
   * Returns the detailed shopping list item entity.
   *
   * @param connection
   * @param shoppingListId Unique identifier of the shopping list containing the
   *   item
   * @param shoppingListItemId Unique identifier of the shopping list item to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shoppingListItemId")
  public async at(
    @PremiumuserAuth()
    premiumUser: PremiumuserPayload,
    @TypedParam("shoppingListId")
    shoppingListId: string,
    @TypedParam("shoppingListItemId")
    shoppingListItemId: string,
  ): Promise<IRecipeSharingShoppingListItem> {
    try {
      return await getrecipeSharingPremiumUserShoppingListsShoppingListIdShoppingListItemsShoppingListItemId(
        {
          premiumUser,
          shoppingListId,
          shoppingListItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
