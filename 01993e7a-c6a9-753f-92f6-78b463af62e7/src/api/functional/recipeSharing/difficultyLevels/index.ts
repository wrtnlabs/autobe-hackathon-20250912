import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingDifficultyLevel } from "../../../structures/IRecipeSharingDifficultyLevel";
import { IPageIRecipeSharingDifficultyLevel } from "../../../structures/IPageIRecipeSharingDifficultyLevel";
import { IRecipeSharingDifficultyLevels } from "../../../structures/IRecipeSharingDifficultyLevels";

/**
 * Retrieve paginated list of difficulty levels.
 *
 * Retrieve a filtered and paginated list of difficulty levels indicating recipe
 * complexity.
 *
 * This operation supports searching, filtering, and sorting capabilities for
 * client applications.
 *
 * Results include pagination metadata and a collection of difficulty level
 * entities.
 *
 * The 'recipe_sharing_difficulty_levels' table contains unique codes,
 * human-readable names, and optional descriptions for each difficulty level.
 *
 * Security roles may allow public access or require at least a user role
 * depending on system policy.
 *
 * This operation does not modify data but provides important metadata
 * supporting user filtering and recipe classification.
 *
 * Errors can occur if search criteria in the request body are malformed.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for difficulty
 *   levels
 * @path /recipeSharing/difficultyLevels
 * @accessor api.functional.recipeSharing.difficultyLevels.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for difficulty levels */
    body: IRecipeSharingDifficultyLevel.IRequest;
  };
  export type Body = IRecipeSharingDifficultyLevel.IRequest;
  export type Response = IPageIRecipeSharingDifficultyLevel;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/difficultyLevels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/difficultyLevels";
  export const random = (): IPageIRecipeSharingDifficultyLevel =>
    typia.random<IPageIRecipeSharingDifficultyLevel>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a difficulty level by ID.
 *
 * Retrieve detailed information of a specific difficulty level identified by
 * its ID.
 *
 * This operation provides all the properties of the difficulty level, such as
 * the unique code, the human-readable name, and any optional description. It
 * also includes audit timestamps to trace record creation and updates.
 *
 * Access is unrestricted, suitable for general consumption by both
 * authenticated and unauthenticated users, enabling users to understand recipe
 * classification in terms of difficulty.
 *
 * The response will be the single difficulty level entity or a not found error
 * if the ID does not exist.
 *
 * @param props.connection
 * @param props.id Unique identifier of the difficulty level
 * @path /recipeSharing/difficultyLevels/:id
 * @accessor api.functional.recipeSharing.difficultyLevels.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the difficulty level */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingDifficultyLevels;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/difficultyLevels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/difficultyLevels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingDifficultyLevels =>
    typia.random<IRecipeSharingDifficultyLevels>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
