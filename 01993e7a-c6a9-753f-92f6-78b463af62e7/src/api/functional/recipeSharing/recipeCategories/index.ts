import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRecipeCategory } from "../../../structures/IRecipeSharingRecipeCategory";
import { IPageIRecipeSharingRecipeCategory } from "../../../structures/IPageIRecipeSharingRecipeCategory";

/**
 * Search and retrieve a filtered, paginated list of recipe categories.
 *
 * Retrieve a filtered and paginated list of recipe categories stored in the
 * system. This operation enables clients to search and browse categories by
 * filtering on attributes such as category_type and name.
 *
 * Users can receive partial lists or full pages of category summaries. The
 * system indexes category names for efficient partial/match searches.
 *
 * Security permissions ensure this endpoint is publicly accessible as category
 * browsing is a common operation for recipe discovery.
 *
 * The recipe_sharing_recipe_categories table contains recipe category
 * definitions such as cuisine types, diet categories, and difficulty levels
 * with descriptive metadata.
 *
 * This operation is foundational for client UIs to present categorization
 * options for recipes and to enable tagging and filter-based browsing.
 *
 * Robust error handling is in place to handle filtering parameters and ensure
 * that invalid inputs yield clear errors.
 *
 * This API supports integration with tagging and recipe search modules by
 * providing category data.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for recipe
 *   category filtering
 * @path /recipeSharing/recipeCategories
 * @accessor api.functional.recipeSharing.recipeCategories.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for recipe category
     * filtering
     */
    body: IRecipeSharingRecipeCategory.IRequest;
  };
  export type Body = IRecipeSharingRecipeCategory.IRequest;
  export type Response = IPageIRecipeSharingRecipeCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/recipeCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/recipeCategories";
  export const random = (): IPageIRecipeSharingRecipeCategory.ISummary =>
    typia.random<IPageIRecipeSharingRecipeCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific recipe category by ID.
 *
 * Retrieve detailed information about a specific recipe category by its unique
 * identifier.
 *
 * This operation supports client UI components that require full category
 * details for display or editing.
 *
 * Security considerations ensure that category data can be publicly accessed
 * for browsing purposes.
 *
 * The recipe_sharing_recipe_categories table stores categorized recipe
 * information to enable filtering and tagging of recipes. Clients use this
 * endpoint to obtain metadata for specific categories.
 *
 * If the requested category does not exist, the operation returns a not found
 * error.
 *
 * No request body is required for this GET operation.
 *
 * @param props.connection
 * @param props.recipeCategoryId Unique identifier of the recipe category
 * @path /recipeSharing/recipeCategories/:recipeCategoryId
 * @accessor api.functional.recipeSharing.recipeCategories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the recipe category */
    recipeCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingRecipeCategory;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/recipeCategories/:recipeCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/recipeCategories/${encodeURIComponent(props.recipeCategoryId ?? "null")}`;
  export const random = (): IRecipeSharingRecipeCategory =>
    typia.random<IRecipeSharingRecipeCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recipeCategoryId")(() =>
        typia.assert(props.recipeCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
