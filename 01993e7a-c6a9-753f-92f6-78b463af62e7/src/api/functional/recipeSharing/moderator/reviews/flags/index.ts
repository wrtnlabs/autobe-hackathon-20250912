import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingReviewFlag } from "../../../../../structures/IRecipeSharingReviewFlag";
import { IPageIRecipeSharingReviewFlag } from "../../../../../structures/IPageIRecipeSharingReviewFlag";

/**
 * List flags on a review.
 *
 * Retrieve a paginated list of flags made on a specific recipe review.
 *
 * This operation supports filtering, sorting, and pagination based on the
 * request body parameters.
 *
 * It interacts with the recipe_sharing_review_flags table linked to the
 * specified reviewId.
 *
 * Only users with moderator roles can access and use this endpoint to review
 * flagged content.
 *
 * The response returns a paginated list of flags with detailed information
 * about each flag, including the reason and the user who flagged the review.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target review
 * @param props.body Filter and pagination parameters for review flags
 * @path /recipeSharing/moderator/reviews/:reviewId/flags
 * @accessor api.functional.recipeSharing.moderator.reviews.flags.indexFlags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexFlags(
  connection: IConnection,
  props: indexFlags.Props,
): Promise<indexFlags.Response> {
  return true === connection.simulate
    ? indexFlags.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexFlags.METADATA,
          path: indexFlags.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexFlags {
  export type Props = {
    /** Unique identifier of the target review */
    reviewId: string & tags.Format<"uuid">;

    /** Filter and pagination parameters for review flags */
    body: IRecipeSharingReviewFlag.IRequest;
  };
  export type Body = IRecipeSharingReviewFlag.IRequest;
  export type Response = IPageIRecipeSharingReviewFlag;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/reviews/:reviewId/flags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags`;
  export const random = (): IPageIRecipeSharingReviewFlag =>
    typia.random<IPageIRecipeSharingReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: indexFlags.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexFlags.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get information of a review flag.
 *
 * Get detailed information of a specific flag on a recipe review.
 *
 * This is accessible only to moderator users.
 *
 * The operation requires reviewId and flagId to identify the exact flag.
 *
 * The response returns comprehensive information about the flag record,
 * including the reason, reporter, and timestamps.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the target review
 * @param props.flagId Unique identifier of the target flag
 * @path /recipeSharing/moderator/reviews/:reviewId/flags/:flagId
 * @accessor api.functional.recipeSharing.moderator.reviews.flags.atFlag
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atFlag(
  connection: IConnection,
  props: atFlag.Props,
): Promise<atFlag.Response> {
  return true === connection.simulate
    ? atFlag.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atFlag.METADATA,
          path: atFlag.path(props),
          status: null,
        },
      );
}
export namespace atFlag {
  export type Props = {
    /** Unique identifier of the target review */
    reviewId: string & tags.Format<"uuid">;

    /** Unique identifier of the target flag */
    flagId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingReviewFlag;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/reviews/:reviewId/flags/:flagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/flags/${encodeURIComponent(props.flagId ?? "null")}`;
  export const random = (): IRecipeSharingReviewFlag =>
    typia.random<IRecipeSharingReviewFlag>();
  export const simulate = (
    connection: IConnection,
    props: atFlag.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atFlag.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("flagId")(() => typia.assert(props.flagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
