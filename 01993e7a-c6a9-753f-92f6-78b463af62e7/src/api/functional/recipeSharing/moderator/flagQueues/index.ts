import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingFlagQueues } from "../../../../structures/IRecipeSharingFlagQueues";
import { IPageIRecipeSharingFlagQueues } from "../../../../structures/IPageIRecipeSharingFlagQueues";
import { IRecipeSharingFlagQueue } from "../../../../structures/IRecipeSharingFlagQueue";

/**
 * Get paginated flagged review queue list for moderation.
 *
 * Retrieve a list of flagged review queues with support for pagination,
 * filtering, and sorting. Intended for moderators to efficiently manage review
 * flags and prioritize moderation tasks.
 *
 * Access restricted to authenticated moderators only.
 *
 * Proper validations on input filters ensure secure and controlled data
 * retrieval.
 *
 * @param props.connection
 * @param props.body Pagination and filter parameters for flagged review queues
 * @path /recipeSharing/moderator/flagQueues
 * @accessor api.functional.recipeSharing.moderator.flagQueues.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Pagination and filter parameters for flagged review queues */
    body: IRecipeSharingFlagQueues.IRequest;
  };
  export type Body = IRecipeSharingFlagQueues.IRequest;
  export type Response = IPageIRecipeSharingFlagQueues;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/flagQueues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/flagQueues";
  export const random = (): IPageIRecipeSharingFlagQueues =>
    typia.random<IPageIRecipeSharingFlagQueues>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get flagged review queue entry details by ID.
 *
 * Fetch detailed information for a single flagged review queue entry identified
 * by its ID. This supports moderator decision-making in the content moderation
 * workflow.
 *
 * Restricted to authenticated moderator users.
 *
 * Includes comprehensive details of the flagged review, reporting user, flag
 * reason, and status.
 *
 * Returns a 404 error if the entry does not exist or cannot be accessed due to
 * permissions.
 *
 * @param props.connection
 * @param props.id ID of the flagged review queue entry to retrieve
 * @path /recipeSharing/moderator/flagQueues/:id
 * @accessor api.functional.recipeSharing.moderator.flagQueues.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the flagged review queue entry to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingFlagQueues;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/moderator/flagQueues/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/flagQueues/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingFlagQueues =>
    typia.random<IRecipeSharingFlagQueues>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing flag queue entry by ID.
 *
 * This API endpoint allows authorized moderators or system users to update an
 * existing flag queue entry by its ID. It can modify the flag reason, status
 * (such as pending, in_review, resolved, or dismissed), or the linked review
 * ID.
 *
 * The operation requires providing the flag queue entry ID in the path and the
 * updated flag queue details in the request body.
 *
 * Security considerations require that only moderators have permission to
 * update flag queues.
 *
 * Upon successful update, the entry is persisted in the database with updated
 * timestamps.
 *
 * Errors include invalid IDs, unauthorized access, or invalid status
 * transitions.
 *
 * This operation updates records in the recipe_sharing_flag_queues table by
 * primary key.
 *
 * @param props.connection
 * @param props.id Target flag queue entry ID
 * @param props.body Updated flag queue details
 * @path /recipeSharing/moderator/flagQueues/:id
 * @accessor api.functional.recipeSharing.moderator.flagQueues.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target flag queue entry ID */
    id: string & tags.Format<"uuid">;

    /** Updated flag queue details */
    body: IRecipeSharingFlagQueue.IUpdate;
  };
  export type Body = IRecipeSharingFlagQueue.IUpdate;
  export type Response = IRecipeSharingFlagQueue;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/flagQueues/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/flagQueues/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingFlagQueue =>
    typia.random<IRecipeSharingFlagQueue>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a flag queue entry by ID.
 *
 * This API endpoint allows authorized moderators to permanently delete a flag
 * queue entry by its ID. This removes the entry from the moderation queue and
 * database permanently.
 *
 * The operation requires the flag queue entry ID to be specified in the path.
 *
 * Security checks ensure only moderators can perform deletions.
 *
 * No request body is needed.
 *
 * This performs a hard delete from the recipe_sharing_flag_queues table, after
 * which the entry cannot be recovered.
 *
 * Errors include non-existent IDs or unauthorized access attempts.
 *
 * @param props.connection
 * @param props.id Target flag queue entry ID
 * @path /recipeSharing/moderator/flagQueues/:id
 * @accessor api.functional.recipeSharing.moderator.flagQueues.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target flag queue entry ID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/flagQueues/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/flagQueues/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
