import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingDifficultyLevels } from "../../../../structures/IRecipeSharingDifficultyLevels";

/**
 * Create new difficulty level.
 *
 * Create a new difficulty level record with specified attributes such as code,
 * name, and description.
 *
 * The operation ensures uniqueness of the code.
 *
 * This requires authorization since it modifies system classification data.
 *
 * After creation, the new difficulty level data is returned with its full
 * details and timestamps.
 *
 * Validation errors will be returned if uniqueness or required fields
 * constraints fail.
 *
 * @param props.connection
 * @param props.body Creation data for difficulty level
 * @path /recipeSharing/moderator/difficultyLevels
 * @accessor api.functional.recipeSharing.moderator.difficultyLevels.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation data for difficulty level */
    body: IRecipeSharingDifficultyLevels.ICreate;
  };
  export type Body = IRecipeSharingDifficultyLevels.ICreate;
  export type Response = IRecipeSharingDifficultyLevels;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/moderator/difficultyLevels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/difficultyLevels";
  export const random = (): IRecipeSharingDifficultyLevels =>
    typia.random<IRecipeSharingDifficultyLevels>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing difficulty level.
 *
 * Update an existing difficulty level record by ID.
 *
 * Allows changing code, name, and description fields, maintaining system
 * classifications up to date.
 *
 * Authorization is required.
 *
 * Returns the updated difficulty level entity.
 *
 * Validation errors may occur if constraints such as uniqueness of code are
 * violated.
 *
 * @param props.connection
 * @param props.id Unique identifier of the difficulty level to update
 * @param props.body Update data for difficulty level
 * @path /recipeSharing/moderator/difficultyLevels/:id
 * @accessor api.functional.recipeSharing.moderator.difficultyLevels.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the difficulty level to update */
    id: string & tags.Format<"uuid">;

    /** Update data for difficulty level */
    body: IRecipeSharingDifficultyLevels.IUpdate;
  };
  export type Body = IRecipeSharingDifficultyLevels.IUpdate;
  export type Response = IRecipeSharingDifficultyLevels;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/moderator/difficultyLevels/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/moderator/difficultyLevels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingDifficultyLevels =>
    typia.random<IRecipeSharingDifficultyLevels>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a difficulty level by ID.
 *
 * Soft delete a difficulty level by its ID by setting its deleted_at timestamp.
 *
 * This operation prevents the difficulty level from appearing in active queries
 * but retains it in database for audit and recovery.
 *
 * Requires moderator role authorization.
 *
 * No response body is returned.
 *
 * Error handling includes invalid ID or unauthorized access.
 *
 * @param props.connection
 * @param props.id Unique identifier of the difficulty level to delete
 * @path /recipeSharing/moderator/difficultyLevels/:id
 * @accessor api.functional.recipeSharing.moderator.difficultyLevels.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the difficulty level to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/difficultyLevels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/difficultyLevels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
