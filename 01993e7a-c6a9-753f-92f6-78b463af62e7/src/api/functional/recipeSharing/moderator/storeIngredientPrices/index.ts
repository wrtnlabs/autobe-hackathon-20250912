import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Delete a store ingredient price record by ID.
 *
 * This API permanently deletes a store ingredient price record identified by
 * its unique UUID (storeIngredientPriceId) from the
 * recipe_sharing_store_ingredient_prices table.
 *
 * This operation is critical for maintaining clean store pricing data and is
 * intended for use by administrators or authorized backend processes.
 *
 * Successful deletion results in no content returned.
 *
 * Only users with the correct authorization role may invoke this endpoint.
 *
 * The path parameter 'storeIngredientPriceId' is required to precisely specify
 * which record to delete.
 *
 * @param props.connection
 * @param props.storeIngredientPriceId UUID of the store ingredient price to
 *   delete
 * @path /recipeSharing/moderator/storeIngredientPrices/:storeIngredientPriceId
 * @accessor api.functional.recipeSharing.moderator.storeIngredientPrices.eraseStoreIngredientPrice
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseStoreIngredientPrice(
  connection: IConnection,
  props: eraseStoreIngredientPrice.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseStoreIngredientPrice.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseStoreIngredientPrice.METADATA,
          path: eraseStoreIngredientPrice.path(props),
          status: null,
        },
      );
}
export namespace eraseStoreIngredientPrice {
  export type Props = {
    /** UUID of the store ingredient price to delete */
    storeIngredientPriceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/moderator/storeIngredientPrices/:storeIngredientPriceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/moderator/storeIngredientPrices/${encodeURIComponent(props.storeIngredientPriceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseStoreIngredientPrice.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseStoreIngredientPrice.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeIngredientPriceId")(() =>
        typia.assert(props.storeIngredientPriceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
