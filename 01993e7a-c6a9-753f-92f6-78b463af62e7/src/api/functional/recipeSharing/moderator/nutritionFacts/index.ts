import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingNutritionFact } from "../../../../structures/IRecipeSharingNutritionFact";
import { IPageIRecipeSharingNutritionFact } from "../../../../structures/IPageIRecipeSharingNutritionFact";

/**
 * Search and list nutrition facts with filtering and pagination.
 *
 * Fetch a filtered and paginated list of ingredient nutrition facts.
 *
 * Supports searching by nutrient values, ranges, and keyword filters.
 *
 * Pagination allows efficient navigation through large data sets.
 *
 * Only users with admin or moderator privileges may invoke this operation.
 *
 * Proper use of request filters can optimize querying performance.
 *
 * Response data includes summarized nutrition fact entries suitable for list
 * displays.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for nutrition
 *   facts
 * @path /recipeSharing/moderator/nutritionFacts
 * @accessor api.functional.recipeSharing.moderator.nutritionFacts.searchNutritionFacts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchNutritionFacts(
  connection: IConnection,
  props: searchNutritionFacts.Props,
): Promise<searchNutritionFacts.Response> {
  return true === connection.simulate
    ? searchNutritionFacts.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchNutritionFacts.METADATA,
          path: searchNutritionFacts.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchNutritionFacts {
  export type Props = {
    /** Search criteria and pagination parameters for nutrition facts */
    body: IRecipeSharingNutritionFact.IRequest;
  };
  export type Body = IRecipeSharingNutritionFact.IRequest;
  export type Response = IPageIRecipeSharingNutritionFact.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/moderator/nutritionFacts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/moderator/nutritionFacts";
  export const random = (): IPageIRecipeSharingNutritionFact.ISummary =>
    typia.random<IPageIRecipeSharingNutritionFact.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchNutritionFacts.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchNutritionFacts.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
