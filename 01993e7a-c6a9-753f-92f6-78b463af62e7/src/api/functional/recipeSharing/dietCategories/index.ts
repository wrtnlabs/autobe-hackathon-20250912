import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingDietCategories } from "../../../structures/IRecipeSharingDietCategories";
import { IPageIRecipeSharingDietCategories } from "../../../structures/IPageIRecipeSharingDietCategories";

/**
 * Search and retrieve diet category listings.
 *
 * Retrieve a paginated and optionally filtered list of diet categories.
 *
 * This operation allows querying the 'recipe_sharing_diet_categories' table for
 * diet category entries. Clients can provide filtering parameters such as name
 * search, pagination controls, and sorting options.
 *
 * Results include summaries of diet categories suitable for display in user
 * interfaces.
 *
 * Access is publicly allowed with no authentication required.
 *
 * Validation includes conformance with pagination and filtering criteria.
 *
 * Related operations include retrieving a single diet category by ID and
 * managing categories internally.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for diet category
 *   search
 * @path /recipeSharing/dietCategories
 * @accessor api.functional.recipeSharing.dietCategories.indexDietCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexDietCategories(
  connection: IConnection,
  props: indexDietCategories.Props,
): Promise<indexDietCategories.Response> {
  return true === connection.simulate
    ? indexDietCategories.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexDietCategories.METADATA,
          path: indexDietCategories.path(),
          status: null,
        },
        props.body,
      );
}
export namespace indexDietCategories {
  export type Props = {
    /** Filtering and pagination parameters for diet category search */
    body: IRecipeSharingDietCategories.IRequest;
  };
  export type Body = IRecipeSharingDietCategories.IRequest;
  export type Response = IPageIRecipeSharingDietCategories.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/dietCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/dietCategories";
  export const random = (): IPageIRecipeSharingDietCategories.ISummary =>
    typia.random<IPageIRecipeSharingDietCategories.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexDietCategories.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexDietCategories.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single diet category by ID.
 *
 * Get detailed information of a specific diet category by its unique ID.
 *
 * This retrieval operation returns the full details stored in the corresponding
 * entry of the 'recipe_sharing_diet_categories' table, including the code,
 * name, description, and timestamps.
 *
 * No authentication is required for this operation, making it accessible to
 * public clients.
 *
 * Validation ensures the requested ID exists and returns appropriate errors if
 * not.
 *
 * This read operation complements the diet category listing search and supports
 * UI display of diet details.
 *
 * @param props.connection
 * @param props.id Unique identifier of the diet category to retrieve
 * @path /recipeSharing/dietCategories/:id
 * @accessor api.functional.recipeSharing.dietCategories.atDietCategory
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atDietCategory(
  connection: IConnection,
  props: atDietCategory.Props,
): Promise<atDietCategory.Response> {
  return true === connection.simulate
    ? atDietCategory.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atDietCategory.METADATA,
          path: atDietCategory.path(props),
          status: null,
        },
      );
}
export namespace atDietCategory {
  export type Props = {
    /** Unique identifier of the diet category to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingDietCategories;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/dietCategories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/dietCategories/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingDietCategories =>
    typia.random<IRecipeSharingDietCategories>();
  export const simulate = (
    connection: IConnection,
    props: atDietCategory.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atDietCategory.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
