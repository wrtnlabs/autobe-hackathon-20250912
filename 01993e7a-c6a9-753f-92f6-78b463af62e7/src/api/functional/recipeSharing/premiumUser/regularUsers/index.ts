import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRegularUser } from "../../../../structures/IRecipeSharingRegularUser";
import { IPageIRecipeSharingRegularUser } from "../../../../structures/IPageIRecipeSharingRegularUser";

/**
 * Search and retrieve a filtered, paginated list of regular users.
 *
 * This endpoint allows clients to query and retrieve a paginated list of
 * regular users.
 *
 * Each regular user represents a platform member with credentials including
 * email and username, used for authentication and identification in the recipe
 * sharing system.
 *
 * The system stores timestamps for record creation and updates, and soft
 * deletion support through a nullable deleted_at timestamp.
 *
 * For security reasons, sensitive password hashes are never exposed in the
 * response.
 *
 * This operation enables filtering by email, username, or other attributes
 * through the request body parameters, supporting pagination and sorting to
 * handle large user bases efficiently.
 *
 * Authorization to access this list should be restricted to regularUser or
 * premiumUser roles.
 *
 * Response data includes essential summary information suitable for user
 * management or audit interfaces, excluding sensitive fields.
 *
 * No sensitive data such as password hashes are returned.
 *
 * Errors may occur if invalid filter parameters are provided or authorization
 * fails.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   regular users
 * @path /recipeSharing/premiumUser/regularUsers
 * @accessor api.functional.recipeSharing.premiumUser.regularUsers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering regular users */
    body: IRecipeSharingRegularUser.IRequest;
  };
  export type Body = IRecipeSharingRegularUser.IRequest;
  export type Response = IPageIRecipeSharingRegularUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/premiumUser/regularUsers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/premiumUser/regularUsers";
  export const random = (): IPageIRecipeSharingRegularUser.ISummary =>
    typia.random<IPageIRecipeSharingRegularUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a regular user by ID.
 *
 * Retrieve detailed information about a specific regular user identified by
 * their unique ID.
 *
 * The user record includes public fields such as email and username, creation
 * and update timestamps, and a nullable deleted_at to indicate soft deletion.
 *
 * Sensitive information such as password hashes is excluded from the response
 * for security.
 *
 * This operation is typically restricted to regularUser or premiumUser roles.
 *
 * Appropriate error handling ensures responses for not found IDs and
 * unauthorized access.
 *
 * This endpoint uses the 'get' method and requires a UUID formatted 'id' path
 * parameter.
 *
 * The response provides detailed user information for management or auditing
 * purposes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target regular user
 * @path /recipeSharing/premiumUser/regularUsers/:id
 * @accessor api.functional.recipeSharing.premiumUser.regularUsers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target regular user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingRegularUser;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/regularUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/regularUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingRegularUser =>
    typia.random<IRecipeSharingRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing regular user's information by ID.
 *
 * Update the data of an existing regular user identified by their unique ID.
 *
 * This operation allows modification of public user information such as email
 * and username.
 *
 * Password updates are performed by changing the password_hash field with
 * securely hashed values.
 *
 * Soft deletion timestamps are not directly modifiable here.
 *
 * Access to this operation is restricted to regularUser or premiumUser roles.
 *
 * The endpoint accepts the user ID as a path parameter and the updated user
 * data in the request body.
 *
 * Validation checks uniqueness constraints for email and username.
 *
 * Errors are returned if input validation fails or the user ID is not found.
 *
 * Successful updates return the updated user entity excluding sensitive
 * password fields.
 *
 * The method used is PUT and requires a UUID formatted 'id' path parameter.
 *
 * @param props.connection
 * @param props.id Unique identifier of the regular user to update
 * @param props.body Updated information for the regular user
 * @path /recipeSharing/premiumUser/regularUsers/:id
 * @accessor api.functional.recipeSharing.premiumUser.regularUsers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the regular user to update */
    id: string & tags.Format<"uuid">;

    /** Updated information for the regular user */
    body: IRecipeSharingRegularUser.IUpdate;
  };
  export type Body = IRecipeSharingRegularUser.IUpdate;
  export type Response = IRecipeSharingRegularUser;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/premiumUser/regularUsers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/premiumUser/regularUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingRegularUser =>
    typia.random<IRecipeSharingRegularUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a regular user by ID.
 *
 * Permanently delete a regular user from the database by their unique ID.
 *
 * This operation deletes the user record entirely, bypassing any soft delete
 * mechanisms.
 *
 * Access is restricted to regularUser and premiumUser roles.
 *
 * The endpoint requires the user ID as a UUID formatted path parameter.
 *
 * No request body is needed.
 *
 * No response body is returned.
 *
 * Errors are returned if the user ID is not found.
 *
 * Use this operation with caution as deletion is irreversible.
 *
 * @param props.connection
 * @param props.id Unique identifier of the regular user to delete
 * @path /recipeSharing/premiumUser/regularUsers/:id
 * @accessor api.functional.recipeSharing.premiumUser.regularUsers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the regular user to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/premiumUser/regularUsers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/regularUsers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
