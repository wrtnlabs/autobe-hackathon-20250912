import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIRecipeSharingMealPlanEntry } from "../../../../../structures/IPageIRecipeSharingMealPlanEntry";

/**
 * List meal plan entries for a meal plan.
 *
 * Retrieve all entries for a specified meal plan identified by mealPlanId.
 * Entries include recipes planned, quantities, scheduled dates, and meal
 * slots.
 *
 * Allows users to view and manage their scheduled meal recipes.
 *
 * Requires authentication and ownership authorization.
 *
 * Errors are returned for invalid or unauthorized requests.
 *
 * @param props.connection
 * @param props.mealPlanId Unique identifier of the meal plan to retrieve
 *   entries for
 * @path /recipeSharing/premiumUser/mealPlans/:mealPlanId/entries
 * @accessor api.functional.recipeSharing.premiumUser.mealPlans.entries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the meal plan to retrieve entries for */
    mealPlanId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIRecipeSharingMealPlanEntry;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/premiumUser/mealPlans/:mealPlanId/entries",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/mealPlans/${encodeURIComponent(props.mealPlanId ?? "null")}/entries`;
  export const random = (): IPageIRecipeSharingMealPlanEntry =>
    typia.random<IPageIRecipeSharingMealPlanEntry>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mealPlanId")(() => typia.assert(props.mealPlanId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
