import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIRecipeSharingShoppingListItem } from "../../../../../structures/IPageIRecipeSharingShoppingListItem";
import { IRecipeSharingShoppingListItem } from "../../../../../structures/IRecipeSharingShoppingListItem";

/**
 * List all items in a shopping list.
 *
 * Retrieve all items within a specific shopping list owned by the authenticated
 * user.
 *
 * Each shopping list item consists of an ingredient, its quantity, measurement
 * unit, and optional user notes.
 *
 * Security controls restrict access to items of shopping lists owned by the
 * user, ensuring privacy.
 *
 * This operation maps to the 'recipe_sharing_shopping_list_items' table in the
 * Prisma schema, which maintains detailed ingredient line items within shopping
 * lists.
 *
 * Returns the full list of detailed shopping list item records.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list whose
 *   items are requested
 * @path /recipeSharing/premiumUser/shoppingLists/:shoppingListId/shoppingListItems
 * @accessor api.functional.recipeSharing.premiumUser.shoppingLists.shoppingListItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the shopping list whose items are requested */
    shoppingListId: string;
  };
  export type Response = IPageIRecipeSharingShoppingListItem.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/shoppingLists/:shoppingListId/shoppingListItems",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems`;
  export const random = (): IPageIRecipeSharingShoppingListItem.ISummary =>
    typia.random<IPageIRecipeSharingShoppingListItem.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific shopping list item by ID.
 *
 * Retrieve a specific shopping list item by its unique identifier within the
 * specified shopping list.
 *
 * The item details include ingredient reference, quantity, measurement unit,
 * and optional notes.
 *
 * Access is restricted to the shopping list owner or authorized users.
 *
 * This operation leverages the 'recipe_sharing_shopping_list_items' table in
 * the Prisma schema.
 *
 * Returns the detailed shopping list item entity.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list containing
 *   the item
 * @param props.shoppingListItemId Unique identifier of the shopping list item
 *   to retrieve
 * @path /recipeSharing/premiumUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId
 * @accessor api.functional.recipeSharing.premiumUser.shoppingLists.shoppingListItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the shopping list containing the item */
    shoppingListId: string;

    /** Unique identifier of the shopping list item to retrieve */
    shoppingListItemId: string;
  };
  export type Response = IRecipeSharingShoppingListItem;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/premiumUser/shoppingLists/:shoppingListId/shoppingListItems/:shoppingListItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}/shoppingListItems/${encodeURIComponent(props.shoppingListItemId ?? "null")}`;
  export const random = (): IRecipeSharingShoppingListItem =>
    typia.random<IRecipeSharingShoppingListItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.param("shoppingListItemId")(() =>
        typia.assert(props.shoppingListItemId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
