import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingUserFollower } from "../../../../structures/IRecipeSharingUserFollower";

/**
 * Update a user follower relationship by ID.
 *
 * Update the user follower record identified by the provided userFollowerId
 * path parameter. This record represents the follow relationship between one
 * user (the follower) and another user (the followee). The request body
 * contains the new follower and/or followee user IDs with valid UUID format.
 * Only authorized users with the correct roles can perform this update.
 *
 * The updating process checks that the follower and followee users exist and
 * preserves database relations. Upon success, the operation returns the updated
 * user follower information. Errors may occur if the provided identifier does
 * not exist or if the input data fails validation.
 *
 * This API corresponds to the recipe_sharing_user_followers table in the Prisma
 * schema, which defines follower-followee user relations with auditing
 * timestamps.
 *
 * @param props.connection
 * @param props.userFollowerId Unique identifier of the user follower
 *   relationship to update
 * @param props.body User follower update information
 * @path /recipeSharing/premiumUser/userFollowers/:userFollowerId
 * @accessor api.functional.recipeSharing.premiumUser.userFollowers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user follower relationship to update */
    userFollowerId: string & tags.Format<"uuid">;

    /** User follower update information */
    body: IRecipeSharingUserFollower.IUpdate;
  };
  export type Body = IRecipeSharingUserFollower.IUpdate;
  export type Response = IRecipeSharingUserFollower;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/premiumUser/userFollowers/:userFollowerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/premiumUser/userFollowers/${encodeURIComponent(props.userFollowerId ?? "null")}`;
  export const random = (): IRecipeSharingUserFollower =>
    typia.random<IRecipeSharingUserFollower>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userFollowerId")(() => typia.assert(props.userFollowerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user follower relationship by ID.
 *
 * Delete a user follower record identified by the userFollowerId path
 * parameter. This permanently removes the follower relation between users from
 * the system database.
 *
 * Authorization requires authenticated regular or premium users with
 * permissions to modify their follower links.
 *
 * Upon success, no response body is returned. If the target follower record
 * does not exist, an error is returned.
 *
 * This maps to the recipe_sharing_user_followers table in the Prisma DB schema,
 * which manages social user follower relationships.
 *
 * @param props.connection
 * @param props.userFollowerId Unique identifier of the user follower
 *   relationship to delete
 * @path /recipeSharing/premiumUser/userFollowers/:userFollowerId
 * @accessor api.functional.recipeSharing.premiumUser.userFollowers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user follower relationship to delete */
    userFollowerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/premiumUser/userFollowers/:userFollowerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/premiumUser/userFollowers/${encodeURIComponent(props.userFollowerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userFollowerId")(() => typia.assert(props.userFollowerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
