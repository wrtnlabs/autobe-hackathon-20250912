import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingShoppingList } from "../../../structures/IRecipeSharingShoppingList";
import { IPageIRecipeSharingShoppingList } from "../../../structures/IPageIRecipeSharingShoppingList";

/**
 * Search and retrieve paginated shopping lists.
 *
 * Retrieve a filtered and paginated list of shopping lists. Allows searching by
 * name, filtering by owner user ID, and pagination to control result size.
 *
 * Access is publicly available and does not require authentication.
 *
 * The shopping lists correspond to recipe_sharing_shopping_lists records,
 * including name, ownership, timestamps, and soft delete flag.
 *
 * The results contain summary information suitable for list display with
 * minimal details for performance.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for shopping
 *   lists
 * @path /recipeSharing/shoppingLists
 * @accessor api.functional.recipeSharing.shoppingLists.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for shopping lists */
    body: IRecipeSharingShoppingList.IRequest;
  };
  export type Body = IRecipeSharingShoppingList.IRequest;
  export type Response = IPageIRecipeSharingShoppingList.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/shoppingLists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/shoppingLists";
  export const random = (): IPageIRecipeSharingShoppingList.ISummary =>
    typia.random<IPageIRecipeSharingShoppingList.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
