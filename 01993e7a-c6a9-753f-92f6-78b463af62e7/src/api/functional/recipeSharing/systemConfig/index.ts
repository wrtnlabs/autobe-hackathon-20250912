import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingSystemConfig } from "../../../structures/IRecipeSharingSystemConfig";
import { IPageIRecipeSharingSystemConfig } from "../../../structures/IPageIRecipeSharingSystemConfig";

/**
 * Retrieve paginated system configuration entries.
 *
 * Retrieve a paginated list of system configuration entries matching the
 * provided search criteria. The request accepts pagination parameters such as
 * page number and size, sorting options including ascending or descending, and
 * filters by keys or values.
 *
 * The system configurations consist of key-value pairs used globally in the
 * application. This operation allows clients to query configurations
 * dynamically for monitoring or administrative display.
 *
 * No authentication is required, making this endpoint publicly accessible for
 * read-only operations. Response includes total count and pages as well as data
 * matching the search criteria.
 *
 * @param props.connection
 * @param props.body Request parameters including filters, search terms,
 *   pagination, and sorting
 * @path /recipeSharing/systemConfig
 * @accessor api.functional.recipeSharing.systemConfig.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters including filters, search terms, pagination, and
     * sorting
     */
    body: IRecipeSharingSystemConfig.IRequest;
  };
  export type Body = IRecipeSharingSystemConfig.IRequest;
  export type Response = IPageIRecipeSharingSystemConfig;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/systemConfig",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/systemConfig";
  export const random = (): IPageIRecipeSharingSystemConfig =>
    typia.random<IPageIRecipeSharingSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get system configuration entry by ID.
 *
 * Retrieve detailed data for a given system configuration by its unique ID. The
 * response payload contains all configuration fields necessary for complete
 * information.
 *
 * The path parameter 'id' is the UUID of the system configuration to retrieve.
 * If no matching record is found, an error is returned.
 *
 * The endpoint supports HTTP GET method without a request body.
 *
 * There are no authorization requirements for this operation, making it
 * publicly accessible.
 *
 * Use this endpoint to fetch individual system configuration details for
 * management or display purposes.
 *
 * @param props.connection
 * @param props.id Unique identifier of the system configuration entry
 * @path /recipeSharing/systemConfig/:id
 * @accessor api.functional.recipeSharing.systemConfig.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system configuration entry */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingSystemConfig;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/systemConfig/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/systemConfig/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingSystemConfig =>
    typia.random<IRecipeSharingSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
