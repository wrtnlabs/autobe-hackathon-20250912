import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingIngredientSearchTerms } from "../../../structures/IRecipeSharingIngredientSearchTerms";
import { IPageIRecipeSharingIngredientSearchTerms } from "../../../structures/IPageIRecipeSharingIngredientSearchTerms";
import { IRecipeSharingIngredientSearchTerm } from "../../../structures/IRecipeSharingIngredientSearchTerm";

/**
 * Retrieve paginated ingredient search terms.
 *
 * Retrieve ingredient search terms with filtering and pagination options.
 *
 * Allows searching by partial search terms and ingredient ID.
 *
 * Open public access.
 *
 * Returns paginated lists of matching terms with metadata.
 *
 * Errors arise from invalid search parameter inputs.
 *
 * Based on recipe_sharing_ingredient_search_terms table in database.
 *
 * Intended for ingredient matching in advanced search feature.
 *
 * @param props.connection
 * @param props.body Search parameters and pagination for ingredient search
 *   terms
 * @path /recipeSharing/ingredientSearchTerms
 * @accessor api.functional.recipeSharing.ingredientSearchTerms.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search parameters and pagination for ingredient search terms */
    body: IRecipeSharingIngredientSearchTerms.IRequest;
  };
  export type Body = IRecipeSharingIngredientSearchTerms.IRequest;
  export type Response = IPageIRecipeSharingIngredientSearchTerms;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/ingredientSearchTerms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/ingredientSearchTerms";
  export const random = (): IPageIRecipeSharingIngredientSearchTerms =>
    typia.random<IPageIRecipeSharingIngredientSearchTerms>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve ingredient search term by ID.
 *
 * Retrieve a single ingredient search term entry by its unique identifier. This
 * operation accesses the ingredient search terms entity, which stores alternate
 * search term variants for ingredients to support partial and fuzzy searches.
 *
 * Security considerations include ensuring only authenticated users or public
 * read access depending on system policy can access this data. This data is
 * used to improve search accuracy and usability when users input partial or
 * approximate ingredient names.
 *
 * This operation directly queries the recipe_sharing_ingredient_search_terms
 * table based on the provided UUID.
 *
 * Validation includes verifying the UUID format and existence of the targeted
 * record. If not found, an appropriate error will be returned.
 *
 * Related operations may include updating or creating ingredient search terms,
 * but this one is strictly for retrieving individual entries by ID without
 * modification.
 *
 * Response returns the ingredient search term object including its ID, linked
 * ingredient ID, and search term string.
 *
 * @param props.connection
 * @param props.ingredientSearchTermId Unique UUID identifier of the ingredient
 *   search term
 * @path /recipeSharing/ingredientSearchTerms/:ingredientSearchTermId
 * @accessor api.functional.recipeSharing.ingredientSearchTerms.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifier of the ingredient search term */
    ingredientSearchTermId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingIngredientSearchTerm;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/ingredientSearchTerms/:ingredientSearchTermId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/ingredientSearchTerms/${encodeURIComponent(props.ingredientSearchTermId ?? "null")}`;
  export const random = (): IRecipeSharingIngredientSearchTerm =>
    typia.random<IRecipeSharingIngredientSearchTerm>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("ingredientSearchTermId")(() =>
        typia.assert(props.ingredientSearchTermId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
