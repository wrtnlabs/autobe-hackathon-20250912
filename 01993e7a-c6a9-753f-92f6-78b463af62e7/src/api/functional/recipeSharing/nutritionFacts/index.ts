import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingNutritionFact } from "../../../structures/IRecipeSharingNutritionFact";

/**
 * Retrieve a specific nutrition fact by ID.
 *
 * Retrieve detailed nutritional information for a specific nutrition fact
 * entry. This endpoint operates on the recipe_sharing_nutrition_facts database
 * entity, which holds granular nutritional data for ingredients, including
 * macros and micronutrients.
 *
 * Clients can fetch calories, protein, carbohydrates, fat, fiber, sodium,
 * sugar, vitamin A, C, D, iron, and calcium values for the ingredient's
 * nutrition fact by its unique ID.
 *
 * Authentication is not required for this data, making it accessible to public
 * users for nutritional reference.
 *
 * The endpoint requires a valid nutritionFactId path parameter, which must
 * correspond to an existing nutrition fact record.
 *
 * Errors are returned when the ID is invalid or not found.
 *
 * @param props.connection
 * @param props.nutritionFactId Unique identifier of the nutrition fact
 * @path /recipeSharing/nutritionFacts/:nutritionFactId
 * @accessor api.functional.recipeSharing.nutritionFacts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the nutrition fact */
    nutritionFactId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingNutritionFact;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/nutritionFacts/:nutritionFactId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/nutritionFacts/${encodeURIComponent(props.nutritionFactId ?? "null")}`;
  export const random = (): IRecipeSharingNutritionFact =>
    typia.random<IRecipeSharingNutritionFact>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("nutritionFactId")(() =>
        typia.assert(props.nutritionFactId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
