import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingShoppingList } from "../../../../structures/IRecipeSharingShoppingList";
export * as shoppingListItems from "./shoppingListItems/index";

/**
 * Retrieve details of a specific shopping list.
 *
 * Retrieve detailed information for a shopping list identified by the
 * shoppingListId parameter. Data includes all shopping list metadata plus
 * individual shopping list items.
 *
 * Only authenticated users with the "regularUser" role may access this
 * endpoint.
 *
 * The operation fetches data from the recipe_sharing_shopping_lists table and
 * related recipe_sharing_shopping_list_items linked by shopping_list_id.
 *
 * This API enables viewing or editing shopping lists within client
 * applications.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list to
 *   retrieve
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the shopping list to retrieve */
    shoppingListId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingShoppingList;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}`;
  export const random = (): IRecipeSharingShoppingList =>
    typia.random<IRecipeSharingShoppingList>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping list by ID.
 *
 * Update an existing shopping list belonging to the authenticated user. This
 * operation allows modifying fields such as the shopping list's name and
 * timestamps while maintaining data integrity and user ownership validation.
 *
 * Security considerations restrict updates to shopping lists owned by the
 * requesting user, ensuring privacy and proper access control.
 *
 * This API endpoint operates on the 'recipe_sharing_shopping_lists' table from
 * the Prisma schema, which maintains shopping lists created for consolidating
 * ingredient quantities needed for meal planning and grocery shopping.
 *
 * Upon successful update, the updated shopping list information is returned.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list to update
 * @param props.body Shopping list update data
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the shopping list to update */
    shoppingListId: string;

    /** Shopping list update data */
    body: IRecipeSharingShoppingList.IUpdate;
  };
  export type Body = IRecipeSharingShoppingList.IUpdate;
  export type Response = IRecipeSharingShoppingList;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}`;
  export const random = (): IRecipeSharingShoppingList =>
    typia.random<IRecipeSharingShoppingList>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping list by ID.
 *
 * Permanently delete a shopping list owned by the authenticated user. This
 * operation removes the shopping list record and all related shopping list
 * items from the database.
 *
 * Security measures ensure only the owner of the shopping list can perform
 * deletion, preventing unauthorized data removal.
 *
 * This API operation corresponds to the 'recipe_sharing_shopping_lists' table
 * in the Prisma Prisma schema, which stores user-generated shopping lists with
 * soft delete support. This delete operation performs a hard delete eliminating
 * the record entirely.
 *
 * No content is returned on successful deletion.
 *
 * @param props.connection
 * @param props.shoppingListId Unique identifier of the shopping list to delete
 * @path /recipeSharing/regularUser/shoppingLists/:shoppingListId
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the shopping list to delete */
    shoppingListId: string;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/shoppingLists/:shoppingListId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/shoppingLists/${encodeURIComponent(props.shoppingListId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("shoppingListId")(() => typia.assert(props.shoppingListId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new shopping list with specified name and optional list items. Each
 * item specifies ingredient reference, quantity, and unit.
 *
 * The newly created shopping list will be associated with the authenticated
 * 'regularUser'.
 *
 * Validations cover the presence of required data and correct ingredient
 * references.
 *
 * Use this API call to manage grocery shopping linked to meal plans or
 * collections.
 *
 * @param props.connection
 * @param props.body Details of the shopping list to create including items
 * @path /recipeSharing/regularUser/shoppingLists
 * @accessor api.functional.recipeSharing.regularUser.shoppingLists.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details of the shopping list to create including items */
    body: IRecipeSharingShoppingList.ICreate;
  };
  export type Body = IRecipeSharingShoppingList.ICreate;
  export type Response = IRecipeSharingShoppingList;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/shoppingLists",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/shoppingLists";
  export const random = (): IRecipeSharingShoppingList =>
    typia.random<IRecipeSharingShoppingList>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
