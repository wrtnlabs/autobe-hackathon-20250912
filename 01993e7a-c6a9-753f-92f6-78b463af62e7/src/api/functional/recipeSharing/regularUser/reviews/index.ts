import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingReview } from "../../../../structures/IRecipeSharingReview";
import { IPageIRecipeSharingReview } from "../../../../structures/IPageIRecipeSharingReview";
export * as votes from "./votes/index";
export * as flags from "./flags/index";

/**
 * Create a new recipe sharing review with detailed text associated with a
 * specific recipe and user. The request body must include the author user ID,
 * target recipe ID, and the review contents.
 *
 * The system will validate the input data, ensure required fields are present,
 * and record timestamps. Upon success, it returns the newly created review
 * record.
 *
 * Security measures prevent unauthorized creation and ensure data integrity.
 *
 * @param props.connection
 * @param props.body Creation info of the recipe sharing review
 * @path /recipeSharing/regularUser/reviews
 * @accessor api.functional.recipeSharing.regularUser.reviews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the recipe sharing review */
    body: IRecipeSharingReview.ICreate;
  };
  export type Body = IRecipeSharingReview.ICreate;
  export type Response = IRecipeSharingReview;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/reviews";
  export const random = (): IRecipeSharingReview =>
    typia.random<IRecipeSharingReview>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of recipe sharing reviews.
 *
 * Retrieve a filtered and paginated list of recipe sharing reviews from the
 * system. This operation supports advanced search capabilities, including
 * filtering by review author, reviewed recipe, review text content, creation
 * and update dates, and review status.
 *
 * The operation returns summarized review data optimized for list display with
 * necessary metadata to support UI rendering and navigation.
 *
 * Security considerations include ensuring that users can only access reviews
 * visible to them according to their role and permissions. Moderators have
 * expanded access to include all reviews regardless of status.
 *
 * This endpoint facilitates managing user-generated recipe reviews, supporting
 * moderation workflows and user interactions. Error scenarios include invalid
 * filter parameters or pagination requests, which should be handled gracefully
 * with meaningful messages.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for recipe
 *   sharing reviews
 * @path /recipeSharing/regularUser/reviews
 * @accessor api.functional.recipeSharing.regularUser.reviews.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for recipe sharing reviews */
    body: IRecipeSharingReview.IRequest;
  };
  export type Body = IRecipeSharingReview.IRequest;
  export type Response = IPageIRecipeSharingReview.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/reviews";
  export const random = (): IPageIRecipeSharingReview.ISummary =>
    typia.random<IPageIRecipeSharingReview.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed recipe sharing review by ID.
 *
 * Retrieve detailed information for a recipe sharing review specified by its
 * unique ID. This includes the authoring user, the reviewed recipe, the review
 * text, creation and update timestamps, and any soft deletion status.
 *
 * The operation ensures that only authorized users can access review details.
 * Moderators have full access to all reviews, whereas regular users can only
 * access visible reviews.
 *
 * If the review does not exist, the system returns a 404 Not Found error. Error
 * handling also includes invalid UUID formats.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target review
 * @path /recipeSharing/regularUser/reviews/:id
 * @accessor api.functional.recipeSharing.regularUser.reviews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target review */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingReview;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingReview =>
    typia.random<IRecipeSharingReview>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing recipe sharing review by ID.
 *
 * Update an existing recipe sharing review identified by its unique ID. The
 * request body includes fields to modify such as the review text.
 *
 * The system enforces authorization to ensure only the review author or
 * moderators can perform updates. Input validation ensures data correctness and
 * integrity.
 *
 * If the review is deleted or not found, appropriate error responses are
 * returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target review
 * @param props.body Update info of the recipe sharing review
 * @path /recipeSharing/regularUser/reviews/:id
 * @accessor api.functional.recipeSharing.regularUser.reviews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target review */
    id: string & tags.Format<"uuid">;

    /** Update info of the recipe sharing review */
    body: IRecipeSharingReview.IUpdate;
  };
  export type Body = IRecipeSharingReview.IUpdate;
  export type Response = IRecipeSharingReview;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/reviews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IRecipeSharingReview =>
    typia.random<IRecipeSharingReview>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a review by its unique ID.
 *
 * This API endpoint permanently deletes a recipe review identified by its
 * unique ID. Since the `recipe_sharing_reviews` table lacks a soft delete
 * field, this operation performs a hard delete, completely removing the review
 * from the database.
 *
 * Only authorized users, generally the creators of the review, are permitted to
 * delete reviews to maintain data integrity and security. Unauthorized attempts
 * to delete a review should return appropriate error responses.
 *
 * This operation is critical for users to manage their created content and for
 * moderation purposes.
 *
 * It complements other review-related endpoints such as fetching, creating, and
 * updating reviews.
 *
 * No request body is required, and no response body is returned upon successful
 * deletion.
 *
 * @param props.connection
 * @param props.id Unique identifier of the review to be deleted
 * @path /recipeSharing/regularUser/reviews/:id
 * @accessor api.functional.recipeSharing.regularUser.reviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the review to be deleted */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/reviews/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
