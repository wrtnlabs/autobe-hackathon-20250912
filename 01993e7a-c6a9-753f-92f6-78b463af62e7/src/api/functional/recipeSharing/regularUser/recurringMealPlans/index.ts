import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingRecurringMealPlan } from "../../../../structures/IRecipeSharingRecurringMealPlan";
import { IRecipeSharingRecurringMealPlans } from "../../../../structures/IRecipeSharingRecurringMealPlans";
import { IPageIRecipeSharingRecurringMealPlans } from "../../../../structures/IPageIRecipeSharingRecurringMealPlans";

/**
 * Create a new recurring meal plan for the authenticated regular user with
 * detailed recurrence scheduling. The input must define the plan's name,
 * recurrence pattern (e.g., weekly), start date, and optional end date.
 *
 * The system validates uniqueness of the plan name per user and logical
 * consistency of dates.
 *
 * Successful creation results in returning the stored meal plan record,
 * enabling immediate further use in scheduling interfaces.
 *
 * Access control ensures only authenticated regular users can create plans, and
 * no duplicate names exist.
 *
 * @param props.connection
 * @param props.body Recurring meal plan creation details
 * @path /recipeSharing/regularUser/recurringMealPlans
 * @accessor api.functional.recipeSharing.regularUser.recurringMealPlans.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Recurring meal plan creation details */
    body: IRecipeSharingRecurringMealPlan.ICreate;
  };
  export type Body = IRecipeSharingRecurringMealPlan.ICreate;
  export type Response = IRecipeSharingRecurringMealPlan;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/recurringMealPlans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/recurringMealPlans";
  export const random = (): IRecipeSharingRecurringMealPlan =>
    typia.random<IRecipeSharingRecurringMealPlan>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a list of user's recurring meal plans.
 *
 * Retrieve a filtered and paginated list of recurring meal plans belonging to
 * the authenticated regular user. This endpoint enables users to view their
 * recurring meal schedules, including patterns such as weekly or monthly
 * cycles, along with start and optional end dates.
 *
 * Security considerations restrict access to authenticated regular users only,
 * ensuring that users can access only their own recurring meal plans. The
 * request supports various filters such as by name, recurrence pattern, and
 * active periods.
 *
 * This operation directly maps to the recipe_sharing_recurring_meal_plans table
 * in the Prisma schema, incorporating all relevant columns and their
 * relationships. Soft deletion is respected via the deleted_at column, so only
 * active plans are typically shown.
 *
 * Usage scenarios include viewing existing recurring plans for editing,
 * monitoring upcoming meal cycles, and managing subscription-based meal
 * scheduling features.
 *
 * Error handling includes returning appropriate messages for unauthorized
 * access and invalid query parameters. Pagination ensures that response sizes
 * remain manageable.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for recurring
 *   meal plans
 * @path /recipeSharing/regularUser/recurringMealPlans
 * @accessor api.functional.recipeSharing.regularUser.recurringMealPlans.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for recurring meal plans */
    body: IRecipeSharingRecurringMealPlans.IRequest;
  };
  export type Body = IRecipeSharingRecurringMealPlans.IRequest;
  export type Response = IPageIRecipeSharingRecurringMealPlans;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/recurringMealPlans",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/recurringMealPlans";
  export const random = (): IPageIRecipeSharingRecurringMealPlans =>
    typia.random<IPageIRecipeSharingRecurringMealPlans>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed recurring meal plan information.
 *
 * Fetch comprehensive details about a single recurring meal plan identified by
 * its unique ID. This includes information about its recurrence pattern (e.g.,
 * weekly, monthly), start date, optional end date, and descriptive metadata.
 *
 * Access is restricted to the plan owner or authorized regular users. The plan
 * must exist and not be deleted.
 *
 * This operation supports interfaces where regular users view or modify
 * existing recurring meal plans, facilitating meal scheduling and planning.
 *
 * Error scenarios handled include not found errors for invalid or deleted IDs
 * and access violations preventing unauthorized viewing.
 *
 * @param props.connection
 * @param props.recurringMealPlanId Unique identifier of the target recurring
 *   meal plan
 * @path /recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId
 * @accessor api.functional.recipeSharing.regularUser.recurringMealPlans.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target recurring meal plan */
    recurringMealPlanId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingRecurringMealPlan;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/recurringMealPlans/${encodeURIComponent(props.recurringMealPlanId ?? "null")}`;
  export const random = (): IRecipeSharingRecurringMealPlan =>
    typia.random<IRecipeSharingRecurringMealPlan>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recurringMealPlanId")(() =>
        typia.assert(props.recurringMealPlanId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing recurring meal plan by ID with new scheduling details.
 * Allows changing the plan's name, recurrence pattern, start and optional end
 * dates, and description.
 *
 * The operation validates ownership and verifies the plan exists and is active.
 *
 * Successful operations return the updated plan for immediate client
 * synchronization.
 *
 * Access controls prevent updates by unauthorized regular users or to deleted
 * plans.
 *
 * Errors return suitable HTTP status codes and messages for not found,
 * unauthorized, and validation errors.
 *
 * @param props.connection
 * @param props.recurringMealPlanId Unique identifier of the target recurring
 *   meal plan
 * @param props.body Recurring meal plan update details
 * @path /recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId
 * @accessor api.functional.recipeSharing.regularUser.recurringMealPlans.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target recurring meal plan */
    recurringMealPlanId: string & tags.Format<"uuid">;

    /** Recurring meal plan update details */
    body: IRecipeSharingRecurringMealPlan.IUpdate;
  };
  export type Body = IRecipeSharingRecurringMealPlan.IUpdate;
  export type Response = IRecipeSharingRecurringMealPlan;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/recurringMealPlans/${encodeURIComponent(props.recurringMealPlanId ?? "null")}`;
  export const random = (): IRecipeSharingRecurringMealPlan =>
    typia.random<IRecipeSharingRecurringMealPlan>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recurringMealPlanId")(() =>
        typia.assert(props.recurringMealPlanId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a recurring meal plan.
 *
 * Permanently deletes a recurring meal plan from the system identified by the
 * recurringMealPlanId path parameter.
 *
 * This action removes the record from the database entirely and cannot be
 * undone.
 *
 * Access is restricted to authenticated users with the "regularUser" role. The
 * implementation should verify the user’s permission to delete the specific
 * meal plan.
 *
 * The recurring meal plan data includes ownership, recurrence pattern, time
 * boundaries, and audit timestamps as defined in the
 * recipe_sharing_recurring_meal_plans table schema.
 *
 * @param props.connection
 * @param props.recurringMealPlanId Unique identifier of the recurring meal plan
 *   to delete
 * @path /recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId
 * @accessor api.functional.recipeSharing.regularUser.recurringMealPlans.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the recurring meal plan to delete */
    recurringMealPlanId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/recurringMealPlans/:recurringMealPlanId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/recurringMealPlans/${encodeURIComponent(props.recurringMealPlanId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recurringMealPlanId")(() =>
        typia.assert(props.recurringMealPlanId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
