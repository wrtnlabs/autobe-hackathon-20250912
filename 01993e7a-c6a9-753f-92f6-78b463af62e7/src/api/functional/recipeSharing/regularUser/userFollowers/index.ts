import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingUserFollower } from "../../../../structures/IRecipeSharingUserFollower";
import { IPageIRecipeSharingUserFollower } from "../../../../structures/IPageIRecipeSharingUserFollower";

/**
 * Create a new user follower relationship.
 *
 * Create a new user follower connection, linking follower user to followee
 * user.
 *
 * This operation is critical for social engagement features, allowing users to
 * follow each other and receive personalized feeds.
 *
 * Security involves validating authenticated user privileges and preventing
 * duplicate follow relationships.
 *
 * Request body includes follower_user_id and followee_user_id UUIDs.
 *
 * Response returns the created follower relationship with timestamps.
 *
 * Validation ensures both users exist, and no prior follow relationship already
 * exists.
 *
 * No request parameters are required since POST uses request body.
 *
 * This operation supports social interaction in the Recipe Sharing platform.
 *
 * @param props.connection
 * @param props.body Follower and followee user IDs to create the follower
 *   connection
 * @path /recipeSharing/regularUser/userFollowers
 * @accessor api.functional.recipeSharing.regularUser.userFollowers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Follower and followee user IDs to create the follower connection */
    body: IRecipeSharingUserFollower.ICreate;
  };
  export type Body = IRecipeSharingUserFollower.ICreate;
  export type Response = IRecipeSharingUserFollower;

  export const METADATA = {
    method: "POST",
    path: "/recipeSharing/regularUser/userFollowers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/userFollowers";
  export const random = (): IRecipeSharingUserFollower =>
    typia.random<IRecipeSharingUserFollower>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of user followers.
 *
 * Retrieve a filtered and paginated list of user follower connections in the
 * recipe sharing platform. This list supports search, filtering by follower or
 * followee user ID, sorting, and pagination.
 *
 * Each follower record identifies the follower and the followee, along with
 * timestamps and soft deletion status if present.
 *
 * Security considerations involve ensuring only authorized users can view
 * follower relationships, protecting privacy.
 *
 * Related operations include creating new follower relationships, retrieving
 * individual follower relationships, and deleting follows.
 *
 * Results aid in building social graphs, personalized feeds, and UI components
 * displaying followers and following lists.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   user followers
 * @path /recipeSharing/regularUser/userFollowers
 * @accessor api.functional.recipeSharing.regularUser.userFollowers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering user
     * followers
     */
    body: IRecipeSharingUserFollower.IRequest;
  };
  export type Body = IRecipeSharingUserFollower.IRequest;
  export type Response = IPageIRecipeSharingUserFollower.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/userFollowers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/userFollowers";
  export const random = (): IPageIRecipeSharingUserFollower.ISummary =>
    typia.random<IPageIRecipeSharingUserFollower.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve user follower relationship by ID.
 *
 * Retrieve detailed information about a user follower relationship by follower
 * ID.
 *
 * The follower entity contains the UUID of both follower and followee users and
 * audit timestamps. This supports social features to display follower
 * connections.
 *
 * Security considerations must protect follower relationship privacy.
 *
 * Validation includes UUID format and record existence verification.
 *
 * No request body is needed for this GET operation.
 *
 * Returns the follower relationship object corresponding to the specified
 * identifier.
 *
 * @param props.connection
 * @param props.userFollowerId Unique user follower relationship UUID
 * @path /recipeSharing/regularUser/userFollowers/:userFollowerId
 * @accessor api.functional.recipeSharing.regularUser.userFollowers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique user follower relationship UUID */
    userFollowerId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingUserFollower;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/userFollowers/:userFollowerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/userFollowers/${encodeURIComponent(props.userFollowerId ?? "null")}`;
  export const random = (): IRecipeSharingUserFollower =>
    typia.random<IRecipeSharingUserFollower>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userFollowerId")(() => typia.assert(props.userFollowerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a user follower relationship by ID.
 *
 * Update the user follower record identified by the provided userFollowerId
 * path parameter. This record represents the follow relationship between one
 * user (the follower) and another user (the followee). The request body
 * contains the new follower and/or followee user IDs with valid UUID format.
 * Only authorized users with the correct roles can perform this update.
 *
 * The updating process checks that the follower and followee users exist and
 * preserves database relations. Upon success, the operation returns the updated
 * user follower information. Errors may occur if the provided identifier does
 * not exist or if the input data fails validation.
 *
 * This API corresponds to the recipe_sharing_user_followers table in the Prisma
 * schema, which defines follower-followee user relations with auditing
 * timestamps.
 *
 * @param props.connection
 * @param props.userFollowerId Unique identifier of the user follower
 *   relationship to update
 * @param props.body User follower update information
 * @path /recipeSharing/regularUser/userFollowers/:userFollowerId
 * @accessor api.functional.recipeSharing.regularUser.userFollowers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user follower relationship to update */
    userFollowerId: string & tags.Format<"uuid">;

    /** User follower update information */
    body: IRecipeSharingUserFollower.IUpdate;
  };
  export type Body = IRecipeSharingUserFollower.IUpdate;
  export type Response = IRecipeSharingUserFollower;

  export const METADATA = {
    method: "PUT",
    path: "/recipeSharing/regularUser/userFollowers/:userFollowerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recipeSharing/regularUser/userFollowers/${encodeURIComponent(props.userFollowerId ?? "null")}`;
  export const random = (): IRecipeSharingUserFollower =>
    typia.random<IRecipeSharingUserFollower>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userFollowerId")(() => typia.assert(props.userFollowerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user follower relationship by ID.
 *
 * Delete a user follower record identified by the userFollowerId path
 * parameter. This permanently removes the follower relation between users from
 * the system database.
 *
 * Authorization requires authenticated regular or premium users with
 * permissions to modify their follower links.
 *
 * Upon success, no response body is returned. If the target follower record
 * does not exist, an error is returned.
 *
 * This maps to the recipe_sharing_user_followers table in the Prisma DB schema,
 * which manages social user follower relationships.
 *
 * @param props.connection
 * @param props.userFollowerId Unique identifier of the user follower
 *   relationship to delete
 * @path /recipeSharing/regularUser/userFollowers/:userFollowerId
 * @accessor api.functional.recipeSharing.regularUser.userFollowers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user follower relationship to delete */
    userFollowerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/recipeSharing/regularUser/userFollowers/:userFollowerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/userFollowers/${encodeURIComponent(props.userFollowerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userFollowerId")(() => typia.assert(props.userFollowerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
