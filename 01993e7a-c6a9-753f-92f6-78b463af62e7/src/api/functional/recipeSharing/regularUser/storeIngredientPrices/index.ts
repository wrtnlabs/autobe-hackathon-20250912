import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingStoreIngredientPrice } from "../../../../structures/IRecipeSharingStoreIngredientPrice";
import { IPageIRecipeSharingStoreIngredientPrice } from "../../../../structures/IPageIRecipeSharingStoreIngredientPrice";

/**
 * Search and retrieve a paginated list of store ingredient prices with
 * filtering and sorting.
 *
 * Retrieve a filtered, sorted, and paginated list of ingredient prices at
 * grocery stores. This API endpoint supports complex queries to find prices for
 * individual ingredients across multiple stores, enabling features like
 * shopping list cost estimation and store comparison.
 *
 * The operation focuses on providing pricing, availability, and last updated
 * timestamp information for each ingredient-store combination. Users can filter
 * by ingredient, store, availability, price range, and sort by price or last
 * update time.
 *
 * Security considerations include restricting access to authenticated users who
 * require pricing information for meal planning and shopping list generation.
 * The data reflects the current prices and availability as stored in the
 * system, updated periodically.
 *
 * Related operations include retrieval of individual ingredient price entries
 * via a specific ID, as well as creation and updates of store ingredient prices
 * with POST and PUT operations respectively.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for store
 *   ingredient prices
 * @path /recipeSharing/regularUser/storeIngredientPrices
 * @accessor api.functional.recipeSharing.regularUser.storeIngredientPrices.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for store ingredient prices */
    body: IRecipeSharingStoreIngredientPrice.IRequest;
  };
  export type Body = IRecipeSharingStoreIngredientPrice.IRequest;
  export type Response = IPageIRecipeSharingStoreIngredientPrice.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/regularUser/storeIngredientPrices",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/regularUser/storeIngredientPrices";
  export const random = (): IPageIRecipeSharingStoreIngredientPrice.ISummary =>
    typia.random<IPageIRecipeSharingStoreIngredientPrice.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed store ingredient price by ID.
 *
 * Retrieve detailed information for a single store ingredient price entry by
 * its unique identifier. This operation allows authenticated users to fetch
 * complete price and availability data for a specific ingredient in a specific
 * grocery store.
 *
 * The response includes all recorded attributes of the price entity,
 * facilitating detailed display or editing in client applications. If the
 * specified ID does not exist, an appropriate error response is expected.
 *
 * This operation complements the search endpoint and supports update and
 * creation operations on store ingredient prices.
 *
 * Security requires authenticated user access.
 *
 * @param props.connection
 * @param props.storeIngredientPriceId Identifier of the target store ingredient
 *   price
 * @path /recipeSharing/regularUser/storeIngredientPrices/:storeIngredientPriceId
 * @accessor api.functional.recipeSharing.regularUser.storeIngredientPrices.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the target store ingredient price */
    storeIngredientPriceId: string & tags.Format<"uuid">;
  };
  export type Response = IRecipeSharingStoreIngredientPrice;

  export const METADATA = {
    method: "GET",
    path: "/recipeSharing/regularUser/storeIngredientPrices/:storeIngredientPriceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recipeSharing/regularUser/storeIngredientPrices/${encodeURIComponent(props.storeIngredientPriceId ?? "null")}`;
  export const random = (): IRecipeSharingStoreIngredientPrice =>
    typia.random<IRecipeSharingStoreIngredientPrice>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeIngredientPriceId")(() =>
        typia.assert(props.storeIngredientPriceId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
