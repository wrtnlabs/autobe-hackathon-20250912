import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingGroceryStore } from "../../../structures/IRecipeSharingGroceryStore";
import { IPageIRecipeSharingGroceryStore } from "../../../structures/IPageIRecipeSharingGroceryStore";

/**
 * Search and browse grocery stores.
 *
 * Retrieve a paginated list of grocery stores with details such as name,
 * address, phone, and website.
 *
 * The list supports filtering and sorting to help users find preferred grocery
 * chains for ingredient price tracking and availability.
 *
 * This is a public endpoint accessible without authentication.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for grocery
 *   stores
 * @path /recipeSharing/groceryStores
 * @accessor api.functional.recipeSharing.groceryStores.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for grocery stores */
    body: IRecipeSharingGroceryStore.IRequest;
  };
  export type Body = IRecipeSharingGroceryStore.IRequest;
  export type Response = IPageIRecipeSharingGroceryStore.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/recipeSharing/groceryStores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recipeSharing/groceryStores";
  export const random = (): IPageIRecipeSharingGroceryStore.ISummary =>
    typia.random<IPageIRecipeSharingGroceryStore.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
