import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecipeSharingPremiumUser } from "../../../structures/IRecipeSharingPremiumUser";

/**
 * Register a new premium user account (recipe_sharing_premiumusers).
 *
 * Register a new premium user account in the system. This operation stores user
 * credentials, assigns premium subscription activation time, and returns
 * authorized JWT tokens for session establishment. It references
 * `recipe_sharing_premiumusers` schema fields including `email`,
 * `password_hash`, `username`, and `premium_since`. Handles input validation,
 * uniqueness checks, and secure password hashing.
 *
 * @param props.connection
 * @param props.body Payload to create a new premium user account
 *   (IRecipeSharingPremiumUser.ICreate)
 * @setHeader token.access Authorization
 *
 * @path /auth/premiumUser/join
 * @accessor api.functional.auth.premiumUser.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Payload to create a new premium user account
     * (IRecipeSharingPremiumUser.ICreate)
     */
    body: IRecipeSharingPremiumUser.ICreate;
  };
  export type Body = IRecipeSharingPremiumUser.ICreate;
  export type Response = IRecipeSharingPremiumUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/premiumUser/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/premiumUser/join";
  export const random = (): IRecipeSharingPremiumUser.IAuthorized =>
    typia.random<IRecipeSharingPremiumUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login a premium user account (recipe_sharing_premiumusers).
 *
 * Login a premium user by validating credentials stored in
 * `recipe_sharing_premiumusers` fields such as `email` and `password_hash`. On
 * successful authentication, returns JWT tokens for session management within
 * `IRecipeSharingPremiumUser.IAuthorized`. Includes security checks for account
 * status and password validity.
 *
 * @param props.connection
 * @param props.body Login credentials for a premium user
 *   (IRecipeSharingPremiumUser.ILogin)
 * @setHeader token.access Authorization
 *
 * @path /auth/premiumUser/login
 * @accessor api.functional.auth.premiumUser.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login credentials for a premium user
     * (IRecipeSharingPremiumUser.ILogin)
     */
    body: IRecipeSharingPremiumUser.ILogin;
  };
  export type Body = IRecipeSharingPremiumUser.ILogin;
  export type Response = IRecipeSharingPremiumUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/premiumUser/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/premiumUser/login";
  export const random = (): IRecipeSharingPremiumUser.IAuthorized =>
    typia.random<IRecipeSharingPremiumUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh premium user JWT tokens (recipe_sharing_premiumusers).
 *
 * Refresh JWT access and refresh tokens for premium users based on valid
 * refresh tokens. Validates tokens and reissues new tokens tied to the
 * `recipe_sharing_premiumusers` schema. Returns
 * `IRecipeSharingPremiumUser.IAuthorized` for continued authenticated access.
 *
 * @param props.connection
 * @param props.body Refresh token payload for a premium user
 *   (IRecipeSharingPremiumUser.IRefresh)
 * @setHeader token.access Authorization
 *
 * @path /auth/premiumUser/refresh
 * @accessor api.functional.auth.premiumUser.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token payload for a premium user
     * (IRecipeSharingPremiumUser.IRefresh)
     */
    body: IRecipeSharingPremiumUser.IRefresh;
  };
  export type Body = IRecipeSharingPremiumUser.IRefresh;
  export type Response = IRecipeSharingPremiumUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/premiumUser/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/premiumUser/refresh";
  export const random = (): IRecipeSharingPremiumUser.IAuthorized =>
    typia.random<IRecipeSharingPremiumUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
