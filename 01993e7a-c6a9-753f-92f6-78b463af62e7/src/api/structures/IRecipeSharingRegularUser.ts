import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Regular user entity representing registered platform members.
 *
 * This schema aligns with the recipe_sharing_regularusers table in the Prisma
 * database. It stores identity information including email, unique username,
 * hashed password, and audit timestamps. The deleted_at field represents soft
 * deletion status if applicable.
 *
 * Sensitive information such as password hashes must never be exposed in
 * response where inappropriate.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingRegularUser = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** User's unique email address used for login and communication. */
  email: string;

  /** Unique username chosen by the user for platform identification. */
  username: string;

  /**
   * Hashed password for user authentication. Stored securely, never plain
   * text.
   */
  password_hash: string;

  /** Timestamp when the user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the user account was soft deleted, if applicable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingRegularUser {
  /**
   * Data required to create a new regular user account securely. Includes
   * unique email, username, and hashed password data.
   */
  export type ICreate = {
    /** Unique email for user registration. */
    email: string;

    /** Secure password hash for authentication. */
    password_hash: string;

    /** Unique username for user registration. */
    username: string;
  };

  /**
   * Authorization response containing user ID and JWT tokens post successful
   * authentication or registration.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized user. */
    id: string & tags.Format<"uuid">;

    /** User's unique email address used for login and communication. */
    email: string;

    /** Unique username chosen by the user for platform identification. */
    username: string;

    /**
     * Hashed password for user authentication. Stored securely, never plain
     * text.
     */
    password_hash: string;

    /** Timestamp when the user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp when the user account was soft deleted, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request requiring valid email and password hash for user
   * authentication.
   */
  export type ILogin = {
    /** Login email address. */
    email: string;

    /** Hashed password for authentication. */
    password_hash: string;
  };

  /** Request to refresh JWT tokens using a valid refresh token. */
  export type IRefresh = {
    /** Refresh token used to renew access tokens. */
    refresh_token: string;
  };

  /**
   * Request parameters for searching regular users with pagination and
   * filters.
   */
  export type IRequest = {
    /** Page number */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Maximum number of records per page */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Email filter for searching users */
    email?: string | null | undefined;

    /** Username filter for searching users */
    username?: string | null | undefined;
  };

  /**
   * Update type for regular user. All fields are optional. Does not include
   * id or timestamp fields. password_hash can be updated but only if properly
   * hashed.
   */
  export type IUpdate = {
    /** Regular user's unique email address used for login and communication */
    email?: string | undefined;

    /** Unique username chosen by the user for platform identification */
    username?: string | undefined;

    /**
     * Hashed password for user authentication. Stored securely, never plain
     * text.
     */
    password_hash?: string | undefined;
  };

  /**
   * Summary information of a regular user including unique ID, email, and
   * username.
   *
   * Used for listing users in summaries or search results.
   */
  export type ISummary = {
    /** Unique identifier for the regular user. */
    id: string & tags.Format<"uuid">;

    /** User's email address used for communication and login. */
    email: string;

    /** User's platform username, unique across the system. */
    username: string;
  };
}
