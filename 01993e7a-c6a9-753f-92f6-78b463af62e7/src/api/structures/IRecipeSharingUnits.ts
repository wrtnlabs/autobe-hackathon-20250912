import { tags } from "typia";

/**
 * Measurement unit entity representing standardized units used in ingredient
 * quantities within recipes.
 *
 * This entity ensures consistent labeling and quantification of recipe
 * ingredients across the platform.
 *
 * Includes unique identifiers, code names, human-readable names, optional
 * abbreviations, and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingUnits = {
  /**
   * Unique identifier of the unit.
   *
   * System-generated UUID in string format.
   */
  id: string;

  /**
   * Unique unit code, e.g., 'cups' or 'g'.
   *
   * Human-readable identifier used in ingredient measurements.
   */
  code: string;

  /**
   * Full descriptive name of the unit.
   *
   * Example: "cups", "grams".
   */
  name: string;

  /**
   * Optional abbreviated symbol for the unit.
   *
   * Example: "cup", "g".
   */
  abbreviation?: string | null | undefined;

  /**
   * Timestamp for when the unit record was created. ISO 8601 date-time
   * string.
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update of the unit record. ISO 8601 date-time string. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRecipeSharingUnits {
  /**
   * Request type for retrieving paginated lists of measurement units,
   * including filters and pagination parameters.
   */
  export type IRequest = {
    /**
     * Page number for paginated results.
     *
     * Optional; defaults may apply at runtime.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Items per page limit for pagination.
     *
     * Optional; typical default is 100.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter by unit code.
     *
     * Optional; supports partial matching.
     */
    code?: string | null | undefined;

    /**
     * Filter by unit name.
     *
     * Optional; supports partial matching.
     */
    name?: string | null | undefined;

    /**
     * Filter by abbreviation.
     *
     * Optional; supports partial matching.
     */
    abbreviation?: string | null | undefined;
  };

  /**
   * Creation request type for adding a new measurement unit. Requires unit
   * code and name.
   */
  export type ICreate = {
    /**
     * Unique unit code, e.g., 'cups' or 'g'.
     *
     * Required for creation.
     */
    code: string;

    /**
     * Full descriptive name of the unit.
     *
     * Required for creation.
     */
    name: string;

    /**
     * Optional abbreviated symbol for the unit.
     *
     * Nullable.
     */
    abbreviation?: string | null | undefined;
  };

  /**
   * Update request type for modifying existing measurement unit details with
   * optional fields.
   */
  export type IUpdate = {
    /**
     * Code of the measurement unit.
     *
     * Optional for updates.
     */
    code?: string | null | undefined;

    /**
     * Full name of the unit.
     *
     * Optional for updates.
     */
    name?: string | null | undefined;

    /**
     * Abbreviation for the unit.
     *
     * Optional and nullable.
     */
    abbreviation?: string | null | undefined;
  };

  /** Summary view of measurement unit data representing ingredient quantities. */
  export type ISummary = {
    /** Unique identifier of the unit. */
    id: string & tags.Format<"uuid">;

    /** Code representing the unit. */
    code: string;

    /** Full descriptive name of the unit. */
    name: string;

    /** Optional abbreviated symbol representing the unit. */
    abbreviation?: string | null | undefined;
  };
}
