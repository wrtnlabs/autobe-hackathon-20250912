import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Moderator user model including email, username, secure password hash,
 * creation and update timestamps, and optional soft deletion timestamp.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingModerator = {
  /**
   * Primary Key.
   *
   * Unique UUID identifier for the moderator.
   */
  id: string & tags.Format<"uuid">;

  /** Moderator's unique email address used for login. */
  email: string;

  /**
   * Hashed password for authentication.
   *
   * Stored securely as a hash.
   */
  password_hash: string;

  /** Unique username for moderator identification. */
  username: string;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp if applicable.
   *
   * Nullable date-time string.
   */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IRecipeSharingModerator {
  /**
   * Request body for creating a new moderator user. Includes the essential
   * credentials: email, password hash, and username. Timestamps and ID are
   * generated by the system.
   */
  export type ICreate = {
    /** Moderator's unique email address for login. */
    email: string & tags.Format<"email">;

    /** Hashed password for authentication, stored securely. */
    password_hash: string;

    /** Unique username for moderator identification. */
    username: string;
  };

  /**
   * Authorization response containing authenticated moderator user
   * information and JWT tokens for session management.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated moderator user. */
    id: string & tags.Format<"uuid">;

    /** Moderator's unique email address used for login. */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for authentication.
     *
     * Stored securely as a hash.
     */
    password_hash: string;

    /** Unique username for moderator identification. */
    username: string;

    /** Record creation timestamp in ISO 8601 format. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for last update in ISO 8601 format. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp if applicable. */
    deleted_at: (string & tags.Format<"date-time">) | null;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body for moderator login. Contains email and password hash fields
   * for authentication.
   */
  export type ILogin = {
    /** Moderator's unique email address for login. */
    email: string & tags.Format<"email">;

    /** Hashed password for authentication, stored securely. */
    password_hash: string;
  };

  /**
   * Request body for moderator token refresh containing the refresh token
   * string.
   */
  export type IRefresh = {
    /** Refresh token string used to renew the JWT access token. */
    refresh_token: string;
  };

  /** Request filter and pagination parameters for moderator list retrieval. */
  export type IRequest = {
    /** Optional filter for moderator email address. */
    email?: string | null | undefined;

    /** Optional filter for moderator username. */
    username?: string | null | undefined;

    /** Optional page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional page size limit for pagination. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Optional field name to sort by. */
    sortBy?: string | null | undefined;

    /** Sort direction, either 'asc' or 'desc'. */
    sortDirection?: string | null | undefined;
  };

  /**
   * Update payload for the moderator user. All fields are optional to support
   * partial updates.
   */
  export type IUpdate = {
    /** Moderator's unique email address used for login. */
    email?: string | undefined;

    /** Hashed password for authentication. */
    password_hash?: string | undefined;

    /** Unique username for moderator identification. */
    username?: string | undefined;

    /** Soft deletion timestamp if applicable; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of a moderator user including unique identifier, email, and
   * username.
   *
   * Used for management and administrative UI listings.
   */
  export type ISummary = {
    /** Unique identifier for the moderator user. */
    id: string & tags.Format<"uuid">;

    /** Moderator's email address used for communication and login. */
    email: string;

    /** Moderator's username unique within the moderation system. */
    username: string;
  };
}
