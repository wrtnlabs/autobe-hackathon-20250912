import { tags } from "typia";

/**
 * Represents a flag queue entry referenced in moderation workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingFlagQueue = {
  /** Unique identifier of the flag queue entry. */
  id: string & tags.Format<"uuid">;

  /** Unique identifier of the flagged review, if applicable. */
  recipe_sharing_review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Unique identifier of the user who reported the flag. */
  reported_by_user_id: string & tags.Format<"uuid">;

  /** Reason for flagging the review. */
  flag_reason: string;

  /** Current status of the flag. */
  status: string;

  /** Timestamp when the flag was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the flag was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the flag was soft deleted, if applicable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingFlagQueue {
  /** Properties required to create a new flag queue entry. */
  export type ICreate = {
    /** Unique identifier of the flagged review. Nullable if not specified. */
    recipe_sharing_review_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Unique identifier of the user reporting the flag. */
    reported_by_user_id: string & tags.Format<"uuid">;

    /** Reason for flagging the review. */
    flag_reason: string;

    /** Current status of the flag upon creation. */
    status: string;

    /** Timestamp when the flag is created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the flag entry is last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Optional soft delete timestamp. Nullable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Allows updating the properties of an existing flag queue entry.
   *
   * Users can modify related review ID, flag reason, status and timestamps as
   * needed.
   *
   * This supports accurate flag reporting and moderation workflows.
   *
   * Proper authentication and authorization checks must be in place to
   * restrict modifications to authorized users.
   *
   * All updated properties are optional, allowing partial updates.
   */
  export type IUpdate = {
    /** The flagged review's identifier. {@link recipe_sharing_reviews.id} */
    recipe_sharing_review_id?: string | null | undefined;

    /**
     * Identifier of the user who reported the content.
     * {@link recipe_sharing_regularusers.id} or
     * {@link recipe_sharing_premiumusers.id}
     */
    reported_by_user_id?: string | undefined;

    /**
     * Reason for flagging such as spam, offensive language, or personal
     * attacks.
     */
    flag_reason?: string | undefined;

    /**
     * Current review flag status: pending, in_review, resolved, or
     * dismissed.
     */
    status?: string | undefined;

    /** Flag creation timestamp. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the flag record was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /** Soft deletion timestamp if the flag entry is removed. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request parameters for searching and filtering flag queue entries.
   *
   * Supports filtering by associated review ID, reporting user ID, flag
   * reasons, status, and date range filters.
   *
   * Includes pagination and sorting controls for efficient data navigation.
   *
   * Used by moderation tools for retrieving flag queue lists.
   */
  export type IRequest = {
    /** The flagged review's identifier. {@link recipe_sharing_reviews.id} */
    recipe_sharing_review_id?: string | null | undefined;

    /**
     * Identifier of the user who reported the content.
     * {@link recipe_sharing_regularusers.id} or
     * {@link recipe_sharing_premiumusers.id}
     */
    reported_by_user_id?: string | undefined;

    /**
     * Reason for flagging such as spam, offensive language, or personal
     * attacks.
     */
    flag_reason?: string | undefined;

    /**
     * Current review flag status: pending, in_review, resolved, or
     * dismissed.
     */
    status?: string | undefined;

    /** Earliest creation timestamp filter. */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Latest creation timestamp filter. */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Earliest updated timestamp filter. */
    updated_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Latest updated timestamp filter. */
    updated_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Earliest deleted timestamp filter for soft deleted entries. */
    deleted_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /** Latest deleted timestamp filter for soft deleted entries. */
    deleted_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Sorting options (e.g., created_at desc) */
    sort?: string | undefined;
  };
}
