import { tags } from "typia";

/**
 * User review entity containing detailed text feedback on recipes.
 *
 * Includes user and recipe references, main review content, and audit
 * timestamps.
 *
 * Supports soft deletion marking via nullable deleted_at field.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingReview = {
  /** Primary Key - Unique identifier of the review */
  id: string & tags.Format<"uuid">;

  /** Belonged user who authored the review */
  recipe_sharing_user_id: string & tags.Format<"uuid">;

  /** Target recipe of the review */
  recipe_sharing_recipe_id: string & tags.Format<"uuid">;

  /** Detailed review text up to 2000 characters */
  review_text: string;

  /** Timestamp when the review was created */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the review was last updated */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable timestamp marking soft deletion of review */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingReview {
  /**
   * Request parameters for searching and filtering recipe reviews.
   *
   * All properties are optional to support flexible query construction.
   *
   * Includes filters by user, recipe, text search, status, and pagination.
   *
   * Used by endpoints supporting review searches.
   */
  export type IRequest = {
    /** Optional filter by user id */
    recipe_sharing_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional filter by recipe id */
    recipe_sharing_recipe_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Optional text search term */
    search?: string | null | undefined;

    /** Optional status filter */
    status?: string | null | undefined;

    /** Optional pagination page */
    page?: number | null | undefined;

    /** Optional pagination limit */
    limit?: number | null | undefined;
  };

  /**
   * Create payload for a new recipe sharing review.
   *
   * Includes required user and recipe IDs, and the review text.
   *
   * All properties are mandatory for creating a review entry.
   */
  export type ICreate = {
    /**
     * ID of the user submitting the review, must match an existing regular
     * or premium user ID.
     */
    recipe_sharing_user_id: string & tags.Format<"uuid">;

    /** ID of the recipe being reviewed, must be a valid recipe identifier. */
    recipe_sharing_recipe_id: string & tags.Format<"uuid">;

    /** Text content of the review, supporting up to 2000 characters. */
    review_text: string;
  };

  /**
   * Update payload for an existing recipe sharing review.
   *
   * All properties optional to support partial updates.
   *
   * Includes nullable handling for soft deletion timestamp.
   */
  export type IUpdate = {
    /**
     * ID of the user submitting the review; optional to allow for partial
     * updates.
     */
    recipe_sharing_user_id?: (string & tags.Format<"uuid">) | undefined;

    /** ID of the recipe being reviewed; optional to allow partial update. */
    recipe_sharing_recipe_id?: (string & tags.Format<"uuid">) | undefined;

    /** Updated text content of the review; optional for partial updates. */
    review_text?: string | undefined;

    /** Optional soft deletion timestamp; if null, it indicates not deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary information of a recipe sharing review with essential display
   * fields and creation timestamp.
   */
  export type ISummary = {
    /** Unique identifier of the review */
    id: string & tags.Format<"uuid">;

    /** Excerpt of the review text */
    review_text: string;

    /** Timestamp when the review was created */
    created_at: string & tags.Format<"date-time">;
  };
}
