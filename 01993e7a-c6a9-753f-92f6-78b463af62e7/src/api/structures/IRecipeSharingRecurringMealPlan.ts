import { tags } from "typia";

/**
 * Entity representing a recurring meal plan with scheduling, ownership, and
 * metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingRecurringMealPlan = {
  /** Unique identifier of the recurring meal plan. */
  id: string & tags.Format<"uuid">;

  /** UUID of the user who owns this recurring meal plan. */
  owner_user_id: string & tags.Format<"uuid">;

  /** Name of the recurring meal plan. */
  name: string;

  /** Optional description providing more detail about the meal plan. */
  description?: string | null | undefined;

  /** Recurrence schedule pattern such as 'weekly', 'biweekly', or 'monthly'. */
  recurrence_pattern: string;

  /** Start date of the recurrence in ISO 8601 format. */
  start_date: string & tags.Format<"date-time">;

  /**
   * Optional end date of the recurrence in ISO 8601 format, or null for
   * indefinite recurrence.
   */
  end_date?: (string & tags.Format<"date-time">) | null | undefined;

  /** Creation timestamp as ISO 8601 date-time string. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp as ISO 8601 date-time string. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft deletion timestamp as ISO 8601 date-time string or null if
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingRecurringMealPlan {
  /** Request body for creating a new recurring meal plan entity. */
  export type ICreate = {
    /** UUID of the user who owns this recurring meal plan. */
    owner_user_id: string & tags.Format<"uuid">;

    /** Name of the recurring meal plan. */
    name: string;

    /** Optional description of the meal plan. */
    description?: string | null | undefined;

    /** Recurrence schedule pattern such as 'weekly', 'biweekly', 'monthly'. */
    recurrence_pattern: string;

    /** Start date of the recurrence in ISO 8601 format. */
    start_date: string & tags.Format<"date-time">;

    /**
     * Optional end date of the recurrence in ISO 8601 format, or null for
     * indefinite recurrence.
     */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Request body for updating a recurring meal plan entity. */
  export type IUpdate = {
    /** Name of the recurring meal plan. */
    name?: string | null | undefined;

    /** Optional description of the meal plan. */
    description?: string | null | undefined;

    /** Recurrence schedule pattern such as 'weekly', 'biweekly', 'monthly'. */
    recurrence_pattern?: string | null | undefined;

    /** Start date of the recurrence in ISO 8601 format. */
    start_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional end date of the recurrence in ISO 8601 format or null for
     * indefinite recurrence.
     */
    end_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional soft deletion timestamp as ISO 8601 date-time string or null
     * if active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
