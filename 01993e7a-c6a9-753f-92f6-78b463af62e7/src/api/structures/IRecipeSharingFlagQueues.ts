import { tags } from "typia";

/**
 * Represents a flag queue entry referenced in moderation workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingFlagQueues = {
  /** Unique identifier of the flag queue entry. */
  id: string & tags.Format<"uuid">;

  /** Unique identifier of the flagged review, if applicable. */
  recipe_sharing_review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Unique identifier of the user who reported the flag. */
  reported_by_user_id: string & tags.Format<"uuid">;

  /** Reason for flagging the review, e.g., spam, offensive language. */
  flag_reason: string;

  /** Current status of the flag. */
  status: string;

  /** Timestamp when the flag was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the flag was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the flag was soft deleted, if applicable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IRecipeSharingFlagQueues {
  /**
   * Request body containing filters, pagination, and sorting options for flag
   * queue search.
   */
  export type IRequest = {
    /** Filter by flagged review UUID. Nullable. */
    recipe_sharing_review_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Filter by reporting user UUID. Nullable. */
    reported_by_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter by reason for the flag. Must match one of the enum values. */
    flag_reason?: string | undefined;

    /** Filter by status of the flag. Must match one of the enum values. */
    status?: string | undefined;

    /** Page number for pagination. Optional. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of entries per page. Optional. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Field to order by. Optional. */
    orderBy?: string | null | undefined;

    /** Direction of ordering: asc or desc. Optional. */
    orderDirection?: "asc" | "desc" | null | undefined;

    /** Optional full-text search term on flag reasons. */
    flagsSearchTerm?: string | null | undefined;

    /** Optional full-text search term on user identifiers. */
    usersSearchTerm?: string | null | undefined;

    /** Optional full-text search term on statuses. */
    statusSearchTerm?: string | null | undefined;

    /** Filter for flags created after this datetime. Optional. */
    createdFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for flags created before this datetime. Optional. */
    createdTo?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for flags updated after this datetime. Optional. */
    updatedFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for flags updated before this datetime. Optional. */
    updatedTo?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for flags deleted after this datetime. Optional. */
    deletedFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter for flags deleted before this datetime. Optional. */
    deletedTo?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter by creation timestamp. Optional. */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Filter by update timestamp. Optional. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Unique identifier of the flag queue entry. */
    id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Soft delete timestamp or null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional full-text search term on IDs. */
    idSearchTerm?: string | null | undefined;
  };
}
