import { tags } from "typia";

/**
 * Store ingredient price entity represents the price and availability of an
 * ingredient at a specific grocery store. Contains current pricing,
 * availability status, and audit timestamps.
 *
 * The entity links an ingredient to a grocery store along with real-time
 * pricing and availability updates, supporting shopping list cost estimations
 * and store comparisons.
 *
 * All properties are mandatory, ensuring complete records for accurate cost
 * tracking.
 *
 * Related to grocery store and ingredient entities.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingStoreIngredientPrice = {
  /**
   * Primary Key.
   *
   * Represents the unique identifier for the store ingredient price record.
   */
  id: string & tags.Format<"uuid">;

  /** Referenced grocery store. Links to recipe_sharing_grocery_stores.id */
  grocery_store_id: string & tags.Format<"uuid">;

  /** Referenced ingredient. Links to recipe_sharing_ingredients.id */
  ingredient_id: string & tags.Format<"uuid">;

  /**
   * Price of ingredient at the store in local currency.
   *
   * Represents current retail price used for cost estimation.
   */
  price: number;

  /**
   * Availability status of the ingredient at the store.
   *
   * True if ingredient is currently available; false otherwise.
   */
  available: boolean;

  /**
   * Timestamp of last price and availability update.
   *
   * ISO 8601 date-time format expected.
   */
  last_updated: string & tags.Format<"date-time">;

  /**
   * Record creation timestamp.
   *
   * ISO 8601 date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp.
   *
   * ISO 8601 date-time format.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRecipeSharingStoreIngredientPrice {
  /**
   * Request parameters for filtering, sorting, and paginating store
   * ingredient prices.
   *
   * Supports optional filters such as grocery store, ingredient,
   * availability, price range, sorting options, and pagination.
   */
  export type IRequest = {
    /**
     * Filter by grocery store ID.
     *
     * Optional filter to return prices only for a specific grocery store.
     */
    grocery_store_id?: string | null | undefined;

    /**
     * Filter by ingredient ID.
     *
     * Optional filter to return prices only for a specific ingredient.
     */
    ingredient_id?: string | null | undefined;

    /**
     * Filter by availability status.
     *
     * Optional boolean filter to return only available or unavailable
     * prices.
     */
    available?: boolean | null | undefined;

    /**
     * Minimum price filter.
     *
     * Optional filter to return prices greater than or equal to this value.
     */
    min_price?: number | null | undefined;

    /**
     * Maximum price filter.
     *
     * Optional filter to return prices less than or equal to this value.
     */
    max_price?: number | null | undefined;

    /**
     * Sort order for prices.
     *
     * Optional sorting of results: 'asc' for ascending, 'desc' for
     * descending.
     */
    price_sort?: "asc" | "desc" | null | undefined;

    /**
     * Pagination page number.
     *
     * Optional page number starting at 1.
     */
    page?: number | null | undefined;

    /**
     * Pagination page size.
     *
     * Optional number of records per page.
     */
    limit?: number | null | undefined;
  };

  /**
   * Request to create a new store ingredient price record, specifying the
   * grocery store and ingredient, price, availability, and last update
   * timestamp.
   */
  export type ICreate = {
    /** Referenced grocery store ID where price applies. */
    grocery_store_id: string & tags.Format<"uuid">;

    /** Referenced ingredient ID whose price is tracked. */
    ingredient_id: string & tags.Format<"uuid">;

    /** Current price of the ingredient at the store. */
    price: number;

    /** Whether the ingredient is available at the store. */
    available: boolean;

    /** The datetime when the price/availability was last updated. */
    last_updated: string & tags.Format<"date-time">;
  };

  /**
   * Request to update fields of an existing store ingredient price entry. All
   * fields are optional and can be updated individually.
   */
  export type IUpdate = {
    /** Updated grocery store ID. */
    grocery_store_id?: (string & tags.Format<"uuid">) | undefined;

    /** Updated ingredient ID. */
    ingredient_id?: (string & tags.Format<"uuid">) | undefined;

    /** Updated price for the ingredient. */
    price?: number | undefined;

    /** Updated availability status. */
    available?: boolean | undefined;

    /** Updated last updated timestamp. */
    last_updated?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary information for ingredient prices at grocery stores.
   *
   * Includes pricing, availability, and timestamps necessary for cost
   * calculations and shopping list generation.
   */
  export type ISummary = {
    /** Unique identifier of the store ingredient price record in the system. */
    id: string & tags.Format<"uuid">;

    /** Reference to the grocery store entity where this price applies. */
    grocery_store_id: string & tags.Format<"uuid">;

    /** Reference to the ingredient for which this price is set. */
    ingredient_id: string & tags.Format<"uuid">;

    /** Price of the ingredient at the store in local currency units. */
    price: number;

    /**
     * Availability status indicating if the ingredient is currently in
     * stock.
     */
    available: boolean;

    /**
     * Timestamp indicating the last time price or availability information
     * was updated
     */
    last_updated: string & tags.Format<"date-time">;
  };
}
