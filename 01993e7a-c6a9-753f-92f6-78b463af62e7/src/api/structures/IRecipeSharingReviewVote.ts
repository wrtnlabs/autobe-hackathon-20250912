import { tags } from "typia";

/**
 * Schema for user-submitted helpfulness votes on recipe reviews.
 *
 * Each vote indicates if the user found the review helpful and is uniquely
 * identified.
 *
 * Properties track the voting user, the review voted on, and the vote's helpful
 * status.
 *
 * Timestamps record creation and update moments.
 *
 * This schema supports feedback aggregation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRecipeSharingReviewVote = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Voting user from recipe_sharing_regularusers.id */
  recipe_sharing_user_id: string & tags.Format<"uuid">;

  /** Targeted review recipe_sharing_reviews.id */
  recipe_sharing_review_id: string & tags.Format<"uuid">;

  /** Whether the vote marks the review as helpful or not. */
  helpful: boolean;

  /** Timestamp when the vote was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the vote was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRecipeSharingReviewVote {
  /**
   * Request parameters for listing recipe sharing review votes.
   *
   * Supports pagination, sorting, and filtering by user or review ID.
   *
   * All properties are optional and nullable to allow flexible queries.
   */
  export type IRequest = {
    /** Page number for pagination, nullable. */
    page?: number | null | undefined;

    /** Maximum number of records per page, nullable. */
    limit?: number | null | undefined;

    /** Field to sort results by, nullable. */
    sortBy?: "created_at" | "updated_at" | null | undefined;

    /** Order of sorting ascending or descending; nullable. */
    sortOrder?: "asc" | "desc" | null | undefined;

    /** Filter votes by the ID of the user who voted; nullable. */
    filterByUserId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Filter votes by the ID of the review the vote belongs to; nullable. */
    filterByReviewId?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Request body for creating a new helpfulness vote for a recipe review.
   *
   * Requires user ID, review ID, and helpfulness flag.
   */
  export type ICreate = {
    /** Voting user from recipe_sharing_regularusers.id */
    recipe_sharing_user_id: string & tags.Format<"uuid">;

    /** Targeted review recipe_sharing_reviews.id */
    recipe_sharing_review_id: string & tags.Format<"uuid">;

    /** Whether the vote marks the review as helpful or not. */
    helpful: boolean;
  };

  /**
   * Request body for updating a helpfulness vote on a recipe review.
   *
   * All properties are optional.
   */
  export type IUpdate = {
    /** Voting user from recipe_sharing_regularusers.id */
    recipe_sharing_user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Targeted review recipe_sharing_reviews.id */
    recipe_sharing_review_id?: (string & tags.Format<"uuid">) | undefined;

    /** Whether the vote marks the review as helpful or not. */
    helpful?: boolean | undefined;

    /** Timestamp when the vote was created. */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when the vote was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
