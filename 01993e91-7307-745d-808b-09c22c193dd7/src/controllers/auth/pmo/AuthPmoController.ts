import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthPmoJoin } from "../../../providers/postauthPmoJoin";
import { PmoAuth } from "../../../decorators/PmoAuth";
import { PmoPayload } from "../../../decorators/payload/PmoPayload";
import { postauthPmoLogin } from "../../../providers/postauthPmoLogin";
import { postauthPmoRefresh } from "../../../providers/postauthPmoRefresh";

import { ITaskManagementPmo } from "../../../api/structures/ITaskManagementPmo";

@Controller("/auth/pmo")
export class AuthPmoController {
  /**
   * Creates a new project management officer (PMO) user account and issues
   * authentication tokens.
   *
   * Register a new Project Management Officer (PMO) account with email and
   * password hash credentials. This operation creates a secure user record in
   * the task_management_pmo table, including lifecycle timestamps and ensuring
   * email uniqueness. The system issues JWT tokens upon successful registration
   * for authorized access. Use this endpoint publicly to onboard new PMO users
   * who administrate projects and enforce standards. Strict password hashing
   * and validation apply. This operation is foundational for admin-level user
   * access control.
   *
   * @param connection
   * @param body Registration details for creating a PMO user account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPmo.IJoin,
  ): Promise<ITaskManagementPmo.IAuthorized> {
    try {
      return await postauthPmoJoin({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logs in a project management officer (PMO) and returns authorization
   * tokens.
   *
   * Authenticate an existing Project Management Officer (PMO) user using email
   * and password. Validates credentials against the task_management_pmo table
   * and returns JWT tokens for authorized session management. This operation
   * supports secure login for PMO users who manage projects and enforce
   * compliance. Passwords are securely hashed and verified. Public access is
   * enabled for user authentication.
   *
   * @param connection
   * @param body Login credentials for PMO user authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPmo.ILogin,
  ): Promise<ITaskManagementPmo.IAuthorized> {
    try {
      return await postauthPmoLogin({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for a PMO user session.
   *
   * Refresh JWT access and refresh tokens for a logged-in Project Management
   * Officer (PMO) user using a valid refresh token. Enables continued
   * authenticated sessions without password re-entry. Ensures token validity
   * and issues new tokens referencing the task_management_pmo user. Protects
   * admin-level access for governance users managing projects.
   *
   * @param connection
   * @param body Refresh token payload for renewing JWT tokens.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPmo.IRefresh,
  ): Promise<ITaskManagementPmo.IAuthorized> {
    try {
      return await postauthPmoRefresh({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
