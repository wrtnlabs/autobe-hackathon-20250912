import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDeveloperJoin } from "../../../providers/postauthDeveloperJoin";
import { DeveloperAuth } from "../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../decorators/payload/DeveloperPayload";
import { postauthDeveloperLogin } from "../../../providers/postauthDeveloperLogin";
import { postauthDeveloperRefresh } from "../../../providers/postauthDeveloperRefresh";

import { ITaskManagementDeveloper } from "../../../api/structures/ITaskManagementDeveloper";

@Controller("/auth/developer")
export class AuthDeveloperController {
  /**
   * Registration (join) operation for developers based on the
   * 'task_management_developer' Prisma DB table.
   *
   * This operation implements the registration (join) functionality for
   * developer users, enabling them to create new accounts in the system. The
   * 'task_management_developer' schema supports this operation with required
   * fields: email (unique), password_hash (hashed password), and name. The API
   * securely stores these credentials and issues JWT tokens encapsulated in the
   * response type ITaskManagementDeveloper.IAuthorized. Authentication details
   * include email/password validation and ensuring uniqueness of email. The
   * operation is accessible without prior authentication (public). Related
   * operations include login and refresh token issuance.
   *
   * @param connection
   * @param body Developer registration request body
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: ITaskManagementDeveloper.ICreate,
  ): Promise<ITaskManagementDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperJoin({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login operation for developers based on the 'task_management_developer'
   * Prisma DB table.
   *
   * This login API authenticates developers by validating their email and
   * password credentials stored in 'task_management_developer'. Upon success,
   * it issues JWT tokens encapsulated in the response type
   * ITaskManagementDeveloper.IAuthorized. This operation depends on prior
   * registration (join) and precedes token refresh functionality. It ensures
   * security by proper password hashing and token handling. The endpoint is
   * accessible without authentication.
   *
   * @param connection
   * @param body Developer login request body
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: ITaskManagementDeveloper.ILogin,
  ): Promise<ITaskManagementDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperLogin({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Token refresh operation for developers referencing the
   * 'task_management_developer' Prisma DB table.
   *
   * Token refresh operation for developer users utilizing valid refresh tokens.
   * It ensures the developer remains authenticated by exchanging refresh tokens
   * for new JWTs encapsulated in ITaskManagementDeveloper.IAuthorized response.
   * This operation follows login and join endpoints and secures session
   * longevity. The endpoint requires authentication via the refresh token and
   * is restricted to developer role users.
   *
   * @param connection
   * @param body Developer token refresh request body
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedBody()
    body: ITaskManagementDeveloper.IRefresh,
  ): Promise<ITaskManagementDeveloper.IAuthorized> {
    try {
      return await postauthDeveloperRefresh({
        developer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
