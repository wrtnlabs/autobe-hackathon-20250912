import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthDesignerJoin } from "../../../providers/postauthDesignerJoin";
import { postauthDesignerLogin } from "../../../providers/postauthDesignerLogin";
import { postauthDesignerRefresh } from "../../../providers/postauthDesignerRefresh";

import { ITaskManagementDesigner } from "../../../api/structures/ITaskManagementDesigner";

@Controller("/auth/designer")
export class AuthDesignerController {
  /**
   * Register a new Designer user (task_management_designer) account.
   *
   * Registers a new Designer user account by creating an entry in the
   * 'task_management_designer' database table. Requires unique email, secure
   * password hashing, and user name. Upon success, returns JWT authorization
   * tokens encapsulated in the 'ITaskManagementDesigner.IAuthorized' response.
   * This operation is public and is the entry point for new Designer user
   * registrations with security considerations for email uniqueness and
   * password protection via hashing.
   *
   * @param connection
   * @param body Registration payload for creating a new Designer user account
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITaskManagementDesigner.ICreate,
  ): Promise<ITaskManagementDesigner.IAuthorized> {
    try {
      return await postauthDesignerJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Designer user login operation (task_management_designer).
   *
   * Authenticates an existing Designer user by verifying email and password
   * credentials stored in 'task_management_designer'. Successful login returns
   * JWT access and refresh tokens encapsulated in
   * 'ITaskManagementDesigner.IAuthorized'. This operation is public, enforcing
   * security by validating password hashes and ensuring the user is not
   * soft-deleted.
   *
   * @param connection
   * @param body Login request containing Designer email and password for
   *   authentication
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITaskManagementDesigner.ILogin,
  ): Promise<ITaskManagementDesigner.IAuthorized> {
    try {
      return await postauthDesignerLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for Designer user (task_management_designer).
   *
   * Refreshes JWT access tokens for an authenticated Designer user by
   * validating the supplied refresh token. On success, returns a new set of
   * 'ITaskManagementDesigner.IAuthorized' tokens, supporting session
   * continuity. This operation requires a valid refresh token and ties back to
   * the 'task_management_designer' user table.
   *
   * @param connection
   * @param body Refresh token request to renew Designer JWT access tokens
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITaskManagementDesigner.IRefresh,
  ): Promise<ITaskManagementDesigner.IAuthorized> {
    try {
      return await postauthDesignerRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
