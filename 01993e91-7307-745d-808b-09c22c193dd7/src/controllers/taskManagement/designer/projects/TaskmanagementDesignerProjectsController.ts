import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementDesignerProjects } from "../../../../providers/patchtaskManagementDesignerProjects";
import { DesignerAuth } from "../../../../decorators/DesignerAuth";
import { DesignerPayload } from "../../../../decorators/payload/DesignerPayload";
import { gettaskManagementDesignerProjectsProjectId } from "../../../../providers/gettaskManagementDesignerProjectsProjectId";

import { IPageITaskManagementProject } from "../../../../api/structures/IPageITaskManagementProject";
import { ITaskManagementProject } from "../../../../api/structures/ITaskManagementProject";

@Controller("/taskManagement/designer/projects")
export class TaskmanagementDesignerProjectsController {
  /**
   * Search and retrieve a filtered, paginated list of projects.
   *
   * Retrieve a paginated list of projects supporting advanced filtering,
   * sorting, and pagination.
   *
   * This operation enables browsing and searching projects with criteria like
   * code, name, and owner information.
   *
   * Filters and pagination parameters are included in the request body.
   *
   * Response returns summarized information for each project.
   *
   * Access is allowed to all authenticated users. Pagination helps to manage
   * large result sets.
   *
   * No path parameters.
   *
   * This operation corresponds to the task_management_projects Prisma table.
   *
   * @param connection
   * @param body Pagination, filters, and search criteria for projects
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedBody()
    body: ITaskManagementProject.IRequest,
  ): Promise<IPageITaskManagementProject.ISummary> {
    try {
      return await patchtaskManagementDesignerProjects({
        designer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed project information by ID.
   *
   * Retrieve full details of a single project entity.
   *
   * This operation fetches the project data identified by projectId.
   *
   * Includes all properties such as owner, code, name, description, creation,
   * and update timestamps.
   *
   * Only authenticated and authorized users may access this detailed
   * information.
   *
   * Path parameter `projectId` is required and must be a valid UUID.
   *
   * Response returns the detailed project entity.
   *
   * Related operations for listing projects and managing projects complement
   * this.
   *
   * This is based on the task_management_projects Prisma table.
   *
   * @param connection
   * @param projectId Unique identifier of the project
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":projectId")
  public async at(
    @DesignerAuth()
    designer: DesignerPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementProject> {
    try {
      return await gettaskManagementDesignerProjectsProjectId({
        designer,
        projectId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
