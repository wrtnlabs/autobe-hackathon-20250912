import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoTaskManagementPriorities } from "../../../../providers/posttaskManagementPmoTaskManagementPriorities";
import { PmoAuth } from "../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../decorators/payload/PmoPayload";
import { patchtaskManagementPmoTaskManagementPriorities } from "../../../../providers/patchtaskManagementPmoTaskManagementPriorities";
import { gettaskManagementPmoTaskManagementPrioritiesId } from "../../../../providers/gettaskManagementPmoTaskManagementPrioritiesId";
import { puttaskManagementPmoTaskManagementPrioritiesId } from "../../../../providers/puttaskManagementPmoTaskManagementPrioritiesId";
import { deletetaskManagementPmoTaskManagementPrioritiesId } from "../../../../providers/deletetaskManagementPmoTaskManagementPrioritiesId";

import { ITaskManagementPriority } from "../../../../api/structures/ITaskManagementPriority";
import { IPageITaskManagementPriorities } from "../../../../api/structures/IPageITaskManagementPriorities";
import { ITaskManagementPriorities } from "../../../../api/structures/ITaskManagementPriorities";

@Controller("/taskManagement/pmo/taskManagementPriorities")
export class TaskmanagementPmoTaskmanagementprioritiesController {
  /**
   * Create a new task priority level in the system, defining the urgency or
   * importance of tasks that users can select when creating or updating tasks.
   * The system ensures the uniqueness of the priority code to prevent
   * duplicates.
   *
   * Only authorized users with roles capable of managing task priorities can
   * perform this operation.
   *
   * The request must provide a valid code representing the priority (e.g.,
   * 'low', 'medium', 'high'), a human-readable name, and an optional detailed
   * description to explain the priority level.
   *
   * Upon successful creation, the system returns the full priority record
   * including creation and update timestamps. No direct deletion or
   * modification of system-generated timestamps is allowed by users.
   *
   * @param connection
   * @param body Creation info of the priority
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPriority.ICreate,
  ): Promise<ITaskManagementPriority> {
    try {
      return await posttaskManagementPmoTaskManagementPriorities({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list task priorities with pagination from
   * task_management_priorities table.
   *
   * This operation retrieves a filtered and paginated list of task priority
   * entities.
   *
   * The task_management_priorities table stores the different priority levels
   * available for tasks, including Low, Medium, and High.
   *
   * Clients can specify search filters like name or code, sorting preferences,
   * and pagination.
   *
   * Security controls limit access to authorized roles such as PMO users.
   *
   * The response provides summaries optimized for client display lists along
   * with pagination metadata.
   *
   * This supports clients displaying priority options in task creation or
   * filtering screens.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for task priority
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementPriorities.IRequest,
  ): Promise<IPageITaskManagementPriorities.ISummary> {
    try {
      return await patchtaskManagementPmoTaskManagementPriorities({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed task priority information by ID from
   * task_management_priorities table.
   *
   * Retrieve a single task priority entity identified by the 'id' path
   * parameter.
   *
   * This endpoint returns full details including code, name, description, and
   * audit timestamps.
   *
   * Only authorized users such as PMO staff can access this detailed
   * information.
   *
   * The underlying record is fetched from the task_management_priorities table
   * which standardizes task urgency levels.
   *
   * No request body is required. The 'id' param must be a valid UUID.
   *
   * Clients should handle NOT FOUND errors if the 'id' does not correspond to
   * any record.
   *
   * @param connection
   * @param id Unique identifier of the target task priority
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementPriorities> {
    try {
      return await gettaskManagementPmoTaskManagementPrioritiesId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update task priority by ID.
   *
   * Update details of an existing task priority level in the system. The
   * operation targets the priority identified by its unique UUID.
   *
   * Users with appropriate administrative or PMO roles are authorized to
   * perform this action.
   *
   * The update request can modify the code (e.g., 'low', 'medium', 'high'), the
   * display name, and the description explaining the priority level. Timestamps
   * for creation are unchanged; update timestamps reflect the modification
   * time.
   *
   * The operation ensures that priority codes remain unique post-update, and
   * invalid UUIDs cause errors.
   *
   * @param connection
   * @param id Unique identifier of the task priority to update
   * @param body Updated task priority information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementPriority.IUpdate,
  ): Promise<ITaskManagementPriority> {
    try {
      return await puttaskManagementPmoTaskManagementPrioritiesId({
        pmo,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete task priority by ID.
   *
   * Permanently delete a task priority level from the system, identified by its
   * UUID.
   *
   * The operation removes the record without soft delete, so it cannot be
   * recovered later.
   *
   * Only users with administrative or PMO roles can perform this operation.
   *
   * Errors are returned for invalid or non-existing IDs.
   *
   * @param connection
   * @param id Unique identifier of the task priority to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoTaskManagementPrioritiesId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
