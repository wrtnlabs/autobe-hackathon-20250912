import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmoTaskManagementTpms } from "../../../../../providers/posttaskManagementPmoTaskManagementTpms";
import { PmoAuth } from "../../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../../decorators/payload/PmoPayload";
import { patchtaskManagementPmoTaskManagementTpms } from "../../../../../providers/patchtaskManagementPmoTaskManagementTpms";
import { puttaskManagementPmoTaskManagementTpmsId } from "../../../../../providers/puttaskManagementPmoTaskManagementTpmsId";
import { deletetaskManagementPmoTaskManagementTpmsId } from "../../../../../providers/deletetaskManagementPmoTaskManagementTpmsId";

import { ITaskManagementTpm } from "../../../../../api/structures/ITaskManagementTpm";
import { IPageITaskManagementTpm } from "../../../../../api/structures/IPageITaskManagementTpm";

@Controller("/taskManagement/pmo/taskManagement/tpms")
export class TaskmanagementPmoTaskmanagementTpmsController {
  /**
   * Create a new TPM user.
   *
   * Create a new Technical Project Manager (TPM) user.
   *
   * This operation inserts a new record into the task_management_tpm table with
   * unique email, hashed password for authentication, name, and timestamps.
   *
   * Validation includes ensuring email uniqueness and password hash presence.
   *
   * After creation, the TPM user data is returned, excluding sensitive
   * information like the password hash.
   *
   * Access control restricts this action to authorized roles such as tpm, pm,
   * or pmo with management permissions.
   *
   * Errors will occur if email duplicates exist or data validation fails.
   *
   * @param connection
   * @param body Technical Project Manager creation data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementTpm.ICreate,
  ): Promise<ITaskManagementTpm> {
    try {
      return await posttaskManagementPmoTaskManagementTpms({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of TPM user accounts.
   *
   * Retrieve a filtered page list of TPM user accounts, supporting search
   * criteria such as email, name, and status.
   *
   * Paging and sorting options are also supported to handle large data sets
   * efficiently.
   *
   * Only authorized users, typically admins or PMOs, can access TPM user
   * listings.
   *
   * The response returns a paginated structure containing TPM user summaries
   * with relevant details.
   *
   * Business logic ensures that data obeys any privacy or visibility
   * constraints based on user roles.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for TPM filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedBody()
    body: ITaskManagementTpm.IRequest,
  ): Promise<IPageITaskManagementTpm.ISummary> {
    try {
      return await patchtaskManagementPmoTaskManagementTpms({
        pmo,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update TPM user by ID.
   *
   * Update an existing Technical Project Manager (TPM) user by ID.
   *
   * This operation allows modification of TPM user properties including email,
   * password hash, name, and timestamps.
   *
   * The TPM user is identified by the UUID path parameter.
   *
   * Validation ensures email uniqueness and correct data formatting.
   *
   * Returns the updated TPM user record excluding sensitive fields.
   *
   * Authorization is required for roles such as tpm, pm, or pmo.
   *
   * @param connection
   * @param id Unique identifier of the TPM user
   * @param body Technical Project Manager update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTpm.IUpdate,
  ): Promise<ITaskManagementTpm> {
    try {
      return await puttaskManagementPmoTaskManagementTpmsId({
        pmo,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete TPM user by ID.
   *
   * Delete a Technical Project Manager (TPM) user by ID.
   *
   * This operation performs a hard delete on the TPM user record identified by
   * the UUID path parameter from the task_management_tpm table.
   *
   * Soft deletion is supported by the schema, but this operation removes the
   * record permanently.
   *
   * Access restrictions apply to authorized roles only due to data sensitivity.
   *
   * Once deleted, the user data cannot be recovered.
   *
   * Errors occur if the user ID does not exist or deletion constraints are
   * violated.
   *
   * @param connection
   * @param id Unique identifier of the TPM user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmoTaskManagementTpmsId({
        pmo,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
