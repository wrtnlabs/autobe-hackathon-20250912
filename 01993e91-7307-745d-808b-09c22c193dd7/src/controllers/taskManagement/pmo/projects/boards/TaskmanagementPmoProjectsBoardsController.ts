import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtaskManagementPmoProjectsProjectIdBoards } from "../../../../../providers/patchtaskManagementPmoProjectsProjectIdBoards";
import { PmoAuth } from "../../../../../decorators/PmoAuth";
import { PmoPayload } from "../../../../../decorators/payload/PmoPayload";
import { gettaskManagementPmoProjectsProjectIdBoardsBoardId } from "../../../../../providers/gettaskManagementPmoProjectsProjectIdBoardsBoardId";

import { IPageITaskManagementBoard } from "../../../../../api/structures/IPageITaskManagementBoard";
import { ITaskManagementBoard } from "../../../../../api/structures/ITaskManagementBoard";

@Controller("/taskManagement/pmo/projects/:projectId/boards")
export class TaskmanagementPmoProjectsBoardsController {
  /**
   * List boards under a specific project.
   *
   * Retrieve a paginated list of boards belonging to the project identified by
   * projectId.
   *
   * This endpoint supports complex filters and sorting (e.g., by creation date,
   * name) using the request body.
   *
   * Authorization is restricted to TPM, PM, and PMO roles, who manage project
   * boards.
   *
   * Each board record includes project and owner references, descriptive
   * metadata, and audit timestamps.
   *
   * This operation leverages the task_management_boards table with
   * relationships to projects and TPM owners.
   *
   * The response returns a paginated collection of board summary objects for
   * efficient listing.
   *
   * No direct modification happens; it's a read-only operation providing
   * project board overview.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param body Board filtering and pagination parameters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexBoardsInProject(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoard.IRequest,
  ): Promise<IPageITaskManagementBoard.ISummary> {
    try {
      return await patchtaskManagementPmoProjectsProjectIdBoards({
        pmo,
        projectId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail of a board by projectId and boardId.
   *
   * Get details of a specific board identified by boardId under the project
   * identified by projectId.
   *
   * This operation is restricted to users with TPM, PM, or PMO roles.
   *
   * The board entity includes references to its owning project and owner user,
   * along with metadata like name, code, description, and temporal audit
   * fields.
   *
   * Soft deletion status is reflected but does not affect retrieval unless
   * filtered.
   *
   * This operation returns comprehensive details for UI display or management.
   *
   * The request requires both projectId and boardId path parameters.
   *
   * The response contains a full board schema object as defined in the Prisma
   * schema.
   *
   * @param connection
   * @param projectId Unique identifier of the target project
   * @param boardId Unique identifier of the target board
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":boardId")
  public async atBoardInProject(
    @PmoAuth()
    pmo: PmoPayload,
    @TypedParam("projectId")
    projectId: string & tags.Format<"uuid">,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementBoard> {
    try {
      return await gettaskManagementPmoProjectsProjectIdBoardsBoardId({
        pmo,
        projectId,
        boardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
