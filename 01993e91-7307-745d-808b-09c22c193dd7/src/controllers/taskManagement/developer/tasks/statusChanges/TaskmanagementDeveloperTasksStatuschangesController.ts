import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementDeveloperTasksTaskIdStatusChanges } from "../../../../../providers/posttaskManagementDeveloperTasksTaskIdStatusChanges";
import { DeveloperAuth } from "../../../../../decorators/DeveloperAuth";
import { DeveloperPayload } from "../../../../../decorators/payload/DeveloperPayload";
import { patchtaskManagementDeveloperTasksTaskIdStatusChanges } from "../../../../../providers/patchtaskManagementDeveloperTasksTaskIdStatusChanges";
import { gettaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId } from "../../../../../providers/gettaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId";
import { puttaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId } from "../../../../../providers/puttaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId";

import { ITaskManagementTaskStatusChange } from "../../../../../api/structures/ITaskManagementTaskStatusChange";
import { IPageITaskManagementTaskStatusChange } from "../../../../../api/structures/IPageITaskManagementTaskStatusChange";

@Controller("/taskManagement/developer/tasks/:taskId/statusChanges")
export class TaskmanagementDeveloperTasksStatuschangesController {
  /**
   * Create a new task status change record for a given task. This operation
   * logs a status transition in the task's lifecycle.
   *
   * User must provide the new status ID and optionally a comment describing the
   * change.
   *
   * Operation validates input and ensures only authorized roles perform status
   * changes.
   *
   * References task_management_task_status_changes table and requires taskId
   * path parameter.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Payload for creating a task status change
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskStatusChange.ICreate,
  ): Promise<ITaskManagementTaskStatusChange> {
    try {
      return await posttaskManagementDeveloperTasksTaskIdStatusChanges({
        developer,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated list retrieval of task status changes by task ID.
   *
   * Retrieve a filtered and paginated list of status change history entries for
   * the given task.
   *
   * This method allows authorized users to track the full lifecycle of task
   * status changes by returning detailed audit trail data including new status,
   * change timestamps, and optional admin comments.
   *
   * Security is enforced to allow only permitted roles to access task status
   * histories. The operation uses path parameter taskId to identify the
   * specific task and uses the ITaskManagementTaskStatusChange.IRequest
   * requestBody schema for filter and pagination controls.
   *
   * This operation returns a paginated response of task status change records
   * referencing the task_management_task_status_changes table.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Request body for searching and pagination of task status
   *   changes
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskStatusChange.IRequest,
  ): Promise<IPageITaskManagementTaskStatusChange> {
    try {
      return await patchtaskManagementDeveloperTasksTaskIdStatusChanges({
        developer,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific task status change.
   *
   * Retrieve detailed information of a single status change record within a
   * task identified by taskId and statusChangeId.
   *
   * Useful for auditing specific status changes with all associated metadata.
   *
   * Only accessible by authorized users with appropriate role permissions.
   *
   * References the task_management_task_status_changes schema.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param statusChangeId Unique identifier of the task status change
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusChangeId")
  public async at(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("statusChangeId")
    statusChangeId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskStatusChange> {
    try {
      return await gettaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId(
        {
          developer,
          taskId,
          statusChangeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update task status change record.
   *
   * Update fields of an existing task status change record specified by taskId
   * and statusChangeId.
   *
   * Allows authorized updates to status transition data and comments.
   *
   * Ensures data integrity and adherence to validation rules on status values.
   *
   * Tied to the task_management_task_status_changes table schema.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param statusChangeId Unique identifier of the task status change
   * @param body Payload for updating a task status change
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":statusChangeId")
  public async update(
    @DeveloperAuth()
    developer: DeveloperPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("statusChangeId")
    statusChangeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskStatusChange.IUpdate,
  ): Promise<ITaskManagementTaskStatusChange> {
    try {
      return await puttaskManagementDeveloperTasksTaskIdStatusChangesStatusChangeId(
        {
          developer,
          taskId,
          statusChangeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
