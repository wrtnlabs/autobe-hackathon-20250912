import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletetaskManagementQaTaskManagementQasId } from "../../../../../providers/deletetaskManagementQaTaskManagementQasId";
import { QaAuth } from "../../../../../decorators/QaAuth";
import { QaPayload } from "../../../../../decorators/payload/QaPayload";

@Controller("/taskManagement/qa/taskManagement/qas/:id")
export class TaskmanagementQaTaskmanagementQasController {
  /**
   * Delete a QA user by ID from task_management_qa table permanently.
   *
   * This API operation permanently removes a Quality Assurance (QA) user from
   * the system based on their unique identifier. It targets the
   * 'task_management_qa' table, which manages comprehensive QA user data
   * including login credentials (email, password hash) and personal metadata.
   *
   * Security is crucial as QA accounts have specific role-based access
   * permissions for managing and updating task statuses and reporting bugs.
   *
   * The operation performs a complete deletion rather than a soft delete
   * despite the nullable deleted_at field in the schema, removing all QA user
   * data irreversibly. It expects the caller to have appropriate administrative
   * permissions.
   *
   * Upon successful execution, the QA user record identified by the path
   * parameter 'id' is deleted permanently. If the user is not found or
   * unauthorized, appropriate error responses should be returned.
   *
   * This API complements user management endpoints for other user roles such as
   * TPM, PM, Developer, Designer, and PMO.
   *
   * No request body is necessary, and the response does not include a body.
   *
   * @param connection
   * @param id The unique identifier of the QA user to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @QaAuth()
    qa: QaPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementQaTaskManagementQasId({
        qa,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
