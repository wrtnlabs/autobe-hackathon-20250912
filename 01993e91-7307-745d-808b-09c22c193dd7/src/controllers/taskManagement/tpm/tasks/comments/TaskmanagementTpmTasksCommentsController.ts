import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmTasksTaskIdComments } from "../../../../../providers/posttaskManagementTpmTasksTaskIdComments";
import { TpmAuth } from "../../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmTasksTaskIdComments } from "../../../../../providers/patchtaskManagementTpmTasksTaskIdComments";
import { gettaskManagementTpmTasksTaskIdCommentsCommentId } from "../../../../../providers/gettaskManagementTpmTasksTaskIdCommentsCommentId";
import { puttaskManagementTpmTasksTaskIdCommentsCommentId } from "../../../../../providers/puttaskManagementTpmTasksTaskIdCommentsCommentId";
import { deletetaskManagementTpmTasksTaskIdCommentsCommentId } from "../../../../../providers/deletetaskManagementTpmTasksTaskIdCommentsCommentId";

import { ITaskManagementTaskComment } from "../../../../../api/structures/ITaskManagementTaskComment";
import { IPageITaskManagementTaskComment } from "../../../../../api/structures/IPageITaskManagementTaskComment";

@Controller("/taskManagement/tpm/tasks/:taskId/comments")
export class TaskmanagementTpmTasksCommentsController {
  /**
   * Create a new comment for a task.
   *
   * Create a new comment on a task by supplying the comment content and linking
   * the comment to a commenter.
   *
   * Only authenticated and authorized users may perform this operation.
   *
   * The taskId path parameter associates the comment with the correct task.
   *
   * The request body must include the comment body and commenter ID.
   *
   * Successful creation results in the return of the new comment with metadata.
   *
   * Errors are returned for invalid input or unauthorized actions.
   *
   * This endpoint complements other comment management operations such as
   * update, retrieve, and delete.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Data required to create a new task comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskComment.ICreate,
  ): Promise<ITaskManagementTaskComment> {
    try {
      return await posttaskManagementTpmTasksTaskIdComments({
        tpm,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search comments on a task.
   *
   * Retrieve a paginated list of comments belonging to a specific task. This
   * operation supports filtering, sorting, and pagination to efficiently access
   * comment data.
   *
   * Request body contains filtering and pagination parameters.
   *
   * Security considerations ensure only authorized users can view task
   * comments.
   *
   * Response includes paginated comment summary data.
   *
   * Associated with 'task_management_task_comments' table in Prisma schema.
   *
   * Error handling includes validation of taskId and request parameters.
   *
   * This operation is designed as PATCH with request body for complex query
   * parameters.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Search criteria and pagination parameters for task comments
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexComments(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskComment.IRequest,
  ): Promise<IPageITaskManagementTaskComment.ISummary> {
    try {
      return await patchtaskManagementTpmTasksTaskIdComments({
        tpm,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific comment on a task.
   *
   * Retrieve a specific comment on a task using the unique identifiers for both
   * the task and the comment.
   *
   * This operation allows clients to fetch detailed information about the
   * comment including the content, the author (commenter), and timestamps. It
   * strictly retrieves only existing, non-deleted comments.
   *
   * Authorization is required and typically granted to authenticated users who
   * have viewing rights on the task.
   *
   * This operation corresponds to fetching data from the
   * task_management_task_comments table in the database.
   *
   * Error cases include not found if the comment or task does not exist or
   * access is unauthorized.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param commentId Unique identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskComment> {
    try {
      return await gettaskManagementTpmTasksTaskIdCommentsCommentId({
        tpm,
        taskId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific comment on a task.
   *
   * This operation requires the unique taskId and commentId path parameters.
   *
   * Only users authorized to edit the comment may perform this operation.
   *
   * The request body must contain the fields to update, typically the comment
   * body.
   *
   * Successful updates return the updated comment data.
   *
   * Errors for unauthorized access or invalid data will be returned
   * accordingly.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param commentId Unique identifier of the target comment
   * @param body Data to update an existing task comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskComment.IUpdate,
  ): Promise<ITaskManagementTaskComment> {
    try {
      return await puttaskManagementTpmTasksTaskIdCommentsCommentId({
        tpm,
        taskId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft delete) a comment on a task.
   *
   * Soft delete a comment on a task by marking its deleted_at field with the
   * current timestamp.
   *
   * Only authorized users can perform this operation.
   *
   * Once deleted, the comment is excluded from active queries.
   *
   * Errors will be returned for unauthorized or invalid requests.
   *
   * This operation completes the standard set of comment management endpoints.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param commentId Unique identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmTasksTaskIdCommentsCommentId({
        tpm,
        taskId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
