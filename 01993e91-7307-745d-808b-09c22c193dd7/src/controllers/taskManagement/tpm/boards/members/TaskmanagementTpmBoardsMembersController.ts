import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmBoardsBoardIdMembers } from "../../../../../providers/posttaskManagementTpmBoardsBoardIdMembers";
import { TpmAuth } from "../../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmBoardsBoardIdMembers } from "../../../../../providers/patchtaskManagementTpmBoardsBoardIdMembers";
import { gettaskManagementTpmBoardsBoardIdMembersMemberId } from "../../../../../providers/gettaskManagementTpmBoardsBoardIdMembersMemberId";
import { puttaskManagementTpmBoardsBoardIdMembersMemberId } from "../../../../../providers/puttaskManagementTpmBoardsBoardIdMembersMemberId";
import { deletetaskManagementTpmBoardsBoardIdMembersMemberId } from "../../../../../providers/deletetaskManagementTpmBoardsBoardIdMembersMemberId";

import { ITaskManagementBoardMember } from "../../../../../api/structures/ITaskManagementBoardMember";
import { IPageITaskManagementBoardMember } from "../../../../../api/structures/IPageITaskManagementBoardMember";

@Controller("/taskManagement/tpm/boards/:boardId/members")
export class TaskmanagementTpmBoardsMembersController {
  /**
   * Create a new board member.
   *
   * This API operation creates a new member association to a board, allowing
   * the addition of a user as a member to a specific board identified by
   * boardId.
   *
   * The request body must include userId, representing the user to be added as
   * a member.
   *
   * Upon successful creation, the API returns the full membership record
   * including board and user references and timestamps.
   *
   * Authorized roles such as tpm, pm, pmo, developer, designer, and qa can
   * perform this operation.
   *
   * The operation directly manipulates the task_management_board_members table,
   * ensuring data integrity and audit compliance.
   *
   * @param connection
   * @param boardId Unique identifier of the board
   * @param body Information of the new board member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoardMember.ICreate,
  ): Promise<ITaskManagementBoardMember> {
    try {
      return await posttaskManagementTpmBoardsBoardIdMembers({
        tpm,
        boardId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated list of board members.
   *
   * Retrieves a list of members for a specific board identified by boardId.
   *
   * Supports pagination, filtering, and sorting through the request body
   * parameters.
   *
   * Only users with TPM or PMO roles can access this data, ensuring secure and
   * role-appropriate data disclosure.
   *
   * Returned data includes member details as per the
   * task_management_board_members schema entity, facilitating task assignment
   * and board membership management.
   *
   * @param connection
   * @param boardId Unique identifier of the target board
   * @param body Criteria for searching and paginating board members
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoardMember.IRequest,
  ): Promise<IPageITaskManagementBoardMember.ISummary> {
    try {
      return await patchtaskManagementTpmBoardsBoardIdMembers({
        tpm,
        boardId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details about a specific board member.
   *
   * This API operation retrieves detailed information about a specific member
   * of a board in the task management system. The board and member are
   * identified by their unique UUIDs.
   *
   * Users having valid authentication and appropriate role permissions like
   * tpm, pm, pmo, developer, designer, or qa can fetch membership details for
   * the specified memberId within the given boardId.
   *
   * The operation maps to the task_management_board_members table in the Prisma
   * schema, involving fields such as boardId (foreign key to boards), userId
   * (member user), and creation/update timestamps. Soft deletion is handled by
   * filtering out memberships with non-null deleted_at timestamps.
   *
   * Validation ensures both IDs are valid UUID strings and represent existing
   * entities.
   *
   * Errors include not found if membership does not exist or is soft deleted,
   * and unauthorized if requester lacks permission.
   *
   * @param connection
   * @param boardId Unique identifier of the board
   * @param memberId Unique identifier of the board member user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementBoardMember> {
    try {
      return await gettaskManagementTpmBoardsBoardIdMembersMemberId({
        tpm,
        boardId,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a board member's information.
   *
   * This API operation updates information of an existing member associated
   * with a board. The member is identified by memberId, and the board is
   * identified by boardId.
   *
   * The operation accepts updated membership fields via the request body.
   *
   * It relates to the task_management_board_members table that tracks
   * membership associations between users and boards, including timestamps and
   * soft-deletion flags.
   *
   * Appropriate authorization is required to modify membership information. The
   * API provides the updated membership record upon success.
   *
   * This update operation helps maintain correct membership information and
   * supports audit compliance.
   *
   * @param connection
   * @param boardId Unique identifier of the board
   * @param memberId Unique identifier of the board member user
   * @param body Updated information for the board member
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":memberId")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementBoardMember.IUpdate,
  ): Promise<ITaskManagementBoardMember> {
    try {
      return await puttaskManagementTpmBoardsBoardIdMembersMemberId({
        tpm,
        boardId,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a board member.
   *
   * This API operation removes a member from a board, identified by memberId,
   * within the specified board identified by boardId.
   *
   * It deletes the membership record in the task_management_board_members table
   * linking the user to the board.
   *
   * Soft delete semantics apply if implemented; otherwise, the record is fully
   * removed.
   *
   * Authorization checks confirm the requester has permission to delete board
   * members.
   *
   * No response body is returned upon successful deletion.
   *
   * Errors include not found if the membership does not exist or forbidden if
   * unauthorized.
   *
   * @param connection
   * @param boardId Unique identifier of the board
   * @param memberId Unique identifier of the board member user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":memberId")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmBoardsBoardIdMembersMemberId({
        tpm,
        boardId,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
