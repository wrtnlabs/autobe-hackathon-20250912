import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmTaskManagementPriorities } from "../../../../providers/posttaskManagementTpmTaskManagementPriorities";
import { TpmAuth } from "../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../decorators/payload/TpmPayload";
import { puttaskManagementTpmTaskManagementPrioritiesId } from "../../../../providers/puttaskManagementTpmTaskManagementPrioritiesId";
import { deletetaskManagementTpmTaskManagementPrioritiesId } from "../../../../providers/deletetaskManagementTpmTaskManagementPrioritiesId";

import { ITaskManagementPriority } from "../../../../api/structures/ITaskManagementPriority";

@Controller("/taskManagement/tpm/taskManagementPriorities")
export class TaskmanagementTpmTaskmanagementprioritiesController {
  /**
   * Create a new task priority level in the system, defining the urgency or
   * importance of tasks that users can select when creating or updating tasks.
   * The system ensures the uniqueness of the priority code to prevent
   * duplicates.
   *
   * Only authorized users with roles capable of managing task priorities can
   * perform this operation.
   *
   * The request must provide a valid code representing the priority (e.g.,
   * 'low', 'medium', 'high'), a human-readable name, and an optional detailed
   * description to explain the priority level.
   *
   * Upon successful creation, the system returns the full priority record
   * including creation and update timestamps. No direct deletion or
   * modification of system-generated timestamps is allowed by users.
   *
   * @param connection
   * @param body Creation info of the priority
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementPriority.ICreate,
  ): Promise<ITaskManagementPriority> {
    try {
      return await posttaskManagementTpmTaskManagementPriorities({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update task priority by ID.
   *
   * Update details of an existing task priority level in the system. The
   * operation targets the priority identified by its unique UUID.
   *
   * Users with appropriate administrative or PMO roles are authorized to
   * perform this action.
   *
   * The update request can modify the code (e.g., 'low', 'medium', 'high'), the
   * display name, and the description explaining the priority level. Timestamps
   * for creation are unchanged; update timestamps reflect the modification
   * time.
   *
   * The operation ensures that priority codes remain unique post-update, and
   * invalid UUIDs cause errors.
   *
   * @param connection
   * @param id Unique identifier of the task priority to update
   * @param body Updated task priority information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementPriority.IUpdate,
  ): Promise<ITaskManagementPriority> {
    try {
      return await puttaskManagementTpmTaskManagementPrioritiesId({
        tpm,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete task priority by ID.
   *
   * Permanently delete a task priority level from the system, identified by its
   * UUID.
   *
   * The operation removes the record without soft delete, so it cannot be
   * recovered later.
   *
   * Only users with administrative or PMO roles can perform this operation.
   *
   * Errors are returned for invalid or non-existing IDs.
   *
   * @param connection
   * @param id Unique identifier of the task priority to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementTpmTaskManagementPrioritiesId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
