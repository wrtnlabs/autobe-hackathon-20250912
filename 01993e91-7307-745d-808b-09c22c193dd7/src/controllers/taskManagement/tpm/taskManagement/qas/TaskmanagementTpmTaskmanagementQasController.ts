import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementTpmTaskManagementQas } from "../../../../../providers/posttaskManagementTpmTaskManagementQas";
import { TpmAuth } from "../../../../../decorators/TpmAuth";
import { TpmPayload } from "../../../../../decorators/payload/TpmPayload";
import { patchtaskManagementTpmTaskManagementQas } from "../../../../../providers/patchtaskManagementTpmTaskManagementQas";
import { gettaskManagementTpmTaskManagementQasId } from "../../../../../providers/gettaskManagementTpmTaskManagementQasId";
import { puttaskManagementTpmTaskManagementQasId } from "../../../../../providers/puttaskManagementTpmTaskManagementQasId";

import { ITaskManagementQa } from "../../../../../api/structures/ITaskManagementQa";
import { IPageITaskManagementQa } from "../../../../../api/structures/IPageITaskManagementQa";

@Controller("/taskManagement/tpm/taskManagement/qas")
export class TaskmanagementTpmTaskmanagementQasController {
  /**
   * Create QA user account.
   *
   * Create a new Quality Assurance (QA) user account. Requires email, password
   * hash, and name.
   *
   * Ensures email uniqueness and password security.
   *
   * Restricted to authorized personnel such as tpm, pm, or pmo roles.
   *
   * @param connection
   * @param body QA user creation information
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementQa.ICreate,
  ): Promise<ITaskManagementQa> {
    try {
      return await posttaskManagementTpmTaskManagementQas({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List QA user accounts with filtering and pagination.
   *
   * Retrieve a list of Quality Assurance (QA) user accounts with support for
   * advanced filtering by email, name, creation timestamp, and update
   * timestamp. The operation includes pagination parameters and sorting control
   * to efficiently manage large data sets.
   *
   * Only authorized roles such as tpm, pm, or pmo can access this data to
   * ensure security and privacy compliance. This operation is essential for
   * managing QA users within the task management system.
   *
   * The underlying database entity is task_management_qa, which stores user
   * authentication data, email, and metadata.
   *
   * Error handling includes validation of filter criteria and pagination input.
   *
   * @param connection
   * @param body Search and pagination criteria for QA users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedBody()
    body: ITaskManagementQa.IRequest,
  ): Promise<IPageITaskManagementQa.ISummary> {
    try {
      return await patchtaskManagementTpmTaskManagementQas({
        tpm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get QA user details by UUID.
   *
   * Retrieve detailed information about a specified QA user by their UUID. The
   * response includes email, name, creation, update, and soft deletion
   * timestamps.
   *
   * Access is restricted to authorized project roles for privacy.
   *
   * Validation handles cases of missing or invalid UUIDs.
   *
   * @param connection
   * @param id Unique identifier of the QA user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementQa> {
    try {
      return await gettaskManagementTpmTaskManagementQasId({
        tpm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update QA user account by UUID.
   *
   * Update an existing QA user account identified by UUID. Allows modification
   * of email, name, and password hash.
   *
   * Authorization and validation rules apply.
   *
   * Supports concurrency control and error handling for invalid inputs.
   *
   * @param connection
   * @param id UUID of the QA user to update
   * @param body QA user update payload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @TpmAuth()
    tpm: TpmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementQa.IUpdate,
  ): Promise<ITaskManagementQa> {
    try {
      return await puttaskManagementTpmTaskManagementQasId({
        tpm,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
