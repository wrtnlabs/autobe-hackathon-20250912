import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmTaskManagementPms } from "../../../../../providers/posttaskManagementPmTaskManagementPms";
import { PmAuth } from "../../../../../decorators/PmAuth";
import { PmPayload } from "../../../../../decorators/payload/PmPayload";
import { gettaskManagementPmTaskManagementPmsId } from "../../../../../providers/gettaskManagementPmTaskManagementPmsId";
import { puttaskManagementPmTaskManagementPmsId } from "../../../../../providers/puttaskManagementPmTaskManagementPmsId";
import { deletetaskManagementPmTaskManagementPmsId } from "../../../../../providers/deletetaskManagementPmTaskManagementPmsId";

import { ITaskManagementPm } from "../../../../../api/structures/ITaskManagementPm";

@Controller("/taskManagement/pm/taskManagement/pms")
export class TaskmanagementPmTaskmanagementPmsController {
  /**
   * Create a new Project Manager entity in the system. The operation requires
   * providing the email, password hash, and name fields at minimum, with
   * optional soft delete and timestamp fields managed automatically.
   *
   * Role-based access control limits this operation to users with 'pm' role to
   * prevent unauthorized account creation.
   *
   * Input validation must rigorously check email uniqueness and correct
   * password hashing standards.
   *
   * On successful creation, the system returns the newly created Project
   * Manager entity with all details, excluding sensitive password hash for
   * security.
   *
   * Errors must be handled gracefully for duplicate emails or invalid input
   * without exposing sensitive details.
   *
   * @param connection
   * @param body Creation information for a new Project Manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @PmAuth()
    pm: PmPayload,
    @TypedBody()
    body: ITaskManagementPm.ICreate,
  ): Promise<ITaskManagementPm> {
    try {
      return await posttaskManagementPmTaskManagementPms({
        pm,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single Project Manager entity by unique ID.
   *
   * Retrieve detailed information about a specific Project Manager by their
   * unique identifier. This endpoint supports management and profile viewing
   * use cases.
   *
   * Security considerations include restricting access to users with 'pm' role
   * only, as the entity contains sensitive authentication information.
   *
   * This operation strictly adheres to the Prisma schema for
   * 'task_management_pm', including the 'deleted_at' soft delete field to allow
   * for recovery and audit trails.
   *
   * Validation must ensure the provided ID is a valid UUID and corresponds to
   * an existing record.
   *
   * Errors should be appropriately returned if the PM record is not found or
   * access is unauthorized.
   *
   * @param connection
   * @param id Unique identifier of the target Project Manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementPm> {
    try {
      return await gettaskManagementPmTaskManagementPmsId({
        pm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing Project Manager entity by ID. This operation allows
   * modification of email, password hash, and name fields.
   *
   * Access control ensures only users with 'pm' role can perform updates.
   *
   * Input validation checks for proper email format and password hashing
   * consistency are required.
   *
   * The soft delete field 'deleted_at' is respected to prevent updates on
   * deleted records.
   *
   * This operation returns the updated Project Manager entity for confirmation.
   *
   * Error scenarios include attempts to update non-existent or soft deleted PM
   * records, which must be handled with clear error messages.
   *
   * @param connection
   * @param id Unique identifier of the target Project Manager
   * @param body Update information for an existing Project Manager
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementPm.IUpdate,
  ): Promise<ITaskManagementPm> {
    try {
      return await puttaskManagementPmTaskManagementPmsId({
        pm,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a Project Manager by ID.
   *
   * Delete a specific Project Manager user by their UUID identifier.
   *
   * This operation permanently removes the record from the database, including
   * all associated data. Only users with the 'pm' role are authorized to
   * perform this deletion to ensure proper access control.
   *
   * If the PM record does not exist, a suitable error response is returned. No
   * request body is required or accepted.
   *
   * Upon success, no response body is returned.
   *
   * @param connection
   * @param id Unique identifier of the Project Manager to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erasePm(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmTaskManagementPmsId({
        pm,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
