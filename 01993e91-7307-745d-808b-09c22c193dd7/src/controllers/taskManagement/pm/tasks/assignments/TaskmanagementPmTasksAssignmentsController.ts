import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { posttaskManagementPmTasksTaskIdAssignments } from "../../../../../providers/posttaskManagementPmTasksTaskIdAssignments";
import { PmAuth } from "../../../../../decorators/PmAuth";
import { PmPayload } from "../../../../../decorators/payload/PmPayload";
import { patchtaskManagementPmTasksTaskIdAssignments } from "../../../../../providers/patchtaskManagementPmTasksTaskIdAssignments";
import { gettaskManagementPmTasksTaskIdAssignmentsAssignmentId } from "../../../../../providers/gettaskManagementPmTasksTaskIdAssignmentsAssignmentId";
import { puttaskManagementPmTasksTaskIdAssignmentsAssignmentId } from "../../../../../providers/puttaskManagementPmTasksTaskIdAssignmentsAssignmentId";
import { deletetaskManagementPmTasksTaskIdAssignmentsAssignmentId } from "../../../../../providers/deletetaskManagementPmTasksTaskIdAssignmentsAssignmentId";

import { ITaskManagementTaskAssignment } from "../../../../../api/structures/ITaskManagementTaskAssignment";
import { ITaskManagementTaskAssignmentArray } from "../../../../../api/structures/ITaskManagementTaskAssignmentArray";

@Controller("/taskManagement/pm/tasks/:taskId/assignments")
export class TaskmanagementPmTasksAssignmentsController {
  /**
   * Create a new assignment for a task.
   *
   * This API endpoint allows users with appropriate roles (TPM, PM, PMO) to
   * create a new assignment of a user to a task. The assignment represents that
   * the user is responsible for or working on the task.
   *
   * The operation requires the path parameter 'taskId' which identifies the
   * task to assign. The request body includes at minimum the 'assigneeId',
   * which must reference a valid user in the system with a role capable of
   * being assigned (likely from TPM, PM, Developer, Designer, QA roles as per
   * business rules).
   *
   * The API ensures that the assignment record is created with an accurate
   * timestamp reflecting when the assignment was made. This operation
   * contributes to task management by enabling clear ownership and
   * collaborative work on tasks.
   *
   * Security considerations:
   *
   * - Only authorized roles can perform assignment creation.
   * - The system validates that the assigneeId is valid and user exists.
   *
   * This operation corresponds to the 'task_management_task_assignments' Prisma
   * DB table.
   *
   * Error handling:
   *
   * - Returns errors if taskId is invalid or not found.
   * - Returns errors if assigneeId is missing or invalid.
   *
   * Successful operation returns the created assignment information.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param body Assignment creation data including assignee ID
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAssignment(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskAssignment.ICreate,
  ): Promise<ITaskManagementTaskAssignment> {
    try {
      return await posttaskManagementPmTasksTaskIdAssignments({
        pm,
        taskId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the list of assignments for a given task identified by taskId.
   *
   * This API operation retrieves all assignments related to a specific task
   * using the task's unique identifier 'taskId'.
   *
   * Each assignment links a user (typically a TPM role user) to the task,
   * including the assignment timestamp.
   *
   * This read-only operation supports roles TPM, PM, PMO, Developer, Designer,
   * and QA.
   *
   * No request body is required.
   *
   * The response contains a list of task assignments details.
   *
   * The operation may return errors if the task does not exist or access is
   * unauthorized.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexTaskAssignments(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskAssignmentArray> {
    try {
      return await patchtaskManagementPmTasksTaskIdAssignments({
        pm,
        taskId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific assignment by assignmentId for a task by taskId.
   *
   * This API operation fetches the detailed information of a single task
   * assignment identified by 'assignmentId' under the parent task identified by
   * 'taskId'.
   *
   * It returns assignment data including the assignee ID and the assigned
   * timestamp.
   *
   * Allowed roles include TPM, PM, PMO, Developer, Designer, and QA.
   *
   * No request body is required.
   *
   * Errors are returned if the assignment or parent task does not exist or
   * access is unauthorized.
   *
   * Useful for audit trails and individual assignment inspection.
   *
   * @param connection
   * @param taskId Unique identifier of the parent task
   * @param assignmentId Unique identifier of the target assignment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":assignmentId")
  public async atTaskAssignment(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
  ): Promise<ITaskManagementTaskAssignment> {
    try {
      return await gettaskManagementPmTasksTaskIdAssignmentsAssignmentId({
        pm,
        taskId,
        assignmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing task assignment.
   *
   * This API endpoint allows authorized roles to update a specific task
   * assignment for a task. The path parameters 'taskId' and 'assignmentId'
   * specify the target assignment record.
   *
   * The request body includes fields to update, typically allowing changing the
   * assignee or updating timestamps. This supports managing task ownership
   * changes or corrections.
   *
   * Security checks ensure only authorized users can update assignments.
   *
   * Error handling:
   *
   * - Returns error if taskId or assignmentId not found.
   * - Returns error if update data is invalid.
   *
   * This corresponds to the 'task_management_task_assignments' table in the
   * Prisma schema.
   *
   * No response body data is required on success, but updated assignment data
   * may be returned depending on implementation.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param assignmentId Unique identifier of the task assignment to update
   * @param body Assignment update data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":assignmentId")
  public async updateAssignment(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITaskManagementTaskAssignment.IUpdate,
  ): Promise<ITaskManagementTaskAssignment> {
    try {
      return await puttaskManagementPmTasksTaskIdAssignmentsAssignmentId({
        pm,
        taskId,
        assignmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a task assignment.
   *
   * This API endpoint enables authorized roles to delete a task assignment by
   * specifying both the taskId and the assignmentId in the path. Upon deletion,
   * the assignment record is removed from the database, effectively unassigning
   * the user from the task.
   *
   * Security considerations:
   *
   * - Only users with appropriate roles can perform deletion.
   *
   * Error handling:
   *
   * - Returns errors if taskId or assignmentId are invalid or not found.
   *
   * This corresponds to the 'task_management_task_assignments' table in the
   * Prisma schema.
   *
   * No request body or response body is required for this operation.
   *
   * @param connection
   * @param taskId Unique identifier of the target task
   * @param assignmentId Unique identifier of the task assignment to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":assignmentId")
  public async eraseAssignment(
    @PmAuth()
    pm: PmPayload,
    @TypedParam("taskId")
    taskId: string & tags.Format<"uuid">,
    @TypedParam("assignmentId")
    assignmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetaskManagementPmTasksTaskIdAssignmentsAssignmentId({
        pm,
        taskId,
        assignmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
