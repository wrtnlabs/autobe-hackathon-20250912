import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementPm } from "../../../../../structures/ITaskManagementPm";

/**
 * Create a new Project Manager entity in the system. The operation requires
 * providing the email, password hash, and name fields at minimum, with optional
 * soft delete and timestamp fields managed automatically.
 *
 * Role-based access control limits this operation to users with 'pm' role to
 * prevent unauthorized account creation.
 *
 * Input validation must rigorously check email uniqueness and correct password
 * hashing standards.
 *
 * On successful creation, the system returns the newly created Project Manager
 * entity with all details, excluding sensitive password hash for security.
 *
 * Errors must be handled gracefully for duplicate emails or invalid input
 * without exposing sensitive details.
 *
 * @param props.connection
 * @param props.body Creation information for a new Project Manager
 * @path /taskManagement/pm/taskManagement/pms
 * @accessor api.functional.taskManagement.pm.taskManagement.pms.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation information for a new Project Manager */
    body: ITaskManagementPm.ICreate;
  };
  export type Body = ITaskManagementPm.ICreate;
  export type Response = ITaskManagementPm;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/taskManagement/pms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pm/taskManagement/pms";
  export const random = (): ITaskManagementPm =>
    typia.random<ITaskManagementPm>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single Project Manager entity by unique ID.
 *
 * Retrieve detailed information about a specific Project Manager by their
 * unique identifier. This endpoint supports management and profile viewing use
 * cases.
 *
 * Security considerations include restricting access to users with 'pm' role
 * only, as the entity contains sensitive authentication information.
 *
 * This operation strictly adheres to the Prisma schema for
 * 'task_management_pm', including the 'deleted_at' soft delete field to allow
 * for recovery and audit trails.
 *
 * Validation must ensure the provided ID is a valid UUID and corresponds to an
 * existing record.
 *
 * Errors should be appropriately returned if the PM record is not found or
 * access is unauthorized.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target Project Manager
 * @path /taskManagement/pm/taskManagement/pms/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.pms.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target Project Manager */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementPm;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pm/taskManagement/pms/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/taskManagement/pms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementPm =>
    typia.random<ITaskManagementPm>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing Project Manager entity by ID. This operation allows
 * modification of email, password hash, and name fields.
 *
 * Access control ensures only users with 'pm' role can perform updates.
 *
 * Input validation checks for proper email format and password hashing
 * consistency are required.
 *
 * The soft delete field 'deleted_at' is respected to prevent updates on deleted
 * records.
 *
 * This operation returns the updated Project Manager entity for confirmation.
 *
 * Error scenarios include attempts to update non-existent or soft deleted PM
 * records, which must be handled with clear error messages.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target Project Manager
 * @param props.body Update information for an existing Project Manager
 * @path /taskManagement/pm/taskManagement/pms/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.pms.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target Project Manager */
    id: string & tags.Format<"uuid">;

    /** Update information for an existing Project Manager */
    body: ITaskManagementPm.IUpdate;
  };
  export type Body = ITaskManagementPm.IUpdate;
  export type Response = ITaskManagementPm;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/taskManagement/pms/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/taskManagement/pms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementPm =>
    typia.random<ITaskManagementPm>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a Project Manager by ID.
 *
 * Delete a specific Project Manager user by their UUID identifier.
 *
 * This operation permanently removes the record from the database, including
 * all associated data. Only users with the 'pm' role are authorized to perform
 * this deletion to ensure proper access control.
 *
 * If the PM record does not exist, a suitable error response is returned. No
 * request body is required or accepted.
 *
 * Upon success, no response body is returned.
 *
 * @param props.connection
 * @param props.id Unique identifier of the Project Manager to delete
 * @path /taskManagement/pm/taskManagement/pms/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.pms.erasePm
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erasePm(
  connection: IConnection,
  props: erasePm.Props,
): Promise<void> {
  return true === connection.simulate
    ? erasePm.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erasePm.METADATA,
          path: erasePm.path(props),
          status: null,
        },
      );
}
export namespace erasePm {
  export type Props = {
    /** Unique identifier of the Project Manager to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/taskManagement/pms/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/taskManagement/pms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erasePm.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erasePm.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
