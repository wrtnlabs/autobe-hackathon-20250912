import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTpm } from "../../../../../structures/ITaskManagementTpm";

/**
 * Create a new TPM user.
 *
 * Create a new Technical Project Manager (TPM) user.
 *
 * This operation inserts a new record into the task_management_tpm table with
 * unique email, hashed password for authentication, name, and timestamps.
 *
 * Validation includes ensuring email uniqueness and password hash presence.
 *
 * After creation, the TPM user data is returned, excluding sensitive
 * information like the password hash.
 *
 * Access control restricts this action to authorized roles such as tpm, pm, or
 * pmo with management permissions.
 *
 * Errors will occur if email duplicates exist or data validation fails.
 *
 * @param props.connection
 * @param props.body Technical Project Manager creation data
 * @path /taskManagement/pm/taskManagement/tpms
 * @accessor api.functional.taskManagement.pm.taskManagement.tpms.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Technical Project Manager creation data */
    body: ITaskManagementTpm.ICreate;
  };
  export type Body = ITaskManagementTpm.ICreate;
  export type Response = ITaskManagementTpm;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/taskManagement/tpms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pm/taskManagement/tpms";
  export const random = (): ITaskManagementTpm =>
    typia.random<ITaskManagementTpm>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update TPM user by ID.
 *
 * Update an existing Technical Project Manager (TPM) user by ID.
 *
 * This operation allows modification of TPM user properties including email,
 * password hash, name, and timestamps.
 *
 * The TPM user is identified by the UUID path parameter.
 *
 * Validation ensures email uniqueness and correct data formatting.
 *
 * Returns the updated TPM user record excluding sensitive fields.
 *
 * Authorization is required for roles such as tpm, pm, or pmo.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TPM user
 * @param props.body Technical Project Manager update data
 * @path /taskManagement/pm/taskManagement/tpms/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.tpms.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the TPM user */
    id: string & tags.Format<"uuid">;

    /** Technical Project Manager update data */
    body: ITaskManagementTpm.IUpdate;
  };
  export type Body = ITaskManagementTpm.IUpdate;
  export type Response = ITaskManagementTpm;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/taskManagement/tpms/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/taskManagement/tpms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTpm =>
    typia.random<ITaskManagementTpm>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete TPM user by ID.
 *
 * Delete a Technical Project Manager (TPM) user by ID.
 *
 * This operation performs a hard delete on the TPM user record identified by
 * the UUID path parameter from the task_management_tpm table.
 *
 * Soft deletion is supported by the schema, but this operation removes the
 * record permanently.
 *
 * Access restrictions apply to authorized roles only due to data sensitivity.
 *
 * Once deleted, the user data cannot be recovered.
 *
 * Errors occur if the user ID does not exist or deletion constraints are
 * violated.
 *
 * @param props.connection
 * @param props.id Unique identifier of the TPM user
 * @path /taskManagement/pm/taskManagement/tpms/:id
 * @accessor api.functional.taskManagement.pm.taskManagement.tpms.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the TPM user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/taskManagement/tpms/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/taskManagement/tpms/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
