import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskComment } from "../../../../../structures/ITaskManagementTaskComment";
import { IPageITaskManagementTaskComment } from "../../../../../structures/IPageITaskManagementTaskComment";

/**
 * Create a new comment for a task.
 *
 * Create a new comment on a task by supplying the comment content and linking
 * the comment to a commenter.
 *
 * Only authenticated and authorized users may perform this operation.
 *
 * The taskId path parameter associates the comment with the correct task.
 *
 * The request body must include the comment body and commenter ID.
 *
 * Successful creation results in the return of the new comment with metadata.
 *
 * Errors are returned for invalid input or unauthorized actions.
 *
 * This endpoint complements other comment management operations such as update,
 * retrieve, and delete.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Data required to create a new task comment
 * @path /taskManagement/pm/tasks/:taskId/comments
 * @accessor api.functional.taskManagement.pm.tasks.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Data required to create a new task comment */
    body: ITaskManagementTaskComment.ICreate;
  };
  export type Body = ITaskManagementTaskComment.ICreate;
  export type Response = ITaskManagementTaskComment;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pm/tasks/:taskId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/comments`;
  export const random = (): ITaskManagementTaskComment =>
    typia.random<ITaskManagementTaskComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search comments on a task.
 *
 * Retrieve a paginated list of comments belonging to a specific task. This
 * operation supports filtering, sorting, and pagination to efficiently access
 * comment data.
 *
 * Request body contains filtering and pagination parameters.
 *
 * Security considerations ensure only authorized users can view task comments.
 *
 * Response includes paginated comment summary data.
 *
 * Associated with 'task_management_task_comments' table in Prisma schema.
 *
 * Error handling includes validation of taskId and request parameters.
 *
 * This operation is designed as PATCH with request body for complex query
 * parameters.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.body Search criteria and pagination parameters for task comments
 *   filtering
 * @path /taskManagement/pm/tasks/:taskId/comments
 * @accessor api.functional.taskManagement.pm.tasks.comments.indexComments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexComments(
  connection: IConnection,
  props: indexComments.Props,
): Promise<indexComments.Response> {
  return true === connection.simulate
    ? indexComments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexComments.METADATA,
          path: indexComments.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexComments {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for task comments filtering */
    body: ITaskManagementTaskComment.IRequest;
  };
  export type Body = ITaskManagementTaskComment.IRequest;
  export type Response = IPageITaskManagementTaskComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pm/tasks/:taskId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/comments`;
  export const random = (): IPageITaskManagementTaskComment.ISummary =>
    typia.random<IPageITaskManagementTaskComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexComments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexComments.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific comment on a task.
 *
 * Retrieve a specific comment on a task using the unique identifiers for both
 * the task and the comment.
 *
 * This operation allows clients to fetch detailed information about the comment
 * including the content, the author (commenter), and timestamps. It strictly
 * retrieves only existing, non-deleted comments.
 *
 * Authorization is required and typically granted to authenticated users who
 * have viewing rights on the task.
 *
 * This operation corresponds to fetching data from the
 * task_management_task_comments table in the database.
 *
 * Error cases include not found if the comment or task does not exist or access
 * is unauthorized.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.commentId Unique identifier of the target comment
 * @path /taskManagement/pm/tasks/:taskId/comments/:commentId
 * @accessor api.functional.taskManagement.pm.tasks.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskComment;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pm/tasks/:taskId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ITaskManagementTaskComment =>
    typia.random<ITaskManagementTaskComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific comment on a task.
 *
 * This operation requires the unique taskId and commentId path parameters.
 *
 * Only users authorized to edit the comment may perform this operation.
 *
 * The request body must contain the fields to update, typically the comment
 * body.
 *
 * Successful updates return the updated comment data.
 *
 * Errors for unauthorized access or invalid data will be returned accordingly.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Data to update an existing task comment
 * @path /taskManagement/pm/tasks/:taskId/comments/:commentId
 * @accessor api.functional.taskManagement.pm.tasks.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Data to update an existing task comment */
    body: ITaskManagementTaskComment.IUpdate;
  };
  export type Body = ITaskManagementTaskComment.IUpdate;
  export type Response = ITaskManagementTaskComment;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pm/tasks/:taskId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ITaskManagementTaskComment =>
    typia.random<ITaskManagementTaskComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft delete) a comment on a task.
 *
 * Soft delete a comment on a task by marking its deleted_at field with the
 * current timestamp.
 *
 * Only authorized users can perform this operation.
 *
 * Once deleted, the comment is excluded from active queries.
 *
 * Errors will be returned for unauthorized or invalid requests.
 *
 * This operation completes the standard set of comment management endpoints.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @param props.commentId Unique identifier of the target comment
 * @path /taskManagement/pm/tasks/:taskId/comments/:commentId
 * @accessor api.functional.taskManagement.pm.tasks.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pm/tasks/:taskId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pm/tasks/${encodeURIComponent(props.taskId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
