import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementNotification } from "../../../../structures/ITaskManagementNotification";
import { IPageITaskManagementNotification } from "../../../../structures/IPageITaskManagementNotification";

/**
 * Search and retrieve a filtered paginated list of notifications for the user.
 *
 * This endpoint provides a filtered and paginated view of the user's
 * notifications within the task management system. Notifications can come from
 * task assignments, status changes, comments, or general alerts.
 *
 * The operation lets users search, sort, and paginate through their
 * notifications efficiently.
 *
 * The task_management_notifications table stores notifications with references
 * to the relevant user, task, and notification type. This operation respects
 * user permissions and returns only notifications belonging to the
 * authenticated user.
 *
 * This API is a PATCH method to support complex queries beyond simple filters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   notifications
 * @path /taskManagement/qa/notifications
 * @accessor api.functional.taskManagement.qa.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering notifications */
    body: ITaskManagementNotification.IRequest;
  };
  export type Body = ITaskManagementNotification.IRequest;
  export type Response = IPageITaskManagementNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/qa/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/qa/notifications";
  export const random = (): IPageITaskManagementNotification.ISummary =>
    typia.random<IPageITaskManagementNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific notification by ID.
 *
 * This endpoint fetches the detailed data of a single notification. Each
 * notification record corresponds to user alerts for task actions such as
 * assignment, status changes, comments, or general announcements.
 *
 * The system requires that the requesting user has access rights to view this
 * notification.
 *
 * The unique notification ID is validated as a UUID.
 *
 * The response includes comprehensive properties from the
 * task_management_notifications table including the notification type, read
 * status and timestamps.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification
 * @path /taskManagement/qa/notifications/:id
 * @accessor api.functional.taskManagement.qa.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the notification */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementNotification;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/qa/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/qa/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementNotification =>
    typia.random<ITaskManagementNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification properties such as read status.
 *
 * This endpoint enables updating properties of a notification, typically to
 * mark it as read or unread.
 *
 * Valid updates include changing the is_read flag and setting the read_at
 * timestamp.
 *
 * The system verifies user permissions to update the notification.
 *
 * The path parameter is the notification's UUID.
 *
 * Request body must include valid update schema for notifications.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification to update
 * @param props.body Notification update fields
 * @path /taskManagement/qa/notifications/:id
 * @accessor api.functional.taskManagement.qa.notifications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification to update */
    id: string & tags.Format<"uuid">;

    /** Notification update fields */
    body: ITaskManagementNotification.IUpdate;
  };
  export type Body = ITaskManagementNotification.IUpdate;
  export type Response = ITaskManagementNotification;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/qa/notifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/qa/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementNotification =>
    typia.random<ITaskManagementNotification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification by ID from task_management_notifications.
 *
 * This API endpoint allows an authorized user with role among tpm, pm, pmo,
 * developer, designer, or qa to delete a notification identified by its unique
 * ID.
 *
 * The operation completely removes the notification record from the database.
 *
 * Error responses may include 404 for non-existing notifications or 403 if
 * unauthorized.
 *
 * This operation complements other notification APIs such as retrieval and
 * preference management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the notification to delete
 * @path /taskManagement/qa/notifications/:id
 * @accessor api.functional.taskManagement.qa.notifications.eraseNotification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseNotification(
  connection: IConnection,
  props: eraseNotification.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseNotification.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseNotification.METADATA,
          path: eraseNotification.path(props),
          status: null,
        },
      );
}
export namespace eraseNotification {
  export type Props = {
    /** Unique identifier of the notification to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/qa/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/qa/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseNotification.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseNotification.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
