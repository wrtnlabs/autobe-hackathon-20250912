import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementQa } from "../../../../../structures/ITaskManagementQa";
import { IPageITaskManagementQa } from "../../../../../structures/IPageITaskManagementQa";

/**
 * Create QA user account.
 *
 * Create a new Quality Assurance (QA) user account. Requires email, password
 * hash, and name.
 *
 * Ensures email uniqueness and password security.
 *
 * Restricted to authorized personnel such as tpm, pm, or pmo roles.
 *
 * @param props.connection
 * @param props.body QA user creation information
 * @path /taskManagement/pmo/taskManagement/qas
 * @accessor api.functional.taskManagement.pmo.taskManagement.qas.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** QA user creation information */
    body: ITaskManagementQa.ICreate;
  };
  export type Body = ITaskManagementQa.ICreate;
  export type Response = ITaskManagementQa;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pmo/taskManagement/qas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagement/qas";
  export const random = (): ITaskManagementQa =>
    typia.random<ITaskManagementQa>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List QA user accounts with filtering and pagination.
 *
 * Retrieve a list of Quality Assurance (QA) user accounts with support for
 * advanced filtering by email, name, creation timestamp, and update timestamp.
 * The operation includes pagination parameters and sorting control to
 * efficiently manage large data sets.
 *
 * Only authorized roles such as tpm, pm, or pmo can access this data to ensure
 * security and privacy compliance. This operation is essential for managing QA
 * users within the task management system.
 *
 * The underlying database entity is task_management_qa, which stores user
 * authentication data, email, and metadata.
 *
 * Error handling includes validation of filter criteria and pagination input.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for QA users
 * @path /taskManagement/pmo/taskManagement/qas
 * @accessor api.functional.taskManagement.pmo.taskManagement.qas.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for QA users */
    body: ITaskManagementQa.IRequest;
  };
  export type Body = ITaskManagementQa.IRequest;
  export type Response = IPageITaskManagementQa.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pmo/taskManagement/qas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagement/qas";
  export const random = (): IPageITaskManagementQa.ISummary =>
    typia.random<IPageITaskManagementQa.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get QA user details by UUID.
 *
 * Retrieve detailed information about a specified QA user by their UUID. The
 * response includes email, name, creation, update, and soft deletion
 * timestamps.
 *
 * Access is restricted to authorized project roles for privacy.
 *
 * Validation handles cases of missing or invalid UUIDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the QA user
 * @path /taskManagement/pmo/taskManagement/qas/:id
 * @accessor api.functional.taskManagement.pmo.taskManagement.qas.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the QA user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementQa;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pmo/taskManagement/qas/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/taskManagement/qas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementQa =>
    typia.random<ITaskManagementQa>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update QA user account by UUID.
 *
 * Update an existing QA user account identified by UUID. Allows modification of
 * email, name, and password hash.
 *
 * Authorization and validation rules apply.
 *
 * Supports concurrency control and error handling for invalid inputs.
 *
 * @param props.connection
 * @param props.id UUID of the QA user to update
 * @param props.body QA user update payload
 * @path /taskManagement/pmo/taskManagement/qas/:id
 * @accessor api.functional.taskManagement.pmo.taskManagement.qas.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the QA user to update */
    id: string & tags.Format<"uuid">;

    /** QA user update payload */
    body: ITaskManagementQa.IUpdate;
  };
  export type Body = ITaskManagementQa.IUpdate;
  export type Response = ITaskManagementQa;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pmo/taskManagement/qas/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/taskManagement/qas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementQa =>
    typia.random<ITaskManagementQa>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
