import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementProjectMember } from "../../../../../structures/ITaskManagementProjectMember";
import { IPageITaskManagementProjectMember } from "../../../../../structures/IPageITaskManagementProjectMember";

/**
 * Create a new project member.
 *
 * Allows authorized users (TPM, PM, PMO) to add new members to a project.
 *
 * The operation creates a new record in the task_management_project_members
 * table linking a TPM user to the specified project by projectId.
 *
 * Input data is validated against the create schema, ensuring compliance with
 * uniqueness and referential integrity.
 *
 * Successful operation returns the created project member entity. Errors
 * include invalid projectId, duplicate memberships, or unauthorized access.
 *
 * This is essential for managing project team composition and collaboration.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.body Data needed to create a project member
 * @path /taskManagement/pmo/projects/:projectId/members
 * @accessor api.functional.taskManagement.pmo.projects.members.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Data needed to create a project member */
    body: ITaskManagementProjectMember.ICreate;
  };
  export type Body = ITaskManagementProjectMember.ICreate;
  export type Response = ITaskManagementProjectMember;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pmo/projects/:projectId/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/projects/${encodeURIComponent(props.projectId ?? "null")}/members`;
  export const random = (): ITaskManagementProjectMember =>
    typia.random<ITaskManagementProjectMember>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered, paginated list of project members for a specific
 * project.
 *
 * This endpoint allows authorized users (roles: TPM, PM, PMO) to retrieve a
 * filtered and paginated list of project members for a given project ID.
 *
 * The task_management_project_members table connects TPM users to projects with
 * audit timestamps, associating each member uniquely with a project. The
 * response returns summary information suitable for listing and management.
 *
 * Security is paramount: only users with proper authorization can access this
 * sensitive membership information. The operation supports pagination and
 * search capabilities, assisting in efficient membership management.
 *
 * Errors will be handled gracefully if the projectId is invalid or if the user
 * lacks the right permissions.
 *
 * This operation is typically used alongside create, update, and detail
 * retrieval APIs for comprehensive membership management.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.body Search criteria and pagination parameters for project
 *   member filtering
 * @path /taskManagement/pmo/projects/:projectId/members
 * @accessor api.functional.taskManagement.pmo.projects.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /**
     * Search criteria and pagination parameters for project member
     * filtering
     */
    body: ITaskManagementProjectMember.IRequest;
  };
  export type Body = ITaskManagementProjectMember.IRequest;
  export type Response = IPageITaskManagementProjectMember;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pmo/projects/:projectId/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/projects/${encodeURIComponent(props.projectId ?? "null")}/members`;
  export const random = (): IPageITaskManagementProjectMember =>
    typia.random<IPageITaskManagementProjectMember>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific project member.
 *
 * This endpoint fetches detailed membership information for a specific member
 * of a project.
 *
 * The task_management_project_members table uniquely associates TPM users to
 * projects, and this operation verifies the existence of such membership.
 *
 * Access is restricted to authorized users with roles TPM, PM, and PMO to
 * protect privacy and ensure data integrity.
 *
 * Validation of projectId and memberId parameters ensures correct entity
 * targeting.
 *
 * The response provides the full project member entity as defined in the
 * TaskManagementProjectMember schema.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.memberId Unique identifier of the project member
 * @path /taskManagement/pmo/projects/:projectId/members/:memberId
 * @accessor api.functional.taskManagement.pmo.projects.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the project member */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementProjectMember;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pmo/projects/:projectId/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/projects/${encodeURIComponent(props.projectId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITaskManagementProjectMember =>
    typia.random<ITaskManagementProjectMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update information of an existing project member.
 *
 * Enables authorized users (TPM, PM, PMO) to update details for an existing
 * project member.
 *
 * The operation validates input against the member update schema and applies
 * changes to the corresponding task_management_project_members record.
 *
 * Proper authorization and input validation protect data consistency.
 *
 * The response returns the updated project member entity upon success, or error
 * information upon failure.
 *
 * This operation supports comprehensive membership lifecycle management within
 * projects.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.memberId Unique identifier of the project member
 * @param props.body Data to update existing project member
 * @path /taskManagement/pmo/projects/:projectId/members/:memberId
 * @accessor api.functional.taskManagement.pmo.projects.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the project member */
    memberId: string & tags.Format<"uuid">;

    /** Data to update existing project member */
    body: ITaskManagementProjectMember.IUpdate;
  };
  export type Body = ITaskManagementProjectMember.IUpdate;
  export type Response = ITaskManagementProjectMember;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pmo/projects/:projectId/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/projects/${encodeURIComponent(props.projectId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ITaskManagementProjectMember =>
    typia.random<ITaskManagementProjectMember>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific member from a project by project ID and member ID.
 *
 * This API endpoint facilitates the deletion of a project member's association,
 * thereby removing their membership from the specified project. This is a hard
 * delete operation on the task_management_project_members table, ensuring that
 * the member's link to the project is fully removed and the user can no longer
 * access the project's resources.
 *
 * Only users with appropriate permissions should invoke this operation,
 * typically administrators or project owners. The operation requires valid UUID
 * identifiers for both the project and member to guarantee safe and targeted
 * deletion.
 *
 * Upon successful execution, the system permanently removes the membership
 * record from the database. Failure scenarios may include missing or invalid
 * UUIDs or attempting to remove non-existent members.
 *
 * No request body is required as this is a direct resource deletion operation.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.memberId Unique identifier of the member to delete from the
 *   project
 * @path /taskManagement/pmo/projects/:projectId/members/:memberId
 * @accessor api.functional.taskManagement.pmo.projects.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the member to delete from the project */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pmo/projects/:projectId/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/projects/${encodeURIComponent(props.projectId ?? "null")}/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
