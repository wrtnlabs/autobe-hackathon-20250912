import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskStatus } from "../../../../structures/ITaskManagementTaskStatus";
import { ITaskManagementTaskStatuses } from "../../../../structures/ITaskManagementTaskStatuses";
import { IPageITaskManagementTaskStatuses } from "../../../../structures/IPageITaskManagementTaskStatuses";

/**
 * Create a new taskManagementTaskStatus record.
 *
 * The client must provide a unique code, a human-readable name, and optionally
 * a description for the new status.
 *
 * Only authorized users with roles TPM, PM, or PMO may perform this creation.
 *
 * The system enforces uniqueness of the code and validates validity of the
 * inputs.
 *
 * Returns the full created record including timestamps.
 *
 * Use this API to extend or customize task lifecycle statuses as needed.
 *
 * @param props.connection
 * @param props.body Payload for creating taskManagementTaskStatus
 * @path /taskManagement/pmo/taskManagementTaskStatuses
 * @accessor api.functional.taskManagement.pmo.taskManagementTaskStatuses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Payload for creating taskManagementTaskStatus */
    body: ITaskManagementTaskStatus.ICreate;
  };
  export type Body = ITaskManagementTaskStatus.ICreate;
  export type Response = ITaskManagementTaskStatus;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/pmo/taskManagementTaskStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagementTaskStatuses";
  export const random = (): ITaskManagementTaskStatus =>
    typia.random<ITaskManagementTaskStatus>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve list of taskManagementTaskStatuses.
 *
 * Retrieve a filtered and paginated list of taskManagementTaskStatuses.
 *
 * The operation supports searching by code, name, and provides pagination
 * controls. Only authenticated roles such as TPM, PM, PMO, developers,
 * designers, and QA can access this list.
 *
 * This endpoint returns summarized data intended for listing and selection.
 *
 * Related APIs include retrieval of individual status details and creation of
 * new statuses.
 *
 * Proper filtering and pagination parameters improve performance and usability.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination controls for
 *   taskManagementTaskStatuses
 * @path /taskManagement/pmo/taskManagementTaskStatuses
 * @accessor api.functional.taskManagement.pmo.taskManagementTaskStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination controls for
     * taskManagementTaskStatuses
     */
    body: ITaskManagementTaskStatuses.IRequest;
  };
  export type Body = ITaskManagementTaskStatuses.IRequest;
  export type Response = IPageITaskManagementTaskStatuses.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/pmo/taskManagementTaskStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/pmo/taskManagementTaskStatuses";
  export const random = (): IPageITaskManagementTaskStatuses.ISummary =>
    typia.random<IPageITaskManagementTaskStatuses.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get taskManagementTaskStatus details by ID.
 *
 * Retrieve detailed information of a taskManagementTaskStatus by its unique ID.
 *
 * Only authenticated users including TPM, PM, PMO, developers, designers, and
 * QA can access this information.
 *
 * The operation returns the full details including code, name, description, and
 * timestamp information.
 *
 * It is important to handle errors when the requested ID does not exist.
 *
 * This endpoint is commonly used in conjunction with the status list and
 * creation APIs.
 *
 * @param props.connection
 * @param props.id Unique UUID identifier for the target
 *   taskManagementTaskStatus
 * @path /taskManagement/pmo/taskManagementTaskStatuses/:id
 * @accessor api.functional.taskManagement.pmo.taskManagementTaskStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifier for the target taskManagementTaskStatus */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskStatus;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/pmo/taskManagementTaskStatuses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/taskManagementTaskStatuses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTaskStatus =>
    typia.random<ITaskManagementTaskStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific task status record in task_management_task_statuses table.
 *
 * This API allows updating a specific task status entity which represents
 * status states for tasks within the system.
 *
 * It operates on the task_management_task_statuses table where each record
 * defines a distinct task status like 'To Do', 'In Progress', or 'Done'. The
 * update operation modifies the code (unique identifier), the human-readable
 * name, and an optional descriptive explanation of the status.
 *
 * Security considerations include appropriate permission checks to restrict
 * updates to authorized roles only, typically administrators or PMO roles.
 *
 * The endpoint receives the task status 'id' as a path parameter and expects a
 * request body with updated fields following strict validation rules including
 * code uniqueness.
 *
 * Upon successful update, the full updated task status record is returned,
 * including timestamps indicating creation and last update times.
 *
 * This operation supports maintaining accurate and up-to-date task lifecycle
 * states, crucial for task tracking and workflow management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the target task status record
 * @param props.body Updated data for the task status entity
 * @path /taskManagement/pmo/taskManagementTaskStatuses/:id
 * @accessor api.functional.taskManagement.pmo.taskManagementTaskStatuses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target task status record */
    id: string & tags.Format<"uuid">;

    /** Updated data for the task status entity */
    body: ITaskManagementTaskStatuses.IUpdate;
  };
  export type Body = ITaskManagementTaskStatuses.IUpdate;
  export type Response = ITaskManagementTaskStatuses;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/pmo/taskManagementTaskStatuses/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/pmo/taskManagementTaskStatuses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTaskStatuses =>
    typia.random<ITaskManagementTaskStatuses>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a task status record from the task_management_task_statuses table.
 *
 * This API permanently removes a specific task status record identified by ID
 * from the task_management_task_statuses table.
 *
 * It ensures the status is no longer available in task lifecycle workflows.
 *
 * Administrative privileges are required to invoke this operation.
 *
 * Once deleted, the record cannot be restored.
 *
 * Error handling includes responding with an appropriate error if the record
 * does not exist.
 *
 * Careful permission management must be in place due to potential impacts to
 * business workflows reliant on task status data.
 *
 * No request body needed. The path parameter 'id' uniquely identifies the task
 * status to remove.
 *
 * @param props.connection
 * @param props.id Target task status record ID
 * @path /taskManagement/pmo/taskManagementTaskStatuses/:id
 * @accessor api.functional.taskManagement.pmo.taskManagementTaskStatuses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target task status record ID */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/pmo/taskManagementTaskStatuses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/pmo/taskManagementTaskStatuses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
