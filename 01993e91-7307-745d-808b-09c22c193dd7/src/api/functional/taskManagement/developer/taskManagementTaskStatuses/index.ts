import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskStatuses } from "../../../../structures/ITaskManagementTaskStatuses";
import { IPageITaskManagementTaskStatuses } from "../../../../structures/IPageITaskManagementTaskStatuses";
import { ITaskManagementTaskStatus } from "../../../../structures/ITaskManagementTaskStatus";

/**
 * Search and retrieve list of taskManagementTaskStatuses.
 *
 * Retrieve a filtered and paginated list of taskManagementTaskStatuses.
 *
 * The operation supports searching by code, name, and provides pagination
 * controls. Only authenticated roles such as TPM, PM, PMO, developers,
 * designers, and QA can access this list.
 *
 * This endpoint returns summarized data intended for listing and selection.
 *
 * Related APIs include retrieval of individual status details and creation of
 * new statuses.
 *
 * Proper filtering and pagination parameters improve performance and usability.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination controls for
 *   taskManagementTaskStatuses
 * @path /taskManagement/developer/taskManagementTaskStatuses
 * @accessor api.functional.taskManagement.developer.taskManagementTaskStatuses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination controls for
     * taskManagementTaskStatuses
     */
    body: ITaskManagementTaskStatuses.IRequest;
  };
  export type Body = ITaskManagementTaskStatuses.IRequest;
  export type Response = IPageITaskManagementTaskStatuses.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/developer/taskManagementTaskStatuses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/taskManagement/developer/taskManagementTaskStatuses";
  export const random = (): IPageITaskManagementTaskStatuses.ISummary =>
    typia.random<IPageITaskManagementTaskStatuses.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get taskManagementTaskStatus details by ID.
 *
 * Retrieve detailed information of a taskManagementTaskStatus by its unique ID.
 *
 * Only authenticated users including TPM, PM, PMO, developers, designers, and
 * QA can access this information.
 *
 * The operation returns the full details including code, name, description, and
 * timestamp information.
 *
 * It is important to handle errors when the requested ID does not exist.
 *
 * This endpoint is commonly used in conjunction with the status list and
 * creation APIs.
 *
 * @param props.connection
 * @param props.id Unique UUID identifier for the target
 *   taskManagementTaskStatus
 * @path /taskManagement/developer/taskManagementTaskStatuses/:id
 * @accessor api.functional.taskManagement.developer.taskManagementTaskStatuses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifier for the target taskManagementTaskStatus */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskStatus;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/developer/taskManagementTaskStatuses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/developer/taskManagementTaskStatuses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementTaskStatus =>
    typia.random<ITaskManagementTaskStatus>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
