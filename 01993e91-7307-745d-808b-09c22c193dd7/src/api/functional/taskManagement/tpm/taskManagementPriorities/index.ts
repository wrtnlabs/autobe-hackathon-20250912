import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementPriority } from "../../../../structures/ITaskManagementPriority";

/**
 * Create a new task priority level in the system, defining the urgency or
 * importance of tasks that users can select when creating or updating tasks.
 * The system ensures the uniqueness of the priority code to prevent
 * duplicates.
 *
 * Only authorized users with roles capable of managing task priorities can
 * perform this operation.
 *
 * The request must provide a valid code representing the priority (e.g., 'low',
 * 'medium', 'high'), a human-readable name, and an optional detailed
 * description to explain the priority level.
 *
 * Upon successful creation, the system returns the full priority record
 * including creation and update timestamps. No direct deletion or modification
 * of system-generated timestamps is allowed by users.
 *
 * @param props.connection
 * @param props.body Creation info of the priority
 * @path /taskManagement/tpm/taskManagementPriorities
 * @accessor api.functional.taskManagement.tpm.taskManagementPriorities.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation info of the priority */
    body: ITaskManagementPriority.ICreate;
  };
  export type Body = ITaskManagementPriority.ICreate;
  export type Response = ITaskManagementPriority;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/taskManagementPriorities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/tpm/taskManagementPriorities";
  export const random = (): ITaskManagementPriority =>
    typia.random<ITaskManagementPriority>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update task priority by ID.
 *
 * Update details of an existing task priority level in the system. The
 * operation targets the priority identified by its unique UUID.
 *
 * Users with appropriate administrative or PMO roles are authorized to perform
 * this action.
 *
 * The update request can modify the code (e.g., 'low', 'medium', 'high'), the
 * display name, and the description explaining the priority level. Timestamps
 * for creation are unchanged; update timestamps reflect the modification time.
 *
 * The operation ensures that priority codes remain unique post-update, and
 * invalid UUIDs cause errors.
 *
 * @param props.connection
 * @param props.id Unique identifier of the task priority to update
 * @param props.body Updated task priority information
 * @path /taskManagement/tpm/taskManagementPriorities/:id
 * @accessor api.functional.taskManagement.tpm.taskManagementPriorities.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the task priority to update */
    id: string & tags.Format<"uuid">;

    /** Updated task priority information */
    body: ITaskManagementPriority.IUpdate;
  };
  export type Body = ITaskManagementPriority.IUpdate;
  export type Response = ITaskManagementPriority;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/taskManagementPriorities/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/taskManagementPriorities/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementPriority =>
    typia.random<ITaskManagementPriority>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete task priority by ID.
 *
 * Permanently delete a task priority level from the system, identified by its
 * UUID.
 *
 * The operation removes the record without soft delete, so it cannot be
 * recovered later.
 *
 * Only users with administrative or PMO roles can perform this operation.
 *
 * Errors are returned for invalid or non-existing IDs.
 *
 * @param props.connection
 * @param props.id Unique identifier of the task priority to delete
 * @path /taskManagement/tpm/taskManagementPriorities/:id
 * @accessor api.functional.taskManagement.tpm.taskManagementPriorities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the task priority to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/taskManagementPriorities/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/taskManagementPriorities/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
