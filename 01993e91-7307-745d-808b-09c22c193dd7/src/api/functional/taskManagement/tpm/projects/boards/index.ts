import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementBoard } from "../../../../../structures/ITaskManagementBoard";
import { IPageITaskManagementBoard } from "../../../../../structures/IPageITaskManagementBoard";

/**
 * Create a new board in a project.
 *
 * This endpoint allows authenticated users with the role of TPM or PM to create
 * a new Board within a specified Project. Boards are logical containers for
 * tasks allowing better project task management.
 *
 * The user must supply essential details including a unique board code, name,
 * and optionally a descriptive text to elaborate the board's purpose.
 *
 * The system validates that the provided projectId exists and that the owner is
 * correctly assigned. Upon successful creation, the board is persisted with
 * creation and update timestamps for auditability.
 *
 * Security constraints ensure that only users with proper permissions can
 * perform this operation.
 *
 * The created Board entity will reflect relationships to the Project and its
 * owner as defined in the task_management_boards table within the Prisma
 * schema, enabling hierarchical project-task organization.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.body Board creation payload including project association,
 *   owner, code, and descriptive details
 * @path /taskManagement/tpm/projects/:projectId/boards
 * @accessor api.functional.taskManagement.tpm.projects.boards.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /**
     * Board creation payload including project association, owner, code,
     * and descriptive details
     */
    body: ITaskManagementBoard.ICreate;
  };
  export type Body = ITaskManagementBoard.ICreate;
  export type Response = ITaskManagementBoard;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/tpm/projects/:projectId/boards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}/boards`;
  export const random = (): ITaskManagementBoard =>
    typia.random<ITaskManagementBoard>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List boards under a specific project.
 *
 * Retrieve a paginated list of boards belonging to the project identified by
 * projectId.
 *
 * This endpoint supports complex filters and sorting (e.g., by creation date,
 * name) using the request body.
 *
 * Authorization is restricted to TPM, PM, and PMO roles, who manage project
 * boards.
 *
 * Each board record includes project and owner references, descriptive
 * metadata, and audit timestamps.
 *
 * This operation leverages the task_management_boards table with relationships
 * to projects and TPM owners.
 *
 * The response returns a paginated collection of board summary objects for
 * efficient listing.
 *
 * No direct modification happens; it's a read-only operation providing project
 * board overview.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.body Board filtering and pagination parameters
 * @path /taskManagement/tpm/projects/:projectId/boards
 * @accessor api.functional.taskManagement.tpm.projects.boards.indexBoardsInProject
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexBoardsInProject(
  connection: IConnection,
  props: indexBoardsInProject.Props,
): Promise<indexBoardsInProject.Response> {
  return true === connection.simulate
    ? indexBoardsInProject.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexBoardsInProject.METADATA,
          path: indexBoardsInProject.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexBoardsInProject {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Board filtering and pagination parameters */
    body: ITaskManagementBoard.IRequest;
  };
  export type Body = ITaskManagementBoard.IRequest;
  export type Response = IPageITaskManagementBoard.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/tpm/projects/:projectId/boards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}/boards`;
  export const random = (): IPageITaskManagementBoard.ISummary =>
    typia.random<IPageITaskManagementBoard.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: indexBoardsInProject.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexBoardsInProject.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detail of a board by projectId and boardId.
 *
 * Get details of a specific board identified by boardId under the project
 * identified by projectId.
 *
 * This operation is restricted to users with TPM, PM, or PMO roles.
 *
 * The board entity includes references to its owning project and owner user,
 * along with metadata like name, code, description, and temporal audit fields.
 *
 * Soft deletion status is reflected but does not affect retrieval unless
 * filtered.
 *
 * This operation returns comprehensive details for UI display or management.
 *
 * The request requires both projectId and boardId path parameters.
 *
 * The response contains a full board schema object as defined in the Prisma
 * schema.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.boardId Unique identifier of the target board
 * @path /taskManagement/tpm/projects/:projectId/boards/:boardId
 * @accessor api.functional.taskManagement.tpm.projects.boards.atBoardInProject
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atBoardInProject(
  connection: IConnection,
  props: atBoardInProject.Props,
): Promise<atBoardInProject.Response> {
  return true === connection.simulate
    ? atBoardInProject.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atBoardInProject.METADATA,
          path: atBoardInProject.path(props),
          status: null,
        },
      );
}
export namespace atBoardInProject {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the target board */
    boardId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementBoard;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/tpm/projects/:projectId/boards/:boardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}/boards/${encodeURIComponent(props.boardId ?? "null")}`;
  export const random = (): ITaskManagementBoard =>
    typia.random<ITaskManagementBoard>();
  export const simulate = (
    connection: IConnection,
    props: atBoardInProject.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atBoardInProject.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("boardId")(() => typia.assert(props.boardId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing board within a project.
 *
 * This endpoint permits TPM or PM role users to update details of an existing
 * Board identified by its boardId within a specified projectId. Updates include
 * board name, description, and other allowed fields.
 *
 * Access control ensures only authorized users can perform this update.
 *
 * The operation maintains relationships and integrity as per the
 * task_management_boards schema, including cascading updates and audit
 * timestamps.
 *
 * Proper validation is applied to ensure data correctness and uniqueness
 * constraints are respected.
 *
 * Successful execution returns the updated board entity with current attribute
 * values.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.boardId Unique identifier of the board to update
 * @param props.body Board update payload with fields to be modified
 * @path /taskManagement/tpm/projects/:projectId/boards/:boardId
 * @accessor api.functional.taskManagement.tpm.projects.boards.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the board to update */
    boardId: string & tags.Format<"uuid">;

    /** Board update payload with fields to be modified */
    body: ITaskManagementBoard.IUpdate;
  };
  export type Body = ITaskManagementBoard.IUpdate;
  export type Response = ITaskManagementBoard;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/tpm/projects/:projectId/boards/:boardId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}/boards/${encodeURIComponent(props.boardId ?? "null")}`;
  export const random = (): ITaskManagementBoard =>
    typia.random<ITaskManagementBoard>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a board from a project.
 *
 * Allows TPM or PM users to delete a board within a specific project.
 *
 * The board is either soft deleted by setting deleted_at timestamp or hard
 * deleted depending on the database schema.
 *
 * Security controls restrict this action to authorized users only.
 *
 * Deletion cascades or constraints are managed according to relational mappings
 * in the Prisma schema.
 *
 * No response body is returned upon successful deletion, conforming to RESTful
 * standards.
 *
 * @param props.connection
 * @param props.projectId Unique identifier of the target project
 * @param props.boardId Unique identifier of the board to delete
 * @path /taskManagement/tpm/projects/:projectId/boards/:boardId
 * @accessor api.functional.taskManagement.tpm.projects.boards.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target project */
    projectId: string & tags.Format<"uuid">;

    /** Unique identifier of the board to delete */
    boardId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/tpm/projects/:projectId/boards/:boardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/tpm/projects/${encodeURIComponent(props.projectId ?? "null")}/boards/${encodeURIComponent(props.boardId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("projectId")(() => typia.assert(props.projectId));
      assert.param("boardId")(() => typia.assert(props.boardId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
