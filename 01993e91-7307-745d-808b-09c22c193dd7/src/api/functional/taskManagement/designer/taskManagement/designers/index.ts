import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementDesigner } from "../../../../../structures/ITaskManagementDesigner";
import { IPageITaskManagementDesigner } from "../../../../../structures/IPageITaskManagementDesigner";

/**
 * Create a new designer user account.
 *
 * Create a new designer user in the system with required fields including
 * email, password hash, and name. The API accepts designer user information to
 * populate the task_management_designer table and returns the created object.
 *
 * Safety checks verify the uniqueness of the email field and validate input
 * formats. Only users with administrative privileges may execute this
 * operation. The timestamps for creation and update are managed by the system.
 *
 * This operation enables administrators to manage designer user lifecycle
 * effectively and securely.
 *
 * @param props.connection
 * @param props.body New designer user creation data
 * @path /taskManagement/designer/taskManagement/designers
 * @accessor api.functional.taskManagement.designer.taskManagement.designers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New designer user creation data */
    body: ITaskManagementDesigner.ICreate;
  };
  export type Body = ITaskManagementDesigner.ICreate;
  export type Response = ITaskManagementDesigner;

  export const METADATA = {
    method: "POST",
    path: "/taskManagement/designer/taskManagement/designers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/designer/taskManagement/designers";
  export const random = (): ITaskManagementDesigner =>
    typia.random<ITaskManagementDesigner>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated list of designers.
 *
 * Retrieve a filtered and paginated list of designer users from the system.
 * Supports search criteria like partial matches on email and name.
 *
 * The operation provides comprehensive pagination and sorting options, allowing
 * clients to specify page size and order.
 *
 * Authentication is required to access designer data. Soft deleted users are
 * excluded from results.
 *
 * This operation references the task_management_designer Prisma schema model
 * and returns summary information optimized for list displays.
 *
 * Errors occur for invalid search parameters or unauthorized access.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for designer
 *   search
 * @path /taskManagement/designer/taskManagement/designers
 * @accessor api.functional.taskManagement.designer.taskManagement.designers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, sorting, and pagination parameters for designer search */
    body: ITaskManagementDesigner.IRequest;
  };
  export type Body = ITaskManagementDesigner.IRequest;
  export type Response = IPageITaskManagementDesigner.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/designer/taskManagement/designers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/taskManagement/designer/taskManagement/designers";
  export const random = (): IPageITaskManagementDesigner.ISummary =>
    typia.random<IPageITaskManagementDesigner.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a single designer user.
 *
 * Retrieve detailed information of a specific designer user by their unique
 * identifier. This API endpoint accesses the task_management_designer table,
 * which contains essential user information required for authentication and
 * role management within the task management backend service.
 *
 * Security measures ensure that only authorized personnel, such as
 * administrators or system managers, can view this sensitive information. The
 * response omits sensitive fields like password hashes to maintain security.
 *
 * The operation requires a valid designer ID in UUID format and returns all
 * relevant profile data including email, name, and timestamps of creation and
 * last update. If the designer has been soft deleted (deleted_at is set), the
 * record may be excluded or flagged according to system policy.
 *
 * This operation pairs with other CRUD endpoints for full lifecycle management
 * of designer users.
 *
 * @param props.connection
 * @param props.id Unique identifier of the designer user
 * @path /taskManagement/designer/taskManagement/designers/:id
 * @accessor api.functional.taskManagement.designer.taskManagement.designers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the designer user */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementDesigner;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/designer/taskManagement/designers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/designer/taskManagement/designers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementDesigner =>
    typia.random<ITaskManagementDesigner>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a designer user's information.
 *
 * Update an existing designer user identified by the unique ID. This endpoint
 * modifies details in the task_management_designer table, ensuring data
 * integrity and validation.
 *
 * Only authorized administrators may perform this operation. The email field
 * must remain unique and follow proper email formatting rules. Passwords must
 * be securely handled and stored as hashes.
 *
 * The operation returns the updated designer user entity upon successful
 * completion. Attempts to update non-existent or soft-deleted users should be
 * rejected appropriately.
 *
 * @param props.connection
 * @param props.id Unique identifier of the designer user
 * @param props.body Designer user update data
 * @path /taskManagement/designer/taskManagement/designers/:id
 * @accessor api.functional.taskManagement.designer.taskManagement.designers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the designer user */
    id: string & tags.Format<"uuid">;

    /** Designer user update data */
    body: ITaskManagementDesigner.IUpdate;
  };
  export type Body = ITaskManagementDesigner.IUpdate;
  export type Response = ITaskManagementDesigner;

  export const METADATA = {
    method: "PUT",
    path: "/taskManagement/designer/taskManagement/designers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/taskManagement/designer/taskManagement/designers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITaskManagementDesigner =>
    typia.random<ITaskManagementDesigner>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a designer user.
 *
 * Delete an existing designer user by ID. This endpoint performs a hard delete
 * on the task_management_designer record, permanently removing the user from
 * the system.
 *
 * Only users with administrative privileges can execute this operation.
 * Attempts to delete non-existent users should result in appropriate error
 * responses.
 *
 * This operation is irreversible and should be performed with caution. It
 * complements create, read, and update endpoints to allow full user lifecycle
 * management.
 *
 * @param props.connection
 * @param props.id Unique identifier of the designer user
 * @path /taskManagement/designer/taskManagement/designers/:id
 * @accessor api.functional.taskManagement.designer.taskManagement.designers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the designer user */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/taskManagement/designer/taskManagement/designers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/designer/taskManagement/designers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
