import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementTaskAssignmentArray } from "../../../../../structures/ITaskManagementTaskAssignmentArray";
import { ITaskManagementTaskAssignment } from "../../../../../structures/ITaskManagementTaskAssignment";

/**
 * Retrieve the list of assignments for a given task identified by taskId.
 *
 * This API operation retrieves all assignments related to a specific task using
 * the task's unique identifier 'taskId'.
 *
 * Each assignment links a user (typically a TPM role user) to the task,
 * including the assignment timestamp.
 *
 * This read-only operation supports roles TPM, PM, PMO, Developer, Designer,
 * and QA.
 *
 * No request body is required.
 *
 * The response contains a list of task assignments details.
 *
 * The operation may return errors if the task does not exist or access is
 * unauthorized.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the target task
 * @path /taskManagement/designer/tasks/:taskId/assignments
 * @accessor api.functional.taskManagement.designer.tasks.assignments.indexTaskAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexTaskAssignments(
  connection: IConnection,
  props: indexTaskAssignments.Props,
): Promise<indexTaskAssignments.Response> {
  return true === connection.simulate
    ? indexTaskAssignments.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexTaskAssignments.METADATA,
          path: indexTaskAssignments.path(props),
          status: null,
        },
      );
}
export namespace indexTaskAssignments {
  export type Props = {
    /** Unique identifier of the target task */
    taskId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskAssignmentArray;

  export const METADATA = {
    method: "PATCH",
    path: "/taskManagement/designer/tasks/:taskId/assignments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/designer/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments`;
  export const random = (): ITaskManagementTaskAssignmentArray =>
    typia.random<ITaskManagementTaskAssignmentArray>();
  export const simulate = (
    connection: IConnection,
    props: indexTaskAssignments.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexTaskAssignments.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific assignment by assignmentId for a task by taskId.
 *
 * This API operation fetches the detailed information of a single task
 * assignment identified by 'assignmentId' under the parent task identified by
 * 'taskId'.
 *
 * It returns assignment data including the assignee ID and the assigned
 * timestamp.
 *
 * Allowed roles include TPM, PM, PMO, Developer, Designer, and QA.
 *
 * No request body is required.
 *
 * Errors are returned if the assignment or parent task does not exist or access
 * is unauthorized.
 *
 * Useful for audit trails and individual assignment inspection.
 *
 * @param props.connection
 * @param props.taskId Unique identifier of the parent task
 * @param props.assignmentId Unique identifier of the target assignment
 * @path /taskManagement/designer/tasks/:taskId/assignments/:assignmentId
 * @accessor api.functional.taskManagement.designer.tasks.assignments.atTaskAssignment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atTaskAssignment(
  connection: IConnection,
  props: atTaskAssignment.Props,
): Promise<atTaskAssignment.Response> {
  return true === connection.simulate
    ? atTaskAssignment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atTaskAssignment.METADATA,
          path: atTaskAssignment.path(props),
          status: null,
        },
      );
}
export namespace atTaskAssignment {
  export type Props = {
    /** Unique identifier of the parent task */
    taskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target assignment */
    assignmentId: string & tags.Format<"uuid">;
  };
  export type Response = ITaskManagementTaskAssignment;

  export const METADATA = {
    method: "GET",
    path: "/taskManagement/designer/tasks/:taskId/assignments/:assignmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/taskManagement/designer/tasks/${encodeURIComponent(props.taskId ?? "null")}/assignments/${encodeURIComponent(props.assignmentId ?? "null")}`;
  export const random = (): ITaskManagementTaskAssignment =>
    typia.random<ITaskManagementTaskAssignment>();
  export const simulate = (
    connection: IConnection,
    props: atTaskAssignment.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atTaskAssignment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskId")(() => typia.assert(props.taskId));
      assert.param("assignmentId")(() => typia.assert(props.assignmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
