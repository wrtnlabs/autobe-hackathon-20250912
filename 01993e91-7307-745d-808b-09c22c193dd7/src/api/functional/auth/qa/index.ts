import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementQa } from "../../../structures/ITaskManagementQa";

/**
 * Create new QA user account and issue JWT tokens.
 *
 * Create a new QA user account. The request must include a valid email address,
 * password information, and the full name of the QA user. The system will
 * securely hash the password and store the data in the task_management_qa
 * table. An authorization token is issued upon successful creation to allow
 * immediate authentication. This operation facilitates onboarding of quality
 * assurance personnel in the task management platform.
 *
 * Account email must be unique among QA users to prevent duplicate accounts.
 * Password policies must be adhered to (e.g., minimum length, hashing). The
 * response includes JWT tokens for authorized access.
 *
 * This operation is intended for public access without prior authentication.
 *
 * Use this alongside /auth/qa/login and /auth/qa/refresh for complete auth
 * lifecycle.
 *
 * Ensure error handling covers existing emails and invalid input formats.
 *
 * This operation references the task_management_qa table where user credentials
 * and metadata are stored.
 *
 * @param props.connection
 * @param props.body QA user creation request body
 * @setHeader token.access Authorization
 *
 * @path /auth/qa/join
 * @accessor api.functional.auth.qa.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** QA user creation request body */
    body: ITaskManagementQa.ICreate;
  };
  export type Body = ITaskManagementQa.ICreate;
  export type Response = ITaskManagementQa.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/qa/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/qa/join";
  export const random = (): ITaskManagementQa.IAuthorized =>
    typia.random<ITaskManagementQa.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * QA user login to issue access tokens.
 *
 * Authenticate existing QA user with email and password. The system validates
 * credentials against stored hashed passwords in the task_management_qa table.
 * Upon success, JWT access and refresh tokens are generated and returned in the
 * response. Authentication enables QA personnel to access task management
 * resources securely.
 *
 * Login request requires valid email and password formats. Failure to
 * authenticate must return errors.
 *
 * This endpoint is accessible without prior authentication.
 *
 * Use together with /auth/qa/join and /auth/qa/refresh for the full auth
 * process.
 *
 * @param props.connection
 * @param props.body QA user login request payload
 * @setHeader token.access Authorization
 *
 * @path /auth/qa/login
 * @accessor api.functional.auth.qa.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** QA user login request payload */
    body: ITaskManagementQa.ILogin;
  };
  export type Body = ITaskManagementQa.ILogin;
  export type Response = ITaskManagementQa.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/qa/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/qa/login";
  export const random = (): ITaskManagementQa.IAuthorized =>
    typia.random<ITaskManagementQa.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh QA user access token.
 *
 * Refresh JWT tokens using a valid refresh token for QA users. This operation
 * prolongs session validity without requiring re-authentication with
 * credentials.
 *
 * The request must include a valid refresh token linked to the QA user in the
 * task_management_qa table. Successful operations return new JWT tokens and
 * authorization data.
 *
 * This endpoint requires an authenticated user with a valid refresh token.
 *
 * Utilize this API alongside /auth/qa/join and /auth/qa/login for complete
 * token lifecycle management.
 *
 * @param props.connection
 * @param props.body QA user token refresh request
 * @setHeader token.access Authorization
 *
 * @path /auth/qa/refresh
 * @accessor api.functional.auth.qa.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** QA user token refresh request */
    body: ITaskManagementQa.IRefresh;
  };
  export type Body = ITaskManagementQa.IRefresh;
  export type Response = ITaskManagementQa.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/qa/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/qa/refresh";
  export const random = (): ITaskManagementQa.IAuthorized =>
    typia.random<ITaskManagementQa.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
