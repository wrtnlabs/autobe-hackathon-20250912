import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITaskManagementDesigner } from "../../../structures/ITaskManagementDesigner";

/**
 * Register a new Designer user (task_management_designer) account.
 *
 * Registers a new Designer user account by creating an entry in the
 * 'task_management_designer' database table. Requires unique email, secure
 * password hashing, and user name. Upon success, returns JWT authorization
 * tokens encapsulated in the 'ITaskManagementDesigner.IAuthorized' response.
 * This operation is public and is the entry point for new Designer user
 * registrations with security considerations for email uniqueness and password
 * protection via hashing.
 *
 * @param props.connection
 * @param props.body Registration payload for creating a new Designer user
 *   account
 * @setHeader token.access Authorization
 *
 * @path /auth/designer/join
 * @accessor api.functional.auth.designer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Registration payload for creating a new Designer user account */
    body: ITaskManagementDesigner.ICreate;
  };
  export type Body = ITaskManagementDesigner.ICreate;
  export type Response = ITaskManagementDesigner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/designer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/designer/join";
  export const random = (): ITaskManagementDesigner.IAuthorized =>
    typia.random<ITaskManagementDesigner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Designer user login operation (task_management_designer).
 *
 * Authenticates an existing Designer user by verifying email and password
 * credentials stored in 'task_management_designer'. Successful login returns
 * JWT access and refresh tokens encapsulated in
 * 'ITaskManagementDesigner.IAuthorized'. This operation is public, enforcing
 * security by validating password hashes and ensuring the user is not
 * soft-deleted.
 *
 * @param props.connection
 * @param props.body Login request containing Designer email and password for
 *   authentication
 * @setHeader token.access Authorization
 *
 * @path /auth/designer/login
 * @accessor api.functional.auth.designer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login request containing Designer email and password for
     * authentication
     */
    body: ITaskManagementDesigner.ILogin;
  };
  export type Body = ITaskManagementDesigner.ILogin;
  export type Response = ITaskManagementDesigner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/designer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/designer/login";
  export const random = (): ITaskManagementDesigner.IAuthorized =>
    typia.random<ITaskManagementDesigner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for Designer user (task_management_designer).
 *
 * Refreshes JWT access tokens for an authenticated Designer user by validating
 * the supplied refresh token. On success, returns a new set of
 * 'ITaskManagementDesigner.IAuthorized' tokens, supporting session continuity.
 * This operation requires a valid refresh token and ties back to the
 * 'task_management_designer' user table.
 *
 * @param props.connection
 * @param props.body Refresh token request to renew Designer JWT access tokens
 * @setHeader token.access Authorization
 *
 * @path /auth/designer/refresh
 * @accessor api.functional.auth.designer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request to renew Designer JWT access tokens */
    body: ITaskManagementDesigner.IRefresh;
  };
  export type Body = ITaskManagementDesigner.IRefresh;
  export type Response = ITaskManagementDesigner.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/designer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/designer/refresh";
  export const random = (): ITaskManagementDesigner.IAuthorized =>
    typia.random<ITaskManagementDesigner.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
