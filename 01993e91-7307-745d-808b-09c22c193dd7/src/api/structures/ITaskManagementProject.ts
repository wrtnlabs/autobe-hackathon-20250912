import { tags } from "typia";

/**
 * TaskManagementProject entity records project information including unique ID,
 * owner, unique code, name, description, and timestamps for creation, update,
 * and soft deletion.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementProject = {
  /**
   * Unique identifier of the project. Represents the primary key in the
   * database. Must be a UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the owner of the project. Must be a UUID string referencing
   * a TPM user.
   */
  owner_id: string & tags.Format<"uuid">;

  /**
   * Unique code of the project. This code uniquely identifies a project among
   * all others.
   */
  code: string;

  /** Descriptive name of the project. */
  name: string;

  /** Optional detailed description of the project. */
  description?: string | null | undefined;

  /**
   * Timestamp indicating when the project was created. This is in ISO 8601
   * date-time string format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the last update of the project. ISO 8601 date-time string
   * format.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional timestamp indicating soft deletion. Nullable ISO 8601 date-time
   * string for soft delete marker.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementProject {
  /**
   * Request parameters for searching, filtering, and paginating projects.
   *
   * Includes page number, page size, and optional filtering fields for
   * project attributes.
   */
  export type IRequest = {
    /**
     * Page number for pagination control.
     *
     * This specifies which page of results the client requests.
     *
     * Optional; if omitted or null, defaults to the first page.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Number of items per page for paginated query results.
     *
     * Controls the maximum number of records returned in the response.
     *
     * Optional; if omitted or null, defaults to a sensible system-defined
     * limit.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Search text for filtering project records.
     *
     * Enables matching projects by keywords or text queries.
     *
     * Nullable if no search filter is applied.
     */
    search?: string | null | undefined;

    /**
     * Filter projects by their unique code.
     *
     * Allows precise filtering for a specific project code.
     *
     * Nullable if not filtered by code.
     */
    code?: string | null | undefined;

    /**
     * Filter projects by name.
     *
     * Enables clients to find projects by matching project names.
     *
     * Nullable if no name filter is applied.
     */
    name?: string | null | undefined;

    /**
     * Filter projects by owner ID.
     *
     * Allows queries scoped to projects owned by a particular user.
     *
     * Nullable if no owner filter is applied.
     */
    owner_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Request payload for creating a new project entity in the system.
   *
   * Must include project owner, code, and name. Description is optional.
   */
  export type ICreate = {
    /**
     * Unique user ID of the project owner.
     *
     * This references the TPM user who owns the project.
     *
     * It is required to establish project ownership and authorization.
     */
    owner_id: string & tags.Format<"uuid">;

    /**
     * Unique code identifier for the project to be created.
     *
     * Must be unique within the system and is used for referencing the
     * project.
     */
    code: string;

    /**
     * Human-readable project name.
     *
     * Used to identify the project in UI and API responses.
     */
    name: string;

    /**
     * Optional detailed description for the new project.
     *
     * Allows providing context or scope information.
     *
     * Nullable if no description is available.
     */
    description?: string | null | undefined;
  };

  /**
   * Request type for updating TaskManagementProject. Partial update allowing
   * setting owner, code, name, and description.
   */
  export type IUpdate = {
    /**
     * Reference to the owner of the project. Must be a UUID string
     * referencing a TPM user.
     */
    owner_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Unique code of the project. This code uniquely identifies a project
     * among all others.
     */
    code?: string | undefined;

    /** Descriptive name of the project. */
    name?: string | undefined;

    /** Optional detailed description of the project. */
    description?: string | null | undefined;
  };

  /**
   * Summary type for Task Management Project entity.
   *
   * Represents the minimal set of properties useful for listing and brief
   * display of project data.
   *
   * Includes essential identification and display fields.
   *
   * @author AutoBE - https://github.com/wrtnlabs/autobe
   */
  export type ISummary = {
    /**
     * Unique identifier of the project in UUID format.
     *
     * Provides the primary key for project reference and linking.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique project code identifier.
     *
     * Used for project identification in business processes.
     */
    code: string;

    /**
     * Project name, descriptive and non-empty.
     *
     * Main display field for projects in listings.
     */
    name: string;

    /**
     * Timestamp when the project was created (ISO 8601).
     *
     * Used for audit and history tracking.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the project was last updated (ISO 8601).
     *
     * Reflects last modification time.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
