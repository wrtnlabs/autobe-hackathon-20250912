import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Designer user information with authentication credentials and identity
 * details. Core independent business entity for managing designer user accounts
 * securely.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementDesigner = {
  /** Unique identifier of the designer. */
  id: string & tags.Format<"uuid">;

  /** Email address of the designer. Must be unique. */
  email: string;

  /** Hashed password for secure authentication. */
  password_hash: string;

  /** Full name of the designer. */
  name: string;

  /** Timestamp when the designer record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the designer record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion if applicable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementDesigner {
  /**
   * Request payload for registering a new Designer user.
   *
   * Includes mandatory fields for email, hashed password, and user name.
   *
   * Used in registration (join) operations.
   */
  export type ICreate = {
    /** Email address for new designer login. Must be unique and valid. */
    email: string & tags.Format<"email">;

    /** Password hash for authenticating the designer user. */
    password_hash: string;

    /** Full name of the designer user. */
    name: string;
  };

  /**
   * Authorization response including user identifier and JWT tokens.
   *
   * Returned after successful authentication operations such as login or
   * join.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized designer user. */
    id: string & tags.Format<"uuid">;

    /** Email address of the designer. Must be unique. */
    email: string;

    /** Hashed password for secure authentication. */
    password_hash: string;

    /** Full name of the designer. */
    name: string;

    /** Timestamp when the designer record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the designer record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Timestamp for soft deletion if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for designer login operation.
   *
   * Includes email and password to authenticate the designer user.
   */
  export type ILogin = {
    /** Email address of the designer user for login. */
    email: string & tags.Format<"email">;

    /** Plain-text password for login authentication. */
    password: string;
  };

  /** Request payload for refreshing JWT access tokens using a refresh token. */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens. */
    refreshToken: string;
  };

  /**
   * Request parameters for searching and filtering designer users with
   * pagination and sorting.
   */
  export type IRequest = {
    /** Filter by designer email. */
    email?: string | null | undefined;

    /** Filter by designer user name. */
    name?: string | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Maximum records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Sort field for ordering. */
    sort?: "email" | "name" | null | undefined;

    /** Sort order direction. */
    order?: "asc" | "desc" | null | undefined;
  };

  /**
   * Update payload for designer user including optional email, password hash,
   * name, timestamps, and soft delete flag.
   */
  export type IUpdate = {
    /** Email address of the designer. */
    email?: string | undefined;

    /** Hashed password for secure authentication. */
    password_hash?: string | undefined;

    /** Full name of the designer. */
    name?: string | undefined;

    /** Timestamp when the record was last updated. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp for soft deletion if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary view of Designer user including ID, email, and name. */
  export type ISummary = {
    /** Unique identifier of the designer user */
    id: string & tags.Format<"uuid">;

    /** Email address of the designer user */
    email: string & tags.Format<"email">;

    /** Full name of the designer user */
    name: string;
  };
}
