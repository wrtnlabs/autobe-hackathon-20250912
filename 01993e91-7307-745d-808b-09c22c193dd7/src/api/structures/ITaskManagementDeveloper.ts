import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Developer user information including secure login credentials.
 *
 * Independent business entity representing developer users with full control
 * for user management and authentication.
 *
 * @author AutoBE - https://github.com/wrtnlabs/autobe
 * @namespace Actors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementDeveloper = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Email address used for login and contact, unique across developers. */
  email: string;

  /** Hashed password supporting secure login. */
  password_hash: string;

  /** Full name of the developer user. */
  name: string;

  /** Timestamp when the record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for recoverable deletions. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementDeveloper {
  /**
   * Request body for creating a new developer user account. Includes email,
   * hashed password, name, and optional deleted_at timestamp.
   */
  export type ICreate = {
    /** User email address, unique across developers. */
    email: string;

    /** Hashed password for authentication. */
    password_hash: string;

    /** Full name of the developer. */
    name: string;

    /** Soft deletion timestamp, null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Request body for developer user login credentials. Includes email and
   * plain text password.
   */
  export type ILogin = {
    /** User email address used for login. */
    email: string;

    /** User plain text password used for authentication. */
    password: string;
  };

  /**
   * Request body for refreshing JWT tokens for a developer user. Optional
   * refresh token string.
   */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens. */
    refresh_token?: string | null | undefined;
  };

  /**
   * Response schema representing an authorized developer user, including
   * authentication tokens and user profile information.
   */
  export type IAuthorized = {
    /** Unique identifier of the developer user. */
    id: string & tags.Format<"uuid">;

    /** User email address, unique across developers. */
    email: string;

    /** Hashed password supporting secure login. */
    password_hash: string;

    /** Full name of the developer. */
    name: string;

    /** Timestamp when the developer record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the developer record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp for recoverable deletions. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request parameters for searching and filtering developer users with
   * pagination and sorting.
   */
  export type IRequest = {
    /** Filter by developer email. */
    email?: string | null | undefined;

    /** Filter by developer user name. */
    name?: string | null | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Maximum records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /** Field to sort by. */
    sort?: "email" | "name" | null | undefined;

    /** Sort order direction. */
    order?: "asc" | "desc" | null | undefined;
  };

  /** Payload for updating developer user information, all fields optional. */
  export type IUpdate = {
    /** Email address used for login and contact, unique across developers. */
    email?: string | undefined;

    /** Hashed password supporting secure login. */
    password_hash?: string | undefined;

    /** Full name of the developer user. */
    name?: string | undefined;

    /** Soft deletion timestamp for recoverable deletions. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /** Summary of a Developer user, including ID, email, and name. */
  export type ISummary = {
    /** Email address for login and contact. */
    email: string;

    /** Unique identifier for the developer user. */
    id: string & tags.Format<"uuid">;

    /** Full name of the developer user. */
    name: string;
  };
}
