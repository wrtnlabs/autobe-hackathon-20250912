import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Technical Project Manager (TPM) user entity. Contains unique identifier,
 * email, hashed password, full name, timestamps for creation and last update,
 * and nullable soft deletion timestamp. Used for TPM user management,
 * authentication, and authorization.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITaskManagementTpm = {
  /** Unique identifier of the TPM user. */
  id: string & tags.Format<"uuid">;

  /** Email address for TPM user login; must be unique. */
  email: string;

  /** Hashed password for secure authentication. */
  password_hash: string;

  /** Full name of the TPM user. */
  name: string;

  /** Timestamp when the TPM user record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the TPM user record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for recoverable deletion. Nullable. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITaskManagementTpm {
  /**
   * Request body schema for joining/registering a new TPM user.
   *
   * Includes unique email, plain password (to be hashed), and full name.
   */
  export type IJoin = {
    /** Unique email address, used for login and contact. */
    email: string;

    /**
     * Plain text password to be hashed by backend, min length according to
     * security policy.
     */
    password: string;

    /** Full name of the user. */
    name: string;
  };

  /**
   * Response schema containing authorized TPM user data and JWT tokens.
   *
   * Includes user ID and issued JWT access and refresh tokens.
   */
  export type IAuthorized = {
    /** Unique identifier of the authorized TPM user */
    id: string & tags.Format<"uuid">;

    /** Email address for TPM user login; must be unique. */
    email: string;

    /** Hashed password for secure authentication. */
    password_hash: string;

    /** Full name of the TPM user. */
    name: string;

    /** Timestamp when the TPM user record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the TPM user record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp for recoverable deletion. Nullable. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT access token string for authentication */
    access_token?: string | undefined;

    /** JWT refresh token string for token renewal */
    refresh_token?: string | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body schema for TPM user login.
   *
   * Includes registered user email and plain text password.
   */
  export type ILogin = {
    /** Registered user email address for authentication. */
    email: string;

    /** Plain text password to authenticate. */
    password: string;
  };

  /**
   * Request body schema for JWT token refresh.
   *
   * Includes the refresh token string to request a new access token.
   */
  export type IRefresh = {
    /** JWT refresh token string provided to obtain a new access token */
    refresh_token: string;
  };

  /**
   * Request object for listing or filtering TPM users. Supports pagination
   * and optional filters.
   */
  export type IRequest = {
    /** Optional page number for pagination. Should be an unsigned integer. */
    page?: number | null | undefined;

    /** Optional number of records per page. Should be an unsigned integer. */
    limit?: number | null | undefined;

    /**
     * Optional search term to filter TPM users. Utilized for matching name
     * or email.
     */
    search?: string | null | undefined;
  };

  /**
   * Request body data to create a new TPM user. This interface defines the
   * required properties for creating a TPM user account. All properties are
   * mandatory except auto-generated fields like id or timestamps. Password is
   * expected as plain text to be hashed server-side.
   */
  export type ICreate = {
    /**
     * Unique email address for login. Must comply with email format and be
     * unique in the TPM user database.
     */
    email: string;

    /**
     * Plain text password to be hashed. Must meet security requirements for
     * length and complexity.
     */
    password_hash: string;

    /**
     * Full name of the TPM user. Required for identification and display
     * purposes.
     */
    name: string;
  };

  /**
   * Payload for updating an existing TPM user. All fields are optional to
   * support partial updates. No updates allowed on id or timestamps. Used to
   * modify user email, password, or name.
   */
  export type IUpdate = {
    /**
     * Optional new email address. When provided, must be unique and conform
     * to email format.
     */
    email?: string | undefined;

    /**
     * Optional new password hash. Plain text should be hashed before
     * storing; expected hashed here.
     */
    password_hash?: string | undefined;

    /** Optional new full name. Used to update the user's display name. */
    name?: string | undefined;
  };

  /**
   * Summary of a Technical Project Manager (TPM) user, including ID, email,
   * and name.
   */
  export type ISummary = {
    /** Email address for login and contact. */
    email: string;

    /** Unique identifier for the TPM user. */
    id: string & tags.Format<"uuid">;

    /** Full name of the TPM user. */
    name: string;
  };
}
