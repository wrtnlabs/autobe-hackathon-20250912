{"operations":[{"specification":"This API operation is the registration (join) endpoint for the 'tpm' role in the Task Management system. It allows new Technical Project Manager users to create an account and receive initial JWT authorization tokens. The operation uses the 'task_management_tpm' Prisma DB table, which stores TPM users' email, hashed password, name, timestamps for creation, updates, and optional soft deletion timestamp. This join operation involves creating a new record in the 'task_management_tpm' table with the necessary credentials and user details. It returns a response containing the authorized access tokens in the type 'ITaskManagementTpm.IAuthorized'. This is a public endpoint that does not require authentication.\n\nThe request body type ITaskManagementTpm.IJoin corresponds to the user registration details required for TPMs, including email, password, and name. Security considerations include proper password hashing and ensuring unique email addresses as per the unique constraint in the schema. This join operation is integrated in the overall authentication workflow with corresponding login and token refresh endpoints. There is no soft deletion implication here as the record is only created during join.\n\nRelated operations include /auth/tpm/login for user authentication and /auth/tpm/refresh for token renewal.","authorizationType":"join","description":"Registers a new Technical Project Manager (TPM) user, creating an account with the necessary credentials and issuing initial JWT tokens. This operation uses the task_management_tpm table, handling email, password_hash, name, and timestamps. It is a public endpoint for user registration and requires no prior authentication.","summary":"Register a new TPM user and issue JWT tokens (task_management_tpm)","parameters":[],"requestBody":{"description":"Registration details for TPM user including email, password, and name.","typeName":"ITaskManagementTpm.IJoin"},"responseBody":{"description":"Authorized TPM user with JWT tokens.","typeName":"ITaskManagementTpm.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/tpm/join","method":"post"},{"specification":"This API operation is the login endpoint for the 'tpm' role. It authenticates an existing Technical Project Manager user by verifying credentials against the 'task_management_tpm' Prisma DB table, which holds user emails, hashed passwords, names, and timestamps. It requires email and password to be provided for authentication. Upon successful login, the system issues JWT access and refresh tokens encapsulated in the response type 'ITaskManagementTpm.IAuthorized'. This is a public endpoint allowing TPM users to authenticate and gain access to the system's protected resources.\n\nThis login operation complements the join operation and token refresh operation as part of the user authentication flow. It leverages the unique email constraint in the schema and secure password validation. It does not interact with soft deletion fields beyond basic account validation checks.\n\nRelated operations are /auth/tpm/join for account creation and /auth/tpm/refresh for refreshing tokens.","authorizationType":"login","description":"Authenticate an existing Technical Project Manager (TPM) user by verifying email and password credentials, issuing JWT tokens upon successful authentication. This operation uses the task_management_tpm table for credential validation and requires no prior authentication.","summary":"Login for TPM user to obtain JWT tokens (task_management_tpm)","parameters":[],"requestBody":{"description":"Login credentials for TPM user including email and password.","typeName":"ITaskManagementTpm.ILogin"},"responseBody":{"description":"Authorized TPM user with JWT tokens.","typeName":"ITaskManagementTpm.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/tpm/login","method":"post"},{"specification":"This API operation is the token refresh endpoint for the 'tpm' role. It enables an authenticated user who holds a valid refresh token to obtain a new access token. This operation works with the Task Management system's authentication tokens related to the 'task_management_tpm' Prisma DB table which stores TPM user details.\n\nIt requires the client to present a valid refresh token, and upon validation, a new access token (and optionally new refresh token) is issued. The response body follows the 'ITaskManagementTpm.IAuthorized' type, representing the authorized user data and tokens.\n\nThis endpoint plays a critical role in maintaining session security and token lifecycle management. The operation is generally secured but does not require user credentials again, only a valid refresh token.\n\nRelated operations include /auth/tpm/join for registration and /auth/tpm/login for credential-based authentication.","authorizationType":"refresh","description":"Refresh the JWT access token for a Technical Project Manager (TPM) user using a valid refresh token. Returns new authorized tokens. Operation interacts with the task_management_tpm table manage tokens in the authentication workflow.","summary":"Refresh JWT tokens for TPM user (task_management_tpm)","parameters":[],"requestBody":{"description":"Refresh token payload to request new access token.","typeName":"ITaskManagementTpm.IRefresh"},"responseBody":{"description":"Authorized TPM user with new JWT tokens.","typeName":"ITaskManagementTpm.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/tpm/refresh","method":"post"},{"specification":"This operation creates a new Project Manager (PM) user account. The endpoint accepts the user's registration details, such as email and password, and creates a new PM record in the database with the specified credentials. Upon successful creation, it issues initial authorized JWT tokens to the new user. This endpoint is publicly accessible to allow new users to register.\n\nThe operation references the `task_management_pm` table from the Prisma schema, which includes fields like `id`, `email`, `password_hash`, `name`, `created_at`, `updated_at`, and `deleted_at` (soft delete timestamp). The registration expects secure handling of sensitive fields such as `password_hash`, typically through hashing.\n\nSecurity considerations include validating uniqueness of email addresses and encrypting passwords. The API ensures no exposure of sensitive data in the response except for authorized token data.\n\nThis endpoint is foundational for member-type role registration and is often used in combination with login and token refresh operations.\n\nNote: Since `task_management_pm` supports soft deletion via `deleted_at`, care must be taken in account lifecycle management outside of this join operation.\n","authorizationType":"join","description":"Create a new Project Manager (PM) account with secure credentials and issue initial JWT tokens. The endpoint receives user registration data and securely stores the PM user record.\n\nThe `task_management_pm` table fields involved include `email` (unique login identifier), `password_hash` (secure password storage), `name` (user's full name), and timestamp fields for auditing account creation.\n\nThis operation enables new PMs to register for the task management system, establishing their identity and allowing subsequent authentication.\n\nSecurity considerations include validation of email uniqueness and password hashing prior to database insertion.\n\nThis registration operation has no authorization requirement as it is meant for public access.\n","summary":"Register new Project Manager user in task_management_pm table","parameters":[],"requestBody":{"description":"Create a new Project Manager (PM) account with necessary details","typeName":"ITaskManagementPm.ICreate"},"responseBody":{"description":"Authorization data and user info for newly created PM","typeName":"ITaskManagementPm.IAuthorized"},"authorizationRole":"pm","name":"join","path":"/auth/pm/join","method":"post"},{"specification":"This operation authenticates an existing Project Manager (PM) user by verifying credentials such as email and password. Upon successful authentication, the API issues JWT access and refresh tokens for subsequent authorized requests.\n\nIt operates on the `task_management_pm` table that stores user credentials and identity fields, including `email` (unique login), `password_hash` (hashed password), and personal details. The operation only exposes authorization tokens and does not return sensitive fields.\n\nSecurity considerations include secure password comparison, rate limiting to protect against brute force attacks, and secure token handling.\n\nThis login endpoint is publicly accessible to allow PM users to authenticate.\n\nThis operation is essential for member-type role authentication flows and complements registration and token refresh endpoints.\n","authorizationType":"login","description":"Authenticate Project Manager (PM) user by verifying credentials and issue JWT tokens.\n\nThis login operation uses `email` and `password` parameters validated against stored `password_hash` in `task_management_pm`.\n\nSuccessful authentication returns authorization tokens without exposing sensitive user data.\n\nSecurity controls include protection against brute force and session hijacking.\n\nLogin is a public endpoint to allow PM users to obtain access tokens.","summary":"Login existing Project Manager user","parameters":[],"requestBody":{"description":"Login credentials for Project Manager user","typeName":"ITaskManagementPm.ILogin"},"responseBody":{"description":"Authorization tokens for authenticated PM","typeName":"ITaskManagementPm.IAuthorized"},"authorizationRole":"pm","name":"login","path":"/auth/pm/login","method":"post"},{"specification":"This operation refreshes JWT authorization tokens for a Project Manager (PM) user. It accepts a valid refresh token and issues new access and refresh tokens to maintain authorized sessions without re-login.\n\nThe operation relies on existing tokens and session validity, referencing the `task_management_pm` schema for user identity consistency.\n\nSecurity considerations include validating refresh tokens against revocation lists and expiration.\n\nThis endpoint is restricted to authenticated users holding valid refresh tokens for PM role.\n\nThis operation complements the join and login endpoints by providing token lifecycle management for member-type roles.\n","authorizationType":"refresh","description":"Refresh JWT authorization tokens for authenticated Project Manager user using a valid refresh token.\n\nThis operation ensures continued authorized access without requiring re-authentication.\n\nSecurity checks include token validation and session consistency.\n\nOnly accessible by authenticated PM users with valid refresh tokens.\n","summary":"Refresh tokens for Project Manager","parameters":[],"requestBody":{"description":"Refresh token request for Project Manager","typeName":"ITaskManagementPm.IRefresh"},"responseBody":{"description":"New authorization tokens for Project Manager","typeName":"ITaskManagementPm.IAuthorized"},"authorizationRole":"pm","name":"refresh","path":"/auth/pm/refresh","method":"post"},{"specification":"This operation allows Project Management Officer (PMO) users to register and create a new PMO account in the task management system. It expects the client to provide necessary registration data such as email and password hash (among other registration details) to create the account. Upon successful registration, the system issues initial JWT access and refresh tokens to enable secure subsequent authenticated sessions. This operation is public-facing and requires no prior authentication, so anyone can register if allowed by policy. This flow corresponds to the task_management_pmo Prisma table which contains user credentials and identity details such as email, password_hash, and timestamps. Strict validation ensures email uniqueness (email field is unique) and password integrity during registration. The created_at and updated_at timestamps record lifecycle events.\n\nSecurity is enforced by hashing the user's password before storage in the password_hash field, and by preventing duplicate registrations with the same email. The response body conveys the user identity along with issued tokens through the ITaskManagementPmo.IAuthorized response type.\n\nThis registration operation is essential for PMO users because PMOs are admins who require account creation capability to manage projects and enforce compliance.\n\nRelated operations include login and token refresh, which allow the PMO user to authenticate subsequently and renew tokens as needed.","authorizationType":"join","description":"Register a new Project Management Officer (PMO) account with email and password hash credentials. This operation creates a secure user record in the task_management_pmo table, including lifecycle timestamps and ensuring email uniqueness. The system issues JWT tokens upon successful registration for authorized access. Use this endpoint publicly to onboard new PMO users who administrate projects and enforce standards. Strict password hashing and validation apply. This operation is foundational for admin-level user access control.","summary":"Creates a new project management officer (PMO) user account and issues authentication tokens.","parameters":[],"requestBody":{"description":"Registration details for creating a PMO user account.","typeName":"ITaskManagementPmo.IJoin"},"responseBody":{"description":"Authorized response with user identity and tokens.","typeName":"ITaskManagementPmo.IAuthorized"},"authorizationRole":"pmo","name":"join","path":"/auth/pmo/join","method":"post"},{"specification":"This operation allows existing Project Management Officer (PMO) users to authenticate with their email and password credentials to obtain JWT access and refresh tokens. It validates the email and password against the task_management_pmo table records. Upon successful credential verification, the system issues fresh JWT tokens for secure authorized sessions.\n\nThis login endpoint is public-facing, permitting PMO users to sign in to the task management system. Password hashes stored in the password_hash field are compared securely, enforcing strong authentication.\n\nThe response returns the authenticated PMO's identity and tokens encapsulated in the ITaskManagementPmo.IAuthorized response type.\n\nThis operation is essential for admin-level PMO user access to protected resources, allowing them to manage and monitor projects effectively.\n\nRelated operations include join (registration) and refresh (token renewal) for the complete authentication lifecycle.","authorizationType":"login","description":"Authenticate an existing Project Management Officer (PMO) user using email and password. Validates credentials against the task_management_pmo table and returns JWT tokens for authorized session management. This operation supports secure login for PMO users who manage projects and enforce compliance. Passwords are securely hashed and verified. Public access is enabled for user authentication.","summary":"Logs in a project management officer (PMO) and returns authorization tokens.","parameters":[],"requestBody":{"description":"Login credentials for PMO user authentication.","typeName":"ITaskManagementPmo.ILogin"},"responseBody":{"description":"Authorized response with user identity and tokens.","typeName":"ITaskManagementPmo.IAuthorized"},"authorizationRole":"pmo","name":"login","path":"/auth/pmo/login","method":"post"},{"specification":"Refresh the JWT tokens for an authenticated Project Management Officer (PMO) user. This operation requires a valid refresh token previously issued to the PMO user. Upon validation of the refresh token, the system issues new access and refresh tokens for continued authenticated access without requiring password re-entry.\n\nThe operation corresponds to the task_management_pmo table and maintains session continuity for admin users managing projects and enforcing compliance.\n\nSecurity mechanisms ensure expired, invalid, or revoked refresh tokens are rejected, protecting against token misuse.\n\nRelated authentication operations include join (registration) and login (authentication) for full token lifecycle management.","authorizationType":"refresh","description":"Refresh JWT access and refresh tokens for a logged-in Project Management Officer (PMO) user using a valid refresh token. Enables continued authenticated sessions without password re-entry. Ensures token validity and issues new tokens referencing the task_management_pmo user. Protects admin-level access for governance users managing projects.","summary":"Refresh JWT tokens for a PMO user session.","parameters":[],"requestBody":{"description":"Refresh token payload for renewing JWT tokens.","typeName":"ITaskManagementPmo.IRefresh"},"responseBody":{"description":"Authorized response with new JWT tokens.","typeName":"ITaskManagementPmo.IAuthorized"},"authorizationRole":"pmo","name":"refresh","path":"/auth/pmo/refresh","method":"post"},{"specification":"This operation allows a developer user to register (join) in the task management system by providing required details such as email, password, and name. It creates a new developer account, hashes the password securely, stores the user information in the 'task_management_developer' table, and issues initial JWT tokens to authorize the user. The operation is public and expects the client to supply valid registration data matching the developer schema. This endpoint is foundational for allowing developers to gain authenticated access to the system with member-level permissions.","authorizationType":"join","description":"This operation implements the registration (join) functionality for developer users, enabling them to create new accounts in the system. The 'task_management_developer' schema supports this operation with required fields: email (unique), password_hash (hashed password), and name. The API securely stores these credentials and issues JWT tokens encapsulated in the response type ITaskManagementDeveloper.IAuthorized. Authentication details include email/password validation and ensuring uniqueness of email. The operation is accessible without prior authentication (public). Related operations include login and refresh token issuance.","summary":"Registration (join) operation for developers based on the 'task_management_developer' Prisma DB table.","parameters":[],"requestBody":{"description":"Developer registration request body","typeName":"ITaskManagementDeveloper.ICreate"},"responseBody":{"description":"Developer authorization response with issued JWT tokens","typeName":"ITaskManagementDeveloper.IAuthorized"},"authorizationRole":"developer","name":"join","path":"/auth/developer/join","method":"post"},{"specification":"This operation is the login operation for developers. It validates the provided email and password credentials against entries in the 'task_management_developer' table. Upon successful validation, it issues new JWT access and refresh tokens. This endpoint supports secure authentication flows for developer users, enabling member role access to the system. The operation is public and critical for user login management.","authorizationType":"login","description":"This login API authenticates developers by validating their email and password credentials stored in 'task_management_developer'. Upon success, it issues JWT tokens encapsulated in the response type ITaskManagementDeveloper.IAuthorized. This operation depends on prior registration (join) and precedes token refresh functionality. It ensures security by proper password hashing and token handling. The endpoint is accessible without authentication.","summary":"Login operation for developers based on the 'task_management_developer' Prisma DB table.","parameters":[],"requestBody":{"description":"Developer login request body","typeName":"ITaskManagementDeveloper.ILogin"},"responseBody":{"description":"Developer authorization response with active JWT tokens","typeName":"ITaskManagementDeveloper.IAuthorized"},"authorizationRole":"developer","name":"login","path":"/auth/developer/login","method":"post"},{"specification":"This operation refreshes JWT tokens for developers using valid refresh tokens. It interacts with the 'task_management_developer' table to verify the refresh token's validity and issues new access and refresh tokens if the refresh token is authorized. This maintains session continuity for authenticated developer users and supports token lifecycle management.","authorizationType":"refresh","description":"Token refresh operation for developer users utilizing valid refresh tokens. It ensures the developer remains authenticated by exchanging refresh tokens for new JWTs encapsulated in ITaskManagementDeveloper.IAuthorized response. This operation follows login and join endpoints and secures session longevity. The endpoint requires authentication via the refresh token and is restricted to developer role users.","summary":"Token refresh operation for developers referencing the 'task_management_developer' Prisma DB table.","parameters":[],"requestBody":{"description":"Developer token refresh request body","typeName":"ITaskManagementDeveloper.IRefresh"},"responseBody":{"description":"Developer authorization response with renewed JWT tokens","typeName":"ITaskManagementDeveloper.IAuthorized"},"authorizationRole":"developer","name":"refresh","path":"/auth/developer/refresh","method":"post"},{"specification":"This API operation supports the registration (joining) of a new designer user account in the task management system. It allows creating a secure user record for the Designer role, including the essential authentication fields: email, password hash, and name. The operation references the 'task_management_designer' table in the Prisma schema, which has unique email and soft deletion management. On successful registration, the system issues initial JWT authorization tokens for secure subsequent access.\n\nThis operation is public and does not require authentication, ensuring open registration while enforcing data uniqueness and integrity through the 'task_management_designer' email uniqueness constraint.\n\nThe request body must include Designer's email, password, and name, matching the database schema. The response body provides an object conforming to the 'ITaskManagementDesigner.IAuthorized' schema, representing the authorized session tokens and user profile details.\n\nCommon validation includes ensuring the email follows standard formats and the password meets security policies (hashing occur on the server side). The system forbids duplicate email registration.\n\nRelated operations include 'login' and 'refresh' to fully support authentication lifecycle.","authorizationType":"join","description":"Registers a new Designer user account by creating an entry in the 'task_management_designer' database table. Requires unique email, secure password hashing, and user name. Upon success, returns JWT authorization tokens encapsulated in the 'ITaskManagementDesigner.IAuthorized' response. This operation is public and is the entry point for new Designer user registrations with security considerations for email uniqueness and password protection via hashing.","summary":"Register a new Designer user (task_management_designer) account","parameters":[],"requestBody":{"description":"Registration payload for creating a new Designer user account","typeName":"ITaskManagementDesigner.ICreate"},"responseBody":{"description":"JWT authorization tokens and Designer user profile for authenticated sessions","typeName":"ITaskManagementDesigner.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/designer/join","method":"post"},{"specification":"This API operation supports Designer user login by verifying credentials against the 'task_management_designer' Prisma database table. It accepts email and password in the request body. Upon successful authentication, the system issues JWT authorization tokens tied to the Designer user account.\n\nIt enforces secure password verification against the stored password_hash. Only non-deleted and valid Designer users can authenticate through this endpoint.\n\nThe response includes the 'ITaskManagementDesigner.IAuthorized' schema object providing access and refresh tokens along with user details.\n\nThis is a public endpoint to initiate Designer user sessions.\n\nRelated operations are 'join' for registration and 'refresh' for renewing tokens.","authorizationType":"login","description":"Authenticates an existing Designer user by verifying email and password credentials stored in 'task_management_designer'. Successful login returns JWT access and refresh tokens encapsulated in 'ITaskManagementDesigner.IAuthorized'. This operation is public, enforcing security by validating password hashes and ensuring the user is not soft-deleted.","summary":"Designer user login operation (task_management_designer)","parameters":[],"requestBody":{"description":"Login request containing Designer email and password for authentication","typeName":"ITaskManagementDesigner.ILogin"},"responseBody":{"description":"JWT authorization tokens and Designer profile for valid login sessions","typeName":"ITaskManagementDesigner.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/designer/login","method":"post"},{"specification":"This API operation facilitates the refresh of JWT tokens for authenticated Designer users. It references the 'task_management_designer' table to validate refresh tokens and issue new access tokens without re-authentication.\n\nThe request body contains the refresh token string. Upon successful validation, the server returns a new set of 'ITaskManagementDesigner.IAuthorized' tokens, ensuring continuous secure sessions.\n\nThis endpoint requires presenting a valid refresh token and applies security measures to validate token integrity and revocation status.\n\nRelated endpoints include 'join' for registering new Designer accounts and 'login' for initial authentication.","authorizationType":"refresh","description":"Refreshes JWT access tokens for an authenticated Designer user by validating the supplied refresh token. On success, returns a new set of 'ITaskManagementDesigner.IAuthorized' tokens, supporting session continuity. This operation requires a valid refresh token and ties back to the 'task_management_designer' user table.","summary":"Refresh JWT tokens for Designer user (task_management_designer)","parameters":[],"requestBody":{"description":"Refresh token request to renew Designer JWT access tokens","typeName":"ITaskManagementDesigner.IRefresh"},"responseBody":{"description":"New JWT authorization tokens and Designer user profile","typeName":"ITaskManagementDesigner.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/designer/refresh","method":"post"},{"specification":"This API operation supports creating a new account for the 'qa' role, which stands for Quality Assurance user in the task management system. It allows a user to register with essential information such as email, password, and name, generating initial JWT tokens upon successful registration. This operation corresponds to the task_management_qa table, which stores QA users including email, hashed password, name, and timestamps. The operation accepts the necessary details for user creation and issues authorization tokens, following secure password practices. This endpoint is public and does not require prior authentication.\n\nThe implementation enforces email uniqueness as specified by the schema. This operation must be used alongside the login and refresh token endpoints to enable full authentication flows for QA users. Security considerations include password hashing and validation of email formats. Successful registration returns an authorized object type with JWT tokens and user info.\n\nRelated operations include login for authentication and refresh for renewing tokens.\n","authorizationType":"join","description":"Create a new QA user account. The request must include a valid email address, password information, and the full name of the QA user. The system will securely hash the password and store the data in the task_management_qa table. An authorization token is issued upon successful creation to allow immediate authentication. This operation facilitates onboarding of quality assurance personnel in the task management platform.\n\nAccount email must be unique among QA users to prevent duplicate accounts. Password policies must be adhered to (e.g., minimum length, hashing). The response includes JWT tokens for authorized access.\n\nThis operation is intended for public access without prior authentication.\n\nUse this alongside /auth/qa/login and /auth/qa/refresh for complete auth lifecycle.\n\nEnsure error handling covers existing emails and invalid input formats.\n\nThis operation references the task_management_qa table where user credentials and metadata are stored.","summary":"Create new QA user account and issue JWT tokens","parameters":[],"requestBody":{"description":"QA user creation request body","typeName":"ITaskManagementQa.ICreate"},"responseBody":{"description":"QA user authorization info with JWT tokens","typeName":"ITaskManagementQa.IAuthorized"},"authorizationRole":"qa","name":"join","path":"/auth/qa/join","method":"post"},{"specification":"This API operation supports authenticating an existing QA user by verifying their credentials and issuing JWT access tokens. It matches provided email and password against the task_management_qa table records, which hold email and hashed password for QA users. On successful authentication, it returns JWT tokens and authorized user information.\n\nThis endpoint is public. Password verification must securely compare hashes. Login failures must result in appropriate errors without disclosing sensitive info.\n\nRelated operations include join for registration and refresh for renewing access tokens.\n","authorizationType":"login","description":"Authenticate existing QA user with email and password. The system validates credentials against stored hashed passwords in the task_management_qa table. Upon success, JWT access and refresh tokens are generated and returned in the response. Authentication enables QA personnel to access task management resources securely.\n\nLogin request requires valid email and password formats. Failure to authenticate must return errors.\n\nThis endpoint is accessible without prior authentication.\n\nUse together with /auth/qa/join and /auth/qa/refresh for the full auth process.\n","summary":"QA user login to issue access tokens","parameters":[],"requestBody":{"description":"QA user login request payload","typeName":"ITaskManagementQa.ILogin"},"responseBody":{"description":"QA user authorization info with access tokens","typeName":"ITaskManagementQa.IAuthorized"},"authorizationRole":"qa","name":"login","path":"/auth/qa/login","method":"post"},{"specification":"This API operation supports refreshing JWT access tokens for an existing QA user. It accepts a valid refresh token and issues a new access token to maintain authorized session without re-login. The refresh token is linked to the task_management_qa user. The response includes new JWT tokens and updated authorization info.\n\nAccess tokens expire typically after 30 minutes, while refresh tokens are long-lived (e.g., 14 days). Refresh token validation is crucial for security.\n\nThis endpoint requires authentication with a valid refresh token and is restricted to the 'qa' authorization role.\n\nRelated endpoints include join for registration and login for credential validation.\n","authorizationType":"refresh","description":"Refresh JWT tokens using a valid refresh token for QA users. This operation prolongs session validity without requiring re-authentication with credentials.\n\nThe request must include a valid refresh token linked to the QA user in the task_management_qa table. Successful operations return new JWT tokens and authorization data.\n\nThis endpoint requires an authenticated user with a valid refresh token.\n\nUtilize this API alongside /auth/qa/join and /auth/qa/login for complete token lifecycle management.\n","summary":"Refresh QA user access token","parameters":[],"requestBody":{"description":"QA user token refresh request","typeName":"ITaskManagementQa.IRefresh"},"responseBody":{"description":"New QA user authorization info with updated tokens","typeName":"ITaskManagementQa.IAuthorized"},"authorizationRole":"qa","name":"refresh","path":"/auth/qa/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of TaskManagementRoles from the database. It allows clients to perform search and filter operations over task management roles with attributes like role code, name, and description, enabling effective role management and assignment control in the system's role-based access control.\n\nThis operation maps directly to the 'task_management_roles' table in the Prisma schema, which contains detailed metadata about each role used for authorization and permission management.\n\nOnly users with roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa' should access this API, as per system permission constraints.","path":"/taskManagement/tpm/taskManagementRoles","method":"patch","summary":"Search and retrieve a filtered, paginated list of TaskManagementRole","description":"Retrieve a paginated and filtered list of task management roles. This operation provides flexible querying options to search roles by code, name, or description, with pagination and sorting controls.\n\nThe 'task_management_roles' table includes unique codes like 'TPM', 'PM', 'Developer', etc., with descriptive information.\n\nPermission to access this endpoint is granted only to authorized users with roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'. Unauthorized access is forbidden.\n\nErrors may result from invalid query parameters or authentication failures.","parameters":[],"requestBody":{"description":"Search and pagination parameters for task management role filtering","typeName":"ITaskManagementTaskManagementRoles.IRequest"},"responseBody":{"description":"Paginated list of TaskManagementRole matching search criteria","typeName":"IPageITaskManagementTaskManagementRoles"},"authorizationType":null,"authorizationRole":"tpm","name":"index"},{"specification":"This operation fetches detailed information about a specific TaskManagementRole identified by its unique UUID. It includes all role details such as code, name, description, and timestamps from the 'task_management_roles' Prisma table.\n\nAccess to this endpoint requires user to have one of roles: 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'.\n\nErrors may occur if the ID does not exist or the user lacks appropriate permissions.","path":"/taskManagement/tpm/taskManagementRoles/{id}","method":"get","summary":"Get detailed info of a TaskManagementRole by ID","description":"Retrieve detailed information about a specific task management role by its unique identifier.\n\nThe operation returns properties including role code, name, optional description, created and updated timestamps.\n\nAccess is restricted to authorized users with roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'.\n\nErrors include invalid ID format, not found, or unauthorized access errors.\n\nThis operation accesses the 'task_management_roles' Prisma table.\n","parameters":[{"name":"id","description":"UUID of the TaskManagementRole","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"TaskManagementRole detailed data","typeName":"ITaskManagementTaskManagementRoles"},"authorizationType":null,"authorizationRole":"tpm","name":"at"},{"specification":"This operation creates a new TaskManagementRole record in the database from supplied data including code, name, and optional description.\n\nOnly users with the roles 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa' can create roles.\n\nThe creation enforces uniqueness of role code and handles timestamps automatically.\n\nErrors may result from validation failures or duplicate role codes.\n\nThe operation manipulates the 'task_management_roles' table as defined in the Prisma schema.","path":"/taskManagement/tpm/taskManagementRoles","method":"post","summary":"Create a TaskManagementRole","description":"Create a new task management role by providing mandatory role code, name, and optional description. The system validates input, enforces uniqueness of role code, and persists the role details.\n\nOnly users in roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa' are authorized to invoke this operation.\n\nErrors include validation failures and conflicts on duplicate codes.\n\nOperates on the 'task_management_roles' Prisma table.","parameters":[],"requestBody":{"description":"TaskManagementRole creation data","typeName":"ITaskManagementTaskManagementRoles.ICreate"},"responseBody":{"description":"Created TaskManagementRole data","typeName":"ITaskManagementTaskManagementRoles"},"authorizationType":null,"authorizationRole":"tpm","name":"create"},{"specification":"This operation updates an existing TaskManagementRole record identified by UUID. Input must include new role code, name, and optional description to update.\n\nOnly users with roles such as 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa' are authorized to perform updates.\n\nThe operation updates the 'task_management_roles' table and enforces uniqueness constraints.\n\nErrors include invalid ID, validation errors, or authorization failure.","path":"/taskManagement/tpm/taskManagementRoles/{id}","method":"put","summary":"Update a specific TaskManagementRole","description":"Update an existing task management role identified by UUID, with new code, name, and optional description.\n\nAuthorization restricted to users with roles 'tpm', 'pm', 'pmo', 'developer', 'designer', or 'qa'.\n\nHandles validation and uniqueness constraints.\n\nOperates on the 'task_management_roles' Prisma table.\n\nReturns updated role info.\n\nErrors include not found or validation failure.","parameters":[{"name":"id","description":"UUID of TaskManagementRole to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"TaskManagementRole update data","typeName":"ITaskManagementTaskManagementRoles.IUpdate"},"responseBody":{"description":"Updated TaskManagementRole data","typeName":"ITaskManagementTaskManagementRoles"},"authorizationType":null,"authorizationRole":"tpm","name":"update"},{"specification":"This operation deletes a taskManagementRole record identified by its unique UUID as stored in the task_management_roles table. It permanently removes the role from the database and any cascading relationships defined in the schema will be enforced by the database. This operation requires authorization by users with roles capable of managing system configuration, such as TPM, PM, or PMO.","description":"Deletes a specific taskManagementRole by its unique identifier. This permanently removes the role from the underlying task_management_roles table.\n\nOnly authorized users such as TPM, PM, or PMO roles may perform this operation to ensure security and integrity of role management.\n\nFailure to locate the specified role by ID should result in an appropriate error response.\n\nThe operation has no request body and returns no response content upon success.","summary":"Delete a taskManagementRole by ID","parameters":[{"name":"id","description":"Unique UUID identifier of the taskManagementRole to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase","method":"delete","path":"/taskManagement/tpm/taskManagementRoles/{id}"},{"specification":"This operation deletes a taskManagementRole record identified by its unique UUID as stored in the task_management_roles table. It permanently removes the role from the database and any cascading relationships defined in the schema will be enforced by the database. This operation requires authorization by users with roles capable of managing system configuration, such as TPM, PM, or PMO.","description":"Deletes a specific taskManagementRole by its unique identifier. This permanently removes the role from the underlying task_management_roles table.\n\nOnly authorized users such as TPM, PM, or PMO roles may perform this operation to ensure security and integrity of role management.\n\nFailure to locate the specified role by ID should result in an appropriate error response.\n\nThe operation has no request body and returns no response content upon success.","summary":"Delete a taskManagementRole by ID","parameters":[{"name":"id","description":"Unique UUID identifier of the taskManagementRole to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase","method":"delete","path":"/taskManagement/pm/taskManagementRoles/{id}"},{"specification":"This operation deletes a taskManagementRole record identified by its unique UUID as stored in the task_management_roles table. It permanently removes the role from the database and any cascading relationships defined in the schema will be enforced by the database. This operation requires authorization by users with roles capable of managing system configuration, such as TPM, PM, or PMO.","description":"Deletes a specific taskManagementRole by its unique identifier. This permanently removes the role from the underlying task_management_roles table.\n\nOnly authorized users such as TPM, PM, or PMO roles may perform this operation to ensure security and integrity of role management.\n\nFailure to locate the specified role by ID should result in an appropriate error response.\n\nThe operation has no request body and returns no response content upon success.","summary":"Delete a taskManagementRole by ID","parameters":[{"name":"id","description":"Unique UUID identifier of the taskManagementRole to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase","method":"delete","path":"/taskManagement/pmo/taskManagementRoles/{id}"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"tpm","name":"index","method":"patch","path":"/taskManagement/tpm/taskManagementTaskStatuses"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"pm","name":"index","method":"patch","path":"/taskManagement/pm/taskManagementTaskStatuses"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"pmo","name":"index","method":"patch","path":"/taskManagement/pmo/taskManagementTaskStatuses"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"developer","name":"index","method":"patch","path":"/taskManagement/developer/taskManagementTaskStatuses"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"designer","name":"index","method":"patch","path":"/taskManagement/designer/taskManagementTaskStatuses"},{"specification":"This operation retrieves a paginated list of taskManagementTaskStatuses from the task_management_task_statuses table with support for filtering, searching, and pagination parameters. It returns summarized information about each task status, including code, name, and description to facilitate task workflow management interfaces.","description":"Retrieve a filtered and paginated list of taskManagementTaskStatuses.\n\nThe operation supports searching by code, name, and provides pagination controls. Only authenticated roles such as TPM, PM, PMO, developers, designers, and QA can access this list.\n\nThis endpoint returns summarized data intended for listing and selection.\n\nRelated APIs include retrieval of individual status details and creation of new statuses.\n\nProper filtering and pagination parameters improve performance and usability.","summary":"Search and retrieve list of taskManagementTaskStatuses","parameters":[],"requestBody":{"description":"Search criteria and pagination controls for taskManagementTaskStatuses","typeName":"ITaskManagementTaskStatuses.IRequest"},"responseBody":{"description":"Paginated summary list of taskManagementTaskStatuses matching criteria","typeName":"IPageITaskManagementTaskStatuses.ISummary"},"authorizationType":null,"authorizationRole":"qa","name":"index","method":"patch","path":"/taskManagement/qa/taskManagementTaskStatuses"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"tpm","name":"at","method":"get","path":"/taskManagement/tpm/taskManagementTaskStatuses/{id}"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"pm","name":"at","method":"get","path":"/taskManagement/pm/taskManagementTaskStatuses/{id}"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"pmo","name":"at","method":"get","path":"/taskManagement/pmo/taskManagementTaskStatuses/{id}"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"developer","name":"at","method":"get","path":"/taskManagement/developer/taskManagementTaskStatuses/{id}"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"designer","name":"at","method":"get","path":"/taskManagement/designer/taskManagementTaskStatuses/{id}"},{"specification":"This operation retrieves detailed information about a single taskManagementTaskStatus identified by its UUID from the task_management_task_statuses table. It returns complete information including code, name, description, creation, and update timestamps. This supports client interfaces needing detailed workflow status data.","description":"Retrieve detailed information of a taskManagementTaskStatus by its unique ID.\n\nOnly authenticated users including TPM, PM, PMO, developers, designers, and QA can access this information.\n\nThe operation returns the full details including code, name, description, and timestamp information.\n\nIt is important to handle errors when the requested ID does not exist.\n\nThis endpoint is commonly used in conjunction with the status list and creation APIs.","summary":"Get taskManagementTaskStatus details by ID","parameters":[{"name":"id","description":"Unique UUID identifier for the target taskManagementTaskStatus","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"qa","name":"at","method":"get","path":"/taskManagement/qa/taskManagementTaskStatuses/{id}"},{"specification":"This operation creates a new taskManagementTaskStatus by accepting a creation payload that includes code, name, and optional description. It persists the new status in the task_management_task_statuses table with proper uniqueness and validation on the code field. Only authorized users can create new statuses to extend the task workflow.","description":"Create a new taskManagementTaskStatus record.\n\nThe client must provide a unique code, a human-readable name, and optionally a description for the new status.\n\nOnly authorized users with roles TPM, PM, or PMO may perform this creation.\n\nThe system enforces uniqueness of the code and validates validity of the inputs.\n\nReturns the full created record including timestamps.\n\nUse this API to extend or customize task lifecycle statuses as needed.","summary":"Create a new taskManagementTaskStatus","parameters":[],"requestBody":{"description":"Payload for creating taskManagementTaskStatus","typeName":"ITaskManagementTaskStatus.ICreate"},"responseBody":{"description":"Complete created taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"tpm","name":"create","method":"post","path":"/taskManagement/tpm/taskManagementTaskStatuses"},{"specification":"This operation creates a new taskManagementTaskStatus by accepting a creation payload that includes code, name, and optional description. It persists the new status in the task_management_task_statuses table with proper uniqueness and validation on the code field. Only authorized users can create new statuses to extend the task workflow.","description":"Create a new taskManagementTaskStatus record.\n\nThe client must provide a unique code, a human-readable name, and optionally a description for the new status.\n\nOnly authorized users with roles TPM, PM, or PMO may perform this creation.\n\nThe system enforces uniqueness of the code and validates validity of the inputs.\n\nReturns the full created record including timestamps.\n\nUse this API to extend or customize task lifecycle statuses as needed.","summary":"Create a new taskManagementTaskStatus","parameters":[],"requestBody":{"description":"Payload for creating taskManagementTaskStatus","typeName":"ITaskManagementTaskStatus.ICreate"},"responseBody":{"description":"Complete created taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"pm","name":"create","method":"post","path":"/taskManagement/pm/taskManagementTaskStatuses"},{"specification":"This operation creates a new taskManagementTaskStatus by accepting a creation payload that includes code, name, and optional description. It persists the new status in the task_management_task_statuses table with proper uniqueness and validation on the code field. Only authorized users can create new statuses to extend the task workflow.","description":"Create a new taskManagementTaskStatus record.\n\nThe client must provide a unique code, a human-readable name, and optionally a description for the new status.\n\nOnly authorized users with roles TPM, PM, or PMO may perform this creation.\n\nThe system enforces uniqueness of the code and validates validity of the inputs.\n\nReturns the full created record including timestamps.\n\nUse this API to extend or customize task lifecycle statuses as needed.","summary":"Create a new taskManagementTaskStatus","parameters":[],"requestBody":{"description":"Payload for creating taskManagementTaskStatus","typeName":"ITaskManagementTaskStatus.ICreate"},"responseBody":{"description":"Complete created taskManagementTaskStatus record","typeName":"ITaskManagementTaskStatus"},"authorizationType":null,"authorizationRole":"pmo","name":"create","method":"post","path":"/taskManagement/pmo/taskManagementTaskStatuses"},{"specification":"This operation updates a task status record in the task_management_task_statuses table according to its unique identifier. The task_management_task_statuses table defines possible states a task can hold, such as 'To Do', 'In Progress', or 'Done'. This API allows modifying the code, name, and description of the task status, with validation ensuring uniqueness of the code field. Updates to timestamps are handled internally. This endpoint requires PUT method with the 'id' path parameter specifying the target record.","description":"This API allows updating a specific task status entity which represents status states for tasks within the system.\n\nIt operates on the task_management_task_statuses table where each record defines a distinct task status like 'To Do', 'In Progress', or 'Done'. The update operation modifies the code (unique identifier), the human-readable name, and an optional descriptive explanation of the status.\n\nSecurity considerations include appropriate permission checks to restrict updates to authorized roles only, typically administrators or PMO roles.\n\nThe endpoint receives the task status 'id' as a path parameter and expects a request body with updated fields following strict validation rules including code uniqueness.\n\nUpon successful update, the full updated task status record is returned, including timestamps indicating creation and last update times.\n\nThis operation supports maintaining accurate and up-to-date task lifecycle states, crucial for task tracking and workflow management.","summary":"Update a specific task status record in task_management_task_statuses table","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task status record"}],"requestBody":{"description":"Updated data for the task status entity","typeName":"ITaskManagementTaskStatuses.IUpdate"},"responseBody":{"description":"Updated task status entity with full details","typeName":"ITaskManagementTaskStatuses"},"authorizationType":null,"authorizationRole":"pmo","name":"update","path":"/taskManagement/pmo/taskManagementTaskStatuses/{id}","method":"put"},{"specification":"This operation deletes a specific task status record in the task_management_task_statuses table identified by the 'id' path parameter. Deletion here performs a hard delete, permanently removing the record from the database as no soft delete fields exist in the schema for this entity.\n\nThe task_management_task_statuses table governs all status states a task can have, making this operation sensitive and typically restricted to admin or PMO roles.\n\nNo request body is required. Successful execution means the targeted record is irreversibly removed.\n\nClients should handle the case where the specified 'id' does not exist by appropriate error handling.\n\nThis operation is critical for maintaining an accurate list of valid task statuses in the system.","description":"This API permanently removes a specific task status record identified by ID from the task_management_task_statuses table.\n\nIt ensures the status is no longer available in task lifecycle workflows.\n\nAdministrative privileges are required to invoke this operation.\n\nOnce deleted, the record cannot be restored.\n\nError handling includes responding with an appropriate error if the record does not exist.\n\nCareful permission management must be in place due to potential impacts to business workflows reliant on task status data.\n\nNo request body needed. The path parameter 'id' uniquely identifies the task status to remove.","summary":"Delete a task status record from the task_management_task_statuses table","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Target task status record ID"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase","path":"/taskManagement/pmo/taskManagementTaskStatuses/{id}","method":"delete"},{"specification":"Retrieve a paginated list of task priority entities from the task_management_priorities table, allowing advanced filtering, sorting, and searching capabilities.\n\nThe task_management_priorities table defines priority levels such as 'Low', 'Medium', and 'High' used to categorize and prioritize tasks in the system.\n\nClients can provide filtering criteria and pagination options in the request body.\n\nThe response includes the paginated data set of priority summary objects.\n\nAccess is typically restricted to roles that require priority data visibility such as PMO users and similar.","description":"This operation retrieves a filtered and paginated list of task priority entities.\n\nThe task_management_priorities table stores the different priority levels available for tasks, including Low, Medium, and High.\n\nClients can specify search filters like name or code, sorting preferences, and pagination.\n\nSecurity controls limit access to authorized roles such as PMO users.\n\nThe response provides summaries optimized for client display lists along with pagination metadata.\n\nThis supports clients displaying priority options in task creation or filtering screens.","summary":"Search and list task priorities with pagination from task_management_priorities table","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for task priority filtering","typeName":"ITaskManagementPriorities.IRequest"},"responseBody":{"description":"Paginated list of task priority summaries matching criteria","typeName":"IPageITaskManagementPriorities.ISummary"},"authorizationType":null,"authorizationRole":"pmo","name":"index","path":"/taskManagement/pmo/taskManagementPriorities","method":"patch"},{"specification":"Retrieve detailed information for a specific task priority entity by its unique ID from the task_management_priorities table.\n\nThe task_management_priorities table is used to classify tasks by urgency and importance levels.\n\nResponse includes full details such as code, name, description, and timestamps.\n\nAccess is restricted to authorized roles including PMO users.\n\nThis allows clients to obtain detailed priority data for display or editing purposes.","description":"Retrieve a single task priority entity identified by the 'id' path parameter.\n\nThis endpoint returns full details including code, name, description, and audit timestamps.\n\nOnly authorized users such as PMO staff can access this detailed information.\n\nThe underlying record is fetched from the task_management_priorities table which standardizes task urgency levels.\n\nNo request body is required. The 'id' param must be a valid UUID.\n\nClients should handle NOT FOUND errors if the 'id' does not correspond to any record.","summary":"Get detailed task priority information by ID from task_management_priorities table","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task priority"}],"requestBody":null,"responseBody":{"description":"Detailed task priority entity","typeName":"ITaskManagementPriorities"},"authorizationType":null,"authorizationRole":"pmo","name":"at","path":"/taskManagement/pmo/taskManagementPriorities/{id}","method":"get"},{"specification":"This operation creates a new record in the task_management_priorities table. The Priority entity defines the priority level of tasks such as Low, Medium, or High, which influences task sorting and alerting within the task management system. This create operation accepts a priority code, name, and optional description, and records creation and update timestamps automatically.","path":"/taskManagement/pmo/taskManagementPriorities","method":"post","summary":"Create a new task priority level","description":"Create a new task priority level in the system, defining the urgency or importance of tasks that users can select when creating or updating tasks. The system ensures the uniqueness of the priority code to prevent duplicates.\n\nOnly authorized users with roles capable of managing task priorities can perform this operation.\n\nThe request must provide a valid code representing the priority (e.g., 'low', 'medium', 'high'), a human-readable name, and an optional detailed description to explain the priority level.\n\nUpon successful creation, the system returns the full priority record including creation and update timestamps. No direct deletion or modification of system-generated timestamps is allowed by users.","parameters":[],"requestBody":{"description":"Creation info of the priority","typeName":"ITaskManagementPriority.ICreate"},"responseBody":{"description":"Added task priority record","typeName":"ITaskManagementPriority"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"pmo","name":"create"},{"specification":"This operation creates a new record in the task_management_priorities table. The Priority entity defines the priority level of tasks such as Low, Medium, or High, which influences task sorting and alerting within the task management system. This create operation accepts a priority code, name, and optional description, and records creation and update timestamps automatically.","path":"/taskManagement/tpm/taskManagementPriorities","method":"post","summary":"Create a new task priority level","description":"Create a new task priority level in the system, defining the urgency or importance of tasks that users can select when creating or updating tasks. The system ensures the uniqueness of the priority code to prevent duplicates.\n\nOnly authorized users with roles capable of managing task priorities can perform this operation.\n\nThe request must provide a valid code representing the priority (e.g., 'low', 'medium', 'high'), a human-readable name, and an optional detailed description to explain the priority level.\n\nUpon successful creation, the system returns the full priority record including creation and update timestamps. No direct deletion or modification of system-generated timestamps is allowed by users.","parameters":[],"requestBody":{"description":"Creation info of the priority","typeName":"ITaskManagementPriority.ICreate"},"responseBody":{"description":"Added task priority record","typeName":"ITaskManagementPriority"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"tpm","name":"create"},{"specification":"This operation updates an existing task priority record identified by ID in the task_management_priorities table. It allows modifying the priority code, human-readable name, and optional description. Creation and update timestamps are maintained internally.","path":"/taskManagement/pmo/taskManagementPriorities/{id}","method":"put","summary":"Update task priority by ID","description":"Update details of an existing task priority level in the system. The operation targets the priority identified by its unique UUID.\n\nUsers with appropriate administrative or PMO roles are authorized to perform this action.\n\nThe update request can modify the code (e.g., 'low', 'medium', 'high'), the display name, and the description explaining the priority level. Timestamps for creation are unchanged; update timestamps reflect the modification time.\n\nThe operation ensures that priority codes remain unique post-update, and invalid UUIDs cause errors.","parameters":[{"name":"id","description":"Unique identifier of the task priority to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated task priority information","typeName":"ITaskManagementPriority.IUpdate"},"responseBody":{"description":"Updated task priority record","typeName":"ITaskManagementPriority"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"pmo","name":"update"},{"specification":"This operation updates an existing task priority record identified by ID in the task_management_priorities table. It allows modifying the priority code, human-readable name, and optional description. Creation and update timestamps are maintained internally.","path":"/taskManagement/tpm/taskManagementPriorities/{id}","method":"put","summary":"Update task priority by ID","description":"Update details of an existing task priority level in the system. The operation targets the priority identified by its unique UUID.\n\nUsers with appropriate administrative or PMO roles are authorized to perform this action.\n\nThe update request can modify the code (e.g., 'low', 'medium', 'high'), the display name, and the description explaining the priority level. Timestamps for creation are unchanged; update timestamps reflect the modification time.\n\nThe operation ensures that priority codes remain unique post-update, and invalid UUIDs cause errors.","parameters":[{"name":"id","description":"Unique identifier of the task priority to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated task priority information","typeName":"ITaskManagementPriority.IUpdate"},"responseBody":{"description":"Updated task priority record","typeName":"ITaskManagementPriority"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"tpm","name":"update"},{"specification":"This operation deletes an existing task priority record specified by ID from the task_management_priorities table. It performs a hard delete removing the record permanently from the database as the schema does not define soft delete attributes for this entity.","path":"/taskManagement/pmo/taskManagementPriorities/{id}","method":"delete","summary":"Delete task priority by ID","description":"Permanently delete a task priority level from the system, identified by its UUID.\n\nThe operation removes the record without soft delete, so it cannot be recovered later.\n\nOnly users with administrative or PMO roles can perform this operation.\n\nErrors are returned for invalid or non-existing IDs.","parameters":[{"name":"id","description":"Unique identifier of the task priority to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"pmo","name":"erase"},{"specification":"This operation deletes an existing task priority record specified by ID from the task_management_priorities table. It performs a hard delete removing the record permanently from the database as the schema does not define soft delete attributes for this entity.","path":"/taskManagement/tpm/taskManagementPriorities/{id}","method":"delete","summary":"Delete task priority by ID","description":"Permanently delete a task priority level from the system, identified by its UUID.\n\nThe operation removes the record without soft delete, so it cannot be recovered later.\n\nOnly users with administrative or PMO roles can perform this operation.\n\nErrors are returned for invalid or non-existing IDs.","parameters":[{"name":"id","description":"Unique identifier of the task priority to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"tpm","name":"erase"},{"specification":"This operation retrieves a filtered and paginated list of TPM (Technical Project Manager) user accounts from the task_management_tpm table. It provides search, filtering, and sorting capabilities for TPM users with their basic information such as email and name.\n\nThis endpoint allows management and overview of TPM users in the system, with the ability to paginate large results sets and apply complex query parameters.\n\nDetailed authorization logic ensures only authorized users access this data.","path":"/taskManagement/pmo/taskManagement/tpms","method":"patch","summary":"Search and retrieve a paginated list of TPM user accounts","description":"Retrieve a filtered page list of TPM user accounts, supporting search criteria such as email, name, and status.\n\nPaging and sorting options are also supported to handle large data sets efficiently.\n\nOnly authorized users, typically admins or PMOs, can access TPM user listings.\n\nThe response returns a paginated structure containing TPM user summaries with relevant details.\n\nBusiness logic ensures that data obeys any privacy or visibility constraints based on user roles.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for TPM filtering","typeName":"ITaskManagementTpm.IRequest"},"responseBody":{"description":"Paginated list of TPM user summary information matching search criteria","typeName":"IPageITaskManagementTpm.ISummary"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"pmo","name":"index"},{"specification":"This operation retrieves a filtered and paginated list of TPM (Technical Project Manager) user accounts from the task_management_tpm table. It provides search, filtering, and sorting capabilities for TPM users with their basic information such as email and name.\n\nThis endpoint allows management and overview of TPM users in the system, with the ability to paginate large results sets and apply complex query parameters.\n\nDetailed authorization logic ensures only authorized users access this data.","path":"/taskManagement/tpm/taskManagement/tpms","method":"patch","summary":"Search and retrieve a paginated list of TPM user accounts","description":"Retrieve a filtered page list of TPM user accounts, supporting search criteria such as email, name, and status.\n\nPaging and sorting options are also supported to handle large data sets efficiently.\n\nOnly authorized users, typically admins or PMOs, can access TPM user listings.\n\nThe response returns a paginated structure containing TPM user summaries with relevant details.\n\nBusiness logic ensures that data obeys any privacy or visibility constraints based on user roles.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for TPM filtering","typeName":"ITaskManagementTpm.IRequest"},"responseBody":{"description":"Paginated list of TPM user summary information matching search criteria","typeName":"IPageITaskManagementTpm.ISummary"},"authorizationRoles":["pmo","tpm"],"authorizationType":null,"authorizationRole":"tpm","name":"index"},{"specification":"This operation retrieves a Technical Project Manager (TPM) user by their unique identifier from the task_management_tpm table. It returns the detailed TPM user data including email, name, and timestamps. This endpoint supports user and admin clients needing to view TPM user details securely.","path":"/taskManagement/tpm/taskManagement/tpms/{id}","method":"get","summary":"Retrieve a TPM user by ID","description":"Retrieve a specific Technical Project Manager (TPM) by their unique ID.\n\nThis operation accesses the task_management_tpm table, which stores TPM user information including email, hashed password (not returned here), name, creation date, update date, and soft deletion status.\n\nSecurity considerations: Access to TPM user data should be restricted to authorized roles such as tpm, pm, pmo, developer, designer, or qa.\n\nThe operation requires the UUID of the TPM user as a path parameter and returns the TPM user's detailed information, excluding sensitive fields like password hash.\n\nErrors are returned if the TPM ID does not exist or the requesting user lacks permission.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Technical Project Manager user information","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"tpm","name":"at"},{"specification":"This operation creates a new Technical Project Manager (TPM) user in the task_management_tpm table. It requires the TPM user creation data with email, password hash, name, and timestamps. The system stores and returns the created TPM user data excluding the password hash for security.","path":"/taskManagement/tpm/taskManagement/tpms","method":"post","summary":"Create a new TPM user","description":"Create a new Technical Project Manager (TPM) user.\n\nThis operation inserts a new record into the task_management_tpm table with unique email, hashed password for authentication, name, and timestamps.\n\nValidation includes ensuring email uniqueness and password hash presence.\n\nAfter creation, the TPM user data is returned, excluding sensitive information like the password hash.\n\nAccess control restricts this action to authorized roles such as tpm, pm, or pmo with management permissions.\n\nErrors will occur if email duplicates exist or data validation fails.","parameters":[],"requestBody":{"description":"Technical Project Manager creation data","typeName":"ITaskManagementTpm.ICreate"},"responseBody":{"description":"Created TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"tpm","name":"create"},{"specification":"This operation creates a new Technical Project Manager (TPM) user in the task_management_tpm table. It requires the TPM user creation data with email, password hash, name, and timestamps. The system stores and returns the created TPM user data excluding the password hash for security.","path":"/taskManagement/pm/taskManagement/tpms","method":"post","summary":"Create a new TPM user","description":"Create a new Technical Project Manager (TPM) user.\n\nThis operation inserts a new record into the task_management_tpm table with unique email, hashed password for authentication, name, and timestamps.\n\nValidation includes ensuring email uniqueness and password hash presence.\n\nAfter creation, the TPM user data is returned, excluding sensitive information like the password hash.\n\nAccess control restricts this action to authorized roles such as tpm, pm, or pmo with management permissions.\n\nErrors will occur if email duplicates exist or data validation fails.","parameters":[],"requestBody":{"description":"Technical Project Manager creation data","typeName":"ITaskManagementTpm.ICreate"},"responseBody":{"description":"Created TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"pm","name":"create"},{"specification":"This operation creates a new Technical Project Manager (TPM) user in the task_management_tpm table. It requires the TPM user creation data with email, password hash, name, and timestamps. The system stores and returns the created TPM user data excluding the password hash for security.","path":"/taskManagement/pmo/taskManagement/tpms","method":"post","summary":"Create a new TPM user","description":"Create a new Technical Project Manager (TPM) user.\n\nThis operation inserts a new record into the task_management_tpm table with unique email, hashed password for authentication, name, and timestamps.\n\nValidation includes ensuring email uniqueness and password hash presence.\n\nAfter creation, the TPM user data is returned, excluding sensitive information like the password hash.\n\nAccess control restricts this action to authorized roles such as tpm, pm, or pmo with management permissions.\n\nErrors will occur if email duplicates exist or data validation fails.","parameters":[],"requestBody":{"description":"Technical Project Manager creation data","typeName":"ITaskManagementTpm.ICreate"},"responseBody":{"description":"Created TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"pmo","name":"create"},{"specification":"This operation updates an existing Technical Project Manager (TPM) user by their unique identifier in the task_management_tpm table. The request contains updatable user properties such as email, password hash, and name. The system validates and persists the changes, returning the updated TPM user data.","path":"/taskManagement/tpm/taskManagement/tpms/{id}","method":"put","summary":"Update TPM user by ID","description":"Update an existing Technical Project Manager (TPM) user by ID.\n\nThis operation allows modification of TPM user properties including email, password hash, name, and timestamps.\n\nThe TPM user is identified by the UUID path parameter.\n\nValidation ensures email uniqueness and correct data formatting.\n\nReturns the updated TPM user record excluding sensitive fields.\n\nAuthorization is required for roles such as tpm, pm, or pmo.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Technical Project Manager update data","typeName":"ITaskManagementTpm.IUpdate"},"responseBody":{"description":"Updated TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"tpm","name":"update"},{"specification":"This operation updates an existing Technical Project Manager (TPM) user by their unique identifier in the task_management_tpm table. The request contains updatable user properties such as email, password hash, and name. The system validates and persists the changes, returning the updated TPM user data.","path":"/taskManagement/pm/taskManagement/tpms/{id}","method":"put","summary":"Update TPM user by ID","description":"Update an existing Technical Project Manager (TPM) user by ID.\n\nThis operation allows modification of TPM user properties including email, password hash, name, and timestamps.\n\nThe TPM user is identified by the UUID path parameter.\n\nValidation ensures email uniqueness and correct data formatting.\n\nReturns the updated TPM user record excluding sensitive fields.\n\nAuthorization is required for roles such as tpm, pm, or pmo.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Technical Project Manager update data","typeName":"ITaskManagementTpm.IUpdate"},"responseBody":{"description":"Updated TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"pm","name":"update"},{"specification":"This operation updates an existing Technical Project Manager (TPM) user by their unique identifier in the task_management_tpm table. The request contains updatable user properties such as email, password hash, and name. The system validates and persists the changes, returning the updated TPM user data.","path":"/taskManagement/pmo/taskManagement/tpms/{id}","method":"put","summary":"Update TPM user by ID","description":"Update an existing Technical Project Manager (TPM) user by ID.\n\nThis operation allows modification of TPM user properties including email, password hash, name, and timestamps.\n\nThe TPM user is identified by the UUID path parameter.\n\nValidation ensures email uniqueness and correct data formatting.\n\nReturns the updated TPM user record excluding sensitive fields.\n\nAuthorization is required for roles such as tpm, pm, or pmo.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Technical Project Manager update data","typeName":"ITaskManagementTpm.IUpdate"},"responseBody":{"description":"Updated TPM user data","typeName":"ITaskManagementTpm"},"authorizationType":null,"authorizationRole":"pmo","name":"update"},{"specification":"This operation permanently deletes a Technical Project Manager (TPM) user by their unique identifier from the task_management_tpm table. This operation performs a hard delete removing the user record entirely. Access is restricted to specific authorized roles such as tpm, pm, and pmo due to the impact of data removal.","path":"/taskManagement/tpm/taskManagement/tpms/{id}","method":"delete","summary":"Delete TPM user by ID","description":"Delete a Technical Project Manager (TPM) user by ID.\n\nThis operation performs a hard delete on the TPM user record identified by the UUID path parameter from the task_management_tpm table.\n\nSoft deletion is supported by the schema, but this operation removes the record permanently.\n\nAccess restrictions apply to authorized roles only due to data sensitivity.\n\nOnce deleted, the user data cannot be recovered.\n\nErrors occur if the user ID does not exist or deletion constraints are violated.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase"},{"specification":"This operation permanently deletes a Technical Project Manager (TPM) user by their unique identifier from the task_management_tpm table. This operation performs a hard delete removing the user record entirely. Access is restricted to specific authorized roles such as tpm, pm, and pmo due to the impact of data removal.","path":"/taskManagement/pm/taskManagement/tpms/{id}","method":"delete","summary":"Delete TPM user by ID","description":"Delete a Technical Project Manager (TPM) user by ID.\n\nThis operation performs a hard delete on the TPM user record identified by the UUID path parameter from the task_management_tpm table.\n\nSoft deletion is supported by the schema, but this operation removes the record permanently.\n\nAccess restrictions apply to authorized roles only due to data sensitivity.\n\nOnce deleted, the user data cannot be recovered.\n\nErrors occur if the user ID does not exist or deletion constraints are violated.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase"},{"specification":"This operation permanently deletes a Technical Project Manager (TPM) user by their unique identifier from the task_management_tpm table. This operation performs a hard delete removing the user record entirely. Access is restricted to specific authorized roles such as tpm, pm, and pmo due to the impact of data removal.","path":"/taskManagement/pmo/taskManagement/tpms/{id}","method":"delete","summary":"Delete TPM user by ID","description":"Delete a Technical Project Manager (TPM) user by ID.\n\nThis operation performs a hard delete on the TPM user record identified by the UUID path parameter from the task_management_tpm table.\n\nSoft deletion is supported by the schema, but this operation removes the record permanently.\n\nAccess restrictions apply to authorized roles only due to data sensitivity.\n\nOnce deleted, the user data cannot be recovered.\n\nErrors occur if the user ID does not exist or deletion constraints are violated.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the TPM user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase"},{"specification":"Operations related to managing Project Managers (PMs) as defined by the 'task_management_pm' entity in the Prisma schema. These endpoints allow clients to list, retrieve details, create, and update Project Manager records, including fields such as email, password hash, name, deletion timestamp for soft deletes, and timestamps for creation and updates. The operations ensure consistent CRUD support on PM entities with authorization roles aligned with the roles defined in the system such as 'pm' role.","description":"This set of operations provides full CRUD functionality for the Project Manager (PM) entity within the task management system.\n\nListing PMs (PATCH /taskManagement/pms) enables querying a collection of PM entities with filtering and pagination, supporting administrative overview or user management screens.\n\nRetrieving a specific PM (GET /taskManagement/pms/{id}) fetches detailed PM data by unique identifier, useful for profile views or management interfaces.\n\nCreating a PM (POST /taskManagement/pms) requires detailed input including email, hashed password, and name, securely storing new PM credentials.\n\nUpdating a PM (PUT /taskManagement/pms/{id}) allows modification of PM details for maintaining user records.\n\nAuthorization is typically restricted to users with 'pm' role to control access.\n\nAll operations observe soft delete practices as the schema includes a 'deleted_at' timestamp to mark records as deleted without physical removal. This supports auditability and recovery.\n\nProper validation and error handling must be implemented in the API provider layer to ensure data integrity, uniqueness of emails, and consistency with business rules.","summary":"Manage Project Manager (PM) entities for task management system including listing, detail retrieval, creation, and updates.","parameters":[{"name":"id","description":"Unique identifier of the target Project Manager","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation or update information for a Project Manager entity","typeName":"ITaskManagementPm.ICreate"},"responseBody":{"description":"Detailed information of a single Project Manager entity","typeName":"ITaskManagementPm"},"authorizationType":null,"authorizationRole":"pm","name":"index","path":"/taskManagement/pm/taskManagement/pms","method":"patch"},{"specification":"Operations related to managing Project Managers (PMs) as defined by the 'task_management_pm' entity in the Prisma schema. These endpoints allow clients to list, retrieve details, create, and update Project Manager records, including fields such as email, password hash, name, deletion timestamp for soft deletes, and timestamps for creation and updates. The operations ensure consistent CRUD support on PM entities with authorization roles aligned with the roles defined in the system such as 'pm' role.","description":"Retrieve detailed information about a specific Project Manager by their unique identifier. This endpoint supports management and profile viewing use cases.\n\nSecurity considerations include restricting access to users with 'pm' role only, as the entity contains sensitive authentication information.\n\nThis operation strictly adheres to the Prisma schema for 'task_management_pm', including the 'deleted_at' soft delete field to allow for recovery and audit trails.\n\nValidation must ensure the provided ID is a valid UUID and corresponds to an existing record.\n\nErrors should be appropriately returned if the PM record is not found or access is unauthorized.","summary":"Retrieve a single Project Manager entity by unique ID","parameters":[{"name":"id","description":"Unique identifier of the target Project Manager","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested Project Manager entity","typeName":"ITaskManagementPm"},"authorizationType":null,"authorizationRole":"pm","name":"at","path":"/taskManagement/pm/taskManagement/pms/{id}","method":"get"},{"specification":"Operations related to managing Project Managers (PMs) as defined by the 'task_management_pm' entity in the Prisma schema. These endpoints allow clients to list, retrieve details, create, and update Project Manager records, including fields such as email, password hash, name, deletion timestamp for soft deletes, and timestamps for creation and updates. The operations ensure consistent CRUD support on PM entities with authorization roles aligned with the roles defined in the system such as 'pm' role.","description":"Create a new Project Manager entity in the system. The operation requires providing the email, password hash, and name fields at minimum, with optional soft delete and timestamp fields managed automatically.\n\nRole-based access control limits this operation to users with 'pm' role to prevent unauthorized account creation.\n\nInput validation must rigorously check email uniqueness and correct password hashing standards.\n\nOn successful creation, the system returns the newly created Project Manager entity with all details, excluding sensitive password hash for security.\n\nErrors must be handled gracefully for duplicate emails or invalid input without exposing sensitive details.","summary":"Create a new Project Manager entity","parameters":[],"requestBody":{"description":"Creation information for a new Project Manager","typeName":"ITaskManagementPm.ICreate"},"responseBody":{"description":"Detailed information of the newly created Project Manager entity","typeName":"ITaskManagementPm"},"authorizationType":null,"authorizationRole":"pm","name":"create","path":"/taskManagement/pm/taskManagement/pms","method":"post"},{"specification":"Operations related to managing Project Managers (PMs) as defined by the 'task_management_pm' entity in the Prisma schema. These endpoints allow clients to list, retrieve details, create, and update Project Manager records, including fields such as email, password hash, name, deletion timestamp for soft deletes, and timestamps for creation and updates. The operations ensure consistent CRUD support on PM entities with authorization roles aligned with the roles defined in the system such as 'pm' role.","description":"Update an existing Project Manager entity by ID. This operation allows modification of email, password hash, and name fields.\n\nAccess control ensures only users with 'pm' role can perform updates.\n\nInput validation checks for proper email format and password hashing consistency are required.\n\nThe soft delete field 'deleted_at' is respected to prevent updates on deleted records.\n\nThis operation returns the updated Project Manager entity for confirmation.\n\nError scenarios include attempts to update non-existent or soft deleted PM records, which must be handled with clear error messages.","summary":"Update an existing Project Manager entity","parameters":[{"name":"id","description":"Unique identifier of the target Project Manager","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for an existing Project Manager","typeName":"ITaskManagementPm.IUpdate"},"responseBody":{"description":"Detailed information of the updated Project Manager entity","typeName":"ITaskManagementPm"},"authorizationType":null,"authorizationRole":"pm","name":"update","path":"/taskManagement/pm/taskManagement/pms/{id}","method":"put"},{"specification":"This operation deletes a specific Project Manager (PM) by their unique identifier. It operates on the task_management_pm Prisma table which includes fields such as id, email, password hash, name, timestamps, and soft deletion timestamp. The deletion is a permanent removal of the PM record. The operation requires an 'id' path parameter corresponding to the PM's UUID. Authorization is assigned to 'pm' role based on available roles in the system schema.","path":"/taskManagement/pm/taskManagement/pms/{id}","method":"delete","summary":"Delete a Project Manager by ID","description":"Delete a specific Project Manager user by their UUID identifier.\n\nThis operation permanently removes the record from the database, including all associated data. Only users with the 'pm' role are authorized to perform this deletion to ensure proper access control.\n\nIf the PM record does not exist, a suitable error response is returned. No request body is required or accepted.\n\nUpon success, no response body is returned.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the Project Manager to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["pm"],"name":"erasePm","authorizationRole":"pm","authorizationType":null},{"specification":"Retrieve a paginated, filtered, and sorted list of Project Management Officers (PMOs) from the task_management_pmo table. Supports search and pagination criteria in request body matching ITaskManagementPmo.IRequest schema, returning paginated summaries under IPageITaskManagementPmo.ISummary. Authorization is granted to 'pmo' role.","path":"/taskManagement/pmo/taskManagement/pmos","method":"patch","summary":"Search filtered, paginated PMO list","description":"Search and list PMO users with filtering and pagination.\n\nSupports search criteria such as name, email, status, and pagination details passed in the request body matching ITaskManagementPmo.IRequest.\n\nThe response contains paginated summaries of PMOs conforming to IPageITaskManagementPmo.ISummary.\n\nAccess is granted only to users with 'pmo' role for secure data management.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for PMO filtering","typeName":"ITaskManagementPmo.IRequest"},"responseBody":{"description":"Paginated list of PMO summaries matching search criteria","typeName":"IPageITaskManagementPmo.ISummary"},"authorizationRoles":["pmo"],"name":"indexPmo","authorizationRole":"pmo","authorizationType":null},{"specification":"Fetch detailed information of a PMO identified by their UUID from the task_management_pmo table. Returns full entity data including email, name, created_at, updated_at, and soft deletion status. Authorization is granted to the 'pmo' role.","path":"/taskManagement/pmo/taskManagement/pmos/{id}","method":"get","summary":"Get detailed PMO information by ID","description":"Retrieve detailed information about a specific PMO user by UUID.\n\nThis operation returns the complete PMO entity information including all relevant fields.\n\nOnly users with the 'pmo' role are authorized to access this endpoint.\n\nNo request body is needed for this GET operation.","parameters":[{"name":"id","in":"path","description":"Unique identifier of the PMO to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete PMO user entity information","typeName":"ITaskManagementPmo"},"authorizationRoles":["pmo"],"name":"atPmo","authorizationRole":"pmo","authorizationType":null},{"specification":"Create a new PMO user record in the system by providing required user information such as unique email, hashed password, and name in the request body (conforming to ITaskManagementPmo.ICreate schema). Authorization is restricted to users with 'pmo' role.","path":"/taskManagement/pmo/taskManagement/pmos","method":"post","summary":"Create a new PMO user","description":"Create a new Project Management Officer (PMO) user with required details.\n\nThe request body must contain valid user data as per ITaskManagementPmo.ICreate specification including email and password_hash.\n\nOn success, the full PMO entity with timestamps and possible soft delete fields is returned.\n\nOnly users with the 'pmo' role are authorized to call this operation for security.","parameters":[],"requestBody":{"description":"PMO creation data","typeName":"ITaskManagementPmo.ICreate"},"responseBody":{"description":"Newly created PMO entity","typeName":"ITaskManagementPmo"},"authorizationRoles":["pmo"],"name":"createPmo","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation updates an existing Project Management Officer (PMO) user record in the database. It operates on the task_management_pmo Prisma model, which represents PMO users that have unique email addresses, password hashes, and name fields. The update modifies the PMO user identified by the 'id' parameter. All business logic for ensuring the user has permission to perform updates and validation of fields such as email uniqueness should be handled by the service layer. The updated entity includes fields like email, password_hash, and name, among others. This operation requires an authenticated user with the 'pmo' role to perform the update.","description":"Update the details of a specific Project Management Officer (PMO) user, identified by their unique ID.\n\nThis operation allows modification of PMO user attributes such as email, password hash, and name. It serves administrative functions where PMO user information needs to be maintained. Security is enforced to allow only authorized users with the 'pmo' role to perform updates.\n\nThe underlying database entity is task_management_pmo, stored as a UUID primary key with related fields for email and authentication data. Upon successful update, the updated PMO user's information is returned.\n\nThis operation does not allow updating soft-deleted users, nor does it override data validation rules such as email uniqueness. Validation errors or authorization failures should result in appropriate error responses.\n\nRelated operations include creating new PMO users and deleting existing ones, all of which are secured and role-based.","summary":"Update a PMO user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target PMO user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for PMO user","typeName":"ITaskManagementPmo.IUpdate"},"responseBody":{"description":"Updated PMO user information","typeName":"ITaskManagementPmo"},"authorizationRoles":["pmo"],"path":"/taskManagement/pmo/taskManagement/pmos/{id}","method":"put","name":"update","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation permanently removes a Project Management Officer (PMO) user from the system. It targets the task_management_pmo table in the database which manages PMO user records identified by a UUID primary key. Performing this operation will delete the user record corresponding to the provided 'id' path parameter. Authorization is required with the 'pmo' role to restrict access to permitted users. This operation results in permanent deletion and the data cannot be recovered. Downstream dependent data integrity and cascading deletes are handled at the database or application level.","description":"Permanently delete a specific Project Management Officer (PMO) user from the database by their unique ID.\n\nThis operation irreversibly removes the PMO user record. It is restricted to authorized users with the 'pmo' role to prevent accidental or unauthorized deletions.\n\nAny related records depending on this PMO user should be handled cautiously by the system to maintain data integrity.\n\nNo response body is returned after successful deletion.\n\nOperations related to creation and update of PMO users complement this delete operation for full lifecycle management.","summary":"Delete a PMO user by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target PMO user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["pmo"],"path":"/taskManagement/pmo/taskManagement/pmos/{id}","method":"delete","name":"erase","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves a filtered and paginated list of developer users from the task_management_developer table in the database. It includes search capabilities and sorting based on criteria provided in the request body. Developers have fields such as email, name, password hash, creation and update timestamps, and optional soft delete information. The operation supports returning developer summaries suitable for user lists with pagination metadata. Access is restricted to users with the predefined role 'developer', reflecting authenticated developers' access rights. The operation enforces data security and ensures filtered data corresponds to the search criteria.","description":"Retrieve a paginated list of developers filtered and sorted by criteria specified in the request.\n\nThis operation enables searching developers by attributes such as email and name, supports pagination and sorting, and returns summaries of developers along with metadata about the result set.\n\nAccess is authorized for authenticated users with the 'developer' role, reflecting developer access permissions.\n\nThe underlying database entity is task_management_developer, containing detailed developer information. Results exclude sensitive information like password hashes and are optimized for list display.\n\nThis supports efficient management and display of developer users in administrative or reporting interfaces.","summary":"Search and retrieve a filtered, paginated list of developers","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for developer filtering","typeName":"ITaskManagementDeveloper.IRequest"},"responseBody":{"description":"Paginated list of developer summaries matching search criteria","typeName":"IPageITaskManagementDeveloper.ISummary"},"authorizationRoles":["developer"],"path":"/taskManagement/developer/taskManagement/developers","method":"patch","name":"index","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific developer user by their unique ID from the task_management_developer table in the database. It returns all relevant information including email, name, and timestamps, excluding sensitive information such as password hashes. Access is restricted to authorized users with the 'developer' role, ensuring privacy and security of developer data. The response includes comprehensive developer details suitable for administrative or personal use.","description":"Retrieve detailed information about a developer user specified by their unique ID.\n\nThis operation returns profile details including email, name, and timestamps of the developer. Sensitive information such as password hashes is excluded for security.\n\nAccess is granted to authenticated users with role 'developer', ensuring proper authorization.\n\nThis operation corresponds directly to the task_management_developer entity in the database.\n\nIt is commonly used in user administration panels or personal profile displays.","summary":"Get detailed information about a developer by ID","parameters":[{"name":"id","in":"path","description":"Unique identifier of the target developer","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Developer information record","typeName":"ITaskManagementDeveloper"},"authorizationRoles":["developer"],"path":"/taskManagement/developer/taskManagement/developers/{id}","method":"get","name":"at","authorizationRole":"developer","authorizationType":null},{"specification":"This operation creates a new developer user account in the task_management_developer table. It requires email, password hash, and name, with optional timestamps populated automatically. The system supports soft delete with deleted_at timestamp. The API allows adding a new developer user who can log in via secure credentials and be assigned to tasks.","path":"/taskManagement/tpm/taskManagement/developers","method":"post","summary":"Create a new developer user","description":"Create a new developer user with mandatory fields including email, password_hash, and name. The system will assign a unique UUID primary key and manage created_at and updated_at timestamps automatically. This operation is restricted to authorized users who can manage developer accounts.\n\nSecurity considerations include secure password storage via hashing and unique email validation. Soft delete support via deleted_at allows safe recovery.\n\nThis operation interacts directly with the task_management_developer Prisma schema model. It does not accept or return sensitive password data except hashed. Returns the created developer entity information.\n\nErrors are returned for duplicate emails or validation failures.\n\nAuthorization roles for this endpoint are users with assignment and creation rights typically TPM, PM, or PMO roles.","parameters":[],"requestBody":{"description":"Information required to create a developer user account","typeName":"ITaskManagementDeveloper.ICreate"},"responseBody":{"description":"Details of the created developer user","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"tpm","name":"create"},{"specification":"This operation creates a new developer user account in the task_management_developer table. It requires email, password hash, and name, with optional timestamps populated automatically. The system supports soft delete with deleted_at timestamp. The API allows adding a new developer user who can log in via secure credentials and be assigned to tasks.","path":"/taskManagement/pm/taskManagement/developers","method":"post","summary":"Create a new developer user","description":"Create a new developer user with mandatory fields including email, password_hash, and name. The system will assign a unique UUID primary key and manage created_at and updated_at timestamps automatically. This operation is restricted to authorized users who can manage developer accounts.\n\nSecurity considerations include secure password storage via hashing and unique email validation. Soft delete support via deleted_at allows safe recovery.\n\nThis operation interacts directly with the task_management_developer Prisma schema model. It does not accept or return sensitive password data except hashed. Returns the created developer entity information.\n\nErrors are returned for duplicate emails or validation failures.\n\nAuthorization roles for this endpoint are users with assignment and creation rights typically TPM, PM, or PMO roles.","parameters":[],"requestBody":{"description":"Information required to create a developer user account","typeName":"ITaskManagementDeveloper.ICreate"},"responseBody":{"description":"Details of the created developer user","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"pm","name":"create"},{"specification":"This operation creates a new developer user account in the task_management_developer table. It requires email, password hash, and name, with optional timestamps populated automatically. The system supports soft delete with deleted_at timestamp. The API allows adding a new developer user who can log in via secure credentials and be assigned to tasks.","path":"/taskManagement/pmo/taskManagement/developers","method":"post","summary":"Create a new developer user","description":"Create a new developer user with mandatory fields including email, password_hash, and name. The system will assign a unique UUID primary key and manage created_at and updated_at timestamps automatically. This operation is restricted to authorized users who can manage developer accounts.\n\nSecurity considerations include secure password storage via hashing and unique email validation. Soft delete support via deleted_at allows safe recovery.\n\nThis operation interacts directly with the task_management_developer Prisma schema model. It does not accept or return sensitive password data except hashed. Returns the created developer entity information.\n\nErrors are returned for duplicate emails or validation failures.\n\nAuthorization roles for this endpoint are users with assignment and creation rights typically TPM, PM, or PMO roles.","parameters":[],"requestBody":{"description":"Information required to create a developer user account","typeName":"ITaskManagementDeveloper.ICreate"},"responseBody":{"description":"Details of the created developer user","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"pmo","name":"create"},{"specification":"This operation updates an existing developer user account in the task_management_developer table by its unique id. It allows updating email, password_hash, and name, with updated_at timestamp managed by the system. Soft deleted records are excluded from updates.\n\nThe API call requires the developer id path parameter, and update data in the request body. This enables modifications to developer user information such as contact email and credentials.","path":"/taskManagement/tpm/taskManagement/developers/{id}","method":"put","summary":"Update developer information by ID","description":"Update an existing developer by id. Changes can include email, password_hash, and name.\n\nThe system will update the updated_at timestamp upon modification. Soft deleted developers (deleted_at is set) cannot be updated.\n\nThis operation requires authentication and authorization for user management roles. It interacts with the task_management_developer Prisma schema model.\n\nErrors are returned for invalid ids, duplicate emails, or validation issues.\n\nAuthorization roles include admin users or their equivalents who manage developer accounts.","parameters":[{"name":"id","description":"Unique identifier of the developer to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated developer information","typeName":"ITaskManagementDeveloper.IUpdate"},"responseBody":{"description":"Updated developer user details","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"tpm","name":"update"},{"specification":"This operation updates an existing developer user account in the task_management_developer table by its unique id. It allows updating email, password_hash, and name, with updated_at timestamp managed by the system. Soft deleted records are excluded from updates.\n\nThe API call requires the developer id path parameter, and update data in the request body. This enables modifications to developer user information such as contact email and credentials.","path":"/taskManagement/pm/taskManagement/developers/{id}","method":"put","summary":"Update developer information by ID","description":"Update an existing developer by id. Changes can include email, password_hash, and name.\n\nThe system will update the updated_at timestamp upon modification. Soft deleted developers (deleted_at is set) cannot be updated.\n\nThis operation requires authentication and authorization for user management roles. It interacts with the task_management_developer Prisma schema model.\n\nErrors are returned for invalid ids, duplicate emails, or validation issues.\n\nAuthorization roles include admin users or their equivalents who manage developer accounts.","parameters":[{"name":"id","description":"Unique identifier of the developer to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated developer information","typeName":"ITaskManagementDeveloper.IUpdate"},"responseBody":{"description":"Updated developer user details","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"pm","name":"update"},{"specification":"This operation updates an existing developer user account in the task_management_developer table by its unique id. It allows updating email, password_hash, and name, with updated_at timestamp managed by the system. Soft deleted records are excluded from updates.\n\nThe API call requires the developer id path parameter, and update data in the request body. This enables modifications to developer user information such as contact email and credentials.","path":"/taskManagement/pmo/taskManagement/developers/{id}","method":"put","summary":"Update developer information by ID","description":"Update an existing developer by id. Changes can include email, password_hash, and name.\n\nThe system will update the updated_at timestamp upon modification. Soft deleted developers (deleted_at is set) cannot be updated.\n\nThis operation requires authentication and authorization for user management roles. It interacts with the task_management_developer Prisma schema model.\n\nErrors are returned for invalid ids, duplicate emails, or validation issues.\n\nAuthorization roles include admin users or their equivalents who manage developer accounts.","parameters":[{"name":"id","description":"Unique identifier of the developer to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated developer information","typeName":"ITaskManagementDeveloper.IUpdate"},"responseBody":{"description":"Updated developer user details","typeName":"ITaskManagementDeveloper"},"authorizationType":null,"authorizationRole":"pmo","name":"update"},{"specification":"This operation deletes an existing developer user account from the task_management_developer table by its unique id. The deletion is a soft delete, setting the deleted_at timestamp to mark the record as removed without physical deletion.\n\nThe API requires the developer id as a path parameter. Only authorized users with delete permissions can perform this operation.\n\nSoft deletion allows safe recovery and audit trails of deleted developers. The operation affects task assignment and notification relations.\n\nErrors are returned if the developer id is invalid or if the record is already deleted.","path":"/taskManagement/tpm/taskManagement/developers/{id}","method":"delete","summary":"Soft delete developer user by ID","description":"Soft delete a developer user by marking the deleted_at timestamp. The record remains in the database but is excluded from active queries.\n\nOnly authorized users can perform deletion. This operation interacts with the task_management_developer Prisma schema.\n\nErrors will occur if the developer does not exist or is already deleted.","parameters":[{"name":"id","description":"Unique identifier of the developer to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase"},{"specification":"This operation deletes an existing developer user account from the task_management_developer table by its unique id. The deletion is a soft delete, setting the deleted_at timestamp to mark the record as removed without physical deletion.\n\nThe API requires the developer id as a path parameter. Only authorized users with delete permissions can perform this operation.\n\nSoft deletion allows safe recovery and audit trails of deleted developers. The operation affects task assignment and notification relations.\n\nErrors are returned if the developer id is invalid or if the record is already deleted.","path":"/taskManagement/pm/taskManagement/developers/{id}","method":"delete","summary":"Soft delete developer user by ID","description":"Soft delete a developer user by marking the deleted_at timestamp. The record remains in the database but is excluded from active queries.\n\nOnly authorized users can perform deletion. This operation interacts with the task_management_developer Prisma schema.\n\nErrors will occur if the developer does not exist or is already deleted.","parameters":[{"name":"id","description":"Unique identifier of the developer to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase"},{"specification":"This operation deletes an existing developer user account from the task_management_developer table by its unique id. The deletion is a soft delete, setting the deleted_at timestamp to mark the record as removed without physical deletion.\n\nThe API requires the developer id as a path parameter. Only authorized users with delete permissions can perform this operation.\n\nSoft deletion allows safe recovery and audit trails of deleted developers. The operation affects task assignment and notification relations.\n\nErrors are returned if the developer id is invalid or if the record is already deleted.","path":"/taskManagement/pmo/taskManagement/developers/{id}","method":"delete","summary":"Soft delete developer user by ID","description":"Soft delete a developer user by marking the deleted_at timestamp. The record remains in the database but is excluded from active queries.\n\nOnly authorized users can perform deletion. This operation interacts with the task_management_developer Prisma schema.\n\nErrors will occur if the developer does not exist or is already deleted.","parameters":[{"name":"id","description":"Unique identifier of the developer to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/tpm/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"tpm","name":"index"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/pm/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"pm","name":"index"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/pmo/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"pmo","name":"index"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/developer/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"developer","name":"index"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/designer/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"designer","name":"index"},{"specification":"This operation lists designer users with advanced filtering, pagination, and sorting functionality over the task_management_designer table.\n\nIt supports searching by fields such as email and name, with options to paginate results for efficient retrieval in large datasets.\n\nThis API supports only authenticated users and returns paginated summary data for designers including their essential attributes for overview displays.\n\nThe task_management_designer table contains email, password hash, name, and timestamps with soft delete support.","path":"/taskManagement/qa/taskManagement/designers","method":"patch","summary":"Search and retrieve paginated list of designers","description":"Retrieve a filtered and paginated list of designer users from the system. Supports search criteria like partial matches on email and name.\n\nThe operation provides comprehensive pagination and sorting options, allowing clients to specify page size and order.\n\nAuthentication is required to access designer data. Soft deleted users are excluded from results.\n\nThis operation references the task_management_designer Prisma schema model and returns summary information optimized for list displays.\n\nErrors occur for invalid search parameters or unauthorized access.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for designer search","typeName":"ITaskManagementDesigner.IRequest"},"responseBody":{"description":"Paginated list of designer summaries matching criteria","typeName":"IPageITaskManagementDesigner.ISummary"},"authorizationType":null,"authorizationRole":"qa","name":"index"},{"specification":"This operation retrieves detailed information about a specific designer user from the task management system. It targets the task_management_designer table in the Prisma schema, which stores individual designer user information including authentication credentials and identity details. The endpoint requires a unique designer ID to fetch the corresponding record.\n\nThe operation is designed to provide all core properties of a designer user such as email, name, created and updated timestamps, and supports soft-deleted records handling. Security considerations include access restricted to authorized users who can view designer user details.\n\nThis operation supports system-managed fields such as password_hash internally and does not expose them in the response. It ensures that clients can retrieve a single designer entity reliably by its unique identifier.\n\nRelated operations include creating new designer users, updating existing ones, and deleting designers.\n\nValidation is implicit on the UUID format of the designer ID parameter and existence of the record. Error handling includes returning appropriate status codes if the designer is not found.","description":"Retrieve detailed information of a specific designer user by their unique identifier. This API endpoint accesses the task_management_designer table, which contains essential user information required for authentication and role management within the task management backend service.\n\nSecurity measures ensure that only authorized personnel, such as administrators or system managers, can view this sensitive information. The response omits sensitive fields like password hashes to maintain security.\n\nThe operation requires a valid designer ID in UUID format and returns all relevant profile data including email, name, and timestamps of creation and last update. If the designer has been soft deleted (deleted_at is set), the record may be excluded or flagged according to system policy.\n\nThis operation pairs with other CRUD endpoints for full lifecycle management of designer users.","summary":"Retrieve detailed information about a single designer user","parameters":[{"name":"id","description":"Unique identifier of the designer user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed designer user object","typeName":"ITaskManagementDesigner"},"authorizationType":null,"authorizationRole":"designer","name":"at","path":"/taskManagement/designer/taskManagement/designers/{id}","method":"get"},{"specification":"This operation creates a new designer user account within the task management backend system, writing to the task_management_designer table. It accepts all necessary user information including email, password hash, name, and timestamps. The system enforces uniqueness on email addresses to prevent duplicate accounts.\n\nThe creation process validates submitted data including email format and password hash compliance. The password is securely stored in hashed form by the system. This operation marks the new designer as active with system-managed timestamps for creation and update.\n\nSecurity roles restrict creation to administrators. The response returns the full newly created designer user record excluding sensitive information.\n\nThis operation must ensure data integrity, handle conflict errors for duplicate emails, and validate all incoming data fields as per schema constraints.","description":"Create a new designer user in the system with required fields including email, password hash, and name. The API accepts designer user information to populate the task_management_designer table and returns the created object.\n\nSafety checks verify the uniqueness of the email field and validate input formats. Only users with administrative privileges may execute this operation. The timestamps for creation and update are managed by the system.\n\nThis operation enables administrators to manage designer user lifecycle effectively and securely.","summary":"Create a new designer user account","parameters":[],"requestBody":{"description":"New designer user creation data","typeName":"ITaskManagementDesigner.ICreate"},"responseBody":{"description":"The created designer user object","typeName":"ITaskManagementDesigner"},"authorizationType":null,"authorizationRole":"designer","name":"create","path":"/taskManagement/designer/taskManagement/designers","method":"post"},{"specification":"This operation updates an existing designer user record identified by a unique designer id. It writes changes to the task_management_designer table, allowing modifications of email, password hash, name, and updated timestamp fields.\n\nAccess is restricted to administrators for security. The operation enforces validation rules on fields such as email uniqueness, format, and password hash integrity. Soft-deleted user records cannot be updated.\n\nThe response returns the updated designer user object reflecting all applied changes. It ensures consistent state and prevents unauthorized modifications.\n\nRelated operations include creating and deleting designer users for full lifecycle control.","description":"Update an existing designer user identified by the unique ID. This endpoint modifies details in the task_management_designer table, ensuring data integrity and validation.\n\nOnly authorized administrators may perform this operation. The email field must remain unique and follow proper email formatting rules. Passwords must be securely handled and stored as hashes.\n\nThe operation returns the updated designer user entity upon successful completion. Attempts to update non-existent or soft-deleted users should be rejected appropriately.","summary":"Update a designer user's information","parameters":[{"name":"id","description":"Unique identifier of the designer user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Designer user update data","typeName":"ITaskManagementDesigner.IUpdate"},"responseBody":{"description":"The updated designer user object","typeName":"ITaskManagementDesigner"},"authorizationType":null,"authorizationRole":"designer","name":"update","path":"/taskManagement/designer/taskManagement/designers/{id}","method":"put"},{"specification":"This operation permanently removes a designer user from the system database, targeting the task_management_designer table. It requires the unique designer ID as path parameter.\n\nThe operation deletes the record completely and does not support recovery or soft deletion policies. Access is limited to administrators due to the critical nature of user data removal.\n\nThis endpoint complements other CRUD operations for user lifecycle management and must perform thorough validation to confirm the existence of the target designer user before deletion. It returns no content upon success.\n\nSecurity considerations include auditing of delete actions and preventing unauthorized user removals.","description":"Delete an existing designer user by ID. This endpoint performs a hard delete on the task_management_designer record, permanently removing the user from the system.\n\nOnly users with administrative privileges can execute this operation. Attempts to delete non-existent users should result in appropriate error responses.\n\nThis operation is irreversible and should be performed with caution. It complements create, read, and update endpoints to allow full user lifecycle management.","summary":"Permanently delete a designer user","parameters":[{"name":"id","description":"Unique identifier of the designer user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"designer","name":"erase","path":"/taskManagement/designer/taskManagement/designers/{id}","method":"delete"},{"specification":"This operation provides a paginated and filtered retrieval of Quality Assurance (QA) user accounts in the taskManagement system. It operates with the task_management_qa table per the Prisma schema and supports searching by email, name, creation date, and update date, returning a paginated list of QA summaries suitable for administrative UI use.","description":"Retrieve a list of Quality Assurance (QA) user accounts with support for advanced filtering by email, name, creation timestamp, and update timestamp. The operation includes pagination parameters and sorting control to efficiently manage large data sets.\n\nOnly authorized roles such as tpm, pm, or pmo can access this data to ensure security and privacy compliance. This operation is essential for managing QA users within the task management system.\n\nThe underlying database entity is task_management_qa, which stores user authentication data, email, and metadata.\n\nError handling includes validation of filter criteria and pagination input.","summary":"List QA user accounts with filtering and pagination","parameters":[],"requestBody":{"description":"Search and pagination criteria for QA users","typeName":"ITaskManagementQa.IRequest"},"responseBody":{"description":"Paginated QA user summaries matching search criteria","typeName":"IPageITaskManagementQa.ISummary"},"authorizationType":null,"authorizationRole":"tpm","name":"index","path":"/taskManagement/tpm/taskManagement/qas","method":"patch"},{"specification":"This operation provides a paginated and filtered retrieval of Quality Assurance (QA) user accounts in the taskManagement system. It operates with the task_management_qa table per the Prisma schema and supports searching by email, name, creation date, and update date, returning a paginated list of QA summaries suitable for administrative UI use.","description":"Retrieve a list of Quality Assurance (QA) user accounts with support for advanced filtering by email, name, creation timestamp, and update timestamp. The operation includes pagination parameters and sorting control to efficiently manage large data sets.\n\nOnly authorized roles such as tpm, pm, or pmo can access this data to ensure security and privacy compliance. This operation is essential for managing QA users within the task management system.\n\nThe underlying database entity is task_management_qa, which stores user authentication data, email, and metadata.\n\nError handling includes validation of filter criteria and pagination input.","summary":"List QA user accounts with filtering and pagination","parameters":[],"requestBody":{"description":"Search and pagination criteria for QA users","typeName":"ITaskManagementQa.IRequest"},"responseBody":{"description":"Paginated QA user summaries matching search criteria","typeName":"IPageITaskManagementQa.ISummary"},"authorizationType":null,"authorizationRole":"pm","name":"index","path":"/taskManagement/pm/taskManagement/qas","method":"patch"},{"specification":"This operation provides a paginated and filtered retrieval of Quality Assurance (QA) user accounts in the taskManagement system. It operates with the task_management_qa table per the Prisma schema and supports searching by email, name, creation date, and update date, returning a paginated list of QA summaries suitable for administrative UI use.","description":"Retrieve a list of Quality Assurance (QA) user accounts with support for advanced filtering by email, name, creation timestamp, and update timestamp. The operation includes pagination parameters and sorting control to efficiently manage large data sets.\n\nOnly authorized roles such as tpm, pm, or pmo can access this data to ensure security and privacy compliance. This operation is essential for managing QA users within the task management system.\n\nThe underlying database entity is task_management_qa, which stores user authentication data, email, and metadata.\n\nError handling includes validation of filter criteria and pagination input.","summary":"List QA user accounts with filtering and pagination","parameters":[],"requestBody":{"description":"Search and pagination criteria for QA users","typeName":"ITaskManagementQa.IRequest"},"responseBody":{"description":"Paginated QA user summaries matching search criteria","typeName":"IPageITaskManagementQa.ISummary"},"authorizationType":null,"authorizationRole":"pmo","name":"index","path":"/taskManagement/pmo/taskManagement/qas","method":"patch"},{"specification":"This operation retrieves detailed information of a single Quality Assurance (QA) user by their unique identifier in the taskManagement system. It accesses the task_management_qa table defined in the Prisma schema, fetching fields such as email, name, timestamps, and soft deletion date.\n\nAccess control restricts this operation to authorized roles like tpm, pm, and pmo to respect user privacy.\n\nThe operation supports administrative review and user profile management.","description":"Retrieve detailed information about a specified QA user by their UUID. The response includes email, name, creation, update, and soft deletion timestamps.\n\nAccess is restricted to authorized project roles for privacy.\n\nValidation handles cases of missing or invalid UUIDs.","summary":"Get QA user details by UUID","parameters":[{"name":"id","description":"Unique identifier of the QA user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"tpm","name":"at","path":"/taskManagement/tpm/taskManagement/qas/{id}","method":"get"},{"specification":"This operation retrieves detailed information of a single Quality Assurance (QA) user by their unique identifier in the taskManagement system. It accesses the task_management_qa table defined in the Prisma schema, fetching fields such as email, name, timestamps, and soft deletion date.\n\nAccess control restricts this operation to authorized roles like tpm, pm, and pmo to respect user privacy.\n\nThe operation supports administrative review and user profile management.","description":"Retrieve detailed information about a specified QA user by their UUID. The response includes email, name, creation, update, and soft deletion timestamps.\n\nAccess is restricted to authorized project roles for privacy.\n\nValidation handles cases of missing or invalid UUIDs.","summary":"Get QA user details by UUID","parameters":[{"name":"id","description":"Unique identifier of the QA user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pm","name":"at","path":"/taskManagement/pm/taskManagement/qas/{id}","method":"get"},{"specification":"This operation retrieves detailed information of a single Quality Assurance (QA) user by their unique identifier in the taskManagement system. It accesses the task_management_qa table defined in the Prisma schema, fetching fields such as email, name, timestamps, and soft deletion date.\n\nAccess control restricts this operation to authorized roles like tpm, pm, and pmo to respect user privacy.\n\nThe operation supports administrative review and user profile management.","description":"Retrieve detailed information about a specified QA user by their UUID. The response includes email, name, creation, update, and soft deletion timestamps.\n\nAccess is restricted to authorized project roles for privacy.\n\nValidation handles cases of missing or invalid UUIDs.","summary":"Get QA user details by UUID","parameters":[{"name":"id","description":"Unique identifier of the QA user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pmo","name":"at","path":"/taskManagement/pmo/taskManagement/qas/{id}","method":"get"},{"specification":"This operation creates a new Quality Assurance (QA) user in the taskManagement system. The operation writes to the task_management_qa table as per Prisma schema. The input must include an email, hashed password, and user name.\n\nThe operation requires validation to ensure unique emails and valid password hashes. Creation is restricted to authorized roles such as tpm, pm, or pmo.\n\nUpon successful creation, the full user entity is returned with system-generated fields such as creation and update timestamps.","description":"Create a new Quality Assurance (QA) user account. Requires email, password hash, and name.\n\nEnsures email uniqueness and password security.\n\nRestricted to authorized personnel such as tpm, pm, or pmo roles.","summary":"Create QA user account","parameters":[],"requestBody":{"description":"QA user creation information","typeName":"ITaskManagementQa.ICreate"},"responseBody":{"description":"Created QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"tpm","name":"create","path":"/taskManagement/tpm/taskManagement/qas","method":"post"},{"specification":"This operation creates a new Quality Assurance (QA) user in the taskManagement system. The operation writes to the task_management_qa table as per Prisma schema. The input must include an email, hashed password, and user name.\n\nThe operation requires validation to ensure unique emails and valid password hashes. Creation is restricted to authorized roles such as tpm, pm, or pmo.\n\nUpon successful creation, the full user entity is returned with system-generated fields such as creation and update timestamps.","description":"Create a new Quality Assurance (QA) user account. Requires email, password hash, and name.\n\nEnsures email uniqueness and password security.\n\nRestricted to authorized personnel such as tpm, pm, or pmo roles.","summary":"Create QA user account","parameters":[],"requestBody":{"description":"QA user creation information","typeName":"ITaskManagementQa.ICreate"},"responseBody":{"description":"Created QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pm","name":"create","path":"/taskManagement/pm/taskManagement/qas","method":"post"},{"specification":"This operation creates a new Quality Assurance (QA) user in the taskManagement system. The operation writes to the task_management_qa table as per Prisma schema. The input must include an email, hashed password, and user name.\n\nThe operation requires validation to ensure unique emails and valid password hashes. Creation is restricted to authorized roles such as tpm, pm, or pmo.\n\nUpon successful creation, the full user entity is returned with system-generated fields such as creation and update timestamps.","description":"Create a new Quality Assurance (QA) user account. Requires email, password hash, and name.\n\nEnsures email uniqueness and password security.\n\nRestricted to authorized personnel such as tpm, pm, or pmo roles.","summary":"Create QA user account","parameters":[],"requestBody":{"description":"QA user creation information","typeName":"ITaskManagementQa.ICreate"},"responseBody":{"description":"Created QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pmo","name":"create","path":"/taskManagement/pmo/taskManagement/qas","method":"post"},{"specification":"This operation updates an existing Quality Assurance (QA) user identified by UUID in the taskManagement system. It updates fields such as email, password hash, and name in the task_management_qa table according to the Prisma schema.\n\nValidation ensures any updated email remains unique and password hashes conform to system rules.\n\nOnly authorized roles such as tpm, pm, or pmo can perform this update.\n\nThe updated user entity is returned on success.","description":"Update an existing QA user account identified by UUID. Allows modification of email, name, and password hash.\n\nAuthorization and validation rules apply.\n\nSupports concurrency control and error handling for invalid inputs.","summary":"Update QA user account by UUID","parameters":[{"name":"id","description":"UUID of the QA user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"QA user update payload","typeName":"ITaskManagementQa.IUpdate"},"responseBody":{"description":"Updated QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"tpm","name":"update","path":"/taskManagement/tpm/taskManagement/qas/{id}","method":"put"},{"specification":"This operation updates an existing Quality Assurance (QA) user identified by UUID in the taskManagement system. It updates fields such as email, password hash, and name in the task_management_qa table according to the Prisma schema.\n\nValidation ensures any updated email remains unique and password hashes conform to system rules.\n\nOnly authorized roles such as tpm, pm, or pmo can perform this update.\n\nThe updated user entity is returned on success.","description":"Update an existing QA user account identified by UUID. Allows modification of email, name, and password hash.\n\nAuthorization and validation rules apply.\n\nSupports concurrency control and error handling for invalid inputs.","summary":"Update QA user account by UUID","parameters":[{"name":"id","description":"UUID of the QA user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"QA user update payload","typeName":"ITaskManagementQa.IUpdate"},"responseBody":{"description":"Updated QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pm","name":"update","path":"/taskManagement/pm/taskManagement/qas/{id}","method":"put"},{"specification":"This operation updates an existing Quality Assurance (QA) user identified by UUID in the taskManagement system. It updates fields such as email, password hash, and name in the task_management_qa table according to the Prisma schema.\n\nValidation ensures any updated email remains unique and password hashes conform to system rules.\n\nOnly authorized roles such as tpm, pm, or pmo can perform this update.\n\nThe updated user entity is returned on success.","description":"Update an existing QA user account identified by UUID. Allows modification of email, name, and password hash.\n\nAuthorization and validation rules apply.\n\nSupports concurrency control and error handling for invalid inputs.","summary":"Update QA user account by UUID","parameters":[{"name":"id","description":"UUID of the QA user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"QA user update payload","typeName":"ITaskManagementQa.IUpdate"},"responseBody":{"description":"Updated QA user entity","typeName":"ITaskManagementQa"},"authorizationType":null,"authorizationRole":"pmo","name":"update","path":"/taskManagement/pmo/taskManagement/qas/{id}","method":"put"},{"specification":"This operation deletes a QA (Quality Assurance) user record identified by the given ID. It operates on the task_management_qa table, which stores QA user details including authentication data, personal information, and audit timestamps. The operation is a hard delete as the Prisma schema includes a nullable deleted_at field indicating soft delete capability; however, this operation permanently removes the QA user record from the database. Only authorized roles with delete permissions for QA users should perform this action, enforcing security and preventing unauthorized removals.","description":"This API operation permanently removes a Quality Assurance (QA) user from the system based on their unique identifier. It targets the 'task_management_qa' table, which manages comprehensive QA user data including login credentials (email, password hash) and personal metadata.\n\nSecurity is crucial as QA accounts have specific role-based access permissions for managing and updating task statuses and reporting bugs.\n\nThe operation performs a complete deletion rather than a soft delete despite the nullable deleted_at field in the schema, removing all QA user data irreversibly. It expects the caller to have appropriate administrative permissions.\n\nUpon successful execution, the QA user record identified by the path parameter 'id' is deleted permanently. If the user is not found or unauthorized, appropriate error responses should be returned.\n\nThis API complements user management endpoints for other user roles such as TPM, PM, Developer, Designer, and PMO.\n\nNo request body is necessary, and the response does not include a body.","summary":"Delete a QA user by ID from task_management_qa table permanently","parameters":[{"name":"id","description":"The unique identifier of the QA user to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["qa"],"name":"erase","path":"/taskManagement/qa/taskManagement/qas/{id}","method":"delete","authorizationRole":"qa","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/tpm/tasks","method":"patch","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/pm/tasks","method":"patch","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/pmo/tasks","method":"patch","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/developer/tasks","method":"patch","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/designer/tasks","method":"patch","authorizationRole":"designer","authorizationType":null},{"specification":"This operation retrieves a paginated and filtered list of tasks from the task_management_tasks table. It supports complex search criteria, sorting, and pagination to enable users to find tasks by title, status, priority, due date, or assignees. The operation allows users with viewing permissions to access task lists relevant to their roles, such as developers, TPMs, and PMs.\n\nThe request body accepts detailed search and pagination parameters conforming to ITaskManagementTasks.IRequest, facilitating advanced filtering scenarios.\n\nThe response returns paginated task data summaries optimized for efficient list rendering, supporting user navigation and task management workflows.","description":"Retrieve a paginated list of task entities from the system, optionally filtered and sorted according to complex criteria provided in the request body.\n\nThis operation accesses the 'task_management_tasks' table, encompassing details like title, description, status, priority, due date, creator, and project associations.\n\nUsers with respective roles such as TPM, PM, Developer, Designer, QA, and PMO can query tasks to support task tracking, assignment overview, and workload distribution.\n\nThe request accepts filters such as status, priority, assignees, and date ranges to refine results. Pagination parameters control result set size and navigation.\n\nThe response provides task summaries with essential information for listing, enabling frontend applications to display manageable task lists.\n\nThis operation integrates with other task detail endpoints for CRUD and status updates.","summary":"Complex search and paginated retrieval of task list from task_management_tasks","parameters":[],"requestBody":{"description":"Filters, pagination, and sorting parameters for task list retrieval","typeName":"ITaskManagementTasks.IRequest"},"responseBody":{"description":"Paginated task summary list matching filter criteria","typeName":"IPageITaskManagementTasks.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/qa/tasks","method":"patch","authorizationRole":"qa","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/tpm/tasks/{taskId}","method":"get","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/pm/tasks/{taskId}","method":"get","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/pmo/tasks/{taskId}","method":"get","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/developer/tasks/{taskId}","method":"get","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/designer/tasks/{taskId}","method":"get","authorizationRole":"designer","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific task identified by 'taskId' from the task_management_tasks table. It returns the full task entity including title, description, status, priority, due date, creator, and related project or board information.\n\nThe GET method fetches a single resource, enabling users to view comprehensive task details.\n\nOnly authorized users with access to the task in question can invoke this operation. The response includes complete data conforming to the ITaskManagementTask type.\n\nThis operation complements listing, creation, update, and deletion APIs for task management workflows.","description":"Fetch detailed task information by its unique identifier.\n\nThis API targets the 'task_management_tasks' database table storing task metadata including status, priority, creator reference, project and board membership, due date, title, and description.\n\nSecurity restrictions ensure that only authorized users can view sensitive task details.\n\nThe response contains the full task object conforming to the data model including all relevant fields derived from the Prisma schema for tasks.\n\nThis endpoint supports client-side task detail views, editing workflows, and history tracking via related status change and comment APIs.\n\nNo request body required; response provides detailed task data.","summary":"Retrieve single task details by taskId","parameters":[{"name":"taskId","description":"Unique identifier of the task to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/qa/tasks/{taskId}","method":"get","authorizationRole":"qa","authorizationType":null},{"specification":"This operation allows creation of a new task in the task_management_tasks table. Users with creation permissions may submit task details including title, description, creator ID, status, priority, due date, project and board associations.\n\nThe system initializes the task with status 'To Do' by default if not specified. This creation operation supports structured task management workflows, enabling users such as TPM, PM, and PMO to add new tasks for collaboration and assignment.\n\nThe request body must include all necessary creation fields according to the ITaskManagementTask.ICreate schema.\n\nThe response returns the newly created task entity, reflecting saved data from the database.\n\nThis API complements update, delete, and listing operations for complete task lifecycle management.","description":"Create a new task in the system by submitting mandatory and optional task details.\n\nThis API endpoint operates on the 'task_management_tasks' table which contains comprehensive task metadata.\n\nUsers with roles TPM, PM, PMO or equivalent can invoke this to insert new tasks with status defaulting to 'To Do'.\n\nTask data includes title, optional description, priority, due date, project/board affiliations, and creator reference.\n\nThe response returns the full task record including assigned IDs and now-persistent metadata.\n\nNo soft delete is done; newly created records are active immediately.\n\nThis operation integrates with assignment and notification services to inform relevant users.\n\nRequest body must comply with the ITaskManagementTask.ICreate interface.","summary":"Create a new task record in task_management_tasks","parameters":[],"requestBody":{"description":"Details for new task creation","typeName":"ITaskManagementTask.ICreate"},"responseBody":{"description":"Newly created task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo"],"name":"create","path":"/taskManagement/tpm/tasks","method":"post","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation allows creation of a new task in the task_management_tasks table. Users with creation permissions may submit task details including title, description, creator ID, status, priority, due date, project and board associations.\n\nThe system initializes the task with status 'To Do' by default if not specified. This creation operation supports structured task management workflows, enabling users such as TPM, PM, and PMO to add new tasks for collaboration and assignment.\n\nThe request body must include all necessary creation fields according to the ITaskManagementTask.ICreate schema.\n\nThe response returns the newly created task entity, reflecting saved data from the database.\n\nThis API complements update, delete, and listing operations for complete task lifecycle management.","description":"Create a new task in the system by submitting mandatory and optional task details.\n\nThis API endpoint operates on the 'task_management_tasks' table which contains comprehensive task metadata.\n\nUsers with roles TPM, PM, PMO or equivalent can invoke this to insert new tasks with status defaulting to 'To Do'.\n\nTask data includes title, optional description, priority, due date, project/board affiliations, and creator reference.\n\nThe response returns the full task record including assigned IDs and now-persistent metadata.\n\nNo soft delete is done; newly created records are active immediately.\n\nThis operation integrates with assignment and notification services to inform relevant users.\n\nRequest body must comply with the ITaskManagementTask.ICreate interface.","summary":"Create a new task record in task_management_tasks","parameters":[],"requestBody":{"description":"Details for new task creation","typeName":"ITaskManagementTask.ICreate"},"responseBody":{"description":"Newly created task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo"],"name":"create","path":"/taskManagement/pm/tasks","method":"post","authorizationRole":"pm","authorizationType":null},{"specification":"This operation allows creation of a new task in the task_management_tasks table. Users with creation permissions may submit task details including title, description, creator ID, status, priority, due date, project and board associations.\n\nThe system initializes the task with status 'To Do' by default if not specified. This creation operation supports structured task management workflows, enabling users such as TPM, PM, and PMO to add new tasks for collaboration and assignment.\n\nThe request body must include all necessary creation fields according to the ITaskManagementTask.ICreate schema.\n\nThe response returns the newly created task entity, reflecting saved data from the database.\n\nThis API complements update, delete, and listing operations for complete task lifecycle management.","description":"Create a new task in the system by submitting mandatory and optional task details.\n\nThis API endpoint operates on the 'task_management_tasks' table which contains comprehensive task metadata.\n\nUsers with roles TPM, PM, PMO or equivalent can invoke this to insert new tasks with status defaulting to 'To Do'.\n\nTask data includes title, optional description, priority, due date, project/board affiliations, and creator reference.\n\nThe response returns the full task record including assigned IDs and now-persistent metadata.\n\nNo soft delete is done; newly created records are active immediately.\n\nThis operation integrates with assignment and notification services to inform relevant users.\n\nRequest body must comply with the ITaskManagementTask.ICreate interface.","summary":"Create a new task record in task_management_tasks","parameters":[],"requestBody":{"description":"Details for new task creation","typeName":"ITaskManagementTask.ICreate"},"responseBody":{"description":"Newly created task entity data","typeName":"ITaskManagementTask"},"authorizationRoles":["tpm","pm","pmo"],"name":"create","path":"/taskManagement/pmo/tasks","method":"post","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation updates an existing task in the task_management_tasks table in the Prisma schema. It allows modification of the task's title, description, status, priority, due date, and association with projects and boards. The task is identified by its unique UUID (taskId) path parameter. The API expects a request body conforming to ITaskManagementTask.IUpdate, ensuring valid updates based on the schema. The system validates that the provided status_id, priority_id, and other fields correspond to existing referenced entities. The operation returns the updated task entry after successful modification.","description":"This API operation enables authorized users (roles TPM, PM, PMO) to update task details stored in the task_management_tasks table identified by the 'taskId' path parameter.\n\nUsers can update task fields such as title, description, status (linking to task_management_task_statuses via status_id), priority (linking to task_management_priorities via priority_id), due date, project_id, and board_id.\n\nThe system validates all provided references to ensure they exist and enforces business rules like non-empty title and valid date formats.\n\nErrors are returned if inputs are invalid, the task does not exist, or the user lacks appropriate permissions.\n\nThis operation complements related task creation, deletion, and assignment APIs for full task lifecycle management.\n\nThis endpoint applies a hard update and sets the updated_at timestamp accordingly.","summary":"Update an existing task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to update"}],"requestBody":{"description":"Task update information matching ITaskManagementTask.IUpdate schema.","typeName":"ITaskManagementTask.IUpdate"},"responseBody":{"description":"The updated task information conforming to ITaskManagementTask schema.","typeName":"ITaskManagementTask"},"authorizationType":null,"authorizationRole":"tpm","name":"updateTask","path":"/taskManagement/tpm/tasks/{taskId}","method":"put"},{"specification":"This operation updates an existing task in the task_management_tasks table in the Prisma schema. It allows modification of the task's title, description, status, priority, due date, and association with projects and boards. The task is identified by its unique UUID (taskId) path parameter. The API expects a request body conforming to ITaskManagementTask.IUpdate, ensuring valid updates based on the schema. The system validates that the provided status_id, priority_id, and other fields correspond to existing referenced entities. The operation returns the updated task entry after successful modification.","description":"This API operation enables authorized users (roles TPM, PM, PMO) to update task details stored in the task_management_tasks table identified by the 'taskId' path parameter.\n\nUsers can update task fields such as title, description, status (linking to task_management_task_statuses via status_id), priority (linking to task_management_priorities via priority_id), due date, project_id, and board_id.\n\nThe system validates all provided references to ensure they exist and enforces business rules like non-empty title and valid date formats.\n\nErrors are returned if inputs are invalid, the task does not exist, or the user lacks appropriate permissions.\n\nThis operation complements related task creation, deletion, and assignment APIs for full task lifecycle management.\n\nThis endpoint applies a hard update and sets the updated_at timestamp accordingly.","summary":"Update an existing task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to update"}],"requestBody":{"description":"Task update information matching ITaskManagementTask.IUpdate schema.","typeName":"ITaskManagementTask.IUpdate"},"responseBody":{"description":"The updated task information conforming to ITaskManagementTask schema.","typeName":"ITaskManagementTask"},"authorizationType":null,"authorizationRole":"pm","name":"updateTask","path":"/taskManagement/pm/tasks/{taskId}","method":"put"},{"specification":"This operation updates an existing task in the task_management_tasks table in the Prisma schema. It allows modification of the task's title, description, status, priority, due date, and association with projects and boards. The task is identified by its unique UUID (taskId) path parameter. The API expects a request body conforming to ITaskManagementTask.IUpdate, ensuring valid updates based on the schema. The system validates that the provided status_id, priority_id, and other fields correspond to existing referenced entities. The operation returns the updated task entry after successful modification.","description":"This API operation enables authorized users (roles TPM, PM, PMO) to update task details stored in the task_management_tasks table identified by the 'taskId' path parameter.\n\nUsers can update task fields such as title, description, status (linking to task_management_task_statuses via status_id), priority (linking to task_management_priorities via priority_id), due date, project_id, and board_id.\n\nThe system validates all provided references to ensure they exist and enforces business rules like non-empty title and valid date formats.\n\nErrors are returned if inputs are invalid, the task does not exist, or the user lacks appropriate permissions.\n\nThis operation complements related task creation, deletion, and assignment APIs for full task lifecycle management.\n\nThis endpoint applies a hard update and sets the updated_at timestamp accordingly.","summary":"Update an existing task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to update"}],"requestBody":{"description":"Task update information matching ITaskManagementTask.IUpdate schema.","typeName":"ITaskManagementTask.IUpdate"},"responseBody":{"description":"The updated task information conforming to ITaskManagementTask schema.","typeName":"ITaskManagementTask"},"authorizationType":null,"authorizationRole":"pmo","name":"updateTask","path":"/taskManagement/pmo/tasks/{taskId}","method":"put"},{"specification":"This operation deletes a task from the task_management_tasks table by its unique identifier (taskId). This permanently removes the task record, as the schema supports soft deletion with the deleted_at field which should be managed accordingly in business logic. This is a hard delete API endpoint for authorized users who have permission to remove tasks.","description":"This API operation permanently deletes the task identified by the 'taskId' parameter from the task_management_tasks database table.\n\nUsers with delete permissions (roles TPM, PM, PMO) can perform this operation.\n\nAlthough the schema has a soft delete column 'deleted_at', this operation performs a hard delete removing the record entirely.\n\nAdequate error handling manages cases of nonexistent tasks or unauthorized deletion attempts.\n\nNo request body is required.\n\nResponse body is empty indicating successful deletion.","summary":"Delete a task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"eraseTask","path":"/taskManagement/tpm/tasks/{taskId}","method":"delete"},{"specification":"This operation deletes a task from the task_management_tasks table by its unique identifier (taskId). This permanently removes the task record, as the schema supports soft deletion with the deleted_at field which should be managed accordingly in business logic. This is a hard delete API endpoint for authorized users who have permission to remove tasks.","description":"This API operation permanently deletes the task identified by the 'taskId' parameter from the task_management_tasks database table.\n\nUsers with delete permissions (roles TPM, PM, PMO) can perform this operation.\n\nAlthough the schema has a soft delete column 'deleted_at', this operation performs a hard delete removing the record entirely.\n\nAdequate error handling manages cases of nonexistent tasks or unauthorized deletion attempts.\n\nNo request body is required.\n\nResponse body is empty indicating successful deletion.","summary":"Delete a task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"eraseTask","path":"/taskManagement/pm/tasks/{taskId}","method":"delete"},{"specification":"This operation deletes a task from the task_management_tasks table by its unique identifier (taskId). This permanently removes the task record, as the schema supports soft deletion with the deleted_at field which should be managed accordingly in business logic. This is a hard delete API endpoint for authorized users who have permission to remove tasks.","description":"This API operation permanently deletes the task identified by the 'taskId' parameter from the task_management_tasks database table.\n\nUsers with delete permissions (roles TPM, PM, PMO) can perform this operation.\n\nAlthough the schema has a soft delete column 'deleted_at', this operation performs a hard delete removing the record entirely.\n\nAdequate error handling manages cases of nonexistent tasks or unauthorized deletion attempts.\n\nNo request body is required.\n\nResponse body is empty indicating successful deletion.","summary":"Delete a task by taskId from the task_management_tasks table.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"The UUID of the task to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"eraseTask","path":"/taskManagement/pmo/tasks/{taskId}","method":"delete"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"tpm","name":"indexTaskAssignments","path":"/taskManagement/tpm/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"pm","name":"indexTaskAssignments","path":"/taskManagement/pm/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"pmo","name":"indexTaskAssignments","path":"/taskManagement/pmo/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"developer","name":"indexTaskAssignments","path":"/taskManagement/developer/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"designer","name":"indexTaskAssignments","path":"/taskManagement/designer/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves the list of task assignments for a specific task as defined in the task_management_task_assignments table. It uses the task UUID (taskId) to identify the task and returns an array of assignments, each referencing an assignee user, typically TPM type users, with assignment timestamp and IDs. Filtering, sorting, or pagination are not specified in this operation but might be extended later.","description":"This API operation retrieves all assignments related to a specific task using the task's unique identifier 'taskId'.\n\nEach assignment links a user (typically a TPM role user) to the task, including the assignment timestamp.\n\nThis read-only operation supports roles TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nThe response contains a list of task assignments details.\n\nThe operation may return errors if the task does not exist or access is unauthorized.","summary":"Retrieve the list of assignments for a given task identified by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target task"}],"requestBody":null,"responseBody":{"description":"List of task assignment details conforming to ITaskManagementTaskAssignmentArray","typeName":"ITaskManagementTaskAssignmentArray"},"authorizationType":null,"authorizationRole":"qa","name":"indexTaskAssignments","path":"/taskManagement/qa/tasks/{taskId}/assignments","method":"patch"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"tpm","name":"atTaskAssignment","path":"/taskManagement/tpm/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pm","name":"atTaskAssignment","path":"/taskManagement/pm/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pmo","name":"atTaskAssignment","path":"/taskManagement/pmo/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"developer","name":"atTaskAssignment","path":"/taskManagement/developer/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"designer","name":"atTaskAssignment","path":"/taskManagement/designer/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation retrieves a specific task assignment by its unique identifier (assignmentId) related to a specific task (taskId). It fetches details from the task_management_task_assignments table, referencing the assignee user and the timestamp of assignment. Authorization requires appropriate user roles.","description":"This API operation fetches the detailed information of a single task assignment identified by 'assignmentId' under the parent task identified by 'taskId'.\n\nIt returns assignment data including the assignee ID and the assigned timestamp.\n\nAllowed roles include TPM, PM, PMO, Developer, Designer, and QA.\n\nNo request body is required.\n\nErrors are returned if the assignment or parent task does not exist or access is unauthorized.\n\nUseful for audit trails and individual assignment inspection.","summary":"Retrieve a specific assignment by assignmentId for a task by taskId.","parameters":[{"name":"taskId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the parent task"},{"name":"assignmentId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target assignment"}],"requestBody":null,"responseBody":{"description":"Task assignment details conforming to ITaskManagementTaskAssignment","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"qa","name":"atTaskAssignment","path":"/taskManagement/qa/tasks/{taskId}/assignments/{assignmentId}","method":"get"},{"specification":"This operation creates a new task assignment for a specified task in the 'task_management_task_assignments' table of the Prisma schema. It allows authorized users (roles: \"tpm\", \"pm\", \"pmo\") to assign a task to a user by specifying the target taskId in the path and the assignee_id in the request body. The assignment record includes an assignment timestamp which will be set by the system upon creation. This operation supports managing multi-user assignments per task and is critical for task delegation and responsibility tracking.","description":"This API endpoint allows users with appropriate roles (TPM, PM, PMO) to create a new assignment of a user to a task. The assignment represents that the user is responsible for or working on the task.\n\nThe operation requires the path parameter 'taskId' which identifies the task to assign. The request body includes at minimum the 'assigneeId', which must reference a valid user in the system with a role capable of being assigned (likely from TPM, PM, Developer, Designer, QA roles as per business rules).\n\nThe API ensures that the assignment record is created with an accurate timestamp reflecting when the assignment was made. This operation contributes to task management by enabling clear ownership and collaborative work on tasks.\n\nSecurity considerations:\n- Only authorized roles can perform assignment creation.\n- The system validates that the assigneeId is valid and user exists.\n\nThis operation corresponds to the 'task_management_task_assignments' Prisma DB table.\n\nError handling:\n- Returns errors if taskId is invalid or not found.\n- Returns errors if assigneeId is missing or invalid.\n\nSuccessful operation returns the created assignment information.","summary":"Create a new assignment for a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment creation data including assignee ID","typeName":"ITaskManagementTaskAssignment.ICreate"},"responseBody":{"description":"Created task assignment data","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"tpm","path":"/taskManagement/tpm/tasks/{taskId}/assignments","method":"post","name":"createAssignment"},{"specification":"This operation creates a new task assignment for a specified task in the 'task_management_task_assignments' table of the Prisma schema. It allows authorized users (roles: \"tpm\", \"pm\", \"pmo\") to assign a task to a user by specifying the target taskId in the path and the assignee_id in the request body. The assignment record includes an assignment timestamp which will be set by the system upon creation. This operation supports managing multi-user assignments per task and is critical for task delegation and responsibility tracking.","description":"This API endpoint allows users with appropriate roles (TPM, PM, PMO) to create a new assignment of a user to a task. The assignment represents that the user is responsible for or working on the task.\n\nThe operation requires the path parameter 'taskId' which identifies the task to assign. The request body includes at minimum the 'assigneeId', which must reference a valid user in the system with a role capable of being assigned (likely from TPM, PM, Developer, Designer, QA roles as per business rules).\n\nThe API ensures that the assignment record is created with an accurate timestamp reflecting when the assignment was made. This operation contributes to task management by enabling clear ownership and collaborative work on tasks.\n\nSecurity considerations:\n- Only authorized roles can perform assignment creation.\n- The system validates that the assigneeId is valid and user exists.\n\nThis operation corresponds to the 'task_management_task_assignments' Prisma DB table.\n\nError handling:\n- Returns errors if taskId is invalid or not found.\n- Returns errors if assigneeId is missing or invalid.\n\nSuccessful operation returns the created assignment information.","summary":"Create a new assignment for a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment creation data including assignee ID","typeName":"ITaskManagementTaskAssignment.ICreate"},"responseBody":{"description":"Created task assignment data","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pm","path":"/taskManagement/pm/tasks/{taskId}/assignments","method":"post","name":"createAssignment"},{"specification":"This operation creates a new task assignment for a specified task in the 'task_management_task_assignments' table of the Prisma schema. It allows authorized users (roles: \"tpm\", \"pm\", \"pmo\") to assign a task to a user by specifying the target taskId in the path and the assignee_id in the request body. The assignment record includes an assignment timestamp which will be set by the system upon creation. This operation supports managing multi-user assignments per task and is critical for task delegation and responsibility tracking.","description":"This API endpoint allows users with appropriate roles (TPM, PM, PMO) to create a new assignment of a user to a task. The assignment represents that the user is responsible for or working on the task.\n\nThe operation requires the path parameter 'taskId' which identifies the task to assign. The request body includes at minimum the 'assigneeId', which must reference a valid user in the system with a role capable of being assigned (likely from TPM, PM, Developer, Designer, QA roles as per business rules).\n\nThe API ensures that the assignment record is created with an accurate timestamp reflecting when the assignment was made. This operation contributes to task management by enabling clear ownership and collaborative work on tasks.\n\nSecurity considerations:\n- Only authorized roles can perform assignment creation.\n- The system validates that the assigneeId is valid and user exists.\n\nThis operation corresponds to the 'task_management_task_assignments' Prisma DB table.\n\nError handling:\n- Returns errors if taskId is invalid or not found.\n- Returns errors if assigneeId is missing or invalid.\n\nSuccessful operation returns the created assignment information.","summary":"Create a new assignment for a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment creation data including assignee ID","typeName":"ITaskManagementTaskAssignment.ICreate"},"responseBody":{"description":"Created task assignment data","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pmo","path":"/taskManagement/pmo/tasks/{taskId}/assignments","method":"post","name":"createAssignment"},{"specification":"This operation updates an existing task assignment record in the 'task_management_task_assignments' table. It allows authorized users to modify the assignment details of a specified assignment (assignmentId) under a given task (taskId).","description":"This API endpoint allows authorized roles to update a specific task assignment for a task. The path parameters 'taskId' and 'assignmentId' specify the target assignment record.\n\nThe request body includes fields to update, typically allowing changing the assignee or updating timestamps. This supports managing task ownership changes or corrections.\n\nSecurity checks ensure only authorized users can update assignments.\n\nError handling:\n- Returns error if taskId or assignmentId not found.\n- Returns error if update data is invalid.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo response body data is required on success, but updated assignment data may be returned depending on implementation.","summary":"Update an existing task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment update data","typeName":"ITaskManagementTaskAssignment.IUpdate"},"responseBody":{"description":"Updated task assignment information","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"tpm","path":"/taskManagement/tpm/tasks/{taskId}/assignments/{assignmentId}","method":"put","name":"updateAssignment"},{"specification":"This operation updates an existing task assignment record in the 'task_management_task_assignments' table. It allows authorized users to modify the assignment details of a specified assignment (assignmentId) under a given task (taskId).","description":"This API endpoint allows authorized roles to update a specific task assignment for a task. The path parameters 'taskId' and 'assignmentId' specify the target assignment record.\n\nThe request body includes fields to update, typically allowing changing the assignee or updating timestamps. This supports managing task ownership changes or corrections.\n\nSecurity checks ensure only authorized users can update assignments.\n\nError handling:\n- Returns error if taskId or assignmentId not found.\n- Returns error if update data is invalid.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo response body data is required on success, but updated assignment data may be returned depending on implementation.","summary":"Update an existing task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment update data","typeName":"ITaskManagementTaskAssignment.IUpdate"},"responseBody":{"description":"Updated task assignment information","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pm","path":"/taskManagement/pm/tasks/{taskId}/assignments/{assignmentId}","method":"put","name":"updateAssignment"},{"specification":"This operation updates an existing task assignment record in the 'task_management_task_assignments' table. It allows authorized users to modify the assignment details of a specified assignment (assignmentId) under a given task (taskId).","description":"This API endpoint allows authorized roles to update a specific task assignment for a task. The path parameters 'taskId' and 'assignmentId' specify the target assignment record.\n\nThe request body includes fields to update, typically allowing changing the assignee or updating timestamps. This supports managing task ownership changes or corrections.\n\nSecurity checks ensure only authorized users can update assignments.\n\nError handling:\n- Returns error if taskId or assignmentId not found.\n- Returns error if update data is invalid.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo response body data is required on success, but updated assignment data may be returned depending on implementation.","summary":"Update an existing task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment update data","typeName":"ITaskManagementTaskAssignment.IUpdate"},"responseBody":{"description":"Updated task assignment information","typeName":"ITaskManagementTaskAssignment"},"authorizationType":null,"authorizationRole":"pmo","path":"/taskManagement/pmo/tasks/{taskId}/assignments/{assignmentId}","method":"put","name":"updateAssignment"},{"specification":"This operation deletes a specific task assignment record from the 'task_management_task_assignments' table, identified by assignmentId under a given taskId. This allows authorized users to revoke or remove a user's assignment from a task.","description":"This API endpoint enables authorized roles to delete a task assignment by specifying both the taskId and the assignmentId in the path. Upon deletion, the assignment record is removed from the database, effectively unassigning the user from the task.\n\nSecurity considerations:\n- Only users with appropriate roles can perform deletion.\n\nError handling:\n- Returns errors if taskId or assignmentId are invalid or not found.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo request body or response body is required for this operation.","summary":"Delete a task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","path":"/taskManagement/tpm/tasks/{taskId}/assignments/{assignmentId}","method":"delete","name":"eraseAssignment"},{"specification":"This operation deletes a specific task assignment record from the 'task_management_task_assignments' table, identified by assignmentId under a given taskId. This allows authorized users to revoke or remove a user's assignment from a task.","description":"This API endpoint enables authorized roles to delete a task assignment by specifying both the taskId and the assignmentId in the path. Upon deletion, the assignment record is removed from the database, effectively unassigning the user from the task.\n\nSecurity considerations:\n- Only users with appropriate roles can perform deletion.\n\nError handling:\n- Returns errors if taskId or assignmentId are invalid or not found.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo request body or response body is required for this operation.","summary":"Delete a task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","path":"/taskManagement/pm/tasks/{taskId}/assignments/{assignmentId}","method":"delete","name":"eraseAssignment"},{"specification":"This operation deletes a specific task assignment record from the 'task_management_task_assignments' table, identified by assignmentId under a given taskId. This allows authorized users to revoke or remove a user's assignment from a task.","description":"This API endpoint enables authorized roles to delete a task assignment by specifying both the taskId and the assignmentId in the path. Upon deletion, the assignment record is removed from the database, effectively unassigning the user from the task.\n\nSecurity considerations:\n- Only users with appropriate roles can perform deletion.\n\nError handling:\n- Returns errors if taskId or assignmentId are invalid or not found.\n\nThis corresponds to the 'task_management_task_assignments' table in the Prisma schema.\n\nNo request body or response body is required for this operation.","summary":"Delete a task assignment","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"assignmentId","description":"Unique identifier of the task assignment to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","path":"/taskManagement/pmo/tasks/{taskId}/assignments/{assignmentId}","method":"delete","name":"eraseAssignment"},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/tpm/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pm/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pmo/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/developer/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/designer/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"designer","authorizationType":null},{"specification":"This operation retrieves a paginated list of comments for a given task, supporting advanced search, pagination, and sorting capabilities. It operates on the 'task_management_task_comments' table in the Prisma schema. The operation requires the taskId path parameter to filter comments belonging to the specified task.","description":"Retrieve a paginated list of comments belonging to a specific task. This operation supports filtering, sorting, and pagination to efficiently access comment data.\n\nRequest body contains filtering and pagination parameters.\n\nSecurity considerations ensure only authorized users can view task comments.\n\nResponse includes paginated comment summary data.\n\nAssociated with 'task_management_task_comments' table in Prisma schema.\n\nError handling includes validation of taskId and request parameters.\n\nThis operation is designed as PATCH with request body for complex query parameters.","summary":"List and search comments on a task","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for task comments filtering","typeName":"ITaskManagementTaskComment.IRequest"},"responseBody":{"description":"Paginated list of task comment summary information matching search criteria","typeName":"IPageITaskManagementTaskComment.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/qa/tasks/{taskId}/comments","method":"patch","name":"indexComments","authorizationRole":"qa","authorizationType":null},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/tpm/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"tpm","name":"at"},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/pm/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pm","name":"at"},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/pmo/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pmo","name":"at"},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/developer/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"developer","name":"at"},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/designer/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"designer","name":"at"},{"specification":"This operation retrieves a specific comment associated with a task identified by taskId and commentId. It fetches the comment details from the task_management_task_comments table, including comment body, commenter reference, timestamps, and soft deletion status. This operation is read-only and supports authorized users who have permission to view task comments.","path":"/taskManagement/qa/tasks/{taskId}/comments/{commentId}","method":"get","summary":"Get details of a specific comment on a task","description":"Retrieve a specific comment on a task using the unique identifiers for both the task and the comment.\n\nThis operation allows clients to fetch detailed information about the comment including the content, the author (commenter), and timestamps. It strictly retrieves only existing, non-deleted comments.\n\nAuthorization is required and typically granted to authenticated users who have viewing rights on the task.\n\nThis operation corresponds to fetching data from the task_management_task_comments table in the database.\n\nError cases include not found if the comment or task does not exist or access is unauthorized.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment information associated with the task","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"qa","name":"at"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/tpm/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"tpm","name":"create"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/pm/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pm","name":"create"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/pmo/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pmo","name":"create"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/developer/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"developer","name":"create"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/designer/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"designer","name":"create"},{"specification":"This operation creates a new comment on a specific task in the task_management_task_comments table. The comment includes content, commenter ID, and is associated with the specified task. The system automatically handles timestamps for creation and updates. This operation is accessible to authorized users with commenting privileges.\n\nThe request body requires the comment content and commenter reference, respecting all validation such as non-empty comment text. The response returns the newly created comment with full details.\n\nNotifications may be triggered by the system upon comment creation, but are handled separately from this API.\n\nErrors may include unauthorized access, invalid input, or references to non-existent tasks or users.","path":"/taskManagement/qa/tasks/{taskId}/comments","method":"post","summary":"Create a new comment for a task","description":"Create a new comment on a task by supplying the comment content and linking the comment to a commenter.\n\nOnly authenticated and authorized users may perform this operation.\n\nThe taskId path parameter associates the comment with the correct task.\n\nThe request body must include the comment body and commenter ID.\n\nSuccessful creation results in the return of the new comment with metadata.\n\nErrors are returned for invalid input or unauthorized actions.\n\nThis endpoint complements other comment management operations such as update, retrieve, and delete.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new task comment","typeName":"ITaskManagementTaskComment.ICreate"},"responseBody":{"description":"The created task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"qa","name":"create"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/tpm/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"tpm","name":"update"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/pm/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pm","name":"update"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/pmo/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"pmo","name":"update"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/developer/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"developer","name":"update"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/designer/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"designer","name":"update"},{"specification":"This operation updates an existing comment on a task. It operates on the task_management_task_comments table and allows modifications to the comment content and timing metadata. Only authorized users, such as the original commenter or users with appropriate permissions, may perform this update. The operation validates ownership and comment-task association.\n\nThe request body contains the comment data to update. The response returns the updated comment details after successful modification.\n\nThis operation fits within the comment lifecycle operations alongside create, retrieve, and delete.\n\nErrors can arise from unauthorized attempts, invalid input, or non-existent resource references.","path":"/taskManagement/qa/tasks/{taskId}/comments/{commentId}","method":"put","summary":"Update a specific comment on a task","description":"Update a specific comment on a task.\n\nThis operation requires the unique taskId and commentId path parameters.\n\nOnly users authorized to edit the comment may perform this operation.\n\nThe request body must contain the fields to update, typically the comment body.\n\nSuccessful updates return the updated comment data.\n\nErrors for unauthorized access or invalid data will be returned accordingly.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update an existing task comment","typeName":"ITaskManagementTaskComment.IUpdate"},"responseBody":{"description":"The updated task comment with details","typeName":"ITaskManagementTaskComment"},"authorizationType":null,"authorizationRole":"qa","name":"update"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/tpm/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/pm/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/pmo/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/developer/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"erase"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/designer/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"designer","name":"erase"},{"specification":"This operation performs a soft delete on a comment associated with a task. It sets the deleted_at timestamp on the corresponding record in the task_management_task_comments table. Only authorized users such as the original commenter or administrators may perform deletion.\n\nThe operation requires taskId and commentId path parameters to uniquely identify the comment. After deletion, the comment is omitted from regular queries.\n\nThis complements other comment lifecycle operations like create, update, and delete.\n\nErrors include unauthorized access or non-existent resources.","path":"/taskManagement/qa/tasks/{taskId}/comments/{commentId}","method":"delete","summary":"Delete (soft delete) a comment on a task","description":"Soft delete a comment on a task by marking its deleted_at field with the current timestamp.\n\nOnly authorized users can perform this operation.\n\nOnce deleted, the comment is excluded from active queries.\n\nErrors will be returned for unauthorized or invalid requests.\n\nThis operation completes the standard set of comment management endpoints.","parameters":[{"name":"taskId","in":"path","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"commentId","in":"path","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"qa","name":"erase"},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/tpm/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pm/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pmo/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/developer/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"developer","authorizationType":null},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/designer/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"designer","authorizationType":null},{"specification":"This operation retrieves a paginated list of status change records associated with a specified task. It uses the task_management_task_status_changes table from the Prisma schema and requires the task ID as a path parameter to filter the status changes. This endpoint is designed to give users an audit trail of task status progressions including timestamps and optional comments. Pagination and filtering parameters are supported in the request body to enable efficient querying and result management.","description":"Retrieve a filtered and paginated list of status change history entries for the given task.\n\nThis method allows authorized users to track the full lifecycle of task status changes by returning detailed audit trail data including new status, change timestamps, and optional admin comments.\n\nSecurity is enforced to allow only permitted roles to access task status histories. The operation uses path parameter taskId to identify the specific task and uses the ITaskManagementTaskStatusChange.IRequest requestBody schema for filter and pagination controls.\n\nThis operation returns a paginated response of task status change records referencing the task_management_task_status_changes table.","summary":"Paginated list retrieval of task status changes by task ID","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body for searching and pagination of task status changes","typeName":"ITaskManagementTaskStatusChange.IRequest"},"responseBody":{"description":"Paginated task status change list","typeName":"IPageITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/qa/tasks/{taskId}/statusChanges","method":"patch","name":"index","authorizationRole":"qa","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/tpm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"tpm","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"pm","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pmo/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"pmo","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/developer/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"developer","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/designer/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"designer","authorizationType":null},{"specification":"Retrieves detailed information for a specific status change associated with a task. Uses task_management_task_status_changes table. Requires task ID and statusChange ID path parameters to retrieve the precise record.\nAuthorized users can audit status progression including timestamps and optional comments. Security enforced by role-based access.","description":"Retrieve detailed information of a single status change record within a task identified by taskId and statusChangeId.\n\nUseful for auditing specific status changes with all associated metadata.\n\nOnly accessible by authorized users with appropriate role permissions.\n\nReferences the task_management_task_status_changes schema.\n","summary":"Retrieve details of a specific task status change","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed task status change entity","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/qa/tasks/{taskId}/statusChanges/{statusChangeId}","method":"get","name":"at","authorizationRole":"qa","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/tpm/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"tpm","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pm/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"pm","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pmo/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"pmo","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/developer/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"developer","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/designer/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"designer","authorizationType":null},{"specification":"Creates a new status change entry for the specified task. Writes to the task_management_task_status_changes table. The task ID is a path parameter used to identify the task whose status is being changed.\nOnly authorized roles can create status changes. The input payload must provide a valid new status ID (referencing allowed statuses) and an optional comment.\nBusiness rules enforce correctness and audit logging of changes in the system.","description":"Create a new task status change record for a given task. This operation logs a status transition in the task's lifecycle.\n\nUser must provide the new status ID and optionally a comment describing the change.\n\nOperation validates input and ensures only authorized roles perform status changes.\n\nReferences task_management_task_status_changes table and requires taskId path parameter.\n","summary":"Create a new task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for creating a task status change","typeName":"ITaskManagementTaskStatusChange.ICreate"},"responseBody":{"description":"Created task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/qa/tasks/{taskId}/statusChanges","method":"post","name":"create","authorizationRole":"qa","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/tpm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"tpm","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"pm","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/pmo/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"pmo","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/developer/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"developer","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/designer/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"designer","authorizationType":null},{"specification":"Updates an existing task status change record. Uses the task_management_task_status_changes table. Requires taskId and statusChangeId path parameters to identify the record.\nAuthorized users can update the status and comment fields according to business rules. Validation ensures status IDs are valid.\nThis supports maintaining accurate audit histories and correcting prior entries.","description":"Update fields of an existing task status change record specified by taskId and statusChangeId.\n\nAllows authorized updates to status transition data and comments.\n\nEnsures data integrity and adherence to validation rules on status values.\n\nTied to the task_management_task_status_changes table schema.","summary":"Update task status change record","parameters":[{"name":"taskId","description":"Unique identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Unique identifier of the task status change","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload for updating a task status change","typeName":"ITaskManagementTaskStatusChange.IUpdate"},"responseBody":{"description":"Updated task status change record","typeName":"ITaskManagementTaskStatusChange"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"path":"/taskManagement/qa/tasks/{taskId}/statusChanges/{statusChangeId}","method":"put","name":"update","authorizationRole":"qa","authorizationType":null},{"specification":"This operation deletes a specific task status change record identified by statusChangeId associated with a task identified by taskId in the task_management_task_status_changes table. It allows users with appropriate permissions to remove historical status change records from the system permanently, ensuring the audit trail can be managed and cleaned up when necessary. The operation strictly requires valid UUIDs for taskId and statusChangeId path parameters. Permanent deletion is performed, removing the record completely without soft delete.","description":"Allows authorized users to permanently delete a task status change entry from the task_management_task_status_changes table. This deletes the specific record of a status change event for a task.\n\nSecurity and permissions enforcement ensures only users with relevant roles can perform deletions.\n\nThe operation requires the taskId and statusChangeId path parameters, both expected as valid UUID strings.\n\nDeleting this record removes the audited history of a status change, so it should be used carefully. The system performs hard delete with no recovery.\n\nUse this operation when cleaning up old or incorrect status change records is necessary.\n\nNo request body is needed. No response body is returned upon success.","summary":"Delete a specific task status change record","parameters":[{"name":"taskId","description":"Identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Identifier of the status change to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"eraseStatusChange","path":"/taskManagement/tpm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"delete"},{"specification":"This operation deletes a specific task status change record identified by statusChangeId associated with a task identified by taskId in the task_management_task_status_changes table. It allows users with appropriate permissions to remove historical status change records from the system permanently, ensuring the audit trail can be managed and cleaned up when necessary. The operation strictly requires valid UUIDs for taskId and statusChangeId path parameters. Permanent deletion is performed, removing the record completely without soft delete.","description":"Allows authorized users to permanently delete a task status change entry from the task_management_task_status_changes table. This deletes the specific record of a status change event for a task.\n\nSecurity and permissions enforcement ensures only users with relevant roles can perform deletions.\n\nThe operation requires the taskId and statusChangeId path parameters, both expected as valid UUID strings.\n\nDeleting this record removes the audited history of a status change, so it should be used carefully. The system performs hard delete with no recovery.\n\nUse this operation when cleaning up old or incorrect status change records is necessary.\n\nNo request body is needed. No response body is returned upon success.","summary":"Delete a specific task status change record","parameters":[{"name":"taskId","description":"Identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Identifier of the status change to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"eraseStatusChange","path":"/taskManagement/pm/tasks/{taskId}/statusChanges/{statusChangeId}","method":"delete"},{"specification":"This operation deletes a specific task status change record identified by statusChangeId associated with a task identified by taskId in the task_management_task_status_changes table. It allows users with appropriate permissions to remove historical status change records from the system permanently, ensuring the audit trail can be managed and cleaned up when necessary. The operation strictly requires valid UUIDs for taskId and statusChangeId path parameters. Permanent deletion is performed, removing the record completely without soft delete.","description":"Allows authorized users to permanently delete a task status change entry from the task_management_task_status_changes table. This deletes the specific record of a status change event for a task.\n\nSecurity and permissions enforcement ensures only users with relevant roles can perform deletions.\n\nThe operation requires the taskId and statusChangeId path parameters, both expected as valid UUID strings.\n\nDeleting this record removes the audited history of a status change, so it should be used carefully. The system performs hard delete with no recovery.\n\nUse this operation when cleaning up old or incorrect status change records is necessary.\n\nNo request body is needed. No response body is returned upon success.","summary":"Delete a specific task status change record","parameters":[{"name":"taskId","description":"Identifier of the target task","schema":{"type":"string","format":"uuid"}},{"name":"statusChangeId","description":"Identifier of the status change to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"eraseStatusChange","path":"/taskManagement/pmo/tasks/{taskId}/statusChanges/{statusChangeId}","method":"delete"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"tpm","name":"index","path":"/taskManagement/tpm/projects","method":"patch"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"pm","name":"index","path":"/taskManagement/pm/projects","method":"patch"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"pmo","name":"index","path":"/taskManagement/pmo/projects","method":"patch"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"developer","name":"index","path":"/taskManagement/developer/projects","method":"patch"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"designer","name":"index","path":"/taskManagement/designer/projects","method":"patch"},{"specification":"This operation retrieves a paginated list of project entities from the task_management_projects table. It supports filtering, searching, and sorting capabilities allowing users to query projects based on various criteria such as code, name, and owner. The response returns project summaries suitable for list displays. This operation supports pagination to handle large data sets efficiently.\n\nUsers with any role can access this endpoint, with role-based filtering expected to be handled in the business logic.","description":"Retrieve a paginated list of projects supporting advanced filtering, sorting, and pagination.\n\nThis operation enables browsing and searching projects with criteria like code, name, and owner information.\n\nFilters and pagination parameters are included in the request body.\n\nResponse returns summarized information for each project.\n\nAccess is allowed to all authenticated users. Pagination helps to manage large result sets.\n\nNo path parameters.\n\nThis operation corresponds to the task_management_projects Prisma table.","summary":"Search and retrieve a filtered, paginated list of projects","parameters":[],"requestBody":{"description":"Pagination, filters, and search criteria for projects","typeName":"ITaskManagementProject.IRequest"},"responseBody":{"description":"Paginated list of project summaries matching search criteria","typeName":"IPageITaskManagementProject.ISummary"},"authorizationType":null,"authorizationRole":"qa","name":"index","path":"/taskManagement/qa/projects","method":"patch"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"tpm","name":"at","path":"/taskManagement/tpm/projects/{projectId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"pm","name":"at","path":"/taskManagement/pm/projects/{projectId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"pmo","name":"at","path":"/taskManagement/pmo/projects/{projectId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/taskManagement/developer/projects/{projectId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"designer","name":"at","path":"/taskManagement/designer/projects/{projectId}","method":"get"},{"specification":"This operation retrieves detailed information of a specific project identified by projectId from the task_management_projects table. It returns all attributes including owner information, project code, name, description, and timestamps. Access control ensures only authorized users can retrieve project details.\n\nPath parameter projectId must be a valid UUID string.\n\nThis operation supports viewing detailed project data for management and display purposes.","description":"Retrieve full details of a single project entity.\n\nThis operation fetches the project data identified by projectId.\n\nIncludes all properties such as owner, code, name, description, creation, and update timestamps.\n\nOnly authenticated and authorized users may access this detailed information.\n\nPath parameter `projectId` is required and must be a valid UUID.\n\nResponse returns the detailed project entity.\n\nRelated operations for listing projects and managing projects complement this.\n\nThis is based on the task_management_projects Prisma table.","summary":"Retrieve detailed project information by ID","parameters":[{"name":"projectId","description":"Unique identifier of the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"qa","name":"at","path":"/taskManagement/qa/projects/{projectId}","method":"get"},{"specification":"This operation creates a new project record in the task_management_projects table. Authorized users can specify project attributes such as owner reference, unique project code, name, description, and timestamps.\n\nThe request body must include all necessary data for creating the project, abiding by validation rules (e.g., unique code, valid ownerId).\n\nThe response returns the newly created full project entity.\n\nAccess restricted to users with appropriate role permissions (e.g., tpm, pm, pmo).","description":"Create a new project entity in the system.\n\nRequest body must supply project details including ownerId, code, name, optional description.\n\nThe system validates all inputs and persists the new project.\n\nOn success, returns the detailed project entity including generated ID and timestamps.\n\nOnly users with creation permissions may perform this operation.\n\nThis operation is based on the task_management_projects Prisma table.","summary":"Create a new project","parameters":[],"requestBody":{"description":"Project creation data","typeName":"ITaskManagementProject.ICreate"},"responseBody":{"description":"Newly created detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"tpm","name":"create","path":"/taskManagement/tpm/projects","method":"post"},{"specification":"This operation creates a new project record in the task_management_projects table. Authorized users can specify project attributes such as owner reference, unique project code, name, description, and timestamps.\n\nThe request body must include all necessary data for creating the project, abiding by validation rules (e.g., unique code, valid ownerId).\n\nThe response returns the newly created full project entity.\n\nAccess restricted to users with appropriate role permissions (e.g., tpm, pm, pmo).","description":"Create a new project entity in the system.\n\nRequest body must supply project details including ownerId, code, name, optional description.\n\nThe system validates all inputs and persists the new project.\n\nOn success, returns the detailed project entity including generated ID and timestamps.\n\nOnly users with creation permissions may perform this operation.\n\nThis operation is based on the task_management_projects Prisma table.","summary":"Create a new project","parameters":[],"requestBody":{"description":"Project creation data","typeName":"ITaskManagementProject.ICreate"},"responseBody":{"description":"Newly created detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"pm","name":"create","path":"/taskManagement/pm/projects","method":"post"},{"specification":"This operation creates a new project record in the task_management_projects table. Authorized users can specify project attributes such as owner reference, unique project code, name, description, and timestamps.\n\nThe request body must include all necessary data for creating the project, abiding by validation rules (e.g., unique code, valid ownerId).\n\nThe response returns the newly created full project entity.\n\nAccess restricted to users with appropriate role permissions (e.g., tpm, pm, pmo).","description":"Create a new project entity in the system.\n\nRequest body must supply project details including ownerId, code, name, optional description.\n\nThe system validates all inputs and persists the new project.\n\nOn success, returns the detailed project entity including generated ID and timestamps.\n\nOnly users with creation permissions may perform this operation.\n\nThis operation is based on the task_management_projects Prisma table.","summary":"Create a new project","parameters":[],"requestBody":{"description":"Project creation data","typeName":"ITaskManagementProject.ICreate"},"responseBody":{"description":"Newly created detailed project entity","typeName":"ITaskManagementProject"},"authorizationType":null,"authorizationRole":"pmo","name":"create","path":"/taskManagement/pmo/projects","method":"post"},{"specification":"This operation updates an existing project record in the 'task_management_projects' Prisma database table. It allows authorized users to modify project details such as code, name, description, and ownership. The operation verifies that the project ID parameter corresponds to an existing record, applies all valid changes, and records the update timestamp. The project entity includes fields for owner_id (a TPM user), code, name, and description, with soft deletion support through the deleted_at timestamp. Users with appropriate roles like TPM, PM, or PMO are authorized to perform updates. This PUT method requires the projectId path parameter representing the unique project identifier (UUID). The request body must conform to the ITaskManagementProject.IUpdate schema which defines all updatable fields. The response returns the full updated project record as per ITaskManagementProject schema in the OpenAPI component definitions.","description":"Update an existing project identified by the projectId path parameter. This operation allows modifying project details such as the owner (a TPM user), unique code, descriptive name, and optional description.\n\nThe operation ensures data integrity by checking the projectId exists and validates fields according to the schema. It updates the record's timestamps for last modification.\n\nAuthorization is restricted to users with roles TPM, PM, or PMO, who manage project resources effectively.\n\nThis operation is associated with the task_management_projects table in the Prisma schema, which defines projects including ownership, codes, and audit timestamps with soft delete capability.\n\nThe request body must provide fields conforming to the ITaskManagementProject.IUpdate type, ensuring valid data types and value constraints.\n\nThe response returns the complete project information after the update.\n\nNo data related to soft deletion is modified here; to delete a project, use the dedicated erase operation.","summary":"Update a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Project update data","typeName":"ITaskManagementProject.IUpdate"},"responseBody":{"description":"Updated project information","typeName":"ITaskManagementProject"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/tpm/projects/{projectId}","method":"put","name":"updateProject","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation updates an existing project record in the 'task_management_projects' Prisma database table. It allows authorized users to modify project details such as code, name, description, and ownership. The operation verifies that the project ID parameter corresponds to an existing record, applies all valid changes, and records the update timestamp. The project entity includes fields for owner_id (a TPM user), code, name, and description, with soft deletion support through the deleted_at timestamp. Users with appropriate roles like TPM, PM, or PMO are authorized to perform updates. This PUT method requires the projectId path parameter representing the unique project identifier (UUID). The request body must conform to the ITaskManagementProject.IUpdate schema which defines all updatable fields. The response returns the full updated project record as per ITaskManagementProject schema in the OpenAPI component definitions.","description":"Update an existing project identified by the projectId path parameter. This operation allows modifying project details such as the owner (a TPM user), unique code, descriptive name, and optional description.\n\nThe operation ensures data integrity by checking the projectId exists and validates fields according to the schema. It updates the record's timestamps for last modification.\n\nAuthorization is restricted to users with roles TPM, PM, or PMO, who manage project resources effectively.\n\nThis operation is associated with the task_management_projects table in the Prisma schema, which defines projects including ownership, codes, and audit timestamps with soft delete capability.\n\nThe request body must provide fields conforming to the ITaskManagementProject.IUpdate type, ensuring valid data types and value constraints.\n\nThe response returns the complete project information after the update.\n\nNo data related to soft deletion is modified here; to delete a project, use the dedicated erase operation.","summary":"Update a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Project update data","typeName":"ITaskManagementProject.IUpdate"},"responseBody":{"description":"Updated project information","typeName":"ITaskManagementProject"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pm/projects/{projectId}","method":"put","name":"updateProject","authorizationRole":"pm","authorizationType":null},{"specification":"This operation updates an existing project record in the 'task_management_projects' Prisma database table. It allows authorized users to modify project details such as code, name, description, and ownership. The operation verifies that the project ID parameter corresponds to an existing record, applies all valid changes, and records the update timestamp. The project entity includes fields for owner_id (a TPM user), code, name, and description, with soft deletion support through the deleted_at timestamp. Users with appropriate roles like TPM, PM, or PMO are authorized to perform updates. This PUT method requires the projectId path parameter representing the unique project identifier (UUID). The request body must conform to the ITaskManagementProject.IUpdate schema which defines all updatable fields. The response returns the full updated project record as per ITaskManagementProject schema in the OpenAPI component definitions.","description":"Update an existing project identified by the projectId path parameter. This operation allows modifying project details such as the owner (a TPM user), unique code, descriptive name, and optional description.\n\nThe operation ensures data integrity by checking the projectId exists and validates fields according to the schema. It updates the record's timestamps for last modification.\n\nAuthorization is restricted to users with roles TPM, PM, or PMO, who manage project resources effectively.\n\nThis operation is associated with the task_management_projects table in the Prisma schema, which defines projects including ownership, codes, and audit timestamps with soft delete capability.\n\nThe request body must provide fields conforming to the ITaskManagementProject.IUpdate type, ensuring valid data types and value constraints.\n\nThe response returns the complete project information after the update.\n\nNo data related to soft deletion is modified here; to delete a project, use the dedicated erase operation.","summary":"Update a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Project update data","typeName":"ITaskManagementProject.IUpdate"},"responseBody":{"description":"Updated project information","typeName":"ITaskManagementProject"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pmo/projects/{projectId}","method":"put","name":"updateProject","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation deletes an existing project entity in the 'task_management_projects' database by its unique identifier. It performs a soft delete by setting the deleted_at timestamp if applicable, or physically deletes the record if soft delete is not implemented. The operation requires the projectId path parameter representing the target project. Authorized roles include TPM, PM, and PMO. No request body is needed for this DELETE method. Upon success, the resource is permanently or logically removed and no response body is returned.","description":"Permanently remove the project record identified by projectId from the database, or mark it as deleted if soft delete is implemented.\n\nOnly authorized roles TPM, PM, and PMO may perform this operation.\n\nThis operation maps to the task_management_projects Prisma schema table.\n\nDeleting a project removes all associated boards and tasks implicitly due to cascade rules.\n\nOnce deleted, the project cannot be retrieved.\n\nNo request body is required for this operation.\n\nResponse contains no content on success.\n\nEnsure callers confirm intent before invoking this operation as it is irreversible.","summary":"Delete a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/tpm/projects/{projectId}","method":"delete","name":"eraseProject","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation deletes an existing project entity in the 'task_management_projects' database by its unique identifier. It performs a soft delete by setting the deleted_at timestamp if applicable, or physically deletes the record if soft delete is not implemented. The operation requires the projectId path parameter representing the target project. Authorized roles include TPM, PM, and PMO. No request body is needed for this DELETE method. Upon success, the resource is permanently or logically removed and no response body is returned.","description":"Permanently remove the project record identified by projectId from the database, or mark it as deleted if soft delete is implemented.\n\nOnly authorized roles TPM, PM, and PMO may perform this operation.\n\nThis operation maps to the task_management_projects Prisma schema table.\n\nDeleting a project removes all associated boards and tasks implicitly due to cascade rules.\n\nOnce deleted, the project cannot be retrieved.\n\nNo request body is required for this operation.\n\nResponse contains no content on success.\n\nEnsure callers confirm intent before invoking this operation as it is irreversible.","summary":"Delete a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pm/projects/{projectId}","method":"delete","name":"eraseProject","authorizationRole":"pm","authorizationType":null},{"specification":"This operation deletes an existing project entity in the 'task_management_projects' database by its unique identifier. It performs a soft delete by setting the deleted_at timestamp if applicable, or physically deletes the record if soft delete is not implemented. The operation requires the projectId path parameter representing the target project. Authorized roles include TPM, PM, and PMO. No request body is needed for this DELETE method. Upon success, the resource is permanently or logically removed and no response body is returned.","description":"Permanently remove the project record identified by projectId from the database, or mark it as deleted if soft delete is implemented.\n\nOnly authorized roles TPM, PM, and PMO may perform this operation.\n\nThis operation maps to the task_management_projects Prisma schema table.\n\nDeleting a project removes all associated boards and tasks implicitly due to cascade rules.\n\nOnce deleted, the project cannot be retrieved.\n\nNo request body is required for this operation.\n\nResponse contains no content on success.\n\nEnsure callers confirm intent before invoking this operation as it is irreversible.","summary":"Delete a specific project by projectId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pmo/projects/{projectId}","method":"delete","name":"eraseProject","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves a paginated list of boards associated with the given projectId. Boards are logical containers grouping tasks within a project. The operation supports filtering, pagination, and sorting criteria passed through the request body conforming to ITaskManagementBoard.IRequest schema. It returns a paginated response of board summaries in IPageITaskManagementBoard.ISummary format. Only authorized roles including TPM, PM, and PMO can access this endpoint. Boards data relate to the task_management_boards schema, which hold project associations, ownership, unique codes per project, descriptions, and soft deletion handling.","description":"Retrieve a paginated list of boards belonging to the project identified by projectId.\n\nThis endpoint supports complex filters and sorting (e.g., by creation date, name) using the request body.\n\nAuthorization is restricted to TPM, PM, and PMO roles, who manage project boards.\n\nEach board record includes project and owner references, descriptive metadata, and audit timestamps.\n\nThis operation leverages the task_management_boards table with relationships to projects and TPM owners.\n\nThe response returns a paginated collection of board summary objects for efficient listing.\n\nNo direct modification happens; it's a read-only operation providing project board overview.","summary":"List boards under a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Board filtering and pagination parameters","typeName":"ITaskManagementBoard.IRequest"},"responseBody":{"description":"Paginated list of board summaries","typeName":"IPageITaskManagementBoard.ISummary"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/tpm/projects/{projectId}/boards","method":"patch","name":"indexBoardsInProject","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves a paginated list of boards associated with the given projectId. Boards are logical containers grouping tasks within a project. The operation supports filtering, pagination, and sorting criteria passed through the request body conforming to ITaskManagementBoard.IRequest schema. It returns a paginated response of board summaries in IPageITaskManagementBoard.ISummary format. Only authorized roles including TPM, PM, and PMO can access this endpoint. Boards data relate to the task_management_boards schema, which hold project associations, ownership, unique codes per project, descriptions, and soft deletion handling.","description":"Retrieve a paginated list of boards belonging to the project identified by projectId.\n\nThis endpoint supports complex filters and sorting (e.g., by creation date, name) using the request body.\n\nAuthorization is restricted to TPM, PM, and PMO roles, who manage project boards.\n\nEach board record includes project and owner references, descriptive metadata, and audit timestamps.\n\nThis operation leverages the task_management_boards table with relationships to projects and TPM owners.\n\nThe response returns a paginated collection of board summary objects for efficient listing.\n\nNo direct modification happens; it's a read-only operation providing project board overview.","summary":"List boards under a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Board filtering and pagination parameters","typeName":"ITaskManagementBoard.IRequest"},"responseBody":{"description":"Paginated list of board summaries","typeName":"IPageITaskManagementBoard.ISummary"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pm/projects/{projectId}/boards","method":"patch","name":"indexBoardsInProject","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves a paginated list of boards associated with the given projectId. Boards are logical containers grouping tasks within a project. The operation supports filtering, pagination, and sorting criteria passed through the request body conforming to ITaskManagementBoard.IRequest schema. It returns a paginated response of board summaries in IPageITaskManagementBoard.ISummary format. Only authorized roles including TPM, PM, and PMO can access this endpoint. Boards data relate to the task_management_boards schema, which hold project associations, ownership, unique codes per project, descriptions, and soft deletion handling.","description":"Retrieve a paginated list of boards belonging to the project identified by projectId.\n\nThis endpoint supports complex filters and sorting (e.g., by creation date, name) using the request body.\n\nAuthorization is restricted to TPM, PM, and PMO roles, who manage project boards.\n\nEach board record includes project and owner references, descriptive metadata, and audit timestamps.\n\nThis operation leverages the task_management_boards table with relationships to projects and TPM owners.\n\nThe response returns a paginated collection of board summary objects for efficient listing.\n\nNo direct modification happens; it's a read-only operation providing project board overview.","summary":"List boards under a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":{"description":"Board filtering and pagination parameters","typeName":"ITaskManagementBoard.IRequest"},"responseBody":{"description":"Paginated list of board summaries","typeName":"IPageITaskManagementBoard.ISummary"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pmo/projects/{projectId}/boards","method":"patch","name":"indexBoardsInProject","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation retrieves details of a specific board under a project by projectId and boardId path parameters. Boards group tasks within projects and have unique codes, owners, and descriptive metadata. Authorized users with roles TPM, PM, or PMO may access this GET endpoint. The operation returns detailed board information conforming to ITaskManagementBoard schema. It corresponds to the 'task_management_boards' table in the Prisma schema, with relationships to projects and owners, timestamps, and optional soft deletion status. This read operation aids users in viewing board information for management or display purposes.","description":"Get details of a specific board identified by boardId under the project identified by projectId.\n\nThis operation is restricted to users with TPM, PM, or PMO roles.\n\nThe board entity includes references to its owning project and owner user, along with metadata like name, code, description, and temporal audit fields.\n\nSoft deletion status is reflected but does not affect retrieval unless filtered.\n\nThis operation returns comprehensive details for UI display or management.\n\nThe request requires both projectId and boardId path parameters.\n\nThe response contains a full board schema object as defined in the Prisma schema.","summary":"Retrieve detail of a board by projectId and boardId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"boardId","description":"Unique identifier of the target board","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed board information","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/tpm/projects/{projectId}/boards/{boardId}","method":"get","name":"atBoardInProject","authorizationRole":"tpm","authorizationType":null},{"specification":"This operation retrieves details of a specific board under a project by projectId and boardId path parameters. Boards group tasks within projects and have unique codes, owners, and descriptive metadata. Authorized users with roles TPM, PM, or PMO may access this GET endpoint. The operation returns detailed board information conforming to ITaskManagementBoard schema. It corresponds to the 'task_management_boards' table in the Prisma schema, with relationships to projects and owners, timestamps, and optional soft deletion status. This read operation aids users in viewing board information for management or display purposes.","description":"Get details of a specific board identified by boardId under the project identified by projectId.\n\nThis operation is restricted to users with TPM, PM, or PMO roles.\n\nThe board entity includes references to its owning project and owner user, along with metadata like name, code, description, and temporal audit fields.\n\nSoft deletion status is reflected but does not affect retrieval unless filtered.\n\nThis operation returns comprehensive details for UI display or management.\n\nThe request requires both projectId and boardId path parameters.\n\nThe response contains a full board schema object as defined in the Prisma schema.","summary":"Retrieve detail of a board by projectId and boardId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"boardId","description":"Unique identifier of the target board","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed board information","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pm/projects/{projectId}/boards/{boardId}","method":"get","name":"atBoardInProject","authorizationRole":"pm","authorizationType":null},{"specification":"This operation retrieves details of a specific board under a project by projectId and boardId path parameters. Boards group tasks within projects and have unique codes, owners, and descriptive metadata. Authorized users with roles TPM, PM, or PMO may access this GET endpoint. The operation returns detailed board information conforming to ITaskManagementBoard schema. It corresponds to the 'task_management_boards' table in the Prisma schema, with relationships to projects and owners, timestamps, and optional soft deletion status. This read operation aids users in viewing board information for management or display purposes.","description":"Get details of a specific board identified by boardId under the project identified by projectId.\n\nThis operation is restricted to users with TPM, PM, or PMO roles.\n\nThe board entity includes references to its owning project and owner user, along with metadata like name, code, description, and temporal audit fields.\n\nSoft deletion status is reflected but does not affect retrieval unless filtered.\n\nThis operation returns comprehensive details for UI display or management.\n\nThe request requires both projectId and boardId path parameters.\n\nThe response contains a full board schema object as defined in the Prisma schema.","summary":"Retrieve detail of a board by projectId and boardId","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"},"in":"path"},{"name":"boardId","description":"Unique identifier of the target board","schema":{"type":"string","format":"uuid"},"in":"path"}],"requestBody":null,"responseBody":{"description":"Detailed board information","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm","pmo"],"path":"/taskManagement/pmo/projects/{projectId}/boards/{boardId}","method":"get","name":"atBoardInProject","authorizationRole":"pmo","authorizationType":null},{"specification":"This operation creates a new Board under a specific Project, as defined in the task_management_boards table of the Prisma database schema. The API accepts board-specific details such as project association, owner reference, code, name, and optional description. The board is intended to logically group tasks within a project, supporting task organization and management. Validation includes ensuring uniqueness of the board code within the project, existence of the referenced project and owner, and adherence to field data types. This supports business functionality for TPM or PM roles to create boards for organizing tasks effectively.","description":"This endpoint allows authenticated users with the role of TPM or PM to create a new Board within a specified Project. Boards are logical containers for tasks allowing better project task management.\n\nThe user must supply essential details including a unique board code, name, and optionally a descriptive text to elaborate the board's purpose.\n\nThe system validates that the provided projectId exists and that the owner is correctly assigned. Upon successful creation, the board is persisted with creation and update timestamps for auditability.\n\nSecurity constraints ensure that only users with proper permissions can perform this operation.\n\nThe created Board entity will reflect relationships to the Project and its owner as defined in the task_management_boards table within the Prisma schema, enabling hierarchical project-task organization.","path":"/taskManagement/tpm/projects/{projectId}/boards","method":"post","summary":"Create a new board in a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"}],"requestBody":{"description":"Board creation payload including project association, owner, code, and descriptive details","typeName":"ITaskManagementBoard.ICreate"},"responseBody":{"description":"Newly created board with full details","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm"],"authorizationRole":"tpm","authorizationType":null,"name":"create"},{"specification":"This operation creates a new Board under a specific Project, as defined in the task_management_boards table of the Prisma database schema. The API accepts board-specific details such as project association, owner reference, code, name, and optional description. The board is intended to logically group tasks within a project, supporting task organization and management. Validation includes ensuring uniqueness of the board code within the project, existence of the referenced project and owner, and adherence to field data types. This supports business functionality for TPM or PM roles to create boards for organizing tasks effectively.","description":"This endpoint allows authenticated users with the role of TPM or PM to create a new Board within a specified Project. Boards are logical containers for tasks allowing better project task management.\n\nThe user must supply essential details including a unique board code, name, and optionally a descriptive text to elaborate the board's purpose.\n\nThe system validates that the provided projectId exists and that the owner is correctly assigned. Upon successful creation, the board is persisted with creation and update timestamps for auditability.\n\nSecurity constraints ensure that only users with proper permissions can perform this operation.\n\nThe created Board entity will reflect relationships to the Project and its owner as defined in the task_management_boards table within the Prisma schema, enabling hierarchical project-task organization.","path":"/taskManagement/pm/projects/{projectId}/boards","method":"post","summary":"Create a new board in a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"}],"requestBody":{"description":"Board creation payload including project association, owner, code, and descriptive details","typeName":"ITaskManagementBoard.ICreate"},"responseBody":{"description":"Newly created board with full details","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm"],"authorizationRole":"pm","authorizationType":null,"name":"create"},{"specification":"This operation updates an existing Board entity within a Project as defined in the task_management_boards table. It modifies board properties including name, description, and other updatable fields. Validation enforces uniqueness of codes, confirms project and board existence, and checks user authorization. The operation supports business roles TPM and PM to maintain board information consistent and up to date.","description":"This endpoint permits TPM or PM role users to update details of an existing Board identified by its boardId within a specified projectId. Updates include board name, description, and other allowed fields.\n\nAccess control ensures only authorized users can perform this update.\n\nThe operation maintains relationships and integrity as per the task_management_boards schema, including cascading updates and audit timestamps.\n\nProper validation is applied to ensure data correctness and uniqueness constraints are respected.\n\nSuccessful execution returns the updated board entity with current attribute values.","path":"/taskManagement/tpm/projects/{projectId}/boards/{boardId}","method":"put","summary":"Update an existing board within a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"},{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the board to update"}],"requestBody":{"description":"Board update payload with fields to be modified","typeName":"ITaskManagementBoard.IUpdate"},"responseBody":{"description":"Updated board entity after modification","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm"],"authorizationRole":"tpm","authorizationType":null,"name":"update"},{"specification":"This operation updates an existing Board entity within a Project as defined in the task_management_boards table. It modifies board properties including name, description, and other updatable fields. Validation enforces uniqueness of codes, confirms project and board existence, and checks user authorization. The operation supports business roles TPM and PM to maintain board information consistent and up to date.","description":"This endpoint permits TPM or PM role users to update details of an existing Board identified by its boardId within a specified projectId. Updates include board name, description, and other allowed fields.\n\nAccess control ensures only authorized users can perform this update.\n\nThe operation maintains relationships and integrity as per the task_management_boards schema, including cascading updates and audit timestamps.\n\nProper validation is applied to ensure data correctness and uniqueness constraints are respected.\n\nSuccessful execution returns the updated board entity with current attribute values.","path":"/taskManagement/pm/projects/{projectId}/boards/{boardId}","method":"put","summary":"Update an existing board within a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"},{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the board to update"}],"requestBody":{"description":"Board update payload with fields to be modified","typeName":"ITaskManagementBoard.IUpdate"},"responseBody":{"description":"Updated board entity after modification","typeName":"ITaskManagementBoard"},"authorizationRoles":["tpm","pm"],"authorizationRole":"pm","authorizationType":null,"name":"update"},{"specification":"This operation deletes a Board entity identified by boardId under a specified projectId from the task_management_boards table. If the soft delete field deleted_at exists, the API performs a soft delete by setting the deleted_at timestamp. Otherwise, it performs a hard delete, permanently removing the record. This functionality supports TPM and PM roles to maintain project and board integrity and cleanup.","description":"Allows TPM or PM users to delete a board within a specific project.\n\nThe board is either soft deleted by setting deleted_at timestamp or hard deleted depending on the database schema.\n\nSecurity controls restrict this action to authorized users only.\n\nDeletion cascades or constraints are managed according to relational mappings in the Prisma schema.\n\nNo response body is returned upon successful deletion, conforming to RESTful standards.","path":"/taskManagement/tpm/projects/{projectId}/boards/{boardId}","method":"delete","summary":"Delete a board from a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"},{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the board to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm","pm"],"authorizationRole":"tpm","authorizationType":null,"name":"erase"},{"specification":"This operation deletes a Board entity identified by boardId under a specified projectId from the task_management_boards table. If the soft delete field deleted_at exists, the API performs a soft delete by setting the deleted_at timestamp. Otherwise, it performs a hard delete, permanently removing the record. This functionality supports TPM and PM roles to maintain project and board integrity and cleanup.","description":"Allows TPM or PM users to delete a board within a specific project.\n\nThe board is either soft deleted by setting deleted_at timestamp or hard deleted depending on the database schema.\n\nSecurity controls restrict this action to authorized users only.\n\nDeletion cascades or constraints are managed according to relational mappings in the Prisma schema.\n\nNo response body is returned upon successful deletion, conforming to RESTful standards.","path":"/taskManagement/pm/projects/{projectId}/boards/{boardId}","method":"delete","summary":"Delete a board from a project","parameters":[{"name":"projectId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target project"},{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the board to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm","pm"],"authorizationRole":"pm","authorizationType":null,"name":"erase"},{"specification":"This operation retrieves a paginated list of members associated with a specified Board identified by boardId. It is based on the task_management_board_members table in the Prisma schema and supports filtering, sorting, and pagination parameters. This API endpoint allows TPM and PMO roles to view and manage board membership comprehensively.","description":"Retrieves a list of members for a specific board identified by boardId.\n\nSupports pagination, filtering, and sorting through the request body parameters.\n\nOnly users with TPM or PMO roles can access this data, ensuring secure and role-appropriate data disclosure.\n\nReturned data includes member details as per the task_management_board_members schema entity,\nfacilitating task assignment and board membership management.","path":"/taskManagement/tpm/boards/{boardId}/members","method":"patch","summary":"Retrieve paginated list of board members","parameters":[{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target board"}],"requestBody":{"description":"Criteria for searching and paginating board members","typeName":"ITaskManagementBoardMember.IRequest"},"responseBody":{"description":"Paginated board membership data matching criteria","typeName":"IPageITaskManagementBoardMember.ISummary"},"authorizationRoles":["tpm","pmo"],"authorizationRole":"tpm","authorizationType":null,"name":"index"},{"specification":"This operation retrieves a paginated list of members associated with a specified Board identified by boardId. It is based on the task_management_board_members table in the Prisma schema and supports filtering, sorting, and pagination parameters. This API endpoint allows TPM and PMO roles to view and manage board membership comprehensively.","description":"Retrieves a list of members for a specific board identified by boardId.\n\nSupports pagination, filtering, and sorting through the request body parameters.\n\nOnly users with TPM or PMO roles can access this data, ensuring secure and role-appropriate data disclosure.\n\nReturned data includes member details as per the task_management_board_members schema entity,\nfacilitating task assignment and board membership management.","path":"/taskManagement/pmo/boards/{boardId}/members","method":"patch","summary":"Retrieve paginated list of board members","parameters":[{"name":"boardId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target board"}],"requestBody":{"description":"Criteria for searching and paginating board members","typeName":"ITaskManagementBoardMember.IRequest"},"responseBody":{"description":"Paginated board membership data matching criteria","typeName":"IPageITaskManagementBoardMember.ISummary"},"authorizationRoles":["tpm","pmo"],"authorizationRole":"pmo","authorizationType":null,"name":"index"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"tpm","name":"at","path":"/taskManagement/tpm/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pm","name":"at","path":"/taskManagement/pm/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pmo","name":"at","path":"/taskManagement/pmo/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"developer","name":"at","path":"/taskManagement/developer/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"designer","name":"at","path":"/taskManagement/designer/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation manages membership records within boards in the Task Management system, facilitating user membership assignment, update, retrieval, and removal. It operates on the task_management_board_members table, which connects users (tpm users) to boards with associated timestamps for auditability. This allows the system to maintain and control memberships of users to specific boards. The API supports CRUD operations with validation of board and user identifiers, and respects soft delete semantics through deleted_at timestamps for membership lifecycle management.","description":"This API operation retrieves detailed information about a specific member of a board in the task management system. The board and member are identified by their unique UUIDs.\n\nUsers having valid authentication and appropriate role permissions like tpm, pm, pmo, developer, designer, or qa can fetch membership details for the specified memberId within the given boardId.\n\nThe operation maps to the task_management_board_members table in the Prisma schema, involving fields such as boardId (foreign key to boards), userId (member user), and creation/update timestamps. Soft deletion is handled by filtering out memberships with non-null deleted_at timestamps.\n\nValidation ensures both IDs are valid UUID strings and represent existing entities.\n\nErrors include not found if membership does not exist or is soft deleted, and unauthorized if requester lacks permission.","summary":"Retrieve details about a specific board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board member membership information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"qa","name":"at","path":"/taskManagement/qa/boards/{boardId}/members/{memberId}","method":"get"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"tpm","name":"create","path":"/taskManagement/tpm/boards/{boardId}/members","method":"post"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pm","name":"create","path":"/taskManagement/pm/boards/{boardId}/members","method":"post"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pmo","name":"create","path":"/taskManagement/pmo/boards/{boardId}/members","method":"post"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"developer","name":"create","path":"/taskManagement/developer/boards/{boardId}/members","method":"post"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"designer","name":"create","path":"/taskManagement/designer/boards/{boardId}/members","method":"post"},{"specification":"This operation creates a new membership record for a user joining a specified board within the Task Management system. It operates on the task_management_board_members table, which manages associations between users and boards, including creation timestamps for auditing purposes.\n\nWhen a valid userId and boardId are provided, a new membership record is created with timestamps set. The operation requires verification of user existence and board validity.\n\nThe creation API validates all required fields and ensures the user is not already a member before creation. It returns the newly created membership details.\n\nSupports role-based access for users authorized to add members to boards.","description":"This API operation creates a new member association to a board, allowing the addition of a user as a member to a specific board identified by boardId.\n\nThe request body must include userId, representing the user to be added as a member.\n\nUpon successful creation, the API returns the full membership record including board and user references and timestamps.\n\nAuthorized roles such as tpm, pm, pmo, developer, designer, and qa can perform this operation.\n\nThe operation directly manipulates the task_management_board_members table, ensuring data integrity and audit compliance.","summary":"Create a new board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information of the new board member","typeName":"ITaskManagementBoardMember.ICreate"},"responseBody":{"description":"The newly created board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"qa","name":"create","path":"/taskManagement/qa/boards/{boardId}/members","method":"post"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"tpm","name":"update","path":"/taskManagement/tpm/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pm","name":"update","path":"/taskManagement/pm/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"pmo","name":"update","path":"/taskManagement/pmo/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"developer","name":"update","path":"/taskManagement/developer/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"designer","name":"update","path":"/taskManagement/designer/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation updates an existing board member's record within the Task Management system. It operates on the task_management_board_members table, modifying membership data for a given member user associated with a board.\n\nThe update mechanism requires the boardId and memberId as path parameters and a request body providing updated membership details.\n\nBusiness rules ensure the record exists, belongs to the specified board, and complies with data integrity. The operation returns the updated membership entity.\n\nRole-based permissions restrict update access to authorized users managing board memberships such as tpm, pm, pmo, developer, designer, and qa.","description":"This API operation updates information of an existing member associated with a board. The member is identified by memberId, and the board is identified by boardId.\n\nThe operation accepts updated membership fields via the request body.\n\nIt relates to the task_management_board_members table that tracks membership associations between users and boards, including timestamps and soft-deletion flags.\n\nAppropriate authorization is required to modify membership information. The API provides the updated membership record upon success.\n\nThis update operation helps maintain correct membership information and supports audit compliance.","summary":"Update a board member's information","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information for the board member","typeName":"ITaskManagementBoardMember.IUpdate"},"responseBody":{"description":"The updated board member information","typeName":"ITaskManagementBoardMember"},"authorizationType":null,"authorizationRole":"qa","name":"update","path":"/taskManagement/qa/boards/{boardId}/members/{memberId}","method":"put"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase","path":"/taskManagement/tpm/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase","path":"/taskManagement/pm/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase","path":"/taskManagement/pmo/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"erase","path":"/taskManagement/developer/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"designer","name":"erase","path":"/taskManagement/designer/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation deletes a board member association from a specified board in the Task Management system. It operates on the task_management_board_members table, removing the link between a user and a board.\n\nThe delete action requires boardId and memberId in the path to identify the exact membership record.\n\nDeletion is handled as a hard delete since the table schema includes a nullable deleted_at field for soft deletion; actual delete semantics depend on backend implementation.\n\nAuthorized users with membership management rights including tpm, pm, pmo, developer, designer, and qa may perform this operation. The API provides no response body upon successful deletion.\n\nThe operation ensures referential integrity and permission enforcement.","description":"This API operation removes a member from a board, identified by memberId, within the specified board identified by boardId.\n\nIt deletes the membership record in the task_management_board_members table linking the user to the board.\n\nSoft delete semantics apply if implemented; otherwise, the record is fully removed.\n\nAuthorization checks confirm the requester has permission to delete board members.\n\nNo response body is returned upon successful deletion.\n\nErrors include not found if the membership does not exist or forbidden if unauthorized.","summary":"Delete a board member","parameters":[{"name":"boardId","description":"Unique identifier of the board","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the board member user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"qa","name":"erase","path":"/taskManagement/qa/boards/{boardId}/members/{memberId}","method":"delete"},{"specification":"This operation retrieves the list of members for a specified project identified by {projectId}. It queries the task_management_project_members table within the Prisma schema which maintains unique membership records associating users (TPM role) with projects. The request supports complex filtering, pagination, and sorting to efficiently manage large membership lists.","description":"This endpoint allows authorized users (roles: TPM, PM, PMO) to retrieve a filtered and paginated list of project members for a given project ID.\n\nThe task_management_project_members table connects TPM users to projects with audit timestamps, associating each member uniquely with a project. The response returns summary information suitable for listing and management.\n\nSecurity is paramount: only users with proper authorization can access this sensitive membership information. The operation supports pagination and search capabilities, assisting in efficient membership management.\n\nErrors will be handled gracefully if the projectId is invalid or if the user lacks the right permissions.\n\nThis operation is typically used alongside create, update, and detail retrieval APIs for comprehensive membership management.","summary":"Retrieve a filtered, paginated list of project members for a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for project member filtering","typeName":"ITaskManagementProjectMember.IRequest"},"responseBody":{"description":"Paginated list of project members matching the search criteria","typeName":"IPageITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"tpm","name":"index","path":"/taskManagement/tpm/projects/{projectId}/members","method":"patch"},{"specification":"This operation retrieves the list of members for a specified project identified by {projectId}. It queries the task_management_project_members table within the Prisma schema which maintains unique membership records associating users (TPM role) with projects. The request supports complex filtering, pagination, and sorting to efficiently manage large membership lists.","description":"This endpoint allows authorized users (roles: TPM, PM, PMO) to retrieve a filtered and paginated list of project members for a given project ID.\n\nThe task_management_project_members table connects TPM users to projects with audit timestamps, associating each member uniquely with a project. The response returns summary information suitable for listing and management.\n\nSecurity is paramount: only users with proper authorization can access this sensitive membership information. The operation supports pagination and search capabilities, assisting in efficient membership management.\n\nErrors will be handled gracefully if the projectId is invalid or if the user lacks the right permissions.\n\nThis operation is typically used alongside create, update, and detail retrieval APIs for comprehensive membership management.","summary":"Retrieve a filtered, paginated list of project members for a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for project member filtering","typeName":"ITaskManagementProjectMember.IRequest"},"responseBody":{"description":"Paginated list of project members matching the search criteria","typeName":"IPageITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pm","name":"index","path":"/taskManagement/pm/projects/{projectId}/members","method":"patch"},{"specification":"This operation retrieves the list of members for a specified project identified by {projectId}. It queries the task_management_project_members table within the Prisma schema which maintains unique membership records associating users (TPM role) with projects. The request supports complex filtering, pagination, and sorting to efficiently manage large membership lists.","description":"This endpoint allows authorized users (roles: TPM, PM, PMO) to retrieve a filtered and paginated list of project members for a given project ID.\n\nThe task_management_project_members table connects TPM users to projects with audit timestamps, associating each member uniquely with a project. The response returns summary information suitable for listing and management.\n\nSecurity is paramount: only users with proper authorization can access this sensitive membership information. The operation supports pagination and search capabilities, assisting in efficient membership management.\n\nErrors will be handled gracefully if the projectId is invalid or if the user lacks the right permissions.\n\nThis operation is typically used alongside create, update, and detail retrieval APIs for comprehensive membership management.","summary":"Retrieve a filtered, paginated list of project members for a specific project","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for project member filtering","typeName":"ITaskManagementProjectMember.IRequest"},"responseBody":{"description":"Paginated list of project members matching the search criteria","typeName":"IPageITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pmo","name":"index","path":"/taskManagement/pmo/projects/{projectId}/members","method":"patch"},{"specification":"This operation retrieves detailed information about a specific project member {memberId} within a project {projectId}. It accesses the task_management_project_members table in the Prisma schema which maintains user-project membership records linked to TPM users. The response includes comprehensive membership details including audit data.","description":"This endpoint fetches detailed membership information for a specific member of a project.\n\nThe task_management_project_members table uniquely associates TPM users to projects, and this operation verifies the existence of such membership.\n\nAccess is restricted to authorized users with roles TPM, PM, and PMO to protect privacy and ensure data integrity.\n\nValidation of projectId and memberId parameters ensures correct entity targeting. \n\nThe response provides the full project member entity as defined in the TaskManagementProjectMember schema.","summary":"Retrieve detailed information of a specific project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed project member information","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"tpm","name":"at","path":"/taskManagement/tpm/projects/{projectId}/members/{memberId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific project member {memberId} within a project {projectId}. It accesses the task_management_project_members table in the Prisma schema which maintains user-project membership records linked to TPM users. The response includes comprehensive membership details including audit data.","description":"This endpoint fetches detailed membership information for a specific member of a project.\n\nThe task_management_project_members table uniquely associates TPM users to projects, and this operation verifies the existence of such membership.\n\nAccess is restricted to authorized users with roles TPM, PM, and PMO to protect privacy and ensure data integrity.\n\nValidation of projectId and memberId parameters ensures correct entity targeting. \n\nThe response provides the full project member entity as defined in the TaskManagementProjectMember schema.","summary":"Retrieve detailed information of a specific project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed project member information","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pm","name":"at","path":"/taskManagement/pm/projects/{projectId}/members/{memberId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific project member {memberId} within a project {projectId}. It accesses the task_management_project_members table in the Prisma schema which maintains user-project membership records linked to TPM users. The response includes comprehensive membership details including audit data.","description":"This endpoint fetches detailed membership information for a specific member of a project.\n\nThe task_management_project_members table uniquely associates TPM users to projects, and this operation verifies the existence of such membership.\n\nAccess is restricted to authorized users with roles TPM, PM, and PMO to protect privacy and ensure data integrity.\n\nValidation of projectId and memberId parameters ensures correct entity targeting. \n\nThe response provides the full project member entity as defined in the TaskManagementProjectMember schema.","summary":"Retrieve detailed information of a specific project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed project member information","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pmo","name":"at","path":"/taskManagement/pmo/projects/{projectId}/members/{memberId}","method":"get"},{"specification":"Creates a new membership record associating a user to the project identified by {projectId} in the task_management_project_members table. The request body must conform to the ITaskManagementProjectMember.ICreate schema, ensuring inclusion of required fields and uniqueness constraints.","description":"Allows authorized users (TPM, PM, PMO) to add new members to a project.\n\nThe operation creates a new record in the task_management_project_members table linking a TPM user to the specified project by projectId.\n\nInput data is validated against the create schema, ensuring compliance with uniqueness and referential integrity.\n\nSuccessful operation returns the created project member entity. Errors include invalid projectId, duplicate memberships, or unauthorized access.\n\nThis is essential for managing project team composition and collaboration.","summary":"Create a new project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data needed to create a project member","typeName":"ITaskManagementProjectMember.ICreate"},"responseBody":{"description":"Created project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"tpm","name":"create","path":"/taskManagement/tpm/projects/{projectId}/members","method":"post"},{"specification":"Creates a new membership record associating a user to the project identified by {projectId} in the task_management_project_members table. The request body must conform to the ITaskManagementProjectMember.ICreate schema, ensuring inclusion of required fields and uniqueness constraints.","description":"Allows authorized users (TPM, PM, PMO) to add new members to a project.\n\nThe operation creates a new record in the task_management_project_members table linking a TPM user to the specified project by projectId.\n\nInput data is validated against the create schema, ensuring compliance with uniqueness and referential integrity.\n\nSuccessful operation returns the created project member entity. Errors include invalid projectId, duplicate memberships, or unauthorized access.\n\nThis is essential for managing project team composition and collaboration.","summary":"Create a new project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data needed to create a project member","typeName":"ITaskManagementProjectMember.ICreate"},"responseBody":{"description":"Created project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pm","name":"create","path":"/taskManagement/pm/projects/{projectId}/members","method":"post"},{"specification":"Creates a new membership record associating a user to the project identified by {projectId} in the task_management_project_members table. The request body must conform to the ITaskManagementProjectMember.ICreate schema, ensuring inclusion of required fields and uniqueness constraints.","description":"Allows authorized users (TPM, PM, PMO) to add new members to a project.\n\nThe operation creates a new record in the task_management_project_members table linking a TPM user to the specified project by projectId.\n\nInput data is validated against the create schema, ensuring compliance with uniqueness and referential integrity.\n\nSuccessful operation returns the created project member entity. Errors include invalid projectId, duplicate memberships, or unauthorized access.\n\nThis is essential for managing project team composition and collaboration.","summary":"Create a new project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data needed to create a project member","typeName":"ITaskManagementProjectMember.ICreate"},"responseBody":{"description":"Created project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pmo","name":"create","path":"/taskManagement/pmo/projects/{projectId}/members","method":"post"},{"specification":"Updates membership information for a project member identified by {memberId} within a project {projectId}. The update operation modifies fields defined in the ITaskManagementProjectMember.IUpdate schema on the task_management_project_members table, allowing adjustments to membership attributes and audit metadata.","description":"Enables authorized users (TPM, PM, PMO) to update details for an existing project member.\n\nThe operation validates input against the member update schema and applies changes to the corresponding task_management_project_members record.\n\nProper authorization and input validation protect data consistency.\n\nThe response returns the updated project member entity upon success, or error information upon failure.\n\nThis operation supports comprehensive membership lifecycle management within projects.","summary":"Update information of an existing project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update existing project member","typeName":"ITaskManagementProjectMember.IUpdate"},"responseBody":{"description":"Updated project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"tpm","name":"update","path":"/taskManagement/tpm/projects/{projectId}/members/{memberId}","method":"put"},{"specification":"Updates membership information for a project member identified by {memberId} within a project {projectId}. The update operation modifies fields defined in the ITaskManagementProjectMember.IUpdate schema on the task_management_project_members table, allowing adjustments to membership attributes and audit metadata.","description":"Enables authorized users (TPM, PM, PMO) to update details for an existing project member.\n\nThe operation validates input against the member update schema and applies changes to the corresponding task_management_project_members record.\n\nProper authorization and input validation protect data consistency.\n\nThe response returns the updated project member entity upon success, or error information upon failure.\n\nThis operation supports comprehensive membership lifecycle management within projects.","summary":"Update information of an existing project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update existing project member","typeName":"ITaskManagementProjectMember.IUpdate"},"responseBody":{"description":"Updated project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pm","name":"update","path":"/taskManagement/pm/projects/{projectId}/members/{memberId}","method":"put"},{"specification":"Updates membership information for a project member identified by {memberId} within a project {projectId}. The update operation modifies fields defined in the ITaskManagementProjectMember.IUpdate schema on the task_management_project_members table, allowing adjustments to membership attributes and audit metadata.","description":"Enables authorized users (TPM, PM, PMO) to update details for an existing project member.\n\nThe operation validates input against the member update schema and applies changes to the corresponding task_management_project_members record.\n\nProper authorization and input validation protect data consistency.\n\nThe response returns the updated project member entity upon success, or error information upon failure.\n\nThis operation supports comprehensive membership lifecycle management within projects.","summary":"Update information of an existing project member","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the project member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data to update existing project member","typeName":"ITaskManagementProjectMember.IUpdate"},"responseBody":{"description":"Updated project member entity","typeName":"ITaskManagementProjectMember"},"authorizationType":null,"authorizationRole":"pmo","name":"update","path":"/taskManagement/pmo/projects/{projectId}/members/{memberId}","method":"put"},{"specification":"This operation removes a member from a specific project in the task management system. It permanently deletes the member's association with the project identified by the given project ID and member ID. This operation interacts with the task_management_project_members table, which keeps track of user memberships on projects. Deletion of this record effectively revokes the member's access and participation in the project. It expects both path parameters to be UUID strings referencing existing records.","path":"/taskManagement/tpm/projects/{projectId}/members/{memberId}","method":"delete","summary":"Delete a specific member from a project by project ID and member ID","description":"This API endpoint facilitates the deletion of a project member's association, thereby removing their membership from the specified project. This is a hard delete operation on the task_management_project_members table, ensuring that the member's link to the project is fully removed and the user can no longer access the project's resources.\n\nOnly users with appropriate permissions should invoke this operation, typically administrators or project owners. The operation requires valid UUID identifiers for both the project and member to guarantee safe and targeted deletion.\n\nUpon successful execution, the system permanently removes the membership record from the database. Failure scenarios may include missing or invalid UUIDs or attempting to remove non-existent members.\n\nNo request body is required as this is a direct resource deletion operation.","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the member to delete from the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"erase","authorizationRoles":["tpm","pm","pmo"]},{"specification":"This operation removes a member from a specific project in the task management system. It permanently deletes the member's association with the project identified by the given project ID and member ID. This operation interacts with the task_management_project_members table, which keeps track of user memberships on projects. Deletion of this record effectively revokes the member's access and participation in the project. It expects both path parameters to be UUID strings referencing existing records.","path":"/taskManagement/pm/projects/{projectId}/members/{memberId}","method":"delete","summary":"Delete a specific member from a project by project ID and member ID","description":"This API endpoint facilitates the deletion of a project member's association, thereby removing their membership from the specified project. This is a hard delete operation on the task_management_project_members table, ensuring that the member's link to the project is fully removed and the user can no longer access the project's resources.\n\nOnly users with appropriate permissions should invoke this operation, typically administrators or project owners. The operation requires valid UUID identifiers for both the project and member to guarantee safe and targeted deletion.\n\nUpon successful execution, the system permanently removes the membership record from the database. Failure scenarios may include missing or invalid UUIDs or attempting to remove non-existent members.\n\nNo request body is required as this is a direct resource deletion operation.","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the member to delete from the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"erase","authorizationRoles":["tpm","pm","pmo"]},{"specification":"This operation removes a member from a specific project in the task management system. It permanently deletes the member's association with the project identified by the given project ID and member ID. This operation interacts with the task_management_project_members table, which keeps track of user memberships on projects. Deletion of this record effectively revokes the member's access and participation in the project. It expects both path parameters to be UUID strings referencing existing records.","path":"/taskManagement/pmo/projects/{projectId}/members/{memberId}","method":"delete","summary":"Delete a specific member from a project by project ID and member ID","description":"This API endpoint facilitates the deletion of a project member's association, thereby removing their membership from the specified project. This is a hard delete operation on the task_management_project_members table, ensuring that the member's link to the project is fully removed and the user can no longer access the project's resources.\n\nOnly users with appropriate permissions should invoke this operation, typically administrators or project owners. The operation requires valid UUID identifiers for both the project and member to guarantee safe and targeted deletion.\n\nUpon successful execution, the system permanently removes the membership record from the database. Failure scenarios may include missing or invalid UUIDs or attempting to remove non-existent members.\n\nNo request body is required as this is a direct resource deletion operation.","parameters":[{"name":"projectId","description":"Unique identifier of the target project","schema":{"type":"string","format":"uuid"}},{"name":"memberId","description":"Unique identifier of the member to delete from the project","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"erase","authorizationRoles":["tpm","pm","pmo"]},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","path":"/taskManagement/tpm/notifications","method":"patch","summary":"Search and retrieve a filtered paginated list of notifications for the user","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationType":null,"authorizationRole":"tpm","name":"index","authorizationRoles":["tpm","pm","pmo","developer","designer","qa"]},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","summary":"Search and retrieve a filtered paginated list of notifications for the user","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/pm/notifications","method":"patch","authorizationRole":"pm","authorizationType":null},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","summary":"Search and retrieve a filtered paginated list of notifications for the user","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/pmo/notifications","method":"patch","authorizationRole":"pmo","authorizationType":null},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","summary":"Search and retrieve a filtered paginated list of notifications for the user","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/developer/notifications","method":"patch","authorizationRole":"developer","authorizationType":null},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","summary":"Search and retrieve a filtered paginated list of notifications for the user","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/designer/notifications","method":"patch","authorizationRole":"designer","authorizationType":null},{"specification":"Retrieve a paginated list of notifications for the authenticated user. This operation supports filtering, searching, and pagination on the notifications related to the user, referencing the task_management_notifications table that stores notifications about task events, assignments, status changes, and alerts.\n\nThis PATCH operation requires a request body specifying search criteria and pagination parameters, returning paginated notification summaries.","description":"This endpoint provides a filtered and paginated view of the user's notifications within the task management system. Notifications can come from task assignments, status changes, comments, or general alerts.\n\nThe operation lets users search, sort, and paginate through their notifications efficiently.\n\nThe task_management_notifications table stores notifications with references to the relevant user, task, and notification type. This operation respects user permissions and returns only notifications belonging to the authenticated user.\n\nThis API is a PATCH method to support complex queries beyond simple filters.","summary":"Search and retrieve a filtered paginated list of notifications for the user","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering notifications","typeName":"ITaskManagementNotification.IRequest"},"responseBody":{"description":"Paginated list of notification summaries matching search criteria","typeName":"IPageITaskManagementNotification.ISummary"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"index","path":"/taskManagement/qa/notifications","method":"patch","authorizationRole":"qa","authorizationType":null},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","path":"/taskManagement/tpm/notifications/{id}","method":"get","summary":"Retrieve detailed information for a specific notification by ID","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationType":null,"authorizationRole":"tpm","name":"at","authorizationRoles":["tpm","pm","pmo","developer","designer","qa"]},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","summary":"Retrieve detailed information for a specific notification by ID","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/pm/notifications/{id}","method":"get","authorizationRole":"pm","authorizationType":null},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","summary":"Retrieve detailed information for a specific notification by ID","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/pmo/notifications/{id}","method":"get","authorizationRole":"pmo","authorizationType":null},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","summary":"Retrieve detailed information for a specific notification by ID","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/developer/notifications/{id}","method":"get","authorizationRole":"developer","authorizationType":null},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","summary":"Retrieve detailed information for a specific notification by ID","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/designer/notifications/{id}","method":"get","authorizationRole":"designer","authorizationType":null},{"specification":"Retrieve detailed information about a specific notification by its unique identifier. This operation accesses the task_management_notifications table storing notifications about task-related events and user alerts.\n\nThe notification is identified by its UUID provided in the path parameter; the response returns full notification details including read status, notification type, and timestamps.","description":"This endpoint fetches the detailed data of a single notification. Each notification record corresponds to user alerts for task actions such as assignment, status changes, comments, or general announcements.\n\nThe system requires that the requesting user has access rights to view this notification.\n\nThe unique notification ID is validated as a UUID.\n\nThe response includes comprehensive properties from the task_management_notifications table including the notification type, read status and timestamps.","summary":"Retrieve detailed information for a specific notification by ID","parameters":[{"name":"id","description":"Unique identifier of the notification","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"at","path":"/taskManagement/qa/notifications/{id}","method":"get","authorizationRole":"qa","authorizationType":null},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","path":"/taskManagement/tpm/notifications/{id}","method":"put","summary":"Update notification properties such as read status","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationType":null,"authorizationRole":"tpm","name":"update","authorizationRoles":["tpm","pm","pmo","developer","designer","qa"]},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","summary":"Update notification properties such as read status","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"update","path":"/taskManagement/pm/notifications/{id}","method":"put","authorizationRole":"pm","authorizationType":null},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","summary":"Update notification properties such as read status","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"update","path":"/taskManagement/pmo/notifications/{id}","method":"put","authorizationRole":"pmo","authorizationType":null},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","summary":"Update notification properties such as read status","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"update","path":"/taskManagement/developer/notifications/{id}","method":"put","authorizationRole":"developer","authorizationType":null},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","summary":"Update notification properties such as read status","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"update","path":"/taskManagement/designer/notifications/{id}","method":"put","authorizationRole":"designer","authorizationType":null},{"specification":"Update an existing notification record by its unique identifier. Allows modifying notification properties such as read status and read timestamp. This operation corresponds to updates on the task_management_notifications table.\n\nThe notification ID is specified in the path, and the request body provides the fields to update. The operation requires the notification to exist and the user to have rights to modify it.","description":"This endpoint enables updating properties of a notification, typically to mark it as read or unread.\n\nValid updates include changing the is_read flag and setting the read_at timestamp.\n\nThe system verifies user permissions to update the notification.\n\nThe path parameter is the notification's UUID.\n\nRequest body must include valid update schema for notifications.","summary":"Update notification properties such as read status","parameters":[{"name":"id","description":"Unique identifier of the notification to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Notification update fields","typeName":"ITaskManagementNotification.IUpdate"},"responseBody":{"description":"Updated notification information","typeName":"ITaskManagementNotification"},"authorizationRoles":["tpm","pm","pmo","developer","designer","qa"],"name":"update","path":"/taskManagement/qa/notifications/{id}","method":"put","authorizationRole":"qa","authorizationType":null},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/tpm/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"tpm","name":"eraseNotification"},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/pm/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pm","name":"eraseNotification"},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/pmo/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"pmo","name":"eraseNotification"},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/developer/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"developer","name":"eraseNotification"},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/designer/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"designer","name":"eraseNotification"},{"specification":"This operation deletes a specific notification record from the task management system based on its unique identifier. It permanently removes the notification, which is linked to task events, statuses, or user alerts. The operation acts on the task_management_notifications table. Although soft delete with deleted_at exists on the table, this operation permanently removes the record as authorized users request.","path":"/taskManagement/qa/notifications/{id}","method":"delete","summary":"Delete a notification by ID from task_management_notifications","description":"This API endpoint allows an authorized user with role among tpm, pm, pmo, developer, designer, or qa to delete a notification identified by its unique ID.\n\nThe operation completely removes the notification record from the database.\n\nError responses may include 404 for non-existing notifications or 403 if unauthorized.\n\nThis operation complements other notification APIs such as retrieval and preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification to delete"}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"qa","name":"eraseNotification"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/tpm/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"tpm","name":"indexNotificationPreferences"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/pm/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pm","name":"indexNotificationPreferences"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/pmo/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pmo","name":"indexNotificationPreferences"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/developer/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"developer","name":"indexNotificationPreferences"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/designer/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"designer","name":"indexNotificationPreferences"},{"specification":"This API operation retrieves a paginated and filtered list of notification preferences from the task_management_notification_preferences table. It allows users to query their preferences based on keys, delivery methods, and enabled flags.","path":"/taskManagement/qa/notificationPreferences","method":"patch","summary":"Search notification preferences with filtering and pagination","description":"Retrieve notification preferences with filtering and pagination.\n\nThis operation enables users with roles tpm, pm, pmo, developer, designer, or qa to search their notification preferences by preference key, delivery method, or enabled status.\n\nThe response is paginated to efficiently handle potentially large data sets.\n\nClients use this alongside other preference management endpoints to fully manage their notifications.","parameters":[],"requestBody":{"description":"Search criteria for notification preference filtering","typeName":"ITaskManagementNotificationPreferences.IRequest"},"responseBody":{"description":"Paginated list of notification preferences matching search criteria","typeName":"IPageITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"qa","name":"indexNotificationPreferences"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/tpm/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"tpm","name":"atNotificationPreference"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/pm/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pm","name":"atNotificationPreference"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/pmo/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pmo","name":"atNotificationPreference"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/developer/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"developer","name":"atNotificationPreference"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/designer/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"designer","name":"atNotificationPreference"},{"specification":"This operation fetches detailed information about a specific notification preference by its unique identifier from the task_management_notification_preferences table. It allows authorized users to view their notification preferences securely.","path":"/taskManagement/qa/notificationPreferences/{id}","method":"get","summary":"Retrieve notification preference detail by ID","description":"Retrieve the notification preference record for given ID.\n\nAuthorized users with roles tpm, pm, pmo, developer, designer, or qa can view their notification preferences.\n\nThis endpoint complements list and update preference APIs for full preference management.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":null,"responseBody":{"description":"Notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"qa","name":"atNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/tpm/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"tpm","name":"updateNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/pm/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pm","name":"updateNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/pmo/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"pmo","name":"updateNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/developer/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"developer","name":"updateNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/designer/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"designer","name":"updateNotificationPreference"},{"specification":"Update the notification preference record specified by ID in the task_management_notification_preferences table. This operation receives updated preference key, enabled flag, and delivery method, validates that values are acceptable, and ensures only authorized users modify their own settings.","path":"/taskManagement/qa/notificationPreferences/{id}","method":"put","summary":"Update notification preference by ID","description":"Update a notification preference by its unique ID.\n\nUsers with roles tpm, pm, pmo, developer, designer, or qa can update their notification preferences including preference key, enabled status, and delivery method.\n\nThis endpoint must validate inputs against allowed notification categories and delivery options.\n\nIt works with other preference APIs to provide a complete notification preference management system.","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference"}],"requestBody":{"description":"Notification preference update data","typeName":"ITaskManagementNotificationPreferences.IUpdate"},"responseBody":{"description":"Updated notification preference record","typeName":"ITaskManagementNotificationPreferences"},"authorizationType":null,"authorizationRole":"qa","name":"updateNotificationPreference"},{"specification":"This operation performs the permanent deletion of a Notification Preference record by its unique identifier from the task_management_notification_preferences table in the Task Management system. This table stores user-specific settings that control notification preferences and delivery methods for different notification types such as assignment or status change. The delete operation will irreversibly remove the preference configuration for the specified user, ensuring that no record of this preference remains. This action is intended for authorized users with roles such as \"tpm\" who have permission to manage notification preferences. The identifier must correspond to an existing notification preference entry. No request body is needed, and no response body is returned on successful deletion.","description":"This DELETE operation targets a specific Notification Preference record within the task_management_notification_preferences table by the unique ID provided in the path parameter.\n\nThis operation permanently removes the notification preference setting for the user, meaning the preference for notification types and delivery methods associated with that ID will no longer exist in the system.\n\nUsers or administrators authorized to manage notification preferences can invoke this endpoint to delete obsolete or incorrect preferences. All relevant security controls should ensure only authorized personnel can perform this deletion.\n\nThe operation uses a hard deletion mechanism, physically deleting the record rather than marking it as deleted with a flag. Therefore, this action is irreversible.\n\nPath Parameter:\n- id: The UUID of the exact notification preference record to be deleted.\n\nNo request body is necessary as the identification provided in the URL path suffices.\n\nResponse:\n- No data content is returned on success.\n\nError Handling:\n- If the ID does not correspond to any existing record, an appropriate error (e.g., 404 Not Found) is expected.\n- Unauthorized attempts are rejected with proper authorization errors.\n\nThis operation corresponds to the task_management_notification_preferences table defined in the Prisma schema, ensuring accurate and safe removal of user notification preferences.","summary":"Delete a notification preference by ID from task_management_notification_preferences","parameters":[{"name":"id","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the notification preference to delete"}],"requestBody":null,"responseBody":null,"authorizationRoles":["tpm"],"name":"erase","path":"/taskManagement/tpm/notificationPreferences/{id}","method":"delete","authorizationRole":"tpm","authorizationType":null}],"components":{"authorization":[{"name":"tpm","description":"Technical Project Manager who oversees development projects, manages team coordination, and ensures deadlines are met.","kind":"member"},{"name":"pm","description":"Project Manager who plans, executes, and closes projects, manages resources, and communicates with stakeholders.","kind":"member"},{"name":"pmo","description":"Project Management Officer who sets standards, methodologies, and compliance for project management.","kind":"admin"},{"name":"developer","description":"Developer who writes code, implements features, fixes bugs, and participates in development lifecycle.","kind":"member"},{"name":"designer","description":"Designer who creates UI/UX designs, prototypes, and user experience strategies.","kind":"member"},{"name":"qa","description":"Quality Assurance engineer who tests software, reports defects, and ensures quality standards.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITaskManagementTaskManagementRoles":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTaskManagementRoles"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementTaskStatuses.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTaskStatuses.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementPriorities.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementPriorities.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementTpm.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTpm.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementPmo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementPmo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementDeveloper.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementDeveloper.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementDesigner.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementDesigner.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementQa.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementQa.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementTasks.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTasks.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementTaskComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTaskComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementTaskStatusChange":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTaskStatusChange"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementProject.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementProject.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementBoard.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementBoard.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementBoardMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementBoardMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementProjectMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementProjectMember"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementNotification.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementNotification.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITaskManagementNotificationPreferences":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementNotificationPreferences"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITaskManagementTpm":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the TPM user."},"email":{"type":"string","description":"Email address for TPM user login; must be unique."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the TPM user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the TPM user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the TPM user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverable deletion. Nullable."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Technical Project Manager (TPM) user entity. Contains unique identifier, email, hashed password, full name, timestamps for creation and last update, and nullable soft deletion timestamp. Used for TPM user management, authentication, and authorization."},"ITaskManagementTpm.IJoin":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address, used for login and contact."},"password":{"type":"string","description":"Plain text password to be hashed by backend, min length according to security policy."},"name":{"type":"string","description":"Full name of the user."}},"required":["email","password","name"],"description":"Request body schema for joining/registering a new TPM user.\n\nIncludes unique email, plain password (to be hashed), and full name."},"ITaskManagementTpm.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized TPM user"},"email":{"type":"string","description":"Email address for TPM user login; must be unique."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the TPM user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the TPM user record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the TPM user record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverable deletion. Nullable."},"access_token":{"type":"string","description":"JWT access token string for authentication"},"refresh_token":{"type":"string","description":"JWT refresh token string for token renewal"},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Response schema containing authorized TPM user data and JWT tokens.\n\nIncludes user ID and issued JWT access and refresh tokens."},"ITaskManagementTpm.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Registered user email address for authentication."},"password":{"type":"string","description":"Plain text password to authenticate."}},"required":["email","password"],"description":"Request body schema for TPM user login.\n\nIncludes registered user email and plain text password."},"ITaskManagementTpm.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token string provided to obtain a new access token"}},"required":["refresh_token"],"description":"Request body schema for JWT token refresh.\n\nIncludes the refresh token string to request a new access token."},"ITaskManagementPm":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the Project Manager user."},"email":{"type":"string","description":"Unique email address used for login. Essential for authentication and user communication."},"password_hash":{"type":"string","description":"Hashed password for authentication. Ensures password security."},"name":{"type":"string","description":"Full name of the PM user. Represents the user's full name as displayed in the system."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp. Indicates when the PM record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the PM record. Reflects the last modification time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Nullable to indicate active or deleted status."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Project Manager (PM) user entity, includes unique identifier, email, hashed password, full name, creation and update timestamps, and optional soft deletion timestamp. Used to manage PM user accounts and authentication."},"ITaskManagementPm.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address for login and contact, must be unique."},"password":{"type":"string","description":"Plain text password for hashing, never exposed in responses."},"name":{"type":"string","description":"Full name of the PM user."}},"required":["email","password","name"],"description":"Request body for creating a new PM user. Includes required email, plain-text password for hashing, and the user name. Note: password field represents plain password to be hashed internally. Clients should send plain text password only on creation."},"ITaskManagementPm.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Email address to authenticate."},"password":{"type":"string","description":"Password in plain text to authenticate."}},"required":["email","password"],"description":"Request body for login operation. Contains email and plain text password for authentication. This is public-facing."},"ITaskManagementPm.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token string valid and unexpired."}},"required":["refresh_token"],"description":"Request body for token refresh operation. Contains the refresh token string to request new access token."},"ITaskManagementPm.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Unique identifier for the authenticated PM user."},"email":{"type":"string","description":"Unique email address used for login. Essential for authentication and user communication."},"password_hash":{"type":"string","description":"Hashed password for authentication. Ensures password security."},"name":{"type":"string","description":"Full name of the PM user. Represents the user's full name as displayed in the system."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp. Indicates when the PM record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the PM record. Reflects the last modification time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Nullable to indicate active or deleted status."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Authorization response including user identity and JWT tokens. Contains user ID and the authorization token information."},"ITaskManagementPmo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier"},"email":{"type":"string","description":"Email address used for login and contact, unique across PMO users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the PMO user."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to enable recovery."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Project Management Officer (PMO) user entity storing credentials and metadata.\n\nThis entity stores critical user information including email, hashed password, display name, and timestamps to track record lifecycle.\n\nAccounts support soft deletion via the nullable deleted_at field."},"ITaskManagementPmo.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for registration"},"password":{"type":"string","description":"Password string for initial registration\n\nShould be plaintext and hashed by the server."},"name":{"type":"string","description":"Full name of the user"}},"required":["email","password","name"],"description":"Request body for PMO registration (join) containing email, password (plaintext), and name for creating a new user account."},"ITaskManagementPmo.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address"},"password":{"type":"string","description":"Password string"}},"required":["email","password"],"description":"Request body for PMO login containing email and password."},"ITaskManagementPmo.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string"}},"required":["refresh_token"],"description":"Request body for token refresh containing the refresh token string."},"ITaskManagementPmo.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized PMO user"},"email":{"type":"string","description":"Email address used for login and contact, unique across PMO users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the PMO user."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Record last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to enable recovery."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Authorization response containing user id and token for the Project Management Officer (PMO)."},"ITaskManagementDeveloper":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"email":{"type":"string","description":"Email address used for login and contact, unique across developers."},"password_hash":{"type":"string","description":"Hashed password supporting secure login."},"name":{"type":"string","description":"Full name of the developer user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverable deletions."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Developer user information including secure login credentials.\n\nIndependent business entity representing developer users with full\ncontrol for user management and authentication.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementDeveloper.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"User email address, unique across developers."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"name":{"type":"string","description":"Full name of the developer."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp, null if active."}},"required":["email","password_hash","name"],"description":"Request body for creating a new developer user account. Includes email, hashed password, name, and optional deleted_at timestamp."},"ITaskManagementDeveloper.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"User email address used for login."},"password":{"type":"string","description":"User plain text password used for authentication."}},"required":["email","password"],"description":"Request body for developer user login credentials. Includes email and plain text password."},"ITaskManagementDeveloper.IRefresh":{"type":"object","properties":{"refresh_token":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Refresh token string used to obtain new access tokens."}},"required":[],"description":"Request body for refreshing JWT tokens for a developer user. Optional refresh token string."},"ITaskManagementDeveloper.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the developer user."},"email":{"type":"string","description":"User email address, unique across developers."},"password_hash":{"type":"string","description":"Hashed password supporting secure login."},"name":{"type":"string","description":"Full name of the developer."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the developer record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the developer record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverable deletions."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Response schema representing an authorized developer user, including authentication tokens and user profile information."},"ITaskManagementDesigner":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the designer."},"email":{"type":"string","description":"Email address of the designer. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the designer."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the designer record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the designer record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion if applicable."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Designer user information with authentication credentials and identity details. Core independent business entity for managing designer user accounts securely.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementDesigner.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for new designer login. Must be unique and valid."},"password_hash":{"type":"string","description":"Password hash for authenticating the designer user."},"name":{"type":"string","description":"Full name of the designer user."}},"required":["email","password_hash","name"],"description":"Request payload for registering a new Designer user.\n\nIncludes mandatory fields for email, hashed password, and user name.\n\nUsed in registration (join) operations."},"ITaskManagementDesigner.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized designer user."},"email":{"type":"string","description":"Email address of the designer. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the designer."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the designer record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the designer record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion if applicable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Authorization response including user identifier and JWT tokens.\n\nReturned after successful authentication operations such as login or join."},"ITaskManagementDesigner.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address of the designer user for login."},"password":{"type":"string","description":"Plain-text password for login authentication."}},"required":["email","password"],"description":"Request payload for designer login operation.\n\nIncludes email and password to authenticate the designer user."},"ITaskManagementDesigner.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token string used to obtain new access tokens."}},"required":["refreshToken"],"description":"Request payload for refreshing JWT access tokens using a refresh token."},"ITaskManagementQa":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the QA user."},"email":{"type":"string","description":"Email address of the QA user. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"name":{"type":"string","description":"Full name of the QA user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if deleted."}},"required":["id","email","password_hash","name","created_at","updated_at"],"description":"Quality Assurance (QA) user information including authentication data.\n\n@namespace Actors\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementQa.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Unique email address for user registration with required format."},"password_hash":{"type":"string","description":"Password hashed securely for authentication."},"name":{"type":"string","description":"Full name of the user registering for QA role."}},"required":["email","password_hash","name"],"description":"Request body schema for registering a new QA user.\n\nContains email, securely hashed password, and full name as mandatory properties."},"ITaskManagementQa.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email used for login."},"password":{"type":"string","description":"Plain password to be verified against stored hash."}},"required":["email","password"],"description":"Request body schema for QA user login.\n\nIncludes user email and plain text password for authentication."},"ITaskManagementQa.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token to obtain new JWT access tokens."}},"required":["refresh_token"],"description":"Request body schema for refreshing JWT tokens.\n\nOnly requires a valid refresh token string to be provided."},"ITaskManagementQa.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized QA user."},"email":{"type":"string","description":"Email address of the QA user. Must be unique."},"password_hash":{"type":"string","description":"Hashed password for authentication."},"name":{"type":"string","description":"Full name of the QA user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of record creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","name","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens for the QA user post authentication."},"ITaskManagementTaskManagementRoles.IRequest":{"type":"object","properties":{"page":{"type":"number","description":"Page number (1-based index) for pagination","minimum":1,"default":1},"limit":{"type":"number","description":"Number of records per page","minimum":1,"default":100},"search":{"type":"string","description":"Optional search string for filtering roles by code or name"},"sort_by":{"type":"string","description":"Property name to sort the results by"},"order_direction":{"oneOf":[{"const":"asc","description":"Sort order direction (ascending or descending)"},{"const":"desc","description":"Sort order direction (ascending or descending)"}],"description":"Sort order direction (ascending or descending)"}},"required":[],"description":"Request parameters for searching and paginating task management roles."},"ITaskManagementTaskManagementRoles":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique identifier of the task management role"},"code":{"type":"string","description":"Unique role code such as 'TPM', 'PM', 'Developer'"},"name":{"type":"string","description":"Human-readable role name"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the role, optional"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the role was created"},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the role was last updated"}},"required":["id","code","name","created_at","updated_at"],"description":"Represents a Task Management Role entity in the system with unique code, name, and optional description. Includes creation and update timestamps."},"ITaskManagementTaskManagementRoles.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique role code such as 'TPM', 'PM', 'Developer'"},"name":{"type":"string","description":"Human-readable role name"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the role, optional"}},"required":["code","name"],"description":"Data required to create a new Task Management Role."},"ITaskManagementTaskManagementRoles.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique role code such as 'TPM', 'PM', 'Developer'. Optional for update."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable role name. Optional for update."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description of the role, optional"}},"required":[],"description":"Data for updating an existing Task Management Role."},"ITaskManagementTaskStatuses.IRequest":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search filter for the task status code."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search filter for the task status name."},"page":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"number","format":"double"},{"type":"null"}],"description":"Optional number of records per page."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional field to specify sorting criteria."}},"required":[],"description":"Request schema for filtering and paginating task statuses.\n\nAllows clients to filter task statuses by optional code and name, with pagination and sorting.\nAll fields are optional and nullable."},"ITaskManagementTaskStatus":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the task status."},"code":{"type":"string","description":"Unique code representing the task status, e.g., 'to_do', 'in_progress', 'done'."},"name":{"type":"string","description":"Human-readable name of the task status, e.g., 'To Do', 'In Progress', 'Done'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed description explaining the status and its role in the workflow."},"created_at":{"type":"string","format":"date-time","description":"Timestamp recording when the status record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp recording when the status record was last updated."}},"required":["id","code","name","created_at","updated_at"],"description":"Represents a Task Status entity with unique code, name, description, and audit timestamps."},"ITaskManagementTaskStatus.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code identifier for the task status. Required."},"name":{"type":"string","description":"Human-readable name for the task status. Required."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the task status."}},"required":["code","name"],"description":"Request schema for creating a new task status with required code and name and optional description."},"ITaskManagementTaskStatuses.IUpdate":{"type":"object","properties":{"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Code identifier for the task status."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable name for the task status."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the task status."}},"required":[],"description":"Request schema for updating an existing task status record. Allows partial updates to code, name, and description."},"ITaskManagementTaskStatuses":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the taskManagementTaskStatus. Primary key."},"code":{"type":"string","description":"Unique code representing the task status, e.g., 'to_do', 'in_progress', 'done'."},"name":{"type":"string","description":"Human-readable status name, e.g., 'To Do', 'In Progress', 'Done'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the status and its significance in the workflow."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the status was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the status was last modified."}},"required":["id","code","name","created_at","updated_at"],"description":"Entity representing possible task statuses such as 'To Do', 'In Progress', and 'Done'. Contains metadata and timestamps."},"ITaskManagementPriorities.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"format":"uint32"},{"type":"null"}],"description":"Page number to retrieve. Starts from 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"format":"uint32"},{"type":"null"}],"description":"Maximum number of records to retrieve per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to filter priorities by code or name."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field to sort by, e.g., 'name', 'code'."},"orderDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request type for searching and paginating task priorities with optional filters and sorting."},"ITaskManagementPriorities":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the taskManagementPriority. Primary key."},"code":{"type":"string","description":"Unique code representing priority level, e.g., 'low', 'medium', 'high'."},"name":{"type":"string","description":"Human-friendly priority name, e.g., 'Low', 'Medium', 'High'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed notes about the priority's impact and usage rules."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the priority record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the priority record was last updated."}},"required":["id","code","name","created_at","updated_at"],"description":"Entity defining priority levels such as 'Low', 'Medium', and 'High' with metadata and timestamps."},"ITaskManagementPriority.ICreate":{"type":"object","properties":{"code":{"type":"string","description":"Unique code representing priority level, e.g., 'low', 'medium', 'high'."},"name":{"type":"string","description":"Human-friendly priority name, e.g., 'Low', 'Medium', 'High'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed notes about the priority's impact and usage rules."}},"required":["code","name"],"description":"Request type for creating a new task priority, requiring unique code, name, and optional description."},"ITaskManagementPriority":{"type":"object","description":"Entity representing Priority levels for task management as per Prisma schema.\nIncludes unique codes, human-readable names, optional descriptions, and audit timestamps.\nUsed to classify tasks by urgency for sorting and notifications.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the Priority.\nMust follow UUID format."},"code":{"type":"string","description":"Unique code identifying this priority (e.g., 'low', 'medium', 'high').\nMust be unique; used for internal references."},"name":{"type":"string","description":"Human-readable display name for this priority level.\nSuitable for UI display to users."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the priority's significance.\nProvides context for users and administrators."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this priority was originally created.\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this priority was last updated.\nISO 8601 date-time string."}},"required":["id","code","name","created_at","updated_at"]},"ITaskManagementPriority.IUpdate":{"type":"object","description":"Data required to update a Priority.\nEnables selective modification of priority properties.","properties":{"code":{"type":"string","description":"Unique code of the priority.\nShould be unique and valid for internal use."},"name":{"type":"string","description":"Human-readable name for the priority."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the priority behavior.\nNull explicitly allowed to clear this field."}},"required":[]},"ITaskManagementTpm.IRequest":{"type":"object","description":"Request object for listing or filtering TPM users.\nSupports pagination and optional filters.","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional page number for pagination.\nShould be an unsigned integer."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional number of records per page.\nShould be an unsigned integer."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional search term to filter TPM users.\nUtilized for matching name or email."}},"required":[]},"ITaskManagementTpm.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address for login. Must comply with email format and be unique in the TPM user database."},"password_hash":{"type":"string","description":"Plain text password to be hashed. Must meet security requirements for length and complexity."},"name":{"type":"string","description":"Full name of the TPM user. Required for identification and display purposes."}},"required":["email","password_hash","name"],"description":"Request body data to create a new TPM user. This interface defines the required properties for creating a TPM user account. All properties are mandatory except auto-generated fields like id or timestamps. Password is expected as plain text to be hashed server-side."},"ITaskManagementTpm.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Optional new email address. When provided, must be unique and conform to email format."},"password_hash":{"type":"string","description":"Optional new password hash. Plain text should be hashed before storing; expected hashed here."},"name":{"type":"string","description":"Optional new full name. Used to update the user's display name."}},"required":[],"description":"Payload for updating an existing TPM user. All fields are optional to support partial updates. No updates allowed on id or timestamps. Used to modify user email, password, or name."},"ITaskManagementPm.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Optional updated email address. When provided, must be unique and valid."},"password_hash":{"type":"string","description":"Optional updated password hash. Expected to be previously hashed"},"name":{"type":"string","description":"Optional updated full name."}},"required":[],"description":"Update payload for PM user. All fields are optional for partial update. Allowed to update email, password_hash, and name. id, created_at, deleted_at, updated_at are read-only."},"ITaskManagementPmo.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for email or name."},"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for pagination.\n\n@default 1"},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Number of items per page.\n\n@default 20"},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting order string."}},"description":"Request parameters for filtered and paginated PMO list.","required":[]},"ITaskManagementPmo.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login and contact, unique across PMO users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the PMO user."}},"required":["email","password_hash","name"],"description":"Data required to create a new PMO user account including unique email, secure password hash, and full user name."},"ITaskManagementPmo.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login and contact, unique across PMO users."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the PMO user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp to enable recovery."}},"required":[],"description":"Data for updating an existing PMO user account; all fields are optional to support partial updates."},"ITaskManagementDeveloper.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by developer email."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by developer user name."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Maximum records per page."},"sort":{"oneOf":[{"const":"email"},{"const":"name"},{"type":"null"}],"description":"Field to sort by."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction."}},"required":[],"description":"Request parameters for searching and filtering developer users with pagination and sorting."},"ITaskManagementDeveloper.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address used for login and contact, unique across developers."},"password_hash":{"type":"string","description":"Hashed password supporting secure login."},"name":{"type":"string","description":"Full name of the developer user."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for recoverable deletions."}},"required":[],"description":"Payload for updating developer user information, all fields optional."},"ITaskManagementDesigner.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by designer email."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by designer user name."},"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Maximum records per page."},"sort":{"oneOf":[{"const":"email"},{"const":"name"},{"type":"null"}],"description":"Sort field for ordering."},"order":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order direction."}},"required":[],"description":"Request parameters for searching and filtering designer users with pagination and sorting."},"ITaskManagementDesigner.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address of the designer."},"password_hash":{"type":"string","description":"Hashed password for secure authentication."},"name":{"type":"string","description":"Full name of the designer."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion if applicable."}},"required":[],"description":"Update payload for designer user including optional email, password hash, name, timestamps, and soft delete flag."},"ITaskManagementQa.IRequest":{"type":"object","properties":{"email":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search filter by email with partial matching."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search filter by name with partial matching."},"created_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by creation timestamp, ISO 8601 string."},"updated_at":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by last update timestamp, ISO 8601 string."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Pagination: limit per page."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting criteria."}},"required":[],"description":"Parameters for filtering, sorting, and pagination when searching QA users."},"ITaskManagementQa.IUpdate":{"type":"object","properties":{"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the QA user record was last updated."}},"required":[],"description":"Update model for Quality Assurance (QA) users.\n\nThis type includes the last updated timestamp as an optional field.\n\nOnly the properties defined here are allowed in the update model.\n"},"ITaskManagementTasks.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","default":1,"description":"Optional page number."},{"type":"null"}],"description":"Optional page number."},"limit":{"oneOf":[{"type":"number","default":100,"description":"Optional limit of entries per page."},{"type":"null"}],"description":"Optional limit of entries per page."},"search":{"oneOf":[{"type":"string","description":"Optional search keyword to filter tasks."},{"type":"null"}],"description":"Optional search keyword to filter tasks."},"status_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional status filter (UUID)."},{"type":"null"}],"description":"Optional status filter (UUID)."},"priority_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional priority filter (UUID)."},{"type":"null"}],"description":"Optional priority filter (UUID)."},"creator_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional creator filter (UUID)."},{"type":"null"}],"description":"Optional creator filter (UUID)."},"project_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional project filter (UUID)."},{"type":"null"}],"description":"Optional project filter (UUID)."},"board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional board filter (UUID)."},{"type":"null"}],"description":"Optional board filter (UUID)."},"sort_by":{"oneOf":[{"type":"string","description":"Optional sorting field."},{"type":"null"}],"description":"Optional sorting field."},"sort_order":{"oneOf":[{"const":"asc","description":"Optional sorting order; 'asc' (ascending) or 'desc' (descending)."},{"const":"desc","description":"Optional sorting order; 'asc' (ascending) or 'desc' (descending)."},{"type":"null"}],"description":"Optional sorting order; 'asc' (ascending) or 'desc' (descending)."}},"required":[],"description":"Request type for searching and paginating tasks.\n\nIncludes pagination, filtering by task attributes, and sorting options.\n"},"ITaskManagementTask":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the task"},"status_id":{"type":"string","format":"uuid","description":"Status ID referencing the task status"},"priority_id":{"type":"string","format":"uuid","description":"Priority ID referencing the task priority"},"creator_id":{"type":"string","format":"uuid","description":"Creator ID of the task"},"project_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Project ID this task belongs to (optional)"},"board_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Board ID this task belongs to (optional)"},"title":{"type":"string","description":"Task title (non-empty string)"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Task description (optional)"},"status_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Status name (denormalized, optional)"},"priority_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Priority name (denormalized, optional)"},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date and time (optional)"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (optional)"},"deletedBy":{"oneOf":[{"type":"string","format":"uuid","description":"User ID who deleted the record"},{"type":"null"}],"description":"User ID who deleted the record"}},"required":["id","status_id","priority_id","creator_id","title","created_at","updated_at"],"description":"Primary table representing the core tasks in the system, including title, description, status, priority, due date, creator info, and timestamps. Tasks have independent lifecycle management and relate to statuses, priorities, projects, and boards via foreign keys. Supports soft delete and audit fields."},"ITaskManagementTask.ICreate":{"type":"object","properties":{"status_id":{"type":"string","format":"uuid","description":"UUID reference to the status of the task."},"priority_id":{"type":"string","format":"uuid","description":"UUID reference to the priority of the task."},"creator_id":{"type":"string","format":"uuid","description":"UUID of the user who created the task."},"project_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID reference to the project the task belongs to."},{"type":"null"}],"description":"Optional UUID reference to the project the task belongs to."},"board_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID reference to the board the task belongs to."},{"type":"null"}],"description":"Optional UUID reference to the board the task belongs to."},"title":{"type":"string","minLength":1,"description":"Title of the task, must be a non-empty string."},"description":{"oneOf":[{"type":"string","description":"Optional description of the task."},{"type":"null"}],"description":"Optional description of the task."},"status_name":{"oneOf":[{"type":"string","description":"Optional name representing the task status."},{"type":"null"}],"description":"Optional name representing the task status."},"priority_name":{"oneOf":[{"type":"string","description":"Optional name representing the task priority."},{"type":"null"}],"description":"Optional name representing the task priority."},"due_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional due date of the task in ISO 8601 date-time format."},{"type":"null"}],"description":"Optional due date of the task in ISO 8601 date-time format."}},"required":["status_id","priority_id","creator_id","title"],"description":"Creation payload for a new task.\n\nThis includes required references to status, priority, and creator as well as mandatory title.\n\nOptional descriptive and relational fields are included.\n\nValues must comply with schema relationships and data formats."},"ITaskManagementTask.IUpdate":{"type":"object","properties":{"status_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Status ID referencing a valid task status"},"priority_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Priority ID referencing task priority"},"project_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Project ID this task belongs to (optional)"},"board_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Board ID this task belongs to (optional)"},"title":{"type":"string","description":"Task title"},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Task description"},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date (optional, ISO 8601 date-time string)"}},"description":"Update payload for Task entity.","required":[]},"ITaskManagementTaskAssignmentArray":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ITaskManagementTaskAssignment"},"description":"Array of task assignments"}},"required":["data"],"description":"Array container for multiple task assignments."},"ITaskManagementTaskAssignment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the task assignment."},"task_id":{"type":"string","format":"uuid","description":"Identifier of the related task."},"assignee_id":{"type":"string","format":"uuid","description":"Identifier of the assigned user."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp when the assignment was made."}},"required":["id","task_id","assignee_id","assigned_at"],"description":"Task assignment entity representing a user's assignment to a task.\n\nThis schema includes IDs for the assignment, task, and assignee user, plus the timestamp of the assignment.\n\nIt is used to track which user is responsible for a given task in the task management system."},"ITaskManagementTaskAssignment.ICreate":{"type":"object","properties":{"task_id":{"type":"string","format":"uuid","description":"Task ID to assign"},"assignee_id":{"type":"string","format":"uuid","description":"Assignee ID to assign to"},"assigned_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of assignment (optional, usually auto-set by system)"}},"required":["task_id","assignee_id"],"description":"Creation payload for a task assignment."},"ITaskManagementTaskAssignment.IUpdate":{"type":"object","properties":{"task_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional update of the task ID associated with the assignment."},"assignee_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional update of the assignee user ID."},"assigned_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional update of the timestamp when the assignment was made."}},"required":[],"description":"Request body for updating a task assignment.\n\nAll properties are optional and can be null.\n\nUsed for PATCH or PUT methods to modify task assignment details."},"ITaskManagementTaskComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key identifier for the task comment.\n\nUnique UUID string identifying the comment within the system."},"task_id":{"type":"string","format":"uuid","description":"Identifier of the task this comment belongs to.\n\nThis GUID links the comment to a specific task entity."},"commenter_id":{"type":"string","format":"uuid","description":"Identifier of the user who made the comment.\n\nReferences a developer user identifier."},"comment_body":{"type":"string","description":"Body text content of the comment.\n\nContains the detailed message or note added to the task."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking when the comment was created.\n\nISO 8601 date-time string representing creation time."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp marking the last update of the comment.\n\nISO 8601 date-time string representing the last modification time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp indicating if the comment was deleted.\n\nNull if active, else ISO 8601 date-time string when deleted."}},"required":["id","task_id","commenter_id","comment_body","created_at","updated_at"],"description":"Represents a comment made on a task by a developer user.\n\nIncludes content, author reference, timestamps, and soft delete information."},"ITaskManagementTaskComment.ICreate":{"type":"object","properties":{"task_id":{"type":"string","format":"uuid","description":"ID of the task the comment is associated with."},"commenter_id":{"type":"string","format":"uuid","description":"ID of the commenter making the comment."},"comment_body":{"type":"string","description":"Content body of the comment."}},"required":["task_id","commenter_id","comment_body"],"description":"Request body schema for creating a new comment on a task.\n\nContains the task ID, commenter ID, and the comment content.\n\nAll properties are required."},"ITaskManagementTaskComment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for paginated results."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of records per page."},"task_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter comments by task UUID."},"commenter_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter comments by commenter UUID."},"comment_body":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter comments by partial or full comment text."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter comments created after this timestamp."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter comments created before this timestamp."},"updated_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter comments updated after this timestamp."},"updated_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter comments updated before this timestamp."}},"required":[],"description":"Request body schema for filtering and paginating task comments.\n\nSupports optional filters such as task ID, commenter ID, partial comment text, and creation/update date ranges.\n\nAlso includes pagination properties page and limit for controlling result size."},"ITaskManagementTaskStatusChange.ICreate":{"type":"object","properties":{"task_id":{"type":"string","format":"uuid","description":"Foreign key referencing the task."},"new_status_id":{"type":"string","format":"uuid","description":"Foreign key referencing new task status."},"changed_at":{"type":"string","format":"date-time","description":"Timestamp when the status was changed."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment explaining the status change reason."}},"required":["task_id","new_status_id","changed_at"],"description":"Request body for creating a new task status change record. Includes required references and timestamp. Optional comment is nullable."},"ITaskManagementTaskStatusChange.IRequest":{"type":"object","properties":{"task_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter for related task ID."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limit number of items per page."}},"required":[],"description":"Request body parameters to filter, paginate and sort task status change list."},"ITaskManagementTaskStatusChange.IUpdate":{"type":"object","properties":{"new_status_id":{"type":"string","format":"uuid","description":"The ID of the new task status.\n\nThis property specifies the unique identifier of the status being applied to the task.\n\nIt must reference a valid task status record in the system."},"changed_at":{"type":"string","format":"date-time","description":"ISO 8601 date-time when the status change occurred.\n\nThis timestamp records exactly when the status modification was made in the system.\n\nIt must follow correct date-time format."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment describing the status change.\n\nThis field allows the user or system to note explanations or reasons for the status update.\n\nNullable in case no comment is provided."}},"required":[],"description":"Update payload for task status change records.\n\nUsed to modify an existing status change entry with new values for status, timestamp, or comment."},"ITaskManagementTaskStatusChange":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the task status change record."},"task_id":{"type":"string","format":"uuid","description":"Foreign key referencing the associated task."},"new_status_id":{"type":"string","format":"uuid","description":"References an existing status entity."},"changed_at":{"type":"string","format":"date-time","description":"Timestamp when the status was changed."},"comment":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional comment explaining the reason for status change."}},"required":["id","task_id","new_status_id","changed_at"],"description":"Record of a change to a task's status including references to the task and the new status, timestamp, and optional comment."},"ITaskManagementTaskComment.IUpdate":{"type":"object","properties":{"comment_body":{"oneOf":[{"type":"string","description":"Optional updated comment content body.\n\nMay be omitted if no change in content."},{"type":"null"}],"description":"Optional updated comment content body.\n\nMay be omitted if no change in content."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional update timestamp.\n\nIf provided, ISO 8601 date-time string representing update time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional soft delete timestamp.\n\nSet to ISO 8601 date-time string to soft-delete; null for active."}},"required":[],"description":"Request body schema for updating a task comment.\n\nAllows partial updates of comment content, update timestamp, and soft deletion."},"ITaskManagementProject.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination control.\n\nThis specifies which page of results the client requests.\n\nOptional; if omitted or null, defaults to the first page."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Number of items per page for paginated query results.\n\nControls the maximum number of records returned in the response.\n\nOptional; if omitted or null, defaults to a sensible system-defined limit."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search text for filtering project records.\n\nEnables matching projects by keywords or text queries.\n\nNullable if no search filter is applied."},"code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter projects by their unique code.\n\nAllows precise filtering for a specific project code.\n\nNullable if not filtered by code."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter projects by name.\n\nEnables clients to find projects by matching project names.\n\nNullable if no name filter is applied."},"owner_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter projects by owner ID.\n\nAllows queries scoped to projects owned by a particular user.\n\nNullable if no owner filter is applied."}},"required":[],"description":"Request parameters for searching, filtering, and paginating projects.\n\nIncludes page number, page size, and optional filtering fields for project attributes."},"ITaskManagementProject":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the project. Represents the primary key in the database. Must be a UUID string."},"owner_id":{"type":"string","format":"uuid","description":"Reference to the owner of the project. Must be a UUID string referencing a TPM user."},"code":{"type":"string","description":"Unique code of the project. This code uniquely identifies a project among all others."},"name":{"type":"string","description":"Descriptive name of the project."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the project."},"created_at":{"type":"string","format":"date-time","description":"Timestamp indicating when the project was created. This is in ISO 8601 date-time string format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last update of the project. ISO 8601 date-time string format."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion. Nullable ISO 8601 date-time string for soft delete marker."}},"required":["id","owner_id","code","name","created_at","updated_at"],"description":"TaskManagementProject entity records project information including unique ID, owner, unique code, name, description, and timestamps for creation, update, and soft deletion."},"ITaskManagementProject.ICreate":{"type":"object","properties":{"owner_id":{"type":"string","format":"uuid","description":"Unique user ID of the project owner.\n\nThis references the TPM user who owns the project.\n\nIt is required to establish project ownership and authorization."},"code":{"type":"string","description":"Unique code identifier for the project to be created.\n\nMust be unique within the system and is used for referencing the project."},"name":{"type":"string","description":"Human-readable project name.\n\nUsed to identify the project in UI and API responses."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description for the new project.\n\nAllows providing context or scope information.\n\nNullable if no description is available."}},"required":["owner_id","code","name"],"description":"Request payload for creating a new project entity in the system.\n\nMust include project owner, code, and name. Description is optional."},"ITaskManagementProject.IUpdate":{"type":"object","properties":{"owner_id":{"type":"string","format":"uuid","description":"Reference to the owner of the project. Must be a UUID string referencing a TPM user."},"code":{"type":"string","description":"Unique code of the project. This code uniquely identifies a project among all others."},"name":{"type":"string","description":"Descriptive name of the project."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the project."}},"required":[],"description":"Request type for updating TaskManagementProject. Partial update allowing setting owner, code, name, and description."},"ITaskManagementBoard.IRequest":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter by board name."},"owner_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by owner_id (UUID string)."},"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional pagination page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional number of items per page."},"sortBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort field, e.g., 'name', 'created_at'"},"sortDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sort direction: 'asc' or 'desc'."}},"required":[],"description":"Request object for searching and paginating TaskManagementBoard entities. Supports filters like name and owner_id, pagination, and sorting options."},"ITaskManagementBoard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"project_id":{"type":"string","format":"uuid","description":"Associated project reference. {@link task_management_projects.id}."},"owner_id":{"type":"string","format":"uuid","description":"Board owner user reference. {@link task_management_tpm.id} or equivalent user table."},"code":{"type":"string","description":"Unique board code within the project."},"name":{"type":"string","description":"Descriptive name of the board."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the board."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion."}},"required":["id","project_id","owner_id","code","name","created_at","updated_at"],"description":"Board entity representing logical groupings of tasks within projects.\n\nBoards have unique codes, descriptive names, project associations, owners, and temporal audit fields.\n\nThey enable task organization and management distinct from projects and support soft deletion."},"ITaskManagementBoard.ICreate":{"type":"object","properties":{"project_id":{"type":"string","format":"uuid","description":"Project ID this board belongs to. Required for board creation."},"owner_id":{"type":"string","format":"uuid","description":"Owner ID of the board. Required - references TPM user."},"code":{"type":"string","description":"Unique code for the board within the project. Required."},"name":{"type":"string","description":"Human-readable name of the board. Required."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description."}},"required":["project_id","owner_id","code","name"],"description":"Request type to create a new TaskManagementBoard entity, requiring project ID, owner ID, unique code, and name, with optional description."},"ITaskManagementBoardMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"board_id":{"type":"string","format":"uuid","description":"Associated board reference."},"user_id":{"type":"string","format":"uuid","description":"Member user reference."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion."}},"required":["id","board_id","user_id","created_at","updated_at"],"description":"Board membership entity representing users associated with specific boards, with audit information including creation, update, and optional soft deletion timestamps."},"ITaskManagementBoardMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limitation of records per a page."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sorting field and direction, e.g., 'name asc'."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search keyword for filtering members."}},"required":[],"description":"Request parameters for searching and paginating board members.\n\nIncludes pagination, sorting, and keyword-based filtering options."},"ITaskManagementBoardMember.ICreate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"Associated board reference."},"user_id":{"type":"string","format":"uuid","description":"Member user reference."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion."}},"required":["board_id","user_id","created_at","updated_at"],"description":"Request payload for creating a new board member association, linking a user to a board with audit timestamps. Optional soft deletion timestamp may be specified."},"ITaskManagementBoard.IUpdate":{"type":"object","properties":{"project_id":{"type":"string","format":"uuid","description":"Associated project reference. {@link task_management_projects.id}."},"owner_id":{"type":"string","format":"uuid","description":"Board owner user reference. {@link task_management_tpm.id} or equivalent user table."},"code":{"type":"string","description":"Unique board code within the project."},"name":{"type":"string","description":"Descriptive name of the board."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the board."}},"required":[],"description":"Update data for an existing board.\n\nAllows modification of project association, owner, code, name, and description.\n\nAll fields are optional for partial updates."},"ITaskManagementBoardMember.IUpdate":{"type":"object","properties":{"board_id":{"type":"string","format":"uuid","description":"Associated board reference."},"user_id":{"type":"string","format":"uuid","description":"Member user reference."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion."}},"required":[],"description":"Request payload for updating board member information with audit timestamps and optional soft deletion timestamp. All fields are optional except for required presence of created_at and updated_at if provided."},"ITaskManagementProjectMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the project member record."},"project_id":{"type":"string","format":"uuid","description":"UUID of the associated project."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user who is member of the project."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the project member record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the project member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if not deleted."}},"required":["id","project_id","user_id","created_at","updated_at"],"description":"Project membership represents the link between users and projects, recording user inclusion in projects with creation and update audit timestamps. Supports soft deletion via optional deleted_at timestamp."},"ITaskManagementProjectMember.ICreate":{"type":"object","properties":{"project_id":{"type":"string","format":"uuid","description":"Associated project reference."},"user_id":{"type":"string","format":"uuid","description":"Member user reference."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp indicating soft deletion."}},"required":["project_id","user_id","created_at","updated_at"],"description":"Request payload for creating a new project member association, linking a user to a project with audit timestamps. Optional soft deletion timestamp may be included."},"ITaskManagementProjectMember.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Limit of records per page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term or filter for project members."}},"required":[],"description":"Request payload for searching and paginating project member associations with optional filters and pagination parameters."},"ITaskManagementProjectMember.IUpdate":{"type":"object","properties":{"project_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional new project UUID or null to unset the association."},"user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional new user UUID or null to unset the association."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional updated soft delete timestamp or null to clear deletion."}},"required":[],"description":"Update interface for project membership allowing optional update of project or user references and soft deletion timestamp."},"ITaskManagementNotification.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination, optional."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit of items per page, optional."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string for filtering notifications, optional."},"notification_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter notifications by type such as 'assignment', 'status_change', etc., optional."},"is_read":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter notifications by read status (true or false), optional."}},"required":[],"description":"Parameters for requesting filtered and paginated notification lists."},"ITaskManagementNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the notification record."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user to whom the notification is addressed."},"task_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the task related to this notification."},"notification_type":{"type":"string","description":"Type of notification, e.g., 'assignment', 'status_change', 'comment', 'general'."},"is_read":{"type":"boolean","description":"Flag indicating if the notification has been read."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read, null if unread."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was deleted (soft delete), null if not deleted."}},"required":["id","user_id","notification_type","is_read","created_at","updated_at"],"description":"Notification entity representing user alerts, referenced tasks, types, read status, and audit timestamps."},"ITaskManagementNotification.IUpdate":{"type":"object","properties":{"is_read":{"type":"boolean","description":"Update flag indicating read status of the notification."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking when the notification was read, null if clearing the read status."}},"required":[],"description":"Interface to update read status and timestamp of a notification record."},"ITaskManagementNotificationPreferences.IRequest":{"type":"object","properties":{"preference_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Notification preference key, e.g. 'assignment', 'status_change', 'comment', indicating the type of notification this preference controls."},"enabled":{"oneOf":[{"type":"boolean","description":"Indicates if the notification preference is enabled or disabled."},{"type":"null"}],"description":"Indicates if the notification preference is enabled or disabled."},"delivery_method":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred method for notification delivery, such as 'email', 'push', or 'sms'."},"page":{"oneOf":[{"type":"integer","format":"uint32","description":"Page number."},{"type":"null"}],"description":"Page number."},"limit":{"oneOf":[{"type":"integer","format":"uint32","description":"Limitation of records per a page."},{"type":"null"}],"description":"Limitation of records per a page."}},"description":"Search criteria and pagination parameters for notification preference filtering","required":[]},"ITaskManagementNotificationPreferences":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"user_id":{"type":"string","format":"uuid","description":"User owning these notification preferences, referencing their role table such as user_id."},"preference_key":{"type":"string","description":"Notification preference key, e.g. 'assignment', 'status_change', 'comment', indicating the type of notification this preference controls."},"enabled":{"type":"boolean","description":"Indicates if the notification preference is enabled or disabled."},"delivery_method":{"type":"string","description":"Preferred method for notification delivery, such as 'email', 'push', or 'sms'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the preference was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the preference was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the preference was deleted (soft delete). Nullable if not deleted."}},"required":["id","user_id","preference_key","enabled","delivery_method","created_at","updated_at"],"description":"Notification preference record specifying user opt-in and delivery methods for various notification types within the task management system."},"ITaskManagementNotificationPreferences.IUpdate":{"type":"object","properties":{"preference_key":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Notification preference key, e.g. 'assignment', 'status_change', 'comment', indicating the type of notification this preference controls."},"enabled":{"type":"boolean","description":"Indicates if the notification preference is enabled or disabled."},"delivery_method":{"type":"string","description":"Preferred method for notification delivery, such as 'email', 'push', or 'sms'."}},"required":[],"description":"Request to update notification preference with optional key, enabled status, and delivery method."},"ITaskManagementTaskStatuses.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"code":{"type":"string","description":"Unique code representing the task status, e.g., 'to_do', 'in_progress', 'done'."},"name":{"type":"string","description":"Human-readable status name, e.g., 'To Do', 'In Progress', 'Done'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed explanation of the status and its significance in the workflow."}},"required":["id","code","name"],"description":"Simplified summary view of a task status entity representing key properties like the unique code, name, and optional description."},"ITaskManagementPriorities.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the task priority."},"code":{"type":"string","description":"Unique code representing priority level."},"name":{"type":"string","description":"Human-friendly priority name."}},"required":["id","code","name"],"description":"Summary of a task priority, including its ID, code, and display name."},"ITaskManagementTpm.ISummary":{"type":"object","properties":{"email":{"type":"string","description":"Email address for login and contact."},"id":{"type":"string","format":"uuid","description":"Unique identifier for the TPM user."},"name":{"type":"string","description":"Full name of the TPM user."}},"required":["id","email","name"],"description":"Summary of a Technical Project Manager (TPM) user, including ID, email, and name."},"ITaskManagementPmo.ISummary":{"type":"object","properties":{"email":{"type":"string","description":"Email address for login and contact."},"id":{"type":"string","format":"uuid","description":"Unique identifier for the PMO user."},"name":{"type":"string","description":"Full name of the PMO user."}},"required":["id","email","name"],"description":"Summary of a Project Management Officer (PMO) user, including ID, email, and name."},"ITaskManagementDeveloper.ISummary":{"type":"object","properties":{"email":{"type":"string","description":"Email address for login and contact."},"id":{"type":"string","format":"uuid","description":"Unique identifier for the developer user."},"name":{"type":"string","description":"Full name of the developer user."}},"required":["id","email","name"],"description":"Summary of a Developer user, including ID, email, and name."},"ITaskManagementDesigner.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the designer user"},"email":{"type":"string","format":"email","description":"Email address of the designer user"},"name":{"type":"string","description":"Full name of the designer user"}},"required":["id","email","name"],"description":"Summary view of Designer user including ID, email, and name."},"ITaskManagementQa.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the QA user"},"email":{"type":"string","format":"email","description":"Email address of the QA user"},"name":{"type":"string","description":"Full name of the QA user"}},"required":["id","email","name"],"description":"Summary view of QA user including ID, email, and name."},"ITaskManagementTasks.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the task"},"title":{"type":"string","description":"Title of the task"},"status_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Denormalized status name (optional)"},"priority_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Denormalized priority name (optional)"},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date and time (optional)"}},"required":["id","title"],"description":"Summary view of task including essential fields like id, title, and optionally status and priority names, and due date."},"ITaskManagementTaskComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the task comment"},"comment_body":{"type":"string","description":"Content of the comment"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created"}},"required":["id","comment_body","created_at"],"description":"Summary view of task comment including id, comment content, and creation timestamp."},"ITaskManagementProject.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the project in UUID format.\n\nProvides the primary key for project reference and linking."},"code":{"type":"string","description":"Unique project code identifier.\n\nUsed for project identification in business processes."},"name":{"type":"string","description":"Project name, descriptive and non-empty.\n\nMain display field for projects in listings."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the project was created (ISO 8601).\n\nUsed for audit and history tracking."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the project was last updated (ISO 8601).\n\nReflects last modification time."}},"required":["id","code","name","created_at","updated_at"],"description":"Summary type for Task Management Project entity.\n\nRepresents the minimal set of properties useful for listing and brief display of project data.\n\nIncludes essential identification and display fields.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementBoard.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the board in UUID format.\n\nPrimary key reference for the board."},"project_id":{"type":"string","format":"uuid","description":"The project ID this board belongs to, in UUID format.\n\nRelations between boards and projects allow hierarchical organization."},"code":{"type":"string","description":"Unique code for the board within the project.\n\nSupports business distinction of boards in project context."},"name":{"type":"string","description":"Board name.\n\nHuman-readable title for display and management."},"created_at":{"type":"string","format":"date-time","description":"Board creation timestamp.\n\nUsed for auditing and temporal queries."},"updated_at":{"type":"string","format":"date-time","description":"Board last update timestamp.\n\nReflects last modification date."}},"required":["id","project_id","code","name","created_at","updated_at"],"description":"Summary type for Task Management Board entity.\n\nRepresents brief overview properties suitable for board lists.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementBoardMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the membership record (UUID).\n\nPrimary key of the board membership record."},"board_id":{"type":"string","format":"uuid","description":"Identifier of the associated board (UUID).\n\nLinks membership record to the board entity."},"user_id":{"type":"string","format":"uuid","description":"User identifier who is a member of the board (UUID).\n\nIdentity reference for the member user."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the membership was created.\n\nAudit and tracking purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the membership was last updated.\n\nReflects last membership update."}},"required":["id","board_id","user_id","created_at","updated_at"],"description":"Summary type for Task Management Board Member entity.\n\nRepresents the membership details at minimum, useful for listing board members.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"},"ITaskManagementNotification.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique notification identifier (UUID).\n\nPrimary key for each notification record."},"user_id":{"type":"string","format":"uuid","description":"User ID who receives the notification (UUID).\n\nLinks notification to the target user."},"task_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related task ID this notification pertains to (UUID or null).\n\nMay be null for general or system notifications."},"notification_type":{"type":"string","description":"Notification type such as 'assignment', 'status_change', 'comment', or 'general'.\n\nSupports notification categorization for filtering and display."},"is_read":{"type":"boolean","description":"Flag indicating if the notification has been read.\n\nDetermines visual status and read receipts."},"read_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the notification was read (nullable).\n\nNull if unread."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was created.\n\nUsed for sorting and audit."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the notification was last updated.\n\nUsed for tracking updates."}},"required":["id","user_id","task_id","notification_type","is_read","read_at","created_at","updated_at"],"description":"Summary type for Task Management Notification entity.\n\nContains minimal properties needed for notification lists.\n\n@author AutoBE - https://github.com/wrtnlabs/autobe"}}}}