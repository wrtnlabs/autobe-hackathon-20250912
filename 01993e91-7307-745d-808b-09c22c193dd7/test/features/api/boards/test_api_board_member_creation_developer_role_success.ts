import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { ITaskManagementBoard } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementBoard";
import type { ITaskManagementBoardMember } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementBoardMember";
import type { ITaskManagementDeveloper } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementDeveloper";
import type { ITaskManagementPmo } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementPmo";
import type { ITaskManagementProject } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementProject";
import type { ITaskManagementTpm } from "@ORGANIZATION/PROJECT-api/lib/structures/ITaskManagementTpm";

/**
 * This test verifies the creation of a board member by an authenticated
 * developer within a task management context. It ensures that the developer
 * user is registered and logged in to obtain proper authentication tokens. Then
 * it creates dependent entities: a TPM user, a project owned by this TPM user,
 * and a board under this project. Finally, the developer user is added as a
 * member of the board via the developer board member creation API.
 *
 * The test confirms that IDs propagate correctly between calls, timestamps are
 * properly recorded, and the user-board association reflects the correct
 * references. It includes user registration and login workflows for both
 * developer and TPM roles, project creation for PMO role, and switching
 * authentication contexts correctly. Error scenarios and invalid inputs are not
 * implemented, as the focus is on a successful creation flow with accurate data
 * integrity. The test uses realistic and format-compliant data generated by
 * typia and RandomGenerator utilities, with strict type validation using
 * typia.assert().
 *
 * This comprehensive scenario validates cross-role API interactions,
 * authorization token propagation, and data linkage integrity crucial for task
 * management multi-actor environments.
 */
export async function test_api_board_member_creation_developer_role_success(
  connection: api.IConnection,
) {
  // 1. Register a developer user
  const developerCreateBody = {
    email: RandomGenerator.alphaNumeric(6) + "@example.com",
    password_hash: RandomGenerator.alphaNumeric(12),
    name: RandomGenerator.name(),
  } satisfies ITaskManagementDeveloper.ICreate;
  const developerUser = await api.functional.auth.developer.join(connection, {
    body: developerCreateBody,
  });
  typia.assert(developerUser);

  // 2. Developer login
  const developerLoginBody = {
    email: developerCreateBody.email,
    password: developerCreateBody.password_hash,
  } satisfies ITaskManagementDeveloper.ILogin;
  const developerAuth = await api.functional.auth.developer.login(connection, {
    body: developerLoginBody,
  });
  typia.assert(developerAuth);

  // 3. Register a TPM user
  const tpmCreateBody = {
    email: RandomGenerator.alphaNumeric(6) + "@example.com",
    password: RandomGenerator.alphaNumeric(12),
    name: RandomGenerator.name(),
  } satisfies ITaskManagementTpm.IJoin;
  const tpmUser = await api.functional.auth.tpm.join(connection, {
    body: tpmCreateBody,
  });
  typia.assert(tpmUser);

  // 4. TPM login
  const tpmLoginBody = {
    email: tpmCreateBody.email,
    password: tpmCreateBody.password,
  } satisfies ITaskManagementTpm.ILogin;
  const tpmAuth = await api.functional.auth.tpm.login(connection, {
    body: tpmLoginBody,
  });
  typia.assert(tpmAuth);

  // 5. Register a PMO user
  const pmoCreateBody = {
    email: RandomGenerator.alphaNumeric(6) + "@example.com",
    password: RandomGenerator.alphaNumeric(12),
    name: RandomGenerator.name(),
  } satisfies ITaskManagementPmo.IJoin;
  const pmoUser = await api.functional.auth.pmo.join(connection, {
    body: pmoCreateBody,
  });
  typia.assert(pmoUser);

  // 6. PMO login
  const pmoLoginBody = {
    email: pmoCreateBody.email,
    password: pmoCreateBody.password,
  } satisfies ITaskManagementPmo.ILogin;
  const pmoAuth = await api.functional.auth.pmo.login(connection, {
    body: pmoLoginBody,
  });
  typia.assert(pmoAuth);

  // 7. Create a TPM user record in the system, independent from join/login above (create)
  // We'll create a TPM user record to own projects and boards.
  const tpmCreateData = {
    email: RandomGenerator.alphaNumeric(6) + "@example.com",
    password_hash: RandomGenerator.alphaNumeric(12),
    name: RandomGenerator.name(),
  } satisfies ITaskManagementTpm.ICreate;
  const tpmEntity =
    await api.functional.taskManagement.tpm.taskManagement.tpms.create(
      connection,
      { body: tpmCreateData },
    );
  typia.assert(tpmEntity);

  // 8. Create a project owned by the TPM user
  const projectCreateBody = {
    owner_id: tpmEntity.id,
    code: RandomGenerator.alphaNumeric(8),
    name: RandomGenerator.name(),
    description: null,
  } satisfies ITaskManagementProject.ICreate;
  const project = await api.functional.taskManagement.pmo.projects.create(
    connection,
    { body: projectCreateBody },
  );
  typia.assert(project);

  // 9. Create a board in the project owned by TPM user
  const boardCreateBody = {
    project_id: project.id,
    owner_id: tpmEntity.id,
    code: RandomGenerator.alphaNumeric(8),
    name: RandomGenerator.name(),
    description: null,
  } satisfies ITaskManagementBoard.ICreate;
  const board = await api.functional.taskManagement.tpm.projects.boards.create(
    connection,
    { projectId: project.id, body: boardCreateBody },
  );
  typia.assert(board);

  // 10. Create a board member entry with the developer user as member
  const now = new Date().toISOString();
  const boardMemberCreateBody = {
    board_id: board.id,
    user_id: developerUser.id,
    created_at: now,
    updated_at: now,
    deleted_at: null,
  } satisfies ITaskManagementBoardMember.ICreate;

  const boardMember =
    await api.functional.taskManagement.developer.boards.members.create(
      connection,
      { boardId: board.id, body: boardMemberCreateBody },
    );
  typia.assert(boardMember);

  // 11. Validate result properties
  TestValidator.equals(
    "boardMember board_id equals board.id",
    boardMember.board_id,
    board.id,
  );
  TestValidator.equals(
    "boardMember user_id equals developerUser.id",
    boardMember.user_id,
    developerUser.id,
  );
  TestValidator.predicate(
    "boardMember created_at is ISO string",
    typeof boardMember.created_at === "string" &&
      boardMember.created_at.length > 0,
  );
  TestValidator.predicate(
    "boardMember updated_at is ISO string",
    typeof boardMember.updated_at === "string" &&
      boardMember.updated_at.length > 0,
  );
}
