{"operations":[{"specification":"This API operation allows guest users to register an account with temporary privileges to access the specialty coffee log service. The operation is implemented on the specialty_coffee_log_guests table, which contains fields such as id, ip_address, user_agent, and timestamps for creation, update, and soft deletion. Upon successful registration, a JWT-based authorized response is returned for the guest role. This join (registration) does not require prior authentication and allows guests to receive temporary tokens for limited usage.\n\nThis operation is public and does not require prior login credentials. It does not involve password or email fields as the guest table identifies users by IP and user agent.\n\nThe guest role cannot perform login because they do not have credentials.\n\nThe refresh operation allows a guest to renew their temporary access tokens using a valid refresh token.\n\nNo additional operations like password reset or email verification are supported by the schema for guests.\n\nThis API operation covers essential authentication flows suitable for guest users as per their role kind \"guest\" and schema capabilities.","authorizationType":"join","description":"Registers a new guest user account for temporary access to the Specialty Coffee Log service. The guest is identified by IP address and user agent, stored in the specialty_coffee_log_guests table.\n\nThe operation creates a new guest record with the required fields: ip_address and optional user_agent. Upon successful registration, the system returns authorized tokens encapsulated in the IAuthSpecialtyCoffeeLogGuest.IAuthorized response.\n\nGuest accounts do not require passwords or emails and have a soft deletion mechanism using \"deleted_at\".\n\nThis join endpoint does not require authentication and is accessible publicly.\n\nRelated operations: refresh token is required to renew access after expiration.\n\nSecurity notes: Guests have limited access and no credential login capabilities.","summary":"Create guest user join operation based on specialty_coffee_log_guests table","parameters":[],"requestBody":{"description":"Payload to register a new guest user including IP address and optional user agent string.","typeName":"ISpecialtyCoffeeLogGuest.ICreate"},"responseBody":{"description":"Authorized response with JWT tokens and guest user info.","typeName":"ISpecialtyCoffeeLogGuest.IAuthorized"},"authorizationRole":"guest","name":"join","path":"/auth/guest/join","method":"post"},{"specification":"This API operation allows guest users to refresh their temporary JWT tokens. It uses the specialty_coffee_log_refresh_tokens table linked to guest users via sessions for token management.\n\nThe path parameter includes no user identifier because guests are identified via tokens. The refresh uses a valid refresh token provided in the request body.\n\nThe schema does not provide password or email for guest users; this operation strictly refreshes tokens.\n\nThis refresh operation uses the \"refresh\" authorizationType to distinguish token renewal.\n\nSecurity constraint: Only valid refresh tokens can renew access to prevent abuse.\n\nRelated operations: join to create a guest account and obtain initial tokens.\n\nThe role authorization is set to \"guest\" to enforce that only guest users access this endpoint.\n\nThis operation aligns with the role kind \"guest\" requirements.","authorizationType":"refresh","description":"Refresh guest user JWT tokens to maintain temporary access to the Specialty Coffee Log service.\n\nRequires a valid refresh token included in the request body to produce new access and refresh tokens.\n\nNo user credentials are needed other than the valid refresh token.\n\nThis endpoint is secured to guest users with valid tokens.\n\nRelated operations: join to register and receive the original tokens.\n\nSecurity: Tokens are rotated and managed to prevent unauthorized access.","summary":"Refresh tokens for guest user to renew temporary access","parameters":[],"requestBody":{"description":"Refresh token request payload containing the refresh token string.","typeName":"ISpecialtyCoffeeLogGuestRefreshToken.IRequest"},"responseBody":{"description":"Authorized JWT response with refreshed tokens and guest user info.","typeName":"ISpecialtyCoffeeLogGuest.IAuthorized"},"authorizationRole":"guest","name":"refresh","path":"/auth/guest/refresh","method":"post"},{"specification":"This API operation allows a member to register a new user account by providing necessary registration information such as email and password. It creates a new member record in the specialty_coffee_log_members table with unique email enforcement, stores a hashed password, and issues initial JWTs to the user. The operation is publicly accessible without requiring prior authentication.","authorizationType":"join","description":"The join operation for members enables new users to register with the system by supplying a valid email and password. The system verifies the uniqueness of the email in the specialty_coffee_log_members table and securely stores the password hash. Upon successful registration, the operation issues authorized JWT tokens encapsulated in IAuthorized response. This endpoint is essential for member onboarding and serves as the entry point into the service.\n\nThe operation interacts directly with the specialty_coffee_log_members table, enforcing unique email keys and storing creation and update timestamps. No user session is necessary for this, making it a public endpoint.\n\nUsers must provide a valid email format, and the password hashing logic is performed server-side, not exposed in the API. Validation errors or conflicts (such as email already registered) return appropriate HTTP error codes.\n\nSecurity considerations include ensuring that password hashes comply with industry standards and that tokens are securely generated and signed.\n\nThis operation complements login and refresh token operations to provide a full authentication lifecycle for members.","summary":"Register a new member account and issue JWT tokens based on specialty_coffee_log_members schema.","parameters":[],"requestBody":{"description":"Member registration info.","typeName":"ISpecialtyCoffeeLogMember.ICreate"},"responseBody":{"description":"Authorized member response containing JWT tokens.","typeName":"ISpecialtyCoffeeLogMember.IAuthorized"},"authorizationRole":"member","name":"join","path":"/auth/member/join","method":"post"},{"specification":"This API operation validates member credentials and authenticates the member, providing JWT access tokens on successful login. It verifies the supplied email and password against the specialty_coffee_log_members table. The login process involves checking the password hash and issuing a signed JWT token with associated refresh token for session management.","authorizationType":"login","description":"The login operation for members allows existing users to authenticate with valid email and password credentials. Upon successful verification against specialty_coffee_log_members, the system issues a JWT access token and refresh token encapsulated in IAuthorized response.\n\nIt enforces security by rejecting invalid credentials with HTTP 401 and ensuring token expiry policies are maintained. This endpoint is a public operation enabling member access to protected resources.\n\nThe operation integrates with token refresh mechanisms to maintain session continuity.\n\nPassword handling adheres to secure hashing and comparison methods as per specialty_coffee_log_members schema.\n\nThis operation is vital for access control and user session initialization.","summary":"Authenticate member and issue JWT tokens based on specialty_coffee_log_members schema.","parameters":[],"requestBody":{"description":"Member login credentials.","typeName":"ISpecialtyCoffeeLogMember.ILogin"},"responseBody":{"description":"Authorized member response containing JWT tokens.","typeName":"ISpecialtyCoffeeLogMember.IAuthorized"},"authorizationRole":"member","name":"login","path":"/auth/member/login","method":"post"},{"specification":"This API operation refreshes the JWT tokens for an authenticated member using a valid refresh token. It validates the refresh token against specialty_coffee_log_refresh_tokens associated with the member, ensuring the token was not revoked and is within the valid issuance period. On success, new access and refresh tokens are issued.","authorizationType":"refresh","description":"The refresh operation enables members to renew their JWT access tokens by presenting a valid refresh token stored in specialty_coffee_log_refresh_tokens table. The system verifies the token's validity, issuance date, and revocation status before issuing a new set of tokens encapsulated in IAuthorized response.\n\nThis operation is critical to maintaining user sessions without requiring re-authentication.\n\nRevoked or expired tokens result in appropriate authorization failure responses.\n\nIt ties into the login and join operations, completing the token lifecycle management for member authentication.\n\nSecurity measures ensure that refresh tokens are invalidated upon logout and password changes, preventing replay attacks.","summary":"Refresh JWT tokens for member using valid refresh token.","parameters":[],"requestBody":{"description":"Member refresh token data.","typeName":"ISpecialtyCoffeeLogMember.IRefresh"},"responseBody":{"description":"Authorized member response containing new JWT tokens.","typeName":"ISpecialtyCoffeeLogMember.IAuthorized"},"authorizationRole":"member","name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"This operation retrieves a filtered and paginated list of specialty coffee cafes from the specialty_coffee_log_cafes table in the Prisma schema. It supports advanced filtering, including search by name with case-insensitive and partial matching, ordering, pagination, and exclusion of soft deleted records (where deleted_at is null). The operation conforms to the role permissions by allowing public access (empty authorization roles). The request body type is ISpecialtyCoffeeLogCafe.IRequest and the response body is a paginated summary view ISpecialtyCoffeeLogPageISpecialtyCoffeeLogCafe.ISummary.","description":"Retrieve a filtered and paginated list of specialty coffee cafes. This operation enables users, including guests and members, to search cafes by name with case-insensitive partial matches and retrieve paginated results ordered alphabetically.\n\nThe operation interacts with the specialty_coffee_log_cafes table which contains the core cafe data, including name, address, contact info, opening hours, menu description, and photo URL. Soft deletion is supported and deleted records are excluded from search results.\n\nSecurity considerations: This endpoint is public and requires no authentication, allowing any user to browse and search cafes. Pagination parameters help ensure efficient data retrieval and responsiveness.\n\nRelated operations: cafe detail retrievals use GET /cafes/{cafeId}. Creation and update require authenticated member roles.\n\nExpected behavior includes validation of search terms, pagination limits, and ordering. Errors are handled by appropriate status codes for invalid requests.","path":"/specialtyCoffeeLog/cafes","method":"patch","summary":"Search and retrieve a filtered, paginated list of specialty coffee cafes","parameters":[],"requestBody":{"description":"Parameters for filtering, searching, pagination, and ordering cafes","typeName":"ISpecialtyCoffeeLogCafe.IRequest"},"responseBody":{"description":"Paginated list of specialty coffee cafe summaries matching the criteria","typeName":"IPageISpecialtyCoffeeLogCafe.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This operation retrieves detailed information about a specific specialty coffee cafe identified by {cafeId}. It accesses the specialty_coffee_log_cafes table in the Prisma schema and returns all core fields including address, contact info, opening hours, menu description, photo URL, and audit timestamps. Only records not soft deleted (deleted_at is null) are retrievable.\n\nThe operation requires no authentication, allowing any user, guest or member, to view cafe details.\n\nValidation includes verifying that the {cafeId} path parameter is a valid UUID corresponding to an existing record. Errors for not found or invalid ID result in appropriate HTTP error responses.\n\nThis complements the list operation and supports rich cafe browsing experience.","description":"Retrieve detailed information for a specialty coffee cafe by its unique identifier. This operation fetches all available information stored in the specialty_coffee_log_cafes table excluding soft deleted records.\n\nThe operation is public, requiring no authentication, and supports read-only access to detailed cafe data.\n\nSecurity considerations include prevention of data leakage of soft deleted or non-existent cafes.\n\nClients should handle 404 errors gracefully when an invalid or non-existent cafeId is provided.\n\nRelated operations include list retrieval and cafe data modification requiring authorization.\n\nExpected behavior includes strict validation of UUID path parameter and structured response.","path":"/specialtyCoffeeLog/cafes/{cafeId}","method":"get","summary":"Retrieve detail information of a specialty coffee cafe by ID","parameters":[{"name":"cafeId","description":"Unique identifier of the target specialty coffee cafe","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Specialty coffee cafe detailed information","typeName":"ISpecialtyCoffeeLogCafe"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new specialty coffee cafe record in the specialty_coffee_log_cafes table. It accepts required and optional fields including name, address, contact info, opening hours, menu description, and photo URL. The operation enforces the uniqueness of cafe name and sets audit timestamps for creation and update. Soft deletion fields are not supplied by the client.\n\nOnly authenticated members can perform this operation as it modifies core business data.\n\nValidation includes ensuring all required fields are provided and meet format constraints. Errors on uniqueness or invalid data are returned with proper HTTP status codes.\n\nThis operation enables users to expand the cafe catalog by adding new entries.","description":"Create a new specialty coffee cafe entry. This operation allows authenticated members to add new cafes with detailed information such as name, address, and optional contact info and description.\n\nThe operation verifies the uniqueness of the cafe name and rejects duplicates.\n\nSecurity considerations require authentication with member role.\n\nUpon success, the newly created cafe record is returned including system-generated timestamps.\n\nRelated operations include cafe list retrieval and updates.\n\nExpected validation includes required fields and format checking.","path":"/specialtyCoffeeLog/member/cafes","method":"post","summary":"Create a new specialty coffee cafe record","parameters":[],"requestBody":{"description":"Information required to create a new specialty coffee cafe","typeName":"ISpecialtyCoffeeLogCafe.ICreate"},"responseBody":{"description":"The created specialty coffee cafe record with full details","typeName":"ISpecialtyCoffeeLogCafe"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing specialty coffee cafe identified by {cafeId} with provided data fields such as name, address, contact info, opening hours, menu description, and photo URL. The update enforces uniqueness of the name and updates audit timestamps. Soft deletion handling is not applicable for this update operation.\n\nOnly authenticated members have permission to perform this update.\n\nValidation includes checking that the cafeId path parameter is a valid UUID and corresponds to an existing cafe, and that updated data respects uniqueness constraints.\n\nErrors such as not found or validation failures are returned with appropriate HTTP status codes.\n\nThis operation supports correction and maintenance of core cafe information.","description":"Update details of a specialty coffee cafe by its unique ID. Authenticated members can modify existing cafe records including all core fields.\n\nThe operation verifies the existence of the cafe and enforces name uniqueness.\n\nSecurity considerations include role-based access control limited to members.\n\nUpon success, the updated cafe record is returned.\n\nRelated operations include create and retrieve.\n\nExpected behavior includes parameter validation and error handling for missing or invalid data.","path":"/specialtyCoffeeLog/member/cafes/{cafeId}","method":"put","summary":"Update an existing specialty coffee cafe record","parameters":[{"name":"cafeId","description":"Unique identifier of the target specialty coffee cafe to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to update for the specialty coffee cafe","typeName":"ISpecialtyCoffeeLogCafe.IUpdate"},"responseBody":{"description":"The updated specialty coffee cafe record with full details","typeName":"ISpecialtyCoffeeLogCafe"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation permanently deletes a record from the specialty_coffee_log_cafes table by the given cafe ID. It is intended to be used by authorized users with admin or member role privileges to remove a cafe entry from the system. The cafe ID is passed as a path parameter and uniquely identifies the target cafe. No request body is required and no response body is returned on successful deletion.","path":"/specialtyCoffeeLog/member/cafes/{cafeId}","method":"delete","summary":"Delete a specialty coffee cafe by ID","description":"This API endpoint allows authorized users (admin or member role) to delete a specialty coffee cafe record by specifying its unique ID in the path parameter.\n\nThe cafe entity includes fields such as name, address, contact_info, opening_hours, menu_description, photo_url and timestamps. The deletion operation permanently removes the cafe entry from the database.\n\nGiven the administrative and data integrity impact of this operation, access control requires roles like admin or member to perform the action.\n\nNo request body is needed and no content is returned upon success. This operation complements the cafe creation and listing endpoints.","parameters":[{"name":"cafeId","description":"Unique identifier of the target specialty coffee cafe","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation retrieves a paginated, filtered list of coffee log summaries for a particular cafe, identified by cafeId, from the specialty_coffee_log_coffee_logs table. The patch method supports complex query request in the request body including pagination, search filters, sorting, and filtering by criteria such as member ID or star rating. Authorization ensures only member users can access coffee logs. The response returns a paged list of coffee log summary items.","path":"/specialtyCoffeeLog/member/cafes/{cafeId}/coffeeLogs","method":"patch","summary":"Search and retrieve coffee logs for a specified cafe","description":"This API endpoint retrieves coffee logs related to a specific cafe identified by cafeId. The request supports filtering and pagination parameters to control the results.\n\nCoffee logs contain information including bean name, star rating, tasting notes, and brewing method associated with the cafe and member who created them.\n\nOnly authenticated members can access this data. This operation complements others such as creating, retrieving, updating, and deleting coffee logs.\n\nThe request body accepts search parameters, while the response body returns a paged list of coffee log summary objects.","parameters":[{"name":"cafeId","description":"Unique identifier of the specialty coffee cafe for which to retrieve coffee logs","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter parameters for coffee logs","typeName":"ISpecialtyCoffeeLogCoffeeLogs.IRequest"},"responseBody":{"description":"Paged list of coffee log summaries matching filter criteria","typeName":"IPageISpecialtyCoffeeLogCoffeeLog.ISummary"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"This operation retrieves detailed information of a coffee log record by its unique coffeeLogId and its associated cafe by cafeId from the specialty_coffee_log_coffee_logs table. The GET method fetches all fields including bean name, star rating, tasting notes, and brewing method. Only authorized members may access this operation. No request body is needed.","path":"/specialtyCoffeeLog/member/cafes/{cafeId}/coffeeLogs/{coffeeLogId}","method":"get","summary":"Get detailed coffee log by ID for a given cafe","description":"This API endpoint returns detailed information about a specific coffee log identified by coffeeLogId linked to the specified cafeId.\n\nCoffee logs include the bean name, star rating from 1 to 5, tasting notes, brewing method, and timestamps of creation and update.\n\nAuthorization ensures only the owning member or authorized roles can access this resource. No request body is needed.\n\nThis operation complements others for managing coffee logs like creation, listing, updating, and deletion.","parameters":[{"name":"cafeId","description":"Unique identifier of the specialty coffee cafe associated with this coffee log","schema":{"type":"string","format":"uuid"}},{"name":"coffeeLogId","description":"Unique identifier of the coffee log to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coffee log entity","typeName":"ISpecialtyCoffeeLogCoffeeLog"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"This operation creates a new coffee log record associated with a specified cafe identified by cafeId. The POST method accepts a request body with coffee log creation data including bean name, star rating (1 to 5), tasting notes, and brewing method. Authorization restricts this operation to authenticated members. The response returns the created coffee log entity.","path":"/specialtyCoffeeLog/member/cafes/{cafeId}/coffeeLogs","method":"post","summary":"Create a new coffee log for a specific cafe","description":"This API endpoint allows an authenticated member to create a new coffee log entry tied to a specific cafe.\n\nRequests provide the cafeId in the path and coffee log details in the body including bean name, star rating from 1 to 5, tasting notes, and brewing method.\n\nSuccessful creation returns the full coffee log record. Only members are authorized for this operation.\n\nThis operation works with other coffee log management APIs including list, retrieve, update, and delete.","parameters":[{"name":"cafeId","description":"Unique identifier of the cafe to associate with the new coffee log","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information to create a new coffee log record","typeName":"ISpecialtyCoffeeLogCoffeeLog.ICreate"},"responseBody":{"description":"Created coffee log entity","typeName":"ISpecialtyCoffeeLogCoffeeLog"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This API operation updates an existing coffee log entry associated with the specified cafe and owned by a member. It operates on the 'specialty_coffee_log_coffee_logs' Prisma table. The operation requires the path parameters 'cafeId' and 'coffeeLogId', both UUID strings identifying the target cafe and coffee log respectively. The request body must include fields to update the coffee log such as bean name, star rating, tasting notes, and brewing method. Validation rules ensure that the star rating is an integer between 1 and 5, and the bean name and tasting notes must not be empty. The operation only allows the owner member to update their coffee log. The response returns the updated coffee log entity.","description":"This operation allows an authenticated member to update their personal coffee log entry associated with a specific cafe. The coffee log stores tasting experience details such as the bean name, star rating from 1 to 5 stars, tasting notes, and brewing method.\n\nOnly the owner of the coffee log can perform this update to ensure data privacy and ownership. The path parameters 'cafeId' and 'coffeeLogId' identify which cafe and which log entry to update. The request body must include validated fields, adhering to business rules such as star ratings strictly between 1 and 5 inclusive. \n\nThe operation responds with the full updated coffee log data, reflecting the latest information.\n\nSecurity considerations include ensuring the member's identity matches the owner of the coffee log and enforcing validation rules to maintain data integrity. Unauthorized update attempts must be rejected.\n\nThis operation directly manipulates records in the 'specialty_coffee_log_coffee_logs' table in the Prisma schema, handling update timestamps and data consistency accordingly.","summary":"Update a specific coffee log for a cafe owned by the member","parameters":[{"name":"cafeId","description":"Unique identifier of the target cafe","schema":{"type":"string","format":"uuid"}},{"name":"coffeeLogId","description":"Unique identifier of the coffee log to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to update an existing coffee log","typeName":"ISpecialtyCoffeeLogCoffeeLog.IUpdate"},"responseBody":{"description":"Updated coffee log entity","typeName":"ISpecialtyCoffeeLogCoffeeLog"},"authorizationRoles":["member"],"name":"update","path":"/specialtyCoffeeLog/member/cafes/{cafeId}/coffeeLogs/{coffeeLogId}","method":"put","authorizationRole":"member","authorizationType":null},{"specification":"This API operation deletes a coffee log entry identified by 'coffeeLogId' belonging to a specific cafe identified by 'cafeId'. It targets the 'specialty_coffee_log_coffee_logs' table in the Prisma schema. \n\nSince the schema uses a 'deleted_at' timestamp column, this operation performs a soft delete, marking the record as deleted rather than physically removing it from the database. The operation requires the path parameters 'cafeId' and 'coffeeLogId', both of which are UUID strings. \n\nAuthorization requires that only the member owning the coffee log entry can execute this operation. \n\nNo request body is needed. There is no response body returned. \n\nThis operation ensures that deleted coffee log entries are excluded from normal queries while preserving the data for potential recovery or audit purposes.","description":"This operation performs a soft deletion of a member's coffee log entry associated with a particular cafe. It accepts the 'cafeId' and 'coffeeLogId' as path parameters to uniquely identify the coffee log to be deleted.\n\nSoft deletion is accomplished by setting the 'deleted_at' timestamp column, allowing the system to maintain historical data and potentially restore logs if necessary.\n\nSecurity measures guarantee that only the owner member can delete their coffee logs, preventing unauthorized removal of other users' data.\n\nNo request body or response content is necessary. Successful completion indicates the coffee log is marked as deleted and no longer visible in standard retrieval operations.\n\nThis operation modifies the 'specialty_coffee_log_coffee_logs' Prisma table with soft delete semantics.","summary":"Soft delete a coffee log for a cafe owned by the member","parameters":[{"name":"cafeId","description":"Unique identifier of the target cafe","schema":{"type":"string","format":"uuid"}},{"name":"coffeeLogId","description":"Unique identifier of the coffee log to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","path":"/specialtyCoffeeLog/member/cafes/{cafeId}/coffeeLogs/{coffeeLogId}","method":"delete","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves a paginated list of cafe suggestions submitted by a specific member. It operates on the 'specialty_coffee_log_cafe_suggestions' table in the Prisma schema. The suggestions include proposed cafe edits or new cafe entries, capturing fields like name, address, contact info, opening hours, menu description, photo URL, and status.\n\nThe operation requires the path parameter 'memberId' identifying the target member. It supports complex search and filtering via a request body matching 'ISpecialtyCoffeeLogCafeSuggestion.IRequest'. The response includes a paginated list of cafe suggestions with summary details.\n\nSecurity and authorization ensure that the member can only retrieve their own suggestions.\n\nThe results are ordered typically by creation date and filtered by status if specified. This operation enables members to manage their submitted suggestions efficiently.","description":"Retrieve a filtered and paginated list of cafe suggestions submitted by the authenticated member. This allows members to track the status and details of their proposed new cafes or edits.\n\nThe operation requires the member's unique identifier as a path parameter. Advanced search parameters include filtering by suggestion status (e.g., pending, approved, rejected) and other attributes.\n\nResponse data includes summarized suggestion information optimized for list display.\n\nMembers must be authorized to only access their own suggestions to protect privacy.\n\nThis operation interacts with the 'specialty_coffee_log_cafe_suggestions' table in the Prisma schema, reflecting all relevant fields and relationships.","summary":"List cafe suggestions submitted by the member","parameters":[{"name":"memberId","description":"Unique identifier of the target member","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for cafe suggestions","typeName":"ISpecialtyCoffeeLogCafeSuggestion.IRequest"},"responseBody":{"description":"Paginated list of cafe suggestion summaries","typeName":"IPageISpecialtyCoffeeLogCafeSuggestion.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/specialtyCoffeeLog/member/members/{memberId}/cafeSuggestions","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve detailed information about a specific cafe suggestion submitted by a member. This operation accesses the 'specialty_coffee_log_cafe_suggestions' table in the Prisma database schema.\n\nThe path parameters include 'memberId' and 'suggestionId' for uniquely identifying the member and the cafe suggestion. \n\nAuthorization restricts access so only the owning member can view their suggestion.\n\nThe response returns full details of the suggestion, including proposed name, address, contact, opening hours, menu description, photo URL, and current review status.\n\nThis operation supports member workflows for reviewing and managing their cafe suggestions.","description":"Retrieve detailed information about a particular cafe suggestion submitted by a member. Security ensures only the member who created the suggestion can access this data.\n\nPath parameters 'memberId' and 'suggestionId' identify the resource uniquely.\n\nThe response includes complete suggestion data to facilitate review and management.\n\nThis operation operates on the 'specialty_coffee_log_cafe_suggestions' Prisma table with all fields represented.","summary":"Get details of a member's cafe suggestion","parameters":[{"name":"memberId","description":"Unique identifier of the target member","schema":{"type":"string","format":"uuid"}},{"name":"suggestionId","description":"Unique identifier of the cafe suggestion","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the specified cafe suggestion","typeName":"ISpecialtyCoffeeLogCafeSuggestion"},"authorizationRoles":["member"],"name":"at","path":"/specialtyCoffeeLog/member/members/{memberId}/cafeSuggestions/{suggestionId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation allows authenticated members of the Specialty Coffee Log system to create new cafe suggestions. It operates on the specialty_coffee_log_cafe_suggestions table in the Prisma schema, which stores proposed edits or additions to cafe data submitted by members. Members provide suggested cafe details including name, address, contact info, opening hours, menu description, and an optional photo URL. The system records the suggestion status and timestamps for creation and updates, supporting audit and review workflows. As a suggested edit, the data does not immediately affect the core cafe data until reviewed and approved.","description":"This operation enables a logged-in member to create a new cafe suggestion for review and potential approval. The submitted data includes all relevant details about the proposed cafe or changes, such as name, address, contact information, opening hours, menu descriptions, and a photo URL if available.\n\nSecurity considerations ensure only authenticated members can submit suggestions, associating submissions with member identity via memberId parameter. The suggestion is stored with a default status indicating it is pending review.\n\nThe API respects the underlying database schema of specialty_coffee_log_cafe_suggestions, requiring unique identifiers and audit timestamps. The newly created suggestion can be viewed, updated, or deleted only by its originating member.\n\nThis API endpoint is crucial for community-driven data enrichment, enabling users to contribute valuable data while maintaining data integrity through a review process.","summary":"Create a new cafe suggestion by a member","parameters":[{"name":"memberId","description":"ID of the member creating the suggestion","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the cafe suggestion to create","typeName":"ISpecialtyCoffeeLogCafeSuggestion.ICreate"},"responseBody":{"description":"Created cafe suggestion information","typeName":"ISpecialtyCoffeeLogCafeSuggestion"},"authorizationRoles":["member"],"path":"/specialtyCoffeeLog/member/members/{memberId}/cafeSuggestions","method":"post","name":"createSuggestion","authorizationRole":"member","authorizationType":null},{"specification":"This operation allows an authenticated member to update an existing cafe suggestion by its ID. It updates the proposed cafe details including name, address, contact info, opening hours, menu description, photo URL, and status in the specialty_coffee_log_cafe_suggestions table of the Prisma schema. Only the member who created the suggestion can update it.\n\nThe operation supports complete replacement of modifiable fields and maintains audit timestamps for tracking changes. The updated suggestion's status field enables workflow management such as 'pending', 'approved', or 'rejected'.\n\nStrict validation ensures that only valid, non-deleted suggestions can be updated by the rightful member, preserving data integrity and authorization rules.","description":"Allows a member to edit details of a previously submitted cafe suggestion. The endpoint requires member and suggestion IDs to verify ownership and authenticity.\n\nUpdated information must be complete and valid, including the cafe name, address, contact info, opening hours, and menu description, following the same business rules applied during creation.\n\nThe status field permits updating the review state of the suggestion, useful for administrative workflows.\n\nThe endpoint will reject requests where the member is not the original creator or where the suggestion does not exist.","summary":"Update an existing cafe suggestion by a member","parameters":[{"name":"memberId","description":"ID of the member who owns the suggestion","schema":{"type":"string","format":"uuid"}},{"name":"suggestionId","description":"ID of the cafe suggestion to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated details for the cafe suggestion","typeName":"ISpecialtyCoffeeLogCafeSuggestion.IUpdate"},"responseBody":{"description":"Updated cafe suggestion information","typeName":"ISpecialtyCoffeeLogCafeSuggestion"},"authorizationRoles":["member"],"path":"/specialtyCoffeeLog/member/members/{memberId}/cafeSuggestions/{suggestionId}","method":"put","name":"updateSuggestion","authorizationRole":"member","authorizationType":null},{"specification":"This operation allows an authenticated member to delete a cafe suggestion by its ID. It permanently removes the record from the specialty_coffee_log_cafe_suggestions table in the Prisma schema.\n\nSecurity controls ensure that only the member who created the suggestion can delete it. This operation performs a hard delete, completely removing the suggestion from the system and database.\n\nUpon deletion, the system ensures that no orphan references are left, maintaining referential integrity. This endpoint is designed to allow users to manage and retract their own cafe suggestions that are no longer relevant or were submitted erroneously.","description":"Enables a member to permanently delete one of their own cafe suggestions by specifying the member and suggestion IDs. The system will validate ownership before deletion.\n\nThis endpoint performs a hard delete, so deleted data cannot be recovered. The entire record is removed from the database.\n\nProper authorization checks prevent unauthorized deletions of suggestions belonging to other users.","summary":"Delete a cafe suggestion owned by a member","parameters":[{"name":"memberId","description":"ID of the member who owns the suggestion","schema":{"type":"string","format":"uuid"}},{"name":"suggestionId","description":"ID of the cafe suggestion to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"path":"/specialtyCoffeeLog/member/members/{memberId}/cafeSuggestions/{suggestionId}","method":"delete","name":"eraseSuggestion","authorizationRole":"member","authorizationType":null}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can browse public information such as cafe lists but cannot create logs or manage personal data.","kind":"guest"},{"name":"member","description":"Authenticated users who can sign up, log in, manage their profile, create and manage their own coffee logs, and add or suggest edits to cafes.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageISpecialtyCoffeeLogCafe.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISpecialtyCoffeeLogCafe.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISpecialtyCoffeeLogCoffeeLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISpecialtyCoffeeLogCoffeeLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageISpecialtyCoffeeLogCafeSuggestion.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ISpecialtyCoffeeLogCafeSuggestion.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ISpecialtyCoffeeLogGuest.ICreate":{"type":"object","properties":{"ip_address":{"type":"string","description":"IP address of the guest user."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user agent string from the guest's device."}},"required":["ip_address"],"description":"Payload to register a new guest user including IP address and optional user agent string."},"ISpecialtyCoffeeLogGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorized response with JWT tokens and guest user info."},"ISpecialtyCoffeeLogGuestRefreshToken.IRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token string issued to the guest user."}},"required":["refresh_token"],"description":"Refresh token request payload containing the refresh token string."},"ISpecialtyCoffeeLogMember.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique email address used for member login and communication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; plain passwords are never stored."}},"required":["email","password_hash"],"description":"Create request to register a new member.\n\nClients provide email and password (to be hashed server-side)."},"ISpecialtyCoffeeLogMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member."},"email":{"type":"string","description":"Email of the authenticated member."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; plain passwords are never stored."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp to allow member deactivation and data recovery. Nullable."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations like login or registration."},"ISpecialtyCoffeeLogMember.ILogin":{"type":"object","properties":{"email":{"type":"string","description":"Registered email address of the member."},"password":{"type":"string","description":"Plain password to authenticate the member. Authentication server hashes and compares."}},"required":["email","password"],"description":"Login credentials for member authentication."},"ISpecialtyCoffeeLogMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string used to obtain new access tokens."}},"required":["refresh_token"],"description":"Request to refresh JWT tokens for the member."},"ISpecialtyCoffeeLogMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the member in UUID format."},"email":{"type":"string","description":"Unique email address used for member login and communication."},"password_hash":{"type":"string","description":"Hashed password for secure authentication; plain passwords are never stored."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp to allow member deactivation and data recovery. Nullable."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Specialty Coffee Log Member entity.\n\nRepresents authenticated users who can create coffee logs, manage profiles, add cafes, and suggest edits.\n\nStores login credentials and personal data with audit timestamps and soft deletion support."},"ISpecialtyCoffeeLogCafe.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number for pagination. Optional; if null, defaults to first page."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limit of records per page. Optional; if null, defaults to a preset limit."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search string to filter cafes by name with case-insensitive, partial matching."},"orderBy":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Field name to order results by (e.g., name). Optional."},"orderDirection":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Direction of ordering: 'asc' or 'desc'. Optional."}},"required":[],"description":"Request parameters for filtering, searching, pagination, and ordering cafes."},"ISpecialtyCoffeeLogCafe":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the specialty coffee cafe."},"name":{"type":"string","description":"Unique name of the specialty coffee cafe."},"address":{"type":"string","description":"Physical address of the cafe."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact information such as phone number or email."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable opening hours of the cafe."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Brief description of the cafe menu offerings."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL string pointing to a photo of the cafe."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the cafe record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the cafe record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the cafe was soft deleted, if applicable."}},"required":["id","name","address","created_at","updated_at"],"description":"Holds detailed information about specialty coffee cafes including name, address, contact details, opening hours, menu description, and photo. This table is a core business entity accessible to all users for browsing and searching cafe information. Enforces uniqueness on cafe name to prevent duplicates and supports soft deletion for data integrity and recovery."},"ISpecialtyCoffeeLogCafe.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique name of the specialty coffee cafe."},"address":{"type":"string","description":"Physical address of the cafe."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact information such as phone number or email."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable opening hours of the cafe."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Brief description of the cafe menu offerings."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL string pointing to a photo of the cafe."}},"required":["name","address"],"description":"Request body to create new specialty coffee cafe."},"ISpecialtyCoffeeLogCafe.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Unique name of the specialty coffee cafe."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Physical address of the cafe."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Contact information such as phone number or email."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Human-readable opening hours of the cafe."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Brief description of the cafe menu offerings."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL string pointing to a photo of the cafe."}},"required":[],"description":"Request body to update an existing specialty coffee cafe."},"ISpecialtyCoffeeLogCoffeeLogs.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Current page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Limitation of records per a page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search text filter for coffee logs (e.g., bean name or tasting notes)."},"star_rating_min":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Minimum star rating filter."},"star_rating_max":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum star rating filter."},"member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by member_id."},"order_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field name."},"order_direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: \"asc\" or \"desc\"."}},"required":[],"description":"Request parameters for searching and filtering coffee logs."},"ISpecialtyCoffeeLogCoffeeLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the coffee log."},"member_id":{"type":"string","format":"uuid","description":"Belonged member's ID who owns this coffee log.\n\nRepresents the owner of this coffee log entry."},"cafe_id":{"type":"string","format":"uuid","description":"Belonged cafe's ID where the coffee log is created.\n\nLinks this coffee log to a specific cafe."},"bean_name":{"type":"string","description":"Name of the coffee bean tasted, as recorded by the user.\n\nThis field is required and represents the specific coffee bean."},"star_rating":{"type":"integer","format":"int32","description":"User's rating of the coffee from 1 to 5 stars, inclusive.\n\nRating as integer."},"tasting_notes":{"type":"string","description":"Detailed tasting notes provided by the user.\n\nDescribes the user's experience and taste details for the coffee."},"brewing_method":{"type":"string","description":"Brewing method used for this coffee tasting (e.g., espresso, pour-over)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this log was created.\n\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this log was last updated.\n\nISO 8601 date-time string."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this log was soft deleted, if applicable.\n\nISO 8601 date-time string or null if not deleted."}},"required":["id","member_id","cafe_id","bean_name","star_rating","tasting_notes","brewing_method","created_at","updated_at"],"description":"Personal coffee logs created by authenticated members representing their tasting experience including bean name, star rating, tasting notes, and brewing method. Logs are private to members and support soft deletion and audit timestamps."},"ISpecialtyCoffeeLogCoffeeLog.ICreate":{"type":"object","properties":{"bean_name":{"type":"string","description":"Name of the coffee bean tasted."},"star_rating":{"type":"integer","format":"int32","description":"Star rating from 1 to 5 inclusive."},"tasting_notes":{"type":"string","description":"Detailed tasting notes."},"brewing_method":{"type":"string","description":"Brewing method used."}},"required":["bean_name","star_rating","tasting_notes","brewing_method"],"description":"Request body to create a coffee log. Does not include system generated fields like id, timestamps. Omits member_id and cafe_id since those are path parameter context."},"ISpecialtyCoffeeLogCoffeeLog.IUpdate":{"type":"object","properties":{"bean_name":{"type":"string","description":"Name of the coffee bean tasted."},"star_rating":{"type":"integer","format":"int32","description":"Star rating from 1 to 5 inclusive."},"tasting_notes":{"type":"string","description":"Detailed tasting notes."},"brewing_method":{"type":"string","description":"Brewing method used."}},"required":[],"description":"Request body to update a coffee log. All fields are optional, including those from ICreate. Cannot update member_id or cafe_id to ensure ownership."},"ISpecialtyCoffeeLogCafeSuggestion.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Pagination page number."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Pagination limit per page."},"searchName":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search filter for cafe suggestion name partial match, case insensitive."},"status":{"oneOf":[{"const":"pending"},{"const":"approved"},{"const":"rejected"},{"type":"null"}],"description":"Filter by suggestion status. Allowed values: 'pending', 'approved', 'rejected'"},"sortField":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort field, e.g., 'created_at', 'updated_at'."},"sortOrder":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort order, e.g., 'asc', 'desc'."}},"required":[],"description":"Request body to request list or filter suggestions. Supports pagination, filtering, sorting."},"ISpecialtyCoffeeLogCafeSuggestion":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the cafe suggestion."},"member_id":{"type":"string","format":"uuid","description":"Submitting member's ID.\n\nReferences the member who submitted this suggestion."},"name":{"type":"string","description":"Proposed cafe name in the suggestion."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed physical address in the suggestion.\n\nNullable property."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed contact info such as phone or email.\n\nNullable property."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed opening hours in human-readable format.\n\nNullable property."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed menu description.\n\nNullable property."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed photo URL for the cafe.\n\nNullable property."},"status":{"type":"string","description":"Review status of the suggestion, such as 'pending', 'approved', or 'rejected'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the suggestion was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the suggestion was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the suggestion was soft deleted, if applicable.\n\nNullable property."}},"required":["id","member_id","name","status","created_at","updated_at"],"description":"Stores user-submitted suggestions for adding new cafes or editing\nexisting cafe information. Suggestions include proposed cafe data and\ntrack status for review workflow, allowing independent management of\nsuggestions separate from the core cafe data. Each suggestion is linked\nto the member who submitted it for accountability."},"ISpecialtyCoffeeLogCafeSuggestion.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"Submitting member's ID.\n\nDo NOT accept actor IDs directly - this must come from authentication context."},"name":{"type":"string","description":"Proposed cafe name in the suggestion."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed physical address in the suggestion.\n\nNullable property."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed contact info such as phone or email.\n\nNullable property."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed opening hours in human-readable format.\n\nNullable property."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed menu description.\n\nNullable property."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed photo URL for the cafe.\n\nNullable property."},"status":{"type":"string","description":"Review status of the suggestion, such as 'pending', 'approved', or 'rejected'.\n\nFor creation, typically 'pending'."}},"required":["member_id","name","status"],"description":"Request type for creating new cafe suggestions submitted by members."},"ISpecialtyCoffeeLogCafeSuggestion.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Proposed cafe name in the suggestion."},"address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed physical address in the suggestion.\n\nNullable property."},"contact_info":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed contact info such as phone or email.\n\nNullable property."},"opening_hours":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed opening hours in human-readable format.\n\nNullable property."},"menu_description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed menu description.\n\nNullable property."},"photo_url":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Proposed photo URL for the cafe.\n\nNullable property."},"status":{"type":"string","description":"Review status of the suggestion, such as 'pending', 'approved', or 'rejected'.\n\nStatus field is optional on update."}},"required":[],"description":"Request type for updating existing cafe suggestions by members."},"ISpecialtyCoffeeLogCafe.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the specialty coffee cafe."},"name":{"type":"string","description":"Unique name of the specialty coffee cafe."},"address":{"type":"string","description":"Physical address of the cafe."}},"required":["id","name","address"],"description":"Summary view of specialty coffee cafe.\n\nContains essential fields for listings such as ID, name, and address."},"ISpecialtyCoffeeLogCoffeeLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the coffee log entry."},"bean_name":{"type":"string","description":"Name of the coffee bean tasted."},"star_rating":{"type":"integer","format":"int32","description":"Star rating assigned by the user, from 1 to 5."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the coffee log was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the coffee log."}},"required":["id","bean_name","star_rating","created_at","updated_at"],"description":"Summary variant for the coffee log entity representing key attributes for list views and brief display.\n\nIncludes id, bean_name, star_rating, and timestamps for creation and last update.\n\nExcludes detailed tasting notes and brewing method to optimize response size and performance."},"ISpecialtyCoffeeLogCafeSuggestion.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the cafe suggestion."},"name":{"type":"string","description":"Proposed name of the cafe in the suggestion."},"status":{"type":"string","description":"Review status of the suggestion (e.g., \"pending\", \"approved\", \"rejected\")."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the suggestion was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the suggestion was last updated."}},"required":["id","name","status","created_at","updated_at"],"description":"Summary view of a cafe suggestion including essential fields such as id, name, current review status, created and updated timestamps.\n\nThis summary is suitable for listing cafe suggestions in member dashboards or management interfaces."}}}}