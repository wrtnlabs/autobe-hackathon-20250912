import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogMember } from "../../../structures/ISpecialtyCoffeeLogMember";

/**
 * Register a new member account and issue JWT tokens based on
 * specialty_coffee_log_members schema.
 *
 * The join operation for members enables new users to register with the system
 * by supplying a valid email and password. The system verifies the uniqueness
 * of the email in the specialty_coffee_log_members table and securely stores
 * the password hash. Upon successful registration, the operation issues
 * authorized JWT tokens encapsulated in IAuthorized response. This endpoint is
 * essential for member onboarding and serves as the entry point into the
 * service.
 *
 * The operation interacts directly with the specialty_coffee_log_members table,
 * enforcing unique email keys and storing creation and update timestamps. No
 * user session is necessary for this, making it a public endpoint.
 *
 * Users must provide a valid email format, and the password hashing logic is
 * performed server-side, not exposed in the API. Validation errors or conflicts
 * (such as email already registered) return appropriate HTTP error codes.
 *
 * Security considerations include ensuring that password hashes comply with
 * industry standards and that tokens are securely generated and signed.
 *
 * This operation complements login and refresh token operations to provide a
 * full authentication lifecycle for members.
 *
 * @param props.connection
 * @param props.body Member registration info.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Member registration info. */
    body: ISpecialtyCoffeeLogMember.ICreate;
  };
  export type Body = ISpecialtyCoffeeLogMember.ICreate;
  export type Response = ISpecialtyCoffeeLogMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): ISpecialtyCoffeeLogMember.IAuthorized =>
    typia.random<ISpecialtyCoffeeLogMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate member and issue JWT tokens based on
 * specialty_coffee_log_members schema.
 *
 * The login operation for members allows existing users to authenticate with
 * valid email and password credentials. Upon successful verification against
 * specialty_coffee_log_members, the system issues a JWT access token and
 * refresh token encapsulated in IAuthorized response.
 *
 * It enforces security by rejecting invalid credentials with HTTP 401 and
 * ensuring token expiry policies are maintained. This endpoint is a public
 * operation enabling member access to protected resources.
 *
 * The operation integrates with token refresh mechanisms to maintain session
 * continuity.
 *
 * Password handling adheres to secure hashing and comparison methods as per
 * specialty_coffee_log_members schema.
 *
 * This operation is vital for access control and user session initialization.
 *
 * @param props.connection
 * @param props.body Member login credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Member login credentials. */
    body: ISpecialtyCoffeeLogMember.ILogin;
  };
  export type Body = ISpecialtyCoffeeLogMember.ILogin;
  export type Response = ISpecialtyCoffeeLogMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): ISpecialtyCoffeeLogMember.IAuthorized =>
    typia.random<ISpecialtyCoffeeLogMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for member using valid refresh token.
 *
 * The refresh operation enables members to renew their JWT access tokens by
 * presenting a valid refresh token stored in
 * specialty_coffee_log_refresh_tokens table. The system verifies the token's
 * validity, issuance date, and revocation status before issuing a new set of
 * tokens encapsulated in IAuthorized response.
 *
 * This operation is critical to maintaining user sessions without requiring
 * re-authentication.
 *
 * Revoked or expired tokens result in appropriate authorization failure
 * responses.
 *
 * It ties into the login and join operations, completing the token lifecycle
 * management for member authentication.
 *
 * Security measures ensure that refresh tokens are invalidated upon logout and
 * password changes, preventing replay attacks.
 *
 * @param props.connection
 * @param props.body Member refresh token data.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Member refresh token data. */
    body: ISpecialtyCoffeeLogMember.IRefresh;
  };
  export type Body = ISpecialtyCoffeeLogMember.IRefresh;
  export type Response = ISpecialtyCoffeeLogMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): ISpecialtyCoffeeLogMember.IAuthorized =>
    typia.random<ISpecialtyCoffeeLogMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
