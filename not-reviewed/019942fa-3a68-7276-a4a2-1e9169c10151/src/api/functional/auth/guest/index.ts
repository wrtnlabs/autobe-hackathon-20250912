import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogGuest } from "../../../structures/ISpecialtyCoffeeLogGuest";
import { ISpecialtyCoffeeLogGuestRefreshToken } from "../../../structures/ISpecialtyCoffeeLogGuestRefreshToken";

/**
 * Create guest user join operation based on specialty_coffee_log_guests table.
 *
 * Registers a new guest user account for temporary access to the Specialty
 * Coffee Log service. The guest is identified by IP address and user agent,
 * stored in the specialty_coffee_log_guests table.
 *
 * The operation creates a new guest record with the required fields: ip_address
 * and optional user_agent. Upon successful registration, the system returns
 * authorized tokens encapsulated in the
 * IAuthSpecialtyCoffeeLogGuest.IAuthorized response.
 *
 * Guest accounts do not require passwords or emails and have a soft deletion
 * mechanism using "deleted_at".
 *
 * This join endpoint does not require authentication and is accessible
 * publicly.
 *
 * Related operations: refresh token is required to renew access after
 * expiration.
 *
 * Security notes: Guests have limited access and no credential login
 * capabilities.
 *
 * @param props.connection
 * @param props.body Payload to register a new guest user including IP address
 *   and optional user agent string.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Payload to register a new guest user including IP address and
     * optional user agent string.
     */
    body: ISpecialtyCoffeeLogGuest.ICreate;
  };
  export type Body = ISpecialtyCoffeeLogGuest.ICreate;
  export type Response = ISpecialtyCoffeeLogGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): ISpecialtyCoffeeLogGuest.IAuthorized =>
    typia.random<ISpecialtyCoffeeLogGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh tokens for guest user to renew temporary access.
 *
 * Refresh guest user JWT tokens to maintain temporary access to the Specialty
 * Coffee Log service.
 *
 * Requires a valid refresh token included in the request body to produce new
 * access and refresh tokens.
 *
 * No user credentials are needed other than the valid refresh token.
 *
 * This endpoint is secured to guest users with valid tokens.
 *
 * Related operations: join to register and receive the original tokens.
 *
 * Security: Tokens are rotated and managed to prevent unauthorized access.
 *
 * @param props.connection
 * @param props.body Refresh token request payload containing the refresh token
 *   string.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload containing the refresh token string. */
    body: ISpecialtyCoffeeLogGuestRefreshToken.IRequest;
  };
  export type Body = ISpecialtyCoffeeLogGuestRefreshToken.IRequest;
  export type Response = ISpecialtyCoffeeLogGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): ISpecialtyCoffeeLogGuest.IAuthorized =>
    typia.random<ISpecialtyCoffeeLogGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
