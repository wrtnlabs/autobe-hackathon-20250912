import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogCoffeeLog } from "../../../../../structures/ISpecialtyCoffeeLogCoffeeLog";
import { ISpecialtyCoffeeLogCoffeeLogs } from "../../../../../structures/ISpecialtyCoffeeLogCoffeeLogs";
import { IPageISpecialtyCoffeeLogCoffeeLog } from "../../../../../structures/IPageISpecialtyCoffeeLogCoffeeLog";

/**
 * Create a new coffee log for a specific cafe.
 *
 * This API endpoint allows an authenticated member to create a new coffee log
 * entry tied to a specific cafe.
 *
 * Requests provide the cafeId in the path and coffee log details in the body
 * including bean name, star rating from 1 to 5, tasting notes, and brewing
 * method.
 *
 * Successful creation returns the full coffee log record. Only members are
 * authorized for this operation.
 *
 * This operation works with other coffee log management APIs including list,
 * retrieve, update, and delete.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the cafe to associate with the new
 *   coffee log
 * @param props.body Information to create a new coffee log record
 * @path /specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.coffeeLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the cafe to associate with the new coffee log */
    cafeId: string & tags.Format<"uuid">;

    /** Information to create a new coffee log record */
    body: ISpecialtyCoffeeLogCoffeeLog.ICreate;
  };
  export type Body = ISpecialtyCoffeeLogCoffeeLog.ICreate;
  export type Response = ISpecialtyCoffeeLogCoffeeLog;

  export const METADATA = {
    method: "POST",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}/coffeeLogs`;
  export const random = (): ISpecialtyCoffeeLogCoffeeLog =>
    typia.random<ISpecialtyCoffeeLogCoffeeLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve coffee logs for a specified cafe.
 *
 * This API endpoint retrieves coffee logs related to a specific cafe identified
 * by cafeId. The request supports filtering and pagination parameters to
 * control the results.
 *
 * Coffee logs contain information including bean name, star rating, tasting
 * notes, and brewing method associated with the cafe and member who created
 * them.
 *
 * Only authenticated members can access this data. This operation complements
 * others such as creating, retrieving, updating, and deleting coffee logs.
 *
 * The request body accepts search parameters, while the response body returns a
 * paged list of coffee log summary objects.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the specialty coffee cafe for which
 *   to retrieve coffee logs
 * @param props.body Search and filter parameters for coffee logs
 * @path /specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.coffeeLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the specialty coffee cafe for which to retrieve
     * coffee logs
     */
    cafeId: string & tags.Format<"uuid">;

    /** Search and filter parameters for coffee logs */
    body: ISpecialtyCoffeeLogCoffeeLogs.IRequest;
  };
  export type Body = ISpecialtyCoffeeLogCoffeeLogs.IRequest;
  export type Response = IPageISpecialtyCoffeeLogCoffeeLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}/coffeeLogs`;
  export const random = (): IPageISpecialtyCoffeeLogCoffeeLog.ISummary =>
    typia.random<IPageISpecialtyCoffeeLogCoffeeLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed coffee log by ID for a given cafe.
 *
 * This API endpoint returns detailed information about a specific coffee log
 * identified by coffeeLogId linked to the specified cafeId.
 *
 * Coffee logs include the bean name, star rating from 1 to 5, tasting notes,
 * brewing method, and timestamps of creation and update.
 *
 * Authorization ensures only the owning member or authorized roles can access
 * this resource. No request body is needed.
 *
 * This operation complements others for managing coffee logs like creation,
 * listing, updating, and deletion.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the specialty coffee cafe associated
 *   with this coffee log
 * @param props.coffeeLogId Unique identifier of the coffee log to retrieve
 * @path /specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.coffeeLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the specialty coffee cafe associated with this
     * coffee log
     */
    cafeId: string & tags.Format<"uuid">;

    /** Unique identifier of the coffee log to retrieve */
    coffeeLogId: string & tags.Format<"uuid">;
  };
  export type Response = ISpecialtyCoffeeLogCoffeeLog;

  export const METADATA = {
    method: "GET",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}/coffeeLogs/${encodeURIComponent(props.coffeeLogId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCoffeeLog =>
    typia.random<ISpecialtyCoffeeLogCoffeeLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.param("coffeeLogId")(() => typia.assert(props.coffeeLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific coffee log for a cafe owned by the member.
 *
 * This operation allows an authenticated member to update their personal coffee
 * log entry associated with a specific cafe. The coffee log stores tasting
 * experience details such as the bean name, star rating from 1 to 5 stars,
 * tasting notes, and brewing method.
 *
 * Only the owner of the coffee log can perform this update to ensure data
 * privacy and ownership. The path parameters 'cafeId' and 'coffeeLogId'
 * identify which cafe and which log entry to update. The request body must
 * include validated fields, adhering to business rules such as star ratings
 * strictly between 1 and 5 inclusive.
 *
 * The operation responds with the full updated coffee log data, reflecting the
 * latest information.
 *
 * Security considerations include ensuring the member's identity matches the
 * owner of the coffee log and enforcing validation rules to maintain data
 * integrity. Unauthorized update attempts must be rejected.
 *
 * This operation directly manipulates records in the
 * 'specialty_coffee_log_coffee_logs' table in the Prisma schema, handling
 * update timestamps and data consistency accordingly.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the target cafe
 * @param props.coffeeLogId Unique identifier of the coffee log to update
 * @param props.body Data required to update an existing coffee log
 * @path /specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.coffeeLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target cafe */
    cafeId: string & tags.Format<"uuid">;

    /** Unique identifier of the coffee log to update */
    coffeeLogId: string & tags.Format<"uuid">;

    /** Data required to update an existing coffee log */
    body: ISpecialtyCoffeeLogCoffeeLog.IUpdate;
  };
  export type Body = ISpecialtyCoffeeLogCoffeeLog.IUpdate;
  export type Response = ISpecialtyCoffeeLogCoffeeLog;

  export const METADATA = {
    method: "PUT",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}/coffeeLogs/${encodeURIComponent(props.coffeeLogId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCoffeeLog =>
    typia.random<ISpecialtyCoffeeLogCoffeeLog>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.param("coffeeLogId")(() => typia.assert(props.coffeeLogId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a coffee log for a cafe owned by the member.
 *
 * This operation performs a soft deletion of a member's coffee log entry
 * associated with a particular cafe. It accepts the 'cafeId' and 'coffeeLogId'
 * as path parameters to uniquely identify the coffee log to be deleted.
 *
 * Soft deletion is accomplished by setting the 'deleted_at' timestamp column,
 * allowing the system to maintain historical data and potentially restore logs
 * if necessary.
 *
 * Security measures guarantee that only the owner member can delete their
 * coffee logs, preventing unauthorized removal of other users' data.
 *
 * No request body or response content is necessary. Successful completion
 * indicates the coffee log is marked as deleted and no longer visible in
 * standard retrieval operations.
 *
 * This operation modifies the 'specialty_coffee_log_coffee_logs' Prisma table
 * with soft delete semantics.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the target cafe
 * @param props.coffeeLogId Unique identifier of the coffee log to delete
 * @path /specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.coffeeLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target cafe */
    cafeId: string & tags.Format<"uuid">;

    /** Unique identifier of the coffee log to delete */
    coffeeLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId/coffeeLogs/:coffeeLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}/coffeeLogs/${encodeURIComponent(props.coffeeLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.param("coffeeLogId")(() => typia.assert(props.coffeeLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
