import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogCafe } from "../../../../structures/ISpecialtyCoffeeLogCafe";
export * as coffeeLogs from "./coffeeLogs/index";

/**
 * Create a new specialty coffee cafe record.
 *
 * Create a new specialty coffee cafe entry. This operation allows authenticated
 * members to add new cafes with detailed information such as name, address, and
 * optional contact info and description.
 *
 * The operation verifies the uniqueness of the cafe name and rejects
 * duplicates.
 *
 * Security considerations require authentication with member role.
 *
 * Upon success, the newly created cafe record is returned including
 * system-generated timestamps.
 *
 * Related operations include cafe list retrieval and updates.
 *
 * Expected validation includes required fields and format checking.
 *
 * @param props.connection
 * @param props.body Information required to create a new specialty coffee cafe
 * @path /specialtyCoffeeLog/member/cafes
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new specialty coffee cafe */
    body: ISpecialtyCoffeeLogCafe.ICreate;
  };
  export type Body = ISpecialtyCoffeeLogCafe.ICreate;
  export type Response = ISpecialtyCoffeeLogCafe;

  export const METADATA = {
    method: "POST",
    path: "/specialtyCoffeeLog/member/cafes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/specialtyCoffeeLog/member/cafes";
  export const random = (): ISpecialtyCoffeeLogCafe =>
    typia.random<ISpecialtyCoffeeLogCafe>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing specialty coffee cafe record.
 *
 * Update details of a specialty coffee cafe by its unique ID. Authenticated
 * members can modify existing cafe records including all core fields.
 *
 * The operation verifies the existence of the cafe and enforces name
 * uniqueness.
 *
 * Security considerations include role-based access control limited to members.
 *
 * Upon success, the updated cafe record is returned.
 *
 * Related operations include create and retrieve.
 *
 * Expected behavior includes parameter validation and error handling for
 * missing or invalid data.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the target specialty coffee cafe to
 *   update
 * @param props.body Information to update for the specialty coffee cafe
 * @path /specialtyCoffeeLog/member/cafes/:cafeId
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target specialty coffee cafe to update */
    cafeId: string & tags.Format<"uuid">;

    /** Information to update for the specialty coffee cafe */
    body: ISpecialtyCoffeeLogCafe.IUpdate;
  };
  export type Body = ISpecialtyCoffeeLogCafe.IUpdate;
  export type Response = ISpecialtyCoffeeLogCafe;

  export const METADATA = {
    method: "PUT",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCafe =>
    typia.random<ISpecialtyCoffeeLogCafe>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specialty coffee cafe by ID.
 *
 * This API endpoint allows authorized users (admin or member role) to delete a
 * specialty coffee cafe record by specifying its unique ID in the path
 * parameter.
 *
 * The cafe entity includes fields such as name, address, contact_info,
 * opening_hours, menu_description, photo_url and timestamps. The deletion
 * operation permanently removes the cafe entry from the database.
 *
 * Given the administrative and data integrity impact of this operation, access
 * control requires roles like admin or member to perform the action.
 *
 * No request body is needed and no content is returned upon success. This
 * operation complements the cafe creation and listing endpoints.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the target specialty coffee cafe
 * @path /specialtyCoffeeLog/member/cafes/:cafeId
 * @accessor api.functional.specialtyCoffeeLog.member.cafes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target specialty coffee cafe */
    cafeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/specialtyCoffeeLog/member/cafes/:cafeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/member/cafes/${encodeURIComponent(props.cafeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
