import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogCafeSuggestion } from "../../../../../structures/ISpecialtyCoffeeLogCafeSuggestion";
import { IPageISpecialtyCoffeeLogCafeSuggestion } from "../../../../../structures/IPageISpecialtyCoffeeLogCafeSuggestion";

/**
 * Create a new cafe suggestion by a member.
 *
 * This operation enables a logged-in member to create a new cafe suggestion for
 * review and potential approval. The submitted data includes all relevant
 * details about the proposed cafe or changes, such as name, address, contact
 * information, opening hours, menu descriptions, and a photo URL if available.
 *
 * Security considerations ensure only authenticated members can submit
 * suggestions, associating submissions with member identity via memberId
 * parameter. The suggestion is stored with a default status indicating it is
 * pending review.
 *
 * The API respects the underlying database schema of
 * specialty_coffee_log_cafe_suggestions, requiring unique identifiers and audit
 * timestamps. The newly created suggestion can be viewed, updated, or deleted
 * only by its originating member.
 *
 * This API endpoint is crucial for community-driven data enrichment, enabling
 * users to contribute valuable data while maintaining data integrity through a
 * review process.
 *
 * @param props.connection
 * @param props.memberId ID of the member creating the suggestion
 * @param props.body Details of the cafe suggestion to create
 * @path /specialtyCoffeeLog/member/members/:memberId/cafeSuggestions
 * @accessor api.functional.specialtyCoffeeLog.member.members.cafeSuggestions.createSuggestion
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createSuggestion(
  connection: IConnection,
  props: createSuggestion.Props,
): Promise<createSuggestion.Response> {
  return true === connection.simulate
    ? createSuggestion.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createSuggestion.METADATA,
          path: createSuggestion.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createSuggestion {
  export type Props = {
    /** ID of the member creating the suggestion */
    memberId: string & tags.Format<"uuid">;

    /** Details of the cafe suggestion to create */
    body: ISpecialtyCoffeeLogCafeSuggestion.ICreate;
  };
  export type Body = ISpecialtyCoffeeLogCafeSuggestion.ICreate;
  export type Response = ISpecialtyCoffeeLogCafeSuggestion;

  export const METADATA = {
    method: "POST",
    path: "/specialtyCoffeeLog/member/members/:memberId/cafeSuggestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/members/${encodeURIComponent(props.memberId ?? "null")}/cafeSuggestions`;
  export const random = (): ISpecialtyCoffeeLogCafeSuggestion =>
    typia.random<ISpecialtyCoffeeLogCafeSuggestion>();
  export const simulate = (
    connection: IConnection,
    props: createSuggestion.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createSuggestion.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List cafe suggestions submitted by the member.
 *
 * Retrieve a filtered and paginated list of cafe suggestions submitted by the
 * authenticated member. This allows members to track the status and details of
 * their proposed new cafes or edits.
 *
 * The operation requires the member's unique identifier as a path parameter.
 * Advanced search parameters include filtering by suggestion status (e.g.,
 * pending, approved, rejected) and other attributes.
 *
 * Response data includes summarized suggestion information optimized for list
 * display.
 *
 * Members must be authorized to only access their own suggestions to protect
 * privacy.
 *
 * This operation interacts with the 'specialty_coffee_log_cafe_suggestions'
 * table in the Prisma schema, reflecting all relevant fields and
 * relationships.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member
 * @param props.body Search criteria and pagination parameters for cafe
 *   suggestions
 * @path /specialtyCoffeeLog/member/members/:memberId/cafeSuggestions
 * @accessor api.functional.specialtyCoffeeLog.member.members.cafeSuggestions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target member */
    memberId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for cafe suggestions */
    body: ISpecialtyCoffeeLogCafeSuggestion.IRequest;
  };
  export type Body = ISpecialtyCoffeeLogCafeSuggestion.IRequest;
  export type Response = IPageISpecialtyCoffeeLogCafeSuggestion.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/specialtyCoffeeLog/member/members/:memberId/cafeSuggestions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/members/${encodeURIComponent(props.memberId ?? "null")}/cafeSuggestions`;
  export const random = (): IPageISpecialtyCoffeeLogCafeSuggestion.ISummary =>
    typia.random<IPageISpecialtyCoffeeLogCafeSuggestion.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a member's cafe suggestion.
 *
 * Retrieve detailed information about a particular cafe suggestion submitted by
 * a member. Security ensures only the member who created the suggestion can
 * access this data.
 *
 * Path parameters 'memberId' and 'suggestionId' identify the resource uniquely.
 *
 * The response includes complete suggestion data to facilitate review and
 * management.
 *
 * This operation operates on the 'specialty_coffee_log_cafe_suggestions' Prisma
 * table with all fields represented.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member
 * @param props.suggestionId Unique identifier of the cafe suggestion
 * @path /specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId
 * @accessor api.functional.specialtyCoffeeLog.member.members.cafeSuggestions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target member */
    memberId: string & tags.Format<"uuid">;

    /** Unique identifier of the cafe suggestion */
    suggestionId: string & tags.Format<"uuid">;
  };
  export type Response = ISpecialtyCoffeeLogCafeSuggestion;

  export const METADATA = {
    method: "GET",
    path: "/specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/member/members/${encodeURIComponent(props.memberId ?? "null")}/cafeSuggestions/${encodeURIComponent(props.suggestionId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCafeSuggestion =>
    typia.random<ISpecialtyCoffeeLogCafeSuggestion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("suggestionId")(() => typia.assert(props.suggestionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing cafe suggestion by a member.
 *
 * Allows a member to edit details of a previously submitted cafe suggestion.
 * The endpoint requires member and suggestion IDs to verify ownership and
 * authenticity.
 *
 * Updated information must be complete and valid, including the cafe name,
 * address, contact info, opening hours, and menu description, following the
 * same business rules applied during creation.
 *
 * The status field permits updating the review state of the suggestion, useful
 * for administrative workflows.
 *
 * The endpoint will reject requests where the member is not the original
 * creator or where the suggestion does not exist.
 *
 * @param props.connection
 * @param props.memberId ID of the member who owns the suggestion
 * @param props.suggestionId ID of the cafe suggestion to update
 * @param props.body Updated details for the cafe suggestion
 * @path /specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId
 * @accessor api.functional.specialtyCoffeeLog.member.members.cafeSuggestions.updateSuggestion
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateSuggestion(
  connection: IConnection,
  props: updateSuggestion.Props,
): Promise<updateSuggestion.Response> {
  return true === connection.simulate
    ? updateSuggestion.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateSuggestion.METADATA,
          path: updateSuggestion.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateSuggestion {
  export type Props = {
    /** ID of the member who owns the suggestion */
    memberId: string & tags.Format<"uuid">;

    /** ID of the cafe suggestion to update */
    suggestionId: string & tags.Format<"uuid">;

    /** Updated details for the cafe suggestion */
    body: ISpecialtyCoffeeLogCafeSuggestion.IUpdate;
  };
  export type Body = ISpecialtyCoffeeLogCafeSuggestion.IUpdate;
  export type Response = ISpecialtyCoffeeLogCafeSuggestion;

  export const METADATA = {
    method: "PUT",
    path: "/specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/specialtyCoffeeLog/member/members/${encodeURIComponent(props.memberId ?? "null")}/cafeSuggestions/${encodeURIComponent(props.suggestionId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCafeSuggestion =>
    typia.random<ISpecialtyCoffeeLogCafeSuggestion>();
  export const simulate = (
    connection: IConnection,
    props: updateSuggestion.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateSuggestion.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("suggestionId")(() => typia.assert(props.suggestionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a cafe suggestion owned by a member.
 *
 * Enables a member to permanently delete one of their own cafe suggestions by
 * specifying the member and suggestion IDs. The system will validate ownership
 * before deletion.
 *
 * This endpoint performs a hard delete, so deleted data cannot be recovered.
 * The entire record is removed from the database.
 *
 * Proper authorization checks prevent unauthorized deletions of suggestions
 * belonging to other users.
 *
 * @param props.connection
 * @param props.memberId ID of the member who owns the suggestion
 * @param props.suggestionId ID of the cafe suggestion to delete
 * @path /specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId
 * @accessor api.functional.specialtyCoffeeLog.member.members.cafeSuggestions.eraseSuggestion
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseSuggestion(
  connection: IConnection,
  props: eraseSuggestion.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseSuggestion.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseSuggestion.METADATA,
          path: eraseSuggestion.path(props),
          status: null,
        },
      );
}
export namespace eraseSuggestion {
  export type Props = {
    /** ID of the member who owns the suggestion */
    memberId: string & tags.Format<"uuid">;

    /** ID of the cafe suggestion to delete */
    suggestionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/specialtyCoffeeLog/member/members/:memberId/cafeSuggestions/:suggestionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/member/members/${encodeURIComponent(props.memberId ?? "null")}/cafeSuggestions/${encodeURIComponent(props.suggestionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseSuggestion.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseSuggestion.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.param("suggestionId")(() => typia.assert(props.suggestionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
