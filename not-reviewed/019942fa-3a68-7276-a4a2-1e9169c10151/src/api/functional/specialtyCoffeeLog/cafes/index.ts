import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISpecialtyCoffeeLogCafe } from "../../../structures/ISpecialtyCoffeeLogCafe";
import { IPageISpecialtyCoffeeLogCafe } from "../../../structures/IPageISpecialtyCoffeeLogCafe";

/**
 * Search and retrieve a filtered, paginated list of specialty coffee cafes.
 *
 * Retrieve a filtered and paginated list of specialty coffee cafes. This
 * operation enables users, including guests and members, to search cafes by
 * name with case-insensitive partial matches and retrieve paginated results
 * ordered alphabetically.
 *
 * The operation interacts with the specialty_coffee_log_cafes table which
 * contains the core cafe data, including name, address, contact info, opening
 * hours, menu description, and photo URL. Soft deletion is supported and
 * deleted records are excluded from search results.
 *
 * Security considerations: This endpoint is public and requires no
 * authentication, allowing any user to browse and search cafes. Pagination
 * parameters help ensure efficient data retrieval and responsiveness.
 *
 * Related operations: cafe detail retrievals use GET /cafes/{cafeId}. Creation
 * and update require authenticated member roles.
 *
 * Expected behavior includes validation of search terms, pagination limits, and
 * ordering. Errors are handled by appropriate status codes for invalid
 * requests.
 *
 * @param props.connection
 * @param props.body Parameters for filtering, searching, pagination, and
 *   ordering cafes
 * @path /specialtyCoffeeLog/cafes
 * @accessor api.functional.specialtyCoffeeLog.cafes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Parameters for filtering, searching, pagination, and ordering cafes */
    body: ISpecialtyCoffeeLogCafe.IRequest;
  };
  export type Body = ISpecialtyCoffeeLogCafe.IRequest;
  export type Response = IPageISpecialtyCoffeeLogCafe.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/specialtyCoffeeLog/cafes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/specialtyCoffeeLog/cafes";
  export const random = (): IPageISpecialtyCoffeeLogCafe.ISummary =>
    typia.random<IPageISpecialtyCoffeeLogCafe.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detail information of a specialty coffee cafe by ID.
 *
 * Retrieve detailed information for a specialty coffee cafe by its unique
 * identifier. This operation fetches all available information stored in the
 * specialty_coffee_log_cafes table excluding soft deleted records.
 *
 * The operation is public, requiring no authentication, and supports read-only
 * access to detailed cafe data.
 *
 * Security considerations include prevention of data leakage of soft deleted or
 * non-existent cafes.
 *
 * Clients should handle 404 errors gracefully when an invalid or non-existent
 * cafeId is provided.
 *
 * Related operations include list retrieval and cafe data modification
 * requiring authorization.
 *
 * Expected behavior includes strict validation of UUID path parameter and
 * structured response.
 *
 * @param props.connection
 * @param props.cafeId Unique identifier of the target specialty coffee cafe
 * @path /specialtyCoffeeLog/cafes/:cafeId
 * @accessor api.functional.specialtyCoffeeLog.cafes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target specialty coffee cafe */
    cafeId: string & tags.Format<"uuid">;
  };
  export type Response = ISpecialtyCoffeeLogCafe;

  export const METADATA = {
    method: "GET",
    path: "/specialtyCoffeeLog/cafes/:cafeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/specialtyCoffeeLog/cafes/${encodeURIComponent(props.cafeId ?? "null")}`;
  export const random = (): ISpecialtyCoffeeLogCafe =>
    typia.random<ISpecialtyCoffeeLogCafe>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cafeId")(() => typia.assert(props.cafeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
