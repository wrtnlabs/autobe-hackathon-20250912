import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Specialty Coffee Log Member entity.
 *
 * Represents authenticated users who can create coffee logs, manage profiles,
 * add cafes, and suggest edits.
 *
 * Stores login credentials and personal data with audit timestamps and soft
 * deletion support.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISpecialtyCoffeeLogMember = {
  /**
   * Primary Key.
   *
   * Unique identifier for the member in UUID format.
   */
  id: string & tags.Format<"uuid">;

  /** Unique email address used for member login and communication. */
  email: string;

  /**
   * Hashed password for secure authentication; plain passwords are never
   * stored.
   */
  password_hash: string;

  /** Timestamp when the member record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the member record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp to allow member deactivation and data recovery.
   * Nullable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ISpecialtyCoffeeLogMember {
  /**
   * Create request to register a new member.
   *
   * Clients provide email and password (to be hashed server-side).
   */
  export type ICreate = {
    /** Unique email address used for member login and communication. */
    email: string;

    /**
     * Hashed password for secure authentication; plain passwords are never
     * stored.
     */
    password_hash: string;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations like
   * login or registration.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated member. */
    id: string & tags.Format<"uuid">;

    /** Email of the authenticated member. */
    email: string;

    /**
     * Hashed password for secure authentication; plain passwords are never
     * stored.
     */
    password_hash: string;

    /** Timestamp when the member record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the member record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp to allow member deactivation and data
     * recovery. Nullable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Login credentials for member authentication. */
  export type ILogin = {
    /** Registered email address of the member. */
    email: string;

    /**
     * Plain password to authenticate the member. Authentication server
     * hashes and compares.
     */
    password: string;
  };

  /** Request to refresh JWT tokens for the member. */
  export type IRefresh = {
    /** Refresh token string used to obtain new access tokens. */
    refresh_token: string;
  };
}
