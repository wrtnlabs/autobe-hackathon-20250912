import { tags } from "typia";

/**
 * Personal coffee logs created by authenticated members representing their
 * tasting experience including bean name, star rating, tasting notes, and
 * brewing method. Logs are private to members and support soft deletion and
 * audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISpecialtyCoffeeLogCoffeeLog = {
  /**
   * Primary Key.
   *
   * Unique identifier of the coffee log.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged member's ID who owns this coffee log.
   *
   * Represents the owner of this coffee log entry.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * Belonged cafe's ID where the coffee log is created.
   *
   * Links this coffee log to a specific cafe.
   */
  cafe_id: string & tags.Format<"uuid">;

  /**
   * Name of the coffee bean tasted, as recorded by the user.
   *
   * This field is required and represents the specific coffee bean.
   */
  bean_name: string;

  /**
   * User's rating of the coffee from 1 to 5 stars, inclusive.
   *
   * Rating as integer.
   */
  star_rating: number & tags.Type<"int32">;

  /**
   * Detailed tasting notes provided by the user.
   *
   * Describes the user's experience and taste details for the coffee.
   */
  tasting_notes: string;

  /** Brewing method used for this coffee tasting (e.g., espresso, pour-over). */
  brewing_method: string;

  /**
   * Timestamp when this log was created.
   *
   * ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this log was last updated.
   *
   * ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this log was soft deleted, if applicable.
   *
   * ISO 8601 date-time string or null if not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ISpecialtyCoffeeLogCoffeeLog {
  /**
   * Request body to create a coffee log. Does not include system generated
   * fields like id, timestamps. Omits member_id and cafe_id since those are
   * path parameter context.
   */
  export type ICreate = {
    /** Name of the coffee bean tasted. */
    bean_name: string;

    /** Star rating from 1 to 5 inclusive. */
    star_rating: number & tags.Type<"int32">;

    /** Detailed tasting notes. */
    tasting_notes: string;

    /** Brewing method used. */
    brewing_method: string;
  };

  /**
   * Request body to update a coffee log. All fields are optional, including
   * those from ICreate. Cannot update member_id or cafe_id to ensure
   * ownership.
   */
  export type IUpdate = {
    /** Name of the coffee bean tasted. */
    bean_name?: string | undefined;

    /** Star rating from 1 to 5 inclusive. */
    star_rating?: (number & tags.Type<"int32">) | undefined;

    /** Detailed tasting notes. */
    tasting_notes?: string | undefined;

    /** Brewing method used. */
    brewing_method?: string | undefined;
  };

  /**
   * Summary variant for the coffee log entity representing key attributes for
   * list views and brief display.
   *
   * Includes id, bean_name, star_rating, and timestamps for creation and last
   * update.
   *
   * Excludes detailed tasting notes and brewing method to optimize response
   * size and performance.
   */
  export type ISummary = {
    /** Unique identifier for the coffee log entry. */
    id: string & tags.Format<"uuid">;

    /** Name of the coffee bean tasted. */
    bean_name: string;

    /** Star rating assigned by the user, from 1 to 5. */
    star_rating: number & tags.Type<"int32">;

    /** Timestamp of when the coffee log was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update to the coffee log. */
    updated_at: string & tags.Format<"date-time">;
  };
}
