import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { ISpecialtyCoffeeLogGuest } from "../../../api/structures/ISpecialtyCoffeeLogGuest";
import { ISpecialtyCoffeeLogGuestRefreshToken } from "../../../api/structures/ISpecialtyCoffeeLogGuestRefreshToken";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Create guest user join operation based on specialty_coffee_log_guests
   * table.
   *
   * Registers a new guest user account for temporary access to the Specialty
   * Coffee Log service. The guest is identified by IP address and user agent,
   * stored in the specialty_coffee_log_guests table.
   *
   * The operation creates a new guest record with the required fields:
   * ip_address and optional user_agent. Upon successful registration, the
   * system returns authorized tokens encapsulated in the
   * IAuthSpecialtyCoffeeLogGuest.IAuthorized response.
   *
   * Guest accounts do not require passwords or emails and have a soft
   * deletion mechanism using "deleted_at".
   *
   * This join endpoint does not require authentication and is accessible
   * publicly.
   *
   * Related operations: refresh token is required to renew access after
   * expiration.
   *
   * Security notes: Guests have limited access and no credential login
   * capabilities.
   *
   * @param connection
   * @param body Payload to register a new guest user including IP address and
   *   optional user agent string.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ISpecialtyCoffeeLogGuest.ICreate,
  ): Promise<ISpecialtyCoffeeLogGuest.IAuthorized> {
    body;
    return typia.random<ISpecialtyCoffeeLogGuest.IAuthorized>();
  }

  /**
   * Refresh tokens for guest user to renew temporary access.
   *
   * Refresh guest user JWT tokens to maintain temporary access to the
   * Specialty Coffee Log service.
   *
   * Requires a valid refresh token included in the request body to produce
   * new access and refresh tokens.
   *
   * No user credentials are needed other than the valid refresh token.
   *
   * This endpoint is secured to guest users with valid tokens.
   *
   * Related operations: join to register and receive the original tokens.
   *
   * Security: Tokens are rotated and managed to prevent unauthorized access.
   *
   * @param connection
   * @param body Refresh token request payload containing the refresh token
   *   string.
   * @setHeader token.access Authorization
   *
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ISpecialtyCoffeeLogGuestRefreshToken.IRequest,
  ): Promise<ISpecialtyCoffeeLogGuest.IAuthorized> {
    body;
    return typia.random<ISpecialtyCoffeeLogGuest.IAuthorized>();
  }
}
