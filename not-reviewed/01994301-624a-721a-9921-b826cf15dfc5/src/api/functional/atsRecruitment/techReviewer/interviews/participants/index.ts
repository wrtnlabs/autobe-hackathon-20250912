import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentInterviewParticipant } from "../../../../../structures/IAtsRecruitmentInterviewParticipant";
import { IPageIAtsRecruitmentInterviewParticipant } from "../../../../../structures/IPageIAtsRecruitmentInterviewParticipant";

/**
 * Retrieve all participants for a specific interview from
 * ats_recruitment_interview_participants.
 *
 * This endpoint enables authorized users—such as system administrators, HR
 * recruiters, and relevant tech reviewers—to access a complete, up-to-date
 * listing of all participants associated with a particular interview record.
 * Each participant entry includes actor role (applicant, recruiter, reviewer,
 * observer), relation to the interview, invitation timestamp, and current
 * confirmation status. Responses may include filtering, sorting, and pagination
 * of records as needed for listings with many participants.
 *
 * Access is role-restricted for privacy and operational security, with
 * systemAdmin, hrRecruiter, and techReviewer roles allowed. The main table
 * involved is ats_recruitment_interview_participants, with relationships to
 * ats_recruitment_interviews (parent) and the relevant actor entity.
 *
 * Business rules should enforce that only users assigned to or responsible for
 * the interview may access this list, and all accesses should be logged in the
 * access log table for compliance. Security policies ensure that applicant
 * details are not exposed beyond authorized users. The endpoint must also
 * validate that the interviewId exists prior to searching, with appropriate
 * errors for missing or deleted records.
 *
 * Related API operations include creating, updating, or deleting interview
 * participants, as well as retrieving interview and schedule details. If the
 * interviewId does not exist, return a clear error indicating the issue.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the parent interview whose
 *   participants are to be listed.
 * @param props.body Filtering and pagination options for participant listing
 *   (optional fields).
 * @path /atsRecruitment/techReviewer/interviews/:interviewId/participants
 * @accessor api.functional.atsRecruitment.techReviewer.interviews.participants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the parent interview whose participants are to
     * be listed.
     */
    interviewId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination options for participant listing (optional
     * fields).
     */
    body: IAtsRecruitmentInterviewParticipant.IRequest;
  };
  export type Body = IAtsRecruitmentInterviewParticipant.IRequest;
  export type Response = IPageIAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/techReviewer/interviews/:interviewId/participants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants`;
  export const random = (): IPageIAtsRecruitmentInterviewParticipant =>
    typia.random<IPageIAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific interview participant from
 * ats_recruitment_interview_participants.
 *
 * This operation allows authorized HR recruiters, system administrators, and
 * tech reviewers to obtain detailed information about a single interview
 * participant. Details include the participant’s role (e.g., applicant,
 * recruiter, tech reviewer), the time of invitation, their current confirmation
 * status (pending, accepted, declined), and the relationship to the parent
 * interview. This is useful for pre-interview preparation, operational control,
 * and compliance auditing.
 *
 * Access restrictions are applied to maintain privacy and business compliance,
 * with only relevant users able to view individual participant data. All
 * accesses are to be logged in compliance with ATS audit and access
 * requirements. Input validation must ensure both interviewId and participantId
 * refer to valid, existing records, with clear errors for missing or deleted
 * participants or interviews.
 *
 * The schema source is the ats_recruitment_interview_participants table, joined
 * with related identity and interview data for context. Other related endpoints
 * include participant listing/search as well as update or removal actions.
 * Error cases may involve inexistent participantIds or unauthorized access
 * attempts, for which meaningful error responses must be provided.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the interview associated with
 *   the participant.
 * @param props.participantId Unique identifier for the specific participant
 *   within the interview.
 * @path /atsRecruitment/techReviewer/interviews/:interviewId/participants/:participantId
 * @accessor api.functional.atsRecruitment.techReviewer.interviews.participants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the interview associated with the participant. */
    interviewId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific participant within the interview. */
    participantId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/techReviewer/interviews/:interviewId/participants/:participantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants/${encodeURIComponent(props.participantId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterviewParticipant =>
    typia.random<IAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.param("participantId")(() => typia.assert(props.participantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
