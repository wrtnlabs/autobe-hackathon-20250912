import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTest } from "../../../../structures/IAtsRecruitmentCodingTest";
import { IPageIAtsRecruitmentCodingTest } from "../../../../structures/IPageIAtsRecruitmentCodingTest";
export * as submissions from "./submissions/index";
export * as results from "./results/index";

/**
 * Search and retrieve a filtered, paginated list of coding test assignments and
 * progress.
 *
 * Retrieves a paginated collection of coding test assigments from
 * ats_recruitment_coding_tests, supporting advanced filter criteria such as
 * applicant, job posting, status (scheduled, in progress, completed, failed),
 * delivery channel (internal or 3rd-party), scheduled/delivery dates, and
 * provider-specific IDs. It is primarily used by HR and technical reviewers to
 * monitor applicant assessment pipeline progress and by system admins for
 * compliance oversight.
 *
 * Integration with related tables (applications, applicants,
 * submission/results/feedback) enables rich operational dashboarding, while
 * indices on status, applicant, and provider allow for efficient processing
 * even with a high volume of tests.
 *
 * Authorization distinguishes that HR recruiters can only see tests related to
 * their postings, tech reviewers are limited to their assignments, and system
 * admins may see all entries. Each record may summarize the test state, links
 * to test or review, and primary metadata needed for next action. Large
 * datasets are returned in a paginated form.
 *
 * @param props.connection
 * @param props.body Complex filtering parameters and pagination controls for
 *   coding test search
 * @path /atsRecruitment/techReviewer/codingTests
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Complex filtering parameters and pagination controls for coding test
     * search
     */
    body: IAtsRecruitmentCodingTest.IRequest;
  };
  export type Body = IAtsRecruitmentCodingTest.IRequest;
  export type Response = IPageIAtsRecruitmentCodingTest;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/techReviewer/codingTests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/techReviewer/codingTests";
  export const random = (): IPageIAtsRecruitmentCodingTest =>
    typia.random<IPageIAtsRecruitmentCodingTest>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific coding test assignment in ATS.
 *
 * Returns all details for a specific coding test record from
 * ats_recruitment_coding_tests, referenced by codingTestId. This includes
 * scheduling, delivery status, applicant and HR references, external provider
 * linkage, expiration dates, and all current state and tracking fields. Used by
 * HR and tech reviewers to monitor assignment progress and investigate
 * applicant issues.
 *
 * Authorization ensures HR can only see assignments for their postings, tech
 * reviewers see only their assignments, system admins have full access, and
 * applicants can view their own assignments. Sensitive provider integration
 * details may be masked except for system admins.
 *
 * Related operations include indexing (list view), and submission/feedback
 * tracking endpoints. Error handling surfaces not found, access violation, or
 * data corruption cases specifically.
 *
 * @param props.connection
 * @param props.codingTestId Unique identifier for the coding test assignment to
 *   be retrieved
 * @path /atsRecruitment/techReviewer/codingTests/:codingTestId
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the coding test assignment to be retrieved */
    codingTestId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTest;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/techReviewer/codingTests/:codingTestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTest =>
    typia.random<IAtsRecruitmentCodingTest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
