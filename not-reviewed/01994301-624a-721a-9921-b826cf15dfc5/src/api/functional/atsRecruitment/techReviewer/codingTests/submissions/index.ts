import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTestSubmission } from "../../../../../structures/IAtsRecruitmentCodingTestSubmission";
import { IPageIAtsRecruitmentCodingTestSubmission } from "../../../../../structures/IPageIAtsRecruitmentCodingTestSubmission";
export * as reviewComments from "./reviewComments/index";

/**
 * Search and paginate coding test submissions for a specific coding test
 * (ats_recruitment_coding_test_submissions table).
 *
 * This operation retrieves a filtered and paginated list of submissions for the
 * coding test identified by codingTestId. Filtering criteria may include
 * submission status, review state, timestamp, or applicant reference. Results
 * are returned in a paginated form, supporting sorting by submitted_at or other
 * columns.
 *
 * The operation supports advanced search criteria, enabling HR recruiters,
 * technical reviewers, or system admins to analyze applicant responses, audit
 * activity, or review progress. Authorization is required, ensuring only staff
 * with appropriate rights can access applicant submission information and
 * sensitive data. Pagination fields, filtering parameters, and sorting
 * directions are accepted in the request body as per business policy.
 *
 * @param props.connection
 * @param props.codingTestId UUID of the coding test for which submissions are
 *   to be retrieved and searched.
 * @param props.body Search criteria, pagination, and sorting options for
 *   listing coding test submissions.
 * @path /atsRecruitment/techReviewer/codingTests/:codingTestId/submissions
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.submissions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * UUID of the coding test for which submissions are to be retrieved and
     * searched.
     */
    codingTestId: string & tags.Format<"uuid">;

    /**
     * Search criteria, pagination, and sorting options for listing coding
     * test submissions.
     */
    body: IAtsRecruitmentCodingTestSubmission.IRequest;
  };
  export type Body = IAtsRecruitmentCodingTestSubmission.IRequest;
  export type Response = IPageIAtsRecruitmentCodingTestSubmission;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/techReviewer/codingTests/:codingTestId/submissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions`;
  export const random = (): IPageIAtsRecruitmentCodingTestSubmission =>
    typia.random<IPageIAtsRecruitmentCodingTestSubmission>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific coding test submission from
 * ats_recruitment_coding_test_submissions by ID.
 *
 * This endpoint retrieves full information about a specific coding test
 * submission record from the system. It references the
 * ats_recruitment_coding_test_submissions table, returning all key fields such
 * as submission timestamp, answer file URL or inline code, status, reviewer
 * status, any comments, and submission history for the indicated codingTestId
 * and submissionId.
 *
 * The operation checks visibility/authorization: applicants may only access
 * their own submissions, while HR or tech reviewers can access submissions
 * linked to their assigned/tested applicants. Security is managed via
 * role-based access, and audit logs should be maintained for all access
 * events.
 *
 * If the submission does not exist, or the requester is not authorized, an
 * error is returned. Linked reviewer comments and result metadata can be
 * included in the response for authorized roles. This endpoint is related to
 * viewing, evaluating, or exporting solution content for interviews or hiring
 * decision processes.
 *
 * @param props.connection
 * @param props.codingTestId The unique ID of the parent coding test.
 * @param props.submissionId The unique ID of the coding test submission.
 * @path /atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.submissions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique ID of the parent coding test. */
    codingTestId: string & tags.Format<"uuid">;

    /** The unique ID of the coding test submission. */
    submissionId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTestSubmission;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions/${encodeURIComponent(props.submissionId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestSubmission =>
    typia.random<IAtsRecruitmentCodingTestSubmission>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("submissionId")(() => typia.assert(props.submissionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing coding test submission in
 * ats_recruitment_coding_test_submissions.
 *
 * This endpoint updates properties of an existing coding test submission in the
 * ats_recruitment_coding_test_submissions table. The most common use cases
 * include technical reviewer or HR updating review status, adding reviewer
 * comments, correcting a misclassified submission, or handling edge cases where
 * re-submission is necessary before final review.
 *
 * The endpoint enforces authorization so only the relevant technical reviewer,
 * HR, or (if permitted) the original applicant can perform updates. Business
 * logic verifies that critical fields such as submitted answer are not altered
 * post-deadline except by authorized users. Audit trails must be kept for all
 * status and comment changes to ensure reviewer accountability and
 * traceability.
 *
 * Related endpoints include retrieval and reviewer comment add/edit. Update
 * operations trigger recalculation of downstream scoring and visibility states
 * as business rules dictate.
 *
 * @param props.connection
 * @param props.codingTestId The unique ID of the parent coding test.
 * @param props.submissionId The unique ID of the coding test submission.
 * @param props.body Updated submission information for the coding test
 *   submission.
 * @path /atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.submissions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique ID of the parent coding test. */
    codingTestId: string & tags.Format<"uuid">;

    /** The unique ID of the coding test submission. */
    submissionId: string & tags.Format<"uuid">;

    /** Updated submission information for the coding test submission. */
    body: IAtsRecruitmentCodingTestSubmission.IUpdate;
  };
  export type Body = IAtsRecruitmentCodingTestSubmission.IUpdate;
  export type Response = IAtsRecruitmentCodingTestSubmission;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions/${encodeURIComponent(props.submissionId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestSubmission =>
    typia.random<IAtsRecruitmentCodingTestSubmission>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("submissionId")(() => typia.assert(props.submissionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a coding test submission from
 * ats_recruitment_coding_test_submissions by ID.
 *
 * This endpoint permanently deletes a coding test submission record from the
 * system using the provided codingTestId and submissionId, referencing the
 * ats_recruitment_coding_test_submissions table. This operation is typically
 * available before the submission is reviewed or in rare compliance scenarios
 * requiring data removal.
 *
 * Authentication and authorization checks ensure only the owner (applicant),
 * involved HR, technical reviewer, or system administrators can perform this
 * operation. Business logic prevents deletion after a certain workflow point
 * (such as after final review), and full audit/reporting is performed for
 * compliance.
 *
 * Irrecoverable hard deletion ensures no lingering answer or evaluation data
 * post-operation. Related endpoints include submission retrieval, update, and
 * status advances for other workflow states.
 *
 * @param props.connection
 * @param props.codingTestId The unique ID of the parent coding test.
 * @param props.submissionId The unique ID of the coding test submission.
 * @path /atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId
 * @accessor api.functional.atsRecruitment.techReviewer.codingTests.submissions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique ID of the parent coding test. */
    codingTestId: string & tags.Format<"uuid">;

    /** The unique ID of the coding test submission. */
    submissionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/techReviewer/codingTests/:codingTestId/submissions/:submissionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions/${encodeURIComponent(props.submissionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("submissionId")(() => typia.assert(props.submissionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
