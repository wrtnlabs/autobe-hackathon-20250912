import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplicationStatusHistory } from "../../../../../structures/IAtsRecruitmentApplicationStatusHistory";
import { IPageIAtsRecruitmentApplicationStatusHistory } from "../../../../../structures/IPageIAtsRecruitmentApplicationStatusHistory";

/**
 * Create a new status history record for an application
 * (ats_recruitment_application_status_histories table).
 *
 * This operation allows an authorized HR recruiter or designated tech reviewer
 * to create a new status history record for a specific job application. This is
 * primarily used for logging any transition of the job application state (such
 * as moving from 'screening' to 'interview', or marking an application as
 * 'accepted' or 'rejected').
 *
 * On successful execution, a record is created in the
 * ats_recruitment_application_status_histories table, detailing which
 * application was affected, which actor performed the status change, the states
 * transitioned from and to, the timestamp, and any additional transition
 * comment. Access is restricted to users with HR or reviewer roles to ensure
 * that unauthorized users cannot forge application state changes. Business
 * logic may enforce allowed transitions according to the organizationâ€™s
 * workflow rules and reject invalid transitions.
 *
 * As an auditable entity, this status history is used for compliance,
 * analytics, and transparency within the recruitment platform. All changes are
 * timestamped and associated with actors to support workflow forensics and
 * application lifecycle reporting. On error, validation checks ensure the
 * application exists and the user has proper permissions. Related endpoints
 * include viewing all status histories for an application and updating an
 * existing record if correction is needed.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application for which
 *   the status history is being created.
 * @param props.body Information about the new status transition, including
 *   previous and new status values, the actor (if provided), timestamp, and
 *   optional comment.
 * @path /atsRecruitment/techReviewer/applications/:applicationId/statusHistories
 * @accessor api.functional.atsRecruitment.techReviewer.applications.statusHistories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the job application for which the status history
     * is being created.
     */
    applicationId: string & tags.Format<"uuid">;

    /**
     * Information about the new status transition, including previous and
     * new status values, the actor (if provided), timestamp, and optional
     * comment.
     */
    body: IAtsRecruitmentApplicationStatusHistory.ICreate;
  };
  export type Body = IAtsRecruitmentApplicationStatusHistory.ICreate;
  export type Response = IAtsRecruitmentApplicationStatusHistory;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/techReviewer/applications/:applicationId/statusHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/applications/${encodeURIComponent(props.applicationId ?? "null")}/statusHistories`;
  export const random = (): IAtsRecruitmentApplicationStatusHistory =>
    typia.random<IAtsRecruitmentApplicationStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all status change histories for an application (paginated, filterable).
 *
 * Fetch a filtered and paginated list of all status change history events for a
 * given application in the recruitment system. This operation supports
 * scenarios where HR recruiters, technical reviewers, or system administrators
 * review the full progression of candidate status transitions, for audit,
 * compliance, and decision support.
 *
 * The operation requires a valid applicationId as a path parameter and accepts
 * an optional filter/search object as the request body for advanced queries
 * (date range, from_status/to_status filters, actor identity, etc). Results are
 * returned in a paginated structure using
 * IAtsRecruitmentApplicationStatusHistory.ISummary. Caller authorization
 * determines the visibility of certain sensitive fields (e.g., actor
 * identity).
 *
 * This endpoint enforces strict access control, and the underlying data is
 * returned from a query joining applications with the status history table. All
 * queries are subject to audit logging. Errors include: application not found,
 * no history available, or unauthorized access attempts. The operation is
 * central to candidate tracking and recruitment process transparency.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the target job application
 * @param props.body Advanced status history search and filter query for an
 *   application
 * @path /atsRecruitment/techReviewer/applications/:applicationId/statusHistories
 * @accessor api.functional.atsRecruitment.techReviewer.applications.statusHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target job application */
    applicationId: string & tags.Format<"uuid">;

    /** Advanced status history search and filter query for an application */
    body: IAtsRecruitmentApplicationStatusHistory.IRequest;
  };
  export type Body = IAtsRecruitmentApplicationStatusHistory.IRequest;
  export type Response = IPageIAtsRecruitmentApplicationStatusHistory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/techReviewer/applications/:applicationId/statusHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/applications/${encodeURIComponent(props.applicationId ?? "null")}/statusHistories`;
  export const random =
    (): IPageIAtsRecruitmentApplicationStatusHistory.ISummary =>
      typia.random<IPageIAtsRecruitmentApplicationStatusHistory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific status change history record for an
 * application.
 *
 * Retrieve the detailed information of a single application status change
 * event, including previous and next status values, the actor who performed the
 * transition, timestamps, and any contextual comments. Used to support thorough
 * audits, compliance reviews, and deep dives into candidate progress.
 *
 * Both applicationId and statusHistoryId must be provided as path parameters
 * for unambiguous context and security validation. Only HR recruiters,
 * technical reviewers, or system administrators are authorized to access this
 * detailed view. The record is looked up and returned as
 * IAtsRecruitmentApplicationStatusHistory type, with sensitive fields protected
 * per-caller's role (e.g., actor identity for compliance users).
 *
 * Business logic ensures only users with a direct business relationship (e.g.,
 * assigned recruiter) can access sensitive information. Error responses are
 * triggered for not found, unauthorized, or compliance data blocks. This
 * endpoint is essential for supporting transparency and defensible recruitment
 * practices.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the target job application
 * @param props.statusHistoryId Unique identifier of the status history event to
 *   retrieve
 * @path /atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId
 * @accessor api.functional.atsRecruitment.techReviewer.applications.statusHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target job application */
    applicationId: string & tags.Format<"uuid">;

    /** Unique identifier of the status history event to retrieve */
    statusHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentApplicationStatusHistory;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/applications/${encodeURIComponent(props.applicationId ?? "null")}/statusHistories/${encodeURIComponent(props.statusHistoryId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicationStatusHistory =>
    typia.random<IAtsRecruitmentApplicationStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.param("statusHistoryId")(() =>
        typia.assert(props.statusHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific status history record for an application
 * (ats_recruitment_application_status_histories table).
 *
 * This operation enables authorized HR recruiters or tech reviewers to update a
 * specific application status history record. Typical use cases include
 * correcting previously submitted comments, rectifying metadata errors (such as
 * an incorrect 'from_status' or 'to_status'), or enhancing details required for
 * more granular audit trails.
 *
 * The operation targets a specific status history identified by its unique ID
 * within the context of a job application. On update, the record in
 * ats_recruitment_application_status_histories is changed accordingly; previous
 * data is typically archived or version-controlled for compliance. Input
 * validation ensures changes comply with business rules and that only
 * permissible fields are edited. Unauthorized or inappropriate edits may be
 * restricted according to platform policy.
 *
 * All updates are timestamped and, where applicable, attributed to the editor.
 * This operation supports maintaining a highly accurate, auditable process
 * record within the hiring workflow, ensuring compliance with traceability
 * standards.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application.
 * @param props.statusHistoryId Unique identifier of the status history record
 *   to update.
 * @param props.body The updated details for the status history record, such as
 *   new comments or corrected status values.
 * @path /atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId
 * @accessor api.functional.atsRecruitment.techReviewer.applications.statusHistories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the job application. */
    applicationId: string & tags.Format<"uuid">;

    /** Unique identifier of the status history record to update. */
    statusHistoryId: string & tags.Format<"uuid">;

    /**
     * The updated details for the status history record, such as new
     * comments or corrected status values.
     */
    body: IAtsRecruitmentApplicationStatusHistory.IUpdate;
  };
  export type Body = IAtsRecruitmentApplicationStatusHistory.IUpdate;
  export type Response = IAtsRecruitmentApplicationStatusHistory;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/techReviewer/applications/${encodeURIComponent(props.applicationId ?? "null")}/statusHistories/${encodeURIComponent(props.statusHistoryId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicationStatusHistory =>
    typia.random<IAtsRecruitmentApplicationStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.param("statusHistoryId")(() =>
        typia.assert(props.statusHistoryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a specific status history record for an application
 * (ats_recruitment_application_status_histories table, hard delete).
 *
 * This operation allows an authorized HR recruiter or tech reviewer to
 * permanently remove a status history record for a specific application.
 * Typically, deletion is allowed only in exceptional situations such as
 * administrative error correction or compliance obligations, as most status
 * history records are considered immutable to preserve audit trails.
 *
 * When executed, the specified status history record is permanently deleted
 * from the ats_recruitment_application_status_histories table. As there is no
 * soft delete column, this record becomes irrecoverable. All deletion actions
 * are recommended to be logged in the audit trail for compliance and
 * transparency. Only users with explicit privileges should be able to perform
 * this operation, and attempts to delete immutable or protected records must be
 * rejected with an appropriate error.
 *
 * This operation supports maintaining an accurate and compliant workflow while
 * minimizing the risk of accidental or unauthorized loss of critical history
 * data. Related operations include retrieval and update of status histories.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application.
 * @param props.statusHistoryId Unique identifier of the status history record
 *   to delete.
 * @path /atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId
 * @accessor api.functional.atsRecruitment.techReviewer.applications.statusHistories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the job application. */
    applicationId: string & tags.Format<"uuid">;

    /** Unique identifier of the status history record to delete. */
    statusHistoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/techReviewer/applications/:applicationId/statusHistories/:statusHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/applications/${encodeURIComponent(props.applicationId ?? "null")}/statusHistories/${encodeURIComponent(props.statusHistoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.param("statusHistoryId")(() =>
        typia.assert(props.statusHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
