import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobSkill } from "../../../../structures/IAtsRecruitmentJobSkill";

/**
 * Retrieve information about a single job skill by ID
 * (ats_recruitment_job_skills).
 *
 * Returns complete information about a job skill, including name, description,
 * status, creation and update timestamps. The record is identified by its
 * jobSkillId, which must be a valid UUID for a job skill currently present in
 * the system. The response includes all business-relevant metadata necessary
 * for display and possible analysis.
 *
 * Accessible to system administrators, HR recruiters, and technical reviewers,
 * but write operations are not permitted through this endpoint. Attempts to
 * access a non-existent or deleted job skill return a not found error. Audit
 * logging of the access event is recommended for compliance.
 *
 * This API is typically used in admin/support dashboards or job skill reference
 * dialogs for efficient skill management and data quality improvement.
 *
 * @param props.connection
 * @param props.jobSkillId Unique identifier of the job skill to retrieve
 * @path /atsRecruitment/techReviewer/jobSkills/:jobSkillId
 * @accessor api.functional.atsRecruitment.techReviewer.jobSkills.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the job skill to retrieve */
    jobSkillId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentJobSkill;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/techReviewer/jobSkills/:jobSkillId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/techReviewer/jobSkills/${encodeURIComponent(props.jobSkillId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobSkill =>
    typia.random<IAtsRecruitmentJobSkill>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobSkillId")(() => typia.assert(props.jobSkillId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
