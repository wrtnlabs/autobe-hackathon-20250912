import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentEnum } from "../../../structures/IAtsRecruitmentEnum";
import { IPageIAtsRecruitmentEnum } from "../../../structures/IPageIAtsRecruitmentEnum";

/**
 * Search and retrieve a paginated, filterable list of enum values from
 * ats_recruitment_enums table.
 *
 * Retrieve a filtered and paginated list of enumeration (enum) values
 * registered in the ATS recruitment platform for business code lookup,
 * dropdowns, and validation. This operation allows searching by enum_type (such
 * as application_status, notification_channel), enum_code (unique code/constant
 * for business logic), label (UI-visible string), and
 * sorting/pagination/filtering as needed.
 *
 * Only enum values that are not soft-deleted (deleted_at IS NULL) are included
 * in listings. The fields available for query include: enum_type (category),
 * enum_code (business code), label (for UI), description, and any optional
 * extended_data for metadata.
 *
 * This endpoint is open to all authenticated users and may be called by both
 * backend services and client UIs to dynamically construct dropdowns and
 * validation lists. Sensitivity of some enums (if any) should be managed with
 * business logic in the implementation layer; schema-level access is not
 * restricted. The operation is read-only and never exposes secrets. Standard
 * pagination and search conventions apply. Related endpoints include
 * single-enum retrieval (GET /enums/{id}) and enum creation/update
 * (admin-only).
 *
 * @param props.connection
 * @param props.body Complex filter/search and pagination criteria for enum list
 *   retrieval.
 * @path /atsRecruitment/enums
 * @accessor api.functional.atsRecruitment.enums.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Complex filter/search and pagination criteria for enum list
     * retrieval.
     */
    body: IAtsRecruitmentEnum.IRequest;
  };
  export type Body = IAtsRecruitmentEnum.IRequest;
  export type Response = IPageIAtsRecruitmentEnum;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/enums",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/enums";
  export const random = (): IPageIAtsRecruitmentEnum =>
    typia.random<IPageIAtsRecruitmentEnum>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific enum value's full details from ats_recruitment_enums
 * table by UUID.
 *
 * Fetch detailed information for a specific enumeration (enum) value in the ATS
 * recruitment system, identified by enumId (UUID). The returned entity contains
 * all principal attributes: enum_type (category, such as application_status),
 * enum_code (business code/constant), label (display value), extended_data
 * (optional metadata for UI/widgets), description (usage context), and audit
 * fields created_at/updated_at.
 *
 * This operation is typically used for client-side data population, lookup, and
 * data integrity validation. No secrets or confidential business logic is
 * contained in the enum values. Access is open to all authenticated users and
 * may be public if business logic allows. Only non-deleted (deleted_at IS NULL)
 * enum records can be returned; otherwise, the response is null or error.
 *
 * Related endpoints: paginated search/filter (PATCH /enums), enum
 * creation/update (admin only). Error handling includes not-found, deleted, or
 * invalid-id cases. All audit trail and data correctness constraints are
 * handled at the implementation layer.
 *
 * @param props.connection
 * @param props.enumId UUID of the enumeration entity to fetch detailed
 *   information for.
 * @path /atsRecruitment/enums/:enumId
 * @accessor api.functional.atsRecruitment.enums.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the enumeration entity to fetch detailed information for. */
    enumId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentEnum;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/enums/:enumId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/enums/${encodeURIComponent(props.enumId ?? "null")}`;
  export const random = (): IAtsRecruitmentEnum =>
    typia.random<IAtsRecruitmentEnum>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("enumId")(() => typia.assert(props.enumId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
