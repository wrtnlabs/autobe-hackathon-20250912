import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplicant } from "../../../../structures/IAtsRecruitmentApplicant";
import { IPageIAtsRecruitmentApplicant } from "../../../../structures/IPageIAtsRecruitmentApplicant";

/**
 * Search and retrieve a paginated list of ats_recruitment_applicants records
 * with filtering and sorting.
 *
 * Enables HR recruiters or system administrators to retrieve a paginated,
 * filterable list of applicant accounts from the ats_recruitment_applicants
 * table. Search filters can include name, email, account status, creation date,
 * and activation status.
 *
 * The list supports pagination and sorting to efficiently browse large numbers
 * of applicants, with performance optimized via indexed fields. Each applicant
 * record includes primary identification data, contact details, activation
 * state, and basic timestamps. Access is limited to authorized HR staff and
 * administrators.
 *
 * Role-based restrictions ensure privacy of applicant contact data, and audit
 * logging is performed for search activities. Standard error handling
 * (permission denied, invalid parameters) applies to this operation.
 *
 * @param props.connection
 * @param props.body Search criteria, pagination, and sorting parameters for
 *   applicant filtering.
 * @path /atsRecruitment/hrRecruiter/applicants
 * @accessor api.functional.atsRecruitment.hrRecruiter.applicants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, pagination, and sorting parameters for applicant
     * filtering.
     */
    body: IAtsRecruitmentApplicant.IRequest;
  };
  export type Body = IAtsRecruitmentApplicant.IRequest;
  export type Response = IPageIAtsRecruitmentApplicant.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/applicants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/applicants";
  export const random = (): IPageIAtsRecruitmentApplicant.ISummary =>
    typia.random<IPageIAtsRecruitmentApplicant.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed applicant profile by applicantId from
 * ats_recruitment_applicants.
 *
 * Fetches the complete profile for a single applicant user account, identified
 * by applicantId. Returns structured applicant profile data including
 * authentication email, full name, phone, account activity status,
 * registration, and update timestamps, mirroring the database record
 * structure.
 *
 * Only HR recruiters and system administrators are permitted to access this
 * operation due to sensitive personal data. The system audits all access for
 * compliance and privacy reporting. Responds with detailed 404/403 error on
 * not-found or unauthorized access.
 *
 * @param props.connection
 * @param props.applicantId Unique identifier of the applicant to retrieve.
 * @path /atsRecruitment/hrRecruiter/applicants/:applicantId
 * @accessor api.functional.atsRecruitment.hrRecruiter.applicants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the applicant to retrieve. */
    applicantId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentApplicant;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/applicants/:applicantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/applicants/${encodeURIComponent(props.applicantId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicant =>
    typia.random<IAtsRecruitmentApplicant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicantId")(() => typia.assert(props.applicantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing applicant account by applicantId in
 * ats_recruitment_applicants.
 *
 * Modifies the profile of an existing applicant account as identified by
 * applicantId in the path. Permitted updatable fields include name, phone
 * number, and account activation state (is_active). The authenticated backend
 * system always safely processes the new password (if present) as a secure
 * hash, never as plaintext. Attempts to update email or primary identifier
 * fields are rejected.
 *
 * Only accessible to HR recruiters and system administrators for account
 * management. All operations are audited for security, and changes to key
 * fields are logged for compliance. Returns the updated profile record or
 * appropriate error (not found, permission denied, invalid input).
 *
 * @param props.connection
 * @param props.applicantId Unique identifier of the applicant account to
 *   update.
 * @param props.body Fields to update on the applicant profile (name, phone,
 *   password, is_active).
 * @path /atsRecruitment/hrRecruiter/applicants/:applicantId
 * @accessor api.functional.atsRecruitment.hrRecruiter.applicants.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the applicant account to update. */
    applicantId: string & tags.Format<"uuid">;

    /**
     * Fields to update on the applicant profile (name, phone, password,
     * is_active).
     */
    body: IAtsRecruitmentApplicant.IUpdate;
  };
  export type Body = IAtsRecruitmentApplicant.IUpdate;
  export type Response = IAtsRecruitmentApplicant;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/hrRecruiter/applicants/:applicantId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/applicants/${encodeURIComponent(props.applicantId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicant =>
    typia.random<IAtsRecruitmentApplicant>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicantId")(() => typia.assert(props.applicantId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
