import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTestReviewComment } from "../../../../../../structures/IAtsRecruitmentCodingTestReviewComment";
import { IPageIAtsRecruitmentCodingTestReviewComment } from "../../../../../../structures/IPageIAtsRecruitmentCodingTestReviewComment";

/**
 * Retrieve the details of a coding test review comment by ID for a given coding
 * test submission.
 *
 * This API retrieves all details of a specified review comment associated with
 * a particular coding test submission. It can be used by technical reviewers,
 * HR staff, or system admins to display the content, review type, timestamps,
 * and reviewer identification of a single comment for moderation/audit
 * purposes.
 *
 * Access to this endpoint should be restricted according to applicant privacy
 * and reviewer authorization rules, as review comments may contain sensitive
 * evaluation notes. Security checks must ensure the requesting actor is
 * permitted to view the review comment (e.g., must be the assigned tech
 * reviewer or HR of the job posting), as per platform policy.
 *
 * Referenced database columns include the immutable review comment text,
 * comment_type (e.g., 'manual', 'auto', or 'system'), timestamps for when the
 * comment was started and finalized, and the reviewer ID. The operation draws
 * from the ats_recruitment_coding_test_review_comments schema and supports
 * compliance by enabling audit of reviewer feedback and the integrity of the
 * review process.
 *
 * This endpoint is intended to be used after listing available review comments
 * for a submission (via listing endpoint), or when directly accessing a comment
 * from a moderation or feedback workflow UI. Error handling must clearly
 * distinguish not found, forbidden, or deleted resources, returning appropriate
 * error codes and audit logging all access for compliance.
 *
 * @param props.connection
 * @param props.codingTestId Unique identifier for the coding test to which the
 *   review comment belongs.
 * @param props.submissionId Unique identifier for the coding test submission
 *   associated with this review comment.
 * @param props.reviewCommentId Unique identifier for the review comment being
 *   retrieved.
 * @path /atsRecruitment/hrRecruiter/codingTests/:codingTestId/submissions/:submissionId/reviewComments/:reviewCommentId
 * @accessor api.functional.atsRecruitment.hrRecruiter.codingTests.submissions.reviewComments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier for the coding test to which the review comment
     * belongs.
     */
    codingTestId: string & tags.Format<"uuid">;

    /**
     * Unique identifier for the coding test submission associated with this
     * review comment.
     */
    submissionId: string & tags.Format<"uuid">;

    /** Unique identifier for the review comment being retrieved. */
    reviewCommentId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTestReviewComment;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/codingTests/:codingTestId/submissions/:submissionId/reviewComments/:reviewCommentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions/${encodeURIComponent(props.submissionId ?? "null")}/reviewComments/${encodeURIComponent(props.reviewCommentId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestReviewComment =>
    typia.random<IAtsRecruitmentCodingTestReviewComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("submissionId")(() => typia.assert(props.submissionId));
      assert.param("reviewCommentId")(() =>
        typia.assert(props.reviewCommentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filtered list of coding test review comments
 * for a specific submission.
 *
 * This API provides a way to retrieve a filtered and paginated list of all
 * review comments associated with a specific coding test submission, enabling
 * team members to audit, moderate, or collaboratively evaluate the applicant's
 * coding test. The request body may include search terms, reviewer filters,
 * date ranges, or comment type, supporting flexible UX scenarios for reviewing
 * or audit.
 *
 * Comments are returned ordered by commented_at descending, but support
 * additional sort options. The response includes pagination, total count, and a
 * list of matching review comments, as per the
 * ats_recruitment_coding_test_review_comments schema. Security rules ensure
 * that only authorized tech reviewers (those assigned), HR for the
 * corresponding job posting, or system admins can access the list, with full
 * audit logging of all data accesses.
 *
 * The endpoint is not intended to return the full coding test or submission
 * content, only the review comment metadata and content fields. Error handling
 * distinguishes between no results, forbidden access, and deleted resources.
 * Related endpoints include creation, single retrieval, and deletion of
 * comments.
 *
 * @param props.connection
 * @param props.codingTestId Unique identifier for the coding test to list
 *   review comments for.
 * @param props.submissionId Unique identifier for the coding test submission
 *   under review.
 * @param props.body Search, filter, and pagination parameters for reviewer
 *   comment query.
 * @path /atsRecruitment/hrRecruiter/codingTests/:codingTestId/submissions/:submissionId/reviewComments
 * @accessor api.functional.atsRecruitment.hrRecruiter.codingTests.submissions.reviewComments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the coding test to list review comments for. */
    codingTestId: string & tags.Format<"uuid">;

    /** Unique identifier for the coding test submission under review. */
    submissionId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination parameters for reviewer comment query. */
    body: IAtsRecruitmentCodingTestReviewComment.IRequest;
  };
  export type Body = IAtsRecruitmentCodingTestReviewComment.IRequest;
  export type Response = IPageIAtsRecruitmentCodingTestReviewComment;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/codingTests/:codingTestId/submissions/:submissionId/reviewComments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/submissions/${encodeURIComponent(props.submissionId ?? "null")}/reviewComments`;
  export const random = (): IPageIAtsRecruitmentCodingTestReviewComment =>
    typia.random<IPageIAtsRecruitmentCodingTestReviewComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("submissionId")(() => typia.assert(props.submissionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
