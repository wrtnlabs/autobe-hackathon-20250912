import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTestExternalLog } from "../../../../../structures/IAtsRecruitmentCodingTestExternalLog";
import { IPageIAtsRecruitmentCodingTestExternalLog } from "../../../../../structures/IPageIAtsRecruitmentCodingTestExternalLog";

/**
 * List external integration logs for a coding test
 * (ats_recruitment_coding_test_external_logs).
 *
 * Retrieve a paginated and filtered list of external integration logs for a
 * given coding test. This operation supports search and troubleshooting across
 * all external log records tied to a particular coding test instance, including
 * log type (API event, callback, error), timestamps, references to external
 * IDs, and diagnostic messages.
 *
 * This endpoint is primarily used by HR recruiters and system administrators
 * when resolving external service delivery problems, audit compliance, or
 * investigating delivery/reporting anomalies for technical assessment
 * platforms. Logs may include both successful and failed interactions,
 * supporting comprehensive analysis. The endpoint references the coding test's
 * logs only; it does not cross into logs of unrelated tests.
 *
 * Validation ensures request body constraints for filters, pagination (page,
 * perPage), and allows events to be searched by type, date, or error code. The
 * endpoint is critical for compliance and support functions, does not allow
 * record modification, and read operations are logged for audit traceability.
 * Related endpoints include getting a single log record or exporting logs for
 * external review.
 *
 * @param props.connection
 * @param props.codingTestId ID of the coding test to retrieve external logs
 *   for.
 * @param props.body Filtering, pagination, or search criteria for external log
 *   retrieval.
 * @path /atsRecruitment/hrRecruiter/codingTests/:codingTestId/externalLogs
 * @accessor api.functional.atsRecruitment.hrRecruiter.codingTests.externalLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of the coding test to retrieve external logs for. */
    codingTestId: string & tags.Format<"uuid">;

    /** Filtering, pagination, or search criteria for external log retrieval. */
    body: IAtsRecruitmentCodingTestExternalLog.IRequest;
  };
  export type Body = IAtsRecruitmentCodingTestExternalLog.IRequest;
  export type Response = IPageIAtsRecruitmentCodingTestExternalLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/codingTests/:codingTestId/externalLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/externalLogs`;
  export const random =
    (): IPageIAtsRecruitmentCodingTestExternalLog.ISummary =>
      typia.random<IPageIAtsRecruitmentCodingTestExternalLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific external log event for a coding test
 * (ats_recruitment_coding_test_external_logs).
 *
 * Retrieve complete details for one external integration log event for a given
 * coding test. Typically used during integration issue investigation to analyze
 * the technical trace, response payload, error diagnosis, and metadata of
 * exchanges with external coding test platforms.
 *
 * This endpoint is intended for authorized HR recruiters and system
 * administrators. It supports incident investigation, compliance recordkeeping,
 * or export for case documentation. The log data structure provides
 * comprehensive diagnostic context, but is read-only and cannot be altered
 * through this endpoint.
 *
 * Related endpoints include listing logs for a coding test or exporting event
 * batches. Error handling covers missing or mismatched log identifiers and
 * authorization failures. All access to log details is itself auditable.
 *
 * @param props.connection
 * @param props.codingTestId ID of the coding test to which the log belongs.
 * @param props.externalLogId ID of the external log entry to retrieve.
 * @path /atsRecruitment/hrRecruiter/codingTests/:codingTestId/externalLogs/:externalLogId
 * @accessor api.functional.atsRecruitment.hrRecruiter.codingTests.externalLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the coding test to which the log belongs. */
    codingTestId: string & tags.Format<"uuid">;

    /** ID of the external log entry to retrieve. */
    externalLogId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTestExternalLog;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/codingTests/:codingTestId/externalLogs/:externalLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/externalLogs/${encodeURIComponent(props.externalLogId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestExternalLog =>
    typia.random<IAtsRecruitmentCodingTestExternalLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("externalLogId")(() => typia.assert(props.externalLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
