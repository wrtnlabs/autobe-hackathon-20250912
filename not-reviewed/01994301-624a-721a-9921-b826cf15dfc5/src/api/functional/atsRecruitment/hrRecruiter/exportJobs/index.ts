import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentExportJob } from "../../../../structures/IAtsRecruitmentExportJob";
import { IPageIAtsRecruitmentExportJob } from "../../../../structures/IPageIAtsRecruitmentExportJob";
export * as details from "./details/index";
export * as failures from "./failures/index";

/**
 * Create an export job to request system data export to CSV/Excel, storing
 * configuration, purpose, and initiator metadata.
 *
 * This API operation enables authorized users (typically HR recruiters or
 * system administrators) to initiate an export job by specifying the target
 * data type (job_type), filter criteria, selected columns, and delivery method.
 * Upon creation, the operation stores configuration and meta-information in the
 * ats_recruitment_export_jobs table, marking job status as pending or
 * generating.
 *
 * The client provides configuration in the request body (such as filters,
 * job_type, delivery method, and optional description), and the backend
 * schedules background processing for the export. The export file itself is
 * produced asynchronously; users can later poll the export job record to check
 * the status and download the resulting file once available.
 *
 * Appropriate permission checks ensure that export operations are only
 * available to authorized users, and sensitive data can only be requested and
 * delivered within business rules. All operation details and context are
 * included for audit and compliance logging.
 *
 * @param props.connection
 * @param props.body Export job creation parameters, including job_type, filter
 *   criteria, delivery method, and description as appropriate to
 *   IAtsRecruitmentExportJob.ICreate.
 * @path /atsRecruitment/hrRecruiter/exportJobs
 * @accessor api.functional.atsRecruitment.hrRecruiter.exportJobs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Export job creation parameters, including job_type, filter criteria,
     * delivery method, and description as appropriate to
     * IAtsRecruitmentExportJob.ICreate.
     */
    body: IAtsRecruitmentExportJob.ICreate;
  };
  export type Body = IAtsRecruitmentExportJob.ICreate;
  export type Response = IAtsRecruitmentExportJob;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/hrRecruiter/exportJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/exportJobs";
  export const random = (): IAtsRecruitmentExportJob =>
    typia.random<IAtsRecruitmentExportJob>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate export job records
 * (ats_recruitment_export_jobs).
 *
 * This endpoint allows authorized users such as HR recruiters or system
 * administrators to search, filter, and retrieve a paginated list of export job
 * records. Export jobs track system- or user-initiated requests to extract
 * business data from the ATS platform into downloadable files, including export
 * type (applicants, resumes, applications), request status, initiator IDs, and
 * delivery details.
 *
 * The PATCH method supports advanced querying and filtering for export job
 * metadata: job status, type, filename, actor details, date intervals, and
 * custom query via filter JSON. Results are paginated for efficiency as export
 * jobs may number in the hundreds or thousands.
 *
 * Export jobs include sensitive business and personal data, so access is
 * strictly limited to system admins and HR. All queries are trace-audited. This
 * operation enables review, monitoring, and troubleshooting of all historical
 * data exports for compliance and data governance.
 *
 * @param props.connection
 * @param props.body Search, filter, or pagination parameters for export job
 *   search.
 * @path /atsRecruitment/hrRecruiter/exportJobs
 * @accessor api.functional.atsRecruitment.hrRecruiter.exportJobs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, or pagination parameters for export job search. */
    body: IAtsRecruitmentExportJob.IRequest;
  };
  export type Body = IAtsRecruitmentExportJob.IRequest;
  export type Response = IPageIAtsRecruitmentExportJob.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/exportJobs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/exportJobs";
  export const random = (): IPageIAtsRecruitmentExportJob.ISummary =>
    typia.random<IPageIAtsRecruitmentExportJob.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific export job from the
 * ats_recruitment_export_jobs table.
 *
 * This API operation is designed to return the complete record for a single
 * export job as modeled in the ats_recruitment_export_jobs Prisma schema. Each
 * export job represents a request initiated by an authorized user (HR, admin,
 * or applicant) to extract tabular data to CSV or Excel for compliance,
 * reporting, or data portability.
 *
 * The endpoint requires the export job's unique identifier (exportJobId) as a
 * path parameter. On success, it will deliver current status, export type,
 * filter and delivery configuration, initiator and contextual metadata, and—if
 * available—a URI to download the exported file. Fields such as file_uri or
 * delivered_at may be null if the job is in progress or has failed.
 * Desensitized representation is used for sensitive fields where compliance is
 * necessary.
 *
 * Security and permission controls ensure only authorized actors (usually the
 * export initiator or users with sufficient privileges) may access this
 * endpoint and sensitive data exposure is prevented by business logic. This
 * operation is critical for user self-service data export tracking and
 * administrator oversight.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier of the export job to retrieve.
 * @path /atsRecruitment/hrRecruiter/exportJobs/:exportJobId
 * @accessor api.functional.atsRecruitment.hrRecruiter.exportJobs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the export job to retrieve. */
    exportJobId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentExportJob;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/exportJobs/:exportJobId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}`;
  export const random = (): IAtsRecruitmentExportJob =>
    typia.random<IAtsRecruitmentExportJob>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an export job's configuration or metadata if allowed by business
 * policy and job status.
 *
 * This API updates properties of a specific export job, such as job metadata,
 * filter configuration, purpose description, or status, as allowed by system
 * rules. The operation receives the export job's unique identifier
 * (exportJobId) as a path parameter, and the new configuration attributes are
 * provided in the request body according to the
 * IAtsRecruitmentExportJob.IUpdate schema. Updates may only be permitted before
 * export is finalized or delivered and should be subject to business
 * constraints (e.g., status must permit changes).
 *
 * All modifications are securely tracked and logged in audit records for
 * compliance, and authorization is checked such that only the export initiator
 * or system administrators can make updates. Attempts to modify
 * completed/locked export jobs are handled gracefully with clear error
 * messaging.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier of the export job to update.
 * @param props.body Update parameters for the export job, matching
 *   IAtsRecruitmentExportJob.IUpdate. Only permitted fields may be included.
 * @path /atsRecruitment/hrRecruiter/exportJobs/:exportJobId
 * @accessor api.functional.atsRecruitment.hrRecruiter.exportJobs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the export job to update. */
    exportJobId: string & tags.Format<"uuid">;

    /**
     * Update parameters for the export job, matching
     * IAtsRecruitmentExportJob.IUpdate. Only permitted fields may be
     * included.
     */
    body: IAtsRecruitmentExportJob.IUpdate;
  };
  export type Body = IAtsRecruitmentExportJob.IUpdate;
  export type Response = IAtsRecruitmentExportJob;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/hrRecruiter/exportJobs/:exportJobId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}`;
  export const random = (): IAtsRecruitmentExportJob =>
    typia.random<IAtsRecruitmentExportJob>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
