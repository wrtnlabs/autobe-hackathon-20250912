import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentNotificationDelivery } from "../../../../../structures/IAtsRecruitmentNotificationDelivery";
import { IPageIAtsRecruitmentNotificationDelivery } from "../../../../../structures/IPageIAtsRecruitmentNotificationDelivery";

/**
 * Create a new log entry for a notification delivery attempt
 * (ats_recruitment_notification_deliveries table) under a notification event.
 *
 * This API creates a new notification delivery attempt entry for a specific
 * notification, logging the delivery channel, recipient address, initial
 * status, and other relevant details into the
 * ats_recruitment_notification_deliveries table. Business logic enforces
 * channel type validation, address format checks (e.g., valid email/phone), and
 * proper initial status, with all attempts indexed for compliance.
 *
 * Only authorized users—system administrators or HR recruiters—can record a
 * delivery attempt, preventing unauthorized audits or spoofing of delivery
 * results. Full details are recorded in accordance with business and audit
 * requirements, and each attempt is tracked with a delivery_attempt counter for
 * retry logic.
 *
 * Related endpoints include GET/PUT/DELETE for individual delivery attempts and
 * listing or searching notification deliveries. Errors for invalid references,
 * duplicate entries, or broken business rules are returned with descriptive,
 * actionable messages.
 *
 * @param props.connection
 * @param props.notificationId UUID for the parent notification to which this
 *   delivery is linked
 * @param props.body Data describing the new notification delivery attempt,
 *   including channel, address, and current status.
 * @path /atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries
 * @accessor api.functional.atsRecruitment.hrRecruiter.notifications.deliveries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID for the parent notification to which this delivery is linked */
    notificationId: string & tags.Format<"uuid">;

    /**
     * Data describing the new notification delivery attempt, including
     * channel, address, and current status.
     */
    body: IAtsRecruitmentNotificationDelivery.ICreate;
  };
  export type Body = IAtsRecruitmentNotificationDelivery.ICreate;
  export type Response = IAtsRecruitmentNotificationDelivery;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/notifications/${encodeURIComponent(props.notificationId ?? "null")}/deliveries`;
  export const random = (): IAtsRecruitmentNotificationDelivery =>
    typia.random<IAtsRecruitmentNotificationDelivery>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search delivery attempts for a notification by notificationId
 * (ats_recruitment_notification_deliveries).
 *
 * This operation fetches a paginated, filterable list of delivery attempts for
 * a specified notification event (identified by notificationId). Return results
 * include delivery channel, recipient address, status, result detail, and
 * timestamp fields. Filtering and pagination support troubleshooting of
 * failed/cancelled deliveries, compliance auditing, and analytics of
 * notification reliability and recipient reachability.
 *
 * Only authorized system roles (systemAdmin, hrRecruiter) can view delivery
 * logs for notifications, with proper checks on both notification existence and
 * caller privilege. The operation is business-read-only: it does not modify
 * delivery state but supports cross-channel history review. Results may be
 * sorted by delivered_at, channel, or attempt number. Response is a paged
 * container of delivery records (summaries).
 *
 * Sensitive delivery result details are included only for users with
 * systemAdmin role, and logs are subject to business data retention and privacy
 * policies. Access is audited for incident and compliance tracing. Downstream
 * investigation of failed notifications can be triggered by analyzing the
 * returned data.
 *
 * @param props.connection
 * @param props.notificationId ID of target notification for which to retrieve
 *   delivery logs.
 * @param props.body Criteria for filtering, sorting, and paging notification
 *   delivery logs.
 * @path /atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries
 * @accessor api.functional.atsRecruitment.hrRecruiter.notifications.deliveries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of target notification for which to retrieve delivery logs. */
    notificationId: string & tags.Format<"uuid">;

    /**
     * Criteria for filtering, sorting, and paging notification delivery
     * logs.
     */
    body: IAtsRecruitmentNotificationDelivery.IRequest;
  };
  export type Body = IAtsRecruitmentNotificationDelivery.IRequest;
  export type Response = IPageIAtsRecruitmentNotificationDelivery;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/notifications/${encodeURIComponent(props.notificationId ?? "null")}/deliveries`;
  export const random = (): IPageIAtsRecruitmentNotificationDelivery =>
    typia.random<IPageIAtsRecruitmentNotificationDelivery>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific notification delivery attempt
 * (ats_recruitment_notification_deliveries table) by notification and delivery
 * ID.
 *
 * This operation retrieves a single delivery attempt record associated with a
 * notification from the notification delivery audit log. It returns all primary
 * fields from the ats_recruitment_notification_deliveries table, including
 * delivery_channel, recipient_address, delivery_status, delivery_attempt,
 * completion/failure times, provider result details, and all audit timestamps
 * for analytics and compliance review.
 *
 * Only authorized users (system administrators or recruitment HRs) should be
 * allowed to invoke this operation, as the delivery logs may contain recipient
 * contact data and sensitive status about delivery attempts (such as email,
 * SMS, or phone numbers). Secure access control, masking, and error handling
 * are critical.
 *
 * The operation references the notificationId and deliveryId as unique UUID
 * path parameters, which together identify a specific delivery attempt tied to
 * a notification event. It ensures data is fetched safely, with
 * audit/compliance in mind, and provides a foundation for troubleshooting
 * failed or undelivered notifications—showing full traceability of the
 * notification lifecycle for business and legal purposes.
 *
 * Related endpoints include the notification list and notification delivery
 * POST/PUT to initiate or update a delivery attempt. If an invalid
 * notificationId or deliveryId is provided, or if access is denied, detailed
 * error messages are returned following system compliance guidelines.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier for the target notification
 *   event
 * @param props.deliveryId Unique identifier for the specific delivery attempt
 *   record
 * @path /atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries/:deliveryId
 * @accessor api.functional.atsRecruitment.hrRecruiter.notifications.deliveries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target notification event */
    notificationId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific delivery attempt record */
    deliveryId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentNotificationDelivery;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/notifications/${encodeURIComponent(props.notificationId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IAtsRecruitmentNotificationDelivery =>
    typia.random<IAtsRecruitmentNotificationDelivery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the parameters or status of a notification delivery attempt
 * (ats_recruitment_notification_deliveries table) for a specific deliveryId.
 *
 * Allows privileged actors to update the audit log record of a notification
 * delivery attempt, specifically fields such as delivery_status,
 * recipient_address, delivery_result_detail, delivery_attempt count, and actual
 * delivered/failed timestamps. Used both for business-side manual corrections
 * and automated update flows (such as provider callback updates).
 *
 * Security and access restrictions are enforced, so only systemAdmin and
 * hrRecruiter roles may modify these delivery records. All changes are logged
 * for full auditing, and only mutable fields are editable. Nonexistent or
 * deleted notifications/deliveries result in descriptive error responses, as do
 * failed authentication or rule violations.
 *
 * @param props.connection
 * @param props.notificationId UUID of the parent notification event
 * @param props.deliveryId UUID of the delivery attempt log to update
 * @param props.body Fields to update for the notification delivery attempt,
 *   such as status, channel, address, and timestamps.
 * @path /atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries/:deliveryId
 * @accessor api.functional.atsRecruitment.hrRecruiter.notifications.deliveries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent notification event */
    notificationId: string & tags.Format<"uuid">;

    /** UUID of the delivery attempt log to update */
    deliveryId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the notification delivery attempt, such as
     * status, channel, address, and timestamps.
     */
    body: IAtsRecruitmentNotificationDelivery.IUpdate;
  };
  export type Body = IAtsRecruitmentNotificationDelivery.IUpdate;
  export type Response = IAtsRecruitmentNotificationDelivery;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/hrRecruiter/notifications/:notificationId/deliveries/:deliveryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/notifications/${encodeURIComponent(props.notificationId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IAtsRecruitmentNotificationDelivery =>
    typia.random<IAtsRecruitmentNotificationDelivery>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
