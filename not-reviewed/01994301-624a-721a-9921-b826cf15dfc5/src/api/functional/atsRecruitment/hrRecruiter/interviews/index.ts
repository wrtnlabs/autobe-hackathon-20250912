import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentInterview } from "../../../../structures/IAtsRecruitmentInterview";
import { IPageIAtsRecruitmentInterview } from "../../../../structures/IPageIAtsRecruitmentInterview";
export * as participants from "./participants/index";
export * as schedules from "./schedules/index";
export * as calendarSyncs from "./calendarSyncs/index";
export * as questions from "./questions/index";

/**
 * Create a new interview record (ats_recruitment_interviews) for a particular
 * application.
 *
 * This API operation allows an HR recruiter to create and schedule a new
 * interview session against an application. The POST body defines properties
 * including the application UUID, title, interview stage (e.g., tech_round,
 * final), notes, and initial participant list. Upon success, the system returns
 * full details of the newly created interview entity, ready for association
 * with schedules and questions by follow-up operations.
 *
 * Security and business logic require that only HR recruiters (and authorized
 * delegates) can perform interview creation. The provided application must
 * exist and be in an interview-eligible state. Data is validated according to
 * the ats_recruitment_interviews schema, and schedule slots and participants
 * may be managed in associated endpoints. The operation fully participates in
 * audit trails and compliance logging as required by the business
 * requirements.
 *
 * @param props.connection
 * @param props.body Interview creation payload, including application ID,
 *   title, stage, and participant list.
 * @path /atsRecruitment/hrRecruiter/interviews
 * @accessor api.functional.atsRecruitment.hrRecruiter.interviews.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Interview creation payload, including application ID, title, stage,
     * and participant list.
     */
    body: IAtsRecruitmentInterview.ICreate;
  };
  export type Body = IAtsRecruitmentInterview.ICreate;
  export type Response = IAtsRecruitmentInterview;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/hrRecruiter/interviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/interviews";
  export const random = (): IAtsRecruitmentInterview =>
    typia.random<IAtsRecruitmentInterview>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of interviews
 * (ats_recruitment_interviews).
 *
 * Retrieve a filtered and paginated list of interview records from the system.
 * This operation provides advanced search capabilities, allowing users to find
 * interviews by stage (e.g., first phase, tech round), status (scheduled,
 * completed, cancelled), date ranges, and notes. Filtering can include
 * associated applicant/application/job posting metadata if permitted by
 * requester role.
 *
 * Security considerations are enforced, with role-based filtering ensuring
 * applicants only see their own interviews, reviewers see assigned interviews,
 * and HR/admin have broader access. Results can be sorted by schedule, creation
 * timestamp, or updated timestamp. Access entails compliance with interview
 * participant and schedule join data, as per requirements in the Prisma schema
 * and business documentation.
 *
 * Typical use cases include dashboards for HR to monitor upcoming interviews,
 * technical reviewers to manage assigned rounds, and applicants to view their
 * own interview schedule. Pagination parameters allow scalable monitoring in
 * high-velocity recruitment cycles. Error handling provides informative
 * guidance if search criteria violate permissions or result in empty sets.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for interviews, including
 *   stage, status, scheduled date ranges, and participant properties.
 * @path /atsRecruitment/hrRecruiter/interviews
 * @accessor api.functional.atsRecruitment.hrRecruiter.interviews.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter parameters for interviews, including stage, status,
     * scheduled date ranges, and participant properties.
     */
    body: IAtsRecruitmentInterview.IRequest;
  };
  export type Body = IAtsRecruitmentInterview.IRequest;
  export type Response = IPageIAtsRecruitmentInterview.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/interviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/interviews";
  export const random = (): IPageIAtsRecruitmentInterview.ISummary =>
    typia.random<IPageIAtsRecruitmentInterview.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single interview's detailed information by interviewId
 * (ats_recruitment_interviews).
 *
 * Fetch detailed information for a specific interview instance identified by
 * its UUID. The returned data includes all primary interview attributes (title,
 * stage, status, notes), and aggregates relevant scheduling, participant,
 * question, and calendar sync data for context as joined/embedded resources are
 * allowed.
 *
 * Role-based security ensures only participants (applicant/recruiter/reviewer)
 * and authorized HR or system admins are permitted to view the interview
 * detail. This endpoint supports comprehensive review of the interview's
 * current state, participant confirmations, all scheduled time slots, attached
 * questions (with type/classification), and status change notes. Querying
 * non-existent or unauthorized interviews returns a descriptive error or
 * permission denial message.
 *
 * Advanced error handling ensures compliance with participant and schedule
 * relationships and maintains privacy controls over linked personal data,
 * following the ats_recruitment_interviews schema and its relations.
 *
 * @param props.connection
 * @param props.interviewId The unique UUID of the interview to retrieve.
 * @path /atsRecruitment/hrRecruiter/interviews/:interviewId
 * @accessor api.functional.atsRecruitment.hrRecruiter.interviews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique UUID of the interview to retrieve. */
    interviewId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentInterview;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/interviews/:interviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/interviews/${encodeURIComponent(props.interviewId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterview =>
    typia.random<IAtsRecruitmentInterview>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update interview details for a given interviewId
 * (ats_recruitment_interviews).
 *
 * Allows HR recruiters to update details of a scheduled interview, including
 * the interview's title, stage label, notes, or current status (rescheduled,
 * cancelled, completed, etc). Input payload must specify which fields to
 * update. The operation prescribes business logic for status transitions (e.g.,
 * scheduled → completed), with permission checks to prevent unauthorized
 * changes to ineligible interviews.
 *
 * The request enforces full validation according to schema requirements,
 * maintains audit trails, and ensures data consistency (e.g., rescheduled
 * interviews cannot lose all participant assignments). Only authorized HR and
 * admin roles can update arbitrary interviews, while regular participants may
 * be limited to confirmation status for themselves. Error handling covers
 * invalid UUIDs, attempts on deleted or archived interviews, and rejection of
 * forbidden state transitions.
 *
 * @param props.connection
 * @param props.interviewId The target interview's UUID to be updated.
 * @param props.body Interview update request specifying updated title, notes,
 *   status, participants, or other allowed fields.
 * @path /atsRecruitment/hrRecruiter/interviews/:interviewId
 * @accessor api.functional.atsRecruitment.hrRecruiter.interviews.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The target interview's UUID to be updated. */
    interviewId: string & tags.Format<"uuid">;

    /**
     * Interview update request specifying updated title, notes, status,
     * participants, or other allowed fields.
     */
    body: IAtsRecruitmentInterview.IUpdate;
  };
  export type Body = IAtsRecruitmentInterview.IUpdate;
  export type Response = IAtsRecruitmentInterview;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/hrRecruiter/interviews/:interviewId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/interviews/${encodeURIComponent(props.interviewId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterview =>
    typia.random<IAtsRecruitmentInterview>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove an interview from the ats_recruitment_interviews table.
 *
 * The purpose of this operation is to enable authorized users—specifically
 * system administrators and HR recruiters—to irreversibly remove an entire
 * interview record from the ATS recruitment system. This includes the interview
 * metadata, scheduling records, participants, and associated interview
 * questions. Once deleted, the information is permanently removed from the
 * database and cannot be restored, supporting GDPR and business data lifecycle
 * policies.
 *
 * Security considerations restrict access to this operation to systemAdmin and
 * hrRecruiter roles. Appropriate authorization checks must be enforced, and all
 * deletion actions must be logged in the audit trail with full context,
 * including actor and timestamp, to ensure compliance and enable post-mortem
 * analysis if necessary.
 *
 * The operation directly manipulates the ats_recruitment_interviews table. Any
 * related records in child tables (such as participants, schedules, and
 * questions) must be removed or cascade-deleted to maintain referential
 * integrity. This does not perform any kind of soft deletion; the record is
 * eliminated entirely from persistent storage. Attempts to access the interview
 * after deletion should result in appropriate errors.
 *
 * Related operations include interview creation, updating, and listing
 * endpoints, as well as recovery and audit queries for administrative review.
 * If deletion fails due to constraints or non-existent interviewId, clear error
 * messages should be provided.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier of the interview to be permanently
 *   deleted.
 * @path /atsRecruitment/hrRecruiter/interviews/:interviewId
 * @accessor api.functional.atsRecruitment.hrRecruiter.interviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the interview to be permanently deleted. */
    interviewId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/hrRecruiter/interviews/:interviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/interviews/${encodeURIComponent(props.interviewId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
