import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentResumeUploadHistory } from "../../../../structures/IAtsRecruitmentResumeUploadHistory";
import { IPageIAtsRecruitmentResumeUploadHistory } from "../../../../structures/IPageIAtsRecruitmentResumeUploadHistory";

/**
 * Search and retrieve a paginated list of resume upload histories in the ATS
 * system.
 *
 * Retrieve a paginated, filterable list of resume upload histories from the
 * ats_recruitment_resume_upload_histories table. This endpoint is used by HR
 * recruiters and system administrators to audit all uploads and modifications
 * to applicant resume files. It is also accessible to applicants for reviewing
 * their own upload records.
 *
 * The operation leverages indices on applicant ID, upload_timestamp, and file
 * metadata for fast access and supports advanced search (by date range,
 * applicant email/name, file extension, file size, IP address, etc). This is
 * critical for uncovering compliance anomalies, supporting GDPR requests to
 * trace file usage, and for forensic history during disputes or security
 * audits.
 *
 * Sensitive information such as applicant details must be filtered based on
 * caller's authorization. Only system admins can retrieve all histories, while
 * HR recruiters are restricted to job-related applicants, and applicants may
 * only see their own uploads. The operation provides upload provenance, enables
 * tracking multiple upload/replacement cycles, and ensures robust file history
 * retention. Large result sets are paginated to support compliance-scale
 * reporting.
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for resume upload history
 *   retrieval
 * @path /atsRecruitment/hrRecruiter/resumeUploadHistories
 * @accessor api.functional.atsRecruitment.hrRecruiter.resumeUploadHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination parameters for resume upload history retrieval */
    body: IAtsRecruitmentResumeUploadHistory.IRequest;
  };
  export type Body = IAtsRecruitmentResumeUploadHistory.IRequest;
  export type Response = IPageIAtsRecruitmentResumeUploadHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/resumeUploadHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/resumeUploadHistories";
  export const random = (): IPageIAtsRecruitmentResumeUploadHistory =>
    typia.random<IPageIAtsRecruitmentResumeUploadHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific resume upload history record.
 *
 * Fetches the full details for a given resume upload history
 * (ats_recruitment_resume_upload_histories) by its unique ID. Returns immutable
 * forensic data including who uploaded, file name and size, IP address at
 * upload time, and (when available) a snapshot of the parsed resume JSON at
 * that point. This endpoint is used for compliance review, error tracing, and
 * for applicant/user download history verification.
 *
 * Authorization is enforced so that only the owner (applicant), admin, or HR
 * associated with the respective application can retrieve the record. All trace
 * and snapshot fields are delivered as stored, but sensitive details
 * (resume_json_snapshot) may be restricted for non-owners. System audit records
 * are not directly deletable by end users; they form part of organizational
 * compliance and legal audit capabilities.
 *
 * Related operations include list (index) and applicant self-service download.
 * Error handling distinguishes between not found, permission denied, and
 * corrupted/deleted record cases.
 *
 * @param props.connection
 * @param props.uploadHistoryId Unique identifier for the specific resume upload
 *   history record
 * @path /atsRecruitment/hrRecruiter/resumeUploadHistories/:uploadHistoryId
 * @accessor api.functional.atsRecruitment.hrRecruiter.resumeUploadHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the specific resume upload history record */
    uploadHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentResumeUploadHistory;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/resumeUploadHistories/:uploadHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/resumeUploadHistories/${encodeURIComponent(props.uploadHistoryId ?? "null")}`;
  export const random = (): IAtsRecruitmentResumeUploadHistory =>
    typia.random<IAtsRecruitmentResumeUploadHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("uploadHistoryId")(() =>
        typia.assert(props.uploadHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
