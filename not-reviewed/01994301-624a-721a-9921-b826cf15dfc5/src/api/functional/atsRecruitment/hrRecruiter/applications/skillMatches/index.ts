import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplicationSkillMatch } from "../../../../../structures/IAtsRecruitmentApplicationSkillMatch";
import { IPageIAtsRecruitmentApplicationSkillMatch } from "../../../../../structures/IPageIAtsRecruitmentApplicationSkillMatch";

/**
 * Create a new skill match entry for a job application in
 * ats_recruitment_application_skill_matches.
 *
 * This API operation enables the creation of a new skill match record for a
 * specific application, linking a skill to the application and recording match
 * type, AI score, and manual verification status. The record is used for
 * analytics, automated matching results, or manual correction by HR. The
 * payload must include a valid skill ID, match type, AI score (if provided),
 * and manual verification status. The response returns the newly created skill
 * match with all attributes for confirmation and downstream processing.
 *
 * Access is restricted to HR recruiters and system administrators due to the
 * sensitive nature of hiring evaluation data. All actions are audited and must
 * conform to the workflow rules of the recruitment platform. Insertion is
 * validated to prevent duplicate skill matches for the same application-skill
 * pair.
 *
 * This operation writes to the ats_recruitment_application_skill_matches Prisma
 * model.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application for which
 *   the new skill match is being created.
 * @param props.body Data for the new skill match, including skill id, match
 *   type, AI score, and verification flags.
 * @path /atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches
 * @accessor api.functional.atsRecruitment.hrRecruiter.applications.skillMatches.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the job application for which the new skill
     * match is being created.
     */
    applicationId: string & tags.Format<"uuid">;

    /**
     * Data for the new skill match, including skill id, match type, AI
     * score, and verification flags.
     */
    body: IAtsRecruitmentApplicationSkillMatch.ICreate;
  };
  export type Body = IAtsRecruitmentApplicationSkillMatch.ICreate;
  export type Response = IAtsRecruitmentApplicationSkillMatch;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/applications/${encodeURIComponent(props.applicationId ?? "null")}/skillMatches`;
  export const random = (): IAtsRecruitmentApplicationSkillMatch =>
    typia.random<IAtsRecruitmentApplicationSkillMatch>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of skill match records for a given application from
 * ats_recruitment_application_skill_matches table.
 *
 * This API operation returns a filtered and paginated list of skill match
 * results linked to a specific job application. Each skill match represents the
 * outcome of AI or manual comparison between the applicant's resume and the job
 * requirements, with match type, confidence, and verification status.
 *
 * HR recruiters and system administrators may use this API to review which
 * skills were matched automatically, which need manual verification, and assess
 * candidate fit. Filtering options allow narrowing results by skill, match type
 * (required/preferred/missing etc.), or verification status.
 *
 * Security: Only authenticated HR recruiters and system administrators may use
 * this endpoint to ensure privacy and protect sensitive evaluation information.
 * Proper permission checks are enforced and access is logged for audit trail
 * purposes.
 *
 * This operation integrates the ats_recruitment_application_skill_matches
 * Prisma table and includes all related fields as described in the schema.
 * Business validation ensures the applicationId belongs to the current
 * organization context.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application whose
 *   skill matches are requested.
 * @param props.body Search and filter parameters for paginated skill match
 *   retrieval within the given application.
 * @path /atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches
 * @accessor api.functional.atsRecruitment.hrRecruiter.applications.skillMatches.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the job application whose skill matches are
     * requested.
     */
    applicationId: string & tags.Format<"uuid">;

    /**
     * Search and filter parameters for paginated skill match retrieval
     * within the given application.
     */
    body: IAtsRecruitmentApplicationSkillMatch.IRequest;
  };
  export type Body = IAtsRecruitmentApplicationSkillMatch.IRequest;
  export type Response = IPageIAtsRecruitmentApplicationSkillMatch.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/applications/${encodeURIComponent(props.applicationId ?? "null")}/skillMatches`;
  export const random =
    (): IPageIAtsRecruitmentApplicationSkillMatch.ISummary =>
      typia.random<IPageIAtsRecruitmentApplicationSkillMatch.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information on a specific skill match for an application from
 * ats_recruitment_application_skill_matches.
 *
 * This API operation provides complete details for a single skill match record,
 * as identified by skillMatchId, within the context of a given application. The
 * skill match includes AI/NLP-derived similarity scores, manual verification,
 * associated skill, and match type (required, missing, extra, etc). HR
 * recruiters or system administrators can use this detail API to investigate
 * specific skill mismatches, audit AI outcomes, or record basis for fit
 * assessments.
 *
 * Security: Only authenticated HR recruiters and system administrators are
 * authorized to access detailed skill match information, and all access events
 * are recorded for compliance and audit.
 *
 * This operation reads from the ats_recruitment_application_skill_matches table
 * and strictly returns only the record matching both applicationId and
 * skillMatchId. Validation ensures users may only view data in their
 * organizational scope.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application being
 *   queried.
 * @param props.skillMatchId Unique identifier of the skill match record being
 *   retrieved.
 * @path /atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches/:skillMatchId
 * @accessor api.functional.atsRecruitment.hrRecruiter.applications.skillMatches.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the job application being queried. */
    applicationId: string & tags.Format<"uuid">;

    /** Unique identifier of the skill match record being retrieved. */
    skillMatchId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentApplicationSkillMatch;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches/:skillMatchId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/applications/${encodeURIComponent(props.applicationId ?? "null")}/skillMatches/${encodeURIComponent(props.skillMatchId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicationSkillMatch =>
    typia.random<IAtsRecruitmentApplicationSkillMatch>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.param("skillMatchId")(() => typia.assert(props.skillMatchId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a skill match record for a job application in
 * ats_recruitment_application_skill_matches.
 *
 * This API operation allows authorized HR recruiters or system administrators
 * to update the details of a skill match between an application and a skill.
 * Updatable fields include match type, AI score, human/manual verification
 * flags. This is essential in workflows where HR reviewers must confirm or
 * override AI-detected skills, correct mismatches, or update validation status.
 * The system enforces business rules such as unique application-skill mapping
 * and appropriate audit logging.
 *
 * Request validation ensures only the record identified by applicationId and
 * skillMatchId is affected. All updates are logged for audit and compliance.
 * The API only permits HR recruiters and system administrators with valid
 * credentials to execute this operation.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the job application related
 *   to the skill match update.
 * @param props.skillMatchId Unique identifier of the skill match entry being
 *   updated.
 * @param props.body Fields to update for the skill match, such as match type,
 *   score, and verification status.
 * @path /atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches/:skillMatchId
 * @accessor api.functional.atsRecruitment.hrRecruiter.applications.skillMatches.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the job application related to the skill match
     * update.
     */
    applicationId: string & tags.Format<"uuid">;

    /** Unique identifier of the skill match entry being updated. */
    skillMatchId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the skill match, such as match type, score, and
     * verification status.
     */
    body: IAtsRecruitmentApplicationSkillMatch.IUpdate;
  };
  export type Body = IAtsRecruitmentApplicationSkillMatch.IUpdate;
  export type Response = IAtsRecruitmentApplicationSkillMatch;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches/:skillMatchId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/hrRecruiter/applications/${encodeURIComponent(props.applicationId ?? "null")}/skillMatches/${encodeURIComponent(props.skillMatchId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplicationSkillMatch =>
    typia.random<IAtsRecruitmentApplicationSkillMatch>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.param("skillMatchId")(() => typia.assert(props.skillMatchId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
