import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobPostingState } from "../../../../structures/IAtsRecruitmentJobPostingState";
import { IPageIAtsRecruitmentJobPostingState } from "../../../../structures/IPageIAtsRecruitmentJobPostingState";

/**
 * Search and retrieve a paginated list of job posting states defined in the
 * system (ats_recruitment_job_posting_states).
 *
 * Retrieve a filtered and paginated list of job posting state records to
 * support admin and HR selection, validation, and update of available status
 * workflow codes. This endpoint performs advanced search, filtering, and
 * pagination over all entries in ats_recruitment_job_posting_states, using
 * fields such as state code, human-readable label, is_active, description, and
 * sort order for filtering and ordering.
 *
 * Implemented authorization ensures that only users with systemAdmin or
 * hrRecruiter roles can search administrative job state definitions,
 * maintaining separation of business logic domains and audit accuracy.
 * Sensitive operations or exports require further privilege. Returned data
 * provides insight into both platform-supported (active=true) and deprecated
 * (active=false, deleted_at not null) workflow statuses.
 *
 * Errors caused by invalid filters, insufficient authorization, or unexpected
 * query overloads are handled with clear user-facing messages based on system
 * policy. This endpoint is often used in conjunction with job posting creation
 * and management flows, and its results may inform dropdown selectors or
 * workflow UI transitions.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for searching job posting
 *   states (state code, label, status, active, etc).
 * @path /atsRecruitment/hrRecruiter/jobPostingStates
 * @accessor api.functional.atsRecruitment.hrRecruiter.jobPostingStates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination criteria for searching job posting states
     * (state code, label, status, active, etc).
     */
    body: IAtsRecruitmentJobPostingState.IRequest;
  };
  export type Body = IAtsRecruitmentJobPostingState.IRequest;
  export type Response = IPageIAtsRecruitmentJobPostingState.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/hrRecruiter/jobPostingStates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/hrRecruiter/jobPostingStates";
  export const random = (): IPageIAtsRecruitmentJobPostingState.ISummary =>
    typia.random<IPageIAtsRecruitmentJobPostingState.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific job posting state
 * (ats_recruitment_job_posting_states) by ID.
 *
 * Retrieve the full record details for a single job posting state, identified
 * by jobPostingStateId (UUID). The response includes fields such as state_code,
 * label, description, is_active, sort_order, creation and update timestamps,
 * and soft-deletion marker.
 *
 * Access is restricted to administrative and HR recruiter roles, ensuring only
 * privileged users can perform code/label mapping or workflow adjustment. This
 * endpoint markets itself as a readonly business entity lookup, suitable for
 * supporting validation at runtime or for pre-loading context for update/edit
 * interfaces.
 *
 * If the specified jobPostingStateId does not exist or is soft-deleted, a clear
 * not-found error is returned. Permission violations generate a 403 error.
 * Typical use cases include admin UI modules for workflow management or
 * business rule enforcement based on active/deprecated states.
 *
 * @param props.connection
 * @param props.jobPostingStateId Unique identifier (UUID) of the target job
 *   posting state.
 * @path /atsRecruitment/hrRecruiter/jobPostingStates/:jobPostingStateId
 * @accessor api.functional.atsRecruitment.hrRecruiter.jobPostingStates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target job posting state. */
    jobPostingStateId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentJobPostingState;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/hrRecruiter/jobPostingStates/:jobPostingStateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/hrRecruiter/jobPostingStates/${encodeURIComponent(props.jobPostingStateId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobPostingState =>
    typia.random<IAtsRecruitmentJobPostingState>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobPostingStateId")(() =>
        typia.assert(props.jobPostingStateId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
