import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobPosting } from "../../../structures/IAtsRecruitmentJobPosting";

/**
 * Get detailed job posting info (ats_recruitment_job_postings) by posting ID
 * for viewing or management.
 *
 * Fetch full detail of a single job posting (ats_recruitment_job_postings)
 * identified by jobPostingId, including all principal business fields and
 * relations (such as assigned HR recruiter and employment type/state details).
 * This operation is used across both applicant- and HR-facing business flows
 * for viewing job requirements, descriptions, location, salary range,
 * deadlines, and presentation metadata.
 *
 * Authorization is enforced to restrict access to non-public postings: HR
 * recruiters and system administrators may access all jobs, while applicants
 * and the public are limited to is_visible set jobs. Access control is handled
 * in implementation logic. Attempts to retrieve a deleted (soft-deleted)
 * posting will result in a not-found or forbidden response.
 *
 * Returned data structure conforms to the IAtsRecruitmentJobPosting interface,
 * reflecting every non-sensitive field as present in the schema for full
 * compliance and audit trail purposes.
 *
 * @param props.connection
 * @param props.jobPostingId The unique identifier (UUID) of the target job
 *   posting to retrieve.
 * @path /atsRecruitment/jobPostings/:jobPostingId
 * @accessor api.functional.atsRecruitment.jobPostings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the target job posting to retrieve. */
    jobPostingId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentJobPosting;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/jobPostings/:jobPostingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/jobPostings/${encodeURIComponent(props.jobPostingId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobPosting =>
    typia.random<IAtsRecruitmentJobPosting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobPostingId")(() => typia.assert(props.jobPostingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
