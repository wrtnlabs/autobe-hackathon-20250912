import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentDataDeletionLog } from "../../../../structures/IAtsRecruitmentDataDeletionLog";
import { IPageIAtsRecruitmentDataDeletionLog } from "../../../../structures/IPageIAtsRecruitmentDataDeletionLog";

/**
 * Search and retrieve paginated data deletion logs for compliance audit
 * (ats_recruitment_data_deletion_logs table).
 *
 * System administrators and compliance officers use this API operation to query
 * and review the history of all sensitive data deletion events, such as user
 * account removal, GDPR 'right to be forgotten' processing, admin-initiated
 * purges, and policy-driven automated deletions. Logs indicate the
 * actor/requestor, data class, deletion reason, timestamp, and the specific
 * data ID affected. Full search, filtering, and pagination are supported to
 * meet business, audit, and regulatory needs. Only users with the systemAdmin
 * role or compliance approval can access this data.
 *
 * Returned data is exportable to support audit evidence and reporting duties.
 * Log detail includes any retention/anonymization notes as mandated by internal
 * and external policy. The endpoint is commonly used alongside data deletion
 * details endpoints, compliance dashboards, and export mechanisms. Redaction is
 * enforced if required by policy.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for deletion log
 *   retrieval (by actor, target data, date, reason, etc.)
 * @path /atsRecruitment/systemAdmin/dataDeletionLogs
 * @accessor api.functional.atsRecruitment.systemAdmin.dataDeletionLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for deletion log retrieval
     * (by actor, target data, date, reason, etc.)
     */
    body: IAtsRecruitmentDataDeletionLog.IRequest;
  };
  export type Body = IAtsRecruitmentDataDeletionLog.IRequest;
  export type Response = IPageIAtsRecruitmentDataDeletionLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/dataDeletionLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/dataDeletionLogs";
  export const random = (): IPageIAtsRecruitmentDataDeletionLog.ISummary =>
    typia.random<IPageIAtsRecruitmentDataDeletionLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific data deletion log event
 * (ats_recruitment_data_deletion_logs table).
 *
 * Use this API endpoint to obtain a detailed, immutable snapshot of a specific
 * data deletion event within the ATS. Details include the user/system that
 * initiated the deletion, what data type and record was deleted, when it
 * occurred, for what reason, and any final note about the deletion outcome
 * (e.g., full removal, anonymization, archiving). This is critical for
 * confirming GDPR and internal compliance, incident investigation, and
 * providing external audit evidence.
 *
 * Read access is limited to systemAdmin users or authorized auditors; retrieval
 * by unauthorized roles is denied. Typical workflow: query/filter using the
 * list endpoint, then inspect this detailed event. The record is read-only; no
 * update or deletion is permitted through this endpoint. Combined with list and
 * export APIs, it provides a complete audit trail for all regulated deletion
 * activity.
 *
 * @param props.connection
 * @param props.dataDeletionLogId Unique identifier (UUID) for the target data
 *   deletion log record.
 * @path /atsRecruitment/systemAdmin/dataDeletionLogs/:dataDeletionLogId
 * @accessor api.functional.atsRecruitment.systemAdmin.dataDeletionLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) for the target data deletion log record. */
    dataDeletionLogId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentDataDeletionLog;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/dataDeletionLogs/:dataDeletionLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/dataDeletionLogs/${encodeURIComponent(props.dataDeletionLogId ?? "null")}`;
  export const random = (): IAtsRecruitmentDataDeletionLog =>
    typia.random<IAtsRecruitmentDataDeletionLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("dataDeletionLogId")(() =>
        typia.assert(props.dataDeletionLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
