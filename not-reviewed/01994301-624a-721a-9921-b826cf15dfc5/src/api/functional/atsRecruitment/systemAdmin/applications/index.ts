import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplication } from "../../../../structures/IAtsRecruitmentApplication";
import { IPageIAtsRecruitmentApplication } from "../../../../structures/IPageIAtsRecruitmentApplication";
export * as statusHistories from "./statusHistories/index";
export * as feedbacks from "./feedbacks/index";
export * as skillMatches from "./skillMatches/index";

/**
 * Search and retrieve a filtered, paginated list of job applications
 * (ats_recruitment_applications).
 *
 * This endpoint enables authorized users (HR recruiters/system administrators)
 * to conduct advanced queries to list all job applications currently registered
 * in the ATS platform. The underlying Prisma model
 * (ats_recruitment_applications) links applications to applicants, job
 * postings, and resumes and features fields such as current_status,
 * submitted_at, and last_state_change_at for filtering, sorting, and paging.
 *
 * Business logic supports filtering applications by status (e.g., submitted,
 * screening, code_test), applicant info, posting title, submission period, and
 * related job attributes to facilitate workflow orchestration. Requests may
 * include search terms, filters, page size, and sorting options encapsulated in
 * the request body. Security restrictions ensure applicants only see their own
 * records, while hrRecruiter and systemAdmin roles have broader system
 * management permissions.
 *
 * This operation supports business analytics, SLA tracking, and helps
 * administer the recruitment funnel, allowing bulk actions, reporting, and
 * export integration. Errors are handled for non-existent filter values or
 * excessive query ranges, with compliance considerations for personal data
 * access.
 *
 * @param props.connection
 * @param props.body Search, filter, pagination, and sorting parameters for job
 *   application listing.
 * @path /atsRecruitment/systemAdmin/applications
 * @accessor api.functional.atsRecruitment.systemAdmin.applications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, pagination, and sorting parameters for job
     * application listing.
     */
    body: IAtsRecruitmentApplication.IRequest;
  };
  export type Body = IAtsRecruitmentApplication.IRequest;
  export type Response = IPageIAtsRecruitmentApplication;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/applications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/applications";
  export const random = (): IPageIAtsRecruitmentApplication =>
    typia.random<IPageIAtsRecruitmentApplication>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single application by applicationId from
 * ats_recruitment_applications.
 *
 * This operation returns the complete set of information for a specific job
 * application in the ATS system, including applicant linkage, job posting
 * details, resume reference, current status, and the timeline of submission and
 * state changes. The underlying Prisma schema ats_recruitment_applications
 * provides fields for applicant_id, job_posting_id, resume_id, current_status,
 * submission and last_state_change timestamps, and reference to related
 * tables.
 *
 * Access is granted to HR recruiters and system administrators for managerial
 * review, process evaluation, or formal record-keeping. Applicants may access
 * only their own applications, while HR recruiters and system administrators
 * may view all records. The endpoint integrates with feedback, skill matching,
 * and interview scheduling, supporting comprehensive candidate evaluation and
 * workflow progression.
 *
 * Security and privacy controls ensure proper compliance with applicant data
 * access regulations. Attempts to access non-existent or unauthorized
 * application IDs result in structured error responses. Detailed business and
 * audit context for the application are delivered in the response.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the application to retrieve.
 * @path /atsRecruitment/systemAdmin/applications/:applicationId
 * @accessor api.functional.atsRecruitment.systemAdmin.applications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the application to retrieve. */
    applicationId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentApplication;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/applications/:applicationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/applications/${encodeURIComponent(props.applicationId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplication =>
    typia.random<IAtsRecruitmentApplication>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific application record in ats_recruitment_applications.
 *
 * Update details of a specific application record in the recruitment platform.
 * This allows HR recruiters or system administrators to modify fields such as
 * the associated resume, application status, or other editable
 * business/personal details tied to the application. Sensitive changes, such as
 * applicant mapping or significant status progression, may require additional
 * validation or checks for concurrent updates or compliance reasons.
 *
 * Access to this operation is restricted to hrRecruiter and systemAdmin roles,
 * reflecting the need for controlled changes to applicant progress and
 * sensitive information. The change will be logged in the audit trail for
 * traceability. Relationships to other tables—such as job postings, resumes,
 * and applicants—are enforced in the business logic, and the update must comply
 * with valid foreign key references (e.g., resumeId must refer to a resume
 * owned by the correct applicant).
 *
 * Fields not present in the update body retain their current values. Validation
 * ensures that changes to status or related fields remain consistent with
 * allowed business transitions and overall data integrity. Any attempt to
 * change immutable application properties or to bypass state checks will be
 * prevented at the service layer. Errors may arise if the application does not
 * exist, is deleted, or if a conflict/consistency violation is detected.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the target job application
 * @param props.body Fields and values to update in the application record
 * @path /atsRecruitment/systemAdmin/applications/:applicationId
 * @accessor api.functional.atsRecruitment.systemAdmin.applications.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target job application */
    applicationId: string & tags.Format<"uuid">;

    /** Fields and values to update in the application record */
    body: IAtsRecruitmentApplication.IUpdate;
  };
  export type Body = IAtsRecruitmentApplication.IUpdate;
  export type Response = IAtsRecruitmentApplication;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/applications/:applicationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/applications/${encodeURIComponent(props.applicationId ?? "null")}`;
  export const random = (): IAtsRecruitmentApplication =>
    typia.random<IAtsRecruitmentApplication>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase (delete) a specific application record by applicationId (admin only).
 *
 * Permanently erase (delete) an application from the system matching the given
 * applicationId. Only system administrators are permitted to perform this
 * operation due to the sensitivity and compliance implications of deleting
 * applicant-job association records.
 *
 * This operation will either perform hard deletion or set the deleted_at
 * timestamp for soft-delete, depending on business retention policy (as per
 * GDPR requirements). Attempts to remove records still in use by other active
 * entities or referenced by logs, or when not permitted by compliance rules,
 * will result in an error.
 *
 * All erasure attempts (success and failure) are recorded in audit/data
 * deletion logs for traceability. Errors may arise for non-existent records,
 * already deleted applications, or compliance violations. Deleted records
 * cannot be recovered unless an explicit recovery/revert workflow exists at the
 * admin level.
 *
 * @param props.connection
 * @param props.applicationId Unique identifier of the target job application
 * @path /atsRecruitment/systemAdmin/applications/:applicationId
 * @accessor api.functional.atsRecruitment.systemAdmin.applications.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target job application */
    applicationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/applications/:applicationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/applications/${encodeURIComponent(props.applicationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicationId")(() => typia.assert(props.applicationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
