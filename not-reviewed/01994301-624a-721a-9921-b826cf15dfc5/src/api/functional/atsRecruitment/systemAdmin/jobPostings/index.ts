import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobPosting } from "../../../../structures/IAtsRecruitmentJobPosting";
import { IPageIAtsRecruitmentJobPosting } from "../../../../structures/IPageIAtsRecruitmentJobPosting";

/**
 * Creates a new job posting in the ATS (ats_recruitment_job_postings); allowed
 * for HR recruiters and system admins.
 *
 * This operation enables HR recruiters or system administrators to register a
 * new job posting into the ATS platform. Input data is received via the request
 * body adhering to the IAtsRecruitmentJobPosting.ICreate DTO, which covers all
 * necessary attributes as required by the schema, including title, description,
 * employment type, job status, recruiter assignment, visibility, and any
 * optional location or salary information.
 *
 * Strict validation is performed to guarantee unique job titles per recruiter
 * (HR uniqueness), valid employment type/state codes, and future application
 * deadlines (where given). The system enforces access control—only
 * authenticated HR or admin users are permitted to create postings. On
 * successful creation, the full job posting entity (IAtsRecruitmentJobPosting)
 * is returned to the client.
 *
 * Post-creation actions such as notification dispatching, audit logging, and
 * index rebuilding are handled by downstream business logic as mandated by
 * compliance and audit requirements.
 *
 * @param props.connection
 * @param props.body Job posting creation information (title, description,
 *   employment type, recruiter ID, deadlines, etc).
 * @path /atsRecruitment/systemAdmin/jobPostings
 * @accessor api.functional.atsRecruitment.systemAdmin.jobPostings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Job posting creation information (title, description, employment
     * type, recruiter ID, deadlines, etc).
     */
    body: IAtsRecruitmentJobPosting.ICreate;
  };
  export type Body = IAtsRecruitmentJobPosting.ICreate;
  export type Response = IAtsRecruitmentJobPosting;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/jobPostings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobPostings";
  export const random = (): IAtsRecruitmentJobPosting =>
    typia.random<IAtsRecruitmentJobPosting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Performs advanced search and paginated retrieval of job postings
 * (ats_recruitment_job_postings) with filters.
 *
 * This operation allows authorized users to perform a comprehensive search and
 * paginated listing of job postings (ats_recruitment_job_postings), with
 * advanced filtering capabilities provided in the request body. Search fields
 * include job title (partial match), HR recruiter assignment, employment type,
 * posting status, visibility, location, salary range, and deadline windows—all
 * corresponding directly to the schema fields defined in the Prisma model.
 *
 * The business logic ensures only active (is_visible or non-deleted) postings
 * are included unless explicitly searching for hidden/archived ones. Query
 * performance is optimized via indexes on title, state, type, and created_at
 * date, supporting large-scale HR system usage. Proper authorization ensures
 * only authorized recruiters, HR staff, or system administrators can access
 * sensitive job data not available to general applicants.
 *
 * Rate limiting, result size limits, and query slow-logs are enforced through
 * policy and audit mechanisms to prevent abuse or system degradation.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination criteria for job postings
 *   listing.
 * @path /atsRecruitment/systemAdmin/jobPostings
 * @accessor api.functional.atsRecruitment.systemAdmin.jobPostings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, search, and pagination criteria for job postings listing. */
    body: IAtsRecruitmentJobPosting.IRequest;
  };
  export type Body = IAtsRecruitmentJobPosting.IRequest;
  export type Response = IPageIAtsRecruitmentJobPosting.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/jobPostings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobPostings";
  export const random = (): IPageIAtsRecruitmentJobPosting.ISummary =>
    typia.random<IPageIAtsRecruitmentJobPosting.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
