import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentAuthenticationFailure } from "../../../../structures/IAtsRecruitmentAuthenticationFailure";
import { IPageIAtsRecruitmentAuthenticationFailure } from "../../../../structures/IPageIAtsRecruitmentAuthenticationFailure";

/**
 * Retrieve paginated, filterable list of authentication failure logs from
 * ats_recruitment_authentication_failures.
 *
 * Query the ats_recruitment_authentication_failures table for a paginated list
 * of failed authentication attempts, including failure reason, attempted user
 * identifier, IP address, user agent, timestamp, and lockout status. This is
 * critical for security teams to identify account abuse, brute-force patterns,
 * and to comply with audit obligations.
 *
 * Only system administrators (systemAdmin) may access this endpoint to prevent
 * exposure of security-sensitive authentication failure data. Supported search
 * filters include attempted username/email, time range, failure reason, and
 * lockout events. The API validates input queries, restricts outputs to
 * authorized users, and provides clear error messaging in case of invalid
 * access or results.
 *
 * This endpoint is related to authentication success logs, access logs, and
 * masking/data deletion logs for a complete security audit picture.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for authentication
 *   failure logs, such as user, IP, failure reason, or time window.
 * @path /atsRecruitment/systemAdmin/authenticationFailures
 * @accessor api.functional.atsRecruitment.systemAdmin.authenticationFailures.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering and pagination criteria for authentication failure logs,
     * such as user, IP, failure reason, or time window.
     */
    body: IAtsRecruitmentAuthenticationFailure.IRequest;
  };
  export type Body = IAtsRecruitmentAuthenticationFailure.IRequest;
  export type Response = IPageIAtsRecruitmentAuthenticationFailure.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/authenticationFailures",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/atsRecruitment/systemAdmin/authenticationFailures";
  export const random =
    (): IPageIAtsRecruitmentAuthenticationFailure.ISummary =>
      typia.random<IPageIAtsRecruitmentAuthenticationFailure.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed view of a specific authentication failure log by ID.
 *
 * Given a unique authenticationFailureId, this API returns the complete detail
 * of a specific authentication failure event from the
 * ats_recruitment_authentication_failures table, including timestamp, attempted
 * user identity, failure reason, originating IP and user agent, and lockout
 * trigger status. This information is vital for security incident
 * investigation, brute-force analysis, and regulatory compliance.
 *
 * Access is strictly limited to system administrators (systemAdmin) due to the
 * sensitive nature of authentication failure contexts. The API ensures that the
 * provided identifier is valid, that the record exists, and that response
 * details are only delivered to authorized actors. This endpoint supports deep
 * forensic audit scenarios as well as proactive security review. If the
 * identifier does not correspond to an existing failure record, an appropriate
 * error is returned with no sensitive information leakage.
 *
 * This operation is related to the authentication failure list (PATCH
 * /authenticationFailures) and other security/audit endpoints within the
 * system.
 *
 * @param props.connection
 * @param props.authenticationFailureId Unique identifier for the authentication
 *   failure log to retrieve.
 * @path /atsRecruitment/systemAdmin/authenticationFailures/:authenticationFailureId
 * @accessor api.functional.atsRecruitment.systemAdmin.authenticationFailures.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the authentication failure log to retrieve. */
    authenticationFailureId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentAuthenticationFailure;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/authenticationFailures/:authenticationFailureId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/authenticationFailures/${encodeURIComponent(props.authenticationFailureId ?? "null")}`;
  export const random = (): IAtsRecruitmentAuthenticationFailure =>
    typia.random<IAtsRecruitmentAuthenticationFailure>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("authenticationFailureId")(() =>
        typia.assert(props.authenticationFailureId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
