import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobEmploymentType } from "../../../../structures/IAtsRecruitmentJobEmploymentType";
import { IPageIAtsRecruitmentJobEmploymentType } from "../../../../structures/IPageIAtsRecruitmentJobEmploymentType";

/**
 * Create a new atsRecruitment job employment type.
 *
 * This operation permits creation of a new employment type in the
 * atsRecruitment platform, stored in the ats_recruitment_job_employment_types
 * table. Typical use cases are HR system initialization, expansion to new
 * contract types, or administrative updates of hiring schemas.
 *
 * The request body specifies the mandatory name, description, and active
 * status, ensuring each entry is unique and appropriately documented as per
 * table constraints. The operation enforces business logic such as
 * de-duplication by name (enforced by unique constraint) and provides
 * validation errors when required properties are missing or duplicate.
 *
 * Only system administrators and HR recruiters with appropriate permissions may
 * invoke this endpoint. The response contains all information about the newly
 * created job employment type for display or further reference.
 *
 * @param props.connection
 * @param props.body Information about the employment type to register,
 *   including name, description, and active state.
 * @path /atsRecruitment/systemAdmin/jobEmploymentTypes
 * @accessor api.functional.atsRecruitment.systemAdmin.jobEmploymentTypes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information about the employment type to register, including name,
     * description, and active state.
     */
    body: IAtsRecruitmentJobEmploymentType.ICreate;
  };
  export type Body = IAtsRecruitmentJobEmploymentType.ICreate;
  export type Response = IAtsRecruitmentJobEmploymentType;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/jobEmploymentTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobEmploymentTypes";
  export const random = (): IAtsRecruitmentJobEmploymentType =>
    typia.random<IAtsRecruitmentJobEmploymentType>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve job employment types
 * (ats_recruitment_job_employment_types), supporting filter and pagination.
 *
 * Use this endpoint to search and retrieve job employment types that applicants
 * or HR can select when registering job postings. Searching can be filtered by
 * active status, name, or other relevant fields as defined in the schema.
 *
 * Security: Accessible to authenticated HR recruiters or system administrators.
 * Permission is enforced to block unauthorized retrieval for sensitive
 * configuration entities.
 *
 * Paginated results support efficient management and display in admin UIs. The
 * request body specifies IAtsRecruitmentJobEmploymentType.IRequest for
 * filtering and pagination. The response body returns paginated results with
 * metadata, following the IPageIAtsRecruitmentJobEmploymentType.ISummary
 * pattern.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for job employment types.
 * @path /atsRecruitment/systemAdmin/jobEmploymentTypes
 * @accessor api.functional.atsRecruitment.systemAdmin.jobEmploymentTypes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for job employment types. */
    body: IAtsRecruitmentJobEmploymentType.IRequest;
  };
  export type Body = IAtsRecruitmentJobEmploymentType.IRequest;
  export type Response = IPageIAtsRecruitmentJobEmploymentType.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/jobEmploymentTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobEmploymentTypes";
  export const random = (): IPageIAtsRecruitmentJobEmploymentType.ISummary =>
    typia.random<IPageIAtsRecruitmentJobEmploymentType.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a specific atsRecruitment job employment type by ID for detailed
 * viewing.
 *
 * This operation provides detailed information about one job employment type as
 * stored in the ats_recruitment_job_employment_types table. It serves HR
 * recruiters and system admins who need to view current employment types (such
 * as full-time, part-time, contract, internship) associated with job postings.
 *
 * Upon invocation, the endpoint returns the label, status (is_active),
 * description, and metadata of the targeted record, facilitating downstream
 * validation for job posting and reporting flows.
 *
 * Security measures are enforced so only authenticated HR recruiters and system
 * admins can retrieve this data. The operation enforces precise parameter
 * typing and returns a useful object for display and validation in both
 * administrative and business workflows.
 *
 * If the specified jobEmploymentTypeId does not exist, a not found error is
 * returned.
 *
 * @param props.connection
 * @param props.jobEmploymentTypeId Unique identifier of the target job
 *   employment type.
 * @path /atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobEmploymentTypes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target job employment type. */
    jobEmploymentTypeId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentJobEmploymentType;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/jobEmploymentTypes/${encodeURIComponent(props.jobEmploymentTypeId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobEmploymentType =>
    typia.random<IAtsRecruitmentJobEmploymentType>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobEmploymentTypeId")(() =>
        typia.assert(props.jobEmploymentTypeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update attributes of an existing atsRecruitment job employment type.
 *
 * This operation enables authorized users (HR recruiters and system
 * administrators) to update the metadata and status of a job employment type
 * record in the ats_recruitment_job_employment_types table. Business scenarios
 * include renaming employment schemes, describing contract-specific policies,
 * or disabling deprecated options.
 *
 * The input requires specifying the unique jobEmploymentTypeId in the path and
 * an update payload containing the changed fields, conforming to the schema's
 * constraints (such as unique name and not null for required attributes). If
 * the update action would violate constraints or the record is not found,
 * appropriate errors are returned.
 *
 * Access control restricts this feature to privileged roles. Auditability and
 * consistency are ensured through the underlying database rules and proper
 * timestamp management by the platform.
 *
 * @param props.connection
 * @param props.jobEmploymentTypeId ID of the job employment type to update.
 * @param props.body Updated employment type info, such as name, description, or
 *   active status.
 * @path /atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobEmploymentTypes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the job employment type to update. */
    jobEmploymentTypeId: string & tags.Format<"uuid">;

    /**
     * Updated employment type info, such as name, description, or active
     * status.
     */
    body: IAtsRecruitmentJobEmploymentType.IUpdate;
  };
  export type Body = IAtsRecruitmentJobEmploymentType.IUpdate;
  export type Response = IAtsRecruitmentJobEmploymentType;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/jobEmploymentTypes/${encodeURIComponent(props.jobEmploymentTypeId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobEmploymentType =>
    typia.random<IAtsRecruitmentJobEmploymentType>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobEmploymentTypeId")(() =>
        typia.assert(props.jobEmploymentTypeId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a job employment type from the atsRecruitment master list.
 *
 * This operation performs a soft delete of the specified job employment type
 * entry, updating the deleted_at field in the
 * ats_recruitment_job_employment_types table to mark it as logically deleted.
 * Soft-deleted entries no longer appear in new job posting workflows or
 * selection lists but are retained for historical and recovery needs.
 *
 * Only HR recruiters and system admins have permission to erase an employment
 * type. If the employment type is currently referenced by job postings,
 * business logic may restrict deletion or require additional validation. Proper
 * audit records and referential integrity are enforced as part of the
 * underlying platform implementation.
 *
 * Attempting to delete a non-existent or already deleted entry will return a
 * not found or conflict error, as appropriate. Hard deletion is not supported
 * except by database administrators per policy.
 *
 * @param props.connection
 * @param props.jobEmploymentTypeId ID of the job employment type to soft
 *   delete.
 * @path /atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobEmploymentTypes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the job employment type to soft delete. */
    jobEmploymentTypeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/jobEmploymentTypes/:jobEmploymentTypeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/jobEmploymentTypes/${encodeURIComponent(props.jobEmploymentTypeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobEmploymentTypeId")(() =>
        typia.assert(props.jobEmploymentTypeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
