import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentExportJobDetail } from "../../../../../structures/IAtsRecruitmentExportJobDetail";
import { IPageIAtsRecruitmentExportJobDetail } from "../../../../../structures/IPageIAtsRecruitmentExportJobDetail";

/**
 * Search and retrieve a paginated list of export job detail records for a
 * specific export job (ats_recruitment_export_job_details).
 *
 * Fetch a paginated, filterable list of export job details for a specific
 * export job. Each detail represents an individual item that was included in a
 * previously requested data export (such as an applicant, application, or
 * related entity). This function provides HR administrators with the ability to
 * audit exported datasets, verify delivery completeness, and review which data
 * records were delivered.
 *
 * Security: Only HR recruiters or system administrators associated with the
 * export may access these details. Access is controlled by both the export
 * job's initiator and organizational policiesâ€”system admins may audit all jobs.
 * Details include key metadata such as the exported entity type, the data row's
 * identifying information, and the inclusion timestamp.
 *
 * This operation leverages the ats_recruitment_export_job_details table and its
 * relations, including references to export_job_id, data_row_id, and summary
 * fields.
 *
 * Filtering and pagination supports large-scale exports with thousands of
 * included items. Error and edge cases include export jobs with no delivered
 * records or in a failed state; in these cases, the response will return an
 * empty dataset with relevant status information. Related APIs include export
 * job status summaries and specific export job retrieval endpoints.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier for the parent export job to fetch
 *   details for.
 * @param props.body Search and filter criteria for export job detail records,
 *   including pagination and sorting options.
 * @path /atsRecruitment/systemAdmin/exportJobs/:exportJobId/details
 * @accessor api.functional.atsRecruitment.systemAdmin.exportJobs.details.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the parent export job to fetch details for. */
    exportJobId: string & tags.Format<"uuid">;

    /**
     * Search and filter criteria for export job detail records, including
     * pagination and sorting options.
     */
    body: IAtsRecruitmentExportJobDetail.IRequest;
  };
  export type Body = IAtsRecruitmentExportJobDetail.IRequest;
  export type Response = IPageIAtsRecruitmentExportJobDetail.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/exportJobs/:exportJobId/details",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}/details`;
  export const random = (): IPageIAtsRecruitmentExportJobDetail.ISummary =>
    typia.random<IPageIAtsRecruitmentExportJobDetail.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific export job detail record by exportJobId and detailId
 * (ats_recruitment_export_job_details).
 *
 * Get a specific export job detail record by providing both the export job's
 * unique ID and the detail row's unique ID. The returned record provides
 * audit-level detail, including entity identity (e.g., applicant, application,
 * resume), summarized record fields, and the timestamp when this data item was
 * exported.
 *
 * This endpoint is used by HR recruiters and system administrators to trace
 * which data rows were included in a particular export, validate data delivery
 * integrity, and support compliance reporting.
 *
 * Access control ensures only the relevant export job initiator, administrative
 * staff, or authorized compliance officers may perform this operation.
 * Underlying access control checks both the export job's permissions and the
 * export job detail's parent-child relationship.
 *
 * If the specified detail does not exist for the given export job, the system
 * returns a not found or forbidden error.
 *
 * Related APIs include export job detail listing and export summary endpoints.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier for the export job this detail
 *   belongs to.
 * @param props.detailId Unique identifier for the export job detail row to
 *   retrieve.
 * @path /atsRecruitment/systemAdmin/exportJobs/:exportJobId/details/:detailId
 * @accessor api.functional.atsRecruitment.systemAdmin.exportJobs.details.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the export job this detail belongs to. */
    exportJobId: string & tags.Format<"uuid">;

    /** Unique identifier for the export job detail row to retrieve. */
    detailId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentExportJobDetail;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/exportJobs/:exportJobId/details/:detailId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}/details/${encodeURIComponent(props.detailId ?? "null")}`;
  export const random = (): IAtsRecruitmentExportJobDetail =>
    typia.random<IAtsRecruitmentExportJobDetail>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
      assert.param("detailId")(() => typia.assert(props.detailId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
