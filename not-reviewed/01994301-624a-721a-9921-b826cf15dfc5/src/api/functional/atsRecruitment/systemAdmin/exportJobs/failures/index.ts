import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentExportFailure } from "../../../../../structures/IAtsRecruitmentExportFailure";
import { IPageIAtsRecruitmentExportFailure } from "../../../../../structures/IPageIAtsRecruitmentExportFailure";

/**
 * Search and retrieve paginated export job failure records tied to a specific
 * export job (ats_recruitment_export_failures).
 *
 * Fetch a paginated, filterable list of export job failure records for a
 * specific export job. Each failure record documents a process error or
 * exception that occurred during export generation, delivery, or data assembly.
 * This allows HR recruiters and system administrators to monitor for incidents,
 * perform root-cause analysis, and maintain regulatory audit trails on all
 * failed or exceptional export behaviors.
 *
 * Operation references the ats_recruitment_export_failures table, including
 * fields for stage, failure reason, timestamp, export job reference, and
 * internal messages. Filtering and searching is available by failure stage,
 * timestamp, message, or other process metadata. Security is enforced so only
 * actors associated with the export job or system admins can access this
 * failure history.
 *
 * Empty result sets are expected in the event of fully successful export jobs.
 * Error scenarios include parent export job not found or no matching failures
 * for the filters applied.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier for the parent export job to fetch
 *   failure records for.
 * @param props.body Search and filter criteria for export job failure records,
 *   including pagination, stage filtering, or keyword search.
 * @path /atsRecruitment/systemAdmin/exportJobs/:exportJobId/failures
 * @accessor api.functional.atsRecruitment.systemAdmin.exportJobs.failures.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the parent export job to fetch failure records
     * for.
     */
    exportJobId: string & tags.Format<"uuid">;

    /**
     * Search and filter criteria for export job failure records, including
     * pagination, stage filtering, or keyword search.
     */
    body: IAtsRecruitmentExportFailure.IRequest;
  };
  export type Body = IAtsRecruitmentExportFailure.IRequest;
  export type Response = IPageIAtsRecruitmentExportFailure;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/exportJobs/:exportJobId/failures",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}/failures`;
  export const random = (): IPageIAtsRecruitmentExportFailure =>
    typia.random<IPageIAtsRecruitmentExportFailure>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific export job failure record by exportJobId and failureId
 * (ats_recruitment_export_failures).
 *
 * Get a specific export job failure record for a given export job by providing
 * both the unique export job ID and the failure record's ID. The operation
 * returns detailed fields covering failure stage, processing context,
 * root-cause message, and timestamp, allowing for deep incident analysis and
 * compliance reporting.
 *
 * This function is available to HR recruiters or system administrators who own
 * or manage the export job. Access control verifies both job ownership and
 * administrative privilege. If the export job or failure record does not exist
 * or access is not permitted, a not found or forbidden error will result. Used
 * together with list/search operations for analytics or troubleshooting export
 * pipeline issues.
 *
 * @param props.connection
 * @param props.exportJobId Unique identifier for the associated export job.
 * @param props.failureId Unique identifier of the failure record to retrieve.
 * @path /atsRecruitment/systemAdmin/exportJobs/:exportJobId/failures/:failureId
 * @accessor api.functional.atsRecruitment.systemAdmin.exportJobs.failures.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the associated export job. */
    exportJobId: string & tags.Format<"uuid">;

    /** Unique identifier of the failure record to retrieve. */
    failureId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentExportFailure;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/exportJobs/:exportJobId/failures/:failureId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/exportJobs/${encodeURIComponent(props.exportJobId ?? "null")}/failures/${encodeURIComponent(props.failureId ?? "null")}`;
  export const random = (): IAtsRecruitmentExportFailure =>
    typia.random<IAtsRecruitmentExportFailure>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportJobId")(() => typia.assert(props.exportJobId));
      assert.param("failureId")(() => typia.assert(props.failureId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
