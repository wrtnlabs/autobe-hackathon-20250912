import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentSystemAdmin } from "../../../../structures/IAtsRecruitmentSystemAdmin";
import { IPageIAtsRecruitmentSystemAdmin } from "../../../../structures/IPageIAtsRecruitmentSystemAdmin";

/**
 * List system administrator accounts with filtering and pagination.
 *
 * Retrieve a paginated and filterable list of system administrator accounts
 * registered on the ATS platform. This endpoint is designed for privileged
 * management screens that require overviews and searching of admin accounts by
 * various criteria (e.g., name, email, is_active status).
 *
 * The response returns summary data for each systemAdmin, making it suitable
 * for use in audit, role assignment, or personnel onboarding/offboarding
 * processes. Only accounts with sufficient permission may execute this query,
 * typically for security, account management, or compliance purposes.
 *
 * Business logic must ensure that sensitive account material (such as password
 * hashes) are excluded from the response. Implementers should support
 * pagination, keyword filtering, is_active filtering, and other
 * fraud/compliance reporting tools as required by operations, referencing the
 * ats_recruitment_systemadmins schema.
 *
 * @param props.connection
 * @param props.body Search/filter criteria and paging configuration for
 *   systemAdmin admin account list retrieval
 * @path /atsRecruitment/systemAdmin/systemAdmins
 * @accessor api.functional.atsRecruitment.systemAdmin.systemAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter criteria and paging configuration for systemAdmin admin
     * account list retrieval
     */
    body: IAtsRecruitmentSystemAdmin.IRequest;
  };
  export type Body = IAtsRecruitmentSystemAdmin.IRequest;
  export type Response = IPageIAtsRecruitmentSystemAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/systemAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/systemAdmins";
  export const random = (): IPageIAtsRecruitmentSystemAdmin.ISummary =>
    typia.random<IPageIAtsRecruitmentSystemAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve system administrator account details by ID.
 *
 * Fetch detailed profile information for a single system administrator entity
 * on the ATS platform by their unique UUID. This API provides all core model
 * properties (excluding password hash for security), including creation/update
 * times, is_active and super_admin flags, and identifying fields used for
 * privilege and access escalation flows.
 *
 * This operation is typically used in admin detail screens, compliance
 * inspection, or when managing changes to administrator accounts. System access
 * controls ensure that only authorized admins may call this endpoint and that
 * sensitive data is handled appropriately, in compliance with privileged access
 * and system operations policies.
 *
 * Error handling should confirm existence of the target systemAdmin account,
 * provide meaningful error responses if not found, and ensure all requests are
 * logged in audit trails for compliance and traceability.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier of the system administrator
 *   account to retrieve
 * @path /atsRecruitment/systemAdmin/systemAdmins/:systemAdminId
 * @accessor api.functional.atsRecruitment.systemAdmin.systemAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the system administrator account to retrieve */
    systemAdminId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentSystemAdmin;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/systemAdmins/:systemAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/systemAdmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): IAtsRecruitmentSystemAdmin =>
    typia.random<IAtsRecruitmentSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a system administrator account by ID.
 *
 * Update the details of a target system administrator (systemAdmin) account by
 * its unique UUID. Supported updates typically include the name, is_active
 * status/flag, and super_admin designation for the account, excluding the
 * password hash (which is managed via a separate password reset interface for
 * security reasons).
 *
 * This endpoint is used by privileged personnel to manage administrator
 * lifecycle events, such as role transitions, temporary
 * deactivation/reactivation, or assignment of higher or lower privilege.
 * Business logic must check that operations do not violate redundancy rules
 * (e.g., not demoting or disabling the only remaining admin), and must log all
 * changes in the system's audit trail for compliance and forensic history.
 *
 * Implementers must validate all input attributes, enforce security
 * requirements (such as ensuring the current requestor holds sufficient
 * privilege to make these changes), and return informative error messages on
 * policy-violating or failed attempts.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier of the system administrator to
 *   update
 * @param props.body Update payload for modifying a system administrator profile
 *   (excluding password hash)
 * @path /atsRecruitment/systemAdmin/systemAdmins/:systemAdminId
 * @accessor api.functional.atsRecruitment.systemAdmin.systemAdmins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system administrator to update */
    systemAdminId: string & tags.Format<"uuid">;

    /**
     * Update payload for modifying a system administrator profile
     * (excluding password hash)
     */
    body: IAtsRecruitmentSystemAdmin.IUpdate;
  };
  export type Body = IAtsRecruitmentSystemAdmin.IUpdate;
  export type Response = IAtsRecruitmentSystemAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/systemAdmins/:systemAdminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/systemAdmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): IAtsRecruitmentSystemAdmin =>
    typia.random<IAtsRecruitmentSystemAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-deletes an ATS system administrator (ats_recruitment_systemadmins) by
 * ID, enforcing minimum admin rule.
 *
 * This operation facilitates the removal (deactivation via soft delete) of an
 * ATS system administrator from the 'ats_recruitment_systemadmins' database
 * entity based on their unique identifier. System administrator deletion is
 * strictly permission controlled and subject to compliance auditing – the
 * system ensures that at least two admin accounts remain, and attempts to
 * delete the last admin will result in an error as per business rule.
 *
 * Security considerations enforce that only active super_admins can remove
 * system admin accounts, and all changes are logged in audit trails. The
 * response to this operation is void (no body), reflecting the absence of
 * content; however, operation success/failure is communicated via HTTP status
 * codes (e.g., 204 for success, 403/409 for rule violation).
 *
 * This operation only soft-deletes the admin account by updating the deleted_at
 * field, ensuring compliance with audit and regulatory requirements. It does
 * not perform a hard delete or erase historical activity records from the audit
 * log. Attempting to delete an already deleted or only remaining admin account
 * will result in a controlled error state.
 *
 * @param props.connection
 * @param props.systemAdminId Unique identifier (UUID) of the system
 *   administrator to be deleted.
 * @path /atsRecruitment/systemAdmin/systemAdmins/:systemAdminId
 * @accessor api.functional.atsRecruitment.systemAdmin.systemAdmins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the system administrator to be deleted. */
    systemAdminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/systemAdmins/:systemAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/systemAdmins/${encodeURIComponent(props.systemAdminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("systemAdminId")(() => typia.assert(props.systemAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
