import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentTechReviewer } from "../../../../structures/IAtsRecruitmentTechReviewer";
import { IPageIAtsRecruitmentTechReviewer } from "../../../../structures/IPageIAtsRecruitmentTechReviewer";

/**
 * List and search technical reviewers with advanced filtering and pagination.
 *
 * Retrieve a filtered list of technical reviewers for system overview,
 * assignment, and audit purposes. The operation queries the
 * ats_recruitment_techreviewers table and supports search parameters such as
 * reviewer name (partial match search), email, specialization, active status,
 * and date of registration. Pagination parameters allow the client to navigate
 * large reviewer datasets efficiently.
 *
 * Security restrictions limit this endpoint to system administrators and HR
 * recruiters, as tech reviewer accounts may contain sensitive information.
 * Filtering, sorting, and pagination enhance the administrative user experience
 * and audit control.
 *
 * Related API operations include creating, updating, retrieving, or
 * deactivating technical reviewer accounts. Error handling includes invalid
 * filter parameters and excessive pagination requests.
 *
 * @param props.connection
 * @param props.body Search filters, sorting, and pagination information for
 *   technical reviewer listing
 * @path /atsRecruitment/systemAdmin/techReviewers
 * @accessor api.functional.atsRecruitment.systemAdmin.techReviewers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, sorting, and pagination information for technical
     * reviewer listing
     */
    body: IAtsRecruitmentTechReviewer.IRequest;
  };
  export type Body = IAtsRecruitmentTechReviewer.IRequest;
  export type Response = IPageIAtsRecruitmentTechReviewer.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/techReviewers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/techReviewers";
  export const random = (): IPageIAtsRecruitmentTechReviewer.ISummary =>
    typia.random<IPageIAtsRecruitmentTechReviewer.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details of a single tech reviewer account by reviewer ID.
 *
 * Obtain detailed information about a specific technical reviewer, using their
 * unique account identifier as the path parameter. This endpoint sources from
 * the ats_recruitment_techreviewers table and returns core properties such as
 * full name, email address, primary technology specialization, activation
 * state, registration information, and access control metadata.
 *
 * This API is restricted to system administrators and HR recruiter-level users
 * for security, as tech reviewer profiles may include personal information. It
 * supports assignment of reviewers to coding tests and interviews, management
 * of reviewer pool, and auditing access history.
 *
 * Associated endpoints include list/search, create, update, and deactivate tech
 * reviewer operations. Error handling includes non-existent reviewer ID,
 * deleted or inactive accounts, and insufficient privileges.
 *
 * This read-only API does not expose authentication or password fields and is
 * not available to applicants or reviewers themselves.
 *
 * @param props.connection
 * @param props.techReviewerId Unique identifier for the technical reviewer
 *   account
 * @path /atsRecruitment/systemAdmin/techReviewers/:techReviewerId
 * @accessor api.functional.atsRecruitment.systemAdmin.techReviewers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the technical reviewer account */
    techReviewerId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentTechReviewer;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/techReviewers/:techReviewerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/techReviewers/${encodeURIComponent(props.techReviewerId ?? "null")}`;
  export const random = (): IAtsRecruitmentTechReviewer =>
    typia.random<IAtsRecruitmentTechReviewer>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("techReviewerId")(() => typia.assert(props.techReviewerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a technical reviewer account details by reviewer ID.
 *
 * Modify the persistent properties of a technical reviewer account by providing
 * updated information such as name, email, technical specialization, and
 * activation state. The endpoint accepts a payload matching the
 * IAtsRecruitmentTechReviewer.IUpdate schema, and applies partial or full
 * updates to the ats_recruitment_techreviewers table as appropriate.
 *
 * Proper authorization is required, limited to systemAdmin and hrRecruiter
 * roles. Updates are tracked and recorded for audit and compliance purposes.
 * This enables platform staff to activate, deactivate, correct, or reassign
 * reviewer accounts as organizational needs change.
 *
 * Error handling covers invalid update data, conflicting emails, attempts to
 * update deleted or non-existent accounts, and insufficient privileges. This
 * endpoint should not be used for reviewer self-updates (separate mechanism).
 *
 * See also: create, view, search, and delete reviewer endpoints. All changes
 * are reflected immediately across related administrative functions.
 *
 * @param props.connection
 * @param props.techReviewerId UUID of the technical reviewer to update
 * @param props.body Fields to update for the technical reviewer account
 * @path /atsRecruitment/systemAdmin/techReviewers/:techReviewerId
 * @accessor api.functional.atsRecruitment.systemAdmin.techReviewers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the technical reviewer to update */
    techReviewerId: string & tags.Format<"uuid">;

    /** Fields to update for the technical reviewer account */
    body: IAtsRecruitmentTechReviewer.IUpdate;
  };
  export type Body = IAtsRecruitmentTechReviewer.IUpdate;
  export type Response = IAtsRecruitmentTechReviewer;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/techReviewers/:techReviewerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/techReviewers/${encodeURIComponent(props.techReviewerId ?? "null")}`;
  export const random = (): IAtsRecruitmentTechReviewer =>
    typia.random<IAtsRecruitmentTechReviewer>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("techReviewerId")(() => typia.assert(props.techReviewerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a technical reviewer (techReviewer) account from the ATS system by ID.
 *
 * This API operation is used to delete a technical reviewer (techReviewer)
 * account record from the ATS system by its unique ID. The purpose of this
 * endpoint is to allow for system administrator-initiated account removal in
 * response to turnover, withdrawal, or privilege revocation events.
 *
 * Security measures ensure only authorized system administrators are permitted
 * to perform this sensitive action, and all requests should be logged in the
 * audit trails for compliance auditing. Deletion permanently removes the tech
 * reviewer from authentication and assignment flows; the system must ensure
 * that remaining records (e.g. code reviews, interview histories) reference the
 * deleted user as an orphaned record where appropriate, or handle as business
 * exception.
 *
 * Special consideration should be given to dependencies on interviews, review
 * comments, and IT audit reporting—these associations must not be silently lost
 * or misattributed post-deletion. Implementers must enforce strong permission
 * checks, mandatory audit trail creation, and pre-checks before executing the
 * removal. Deletion is irreversible and must be confirmed by privileged
 * administrators.
 *
 * @param props.connection
 * @param props.techReviewerId Unique identifier of the technical reviewer to
 *   delete
 * @path /atsRecruitment/systemAdmin/techReviewers/:techReviewerId
 * @accessor api.functional.atsRecruitment.systemAdmin.techReviewers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the technical reviewer to delete */
    techReviewerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/techReviewers/:techReviewerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/techReviewers/${encodeURIComponent(props.techReviewerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("techReviewerId")(() => typia.assert(props.techReviewerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
