import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentResume } from "../../../../structures/IAtsRecruitmentResume";
import { IPageIAtsRecruitmentResume } from "../../../../structures/IPageIAtsRecruitmentResume";

/**
 * Search, filter, and page through all applicant resumes in the system
 * (ats_recruitment_resumes table).
 *
 * Retrieve a list of resumes currently registered in the recruitment system,
 * applying advanced filtering criteria such as applicant identity, title,
 * parsing results, creation date, or included skill sets. The operation
 * supports pagination, allowing efficient browsing of large resume databases.
 *
 * HR recruiters can use this endpoint to narrow down resumes based on technical
 * skill requirements, applicant names, or date of submission, and quickly
 * identify candidates best suited for job postings. System administrators can
 * also access this for compliance and audit purposes. Filters also allow for
 * searching active vs. deleted (soft-deleted) resumes as needed.
 *
 * Permissions are restricted by user role: HR recruiters and system admins can
 * access all resumes, while applicants may only view their own data (via a
 * different endpoint). Search results support performance requirements for
 * large datasets and are optimized for list UI presentation.
 *
 * @param props.connection
 * @param props.body Complex search/filter criteria, pagination, and sorting
 *   info for resumes.
 * @path /atsRecruitment/systemAdmin/resumes
 * @accessor api.functional.atsRecruitment.systemAdmin.resumes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Complex search/filter criteria, pagination, and sorting info for
     * resumes.
     */
    body: IAtsRecruitmentResume.IRequest;
  };
  export type Body = IAtsRecruitmentResume.IRequest;
  export type Response = IPageIAtsRecruitmentResume.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/resumes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/resumes";
  export const random = (): IPageIAtsRecruitmentResume.ISummary =>
    typia.random<IPageIAtsRecruitmentResume.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full detail of a single applicant resume by resume ID
 * (ats_recruitment_resumes table).
 *
 * Retrieve complete structured data for an applicant's resume, including
 * original parsing results (name, email, phone, education, experience), skills
 * JSON, creation/update metadata, and relations to file storage. This operation
 * enables detailed review and verification of the resume in recruiting
 * workflows.
 *
 * The operation checks that the requesting user (HR, admin) has permission to
 * view the resume record, as resumes contain sensitive applicant data and are
 * subject to privacy controls. Resumes may be visible in detail to HR and
 * system admins for candidate evaluation, while applicants can only access
 * their own records (handled by a separate endpoint, not this one).
 *
 * Sensitive personal data is handled in compliance with privacy policies, and
 * access is logged for security and audit purposes.
 *
 * @param props.connection
 * @param props.resumeId ID of the resume to retrieve.
 * @path /atsRecruitment/systemAdmin/resumes/:resumeId
 * @accessor api.functional.atsRecruitment.systemAdmin.resumes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the resume to retrieve. */
    resumeId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentResume;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/resumes/:resumeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/resumes/${encodeURIComponent(props.resumeId ?? "null")}`;
  export const random = (): IAtsRecruitmentResume =>
    typia.random<IAtsRecruitmentResume>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resumeId")(() => typia.assert(props.resumeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
