import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentNotificationTemplate } from "../../../../structures/IAtsRecruitmentNotificationTemplate";
import { IPageIAtsRecruitmentNotificationTemplate } from "../../../../structures/IPageIAtsRecruitmentNotificationTemplate";

/**
 * Create a new notification template for ATS notification workflows
 * (ats_recruitment_notification_templates).
 *
 * Registers a new notification template in the ATS system, mapping to the
 * ats_recruitment_notification_templates model in the Prisma schema. The
 * required fields include the template_code (unique business key), channel
 * (e.g., email, sms, app_push), title, subject, message body, and is_active
 * flag. This enables flexible control over outgoing communication formats for
 * various business events, such as application status updates, interview
 * scheduling, or export confirmations.
 *
 * Only users with the systemAdmin role are authorized to perform this
 * operation, given the sensitivity of outbound message content. Validation
 * logic ensures the template_code/channel combination is unique, all required
 * fields are present, and content complies with open text input policies.
 *
 * Upon success, the API returns the full created notification template record,
 * which is immediately available for use in notification workflows. Errors
 * return explanatory messages for uniqueness conflicts or content validation
 * issues.
 *
 * @param props.connection
 * @param props.body Information for creating a new notification template,
 *   including required business logic fields.
 * @path /atsRecruitment/systemAdmin/notificationTemplates
 * @accessor api.functional.atsRecruitment.systemAdmin.notificationTemplates.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information for creating a new notification template, including
     * required business logic fields.
     */
    body: IAtsRecruitmentNotificationTemplate.ICreate;
  };
  export type Body = IAtsRecruitmentNotificationTemplate.ICreate;
  export type Response = IAtsRecruitmentNotificationTemplate;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/notificationTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/notificationTemplates";
  export const random = (): IAtsRecruitmentNotificationTemplate =>
    typia.random<IAtsRecruitmentNotificationTemplate>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated and filterable list of notification templates for
 * system-wide notifications (ats_recruitment_notification_templates).
 *
 * Fetches a list of notification templates from the
 * ats_recruitment_notification_templates table, allowing clients to apply
 * filters, sorting, and pagination. This is designed to aid administrators in
 * managing notification templates by channel or message type.
 *
 * Templates can be searched by code, channel, title, and message body using
 * full-text and partial match search. The filter parameters allow system admins
 * to locate templates needing updates, review message content for compliance,
 * or deactivate obsolete templates.
 *
 * Only systemAdmin users have access to this operation, as notification
 * template editing is a privileged administrative function. The response
 * returns template summary data (including IDs, codes, channels, and activation
 * status) for UI listing. Detailed read/edit should use the single-resource
 * endpoint by templateId.
 *
 * Validation includes checking that filtering and sorting fields align with
 * existing template columns, and that pagination parameters remain within
 * service bounds. Error responses return detailed reasons for misconfiguration
 * or excessive result set requests.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for notification
 *   template retrieval.
 * @path /atsRecruitment/systemAdmin/notificationTemplates
 * @accessor api.functional.atsRecruitment.systemAdmin.notificationTemplates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for notification template
     * retrieval.
     */
    body: IAtsRecruitmentNotificationTemplate.IRequest;
  };
  export type Body = IAtsRecruitmentNotificationTemplate.IRequest;
  export type Response = IPageIAtsRecruitmentNotificationTemplate.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/notificationTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/notificationTemplates";
  export const random = (): IPageIAtsRecruitmentNotificationTemplate.ISummary =>
    typia.random<IPageIAtsRecruitmentNotificationTemplate.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed content and configuration for a specific notification
 * template (ats_recruitment_notification_templates).
 *
 * Fetches all available details for a specific notification template,
 * identified by templateId, from the underlying
 * ats_recruitment_notification_templates table. The details include template
 * code, channel, title, subject, message body, status (active/inactive), and
 * creation or update timestamps.
 *
 * Access is restricted to users with systemAdmin role, in support of editorial
 * and compliance responsibilities for outbound communication. The operation is
 * crucial for regulatory audits, reviewing localized or channel-specific
 * content, and preparing template updates.
 *
 * Parameter validation ensures the templateId matches an existing record and is
 * a valid UUID. If the record is not found or access is denied, an appropriate
 * error is returned.
 *
 * @param props.connection
 * @param props.templateId Unique identifier of the notification template to
 *   retrieve.
 * @path /atsRecruitment/systemAdmin/notificationTemplates/:templateId
 * @accessor api.functional.atsRecruitment.systemAdmin.notificationTemplates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the notification template to retrieve. */
    templateId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentNotificationTemplate;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/notificationTemplates/:templateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/notificationTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): IAtsRecruitmentNotificationTemplate =>
    typia.random<IAtsRecruitmentNotificationTemplate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the content and configuration of an existing notification template
 * (ats_recruitment_notification_templates).
 *
 * Updates the configuration and message content of a specific notification
 * template identified by templateId, using data provided in the request body.
 * Editable fields include template_code, channel, title, subject, body content,
 * and is_active status, as defined in the Prisma schema. Only systemAdmin users
 * have access to this operation, in line with audit and compliance requirements
 * for outbound communication.
 *
 * The endpoint validates that the specified templateId exists and that proposed
 * changes do not violate field constraints or unique business keys
 * (template_code/channel uniqueness). Content is checked for format,
 * completeness, and compliance with notification delivery standards.
 *
 * Errors during processing provide detailed feedback on why updates failed,
 * especially for uniqueness, field validation, or missing templates. Upon
 * success, returns the fully updated notification template entity.
 *
 * @param props.connection
 * @param props.templateId Unique identifier of the notification template to
 *   update.
 * @param props.body Fields and content to update, following business rules and
 *   attribute constraints. Partial or full update is supported.
 * @path /atsRecruitment/systemAdmin/notificationTemplates/:templateId
 * @accessor api.functional.atsRecruitment.systemAdmin.notificationTemplates.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the notification template to update. */
    templateId: string & tags.Format<"uuid">;

    /**
     * Fields and content to update, following business rules and attribute
     * constraints. Partial or full update is supported.
     */
    body: IAtsRecruitmentNotificationTemplate.IUpdate;
  };
  export type Body = IAtsRecruitmentNotificationTemplate.IUpdate;
  export type Response = IAtsRecruitmentNotificationTemplate;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/notificationTemplates/:templateId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/notificationTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): IAtsRecruitmentNotificationTemplate =>
    typia.random<IAtsRecruitmentNotificationTemplate>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification template (ats_recruitment_notification_templates) by
 * ID.
 *
 * This endpoint enables system administrators to delete a notification template
 * record, identified by 'templateId', from the notification templates table in
 * the ATS system. Notification templates define the structure and content for
 * various business notifications (email, SMS, etc.), and can only be managed at
 * the system level for traceability and compliance.
 *
 * A successful DELETE operation fully removes the template, its metadata, and
 * disables further use across notification workflows. This may affect linked
 * notifications if the template is still actively referenced.
 *
 * Deleting a template is a privileged operation restricted to system
 * administrators, requiring authentication and full trace logging. Errors may
 * occur if the template does not exist or has already been deleted. The action
 * is also recorded in the audit log for compliance. Associated templates are
 * not recoverable after this operation.
 *
 * @param props.connection
 * @param props.templateId Unique identifier of the notification template to
 *   delete.
 * @path /atsRecruitment/systemAdmin/notificationTemplates/:templateId
 * @accessor api.functional.atsRecruitment.systemAdmin.notificationTemplates.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the notification template to delete. */
    templateId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/notificationTemplates/:templateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/notificationTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
