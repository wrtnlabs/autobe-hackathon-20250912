import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentHrRecruiter } from "../../../../structures/IAtsRecruitmentHrRecruiter";
import { IPageIAtsRecruitmentHrRecruiter } from "../../../../structures/IPageIAtsRecruitmentHrRecruiter";

/**
 * Search and retrieve a paginated list of HR recruiters from
 * ats_recruitment_hrrecruiters.
 *
 * Lists and searches HR recruiter accounts according to advanced filtering and
 * pagination criteria. Only users with proper authorization, typically system
 * administrators, can use this operation to view and manage HR user lists.
 * Supported filters include name, email, department, account status, and
 * registration date. Sorting and pagination are required to handle large
 * account sets efficiently.
 *
 * Returned recruiter information includes profile name, email, department,
 * account status (is_active) and audit dates but never includes credentials or
 * password hashes. Search access is logged for administrative forensics and
 * privacy compliance. Public or applicant users cannot access this endpoint.
 * Related endpoints allow administrators to manage or view individual HR
 * accounts in detail.
 *
 * @param props.connection
 * @param props.body Filtering, searching, and pagination criteria for HR
 *   recruiter account search.
 * @path /atsRecruitment/systemAdmin/hrRecruiters
 * @accessor api.functional.atsRecruitment.systemAdmin.hrRecruiters.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, searching, and pagination criteria for HR recruiter
     * account search.
     */
    body: IAtsRecruitmentHrRecruiter.IRequest;
  };
  export type Body = IAtsRecruitmentHrRecruiter.IRequest;
  export type Response = IPageIAtsRecruitmentHrRecruiter.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/hrRecruiters",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/hrRecruiters";
  export const random = (): IPageIAtsRecruitmentHrRecruiter.ISummary =>
    typia.random<IPageIAtsRecruitmentHrRecruiter.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed HR recruiter account by unique identifier from
 * ats_recruitment_hrrecruiters.
 *
 * Returns detailed information for one HR recruiter account, enabling system
 * admins to review account status, department details, name, and profile audit
 * details. Email, name, and department fields are returned but security
 * credentials including password hashes are strictly excluded from the response
 * for security compliance.
 *
 * This operation is necessary for administrative UI, support operations, and
 * compliance verification. The endpoint is access-controlled to only system
 * administrators for privacy and security. Any access to this data is logged in
 * audit trails for regulatory and business record keeping. Attempting to access
 * a non-existent account should return a clear error response.
 *
 * @param props.connection
 * @param props.hrRecruiterId Unique identifier (UUID) of the HR recruiter
 *   account to retrieve.
 * @path /atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId
 * @accessor api.functional.atsRecruitment.systemAdmin.hrRecruiters.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the HR recruiter account to retrieve. */
    hrRecruiterId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentHrRecruiter;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/hrRecruiters/${encodeURIComponent(props.hrRecruiterId ?? "null")}`;
  export const random = (): IAtsRecruitmentHrRecruiter =>
    typia.random<IAtsRecruitmentHrRecruiter>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("hrRecruiterId")(() => typia.assert(props.hrRecruiterId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an HR recruiter account's profile details in
 * ats_recruitment_hrrecruiters.
 *
 * Performs an account modification on a targeted HR recruiter record, enabling
 * updates to name, department, and is_active status, but never direct updates
 * of password hashes or security credentials. All modifications are tracked for
 * audit compliance, including before-and-after state information for regulatory
 * record keeping.
 *
 * This endpoint is access-restricted to system administrators, ensuring only
 * privileged users may perform account profile changes. All update events are
 * recorded in audit trails and may trigger notification workflows if account
 * status or department changes. Related endpoints support searching, viewing,
 * or deactivating HR recruiter accounts. If the specified account does not
 * exist, a clear error response is provided.
 *
 * @param props.connection
 * @param props.hrRecruiterId Unique identifier (UUID) of the HR recruiter
 *   account to be updated.
 * @param props.body Updated HR recruiter account profile fields (except
 *   password) to apply.
 * @path /atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId
 * @accessor api.functional.atsRecruitment.systemAdmin.hrRecruiters.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the HR recruiter account to be updated. */
    hrRecruiterId: string & tags.Format<"uuid">;

    /**
     * Updated HR recruiter account profile fields (except password) to
     * apply.
     */
    body: IAtsRecruitmentHrRecruiter.IUpdate;
  };
  export type Body = IAtsRecruitmentHrRecruiter.IUpdate;
  export type Response = IAtsRecruitmentHrRecruiter;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/hrRecruiters/${encodeURIComponent(props.hrRecruiterId ?? "null")}`;
  export const random = (): IAtsRecruitmentHrRecruiter =>
    typia.random<IAtsRecruitmentHrRecruiter>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("hrRecruiterId")(() => typia.assert(props.hrRecruiterId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Deactivate (soft-delete) an HR recruiter account by ID in
 * ats_recruitment_hrrecruiters.
 *
 * This API endpoint allows system administrators to deactivate and mark as
 * deleted a specific HR recruiter account. The operation targets the
 * 'ats_recruitment_hrrecruiters' table, and performs a soft-delete by setting
 * the 'deleted_at' field, which ensures business auditability and traceability
 * in compliance with legal and HR best practices.
 *
 * System admins must use this endpoint when an HR staff member leaves the
 * company, changes roles, or loses system privileges. The deletion preserves
 * historical data about managed job postings, applications, and related audit
 * trails, while preventing future logins from the deleted account. The process
 * also updates the 'is_active' flag as needed.
 *
 * The operation is restricted to systemAdmin roles, reflecting high security
 * requirements. Attempts to delete the last remaining admin or currently active
 * session will result in an error. Soft-deletion allows for recovery or
 * compliance review.
 *
 * Related endpoints: list HR recruiters, create HR recruiter, view HR recruiter
 * details. Error cases include attempting to delete already deleted or
 * non-existent accounts, and insufficient privileges.
 *
 * @param props.connection
 * @param props.hrRecruiterId Unique identifier of HR recruiter to be deleted
 * @path /atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId
 * @accessor api.functional.atsRecruitment.systemAdmin.hrRecruiters.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of HR recruiter to be deleted */
    hrRecruiterId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/hrRecruiters/:hrRecruiterId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/hrRecruiters/${encodeURIComponent(props.hrRecruiterId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("hrRecruiterId")(() => typia.assert(props.hrRecruiterId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
