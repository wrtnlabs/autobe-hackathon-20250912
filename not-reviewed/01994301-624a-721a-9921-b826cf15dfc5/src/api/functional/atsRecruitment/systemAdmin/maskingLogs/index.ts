import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentMaskingLog } from "../../../../structures/IAtsRecruitmentMaskingLog";
import { IPageIAtsRecruitmentMaskingLog } from "../../../../structures/IPageIAtsRecruitmentMaskingLog";

/**
 * Retrieve a paginated, filterable list of data masking log records from the
 * ats_recruitment_masking_logs table.
 *
 * Query the system's ats_recruitment_masking_logs table to retrieve a
 * paginated, filterable list of all data masking events. Each log entry
 * includes metadata such as the actor who performed masking, the type and ID of
 * masked data (e.g., resume, contact info), timestamp, and masking reason. This
 * allows administrators and compliance officers to efficiently audit which data
 * has been masked, by whom, and for what purpose, as required for privacy
 * regulations such as GDPR.
 *
 * Only users with system administrator (systemAdmin) privileges may access this
 * API endpoint, ensuring sensitive data masking activity is not exposed to
 * unauthorized actors. The operation supports advanced filtering (by reason,
 * actor, type, date range) and sorting to allow rapid investigative or
 * compliance reporting. Proper validation ensures only authorized access and
 * input parameters are enforced to avoid leaking sensitive audit information.
 * Detailed error handling should return appropriate messages for authorization
 * errors or invalid queries.
 *
 * The API uses the IAtsRecruitmentMaskingLog.IRequest DTO for search/filtering
 * input and responds with a paginated summary list using the
 * IPageIAtsRecruitmentMaskingLog.ISummary DTO.
 *
 * @param props.connection
 * @param props.body Query criteria and pagination options for masking log
 *   search. Supports filtering by type, actor, masking reason, and date range.
 * @path /atsRecruitment/systemAdmin/maskingLogs
 * @accessor api.functional.atsRecruitment.systemAdmin.maskingLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query criteria and pagination options for masking log search.
     * Supports filtering by type, actor, masking reason, and date range.
     */
    body: IAtsRecruitmentMaskingLog.IRequest;
  };
  export type Body = IAtsRecruitmentMaskingLog.IRequest;
  export type Response = IPageIAtsRecruitmentMaskingLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/maskingLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/maskingLogs";
  export const random = (): IPageIAtsRecruitmentMaskingLog.ISummary =>
    typia.random<IPageIAtsRecruitmentMaskingLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific data masking log record.
 *
 * Given a unique maskingLogId, this API looks up and returns the complete
 * detail of a specific masking log entry from the ats_recruitment_masking_logs
 * table. The response includes masking timestamp, masked_by_id and type, target
 * data type and ID, masking reason, and all relevant metadata.
 *
 * Access is strictly restricted to system administrators (systemAdmin) because
 * masking log data may reveal sensitive information about data privacy events
 * and actors. This operation supports audit investigations and compliance
 * reviews, providing a full historical record necessary for regulatory
 * documentation or privacy incident response. Proper validation checks that the
 * maskingLogId exists and the requester is authorized before returning details.
 * If no such log entry exists, an appropriate error message is returned.
 *
 * Related operations include the paginated masking log list (PATCH
 * /maskingLogs) and similar audit endpoints for deletion and access logs.
 *
 * @param props.connection
 * @param props.maskingLogId Unique identifier of the masking log record to
 *   retrieve.
 * @path /atsRecruitment/systemAdmin/maskingLogs/:maskingLogId
 * @accessor api.functional.atsRecruitment.systemAdmin.maskingLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the masking log record to retrieve. */
    maskingLogId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentMaskingLog;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/maskingLogs/:maskingLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/maskingLogs/${encodeURIComponent(props.maskingLogId ?? "null")}`;
  export const random = (): IAtsRecruitmentMaskingLog =>
    typia.random<IAtsRecruitmentMaskingLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("maskingLogId")(() => typia.assert(props.maskingLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
