import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentExternalApiCredential } from "../../../../structures/IAtsRecruitmentExternalApiCredential";
import { IPageIAtsRecruitmentExternalApiCredential } from "../../../../structures/IPageIAtsRecruitmentExternalApiCredential";

/**
 * Create/register a new external API credential
 * (ats_recruitment_external_api_credentials table).
 *
 * Register a new external API credential into the
 * ats_recruitment_external_api_credentials table, enabling secure storage and
 * future management of integration secrets. The operation expects a payload
 * with the credential key, service name, encrypted credential JSON, expiration
 * details, and an optional business-purpose description. Upon successful
 * creation, an audit record is generated for compliance tracking.
 *
 * Access is restricted to systemAdmin users to safeguard secrets. Related
 * endpoints support credential querying, updating, and (soft) deletion for
 * secret rotation. The response includes the full metadata excluding plaintext
 * credentials, confirming secure creation. If a credential key already exists,
 * an error is returned. Input validation enforces business rules for service
 * naming, expiration logic, and unique key assignment.
 *
 * @param props.connection
 * @param props.body Information required to create/register a new external API
 *   credential.
 * @path /atsRecruitment/systemAdmin/externalApiCredentials
 * @accessor api.functional.atsRecruitment.systemAdmin.externalApiCredentials.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create/register a new external API
     * credential.
     */
    body: IAtsRecruitmentExternalApiCredential.ICreate;
  };
  export type Body = IAtsRecruitmentExternalApiCredential.ICreate;
  export type Response = IAtsRecruitmentExternalApiCredential;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/externalApiCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/atsRecruitment/systemAdmin/externalApiCredentials";
  export const random = (): IAtsRecruitmentExternalApiCredential =>
    typia.random<IAtsRecruitmentExternalApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list external API credentials
 * (ats_recruitment_external_api_credentials table).
 *
 * Fetch a filtered and paginated list of external API credentials stored in the
 * ats_recruitment_external_api_credentials table. System administrators use
 * this endpoint to audit, manage rotations, or validate integration credentials
 * used by the ATS platform. Filtering options may include credential key,
 * service name, and expiration status.
 *
 * The response is paginated and may include metadata about the secret
 * (excluding plaintext values), business usage description, and expiration
 * details. Related endpoints such as credential creation, detail view, and
 * deletion are used to extend the integration lifecycle. Only users with
 * systemAdmin role may access this operation due to security-sensitive nature.
 *
 * @param props.connection
 * @param props.body Criteria for searching/filtering and paginating external
 *   API credentials.
 * @path /atsRecruitment/systemAdmin/externalApiCredentials
 * @accessor api.functional.atsRecruitment.systemAdmin.externalApiCredentials.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for searching/filtering and paginating external API
     * credentials.
     */
    body: IAtsRecruitmentExternalApiCredential.IRequest;
  };
  export type Body = IAtsRecruitmentExternalApiCredential.IRequest;
  export type Response = IPageIAtsRecruitmentExternalApiCredential.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/externalApiCredentials",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/atsRecruitment/systemAdmin/externalApiCredentials";
  export const random =
    (): IPageIAtsRecruitmentExternalApiCredential.ISummary =>
      typia.random<IPageIAtsRecruitmentExternalApiCredential.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * View external API credential detail (ats_recruitment_external_api_credentials
 * table).
 *
 * Retrieve full metadata for an external API credential in the
 * ats_recruitment_external_api_credentials table (not including the raw
 * credential secret), by specifying its credential ID in the path parameter.
 * System administrators use this endpoint for troubleshooting, auditing, or
 * regenerating integration keys.
 *
 * The operation is restricted to systemAdmin users due to the sensitive nature
 * of the information. The endpoint provides reference details such as
 * credential key, service, description, expiration, and audit/conformity
 * metadata. If the credential does not exist or is deleted, a precise error is
 * returned. Related endpoints include credentials list search, create, update,
 * and (soft) delete.
 *
 * @param props.connection
 * @param props.externalApiCredentialId Unique identifier (UUID) of the external
 *   API credential to retrieve.
 * @path /atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId
 * @accessor api.functional.atsRecruitment.systemAdmin.externalApiCredentials.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the external API credential to retrieve. */
    externalApiCredentialId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentExternalApiCredential;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/externalApiCredentials/${encodeURIComponent(props.externalApiCredentialId ?? "null")}`;
  export const random = (): IAtsRecruitmentExternalApiCredential =>
    typia.random<IAtsRecruitmentExternalApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externalApiCredentialId")(() =>
        typia.assert(props.externalApiCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an external API credential configuration in
 * ats_recruitment_external_api_credentials table.
 *
 * Update the specified external API credential configuration in the ATS
 * platform. This API operation allows a system administrator to replace,
 * rotate, or update the contents of an existing credential, such as updating
 * OAuth tokens for Google Calendar integration, or rotating the SendGrid API
 * key used for notifications.
 *
 * This operation enforces strict access control—the user must have the
 * "systemAdmin" role. The target credential must exist and not be soft-deleted.
 * When changes are made, an audit event is recorded.
 *
 * The payload must provide updated values for relevant credential fields:
 * credential_key (unique), service_name, credential_json (with secrets/tokens
 * encrypted), expiration timestamp, and an optional description. Unique
 * constraints on credential_key and referential integrity are ensured.
 *
 * Sensitive information is encrypted at rest and only visible to highly
 * privileged system/admin users. Regular business actors (applicants, HR, tech
 * reviewers) are forbidden from direct access. Attempts to update non-existent
 * or deleted credentials fail with a clear error. Input validation includes
 * credential_key uniqueness, service_name integrity, credential_json format,
 * and optional expires_at (must be in the future or null for unlimited).
 *
 * All updates trigger audit trail entries with before/after snapshots for
 * compliance and traceability. Related endpoints: credential creation (POST
 * /externalApiCredentials), credential retrieval (GET
 * /externalApiCredentials/{id}).
 *
 * @param props.connection
 * @param props.externalApiCredentialId UUID for the specific external API
 *   credential to be updated.
 * @param props.body Updated credential information for the external API
 *   integration credential.
 * @path /atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId
 * @accessor api.functional.atsRecruitment.systemAdmin.externalApiCredentials.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID for the specific external API credential to be updated. */
    externalApiCredentialId: string & tags.Format<"uuid">;

    /**
     * Updated credential information for the external API integration
     * credential.
     */
    body: IAtsRecruitmentExternalApiCredential.IUpdate;
  };
  export type Body = IAtsRecruitmentExternalApiCredential.IUpdate;
  export type Response = IAtsRecruitmentExternalApiCredential;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/externalApiCredentials/${encodeURIComponent(props.externalApiCredentialId ?? "null")}`;
  export const random = (): IAtsRecruitmentExternalApiCredential =>
    typia.random<IAtsRecruitmentExternalApiCredential>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externalApiCredentialId")(() =>
        typia.assert(props.externalApiCredentialId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an external API credential (flag deleted_at, not hard removal) in
 * ats_recruitment_external_api_credentials table.
 *
 * Perform a soft delete on the specified external API credential record in the
 * ATS platform. This operation is strictly for system administrative purposes
 * and allows a systemAdmin to mark an external API credential as deleted (by
 * setting the deleted_at field). The operation ensures that the credential is
 * logically removed from active use for all subsequent API workflows and
 * integrations, but physically retained for future recovery, compliance
 * reviews, and audit purposes.
 *
 * This deletion does not remove the credential from the database; rather, it
 * flags the credential as deleted. All references in integration logic and ATS
 * business workflows must ignore credentials marked as deleted_at != null.
 *
 * All actions performed via this endpoint are recorded in audit logs for full
 * traceability, including operation type, actor, and deletion reason/context
 * for security incident response. This endpoint is not available to applicants,
 * HR users, or technical reviewers and enforces access control before mutating
 * the credential entity.
 *
 * Error conditions include referencing a non-existent or already soft-deleted
 * credential, or insufficient permissions. Related endpoints include external
 * API credential creation, update, and credential usage tracking in integration
 * layers.
 *
 * @param props.connection
 * @param props.externalApiCredentialId UUID of target external API credential
 *   to be soft-deleted.
 * @path /atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId
 * @accessor api.functional.atsRecruitment.systemAdmin.externalApiCredentials.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of target external API credential to be soft-deleted. */
    externalApiCredentialId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/externalApiCredentials/:externalApiCredentialId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/externalApiCredentials/${encodeURIComponent(props.externalApiCredentialId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("externalApiCredentialId")(() =>
        typia.assert(props.externalApiCredentialId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
