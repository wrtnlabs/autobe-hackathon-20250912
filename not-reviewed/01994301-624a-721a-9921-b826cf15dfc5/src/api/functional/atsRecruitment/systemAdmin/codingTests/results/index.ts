import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTestResult } from "../../../../../structures/IAtsRecruitmentCodingTestResult";
import { IPageIAtsRecruitmentCodingTestResult } from "../../../../../structures/IPageIAtsRecruitmentCodingTestResult";

/**
 * Create a new coding test result record under the specified coding test
 * (ats_recruitment_coding_test_results table).
 *
 * Creates a new coding test result record associated with a specified coding
 * test. This operation is intended for generating formal result records after a
 * test is evaluated—either manually by a technical reviewer or through
 * automatic assessment system integration.
 *
 * Input data includes score, maximum score, evaluation method, ranking
 * percentile, plagiarism flags, and possibly result JSON for system-generated
 * outcomes. Only permitted for users with 'techReviewer' or 'systemAdmin'
 * roles; operation is audited for compliance.
 *
 * The operation enables creation of both routine and exceptional evaluation
 * records and supports backfilling test results if needed for audit/history
 * improvement.
 *
 * @param props.connection
 * @param props.codingTestId ID of the coding test to which the new result
 *   belongs.
 * @param props.body Coding test result data including scores, flags, evaluation
 *   method, and details.
 * @path /atsRecruitment/systemAdmin/codingTests/:codingTestId/results
 * @accessor api.functional.atsRecruitment.systemAdmin.codingTests.results.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the coding test to which the new result belongs. */
    codingTestId: string & tags.Format<"uuid">;

    /**
     * Coding test result data including scores, flags, evaluation method,
     * and details.
     */
    body: IAtsRecruitmentCodingTestResult.ICreate;
  };
  export type Body = IAtsRecruitmentCodingTestResult.ICreate;
  export type Response = IAtsRecruitmentCodingTestResult;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/codingTests/:codingTestId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/results`;
  export const random = (): IAtsRecruitmentCodingTestResult =>
    typia.random<IAtsRecruitmentCodingTestResult>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search coding test results linked to a specific coding test
 * (ats_recruitment_coding_test_results table).
 *
 * Fetches a paginated, filterable list of coding test results associated with a
 * specific coding test. The response includes detailed scoring, evaluation
 * methods, flags for plagiarism, and additional metadata per result.
 *
 * Users with the 'techReviewer' or 'systemAdmin' roles can search by score,
 * evaluation status, review status, or filter by result timing and attributes.
 * All query conditions must adhere to privacy, and only authorized personnel
 * can access rich scoring and sensitive information as per role-based policy.
 *
 * Underlying data comes from the ats_recruitment_coding_test_results table;
 * result rows also reference submission IDs and coding test IDs for
 * cross-correlation within the audit trail. Operation supports business logic
 * for reviewing candidate performance and identifying anomalies. It complements
 * the GET (single detail) and POST (new entry) APIs for this resource.
 *
 * @param props.connection
 * @param props.codingTestId Unique identifier of the coding test instance whose
 *   results are being listed or searched.
 * @param props.body Search and filter conditions for coding test results
 *   including pagination and filters (score, plagiarism_flag, etc)
 * @path /atsRecruitment/systemAdmin/codingTests/:codingTestId/results
 * @accessor api.functional.atsRecruitment.systemAdmin.codingTests.results.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the coding test instance whose results are being
     * listed or searched.
     */
    codingTestId: string & tags.Format<"uuid">;

    /**
     * Search and filter conditions for coding test results including
     * pagination and filters (score, plagiarism_flag, etc)
     */
    body: IAtsRecruitmentCodingTestResult.IRequest;
  };
  export type Body = IAtsRecruitmentCodingTestResult.IRequest;
  export type Response = IPageIAtsRecruitmentCodingTestResult;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/codingTests/:codingTestId/results",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/results`;
  export const random = (): IPageIAtsRecruitmentCodingTestResult =>
    typia.random<IPageIAtsRecruitmentCodingTestResult>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch single coding test result detail by codingTestId and resultId
 * (ats_recruitment_coding_test_results table).
 *
 * Fetches all fields of a particular coding test result, including the score,
 * maximum score, ranking percentile, evaluation method ('auto', 'manual',
 * etc.), and flags such as plagiarism detection.
 *
 * This endpoint is available to technical reviewers and system administrators
 * for compliance review, investigation, manual evaluation of flagged cases, or
 * candidate assessment validation. Permission checks restrict access to only
 * approved roles. The response also includes provenance (submission ID,
 * finalized date, raw evaluation JSON) and fits into the operational flow of
 * technical assessment audits.
 *
 * The resulting data is sourced exclusively from the
 * ats_recruitment_coding_test_results table and directly identified via both
 * codingTestId and resultId—a composite path for security and traceability.
 *
 * @param props.connection
 * @param props.codingTestId Coding test instance ID (parent context for the
 *   result).
 * @param props.resultId Unique result record ID to be fetched.
 * @path /atsRecruitment/systemAdmin/codingTests/:codingTestId/results/:resultId
 * @accessor api.functional.atsRecruitment.systemAdmin.codingTests.results.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Coding test instance ID (parent context for the result). */
    codingTestId: string & tags.Format<"uuid">;

    /** Unique result record ID to be fetched. */
    resultId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTestResult;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/codingTests/:codingTestId/results/:resultId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/results/${encodeURIComponent(props.resultId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestResult =>
    typia.random<IAtsRecruitmentCodingTestResult>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("resultId")(() => typia.assert(props.resultId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update coding test result with revised scores, flags, or additional
 * evaluation details (ats_recruitment_coding_test_results table).
 *
 * Allows technical reviewers or system administrators to update a coding test
 * result's critical fields—such as adjusting score, flagging for plagiarism,
 * changing evaluation method, or entering new result JSON—in response to manual
 * review findings or correction cycles.
 *
 * Update is restricted to authorized roles. Audit trails track every
 * modification for compliance, and adjusted results are versioned to reflect
 * change history where required. Reviewers may use this to correct mistaken
 * auto-evaluations or mark suspicion indicators found after initial review.
 *
 * The operation leverages the ats_recruitment_coding_test_results table, and
 * all field modifications must be consistent with assessment and compliance
 * rules of the ATS platform and audit guidelines.
 *
 * @param props.connection
 * @param props.codingTestId Parent coding test context; ensures update is
 *   within proper assessment scope.
 * @param props.resultId Target unique coding test result ID to be updated.
 * @param props.body Delta/patch of updated coding test result fields (scores,
 *   methods, flags, etc).
 * @path /atsRecruitment/systemAdmin/codingTests/:codingTestId/results/:resultId
 * @accessor api.functional.atsRecruitment.systemAdmin.codingTests.results.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Parent coding test context; ensures update is within proper
     * assessment scope.
     */
    codingTestId: string & tags.Format<"uuid">;

    /** Target unique coding test result ID to be updated. */
    resultId: string & tags.Format<"uuid">;

    /**
     * Delta/patch of updated coding test result fields (scores, methods,
     * flags, etc).
     */
    body: IAtsRecruitmentCodingTestResult.IUpdate;
  };
  export type Body = IAtsRecruitmentCodingTestResult.IUpdate;
  export type Response = IAtsRecruitmentCodingTestResult;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/codingTests/:codingTestId/results/:resultId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}/results/${encodeURIComponent(props.resultId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTestResult =>
    typia.random<IAtsRecruitmentCodingTestResult>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
      assert.param("resultId")(() => typia.assert(props.resultId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
