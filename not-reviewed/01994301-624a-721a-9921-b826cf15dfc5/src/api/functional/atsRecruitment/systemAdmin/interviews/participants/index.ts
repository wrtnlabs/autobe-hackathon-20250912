import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentInterviewParticipant } from "../../../../../structures/IAtsRecruitmentInterviewParticipant";
import { IPageIAtsRecruitmentInterviewParticipant } from "../../../../../structures/IPageIAtsRecruitmentInterviewParticipant";

/**
 * Add a new participant to an interview in
 * ats_recruitment_interview_participants.
 *
 * This operation allows authorized HR recruiters and system administrators to
 * add a new participant to an interview record. The new participant may be an
 * applicant, recruiter, tech reviewer, or other actor needed for the session.
 * Creation includes participant role, actor reference, initial invitation
 * timestamp, and default confirmation status (e.g., pending).
 *
 * Security requires validation that only privileged users may create
 * participants and that the referenced interviewId exists and is active. If
 * attempting to add a duplicate participant (same actor/interview/role), the
 * system must reject with a unique constraint violation. All additions are
 * logged for compliance and future participant management.
 *
 * This operation works directly with the ats_recruitment_interview_participants
 * table, with necessary foreign keys to the interview and actor tables. Related
 * API operations include participant listing, deletion, and interview
 * retrieval. Inputs must be validated for type, completeness, and referential
 * integrity; errors for nonexistent interviews or actors should yield clear
 * business errors.
 *
 * Edge cases include attempts to add participants to deleted or closed
 * interviews, which must fail gracefully. Successful completion returns the
 * full participant record as confirmation.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the parent interview to which
 *   the participant will be added.
 * @param props.body Information required to create a new interview participant
 *   (actor, role, etc.).
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId/participants
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.participants.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier for the parent interview to which the participant
     * will be added.
     */
    interviewId: string & tags.Format<"uuid">;

    /**
     * Information required to create a new interview participant (actor,
     * role, etc.).
     */
    body: IAtsRecruitmentInterviewParticipant.ICreate;
  };
  export type Body = IAtsRecruitmentInterviewParticipant.ICreate;
  export type Response = IAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId/participants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants`;
  export const random = (): IAtsRecruitmentInterviewParticipant =>
    typia.random<IAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve all participants for a specific interview from
 * ats_recruitment_interview_participants.
 *
 * This endpoint enables authorized users—such as system administrators, HR
 * recruiters, and relevant tech reviewers—to access a complete, up-to-date
 * listing of all participants associated with a particular interview record.
 * Each participant entry includes actor role (applicant, recruiter, reviewer,
 * observer), relation to the interview, invitation timestamp, and current
 * confirmation status. Responses may include filtering, sorting, and pagination
 * of records as needed for listings with many participants.
 *
 * Access is role-restricted for privacy and operational security, with
 * systemAdmin, hrRecruiter, and techReviewer roles allowed. The main table
 * involved is ats_recruitment_interview_participants, with relationships to
 * ats_recruitment_interviews (parent) and the relevant actor entity.
 *
 * Business rules should enforce that only users assigned to or responsible for
 * the interview may access this list, and all accesses should be logged in the
 * access log table for compliance. Security policies ensure that applicant
 * details are not exposed beyond authorized users. The endpoint must also
 * validate that the interviewId exists prior to searching, with appropriate
 * errors for missing or deleted records.
 *
 * Related API operations include creating, updating, or deleting interview
 * participants, as well as retrieving interview and schedule details. If the
 * interviewId does not exist, return a clear error indicating the issue.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the parent interview whose
 *   participants are to be listed.
 * @param props.body Filtering and pagination options for participant listing
 *   (optional fields).
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId/participants
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.participants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the parent interview whose participants are to
     * be listed.
     */
    interviewId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination options for participant listing (optional
     * fields).
     */
    body: IAtsRecruitmentInterviewParticipant.IRequest;
  };
  export type Body = IAtsRecruitmentInterviewParticipant.IRequest;
  export type Response = IPageIAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId/participants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants`;
  export const random = (): IPageIAtsRecruitmentInterviewParticipant =>
    typia.random<IPageIAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific interview participant from
 * ats_recruitment_interview_participants.
 *
 * This operation allows authorized HR recruiters, system administrators, and
 * tech reviewers to obtain detailed information about a single interview
 * participant. Details include the participant’s role (e.g., applicant,
 * recruiter, tech reviewer), the time of invitation, their current confirmation
 * status (pending, accepted, declined), and the relationship to the parent
 * interview. This is useful for pre-interview preparation, operational control,
 * and compliance auditing.
 *
 * Access restrictions are applied to maintain privacy and business compliance,
 * with only relevant users able to view individual participant data. All
 * accesses are to be logged in compliance with ATS audit and access
 * requirements. Input validation must ensure both interviewId and participantId
 * refer to valid, existing records, with clear errors for missing or deleted
 * participants or interviews.
 *
 * The schema source is the ats_recruitment_interview_participants table, joined
 * with related identity and interview data for context. Other related endpoints
 * include participant listing/search as well as update or removal actions.
 * Error cases may involve inexistent participantIds or unauthorized access
 * attempts, for which meaningful error responses must be provided.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the interview associated with
 *   the participant.
 * @param props.participantId Unique identifier for the specific participant
 *   within the interview.
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.participants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the interview associated with the participant. */
    interviewId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific participant within the interview. */
    participantId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants/${encodeURIComponent(props.participantId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterviewParticipant =>
    typia.random<IAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.param("participantId")(() => typia.assert(props.participantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update interview participant details by interview and participant ID
 * (ats_recruitment_interview_participants).
 *
 * Update details for a specific interview participant by interview and
 * participant ID. This can change participant role (applicant, recruiter,
 * reviewer) or confirmation status (pending, accepted, declined, tentative).
 *
 * The interview participant entity is part of
 * ats_recruitment_interview_participants, which serves as the link between
 * interviews and their human actors. Only HR recruiters or system
 * administrators can update participant details to ensure privileged and
 * authorized modification.
 *
 * Changes are logged for audit compliance, and improper access is denied with
 * explanatory error messages. Edits must respect the participant's relationship
 * (e.g., an applicant cannot be changed to a reviewer arbitrarily).
 *
 * Validation covers interview existence, participant presence, allowed status
 * transitions, and role constraints. Audit logs will capture who performed the
 * edit and what details were modified for incident forensics.
 *
 * This API should be used in conjunction with GET participants, PATCH for
 * listing schedules, and DELETE for participant removal as part of broader
 * interview and participant management.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the target interview.
 * @param props.participantId Unique identifier for the interview participant to
 *   be updated.
 * @param props.body Information to update for the interview participant (e.g.,
 *   role, confirmation status).
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.participants.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target interview. */
    interviewId: string & tags.Format<"uuid">;

    /** Unique identifier for the interview participant to be updated. */
    participantId: string & tags.Format<"uuid">;

    /**
     * Information to update for the interview participant (e.g., role,
     * confirmation status).
     */
    body: IAtsRecruitmentInterviewParticipant.IUpdate;
  };
  export type Body = IAtsRecruitmentInterviewParticipant.IUpdate;
  export type Response = IAtsRecruitmentInterviewParticipant;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants/${encodeURIComponent(props.participantId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterviewParticipant =>
    typia.random<IAtsRecruitmentInterviewParticipant>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.param("participantId")(() => typia.assert(props.participantId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a participant from an interview
 * (ats_recruitment_interview_participants).
 *
 * Erase (permanently remove) a participant from an interview given both the
 * interview and participant IDs. The operation is mapped to
 * ats_recruitment_interview_participants and supports compliance/audit by
 * logging who performed the deletion.
 *
 * This API endpoint is protected—only accessible to users with hrRecruiter or
 * systemAdmin roles. Deletion is permanent (not soft-delete), removing the
 * participant link and preventing further notifications or participation in the
 * scheduled interview. The participant entity is not deleted from the system,
 * only the association with this specific interview.
 *
 * If the participant does not exist for the given interview, a not found error
 * is returned. Business logic prevents removing mandatory participants (e.g.,
 * the last applicant in mandatory configuration) and enforces schedule
 * validity.
 *
 * Typical workflow includes using this API after a change in schedule or
 * participant assignment, or to manage replacements/cancelations.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier for the interview containing the
 *   participant.
 * @param props.participantId Unique identifier of the participant to be removed
 *   from the interview.
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.participants.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the interview containing the participant. */
    interviewId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the participant to be removed from the
     * interview.
     */
    participantId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId/participants/:participantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}/participants/${encodeURIComponent(props.participantId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.param("participantId")(() => typia.assert(props.participantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
