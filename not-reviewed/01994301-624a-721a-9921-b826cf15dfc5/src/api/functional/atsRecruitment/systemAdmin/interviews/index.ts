import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as participants from "./participants/index";
export * as schedules from "./schedules/index";
export * as calendarSyncs from "./calendarSyncs/index";

/**
 * Permanently remove an interview from the ats_recruitment_interviews table.
 *
 * The purpose of this operation is to enable authorized users—specifically
 * system administrators and HR recruiters—to irreversibly remove an entire
 * interview record from the ATS recruitment system. This includes the interview
 * metadata, scheduling records, participants, and associated interview
 * questions. Once deleted, the information is permanently removed from the
 * database and cannot be restored, supporting GDPR and business data lifecycle
 * policies.
 *
 * Security considerations restrict access to this operation to systemAdmin and
 * hrRecruiter roles. Appropriate authorization checks must be enforced, and all
 * deletion actions must be logged in the audit trail with full context,
 * including actor and timestamp, to ensure compliance and enable post-mortem
 * analysis if necessary.
 *
 * The operation directly manipulates the ats_recruitment_interviews table. Any
 * related records in child tables (such as participants, schedules, and
 * questions) must be removed or cascade-deleted to maintain referential
 * integrity. This does not perform any kind of soft deletion; the record is
 * eliminated entirely from persistent storage. Attempts to access the interview
 * after deletion should result in appropriate errors.
 *
 * Related operations include interview creation, updating, and listing
 * endpoints, as well as recovery and audit queries for administrative review.
 * If deletion fails due to constraints or non-existent interviewId, clear error
 * messages should be provided.
 *
 * @param props.connection
 * @param props.interviewId Unique identifier of the interview to be permanently
 *   deleted.
 * @path /atsRecruitment/systemAdmin/interviews/:interviewId
 * @accessor api.functional.atsRecruitment.systemAdmin.interviews.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the interview to be permanently deleted. */
    interviewId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/interviews/:interviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/interviews/${encodeURIComponent(props.interviewId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
