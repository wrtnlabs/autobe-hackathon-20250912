import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentJobSkill } from "../../../../structures/IAtsRecruitmentJobSkill";
import { IPageIAtsRecruitmentJobSkill } from "../../../../structures/IPageIAtsRecruitmentJobSkill";

/**
 * Retrieve information about a single job skill by ID
 * (ats_recruitment_job_skills).
 *
 * Returns complete information about a job skill, including name, description,
 * status, creation and update timestamps. The record is identified by its
 * jobSkillId, which must be a valid UUID for a job skill currently present in
 * the system. The response includes all business-relevant metadata necessary
 * for display and possible analysis.
 *
 * Accessible to system administrators, HR recruiters, and technical reviewers,
 * but write operations are not permitted through this endpoint. Attempts to
 * access a non-existent or deleted job skill return a not found error. Audit
 * logging of the access event is recommended for compliance.
 *
 * This API is typically used in admin/support dashboards or job skill reference
 * dialogs for efficient skill management and data quality improvement.
 *
 * @param props.connection
 * @param props.jobSkillId Unique identifier of the job skill to retrieve
 * @path /atsRecruitment/systemAdmin/jobSkills/:jobSkillId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobSkills.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the job skill to retrieve */
    jobSkillId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentJobSkill;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/systemAdmin/jobSkills/:jobSkillId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/jobSkills/${encodeURIComponent(props.jobSkillId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobSkill =>
    typia.random<IAtsRecruitmentJobSkill>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobSkillId")(() => typia.assert(props.jobSkillId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of a job skill (ats_recruitment_job_skills) by ID.
 *
 * This endpoint enables authorized HR recruiters, system administrators, or
 * technical reviewers to update the details of a specific job skill. It
 * supports changes to the skill name, description, and status (active/inactive)
 * for improved recruitment workflows and tech stack normalization.
 *
 * Only users with write permissions (systemAdmin, hrRecruiter) can access this
 * operation. Attempting to update non-existent, deleted, or inactive skills
 * will result in a clear error response, and all updates are tracked in the
 * audit trail for security and compliance.
 *
 * Skill name uniqueness is enforced, and changing it may impact job postings or
 * application skill matching. If a name already exists, the operation rejects
 * the change. "deleted_at" column indicates soft removal; updates are not
 * allowed on deleted skills.
 *
 * This API operation is crucial for maintaining a clean and current master
 * skills list and supporting continuous improvement of job requirement
 * management.
 *
 * @param props.connection
 * @param props.jobSkillId Unique identifier of the job skill to update
 * @param props.body Updated attributes for the job skill, such as name, status,
 *   or description
 * @path /atsRecruitment/systemAdmin/jobSkills/:jobSkillId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobSkills.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the job skill to update */
    jobSkillId: string & tags.Format<"uuid">;

    /**
     * Updated attributes for the job skill, such as name, status, or
     * description
     */
    body: IAtsRecruitmentJobSkill.IUpdate;
  };
  export type Body = IAtsRecruitmentJobSkill.IUpdate;
  export type Response = IAtsRecruitmentJobSkill;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/systemAdmin/jobSkills/:jobSkillId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/systemAdmin/jobSkills/${encodeURIComponent(props.jobSkillId ?? "null")}`;
  export const random = (): IAtsRecruitmentJobSkill =>
    typia.random<IAtsRecruitmentJobSkill>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobSkillId")(() => typia.assert(props.jobSkillId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a job skill entry by ID (ats_recruitment_job_skills).
 *
 * Allows a system administrator to permanently remove a job skill from the
 * system. The targeted skill is identified by its unique ID. This is a hard
 * delete: the record is fully removed and cannot be recovered. Attempts to
 * remove a skill in active use (referenced by job postings or applications) may
 * fail with a clearly described error.
 *
 * The operation is restricted to system administrators, reflecting the
 * significant impact of removing skills on job requirements, analytics, and
 * application evaluation. A successful deletion is also audited for compliance.
 * The "deleted_at" column is set if using soft delete, but in the API context
 * this endpoint executes a full removal from the data store.
 *
 * @param props.connection
 * @param props.jobSkillId Unique identifier of the job skill to be deleted
 * @path /atsRecruitment/systemAdmin/jobSkills/:jobSkillId
 * @accessor api.functional.atsRecruitment.systemAdmin.jobSkills.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the job skill to be deleted */
    jobSkillId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/systemAdmin/jobSkills/:jobSkillId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/systemAdmin/jobSkills/${encodeURIComponent(props.jobSkillId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("jobSkillId")(() => typia.assert(props.jobSkillId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new job skill (ats_recruitment_job_skills) for job posting and
 * talent matching.
 *
 * This endpoint enables authorized users (HR recruiters or admins) to register
 * a new job skill in the system, such as programming languages, libraries,
 * frameworks, or other technical competencies relevant for recruitment.
 *
 * Security considerations: Only HR recruiters or system administrators should
 * be able to create new job skills, as these influence applicant evaluation and
 * job posting requirements. Creation events should be logged for future
 * auditability.
 *
 * Skill names must be globally unique within the system; the endpoint should
 * perform validation to prevent duplicates. The request body should follow the
 * IAtsRecruitmentJobSkill.ICreate type.
 *
 * Upon success, the response returns the full job skill entity including id,
 * name, description, is_active flag, and timestamp fields as defined in the
 * ats_recruitment_job_skills table.
 *
 * @param props.connection
 * @param props.body New job skill information to register in the system.
 * @path /atsRecruitment/systemAdmin/jobSkills
 * @accessor api.functional.atsRecruitment.systemAdmin.jobSkills.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New job skill information to register in the system. */
    body: IAtsRecruitmentJobSkill.ICreate;
  };
  export type Body = IAtsRecruitmentJobSkill.ICreate;
  export type Response = IAtsRecruitmentJobSkill;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/systemAdmin/jobSkills",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobSkills";
  export const random = (): IAtsRecruitmentJobSkill =>
    typia.random<IAtsRecruitmentJobSkill>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve list of job skills (ats_recruitment_job_skills) with
 * filtering, sorting, and pagination.
 *
 * Enables authorized users to perform advanced search and listing of job skills
 * defined in the ATS platform. Filtering options include name (partial match),
 * is_active status, and description keywords. Results are returned in a
 * paginated format, supporting customizable page size and sort order.
 *
 * This API is used by system administrators and HR to maintain a clean skills
 * dictionary, identify deprecated or missing skills, and to summarize available
 * technologies for job posting creation or analytics. Rate limiting and
 * authorization controls apply to prevent unapproved access or data abuse.
 * Responses use a summary DTO for display lists, and may include metadata such
 * as total count.
 *
 * Attempting to query with invalid filters or sort parameters returns user
 * guidance in the error payload. All returned skills reflect the current active
 * status and are unique by name.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for job skills
 *   listing
 * @path /atsRecruitment/systemAdmin/jobSkills
 * @accessor api.functional.atsRecruitment.systemAdmin.jobSkills.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination criteria for job skills listing */
    body: IAtsRecruitmentJobSkill.IRequest;
  };
  export type Body = IAtsRecruitmentJobSkill.IRequest;
  export type Response = IPageIAtsRecruitmentJobSkill.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/atsRecruitment/systemAdmin/jobSkills",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/systemAdmin/jobSkills";
  export const random = (): IPageIAtsRecruitmentJobSkill.ISummary =>
    typia.random<IPageIAtsRecruitmentJobSkill.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
