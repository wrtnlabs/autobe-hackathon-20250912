import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplication } from "../../../../structures/IAtsRecruitmentApplication";

/**
 * Create a new job application record in ats_recruitment_applications
 * (applicant role).
 *
 * This operation allows a job applicant user to submit a new application for an
 * open job posting. All required data—including the applicant's identification
 * (must be authenticated), target job posting, and a resume reference—must be
 * provided as per the AtsRecruitmentApplication.ICreate DTO. The operation
 * prevents duplicate applications for the same posting (enforced via the unique
 * [applicant_id, job_posting_id] constraint in Prisma) and verifies that the
 * posting is currently open to applications.
 *
 * Upon successful submission, the application enters an initial state (e.g.,
 * 'submitted') and timestamps for submission and state tracking are
 * automatically set. The full application object, including all core fields and
 * relationships, is returned as confirmation. Business validation ensures the
 * application window is still open, and all relevant applicant and posting
 * access checks are enforced. Any attempt to apply outside of the permitted
 * window, or duplicate applications, result in business logic errors as per
 * project rules.
 *
 * Audit trails and event notifications are triggered on successful application
 * creation, for use by HR, compliance, and system monitoring.
 *
 * @param props.connection
 * @param props.body Application data with target job posting, applicant
 *   identification, and resume reference.
 * @path /atsRecruitment/applicant/applications
 * @accessor api.functional.atsRecruitment.applicant.applications.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Application data with target job posting, applicant identification,
     * and resume reference.
     */
    body: IAtsRecruitmentApplication.ICreate;
  };
  export type Body = IAtsRecruitmentApplication.ICreate;
  export type Response = IAtsRecruitmentApplication;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/applicant/applications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/applicant/applications";
  export const random = (): IAtsRecruitmentApplication =>
    typia.random<IAtsRecruitmentApplication>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
