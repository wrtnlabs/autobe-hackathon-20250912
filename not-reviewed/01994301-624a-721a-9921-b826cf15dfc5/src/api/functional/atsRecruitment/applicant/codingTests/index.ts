import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentCodingTest } from "../../../../structures/IAtsRecruitmentCodingTest";
export * as submissions from "./submissions/index";

/**
 * Retrieve detailed information about a specific coding test assignment in ATS.
 *
 * Returns all details for a specific coding test record from
 * ats_recruitment_coding_tests, referenced by codingTestId. This includes
 * scheduling, delivery status, applicant and HR references, external provider
 * linkage, expiration dates, and all current state and tracking fields. Used by
 * HR and tech reviewers to monitor assignment progress and investigate
 * applicant issues.
 *
 * Authorization ensures HR can only see assignments for their postings, tech
 * reviewers see only their assignments, system admins have full access, and
 * applicants can view their own assignments. Sensitive provider integration
 * details may be masked except for system admins.
 *
 * Related operations include indexing (list view), and submission/feedback
 * tracking endpoints. Error handling surfaces not found, access violation, or
 * data corruption cases specifically.
 *
 * @param props.connection
 * @param props.codingTestId Unique identifier for the coding test assignment to
 *   be retrieved
 * @path /atsRecruitment/applicant/codingTests/:codingTestId
 * @accessor api.functional.atsRecruitment.applicant.codingTests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the coding test assignment to be retrieved */
    codingTestId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentCodingTest;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/applicant/codingTests/:codingTestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/applicant/codingTests/${encodeURIComponent(props.codingTestId ?? "null")}`;
  export const random = (): IAtsRecruitmentCodingTest =>
    typia.random<IAtsRecruitmentCodingTest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codingTestId")(() => typia.assert(props.codingTestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
