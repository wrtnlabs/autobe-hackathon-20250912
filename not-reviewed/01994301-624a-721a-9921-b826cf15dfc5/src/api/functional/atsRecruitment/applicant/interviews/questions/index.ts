import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentInterviewQuestion } from "../../../../../structures/IAtsRecruitmentInterviewQuestion";

/**
 * Retrieve a specific interview question for a given interview from
 * ats_recruitment_interview_questions.
 *
 * Retrieve a specific interview question assigned to a particular interview.
 * This operation is used by HR recruiters, tech reviewers, or an applicant
 * participant (when permitted) to access the detailed content and properties of
 * an interview question as configured for a scheduled or historical interview
 * in the recruitment process.
 *
 * The endpoint validates both the interviewId and questionId path parameters,
 * ensuring correct association (questionId must belong to interviewId). Content
 * includes question order, type (e.g., behavioral, technical, coding), actual
 * question text, and template/manual status. Role-based authorization is
 * enforced ( only hrRecruiter and techReviewer can access any interview's
 * questions, while applicants may only view their assigned interview's
 * questions, subject to further security policies).
 *
 * The implementation must ensure secure handling, as some questions may contain
 * sensitive assessment information or AI-generated content. Related operations
 * include listing all questions for an interview, creating additional questions
 * (for HR/techReviewer only), and updating interview question content (where
 * permitted).
 *
 * @param props.connection
 * @param props.interviewId UUID of the interview containing the question.
 * @param props.questionId UUID of the interview question to retrieve.
 * @path /atsRecruitment/applicant/interviews/:interviewId/questions/:questionId
 * @accessor api.functional.atsRecruitment.applicant.interviews.questions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the interview containing the question. */
    interviewId: string & tags.Format<"uuid">;

    /** UUID of the interview question to retrieve. */
    questionId: string & tags.Format<"uuid">;
  };
  export type Response = IAtsRecruitmentInterviewQuestion;

  export const METADATA = {
    method: "GET",
    path: "/atsRecruitment/applicant/interviews/:interviewId/questions/:questionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/applicant/interviews/${encodeURIComponent(props.interviewId ?? "null")}/questions/${encodeURIComponent(props.questionId ?? "null")}`;
  export const random = (): IAtsRecruitmentInterviewQuestion =>
    typia.random<IAtsRecruitmentInterviewQuestion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("interviewId")(() => typia.assert(props.interviewId));
      assert.param("questionId")(() => typia.assert(props.questionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
