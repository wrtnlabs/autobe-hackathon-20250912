import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Deactivate (soft-delete) an applicant account in the
 * ats_recruitment_applicants table.
 *
 * Deactivates an applicant account by setting the deleted_at timestamp in the
 * ats_recruitment_applicants table. This approach follows GDPR and security
 * standards by ensuring the applicant's data is not hard-deleted but is instead
 * marked for deletion and excluded from normal business logic, while audit log
 * and compliance requirements are maintained.
 *
 * Only the applicant themselves can request deletion of their account, or a
 * system administrator may perform this for legal or compliance reasons. The
 * applicant's access to the platform is fully revoked after this operation, and
 * login attempts are blocked. Related data in applications, resumes, and audit
 * logs remain for compliance but with reduced PII visibility as required.
 *
 * All actions are recorded in audit trails. Attempts to delete an applicant who
 * is already marked as deleted result in a no-op or idempotent response. This
 * operation is crucial for maintaining data subject rights under privacy law
 * and enabling secure account lifecycle management.
 *
 * @param props.connection
 * @param props.applicantId Unique identifier of the applicant account to be
 *   deactivated (UUID).
 * @path /atsRecruitment/applicant/applicants/:applicantId
 * @accessor api.functional.atsRecruitment.applicant.applicants.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the applicant account to be deactivated (UUID). */
    applicantId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/applicant/applicants/:applicantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/applicant/applicants/${encodeURIComponent(props.applicantId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("applicantId")(() => typia.assert(props.applicantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
