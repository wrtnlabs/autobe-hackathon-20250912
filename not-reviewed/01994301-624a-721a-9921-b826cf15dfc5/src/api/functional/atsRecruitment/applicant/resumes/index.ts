import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentResume } from "../../../../structures/IAtsRecruitmentResume";
export * as files from "./files/index";
export * as aiAnalyses from "./aiAnalyses/index";

/**
 * Register (create) a new applicant resume with parsed and meta-attributes
 * (ats_recruitment_resumes table).
 *
 * Register a new applicant resume, providing both basic meta-information
 * (title, owner/applicant reference) and extracted/parsed structured fields
 * such as name, email, phone, skills JSON, education summary, experience
 * summary, and file reference (if available). The system validates that the
 * applicant is authorized to submit a resume and that required fields are
 * complete, robustly storing both the structured fields and links to file
 * storage as necessary.
 *
 * This operation is restricted to authenticated applicants, allowing them to
 * register their own resume for future job applications or matching.
 * De-duplication and replacement rules apply: an applicant cannot register
 * multiple resumes with the same title, and re-uploads replace the existing
 * record. Sensitive parsed data is handled according to privacy and compliance
 * policies.
 *
 * @param props.connection
 * @param props.body Structured data for the new resume, including parsed fields
 *   and file references.
 * @path /atsRecruitment/applicant/resumes
 * @accessor api.functional.atsRecruitment.applicant.resumes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Structured data for the new resume, including parsed fields and file
     * references.
     */
    body: IAtsRecruitmentResume.ICreate;
  };
  export type Body = IAtsRecruitmentResume.ICreate;
  export type Response = IAtsRecruitmentResume;

  export const METADATA = {
    method: "POST",
    path: "/atsRecruitment/applicant/resumes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/atsRecruitment/applicant/resumes";
  export const random = (): IAtsRecruitmentResume =>
    typia.random<IAtsRecruitmentResume>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing applicant resume with revised structured content in
 * ats_recruitment_resumes table.
 *
 * This API endpoint enables an authenticated applicant to update their own
 * resume's structured information, including contact, education, experience,
 * and skills records. The endpoint corresponds to the ats_recruitment_resumes
 * table. Applicants may need to update information if initial parsing was
 * incomplete, or if their experience or skills have changed.
 *
 * Only the applicant who owns the resume record may perform updates; others
 * will be denied. All updates are tracked via updated_at timestamps and subject
 * to audit trail logic. The backend checks that the resume is not soft-deleted.
 * Attempts to update unknown or deleted resumes result in clear error messages,
 * following ATS system error and data recovery policies, and business
 * validation ensures all mandatory fields are present.
 *
 * For critical data protection, sensitive fields such as parsed_email,
 * parsed_mobile, and skills_json must be validated and sanitized before update,
 * ensuring privacy compliance and structured data quality. Soft-delete and
 * audit rules defined in the Prisma schema are always respected.
 *
 * @param props.connection
 * @param props.resumeId Unique identifier of the resume to update
 * @param props.body Structured content and updates for the target resume
 * @path /atsRecruitment/applicant/resumes/:resumeId
 * @accessor api.functional.atsRecruitment.applicant.resumes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the resume to update */
    resumeId: string & tags.Format<"uuid">;

    /** Structured content and updates for the target resume */
    body: IAtsRecruitmentResume.IUpdate;
  };
  export type Body = IAtsRecruitmentResume.IUpdate;
  export type Response = IAtsRecruitmentResume;

  export const METADATA = {
    method: "PUT",
    path: "/atsRecruitment/applicant/resumes/:resumeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/atsRecruitment/applicant/resumes/${encodeURIComponent(props.resumeId ?? "null")}`;
  export const random = (): IAtsRecruitmentResume =>
    typia.random<IAtsRecruitmentResume>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resumeId")(() => typia.assert(props.resumeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an applicant's resume via deleted_at in ats_recruitment_resumes
 * table.
 *
 * This API endpoint allows an authenticated applicant to perform a
 * soft-deletion of their own resume from the system. The deletion action sets
 * the deleted_at field, as defined in the ats_recruitment_resumes table, rather
 * than removing the record from the database.
 *
 * Only the applicant who owns the record can perform this operation. If the
 * resume has already been deleted or does not exist, an appropriate error is
 * returned. All deletions are tracked for compliance purposes; attempted access
 * after deletion will result in a not found or forbidden error, as dictated by
 * system security and privacy rules.
 *
 * This operation supports post-deletion recovery (if allowed by policy) and is
 * compatible with audit requirements for actions on sensitive user documents
 * and personal data.
 *
 * @param props.connection
 * @param props.resumeId Unique identifier of the resume to delete (soft)
 * @path /atsRecruitment/applicant/resumes/:resumeId
 * @accessor api.functional.atsRecruitment.applicant.resumes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the resume to delete (soft) */
    resumeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/atsRecruitment/applicant/resumes/:resumeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/atsRecruitment/applicant/resumes/${encodeURIComponent(props.resumeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("resumeId")(() => typia.assert(props.resumeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
