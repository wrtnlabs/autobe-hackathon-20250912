import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentApplicant } from "../../../structures/IAtsRecruitmentApplicant";

/**
 * Register new applicant account (ats_recruitment_applicants) and issue JWT
 * tokens.
 *
 * This operation allows new applicants to register for the ATS recruitment
 * system. Upon providing a unique email address and valid password (as stored
 * via password_hash), the account is created in the ats_recruitment_applicants
 * table, with is_active set to true and initial applicant details saved (name,
 * phone, audit fields). The schema enforces unique email addresses per
 * applicant; attempts to register with duplicate emails result in validation
 * error. Password is stored exclusively as a secure hash (password_hash)—never
 * in plaintext—per security best practices and Prisma schema documentation. The
 * created record is immediately available for login and supports soft deletion
 * for GDPR or voluntary account removal (deleted_at is null upon registration;
 * if later set, login is blocked). The join endpoint also issues initial JWT
 * access and refresh tokens, corresponding to the new user and returned as
 * IAtsRecruitmentApplicant.IAuthorized in the response. Security considerations
 * include mandatory HTTPS transport, password complexity enforcement at
 * application level, and rejection of registration for existing or deactivated
 * accounts. If registration succeeds, users can immediately proceed to login
 * workflow. Related APIs include /auth/applicant/login (for credential login)
 * and /auth/applicant/refresh (for token renewal). Errors are handled with
 * structured messages, and all attempts (successful or failed) are logged in
 * audit trails referencing applicant ID.
 *
 * @param props.connection
 * @param props.body Applicant registration payload containing email, password,
 *   name, and phone (optional).
 * @setHeader token.access Authorization
 *
 * @path /auth/applicant/join
 * @accessor api.functional.auth.applicant.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Applicant registration payload containing email, password, name, and
     * phone (optional).
     */
    body: IAtsRecruitmentApplicant.IJoin;
  };
  export type Body = IAtsRecruitmentApplicant.IJoin;
  export type Response = IAtsRecruitmentApplicant.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/applicant/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/applicant/join";
  export const random = (): IAtsRecruitmentApplicant.IAuthorized =>
    typia.random<IAtsRecruitmentApplicant.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Login for applicant via email/password, issuing JWT access/refresh tokens
 * (ats_recruitment_applicants).
 *
 * This operation authenticates an applicant account via email and password,
 * verifying credentials against the ats_recruitment_applicants table. The
 * schema ensures that email is unique and password_hash is used for
 * comparison—raw passwords are never stored. Only accounts with is_active=true
 * and deleted_at=null can authenticate; attempts with deactivated accounts or
 * deleted profiles are denied. Upon successful login, the API issues new JWT
 * access and refresh tokens representing the logged-in applicant; tokens
 * include user id, role, and permissions per business policy and are returned
 * as IAtsRecruitmentApplicant.IAuthorized. Credential mismatches, soft-deleted,
 * or inactive accounts result in login failure with clear error messages. All
 * attempts are logged via linked actor ID in audit tables, referencing login
 * attempt time, origin IP, and user agent. Security best practices require
 * enforcing password complexity, rate limiting, and login history tracking.
 * This operation is intended for the applicant role only; separate login
 * endpoints exist for HR, reviewers, and admins. Upon success, users gain
 * access to ATS applicant privileges (resume upload, application, test
 * participation, etc.). Related: /auth/applicant/join (registration),
 * /auth/applicant/refresh (token renewal), and audit tools for login tracking.
 *
 * @param props.connection
 * @param props.body Applicant login credentials (email, password).
 * @setHeader token.access Authorization
 *
 * @path /auth/applicant/login
 * @accessor api.functional.auth.applicant.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Applicant login credentials (email, password). */
    body: IAtsRecruitmentApplicant.ILogin;
  };
  export type Body = IAtsRecruitmentApplicant.ILogin;
  export type Response = IAtsRecruitmentApplicant.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/applicant/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/applicant/login";
  export const random = (): IAtsRecruitmentApplicant.IAuthorized =>
    typia.random<IAtsRecruitmentApplicant.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for applicant account (ats_recruitment_applicants) with a
 * valid refresh token.
 *
 * This operation enables applicant users to obtain a new JWT access token using
 * a valid refresh token, referencing their account in the
 * ats_recruitment_applicants table. Only accounts with is_active=true and
 * deleted_at=null can refresh tokens; attempts from deactivated or deleted
 * users are denied. The operation checks that the refresh token is valid and
 * not expired, and then issues a new pair of JWT access and refresh tokens,
 * encoded with the applicant's id and role. If the refresh succeeds, the
 * response is an IAtsRecruitmentApplicant.IAuthorized object with the new
 * tokens and applicant profile. All refresh attempts—successful or failed—are
 * audit-logged with applicant ID, IP address, and user agent (corresponding
 * schema tables: ats_recruitment_actor_login_histories). This endpoint is
 * intended solely for the applicant role and cannot be used for HR, reviewer,
 * or admin authentication. Related endpoints: /auth/applicant/login (for
 * credential login), /auth/applicant/join (for registration). Security
 * considerations include rate limiting, session expiration policies, and token
 * signature validation aligned with schema and audit policy.
 *
 * @param props.connection
 * @param props.body Refresh token request by applicant (token-based).
 * @setHeader token.access Authorization
 *
 * @path /auth/applicant/refresh
 * @accessor api.functional.auth.applicant.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request by applicant (token-based). */
    body: IAtsRecruitmentApplicant.IRefresh;
  };
  export type Body = IAtsRecruitmentApplicant.IRefresh;
  export type Response = IAtsRecruitmentApplicant.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/applicant/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/applicant/refresh";
  export const random = (): IAtsRecruitmentApplicant.IAuthorized =>
    typia.random<IAtsRecruitmentApplicant.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
