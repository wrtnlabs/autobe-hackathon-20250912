import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAtsRecruitmentTechReviewer } from "../../../structures/IAtsRecruitmentTechReviewer";

/**
 * Register (join) a new technical reviewer user
 * (ats_recruitment_techreviewers).
 *
 * This operation enables registration (join) of a new technical reviewer in the
 * ATS system, utilizing the schema fields from the
 * ats_recruitment_techreviewers table. It is required for onboarding tech
 * reviewers responsible for coding test reviews, skill assessments, and
 * technical interviews.
 *
 * Security checks are built-in to ensure email uniqueness (no account
 * registered with same email can exist). The operation requires an email and
 * password_hash (securely hashed), along with the name field and optionally the
 * specialization for assignment matching. On successful join, system issues JWT
 * tokens and authorizes the user.
 *
 * The registration process is auditable using the audit trail mechanisms
 * described for the platform; every registration attempt is logged for
 * compliance. Additional fields from the schema, such as is_active and
 * created_at, are set by the business logic, not by the registrant.
 *
 * This function is foundational for all member-kind users in technical reviewer
 * role and is a prerequisite for subsequent login or token refresh flows.
 * Registration is public (no credentials required) and available only for
 * unregistered emails.
 *
 * Related operations include login and refresh for accessing or maintaining
 * authorized sessions. Deletion/disable is performed via separate admin-only
 * actions, not by this endpoint.
 *
 * @param props.connection
 * @param props.body Tech reviewer account creation fields (email,
 *   password_hash, name, optional specialization).
 * @setHeader token.access Authorization
 *
 * @path /auth/techReviewer/join
 * @accessor api.functional.auth.techReviewer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Tech reviewer account creation fields (email, password_hash, name,
     * optional specialization).
     */
    body: IAtsRecruitmentTechReviewer.ICreate;
  };
  export type Body = IAtsRecruitmentTechReviewer.ICreate;
  export type Response = IAtsRecruitmentTechReviewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/techReviewer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/techReviewer/join";
  export const random = (): IAtsRecruitmentTechReviewer.IAuthorized =>
    typia.random<IAtsRecruitmentTechReviewer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate (login) technical reviewer by email and password
 * (ats_recruitment_techreviewers).
 *
 * Handles authentication (login) of technical reviewer accounts using unique
 * email and password, referencing fields email and password_hash in
 * ats_recruitment_techreviewers. Only active, non-deleted accounts are eligible
 * for login.
 *
 * The request body includes email and password, triggering a password_hash
 * check against the stored value. Successful logins generate JWT access/refesh
 * tokens and record login attempts in ats_recruitment_actor_login_histories and
 * audit logs as per the schema. Unsuccessful logins due to wrong credentials,
 * inactive, or soft deleted accounts respond with error codes per platform
 * security policy.
 *
 * All tokens include user id, role, and permissions, following the platform's
 * JWT spec. The operation is accessible publicly (unauthenticated) and is
 * essential for all member-kind technical reviewer users for system access
 * after registration.
 *
 * This endpoint is paired with registration (join) and token refresh (refresh)
 * endpoints to support the technical reviewer authentication lifecycle, with
 * credential updating handled separately.
 *
 * @param props.connection
 * @param props.body Tech reviewer login credentials (email, password).
 * @setHeader token.access Authorization
 *
 * @path /auth/techReviewer/login
 * @accessor api.functional.auth.techReviewer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Tech reviewer login credentials (email, password). */
    body: IAtsRecruitmentTechReviewer.ILogin;
  };
  export type Body = IAtsRecruitmentTechReviewer.ILogin;
  export type Response = IAtsRecruitmentTechReviewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/techReviewer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/techReviewer/login";
  export const random = (): IAtsRecruitmentTechReviewer.IAuthorized =>
    typia.random<IAtsRecruitmentTechReviewer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access/refresh tokens for technical reviewer
 * (ats_recruitment_techreviewers).
 *
 * Renews JWT access tokens for authenticated technical reviewers using a valid
 * refresh token, as required for long-term session integrity in the ATS system.
 * Implementation refers to the ats_recruitment_techreviewers table for
 * active/inactive status checks and token validation. No user data fields are
 * changed; only tokens are refreshed.
 *
 * This endpoint is invoked by member-kind technical reviewer clients that
 * present a valid refresh token (typically via cookie or header, per JWT
 * platform requirements). If the refresh is valid and the account is
 * active/non-deleted, new JWT access/refresh tokens are issued and audit trails
 * updated for compliance.
 *
 * Access requires a valid refresh token and is managed separately from login
 * and registration; no credentials are passed in the body. Token refresh
 * maintains session continuity for reviewers who already authenticated
 * successfully.
 *
 * If the refresh token is missing, expired, or invalid, the endpoint returns
 * appropriate error codes. Related endpoints include join (account creation)
 * and login, and token refresh records are included in
 * ats_recruitment_actor_login_histories.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/techReviewer/refresh
 * @accessor api.functional.auth.techReviewer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Response = IAtsRecruitmentTechReviewer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/techReviewer/refresh",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/techReviewer/refresh";
  export const random = (): IAtsRecruitmentTechReviewer.IAuthorized =>
    typia.random<IAtsRecruitmentTechReviewer.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
