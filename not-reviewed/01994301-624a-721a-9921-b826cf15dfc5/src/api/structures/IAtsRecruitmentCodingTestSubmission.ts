import { tags } from "typia";

/**
 * A coding test submission record, representing one candidate solution file or
 * answer. Linked to coding test, applicant, and business application context.
 * All main state fields and review trace included for compliance and
 * operational reporting. Mutable by system based on workflow edits and
 * compliance policy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentCodingTestSubmission = {
  /** Unique identifier for this coding test submission. Primary key. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the coding test instance (ats_recruitment_coding_tests.id)
   * for this submission.
   */
  ats_recruitment_coding_test_id: string & tags.Format<"uuid">;

  /** Reference to the applicant who submitted (ats_recruitment_applicants.id). */
  ats_recruitment_applicant_id: string & tags.Format<"uuid">;

  /**
   * Reference to parent application for the context of this test submission
   * (ats_recruitment_applications.id).
   */
  ats_recruitment_application_id: string & tags.Format<"uuid">;

  /** Timestamp when this solution was submitted. ISO8601 format. */
  submitted_at: string & tags.Format<"date-time">;

  /**
   * Optional. URL in object storage for submitted code/file answer. Used for
   * download/scoring; null if not present.
   */
  answer_file_url?: string | null | undefined;

  /**
   * Optional. Inline code/text answer provided as direct input. Used for
   * review/download if no file given.
   */
  answer_text?: string | null | undefined;

  /**
   * Current validity state of the submission. Possible values: 'valid',
   * 'invalid', 'timeout', 'canceled', 'pending'.
   */
  status: string;

  /**
   * Optional. Timestamp if created/received via external service webhook/API.
   * ISO8601.
   */
  received_external_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Current review workflow state for this submission (e.g., 'pending',
   * 'needs_review', 'reviewed', 'flagged').
   */
  review_status: string;

  /**
   * Timestamp when technical reviewer review was completed, if applicable.
   * ISO8601, null if unreviewed.
   */
  reviewed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Text summary of the reviewer's comment if available. Nullable; used in
   * report/audit/summary views.
   */
  review_comment_summary?: string | null | undefined;

  /** When the submission record was created (audit field). ISO8601. */
  created_at: string & tags.Format<"date-time">;

  /** Last modification time for the submission record. ISO8601. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp for this submission. Null if not deleted. ISO8601. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentCodingTestSubmission {
  /**
   * Query, filter, and pagination object for listing or searching coding test
   * submissions on a given coding test. All fields optional for flexible
   * search UX. See schema for allowed enum values and business logic.
   */
  export type IRequest = {
    /**
     * (Optional) Filter by submission status value. System values: 'valid',
     * 'invalid', 'timeout', 'canceled', 'pending'.
     */
    status?: string | undefined;

    /**
     * (Optional) Filter by review status. E.g.: 'pending', 'needs_review',
     * 'reviewed', 'flagged'.
     */
    review_status?: string | undefined;

    /**
     * (Optional) Search filter for submissions with this summary present in
     * the review_comment_summary field.
     */
    review_comment_summary?: string | undefined;

    /**
     * (Optional) Retrieve submissions with submitted_at at or after this
     * ISO8601 timestamp.
     */
    submitted_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Retrieve submissions with submitted_at before or equal to
     * this ISO8601 timestamp.
     */
    submitted_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Page number for result pagination. Default: 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** (Optional) Number of records per page. Default: 20. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * (Optional) Field name to sort by. E.g., 'submitted_at',
     * 'reviewed_at'.
     */
    sort_field?: string | undefined;

    /** (Optional) Sort direction: 'asc' or 'desc'. Default: 'desc'. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Create request for a coding test submission. This type is used by
   * applicants when submitting an answer to a coding test (file or text) for
   * a given coding test and application.
   *
   * The record must reference the coding test, parent application, and
   * applicant, and include either an answer_text (code written inline) or
   * answer_file_url (file blob uploaded, e.g. .zip, .py). One of these is
   * required for a valid submission. The backend will enforce uniqueness and
   * check that the user is permitted to submit. Refer to the Prisma model for
   * column constraints.
   *
   * Never include fields for reviewer or system-only metadata: only
   * applicant-controlled fields are accepted here.
   */
  export type ICreate = {
    /**
     * Unique identifier of the coding test being submitted. Must be a valid
     * UUID referencing the coding test entity.
     */
    ats_recruitment_coding_test_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the applicant making the submission. Must align
     * with authentication context. UUID.
     */
    ats_recruitment_applicant_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the application this submission is attached to.
     * Must refer to the application entity and be validated for submission
     * legitimacy.
     */
    ats_recruitment_application_id: string & tags.Format<"uuid">;

    /**
     * Permanent object storage URI of the uploaded file (e.g. presigned
     * blob URI for answer files). Only populate if the answer is submitted
     * as a file rather than inline answer_text. Nullable.
     */
    answer_file_url?: string | null | undefined;

    /**
     * Text code/answer submitted inline (e.g. written directly into a
     * coding editor). Nullable, present only if using this method.
     */
    answer_text?: string | null | undefined;
  };

  /**
   * Update request for a coding test submission. Used to modify a
   * submission's answer file, text answer, status, or reviewer fields as
   * permitted by the workflow. Only populated fields are updated; other
   * properties retain current values.
   *
   * Reviewers set review_status, status may advance due to business rules.
   * System-only/protected fields must not be set by clients. Refer to the ATS
   * submission workflow and business rules for allowed field transitions.
   */
  export type IUpdate = {
    /**
     * Permanent object storage URI of a newly uploaded file, if applicable.
     * May be updated when replacing/correcting an answer file. Nullable.
     */
    answer_file_url?: string | null | undefined;

    /**
     * Text answer/code for inline submission, only if permitted for
     * modification by applicant or reviewer. Nullable.
     */
    answer_text?: string | null | undefined;

    /**
     * Updated status for the submission (e.g. 'valid', 'invalid',
     * 'timeout', etc.). Must conform to allowed business statuses as per
     * ATS requirements.
     */
    status?: string | undefined;

    /**
     * Updated reviewer pipeline status (examples: 'pending',
     * 'needs_review', 'reviewed'). Only settable by reviewer or system, not
     * applicant.
     */
    review_status?: string | undefined;

    /**
     * (Optional, nullable) Summary of the reviewer comments relating to
     * this submission. Nullable.
     */
    review_comment_summary?: string | null | undefined;
  };
}
