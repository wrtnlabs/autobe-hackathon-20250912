import { tags } from "typia";

/**
 * Business entity for notification templates
 * (ats_recruitment_notification_templates). Includes all configuration, status,
 * and meta fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentNotificationTemplate = {
  /**
   * Unique identifier of the notification template record in
   * ats_recruitment_notification_templates.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Globally unique template code for business logic mapping and reference
   * (e.g., 'INTERVIEW_SCHEDULED', 'APPLICATION_REJECTED').
   */
  template_code: string;

  /**
   * Notification channel for delivery (e.g., 'email', 'sms', 'app_push',
   * 'webhook').
   */
  channel: string;

  /**
   * Admin-facing title for the template, used in management UIs, not sent to
   * recipients.
   */
  title: string;

  /**
   * (Nullable) Subject line for email/notification; applies only to channels
   * supporting subject. Null for others.
   */
  subject?: string | null | undefined;

  /**
   * Template body content (text, markup, or format string). May include
   * placeholders for merge fields.
   */
  body: string;

  /**
   * Whether the template is active/enabled (true) or disabled/deprecated
   * (false).
   */
  is_active: boolean;

  /** Creation timestamp for the template record. */
  created_at: string & tags.Format<"date-time">;

  /** Last modified/update timestamp for the template record. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (null if active). Populated if template was deleted
   * but not hard removed.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentNotificationTemplate {
  /**
   * Notification template search/filter/pagination request
   * (ats_recruitment_notification_templates). All fields optional.
   */
  export type IRequest = {
    /**
     * (Optional) Search or filter by template business code. Partial or
     * full match accepted.
     */
    template_code?: string | undefined;

    /**
     * (Optional) Notification channel to filter (e.g., 'email', 'sms',
     * 'app_push', 'webhook').
     */
    channel?: string | undefined;

    /**
     * (Optional) Search or filter by template title (internal reference
     * name).
     */
    title?: string | undefined;

    /**
     * (Optional) Search or filter by subject line (email templates and some
     * channels).
     */
    subject?: string | undefined;

    /** (Optional) Full-text search in template body (text or markup). */
    body?: string | undefined;

    /**
     * (Optional) Filter for active/inactive states; true: enabled, false:
     * disabled.
     */
    is_active?: boolean | undefined;

    /** (Optional) Page number for pagination (default: 1). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** (Optional) Maximum page size for pagination (default: 15/20). */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) Sorting field and direction. E.g., 'created_at:desc',
     * 'title:asc'. Has no effect if not specified.
     */
    sort?: string | undefined;
  };

  /**
   * Create notification template object for ATS system-wide event messaging,
   * based on ats_recruitment_notification_templates schema. All required
   * fields must be present.
   */
  export type ICreate = {
    /**
     * Unique business key for this notification template (e.g.,
     * INTERVIEW_SCHEDULED, APPLICATION_RESULT_EMAIL). Determines
     * event/template matching. References
     * ats_recruitment_notification_templates.template_code. Required.
     */
    template_code: string;

    /**
     * Delivery channel for this template such as 'email', 'sms',
     * 'app_push', 'webhook'. References
     * ats_recruitment_notification_templates.channel. Required.
     */
    channel: string;

    /**
     * Title for the template, used in admin UIs. Not shown to notification
     * recipients. References ats_recruitment_notification_templates.title.
     * Required.
     */
    title: string;

    /**
     * Subject line for emails/channels supporting subject, or null for
     * others. Optional in template. References
     * ats_recruitment_notification_templates.subject.
     */
    subject?: string | null | undefined;

    /**
     * Message body template, used for notification rendering. May use
     * placeholders (e.g., {{applicantName}}). References
     * ats_recruitment_notification_templates.body. Required.
     */
    body: string;

    /**
     * Indicates if this template is available for notification use.
     * References ats_recruitment_notification_templates.is_active.
     * Required.
     */
    is_active: boolean;
  };

  /**
   * Update/patch for notification template entity. All fields are optional,
   * only provided fields are updated.
   */
  export type IUpdate = {
    /** Updated business key, must remain unique within channel if changed. */
    template_code?: string | undefined;

    /** Updated delivery channel (e.g., email, sms, app_push) if changed. */
    channel?: string | undefined;

    /** Updated template admin title if changed. */
    title?: string | undefined;

    /** Update email/notification subject. Set null to remove subject. */
    subject?: string | null | undefined;

    /** Update the template message body content. */
    body?: string | undefined;

    /** Indicate if template becomes active/inactive. */
    is_active?: boolean | undefined;
  };

  /**
   * Summary information for notification template records. For use in
   * paginated listings and administrative template browsing.
   */
  export type ISummary = {
    /** Unique identifier for the notification template. */
    id: string & tags.Format<"uuid">;

    /** The business key for this template. */
    template_code: string;

    /** Notification channel (e.g., email, sms, app_push). */
    channel: string;

    /** Template title for admin viewing. */
    title: string;

    /** Is this template active and available for new notifications? */
    is_active: boolean;
  };
}
