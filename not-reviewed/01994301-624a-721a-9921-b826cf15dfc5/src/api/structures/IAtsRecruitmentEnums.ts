import { tags } from "typia";

/**
 * Full enum entity as used in the ats_recruitment_enums table and API response
 * objects. Contains all admin/audit fields and business metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentEnums = {
  /**
   * Unique identifier (UUID) for this enum value, per
   * ats_recruitment_enums.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Grouping/namespace for this enum value (e.g., 'application_status',
   * 'employment_type', etc.).
   */
  enum_type: string;

  /**
   * Business code representing this value in its enum_type. Must be unique
   * per type.
   */
  enum_code: string;

  /** Display label for this code, shown in UIs and reports. */
  label: string;

  /**
   * Optional JSON string with business or display metadata, such as UI
   * colors, ordering, or custom attributes.
   */
  extended_data?: string | null | undefined;

  /**
   * Optional human-readable notes for this code, used for documentation or
   * admin screens.
   */
  description?: string | null | undefined;

  /** Timestamp for creation of the enum value (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp. Null if active; date-time if deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentEnums {
  /**
   * Request body schema for creating a new enum value in ATS platform. All
   * fields except extended_data and description are required.
   */
  export type ICreate = {
    /**
     * The type or namespace to which this enum value belongs. Must match an
     * agreed enum group (such as 'application_status', 'employment_type').
     * Required, non-null.
     */
    enum_type: string;

    /**
     * Unique code for this value within its enum_type (e.g., 'APPLIED',
     * 'EMAIL', 'ADMIN'). Required, non-null. Used by both API and system
     * logic.
     */
    enum_code: string;

    /**
     * The user-facing label string for this enum value, for display in UIs,
     * print, or notifications. Must be provided and should be
     * human-readable and localized as needed.
     */
    label: string;

    /**
     * Optional field holding structured JSON (as string) or any display
     * metadata to enrich the business representation for this enum value.
     * May contain color, icon, or order info.
     */
    extended_data?: string | null | undefined;

    /**
     * Optional field with documentation or business reference for this enum
     * code. Intended for platform admin documentation or business analyst
     * consumption.
     */
    description?: string | null | undefined;
  };

  /**
   * Update schema for modifying an existing enum value in ATS. Only label,
   * extended_data, and description can be updated; immutable fields such as
   * enum_type and enum_code are not changeable after creation.
   */
  export type IUpdate = {
    /**
     * Updated display label for the enum value. Should be localized and
     * user-facing.
     */
    label?: string | undefined;

    /**
     * Optional update to extended metadata, encoded as JSON string if
     * present. Allows storage of business, UI, or workflow metadata.
     */
    extended_data?: string | null | undefined;

    /**
     * An updated documentation string for this code, used for platform
     * maintenance or admin reference.
     */
    description?: string | null | undefined;
  };
}
