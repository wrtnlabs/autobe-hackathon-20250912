import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Applicant user account/profile as stored in ats_recruitment_applicants.
 * Excludes password_hash and authentication secret fields for security. Soft
 * deletion and activity state control lifecycle. Returned in profile (GET) and
 * index/result sets. Sensitive fields masked from response as appropriate.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentApplicant = {
  /** Applicant's unique identifier (primary key). */
  id: string & tags.Format<"uuid">;

  /**
   * Applicant's unique login/notification email. Must be business-usable and
   * non-shared.
   */
  email: string & tags.Format<"email">;

  /** Full name of the applicant (from resume or direct input). */
  name: string;

  /** Applicant's phone number for contact/notifications. Optional. */
  phone?: string | null | undefined;

  /** Indicates if the account is active (not suspended/inactive). */
  is_active: boolean;

  /** Timestamp when the applicant profile was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last profile update. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp (null if active); for GDPR/trace purposes. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentApplicant {
  /**
   * Registration payload for creating a new applicant account.
   *
   * This schema is used for incoming user registration requests for the ATS
   * platform. It enforces all required profile fields for new applicants,
   * including unique email, plaintext password (which will be hashed), the
   * applicant's name, and optionally a phone number for contact and
   * notifications. The password field is never returned in any response or
   * resource representation. Security and business logic ensure proper
   * account activation, uniqueness constraints, and audit trail for
   * compliance.
   *
   * This type directly maps to the ats_recruitment_applicants schema
   * specification and is foundational for onboarding new users.
   */
  export type IJoin = {
    /**
     * Applicant's email address for authentication and notification. Must
     * be unique within the system as enforced by business logic and schema.
     * This is a required field.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password for initial applicant registration. This field is
     * used for credential validation and is not persisted as-is; it is
     * always stored as a one-way hash. Passwords must meet system policy
     * for complexity and minimum length.
     */
    password: string & tags.Format<"password">;

    /**
     * Full name of the applicant, as entered on registration or parsed from
     * resume data. Used for identification, searching, and context in the
     * applicant's profile.
     */
    name: string;

    /**
     * Optional phone number of the applicant for contact or notification.
     * May be null if applicant chooses not to provide during registration.
     */
    phone?: string | null | undefined;
  };

  /**
   * Authorization response returned to the applicant after successful
   * registration, login, or token refresh.
   *
   * Contains applicant profile information and a token object (JWT and
   * refresh token) for use in subsequent authenticated actions. Never
   * includes password or hash. This type is compliant with the standardized
   * IAuthorized contract and is used for all authentication flows as per ATS
   * authentication specification.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the applicant account (UUID). Generated by the
     * database. Used for all relationships and authenticated operations
     * within the ATS system.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Applicant's primary authentication and notification email address.
     * This field is always unique as per business and schema constraints.
     */
    email: string & tags.Format<"email">;

    /** Full name of the applicant as stored in their registration profile. */
    name: string;

    /**
     * Optional phone number used for contact and notification. May be null
     * if not set by applicant.
     */
    phone?: string | null | undefined;

    /**
     * Indicates whether the applicant's account is currently active. True
     * for permitted to log in and use services, false if blocked/disabled.
     */
    is_active: boolean;

    /** Timestamp when the applicant profile was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last profile update. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp (null if active); for GDPR/trace purposes. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login request body for ATS applicant authentication.
   *
   * Includes email address and plaintext password as required properties to
   * initiate a login attempt. The email is checked for existence and activity
   * status; the password is verified against the securely stored hash.
   * Invalid or inactive accounts are rejected by business logic. The password
   * field is never returned in any response or resource body.
   */
  export type ILogin = {
    /**
     * Applicant's unique email address. Used as the authentication
     * credential for login. Must match an existing registered and active
     * applicant in the system (case-insensitive unique constraint).
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password for applicant authentication. Not persisted or
     * returned outside the login request. Backend will validate this
     * against the stored password_hash securely.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Token refresh operation schema for ATS applicant accounts.
   *
   * Request payload for renewing a JWT access token using a previously issued
   * refresh token. This schema supports the secure extension of authenticated
   * sessions without requiring password login, as per business and
   * authentication policy. Only a valid and unexpired refresh token is
   * accepted.
   */
  export type IRefresh = {
    /**
     * Valid refresh token previously issued to the applicant. Used to
     * request a new access/refresh token pair without re-entering
     * credentials. Must not be expired or revoked.
     */
    token: string;
  };

  /**
   * Search and filtering object for querying ats_recruitment_applicants for
   * HR/admin applicant overview. Allows advanced filters, text search, and
   * paginated browsing.
   */
  export type IRequest = {
    /** The requested page number for pagination. Optional. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of records per page. Optional, system max enforced. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Filter by applicant full name (partial match, case-insensitive). */
    name?: string | undefined;

    /**
     * Filter by applicant email address (exact match or partial, depending
     * on implementation).
     */
    email?: (string & tags.Format<"email">) | undefined;

    /** Filter by applicant phone number (partial match). */
    phone?: string | undefined;

    /** Show only active (true) or inactive (false) accounts. */
    is_active?: boolean | undefined;

    /** Find applicants created since this date/time (ISO8601). */
    created_since?: (string & tags.Format<"date-time">) | undefined;

    /** Find applicants created until this date/time (ISO8601). */
    created_until?: (string & tags.Format<"date-time">) | undefined;

    /** Field to sort by (e.g. created_at, name, email). */
    sort_by?: string | undefined;

    /** Sort direction: asc or desc. */
    sort_order?: "asc" | "desc" | undefined;

    /**
     * General search across name, email, and possibly other fields
     * (full-text).
     */
    search?: string | undefined;
  };

  /**
   * Update payload for ATS applicant (ats_recruitment_applicants table).
   *
   * All properties optional; only included if updating those fields. For
   * password resets, use separate endpoint or supply 'password'. Not all
   * systems support direct password update via this payload.
   */
  export type IUpdate = {
    /**
     * Full name of the applicant. Matches 'name' field in
     * ats_recruitment_applicants.
     */
    name?: string | undefined;

    /**
     * Applicant's phone number (mobile). Corresponds to 'phone' field;
     * optional contact info.
     */
    phone?: string | undefined;

    /**
     * If true, enables the account; false disables access (soft lockout).
     * Maps to 'is_active' field in ATS applicant table.
     */
    is_active?: boolean | undefined;

    /**
     * Password update (raw password to be securely hashed by backend). Not
     * present in Prisma, for password reset only. Omit unless explicitly
     * supported by flows.
     */
    password?: string | undefined;
  };

  /**
   * Summary view of an applicant (ats_recruitment_applicants) for search,
   * administration, and overview panels. Contains primary identifiers,
   * contact info (optional), and audit metadata. Does not include password or
   * sensitive internal data. Used primarily for list and search result
   * display.
   */
  export type ISummary = {
    /**
     * Unique identifier for the applicant record (primary key).
     *
     * This field is 'id' in the Prisma table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Applicant's unique email address for login and notification.
     *
     * Used for authentication as per 'email' field in schema.
     */
    email: string & tags.Format<"email">;

    /**
     * Full name of the applicant for search and display.
     *
     * References the 'name' field in schema.
     */
    name: string;

    /**
     * Applicant's contact phone number, if provided (nullable).
     *
     * Matches 'phone' in schema. Used for notification, privacy filtered in
     * summaries.
     */
    phone?: string | null | undefined;

    /**
     * Boolean indicating if account is active and allowed to login.
     *
     * Maps to 'is_active' in Prisma model.
     */
    is_active: boolean;

    /**
     * Timestamp when the applicant record was created.
     *
     * Field 'created_at' in schema.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Latest update timestamp for the applicant record (UTC ISO8601
     * string).
     *
     * References 'updated_at'.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp for GDPR compliance and audit recovery.
     *
     * Null if not deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
