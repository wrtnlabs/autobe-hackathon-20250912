import { tags } from "typia";

/**
 * Represents an immutable review comment made by a tech reviewer (or automated
 * agent/system) for a coding test submission. Includes audit and analytics
 * fields, author identity, and lifecycle timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentCodingTestReviewComment = {
  /**
   * Primary key for the review comment entity (UUID). Uniquely identifies the
   * immutable comment for all further analytics, audit, or reply operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the specific coding test submission this comment is
   * associated with. Required for traceability and index relationship.
   */
  ats_recruitment_coding_test_submission_id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the technical reviewer who authored this comment. Direct
   * FK to reviewers for audit and compliance.
   */
  ats_recruitment_techreviewer_id: string & tags.Format<"uuid">;

  /**
   * Content of the review comment (markdown or plain text). May contain
   * reviewer assessment, recommendations, or explanations. Never null or
   * empty.
   */
  comment_text: string;

  /**
   * Type/role/source of the comment: allowed values include 'manual', 'auto',
   * 'system', 'plagiarism_flag'. Controls semantic meaning in analytics.
   */
  comment_type: string;

  /**
   * Timestamp when reviewer began preparing this comment; for
   * performance/analytics purposes.
   */
  started_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when comment was finally submitted/committed (immutable for
   * audit).
   */
  commented_at: string & tags.Format<"date-time">;

  /** Timestamp when this comment entity was created in the DB. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this comment entity was last updated (should not change
   * except for rare admin correction).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If set, time when comment was deleted/removed for compliance. Null if
   * comment is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IAtsRecruitmentCodingTestReviewComment {
  /**
   * Payload for creating a review comment on a coding test submission.
   * Captures reviewer context, timings, and immutable comment content for the
   * audit trail.
   */
  export type ICreate = {
    /**
     * UUID referencing the associated coding test submission. Requiredâ€”must
     * point to a valid existing submission.
     */
    ats_recruitment_coding_test_submission_id: string & tags.Format<"uuid">;

    /**
     * UUID referencing the technical reviewer creating this comment. Must
     * match an authorized reviewer for the job/test.
     */
    ats_recruitment_techreviewer_id: string & tags.Format<"uuid">;

    /**
     * Content of the review comment to be submitted (markdown or plain
     * text). Cannot be empty or null.
     */
    comment_text: string;

    /**
     * Source/classification of the comment. Permitted values include
     * 'manual', 'auto', 'system', 'plagiarism_flag' (case-sensitive).
     */
    comment_type: string;

    /**
     * Timestamp when reviewer started the review process for this comment;
     * set at comment creation for business analytics.
     */
    started_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when this review comment is finalized/submitted; set for
     * audit and analytics.
     */
    commented_at: string & tags.Format<"date-time">;
  };

  /**
   * Request schema for searching and paginating coding test review comments.
   *
   * This object allows advanced filtering, sorting, and paging for all review
   * comments associated with coding test submissions. Fields correspond to
   * the review comment metadata and support complex business filtering
   * scenarios for HR and technical reviewers.
   */
  export type IRequest = {
    /**
     * Type of the review comment for filtering (e.g., manual, auto,
     * system).
     */
    comment_type?: string | undefined;

    /** UUID of the reviewer for filtering review comments. */
    ats_recruitment_techreviewer_id?: string | undefined;

    /** Filter for comments started at or after this ISO 8601 datetime. */
    started_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for comments started at or before this ISO 8601 datetime. */
    started_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for comments commented at or after this ISO 8601 datetime. */
    commented_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for comments commented at or before this ISO 8601 datetime. */
    commented_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of items per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field to sort results by (e.g., 'commented_at', 'started_at'). */
    sort_by?: string | undefined;

    /** Sort order: asc for ascending, desc for descending. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Update schema for a coding test review comment.
   *
   * Allows updates to the comment text, type, and relevant timestamps by
   * authorized technical reviewers or system administrators. Only fields
   * explicitly present in the payload are updated; all others remain
   * unchanged, following PATCH semantics.
   */
  export type IUpdate = {
    /**
     * Updated text of the review comment. May include markdown or plain
     * text.
     */
    comment_text?: string | undefined;

    /** Type of the review comment, e.g., 'manual', 'auto', or 'system'. */
    comment_type?: string | undefined;

    /** Timestamp when reviewer started the comment (ISO 8601). */
    started_at?: (string & tags.Format<"date-time">) | undefined;

    /** Timestamp when comment was finalized (ISO 8601). */
    commented_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
