import { tags } from "typia";

/**
 * Captures a single status change for an application, recording actor,
 * transition states, time, and optional reason. Used for audit/compliance and
 * business workflow tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentApplicationStatusHistory = {
  /** Unique identifier of this status change event. */
  id: string & tags.Format<"uuid">;

  /** ID of the related job application. */
  application_id: string & tags.Format<"uuid">;

  /**
   * Actor ID (HR, reviewer, or null for system) who enacted the status
   * change.
   */
  actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Previous status of the application. */
  from_status: string;

  /** New status of the application after the transition. */
  to_status: string;

  /** Time when the status change occurred (ISO8601 date/time, UTC). */
  changed_at: string & tags.Format<"date-time">;

  /**
   * Optional note/comment describing the reason for the change or context for
   * the status transition.
   */
  change_comment?: string | null | undefined;

  /** Timestamp the status event was created (ISO8601 date/time, UTC). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAtsRecruitmentApplicationStatusHistory {
  /** Request shape for paginated/filter queries on application status history. */
  export type IRequest = {
    /** Application ID for filtering status events. */
    application_id?: (string & tags.Format<"uuid">) | undefined;

    /** (Optional) Filter for previous status. */
    from_status?: string | undefined;

    /** (Optional) Filter for next status. */
    to_status?: string | undefined;

    /** (Optional) Minimum timestamp. */
    changed_at_after?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Maximum timestamp. */
    changed_at_before?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Payload to create a new application status history event. All status
   * transitions must specify from_status and to_status. actor_id and comment
   * are optional.
   */
  export type ICreate = {
    /**
     * The application's previous status/state before the transition. Should
     * match the current_status field in the application table at time of
     * change.
     */
    from_status: string;

    /**
     * The new, updated status/state of the application after this
     * transition. Should be a valid business status.
     */
    to_status: string;

    /**
     * UUID of the HR/reviewer performing this status change. Optional if
     * system-automated.
     */
    actor_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional comment/reason/memo for status transition, as provided by
     * the HR or reviewer actor.
     */
    change_comment?: string | null | undefined;
  };

  /** Partial update structure for an application status history record. */
  export type IUpdate = {
    /** (Optional) Update previous status. */
    from_status?: string | undefined;

    /** (Optional) Update new status. */
    to_status?: string | undefined;

    /** Update the comment if provided. */
    change_comment?: string | null | undefined;
  };

  /**
   * Summary DTO for each status change instance in a job application's
   * workflow. Useful for timeline display and high-level audit. Maps to the
   * status change audit row from the application status history table.
   *
   * - Id: Unique row identifier.
   * - From_status: Previous application status.
   * - To_status: Resulting application status.
   * - Changed_at: ISO datetime of the change.
   * - Actor_id: HR/reviewer, if present.
   */
  export type ISummary = {
    /**
     * Primary key for the application status history row. Sourced from the
     * Prisma model.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Previous status of the application before this change. This matches
     * the 'from_status' field in the application status history table.
     */
    from_status: string;

    /** The new status after this change event. As in the model. */
    to_status: string;

    /**
     * Timestamp when the status change occurred. The 'changed_at' field in
     * the Prisma schema, ISO 8601 format.
     */
    changed_at: string & tags.Format<"date-time">;

    /**
     * ID of the actor (HR/reviewer) who performed the transition, if
     * applicable. Nullable as in the schema.
     */
    actor_id?: (string & tags.Format<"uuid">) | null | undefined;
  };
}
