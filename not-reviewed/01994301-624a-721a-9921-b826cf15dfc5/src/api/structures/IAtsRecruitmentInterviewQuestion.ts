import { tags } from "typia";

/**
 * Interview session question entry used for structured, auditable interviewing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentInterviewQuestion = {
  /** Unique identifier of interview question. */
  id: string & tags.Format<"uuid">;

  /** ID of the parent interview this question is attached to. */
  ats_recruitment_interview_id: string & tags.Format<"uuid">;

  /** Display order/index for this question among interview questions. */
  order: number & tags.Type<"int32">;

  /** Full content of the question shown to candidate/reviewer. */
  question_text: string;

  /** Type/area of the question (e.g., 'coding', 'behavioral', 'technical'). */
  question_type: string;

  /** Whether the question is derived from a template (true) or custom. */
  is_template: boolean;

  /** Timestamp (ISO8601) when assigned. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAtsRecruitmentInterviewQuestion {
  /** Filter/search model for interview question list queries. */
  export type IRequest = {
    /** Filter: question type (e.g., 'coding', 'behavioral'). */
    question_type?: string | undefined;

    /** Filter: search for text in question. */
    keyword?: string | undefined;

    /** Filter: show template-based (true) or custom (false) only. */
    is_template?: boolean | undefined;

    /** Filter: specific ordinal position in interview. */
    order?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: result page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: results per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /** Request schema for creating a new interview question for an interview. */
  export type ICreate = {
    /** Position/order for new question in interview. Unique within parent. */
    order: number & tags.Type<"int32">;

    /** Full interview question text. */
    question_text: string;

    /** Type/category for reporting/matching. */
    question_type: string;

    /** Whether this is a template-derived question or custom/manual. */
    is_template: boolean;
  };

  /**
   * Partial update payload for an interview question entity in the ATS. Used
   * to update text, order, type, or template status in the interview flow.
   * All properties optional for PATCH-like semantics.
   */
  export type IUpdate = {
    /**
     * Display or asking order of this question in the interview (0-based,
     * integer). Optional.
     */
    order?: (number & tags.Type<"int32">) | undefined;

    /**
     * The interview question content. May be template, AI-generated, or
     * manually provided.
     */
    question_text?: string | undefined;

    /**
     * Type/classification of the question: e.g., 'coding', 'behavioral',
     * 'personality', 'situational', etc. Optional, used for
     * categorization.
     */
    question_type?: string | undefined;

    /**
     * True if the question is derived from a predefined template. False for
     * custom/manual questions. Optional.
     */
    is_template?: boolean | undefined;
  };
}
