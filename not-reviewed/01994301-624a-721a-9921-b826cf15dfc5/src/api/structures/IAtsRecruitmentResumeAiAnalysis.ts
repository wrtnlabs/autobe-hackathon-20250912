import { tags } from "typia";

/**
 * Represents a single AI/automation analysis job for a resume, as recorded in
 * ats_recruitment_resume_ai_analyses. Includes type, status, start/finish
 * times, result payload, and confidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentResumeAiAnalysis = {
  /**
   * Primary key. Unique identifier for the AI analysis job.
   * ats_recruitment_resume_ai_analyses.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key. Identifier of the parent resume analyzed.
   * ats_recruitment_resume_ai_analyses.ats_recruitment_resume_id
   */
  ats_recruitment_resume_id: string & tags.Format<"uuid">;

  /**
   * The type/class of the analysis performed (e.g., basic_ocr,
   * ai_skill_match, ner_parse).
   * ats_recruitment_resume_ai_analyses.analysis_type
   */
  analysis_type: string;

  /**
   * Current analysis state: e.g., pending, completed, failed.
   * ats_recruitment_resume_ai_analyses.analysis_status
   */
  analysis_status: string;

  /**
   * Optional. JSON string with AI/automation job input. May include extracted
   * resume info, parser settings, or API parameters.
   * ats_recruitment_resume_ai_analyses.input_payload_json
   */
  input_payload_json?: string | null | undefined;

  /**
   * Optional. JSON string with detailed AI/automation analysis results
   * (parsed fields, tags, comments).
   * ats_recruitment_resume_ai_analyses.result_payload_json
   */
  result_payload_json?: string | null | undefined;

  /**
   * Optional. AI-derived confidence score for the analysis or extracted
   * information, 0-1 scale.
   * ats_recruitment_resume_ai_analyses.confidence_score
   */
  confidence_score?: number | null | undefined;

  /**
   * Timestamp when the analysis job was started.
   * ats_recruitment_resume_ai_analyses.started_at
   */
  started_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when analysis completed. Null if never finished.
   * ats_recruitment_resume_ai_analyses.completed_at
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentResumeAiAnalysis {
  /**
   * Advanced filter, search, and pagination parameters for retrieving resume
   * AI analysis jobs. Supports query by analysis type, status, time and
   * ordering. Used with PATCH on AI analysis listing endpoints.
   */
  export type IRequest = {
    /**
     * Type of analysis to filter for. Example values: basic_ocr,
     * ai_skill_match, ner_parse. Matches
     * ats_recruitment_resume_ai_analyses.analysis_type
     */
    analysis_type?: string | undefined;

    /**
     * Status code to filter by (e.g., pending, completed, failed). Matches
     * ats_recruitment_resume_ai_analyses.analysis_status
     */
    analysis_status?: string | undefined;

    /**
     * (Optional) Lower bound datetime (ISO8601) for filtering AI analysis
     * records by when they were started.
     */
    started_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Upper bound datetime (ISO8601) for filtering by analysis
     * started_at.
     */
    started_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Lower bound (ISO8601) for completed_at filtering. */
    completed_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Upper bound (ISO8601) for completed_at filtering. */
    completed_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination, 1-based. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum number of results per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Field name to sort by (e.g., started_at, completed_at,
     * analysis_type).
     */
    sort_by?: string | undefined;

    /** Sort order direction: 'asc' for ascending, 'desc' for descending. */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Request to create a new AI/automation analysis job for a resume. Provide
   * the analysis_type and, if needed, input parameters for downstream AI/ML
   * or OCR pipeline. This DTO does NOT start the job directly, but registers
   * it for the resume.
   */
  export type ICreate = {
    /**
     * Type of analysis/job to be created (e.g., 'basic_ocr',
     * 'ai_skill_match', 'ner_parse'). Must match an allowed/expected
     * pipeline configured in the business logic. Linked to
     * ats_recruitment_resume_ai_analyses.analysis_type.
     */
    analysis_type: string;

    /**
     * Optional JSON string with parameters, settings, or data used to drive
     * the AI analysis. E.g., parsed resume fields, custom parser
     * parameters. Linked to
     * ats_recruitment_resume_ai_analyses.input_payload_json.
     */
    input_payload_json?: string | null | undefined;
  };

  /**
   * Update payload for resume AI analysis. Optional fields for completed
   * analysis: status, input/result JSON, confidence score, and completion
   * time.
   */
  export type IUpdate = {
    /** Status of analysis: e.g., 'pending', 'completed', 'failed'. */
    analysis_status?: string | undefined;

    /** JSON string of request/input sent to AI/analysis API. */
    input_payload_json?: string | undefined;

    /**
     * JSON string with result/response from AI (structured fields, tags,
     * comments).
     */
    result_payload_json?: string | undefined;

    /**
     * Optional confidence score/result assigned by analysis result. Null if
     * not provided.
     */
    confidence_score?: number | undefined;

    /**
     * Timestamp when analysis job finished (success or fail). Null if never
     * completed.
     */
    completed_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
