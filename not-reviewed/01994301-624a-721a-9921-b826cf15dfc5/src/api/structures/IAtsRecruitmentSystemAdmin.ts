import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * System admin account entity for the ATS. Includes all core fields from the
 * ats_recruitment_systemadmins table except password_hash for security. Used
 * for system admin list views, detail, and account management screens. Provides
 * audit, privilege, and compliance mapping for administrative actors.
 *
 * Always exclude password hashes/sensitive authentication credentials from API
 * responses. For create/update/patch payloads, refer to the IUpdate or ICreate
 * types as appropriate.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentSystemAdmin = {
  /** Unique system admin user identifier (UUID primary key). */
  id: string & tags.Format<"uuid">;

  /** Email address used for login and notifications. Must be unique per admin. */
  email: string;

  /** Full name of the administrator, for display, audit, and action tracking. */
  name: string;

  /**
   * Indicates full super admin privileges for managing other admins or all
   * system settings.
   */
  super_admin: boolean;

  /** Account active/enabled status (false disables logins and privileges). */
  is_active: boolean;

  /** Record creation timestamp, ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Record last update timestamp, ISO 8601 format. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. Null if not deleted; set if account ~
   * deactivated for audit/GDPR compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentSystemAdmin {
  /**
   * Payload for registering a new system administrator
   * (ats_recruitment_systemadmins) account, used for onboarding admin users
   * with associated privilege level.
   */
  export type IJoin = {
    /**
     * Administrator's login email address, unique in the system; referenced
     * in 'ats_recruitment_systemadmins'. Required for authentication and
     * notification.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password to be hashed and stored for authentication. Only
     * provided during registration, never returned in plaintext or
     * responses.
     */
    password: string;

    /**
     * Full name of the administrator. Displayed in management interfaces
     * and audit logs.
     */
    name: string;

    /**
     * Optional flag to mark this account as a super administrator,
     * providing full write/control privilege. Defaults to false if
     * omitted.
     */
    super_admin?: boolean | undefined;
  };

  /**
   * Authorization response containing JWT token for system administrator
   * login, join, and refresh flows. Follows standard authentication response
   * requirements. Contains issued token and minimal user identity for session
   * context establishment. Does not expose any password, hash, or internal
   * admin record. See documentation for authentication schema compliance.
   */
  export type IAuthorized = {
    /** Unique identifier (UUID) of the authenticated systemAdmin. */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for authenticating a system administrator (login), based
   * on registered email and password. Used for initial credential-based
   * authentication prior to token issuance.
   */
  export type ILogin = {
    /**
     * Login identifier for the system administrator
     * (ats_recruitment_systemadmins). The email address must be unique and
     * registered in the platform.
     */
    email: string & tags.Format<"email">;

    /**
     * Raw password for system admin authentication (will be hashed for
     * storage and comparison). Only accepted in requests, never returned in
     * responses.
     */
    password: string;
  };

  /**
   * Request to refresh JWT access token for an authenticated system
   * administrator, using a valid refresh token. Returned after join/login is
   * successful to extend admin session.
   */
  export type IRefresh = {
    /** Valid JWT refresh token assigned to the session for token renewal. */
    refresh_token: string;
  };

  /**
   * Advanced search, filter, and pagination request for system
   * administrators. Applies to admin directory listing in the recruitment
   * platform.
   */
  export type IRequest = {
    /**
     * Page number for pagination (optional). If specified, must be a
     * positive integer.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum number of records per page (optional). Positive integer or
     * null.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Keyword search across system admin properties (name/email).
     * Full-text/fuzzy search on admin directory.
     */
    search?: string | null | undefined;

    /**
     * System admin name filter (optional). Allows partial or full name
     * matches in queries.
     */
    name?: string | null | undefined;

    /** System admin email filter. Enables unique admin identity filtering. */
    email?: string | null | undefined;

    /**
     * Active status filter (optional). Selects admins based on current
     * activation state.
     */
    is_active?: boolean | null | undefined;

    /**
     * Super admin privilege flag (optional). Enables filtering of super
     * admin vs regular administrative accounts.
     */
    super_admin?: boolean | null | undefined;

    /**
     * Earliest creation date filter (optional). Only admins created after
     * this UTC ISO 8601 timestamp are included.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Latest creation date filter (optional). Only admins created before
     * this UTC ISO 8601 timestamp are included.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sorting property/column name (optional). Determines ordering of admin
     * listing by chosen property.
     */
    order_by?: string | null | undefined;

    /**
     * Sort direction for ordering (asc or desc). Optional; must be one of
     * enum or null.
     */
    order_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Patch (update) request payload for modifying selectable properties of an
   * ATS system administrator. Supports change to name, privilege (super
   * admin), and activation status. password_hash changes are supported only
   * in dedicated password reset endpoints. Partial updateâ€”properties omitted
   * are left unchanged. Used for account maintenance, role escalation, and
   * lifecycle event management by privileged system admin users.
   */
  export type IUpdate = {
    /** Update full name of the system admin (display and audit purposes). */
    name?: string | undefined;

    /**
     * Upgrade/downgrade to super admin status (hierarchical privilege
     * escalation).
     */
    super_admin?: boolean | undefined;

    /**
     * Set admin's account activity. False disables privilege/login; true
     * enables.
     */
    is_active?: boolean | undefined;
  };

  /**
   * Summary for system administrator in the ATS platform. Used in list,
   * directory UI, or assignment scenarios.
   *
   * Excludes sensitive system fields (e.g., password hash).
   *
   * Based on Prisma model: ats_recruitment_systemadmins.
   *
   * All date/time values are in ISO 8601 format (e.g.,
   * '2025-09-14T11:29:22.564Z').
   */
  export type ISummary = {
    /** Unique identifier for the system admin account (UUID). */
    id: string & tags.Format<"uuid">;

    /** System admin email address (unique for login and system notices). */
    email: string & tags.Format<"email">;

    /** Admin's full name. */
    name: string;

    /**
     * Whether this account is a super administrator (can manage all
     * configuration, other admins).
     */
    super_admin: boolean;

    /** Current enable state. False if account is disabled and cannot log in. */
    is_active: boolean;

    /** ISO 8601 timestamp when admin account was created. */
    created_at: string & tags.Format<"date-time">;

    /** ISO 8601 timestamp of last admin profile update. */
    updated_at: string & tags.Format<"date-time">;
  };
}
