import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Technical reviewer user account entity. Contains all profile information,
 * system status, and audit fields for assignment, authentication and
 * compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentTechReviewer = {
  /**
   * Unique identifier for the technical reviewer. Primary key from the
   * ats_recruitment_techreviewers table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reviewer login and notification email (unique). Used for identity,
   * authentication, and communication.
   */
  email: string & tags.Format<"email">;

  /**
   * Full name of the technical reviewer. Used in assignment, notifications,
   * and profile display.
   */
  name: string;

  /**
   * Reviewer area of technical expertise (nullable). Used for reviewer
   * assignment and skill-matching.
   */
  specialization?: string | null | undefined;

  /**
   * Active status flag. true if the reviewer can log in and receive
   * assignments, false if account is disabled.
   */
  is_active: boolean;

  /** Record creation timestamp (UTC ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last modified timestamp (UTC ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp. Null if the reviewer is active, otherwise ISO
   * 8601 string for deletion time.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAtsRecruitmentTechReviewer {
  /**
   * Payload for registering a new technical reviewer in the ATS system.
   * Aligns with the Prisma model 'ats_recruitment_techreviewers'. Contains
   * authentication, profile, and specialization information.
   */
  export type ICreate = {
    /**
     * The unique email address for technical reviewer registration. Used
     * for authentication and notification. Must be unique across the
     * system. According to the Prisma schema, this field must be unique and
     * is required.
     */
    email: string & tags.Format<"email">;

    /**
     * The plain text password for technical reviewer login, which should be
     * securely hashed by the backend. Only provided during registration and
     * never stored or returned in plaintext.
     */
    password: string;

    /**
     * Full name of the technical reviewer. Used for communication,
     * indexing, and display.
     */
    name: string;

    /**
     * Optional field specifying the reviewer's key technology area or
     * specialty. Used by HR to assign reviewers based on skill. Can be
     * omitted if not relevant.
     */
    specialization?: string | undefined;
  };

  /**
   * Authorization response containing JWT token for technical reviewer login,
   * join, and refresh flows. Follows required structure for authentication.
   * Contains issued token and minimal reviewer identity. No sensitive
   * password or proprietary profile info is exposed.
   */
  export type IAuthorized = {
    /** Unique identifier (UUID) of the authenticated tech reviewer. */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for technical reviewer credential authentication. Used in
   * the login flow to obtain JWT tokens.
   */
  export type ILogin = {
    /**
     * Technical reviewer’s email address for login authentication, linked
     * to unique profile in ats_recruitment_techreviewers.
     */
    email: string & tags.Format<"email">;

    /**
     * Reviewer’s raw password (will be hashed for comparison). Only
     * accepted in login, never returned in responses.
     */
    password: string;
  };

  /**
   * Advanced search and filtering request for tech reviewers in the
   * recruitment system. Supports pagination, keyword and property filtering,
   * and sorting. All fields are optional. Null values mean not filtering by
   * that property.
   */
  export type IRequest = {
    /**
     * Page number for pagination (optional). If provided, must be a
     * positive integer. Used for fetching specific pages of reviewer
     * results.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Records limit per page (optional). If set, must be a positive
     * integer. Used to control the number of records returned in each
     * paginated page.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Keyword search across reviewer properties
     * (name/email/specialization). Used for fuzzy/full-text search in
     * reviewer queries.
     */
    search?: string | null | undefined;

    /**
     * Reviewer full name filter (optional). Allows partial or exact name
     * filtering in search criteria.
     */
    name?: string | null | undefined;

    /**
     * Reviewer email address filter (optional). Enables precise filtering
     * by unique email value.
     */
    email?: string | null | undefined;

    /**
     * Reviewer specialization (optional). Used to filter reviewers by their
     * domain/technology expertise.
     */
    specialization?: string | null | undefined;

    /**
     * Active status filter (optional). When specified, filters reviewers by
     * current activation state.
     */
    is_active?: boolean | null | undefined;

    /**
     * UTC ISO 8601 timestamp filter for earliest created_at. Only reviewers
     * created after this timestamp are returned if set.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * UTC ISO 8601 timestamp filter for latest created_at. Only reviewers
     * created before this timestamp are shown if set.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sorting column name (optional). Specifies which property to sort
     * reviewer results by.
     */
    order_by?: string | null | undefined;

    /**
     * Sorting direction (asc/desc, optional). Direction for sorting
     * results, must be 'asc' or 'desc' or null.
     */
    order_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Fields permitted for updating a tech reviewer account. At least one field
   * must be present in a valid update request.
   */
  export type IUpdate = {
    /**
     * Full name of the technical reviewer. Used for display and
     * notifications.
     */
    name?: string | undefined;

    /**
     * Reviewer specialty or technology focus (nullable). Allows assignment
     * and skill-based queries.
     */
    specialization?: string | null | undefined;

    /** Reviewer account activation flag (true = enabled, false = disabled). */
    is_active?: boolean | undefined;
  };

  /**
   * Summary representation of a technical reviewer for ATS. Used for listing,
   * dropdowns, assignment, or summary panels. Excludes password and full
   * audit data. Properties correspond to the tech reviewer account,
   * specialization, and active state.
   *
   * Based on Prisma model: ats_recruitment_techreviewers.
   *
   * All date/time values are in ISO 8601 format (e.g.,
   * '2025-09-14T11:29:22.564Z').
   */
  export type ISummary = {
    /** Unique identifier for the tech reviewer (UUID). */
    id: string & tags.Format<"uuid">;

    /**
     * Reviewer email address used for authentication, system notification,
     * and filtering/listing.
     */
    email: string & tags.Format<"email">;

    /** The reviewer's full legal name for display and filtering. */
    name: string;

    /**
     * Optional key technology/specialty for assignment matching, or null if
     * not specified.
     */
    specialization?: string | null | undefined;

    /**
     * Whether this tech reviewer is currently allowed to access and perform
     * review operations.
     */
    is_active: boolean;

    /** ISO 8601 timestamp when the tech reviewer account was created. */
    created_at: string & tags.Format<"date-time">;

    /** ISO 8601 timestamp of last update to the tech reviewer account. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Registration request payload for a technical reviewer (join endpoint), as
   * defined by ats_recruitment_techreviewers schema. Provides the minimum
   * properties required to onboard a reviewer into the platform
   * authentication system. Password only accepted here, never returned in
   * responses.
   */
  export type IJoin = {
    /**
     * Technical reviewer’s login identifier, must be a unique email in the
     * system.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain text password (will be hashed in storage); only accepted at
     * registration.
     */
    password: string;

    /**
     * Full name of the technical reviewer for display in review workflows
     * and audit logs.
     */
    name: string;

    /**
     * Area of technical expertise; optional and nullable, used for reviewer
     * assignment and skill matching.
     */
    specialization?: string | null | undefined;
  };
}
