import { tags } from "typia";

/**
 * Represents a participant associated with a specific interview. Handles
 * applicant, HR recruiter, tech reviewer, or observer as identified by actor
 * fields. Relationship entry in ats_recruitment_interview_participants. Only
 * one actor type is present per row (applicantId, hrRecruiterId,
 * techReviewerId).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAtsRecruitmentInterviewParticipant = {
  /** Unique identifier for the interview participant record. */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the parent interview associated with the participant
   * (ats_recruitment_interviews.id).
   */
  interviewId: string & tags.Format<"uuid">;

  /**
   * UUID of an applicant actor for participant row. Nullable; only one of
   * applicantId, hrRecruiterId, or techReviewerId should be set.
   */
  applicantId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID for HR recruiter actor in participant row. Nullable; only one of
   * applicantId, hrRecruiterId, or techReviewerId.
   */
  hrRecruiterId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID for tech reviewer actor in this participant row. Nullable; only one
   * of applicantId, hrRecruiterId, or techReviewerId.
   */
  techReviewerId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Role string for this participant (such as 'applicant', 'recruiter',
   * 'reviewer', 'observer', etc.)
   */
  role: string;

  /**
   * Timestamp in ISO 8601 when the invitation/assignment to interview was
   * made. Required.
   */
  invitedAt: string & tags.Format<"date-time">;

  /**
   * Current confirmation status for the interview participant (e.g.
   * 'pending','accepted','declined','tentative'). Required.
   */
  confirmationStatus: string;

  /** Record creation timestamp in ISO 8601 format (audit/history). */
  createdAt: string & tags.Format<"date-time">;
};
export namespace IAtsRecruitmentInterviewParticipant {
  /**
   * Filter/search request for paginated listing of interview participants.
   * Use to find all, or a subset by various filters like interviewId, actor
   * role, or confirmation status.
   */
  export type IRequest = {
    /** Page number for result set, required for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum number of results per page. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Sort order or comma-separated columns (e.g., 'invitedAt desc,role
     * asc'). Required if sorting is used.
     */
    sort?: string | null | undefined;

    /** Interview record UUID; filter participants for a specific interview. */
    interviewId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Applicant UUID; filter by participant applicant actor. Optional. */
    applicantId?: (string & tags.Format<"uuid">) | null | undefined;

    /** HR recruiter UUID; filter by participant recruiter actor. Optional. */
    hrRecruiterId?: (string & tags.Format<"uuid">) | null | undefined;

    /** Tech reviewer UUID; filter by participant reviewer actor. Optional. */
    techReviewerId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Role for the participant (applicant, recruiter, reviewer, observer,
     * etc.). Optional, case-sensitive on implementation.
     */
    role?: string | null | undefined;

    /**
     * Status of confirmation (pending, accepted, declined, tentative).
     * Optional. Filtering on this allows review of RSVP status for each
     * participant in an interview. Typical values:
     * 'pending','accepted','declined','tentative'.
     */
    confirmationStatus?: string | null | undefined;
  };

  /**
   * DTO for creating a new interview participant for an interview. Only one
   * actor type should be supplied; role defines actor's relationship to
   * interview (applicant, recruiter, reviewer, observer, etc.).
   * confirmationStatus can be supplied or defaults as per business logic.
   */
  export type ICreate = {
    /**
     * UUID for the applicant to assign as participant. Nullable; one of
     * applicantId/hrRecruiterId/techReviewerId is required.
     */
    applicantId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID for the HR recruiter to assign as participant. Nullable; one of
     * applicantId/hrRecruiterId/techReviewerId is required.
     */
    hrRecruiterId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID for the tech reviewer assigned as participant. Nullable; one of
     * applicantId/hrRecruiterId/techReviewerId is required.
     */
    techReviewerId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Participant role for this interview (applicant, recruiter, reviewer,
     * observer, etc.). Required. Single actor/role per participant row.
     */
    role: string;

    /**
     * Confirmation status on create (pending, accepted, declined,
     * tentative). Optional â€” default varies by workflow. Typical: 'pending'
     * on create.
     */
    confirmationStatus?: string | null | undefined;
  };

  /**
   * DTO for updating (patching) confirmation status or role for an interview
   * participant. Used in attendance management and scheduling operations.
   */
  export type IUpdate = {
    /**
     * New confirmation status for the interview participant (pending,
     * accepted, declined, tentative). Optional.
     */
    confirmationStatus?: string | null | undefined;

    /**
     * (Optional) Role for participant, such as applicant, recruiter,
     * reviewer, observer, etc. Usually not modified but permitted if
     * business logic allows role reassignment. Nullable.
     */
    role?: string | undefined;
  };
}
