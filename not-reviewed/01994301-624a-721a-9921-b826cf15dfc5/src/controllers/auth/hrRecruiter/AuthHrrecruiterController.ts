import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthHrRecruiterJoin } from "../../../providers/postauthHrRecruiterJoin";
import { postauthHrRecruiterLogin } from "../../../providers/postauthHrRecruiterLogin";
import { postauthHrRecruiterRefresh } from "../../../providers/postauthHrRecruiterRefresh";

import { IAtsRecruitmentHrRecruiter } from "../../../api/structures/IAtsRecruitmentHrRecruiter";

@Controller("/auth/hrRecruiter")
export class AuthHrrecruiterController {
  /**
   * Register (join) as an HR recruiter using ats_recruitment_hrrecruiters
   * schema.
   *
   * This endpoint registers a new HR recruiter by creating a unique account in
   * the ats_recruitment_hrrecruiters table. It requires the applicant to
   * provide an email (must be unique), a plaintext password (stored as a hash),
   * and other core fields such as name and optionally department, as defined in
   * the schema. The API validates email uniqueness based on the unique
   * constraint in the table. Upon successful registration, the operation
   * creates an active HR recruiter account with is_active set to true, allowing
   * access to recruitment management features. Security considerations include
   * password hashing and account activation status. If an email already exists
   * or a required field is missing, the operation returns an error. This
   * operation is foundationalâ€”other auth flows (login, token refresh) require a
   * prior join, and is thus an entry-point into the ATS system for HR users.
   * Passwords must never be returned in the response or stored in plaintext. On
   * success, returns an IAtsRecruitmentHrRecruiter.IAuthorized DTO which
   * includes the full information required for client-side session management.
   *
   * @param connection
   * @param body New HR recruiter registration form input.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IAtsRecruitmentHrRecruiter.IJoin,
  ): Promise<IAtsRecruitmentHrRecruiter.IAuthorized> {
    try {
      return await postauthHrRecruiterJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login for HR recruiter using ats_recruitment_hrrecruiters table.
   *
   * Allows an HR recruiter to authenticate using their unique email and
   * plaintext password. The email is checked for existence in the
   * ats_recruitment_hrrecruiters table, and passwords are hashed for secure
   * comparison against password_hash. Login is rejected if is_active is false
   * or deleted_at is not null. All events, including both successful and failed
   * login attempts, are logged in ats_recruitment_actor_login_histories, as per
   * security and audit requirements. Repeated failed logins may trigger account
   * lockout (policy enforced using login history and not shown in this API
   * directly). Security ensures passwords are never exposed outside the API
   * boundary. The API issues new JWT tokens containing userId, role, and
   * permissions, enabling the recruiter to carry out their recruitment
   * operations. This operation is part of the core authentication lifecycle for
   * members, and a successful join is mandatory before login. Associated
   * endpoints: join (registration), refresh (token renewal).
   *
   * @param connection
   * @param body HR recruiter login request (email, password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IAtsRecruitmentHrRecruiter.ILogin,
  ): Promise<IAtsRecruitmentHrRecruiter.IAuthorized> {
    try {
      return await postauthHrRecruiterLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * JWT token refresh for HR recruiter using ats_recruitment_hrrecruiters.
   *
   * Refreshes the JWT access token for an HR recruiter using a valid refresh
   * token. The system consults the ats_recruitment_hrrecruiters table,
   * verifying the user's is_active status and that deleted_at is null. The
   * token is extended or replaced, granting continued access to all privileges
   * held at the time of refresh according to their role. The operation never
   * returns or re-validates credentials. If the account is disabled or deleted,
   * the operation fails. All refresh attempts and results may be logged for
   * audit purposes per compliance best practices. Other APIs in the
   * authentication workflow (join, login) are required for initial registration
   * and gaining refresh token eligibility. On success, returns
   * IAtsRecruitmentHrRecruiter.IAuthorized with updated session info and
   * access/refresh tokens.
   *
   * @param connection
   * @param body Refresh token operation (requires valid refresh token).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IAtsRecruitmentHrRecruiter.IRefresh,
  ): Promise<IAtsRecruitmentHrRecruiter.IAuthorized> {
    try {
      return await postauthHrRecruiterRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
