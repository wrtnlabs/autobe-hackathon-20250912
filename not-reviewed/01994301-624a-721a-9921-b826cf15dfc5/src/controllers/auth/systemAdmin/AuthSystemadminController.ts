import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminJoin } from "../../../providers/postauthSystemAdminJoin";
import { postauthSystemAdminLogin } from "../../../providers/postauthSystemAdminLogin";
import { postauthSystemAdminRefresh } from "../../../providers/postauthSystemAdminRefresh";

import { IAtsRecruitmentSystemAdmin } from "../../../api/structures/IAtsRecruitmentSystemAdmin";

@Controller("/auth/systemAdmin")
export class AuthSystemadminController {
  /**
   * Register a new system administrator (ats_recruitment_systemadmins table)
   * and issue JWT tokens.
   *
   * This operation enables the registration of a new system administrator for
   * the ATS recruitment platform.
   *
   * It uses the 'ats_recruitment_systemadmins' table where each administrator
   * is uniquely identified by their email. The registration process requires
   * the email, password hash (stored securely), and name. You may optionally
   * define 'super_admin' to grant full environment access. On success, an
   * authorization token set is issued to the new admin.
   *
   * This is the main entry point for platform administrator onboarding,
   * ensuring full auditing and separation of duties per compliance rules. Email
   * uniqueness and password strength validation are mandatory, and registration
   * attempts should result in appropriate audit trail records in the system.
   * The endpoint is public to allow invitation-based or first-time bootstrap of
   * administrator, but the use is subject to additional manual approval steps
   * in the business process.
   *
   * Security is paramount: never store plaintext passwords; only a strong
   * cryptographic hash. The response returns the authorized admin record and
   * JWT token set conforming to strict authentication schema.
   *
   * Related endpoints: admin login (for existing accounts), admin token
   * refresh, and admin deactivation/approval by super admins.
   *
   * @param connection
   * @param body Administrator registration data
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IAtsRecruitmentSystemAdmin.IJoin,
  ): Promise<IAtsRecruitmentSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin account and return tokens
   * (ats_recruitment_systemadmins).
   *
   * This operation authenticates a system administrator by validating the email
   * and password hash against the 'ats_recruitment_systemadmins' table.
   *
   * It ensures the provided email exists, password_hash matches, and the
   * account is both active (is_active=true) and not soft-deleted
   * (deleted_at=null). Password must be provided as a secure hash; plaintext
   * passwords are never accepted or stored. Failed or successful attempts are
   * logged in the audit system for compliance.
   *
   * On success, issues a full JWT token set for access and refresh, allowing
   * the admin to access privileged parts of the ATS system. Non-existent
   * accounts, disabled users, and deleted records must return appropriate
   * errors. Responses include the admin's core record and tokens in the
   * 'IAtsRecruitmentSystemAdmin.IAuthorized' structure.
   *
   * Security: Always use timing-safe comparisons for hashes. Abuse prevention
   * if login failed multiple times.
   *
   * Related endpoints: admin registration, admin token refresh, admin password
   * reset if recovery is needed.
   *
   * @param connection
   * @param body Admin login credentials
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IAtsRecruitmentSystemAdmin.ILogin,
  ): Promise<IAtsRecruitmentSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin JWT tokens using a valid refresh token
   * (ats_recruitment_systemadmins).
   *
   * Renews JWT tokens for authenticated ATS system administrators based on a
   * valid, existing refresh token.
   *
   * Refers to the 'ats_recruitment_systemadmins' table and confirms the
   * associated admin account is both enabled and not soft-deleted
   * (is_active=true, deleted_at=null). Refresh tokens are checked for validity,
   * freshness, and revocation in accordance with ATS security policies.
   *
   * On successful verification, generates and returns updated access and
   * refresh tokens, plus the admin profile entity. Facilitates continual secure
   * admin privilege without need for password re-entry. If the refresh token is
   * invalid, expired, or for an inactive/deleted account, returns an error
   * response.
   *
   * Audit and security compliance is strictly enforced on every token refresh.
   * Tokens use standard JWT structure configured for ATS system admin role.
   *
   * Related endpoints: admin login (for new authentication), registration (for
   * onboarding new admins).
   *
   * @param connection
   * @param body Refresh token submission body
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IAtsRecruitmentSystemAdmin.IRefresh,
  ): Promise<IAtsRecruitmentSystemAdmin.IAuthorized> {
    try {
      return await postauthSystemAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
