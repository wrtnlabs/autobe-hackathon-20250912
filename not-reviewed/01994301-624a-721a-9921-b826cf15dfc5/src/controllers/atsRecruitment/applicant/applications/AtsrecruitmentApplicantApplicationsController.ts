import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postatsRecruitmentApplicantApplications } from "../../../../providers/postatsRecruitmentApplicantApplications";
import { ApplicantAuth } from "../../../../decorators/ApplicantAuth";
import { ApplicantPayload } from "../../../../decorators/payload/ApplicantPayload";

import { IAtsRecruitmentApplication } from "../../../../api/structures/IAtsRecruitmentApplication";

@Controller("/atsRecruitment/applicant/applications")
export class AtsrecruitmentApplicantApplicationsController {
  /**
   * Create a new job application record in ats_recruitment_applications
   * (applicant role).
   *
   * This operation allows a job applicant user to submit a new application for
   * an open job posting. All required data—including the applicant's
   * identification (must be authenticated), target job posting, and a resume
   * reference—must be provided as per the AtsRecruitmentApplication.ICreate
   * DTO. The operation prevents duplicate applications for the same posting
   * (enforced via the unique [applicant_id, job_posting_id] constraint in
   * Prisma) and verifies that the posting is currently open to applications.
   *
   * Upon successful submission, the application enters an initial state (e.g.,
   * 'submitted') and timestamps for submission and state tracking are
   * automatically set. The full application object, including all core fields
   * and relationships, is returned as confirmation. Business validation ensures
   * the application window is still open, and all relevant applicant and
   * posting access checks are enforced. Any attempt to apply outside of the
   * permitted window, or duplicate applications, result in business logic
   * errors as per project rules.
   *
   * Audit trails and event notifications are triggered on successful
   * application creation, for use by HR, compliance, and system monitoring.
   *
   * @param connection
   * @param body Application data with target job posting, applicant
   *   identification, and resume reference.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ApplicantAuth()
    applicant: ApplicantPayload,
    @TypedBody()
    body: IAtsRecruitmentApplication.ICreate,
  ): Promise<IAtsRecruitmentApplication> {
    try {
      return await postatsRecruitmentApplicantApplications({
        applicant,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
