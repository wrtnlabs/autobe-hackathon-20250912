import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentApplicantResumes } from "../../../../providers/postatsRecruitmentApplicantResumes";
import { ApplicantAuth } from "../../../../decorators/ApplicantAuth";
import { ApplicantPayload } from "../../../../decorators/payload/ApplicantPayload";
import { putatsRecruitmentApplicantResumesResumeId } from "../../../../providers/putatsRecruitmentApplicantResumesResumeId";
import { deleteatsRecruitmentApplicantResumesResumeId } from "../../../../providers/deleteatsRecruitmentApplicantResumesResumeId";

import { IAtsRecruitmentResume } from "../../../../api/structures/IAtsRecruitmentResume";

@Controller("/atsRecruitment/applicant/resumes")
export class AtsrecruitmentApplicantResumesController {
  /**
   * Register (create) a new applicant resume with parsed and meta-attributes
   * (ats_recruitment_resumes table).
   *
   * Register a new applicant resume, providing both basic meta-information
   * (title, owner/applicant reference) and extracted/parsed structured fields
   * such as name, email, phone, skills JSON, education summary, experience
   * summary, and file reference (if available). The system validates that the
   * applicant is authorized to submit a resume and that required fields are
   * complete, robustly storing both the structured fields and links to file
   * storage as necessary.
   *
   * This operation is restricted to authenticated applicants, allowing them to
   * register their own resume for future job applications or matching.
   * De-duplication and replacement rules apply: an applicant cannot register
   * multiple resumes with the same title, and re-uploads replace the existing
   * record. Sensitive parsed data is handled according to privacy and
   * compliance policies.
   *
   * @param connection
   * @param body Structured data for the new resume, including parsed fields and
   *   file references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ApplicantAuth()
    applicant: ApplicantPayload,
    @TypedBody()
    body: IAtsRecruitmentResume.ICreate,
  ): Promise<IAtsRecruitmentResume> {
    try {
      return await postatsRecruitmentApplicantResumes({
        applicant,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing applicant resume with revised structured content in
   * ats_recruitment_resumes table.
   *
   * This API endpoint enables an authenticated applicant to update their own
   * resume's structured information, including contact, education, experience,
   * and skills records. The endpoint corresponds to the ats_recruitment_resumes
   * table. Applicants may need to update information if initial parsing was
   * incomplete, or if their experience or skills have changed.
   *
   * Only the applicant who owns the resume record may perform updates; others
   * will be denied. All updates are tracked via updated_at timestamps and
   * subject to audit trail logic. The backend checks that the resume is not
   * soft-deleted. Attempts to update unknown or deleted resumes result in clear
   * error messages, following ATS system error and data recovery policies, and
   * business validation ensures all mandatory fields are present.
   *
   * For critical data protection, sensitive fields such as parsed_email,
   * parsed_mobile, and skills_json must be validated and sanitized before
   * update, ensuring privacy compliance and structured data quality.
   * Soft-delete and audit rules defined in the Prisma schema are always
   * respected.
   *
   * @param connection
   * @param resumeId Unique identifier of the resume to update
   * @param body Structured content and updates for the target resume
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":resumeId")
  public async update(
    @ApplicantAuth()
    applicant: ApplicantPayload,
    @TypedParam("resumeId")
    resumeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentResume.IUpdate,
  ): Promise<IAtsRecruitmentResume> {
    try {
      return await putatsRecruitmentApplicantResumesResumeId({
        applicant,
        resumeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an applicant's resume via deleted_at in ats_recruitment_resumes
   * table.
   *
   * This API endpoint allows an authenticated applicant to perform a
   * soft-deletion of their own resume from the system. The deletion action sets
   * the deleted_at field, as defined in the ats_recruitment_resumes table,
   * rather than removing the record from the database.
   *
   * Only the applicant who owns the record can perform this operation. If the
   * resume has already been deleted or does not exist, an appropriate error is
   * returned. All deletions are tracked for compliance purposes; attempted
   * access after deletion will result in a not found or forbidden error, as
   * dictated by system security and privacy rules.
   *
   * This operation supports post-deletion recovery (if allowed by policy) and
   * is compatible with audit requirements for actions on sensitive user
   * documents and personal data.
   *
   * @param connection
   * @param resumeId Unique identifier of the resume to delete (soft)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":resumeId")
  public async erase(
    @ApplicantAuth()
    applicant: ApplicantPayload,
    @TypedParam("resumeId")
    resumeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentApplicantResumesResumeId({
        applicant,
        resumeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
