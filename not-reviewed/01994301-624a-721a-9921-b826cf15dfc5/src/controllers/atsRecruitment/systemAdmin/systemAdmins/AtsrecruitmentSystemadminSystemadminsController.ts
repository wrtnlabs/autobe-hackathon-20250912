import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminSystemAdmins } from "../../../../providers/patchatsRecruitmentSystemAdminSystemAdmins";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/getatsRecruitmentSystemAdminSystemAdminsSystemAdminId";
import { putatsRecruitmentSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/putatsRecruitmentSystemAdminSystemAdminsSystemAdminId";
import { deleteatsRecruitmentSystemAdminSystemAdminsSystemAdminId } from "../../../../providers/deleteatsRecruitmentSystemAdminSystemAdminsSystemAdminId";

import { IPageIAtsRecruitmentSystemAdmin } from "../../../../api/structures/IPageIAtsRecruitmentSystemAdmin";
import { IAtsRecruitmentSystemAdmin } from "../../../../api/structures/IAtsRecruitmentSystemAdmin";

@Controller("/atsRecruitment/systemAdmin/systemAdmins")
export class AtsrecruitmentSystemadminSystemadminsController {
  /**
   * List system administrator accounts with filtering and pagination.
   *
   * Retrieve a paginated and filterable list of system administrator accounts
   * registered on the ATS platform. This endpoint is designed for privileged
   * management screens that require overviews and searching of admin accounts
   * by various criteria (e.g., name, email, is_active status).
   *
   * The response returns summary data for each systemAdmin, making it suitable
   * for use in audit, role assignment, or personnel onboarding/offboarding
   * processes. Only accounts with sufficient permission may execute this query,
   * typically for security, account management, or compliance purposes.
   *
   * Business logic must ensure that sensitive account material (such as
   * password hashes) are excluded from the response. Implementers should
   * support pagination, keyword filtering, is_active filtering, and other
   * fraud/compliance reporting tools as required by operations, referencing the
   * ats_recruitment_systemadmins schema.
   *
   * @param connection
   * @param body Search/filter criteria and paging configuration for systemAdmin
   *   admin account list retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentSystemAdmin.IRequest,
  ): Promise<IPageIAtsRecruitmentSystemAdmin.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminSystemAdmins({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve system administrator account details by ID.
   *
   * Fetch detailed profile information for a single system administrator entity
   * on the ATS platform by their unique UUID. This API provides all core model
   * properties (excluding password hash for security), including
   * creation/update times, is_active and super_admin flags, and identifying
   * fields used for privilege and access escalation flows.
   *
   * This operation is typically used in admin detail screens, compliance
   * inspection, or when managing changes to administrator accounts. System
   * access controls ensure that only authorized admins may call this endpoint
   * and that sensitive data is handled appropriately, in compliance with
   * privileged access and system operations policies.
   *
   * Error handling should confirm existence of the target systemAdmin account,
   * provide meaningful error responses if not found, and ensure all requests
   * are logged in audit trails for compliance and traceability.
   *
   * @param connection
   * @param systemAdminId Unique identifier of the system administrator account
   *   to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemAdminId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentSystemAdmin> {
    try {
      return await getatsRecruitmentSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a system administrator account by ID.
   *
   * Update the details of a target system administrator (systemAdmin) account
   * by its unique UUID. Supported updates typically include the name, is_active
   * status/flag, and super_admin designation for the account, excluding the
   * password hash (which is managed via a separate password reset interface for
   * security reasons).
   *
   * This endpoint is used by privileged personnel to manage administrator
   * lifecycle events, such as role transitions, temporary
   * deactivation/reactivation, or assignment of higher or lower privilege.
   * Business logic must check that operations do not violate redundancy rules
   * (e.g., not demoting or disabling the only remaining admin), and must log
   * all changes in the system's audit trail for compliance and forensic
   * history.
   *
   * Implementers must validate all input attributes, enforce security
   * requirements (such as ensuring the current requestor holds sufficient
   * privilege to make these changes), and return informative error messages on
   * policy-violating or failed attempts.
   *
   * @param connection
   * @param systemAdminId Unique identifier of the system administrator to
   *   update
   * @param body Update payload for modifying a system administrator profile
   *   (excluding password hash)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemAdminId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentSystemAdmin.IUpdate,
  ): Promise<IAtsRecruitmentSystemAdmin> {
    try {
      return await putatsRecruitmentSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-deletes an ATS system administrator (ats_recruitment_systemadmins) by
   * ID, enforcing minimum admin rule.
   *
   * This operation facilitates the removal (deactivation via soft delete) of an
   * ATS system administrator from the 'ats_recruitment_systemadmins' database
   * entity based on their unique identifier. System administrator deletion is
   * strictly permission controlled and subject to compliance auditing â€“ the
   * system ensures that at least two admin accounts remain, and attempts to
   * delete the last admin will result in an error as per business rule.
   *
   * Security considerations enforce that only active super_admins can remove
   * system admin accounts, and all changes are logged in audit trails. The
   * response to this operation is void (no body), reflecting the absence of
   * content; however, operation success/failure is communicated via HTTP status
   * codes (e.g., 204 for success, 403/409 for rule violation).
   *
   * This operation only soft-deletes the admin account by updating the
   * deleted_at field, ensuring compliance with audit and regulatory
   * requirements. It does not perform a hard delete or erase historical
   * activity records from the audit log. Attempting to delete an already
   * deleted or only remaining admin account will result in a controlled error
   * state.
   *
   * @param connection
   * @param systemAdminId Unique identifier (UUID) of the system administrator
   *   to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemAdminId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemAdminId")
    systemAdminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminSystemAdminsSystemAdminId({
        systemAdmin,
        systemAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
