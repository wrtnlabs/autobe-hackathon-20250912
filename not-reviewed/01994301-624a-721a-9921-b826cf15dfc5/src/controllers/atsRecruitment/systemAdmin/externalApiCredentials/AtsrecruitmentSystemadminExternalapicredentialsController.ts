import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminExternalApiCredentials } from "../../../../providers/postatsRecruitmentSystemAdminExternalApiCredentials";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminExternalApiCredentials } from "../../../../providers/patchatsRecruitmentSystemAdminExternalApiCredentials";
import { getatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId } from "../../../../providers/getatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId";
import { putatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId } from "../../../../providers/putatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId";
import { deleteatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId } from "../../../../providers/deleteatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId";

import { IAtsRecruitmentExternalApiCredential } from "../../../../api/structures/IAtsRecruitmentExternalApiCredential";
import { IPageIAtsRecruitmentExternalApiCredential } from "../../../../api/structures/IPageIAtsRecruitmentExternalApiCredential";

@Controller("/atsRecruitment/systemAdmin/externalApiCredentials")
export class AtsrecruitmentSystemadminExternalapicredentialsController {
  /**
   * Create/register a new external API credential
   * (ats_recruitment_external_api_credentials table).
   *
   * Register a new external API credential into the
   * ats_recruitment_external_api_credentials table, enabling secure storage and
   * future management of integration secrets. The operation expects a payload
   * with the credential key, service name, encrypted credential JSON,
   * expiration details, and an optional business-purpose description. Upon
   * successful creation, an audit record is generated for compliance tracking.
   *
   * Access is restricted to systemAdmin users to safeguard secrets. Related
   * endpoints support credential querying, updating, and (soft) deletion for
   * secret rotation. The response includes the full metadata excluding
   * plaintext credentials, confirming secure creation. If a credential key
   * already exists, an error is returned. Input validation enforces business
   * rules for service naming, expiration logic, and unique key assignment.
   *
   * @param connection
   * @param body Information required to create/register a new external API
   *   credential.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentExternalApiCredential.ICreate,
  ): Promise<IAtsRecruitmentExternalApiCredential> {
    try {
      return await postatsRecruitmentSystemAdminExternalApiCredentials({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list external API credentials
   * (ats_recruitment_external_api_credentials table).
   *
   * Fetch a filtered and paginated list of external API credentials stored in
   * the ats_recruitment_external_api_credentials table. System administrators
   * use this endpoint to audit, manage rotations, or validate integration
   * credentials used by the ATS platform. Filtering options may include
   * credential key, service name, and expiration status.
   *
   * The response is paginated and may include metadata about the secret
   * (excluding plaintext values), business usage description, and expiration
   * details. Related endpoints such as credential creation, detail view, and
   * deletion are used to extend the integration lifecycle. Only users with
   * systemAdmin role may access this operation due to security-sensitive
   * nature.
   *
   * @param connection
   * @param body Criteria for searching/filtering and paginating external API
   *   credentials.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentExternalApiCredential.IRequest,
  ): Promise<IPageIAtsRecruitmentExternalApiCredential.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminExternalApiCredentials({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View external API credential detail
   * (ats_recruitment_external_api_credentials table).
   *
   * Retrieve full metadata for an external API credential in the
   * ats_recruitment_external_api_credentials table (not including the raw
   * credential secret), by specifying its credential ID in the path parameter.
   * System administrators use this endpoint for troubleshooting, auditing, or
   * regenerating integration keys.
   *
   * The operation is restricted to systemAdmin users due to the sensitive
   * nature of the information. The endpoint provides reference details such as
   * credential key, service, description, expiration, and audit/conformity
   * metadata. If the credential does not exist or is deleted, a precise error
   * is returned. Related endpoints include credentials list search, create,
   * update, and (soft) delete.
   *
   * @param connection
   * @param externalApiCredentialId Unique identifier (UUID) of the external API
   *   credential to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalApiCredentialId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalApiCredentialId")
    externalApiCredentialId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentExternalApiCredential> {
    try {
      return await getatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId(
        {
          systemAdmin,
          externalApiCredentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an external API credential configuration in
   * ats_recruitment_external_api_credentials table.
   *
   * Update the specified external API credential configuration in the ATS
   * platform. This API operation allows a system administrator to replace,
   * rotate, or update the contents of an existing credential, such as updating
   * OAuth tokens for Google Calendar integration, or rotating the SendGrid API
   * key used for notifications.
   *
   * This operation enforces strict access controlâ€”the user must have the
   * "systemAdmin" role. The target credential must exist and not be
   * soft-deleted. When changes are made, an audit event is recorded.
   *
   * The payload must provide updated values for relevant credential fields:
   * credential_key (unique), service_name, credential_json (with secrets/tokens
   * encrypted), expiration timestamp, and an optional description. Unique
   * constraints on credential_key and referential integrity are ensured.
   *
   * Sensitive information is encrypted at rest and only visible to highly
   * privileged system/admin users. Regular business actors (applicants, HR,
   * tech reviewers) are forbidden from direct access. Attempts to update
   * non-existent or deleted credentials fail with a clear error. Input
   * validation includes credential_key uniqueness, service_name integrity,
   * credential_json format, and optional expires_at (must be in the future or
   * null for unlimited).
   *
   * All updates trigger audit trail entries with before/after snapshots for
   * compliance and traceability. Related endpoints: credential creation (POST
   * /externalApiCredentials), credential retrieval (GET
   * /externalApiCredentials/{id}).
   *
   * @param connection
   * @param externalApiCredentialId UUID for the specific external API
   *   credential to be updated.
   * @param body Updated credential information for the external API integration
   *   credential.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":externalApiCredentialId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalApiCredentialId")
    externalApiCredentialId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentExternalApiCredential.IUpdate,
  ): Promise<IAtsRecruitmentExternalApiCredential> {
    try {
      return await putatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId(
        {
          systemAdmin,
          externalApiCredentialId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an external API credential (flag deleted_at, not hard removal)
   * in ats_recruitment_external_api_credentials table.
   *
   * Perform a soft delete on the specified external API credential record in
   * the ATS platform. This operation is strictly for system administrative
   * purposes and allows a systemAdmin to mark an external API credential as
   * deleted (by setting the deleted_at field). The operation ensures that the
   * credential is logically removed from active use for all subsequent API
   * workflows and integrations, but physically retained for future recovery,
   * compliance reviews, and audit purposes.
   *
   * This deletion does not remove the credential from the database; rather, it
   * flags the credential as deleted. All references in integration logic and
   * ATS business workflows must ignore credentials marked as deleted_at !=
   * null.
   *
   * All actions performed via this endpoint are recorded in audit logs for full
   * traceability, including operation type, actor, and deletion reason/context
   * for security incident response. This endpoint is not available to
   * applicants, HR users, or technical reviewers and enforces access control
   * before mutating the credential entity.
   *
   * Error conditions include referencing a non-existent or already soft-deleted
   * credential, or insufficient permissions. Related endpoints include external
   * API credential creation, update, and credential usage tracking in
   * integration layers.
   *
   * @param connection
   * @param externalApiCredentialId UUID of target external API credential to be
   *   soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":externalApiCredentialId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("externalApiCredentialId")
    externalApiCredentialId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminExternalApiCredentialsExternalApiCredentialId(
        {
          systemAdmin,
          externalApiCredentialId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
