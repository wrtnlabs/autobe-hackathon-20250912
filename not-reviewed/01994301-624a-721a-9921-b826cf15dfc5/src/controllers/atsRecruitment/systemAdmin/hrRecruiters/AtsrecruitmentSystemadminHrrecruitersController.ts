import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminHrRecruiters } from "../../../../providers/patchatsRecruitmentSystemAdminHrRecruiters";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminHrRecruitersHrRecruiterId } from "../../../../providers/getatsRecruitmentSystemAdminHrRecruitersHrRecruiterId";
import { putatsRecruitmentSystemAdminHrRecruitersHrRecruiterId } from "../../../../providers/putatsRecruitmentSystemAdminHrRecruitersHrRecruiterId";
import { deleteatsRecruitmentSystemAdminHrRecruitersHrRecruiterId } from "../../../../providers/deleteatsRecruitmentSystemAdminHrRecruitersHrRecruiterId";

import { IPageIAtsRecruitmentHrRecruiter } from "../../../../api/structures/IPageIAtsRecruitmentHrRecruiter";
import { IAtsRecruitmentHrRecruiter } from "../../../../api/structures/IAtsRecruitmentHrRecruiter";

@Controller("/atsRecruitment/systemAdmin/hrRecruiters")
export class AtsrecruitmentSystemadminHrrecruitersController {
  /**
   * Search and retrieve a paginated list of HR recruiters from
   * ats_recruitment_hrrecruiters.
   *
   * Lists and searches HR recruiter accounts according to advanced filtering
   * and pagination criteria. Only users with proper authorization, typically
   * system administrators, can use this operation to view and manage HR user
   * lists. Supported filters include name, email, department, account status,
   * and registration date. Sorting and pagination are required to handle large
   * account sets efficiently.
   *
   * Returned recruiter information includes profile name, email, department,
   * account status (is_active) and audit dates but never includes credentials
   * or password hashes. Search access is logged for administrative forensics
   * and privacy compliance. Public or applicant users cannot access this
   * endpoint. Related endpoints allow administrators to manage or view
   * individual HR accounts in detail.
   *
   * @param connection
   * @param body Filtering, searching, and pagination criteria for HR recruiter
   *   account search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentHrRecruiter.IRequest,
  ): Promise<IPageIAtsRecruitmentHrRecruiter.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminHrRecruiters({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed HR recruiter account by unique identifier from
   * ats_recruitment_hrrecruiters.
   *
   * Returns detailed information for one HR recruiter account, enabling system
   * admins to review account status, department details, name, and profile
   * audit details. Email, name, and department fields are returned but security
   * credentials including password hashes are strictly excluded from the
   * response for security compliance.
   *
   * This operation is necessary for administrative UI, support operations, and
   * compliance verification. The endpoint is access-controlled to only system
   * administrators for privacy and security. Any access to this data is logged
   * in audit trails for regulatory and business record keeping. Attempting to
   * access a non-existent account should return a clear error response.
   *
   * @param connection
   * @param hrRecruiterId Unique identifier (UUID) of the HR recruiter account
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":hrRecruiterId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("hrRecruiterId")
    hrRecruiterId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentHrRecruiter> {
    try {
      return await getatsRecruitmentSystemAdminHrRecruitersHrRecruiterId({
        systemAdmin,
        hrRecruiterId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an HR recruiter account's profile details in
   * ats_recruitment_hrrecruiters.
   *
   * Performs an account modification on a targeted HR recruiter record,
   * enabling updates to name, department, and is_active status, but never
   * direct updates of password hashes or security credentials. All
   * modifications are tracked for audit compliance, including before-and-after
   * state information for regulatory record keeping.
   *
   * This endpoint is access-restricted to system administrators, ensuring only
   * privileged users may perform account profile changes. All update events are
   * recorded in audit trails and may trigger notification workflows if account
   * status or department changes. Related endpoints support searching, viewing,
   * or deactivating HR recruiter accounts. If the specified account does not
   * exist, a clear error response is provided.
   *
   * @param connection
   * @param hrRecruiterId Unique identifier (UUID) of the HR recruiter account
   *   to be updated.
   * @param body Updated HR recruiter account profile fields (except password)
   *   to apply.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":hrRecruiterId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("hrRecruiterId")
    hrRecruiterId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentHrRecruiter.IUpdate,
  ): Promise<IAtsRecruitmentHrRecruiter> {
    try {
      return await putatsRecruitmentSystemAdminHrRecruitersHrRecruiterId({
        systemAdmin,
        hrRecruiterId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Deactivate (soft-delete) an HR recruiter account by ID in
   * ats_recruitment_hrrecruiters.
   *
   * This API endpoint allows system administrators to deactivate and mark as
   * deleted a specific HR recruiter account. The operation targets the
   * 'ats_recruitment_hrrecruiters' table, and performs a soft-delete by setting
   * the 'deleted_at' field, which ensures business auditability and
   * traceability in compliance with legal and HR best practices.
   *
   * System admins must use this endpoint when an HR staff member leaves the
   * company, changes roles, or loses system privileges. The deletion preserves
   * historical data about managed job postings, applications, and related audit
   * trails, while preventing future logins from the deleted account. The
   * process also updates the 'is_active' flag as needed.
   *
   * The operation is restricted to systemAdmin roles, reflecting high security
   * requirements. Attempts to delete the last remaining admin or currently
   * active session will result in an error. Soft-deletion allows for recovery
   * or compliance review.
   *
   * Related endpoints: list HR recruiters, create HR recruiter, view HR
   * recruiter details. Error cases include attempting to delete already deleted
   * or non-existent accounts, and insufficient privileges.
   *
   * @param connection
   * @param hrRecruiterId Unique identifier of HR recruiter to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":hrRecruiterId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("hrRecruiterId")
    hrRecruiterId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminHrRecruitersHrRecruiterId({
        systemAdmin,
        hrRecruiterId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
