import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminDataDeletionLogs } from "../../../../providers/patchatsRecruitmentSystemAdminDataDeletionLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminDataDeletionLogsDataDeletionLogId } from "../../../../providers/getatsRecruitmentSystemAdminDataDeletionLogsDataDeletionLogId";

import { IPageIAtsRecruitmentDataDeletionLog } from "../../../../api/structures/IPageIAtsRecruitmentDataDeletionLog";
import { IAtsRecruitmentDataDeletionLog } from "../../../../api/structures/IAtsRecruitmentDataDeletionLog";

@Controller("/atsRecruitment/systemAdmin/dataDeletionLogs")
export class AtsrecruitmentSystemadminDatadeletionlogsController {
  /**
   * Search and retrieve paginated data deletion logs for compliance audit
   * (ats_recruitment_data_deletion_logs table).
   *
   * System administrators and compliance officers use this API operation to
   * query and review the history of all sensitive data deletion events, such as
   * user account removal, GDPR 'right to be forgotten' processing,
   * admin-initiated purges, and policy-driven automated deletions. Logs
   * indicate the actor/requestor, data class, deletion reason, timestamp, and
   * the specific data ID affected. Full search, filtering, and pagination are
   * supported to meet business, audit, and regulatory needs. Only users with
   * the systemAdmin role or compliance approval can access this data.
   *
   * Returned data is exportable to support audit evidence and reporting duties.
   * Log detail includes any retention/anonymization notes as mandated by
   * internal and external policy. The endpoint is commonly used alongside data
   * deletion details endpoints, compliance dashboards, and export mechanisms.
   * Redaction is enforced if required by policy.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for deletion log
   *   retrieval (by actor, target data, date, reason, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentDataDeletionLog.IRequest,
  ): Promise<IPageIAtsRecruitmentDataDeletionLog.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminDataDeletionLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific data deletion log event
   * (ats_recruitment_data_deletion_logs table).
   *
   * Use this API endpoint to obtain a detailed, immutable snapshot of a
   * specific data deletion event within the ATS. Details include the
   * user/system that initiated the deletion, what data type and record was
   * deleted, when it occurred, for what reason, and any final note about the
   * deletion outcome (e.g., full removal, anonymization, archiving). This is
   * critical for confirming GDPR and internal compliance, incident
   * investigation, and providing external audit evidence.
   *
   * Read access is limited to systemAdmin users or authorized auditors;
   * retrieval by unauthorized roles is denied. Typical workflow: query/filter
   * using the list endpoint, then inspect this detailed event. The record is
   * read-only; no update or deletion is permitted through this endpoint.
   * Combined with list and export APIs, it provides a complete audit trail for
   * all regulated deletion activity.
   *
   * @param connection
   * @param dataDeletionLogId Unique identifier (UUID) for the target data
   *   deletion log record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dataDeletionLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("dataDeletionLogId")
    dataDeletionLogId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentDataDeletionLog> {
    try {
      return await getatsRecruitmentSystemAdminDataDeletionLogsDataDeletionLogId(
        {
          systemAdmin,
          dataDeletionLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
