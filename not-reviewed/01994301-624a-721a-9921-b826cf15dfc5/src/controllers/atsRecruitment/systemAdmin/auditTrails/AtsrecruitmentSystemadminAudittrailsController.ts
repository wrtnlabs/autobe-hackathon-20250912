import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminAuditTrails } from "../../../../providers/patchatsRecruitmentSystemAdminAuditTrails";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminAuditTrailsAuditTrailId } from "../../../../providers/getatsRecruitmentSystemAdminAuditTrailsAuditTrailId";

import { IPageIAtsRecruitmentAuditTrails } from "../../../../api/structures/IPageIAtsRecruitmentAuditTrails";
import { IAtsRecruitmentAuditTrails } from "../../../../api/structures/IAtsRecruitmentAuditTrails";
import { IAtsRecruitmentAuditTrail } from "../../../../api/structures/IAtsRecruitmentAuditTrail";

@Controller("/atsRecruitment/systemAdmin/auditTrails")
export class AtsrecruitmentSystemadminAudittrailsController {
  /**
   * Search and retrieve paginated audit trails for all
   * administrative/configuration events (ats_recruitment_audit_trails table).
   *
   * This endpoint delivers a paginated and filterable list of audit trails for
   * the ATS system, as recorded in the ats_recruitment_audit_trails table. It
   * supports robust querying on actor ID, operation types (e.g., CREATE,
   * UPDATE, DELETE, ACCESS), target types, time ranges, and partial/full-text
   * event details (using trigram search where enabled).
   *
   * The audit log index is vital for compliance and security review, supporting
   * internal and external audit requirements for configuration changes,
   * sensitive data access, and administrative actions. All API activity,
   * business object modifications, and system events are chronologically
   * archived and available to system administrators.
   *
   * Access to this API is strictly restricted to the "systemAdmin" role for
   * security and data privacy reasons. Requests specify search parameters,
   * pagination options, and sorting preferences, returning a paged set of audit
   * trail entries and associated metadata for review or download.
   *
   * @param connection
   * @param body Search and filter parameters for querying audit logs (actor,
   *   operation, time range, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentAuditTrails.IRequest,
  ): Promise<IPageIAtsRecruitmentAuditTrails> {
    try {
      return await patchatsRecruitmentSystemAdminAuditTrails({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific audit trail entry by its ID from
   * ats_recruitment_audit_trails.
   *
   * This operation fetches a single, detailed audit trail entry from the ATS
   * Audit Log using the primary key. The audit log record comprises information
   * such as event timestamp, actor information, operation type, affected target
   * and its type, event detail, IP address, and user agent string.
   *
   * Access is strictly limited to users with the systemAdmin role due to the
   * sensitivity and confidentiality of audit data, in compliance with audit and
   * security requirements. The response structure mirrors the full schema of
   * ats_recruitment_audit_trails, ensuring all relevant metadata for incident
   * investigation is included.
   *
   * Error handling: Returns 404 if the specified auditTrailId does not exist or
   * caller lacks permission; all access attempts are further audited for
   * compliance logging.
   *
   * @param connection
   * @param auditTrailId Unique identifier of the audit trail record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditTrailId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("auditTrailId")
    auditTrailId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentAuditTrail> {
    try {
      return await getatsRecruitmentSystemAdminAuditTrailsAuditTrailId({
        systemAdmin,
        auditTrailId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
