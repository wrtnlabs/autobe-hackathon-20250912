import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getatsRecruitmentSystemAdminJobSkillsJobSkillId } from "../../../../providers/getatsRecruitmentSystemAdminJobSkillsJobSkillId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { putatsRecruitmentSystemAdminJobSkillsJobSkillId } from "../../../../providers/putatsRecruitmentSystemAdminJobSkillsJobSkillId";
import { deleteatsRecruitmentSystemAdminJobSkillsJobSkillId } from "../../../../providers/deleteatsRecruitmentSystemAdminJobSkillsJobSkillId";
import { postatsRecruitmentSystemAdminJobSkills } from "../../../../providers/postatsRecruitmentSystemAdminJobSkills";
import { patchatsRecruitmentSystemAdminJobSkills } from "../../../../providers/patchatsRecruitmentSystemAdminJobSkills";

import { IAtsRecruitmentJobSkill } from "../../../../api/structures/IAtsRecruitmentJobSkill";
import { IPageIAtsRecruitmentJobSkill } from "../../../../api/structures/IPageIAtsRecruitmentJobSkill";

@Controller("/atsRecruitment/systemAdmin/jobSkills")
export class AtsrecruitmentSystemadminJobskillsController {
  /**
   * Retrieve information about a single job skill by ID
   * (ats_recruitment_job_skills).
   *
   * Returns complete information about a job skill, including name,
   * description, status, creation and update timestamps. The record is
   * identified by its jobSkillId, which must be a valid UUID for a job skill
   * currently present in the system. The response includes all
   * business-relevant metadata necessary for display and possible analysis.
   *
   * Accessible to system administrators, HR recruiters, and technical
   * reviewers, but write operations are not permitted through this endpoint.
   * Attempts to access a non-existent or deleted job skill return a not found
   * error. Audit logging of the access event is recommended for compliance.
   *
   * This API is typically used in admin/support dashboards or job skill
   * reference dialogs for efficient skill management and data quality
   * improvement.
   *
   * @param connection
   * @param jobSkillId Unique identifier of the job skill to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobSkillId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobSkillId")
    jobSkillId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentJobSkill> {
    try {
      return await getatsRecruitmentSystemAdminJobSkillsJobSkillId({
        systemAdmin,
        jobSkillId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of a job skill (ats_recruitment_job_skills) by ID.
   *
   * This endpoint enables authorized HR recruiters, system administrators, or
   * technical reviewers to update the details of a specific job skill. It
   * supports changes to the skill name, description, and status
   * (active/inactive) for improved recruitment workflows and tech stack
   * normalization.
   *
   * Only users with write permissions (systemAdmin, hrRecruiter) can access
   * this operation. Attempting to update non-existent, deleted, or inactive
   * skills will result in a clear error response, and all updates are tracked
   * in the audit trail for security and compliance.
   *
   * Skill name uniqueness is enforced, and changing it may impact job postings
   * or application skill matching. If a name already exists, the operation
   * rejects the change. "deleted_at" column indicates soft removal; updates are
   * not allowed on deleted skills.
   *
   * This API operation is crucial for maintaining a clean and current master
   * skills list and supporting continuous improvement of job requirement
   * management.
   *
   * @param connection
   * @param jobSkillId Unique identifier of the job skill to update
   * @param body Updated attributes for the job skill, such as name, status, or
   *   description
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jobSkillId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobSkillId")
    jobSkillId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentJobSkill.IUpdate,
  ): Promise<IAtsRecruitmentJobSkill> {
    try {
      return await putatsRecruitmentSystemAdminJobSkillsJobSkillId({
        systemAdmin,
        jobSkillId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a job skill entry by ID (ats_recruitment_job_skills).
   *
   * Allows a system administrator to permanently remove a job skill from the
   * system. The targeted skill is identified by its unique ID. This is a hard
   * delete: the record is fully removed and cannot be recovered. Attempts to
   * remove a skill in active use (referenced by job postings or applications)
   * may fail with a clearly described error.
   *
   * The operation is restricted to system administrators, reflecting the
   * significant impact of removing skills on job requirements, analytics, and
   * application evaluation. A successful deletion is also audited for
   * compliance. The "deleted_at" column is set if using soft delete, but in the
   * API context this endpoint executes a full removal from the data store.
   *
   * @param connection
   * @param jobSkillId Unique identifier of the job skill to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jobSkillId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobSkillId")
    jobSkillId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminJobSkillsJobSkillId({
        systemAdmin,
        jobSkillId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new job skill (ats_recruitment_job_skills) for job posting and
   * talent matching.
   *
   * This endpoint enables authorized users (HR recruiters or admins) to
   * register a new job skill in the system, such as programming languages,
   * libraries, frameworks, or other technical competencies relevant for
   * recruitment.
   *
   * Security considerations: Only HR recruiters or system administrators should
   * be able to create new job skills, as these influence applicant evaluation
   * and job posting requirements. Creation events should be logged for future
   * auditability.
   *
   * Skill names must be globally unique within the system; the endpoint should
   * perform validation to prevent duplicates. The request body should follow
   * the IAtsRecruitmentJobSkill.ICreate type.
   *
   * Upon success, the response returns the full job skill entity including id,
   * name, description, is_active flag, and timestamp fields as defined in the
   * ats_recruitment_job_skills table.
   *
   * @param connection
   * @param body New job skill information to register in the system.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobSkill.ICreate,
  ): Promise<IAtsRecruitmentJobSkill> {
    try {
      return await postatsRecruitmentSystemAdminJobSkills({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve list of job skills (ats_recruitment_job_skills) with
   * filtering, sorting, and pagination.
   *
   * Enables authorized users to perform advanced search and listing of job
   * skills defined in the ATS platform. Filtering options include name (partial
   * match), is_active status, and description keywords. Results are returned in
   * a paginated format, supporting customizable page size and sort order.
   *
   * This API is used by system administrators and HR to maintain a clean skills
   * dictionary, identify deprecated or missing skills, and to summarize
   * available technologies for job posting creation or analytics. Rate limiting
   * and authorization controls apply to prevent unapproved access or data
   * abuse. Responses use a summary DTO for display lists, and may include
   * metadata such as total count.
   *
   * Attempting to query with invalid filters or sort parameters returns user
   * guidance in the error payload. All returned skills reflect the current
   * active status and are unique by name.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for job skills listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobSkill.IRequest,
  ): Promise<IPageIAtsRecruitmentJobSkill.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminJobSkills({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
