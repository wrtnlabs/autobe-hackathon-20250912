import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminAccessLogs } from "../../../../providers/patchatsRecruitmentSystemAdminAccessLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminAccessLogsAccessLogId } from "../../../../providers/getatsRecruitmentSystemAdminAccessLogsAccessLogId";

import { IPageIAtsRecruitmentAccessLog } from "../../../../api/structures/IPageIAtsRecruitmentAccessLog";
import { IAtsRecruitmentAccessLog } from "../../../../api/structures/IAtsRecruitmentAccessLog";

@Controller("/atsRecruitment/systemAdmin/accessLogs")
export class AtsrecruitmentSystemadminAccesslogsController {
  /**
   * Search and retrieve paginated access logs for ATS data access audit
   * (ats_recruitment_access_logs table).
   *
   * This API operation enables authorized administrators and auditors to query
   * the complete access history of sensitive recruitment data within the ATS
   * system. It supports complex filtering and search on actor type (applicant,
   * recruiter, reviewer, admin, system), access target (resume, application,
   * interview, credentials, etc.), access reason (normal operation, audit,
   * compliance, incident investigation), and flexible date range queries. Full
   * pagination and sorting are supported for high-volume log review.
   *
   * Authorization controls restrict this endpoint to users with explicit
   * audit/compliance roles, as log data can expose sensitive system behavior.
   * Data returned is read-only and cannot be manipulated via this endpoint.
   * Each access log entry adheres to the normalized schema field definitions,
   * including target IDs, timestamps, and contextual device/network
   * information.
   *
   * The access logs table is foundational for regulatory compliance (e.g.,
   * GDPR, internal policy, client audits), fraud detection, and breach
   * investigation. This endpoint is typically used in concert with other admin
   * tools such as single log record lookup, export, and audit attestation
   * workflows. All returned data is subject to redaction/masking policies where
   * required.
   *
   * @param connection
   * @param body Query, filter, and pagination criteria for searching access
   *   logs (by actor, data type, time range, access reason, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentAccessLog.IRequest,
  ): Promise<IPageIAtsRecruitmentAccessLog.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminAccessLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed single access log record for audit/compliance
   * (ats_recruitment_access_logs table).
   *
   * Use this API to obtain the complete details of a single data access event
   * for security, audit, or compliance review purposes. The payload includes
   * the actor who accessed the data, their role, the specific data type and
   * record accessed, when and from where the access occurred, and any provided
   * business/system reason. Data is returned as a read-only, immutable record
   * for audit trail purposes. The accessLogId provided must match an existing
   * record; attempts to access logs without sufficient permission or for
   * deleted/invalid IDs will result in error.
   *
   * Access is strictly limited to system administrators or explicitly
   * authorized compliance auditors. The endpoint integrates with monitoring
   * dashboards, incident response playbooks, and audit reconciliation tools.
   * Combined with list endpoints and export workflows, it supports full
   * compliance lifecycle and business policy enforcement for data usage
   * transparency.
   *
   * @param connection
   * @param accessLogId Unique identifier (UUID) of the access log record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":accessLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("accessLogId")
    accessLogId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentAccessLog> {
    try {
      return await getatsRecruitmentSystemAdminAccessLogsAccessLogId({
        systemAdmin,
        accessLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
