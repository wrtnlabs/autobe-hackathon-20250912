import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminMaskingLogs } from "../../../../providers/patchatsRecruitmentSystemAdminMaskingLogs";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminMaskingLogsMaskingLogId } from "../../../../providers/getatsRecruitmentSystemAdminMaskingLogsMaskingLogId";

import { IPageIAtsRecruitmentMaskingLog } from "../../../../api/structures/IPageIAtsRecruitmentMaskingLog";
import { IAtsRecruitmentMaskingLog } from "../../../../api/structures/IAtsRecruitmentMaskingLog";

@Controller("/atsRecruitment/systemAdmin/maskingLogs")
export class AtsrecruitmentSystemadminMaskinglogsController {
  /**
   * Retrieve a paginated, filterable list of data masking log records from the
   * ats_recruitment_masking_logs table.
   *
   * Query the system's ats_recruitment_masking_logs table to retrieve a
   * paginated, filterable list of all data masking events. Each log entry
   * includes metadata such as the actor who performed masking, the type and ID
   * of masked data (e.g., resume, contact info), timestamp, and masking reason.
   * This allows administrators and compliance officers to efficiently audit
   * which data has been masked, by whom, and for what purpose, as required for
   * privacy regulations such as GDPR.
   *
   * Only users with system administrator (systemAdmin) privileges may access
   * this API endpoint, ensuring sensitive data masking activity is not exposed
   * to unauthorized actors. The operation supports advanced filtering (by
   * reason, actor, type, date range) and sorting to allow rapid investigative
   * or compliance reporting. Proper validation ensures only authorized access
   * and input parameters are enforced to avoid leaking sensitive audit
   * information. Detailed error handling should return appropriate messages for
   * authorization errors or invalid queries.
   *
   * The API uses the IAtsRecruitmentMaskingLog.IRequest DTO for
   * search/filtering input and responds with a paginated summary list using the
   * IPageIAtsRecruitmentMaskingLog.ISummary DTO.
   *
   * @param connection
   * @param body Query criteria and pagination options for masking log search.
   *   Supports filtering by type, actor, masking reason, and date range.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentMaskingLog.IRequest,
  ): Promise<IPageIAtsRecruitmentMaskingLog.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminMaskingLogs({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific data masking log record.
   *
   * Given a unique maskingLogId, this API looks up and returns the complete
   * detail of a specific masking log entry from the
   * ats_recruitment_masking_logs table. The response includes masking
   * timestamp, masked_by_id and type, target data type and ID, masking reason,
   * and all relevant metadata.
   *
   * Access is strictly restricted to system administrators (systemAdmin)
   * because masking log data may reveal sensitive information about data
   * privacy events and actors. This operation supports audit investigations and
   * compliance reviews, providing a full historical record necessary for
   * regulatory documentation or privacy incident response. Proper validation
   * checks that the maskingLogId exists and the requester is authorized before
   * returning details. If no such log entry exists, an appropriate error
   * message is returned.
   *
   * Related operations include the paginated masking log list (PATCH
   * /maskingLogs) and similar audit endpoints for deletion and access logs.
   *
   * @param connection
   * @param maskingLogId Unique identifier of the masking log record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":maskingLogId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("maskingLogId")
    maskingLogId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentMaskingLog> {
    try {
      return await getatsRecruitmentSystemAdminMaskingLogsMaskingLogId({
        systemAdmin,
        maskingLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
