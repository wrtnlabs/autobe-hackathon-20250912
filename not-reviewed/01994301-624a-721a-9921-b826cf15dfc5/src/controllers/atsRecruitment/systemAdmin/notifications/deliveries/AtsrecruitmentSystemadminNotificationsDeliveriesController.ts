import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries } from "../../../../../providers/postatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries } from "../../../../../providers/patchatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries";
import { getatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId } from "../../../../../providers/getatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId";
import { putatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId } from "../../../../../providers/putatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId";

import { IAtsRecruitmentNotificationDelivery } from "../../../../../api/structures/IAtsRecruitmentNotificationDelivery";
import { IPageIAtsRecruitmentNotificationDelivery } from "../../../../../api/structures/IPageIAtsRecruitmentNotificationDelivery";

@Controller(
  "/atsRecruitment/systemAdmin/notifications/:notificationId/deliveries",
)
export class AtsrecruitmentSystemadminNotificationsDeliveriesController {
  /**
   * Create a new log entry for a notification delivery attempt
   * (ats_recruitment_notification_deliveries table) under a notification
   * event.
   *
   * This API creates a new notification delivery attempt entry for a specific
   * notification, logging the delivery channel, recipient address, initial
   * status, and other relevant details into the
   * ats_recruitment_notification_deliveries table. Business logic enforces
   * channel type validation, address format checks (e.g., valid email/phone),
   * and proper initial status, with all attempts indexed for compliance.
   *
   * Only authorized users—system administrators or HR recruiters—can record a
   * delivery attempt, preventing unauthorized audits or spoofing of delivery
   * results. Full details are recorded in accordance with business and audit
   * requirements, and each attempt is tracked with a delivery_attempt counter
   * for retry logic.
   *
   * Related endpoints include GET/PUT/DELETE for individual delivery attempts
   * and listing or searching notification deliveries. Errors for invalid
   * references, duplicate entries, or broken business rules are returned with
   * descriptive, actionable messages.
   *
   * @param connection
   * @param notificationId UUID for the parent notification to which this
   *   delivery is linked
   * @param body Data describing the new notification delivery attempt,
   *   including channel, address, and current status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentNotificationDelivery.ICreate,
  ): Promise<IAtsRecruitmentNotificationDelivery> {
    try {
      return await postatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries(
        {
          systemAdmin,
          notificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/search delivery attempts for a notification by notificationId
   * (ats_recruitment_notification_deliveries).
   *
   * This operation fetches a paginated, filterable list of delivery attempts
   * for a specified notification event (identified by notificationId). Return
   * results include delivery channel, recipient address, status, result detail,
   * and timestamp fields. Filtering and pagination support troubleshooting of
   * failed/cancelled deliveries, compliance auditing, and analytics of
   * notification reliability and recipient reachability.
   *
   * Only authorized system roles (systemAdmin, hrRecruiter) can view delivery
   * logs for notifications, with proper checks on both notification existence
   * and caller privilege. The operation is business-read-only: it does not
   * modify delivery state but supports cross-channel history review. Results
   * may be sorted by delivered_at, channel, or attempt number. Response is a
   * paged container of delivery records (summaries).
   *
   * Sensitive delivery result details are included only for users with
   * systemAdmin role, and logs are subject to business data retention and
   * privacy policies. Access is audited for incident and compliance tracing.
   * Downstream investigation of failed notifications can be triggered by
   * analyzing the returned data.
   *
   * @param connection
   * @param notificationId ID of target notification for which to retrieve
   *   delivery logs.
   * @param body Criteria for filtering, sorting, and paging notification
   *   delivery logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentNotificationDelivery.IRequest,
  ): Promise<IPageIAtsRecruitmentNotificationDelivery> {
    try {
      return await patchatsRecruitmentSystemAdminNotificationsNotificationIdDeliveries(
        {
          systemAdmin,
          notificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific notification delivery attempt
   * (ats_recruitment_notification_deliveries table) by notification and
   * delivery ID.
   *
   * This operation retrieves a single delivery attempt record associated with a
   * notification from the notification delivery audit log. It returns all
   * primary fields from the ats_recruitment_notification_deliveries table,
   * including delivery_channel, recipient_address, delivery_status,
   * delivery_attempt, completion/failure times, provider result details, and
   * all audit timestamps for analytics and compliance review.
   *
   * Only authorized users (system administrators or recruitment HRs) should be
   * allowed to invoke this operation, as the delivery logs may contain
   * recipient contact data and sensitive status about delivery attempts (such
   * as email, SMS, or phone numbers). Secure access control, masking, and error
   * handling are critical.
   *
   * The operation references the notificationId and deliveryId as unique UUID
   * path parameters, which together identify a specific delivery attempt tied
   * to a notification event. It ensures data is fetched safely, with
   * audit/compliance in mind, and provides a foundation for troubleshooting
   * failed or undelivered notifications—showing full traceability of the
   * notification lifecycle for business and legal purposes.
   *
   * Related endpoints include the notification list and notification delivery
   * POST/PUT to initiate or update a delivery attempt. If an invalid
   * notificationId or deliveryId is provided, or if access is denied, detailed
   * error messages are returned following system compliance guidelines.
   *
   * @param connection
   * @param notificationId Unique identifier for the target notification event
   * @param deliveryId Unique identifier for the specific delivery attempt
   *   record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deliveryId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentNotificationDelivery> {
    try {
      return await getatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId(
        {
          systemAdmin,
          notificationId,
          deliveryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the parameters or status of a notification delivery attempt
   * (ats_recruitment_notification_deliveries table) for a specific deliveryId.
   *
   * Allows privileged actors to update the audit log record of a notification
   * delivery attempt, specifically fields such as delivery_status,
   * recipient_address, delivery_result_detail, delivery_attempt count, and
   * actual delivered/failed timestamps. Used both for business-side manual
   * corrections and automated update flows (such as provider callback
   * updates).
   *
   * Security and access restrictions are enforced, so only systemAdmin and
   * hrRecruiter roles may modify these delivery records. All changes are logged
   * for full auditing, and only mutable fields are editable. Nonexistent or
   * deleted notifications/deliveries result in descriptive error responses, as
   * do failed authentication or rule violations.
   *
   * @param connection
   * @param notificationId UUID of the parent notification event
   * @param deliveryId UUID of the delivery attempt log to update
   * @param body Fields to update for the notification delivery attempt, such as
   *   status, channel, address, and timestamps.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":deliveryId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentNotificationDelivery.IUpdate,
  ): Promise<IAtsRecruitmentNotificationDelivery> {
    try {
      return await putatsRecruitmentSystemAdminNotificationsNotificationIdDeliveriesDeliveryId(
        {
          systemAdmin,
          notificationId,
          deliveryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard-delete a notification delivery attempt record
   * (ats_recruitment_notification_deliveries) by notification and delivery IDs.
   * Permanent removal—no soft delete logic applies.
   *
   * This API permanently deletes a notification delivery attempt record, as
   * identified by the notificationId and deliveryId. This operation should only
   * be available to systemAdmin users, and is primarily used for compliance
   * situations, legacy error correction, or data retention management—not for
   * routine workflow. All such deletions should be accompanied by audit trail
   * updates, and, if required, be justified with an outcome note.
   *
   * No response body is returned for this operation. Any attempt to erase a
   * non-existent or already-removed record will generate an error message in
   * line with system error and compliance guidelines. Standard security and
   * authorization practices are in place, requiring appropriate system-level
   * permissions.
   *
   * @param connection
   * @param notificationId UUID reference for the related notification event
   * @param deliveryId UUID of the notification delivery attempt to permanently
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":deliveryId")
  public async erase(
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    notificationId;
    deliveryId;
    return typia.random<void>();
  }
}
