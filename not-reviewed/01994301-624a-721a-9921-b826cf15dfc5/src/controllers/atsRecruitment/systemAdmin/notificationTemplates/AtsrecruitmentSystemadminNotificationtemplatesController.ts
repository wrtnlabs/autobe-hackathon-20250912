import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminNotificationTemplates } from "../../../../providers/postatsRecruitmentSystemAdminNotificationTemplates";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminNotificationTemplates } from "../../../../providers/patchatsRecruitmentSystemAdminNotificationTemplates";
import { getatsRecruitmentSystemAdminNotificationTemplatesTemplateId } from "../../../../providers/getatsRecruitmentSystemAdminNotificationTemplatesTemplateId";
import { putatsRecruitmentSystemAdminNotificationTemplatesTemplateId } from "../../../../providers/putatsRecruitmentSystemAdminNotificationTemplatesTemplateId";
import { deleteatsRecruitmentSystemAdminNotificationTemplatesTemplateId } from "../../../../providers/deleteatsRecruitmentSystemAdminNotificationTemplatesTemplateId";

import { IAtsRecruitmentNotificationTemplate } from "../../../../api/structures/IAtsRecruitmentNotificationTemplate";
import { IPageIAtsRecruitmentNotificationTemplate } from "../../../../api/structures/IPageIAtsRecruitmentNotificationTemplate";

@Controller("/atsRecruitment/systemAdmin/notificationTemplates")
export class AtsrecruitmentSystemadminNotificationtemplatesController {
  /**
   * Create a new notification template for ATS notification workflows
   * (ats_recruitment_notification_templates).
   *
   * Registers a new notification template in the ATS system, mapping to the
   * ats_recruitment_notification_templates model in the Prisma schema. The
   * required fields include the template_code (unique business key), channel
   * (e.g., email, sms, app_push), title, subject, message body, and is_active
   * flag. This enables flexible control over outgoing communication formats for
   * various business events, such as application status updates, interview
   * scheduling, or export confirmations.
   *
   * Only users with the systemAdmin role are authorized to perform this
   * operation, given the sensitivity of outbound message content. Validation
   * logic ensures the template_code/channel combination is unique, all required
   * fields are present, and content complies with open text input policies.
   *
   * Upon success, the API returns the full created notification template
   * record, which is immediately available for use in notification workflows.
   * Errors return explanatory messages for uniqueness conflicts or content
   * validation issues.
   *
   * @param connection
   * @param body Information for creating a new notification template, including
   *   required business logic fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentNotificationTemplate.ICreate,
  ): Promise<IAtsRecruitmentNotificationTemplate> {
    try {
      return await postatsRecruitmentSystemAdminNotificationTemplates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated and filterable list of notification templates for
   * system-wide notifications (ats_recruitment_notification_templates).
   *
   * Fetches a list of notification templates from the
   * ats_recruitment_notification_templates table, allowing clients to apply
   * filters, sorting, and pagination. This is designed to aid administrators in
   * managing notification templates by channel or message type.
   *
   * Templates can be searched by code, channel, title, and message body using
   * full-text and partial match search. The filter parameters allow system
   * admins to locate templates needing updates, review message content for
   * compliance, or deactivate obsolete templates.
   *
   * Only systemAdmin users have access to this operation, as notification
   * template editing is a privileged administrative function. The response
   * returns template summary data (including IDs, codes, channels, and
   * activation status) for UI listing. Detailed read/edit should use the
   * single-resource endpoint by templateId.
   *
   * Validation includes checking that filtering and sorting fields align with
   * existing template columns, and that pagination parameters remain within
   * service bounds. Error responses return detailed reasons for
   * misconfiguration or excessive result set requests.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for notification
   *   template retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentNotificationTemplate.IRequest,
  ): Promise<IPageIAtsRecruitmentNotificationTemplate.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminNotificationTemplates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed content and configuration for a specific notification
   * template (ats_recruitment_notification_templates).
   *
   * Fetches all available details for a specific notification template,
   * identified by templateId, from the underlying
   * ats_recruitment_notification_templates table. The details include template
   * code, channel, title, subject, message body, status (active/inactive), and
   * creation or update timestamps.
   *
   * Access is restricted to users with systemAdmin role, in support of
   * editorial and compliance responsibilities for outbound communication. The
   * operation is crucial for regulatory audits, reviewing localized or
   * channel-specific content, and preparing template updates.
   *
   * Parameter validation ensures the templateId matches an existing record and
   * is a valid UUID. If the record is not found or access is denied, an
   * appropriate error is returned.
   *
   * @param connection
   * @param templateId Unique identifier of the notification template to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":templateId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentNotificationTemplate> {
    try {
      return await getatsRecruitmentSystemAdminNotificationTemplatesTemplateId({
        systemAdmin,
        templateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the content and configuration of an existing notification template
   * (ats_recruitment_notification_templates).
   *
   * Updates the configuration and message content of a specific notification
   * template identified by templateId, using data provided in the request body.
   * Editable fields include template_code, channel, title, subject, body
   * content, and is_active status, as defined in the Prisma schema. Only
   * systemAdmin users have access to this operation, in line with audit and
   * compliance requirements for outbound communication.
   *
   * The endpoint validates that the specified templateId exists and that
   * proposed changes do not violate field constraints or unique business keys
   * (template_code/channel uniqueness). Content is checked for format,
   * completeness, and compliance with notification delivery standards.
   *
   * Errors during processing provide detailed feedback on why updates failed,
   * especially for uniqueness, field validation, or missing templates. Upon
   * success, returns the fully updated notification template entity.
   *
   * @param connection
   * @param templateId Unique identifier of the notification template to update.
   * @param body Fields and content to update, following business rules and
   *   attribute constraints. Partial or full update is supported.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":templateId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentNotificationTemplate.IUpdate,
  ): Promise<IAtsRecruitmentNotificationTemplate> {
    try {
      return await putatsRecruitmentSystemAdminNotificationTemplatesTemplateId({
        systemAdmin,
        templateId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification template (ats_recruitment_notification_templates) by
   * ID.
   *
   * This endpoint enables system administrators to delete a notification
   * template record, identified by 'templateId', from the notification
   * templates table in the ATS system. Notification templates define the
   * structure and content for various business notifications (email, SMS,
   * etc.), and can only be managed at the system level for traceability and
   * compliance.
   *
   * A successful DELETE operation fully removes the template, its metadata, and
   * disables further use across notification workflows. This may affect linked
   * notifications if the template is still actively referenced.
   *
   * Deleting a template is a privileged operation restricted to system
   * administrators, requiring authentication and full trace logging. Errors may
   * occur if the template does not exist or has already been deleted. The
   * action is also recorded in the audit log for compliance. Associated
   * templates are not recoverable after this operation.
   *
   * @param connection
   * @param templateId Unique identifier of the notification template to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":templateId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminNotificationTemplatesTemplateId(
        {
          systemAdmin,
          templateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
