import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminJobEmploymentTypes } from "../../../../providers/postatsRecruitmentSystemAdminJobEmploymentTypes";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminJobEmploymentTypes } from "../../../../providers/patchatsRecruitmentSystemAdminJobEmploymentTypes";
import { getatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId } from "../../../../providers/getatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId";
import { putatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId } from "../../../../providers/putatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId";
import { deleteatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId } from "../../../../providers/deleteatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId";

import { IAtsRecruitmentJobEmploymentType } from "../../../../api/structures/IAtsRecruitmentJobEmploymentType";
import { IPageIAtsRecruitmentJobEmploymentType } from "../../../../api/structures/IPageIAtsRecruitmentJobEmploymentType";

@Controller("/atsRecruitment/systemAdmin/jobEmploymentTypes")
export class AtsrecruitmentSystemadminJobemploymenttypesController {
  /**
   * Create a new atsRecruitment job employment type.
   *
   * This operation permits creation of a new employment type in the
   * atsRecruitment platform, stored in the ats_recruitment_job_employment_types
   * table. Typical use cases are HR system initialization, expansion to new
   * contract types, or administrative updates of hiring schemas.
   *
   * The request body specifies the mandatory name, description, and active
   * status, ensuring each entry is unique and appropriately documented as per
   * table constraints. The operation enforces business logic such as
   * de-duplication by name (enforced by unique constraint) and provides
   * validation errors when required properties are missing or duplicate.
   *
   * Only system administrators and HR recruiters with appropriate permissions
   * may invoke this endpoint. The response contains all information about the
   * newly created job employment type for display or further reference.
   *
   * @param connection
   * @param body Information about the employment type to register, including
   *   name, description, and active state.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobEmploymentType.ICreate,
  ): Promise<IAtsRecruitmentJobEmploymentType> {
    try {
      return await postatsRecruitmentSystemAdminJobEmploymentTypes({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve job employment types
   * (ats_recruitment_job_employment_types), supporting filter and pagination.
   *
   * Use this endpoint to search and retrieve job employment types that
   * applicants or HR can select when registering job postings. Searching can be
   * filtered by active status, name, or other relevant fields as defined in the
   * schema.
   *
   * Security: Accessible to authenticated HR recruiters or system
   * administrators. Permission is enforced to block unauthorized retrieval for
   * sensitive configuration entities.
   *
   * Paginated results support efficient management and display in admin UIs.
   * The request body specifies IAtsRecruitmentJobEmploymentType.IRequest for
   * filtering and pagination. The response body returns paginated results with
   * metadata, following the IPageIAtsRecruitmentJobEmploymentType.ISummary
   * pattern.
   *
   * @param connection
   * @param body Search and pagination criteria for job employment types.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobEmploymentType.IRequest,
  ): Promise<IPageIAtsRecruitmentJobEmploymentType.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminJobEmploymentTypes({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch a specific atsRecruitment job employment type by ID for detailed
   * viewing.
   *
   * This operation provides detailed information about one job employment type
   * as stored in the ats_recruitment_job_employment_types table. It serves HR
   * recruiters and system admins who need to view current employment types
   * (such as full-time, part-time, contract, internship) associated with job
   * postings.
   *
   * Upon invocation, the endpoint returns the label, status (is_active),
   * description, and metadata of the targeted record, facilitating downstream
   * validation for job posting and reporting flows.
   *
   * Security measures are enforced so only authenticated HR recruiters and
   * system admins can retrieve this data. The operation enforces precise
   * parameter typing and returns a useful object for display and validation in
   * both administrative and business workflows.
   *
   * If the specified jobEmploymentTypeId does not exist, a not found error is
   * returned.
   *
   * @param connection
   * @param jobEmploymentTypeId Unique identifier of the target job employment
   *   type.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobEmploymentTypeId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobEmploymentTypeId")
    jobEmploymentTypeId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentJobEmploymentType> {
    try {
      return await getatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId(
        {
          systemAdmin,
          jobEmploymentTypeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update attributes of an existing atsRecruitment job employment type.
   *
   * This operation enables authorized users (HR recruiters and system
   * administrators) to update the metadata and status of a job employment type
   * record in the ats_recruitment_job_employment_types table. Business
   * scenarios include renaming employment schemes, describing contract-specific
   * policies, or disabling deprecated options.
   *
   * The input requires specifying the unique jobEmploymentTypeId in the path
   * and an update payload containing the changed fields, conforming to the
   * schema's constraints (such as unique name and not null for required
   * attributes). If the update action would violate constraints or the record
   * is not found, appropriate errors are returned.
   *
   * Access control restricts this feature to privileged roles. Auditability and
   * consistency are ensured through the underlying database rules and proper
   * timestamp management by the platform.
   *
   * @param connection
   * @param jobEmploymentTypeId ID of the job employment type to update.
   * @param body Updated employment type info, such as name, description, or
   *   active status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jobEmploymentTypeId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobEmploymentTypeId")
    jobEmploymentTypeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentJobEmploymentType.IUpdate,
  ): Promise<IAtsRecruitmentJobEmploymentType> {
    try {
      return await putatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId(
        {
          systemAdmin,
          jobEmploymentTypeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a job employment type from the atsRecruitment master list.
   *
   * This operation performs a soft delete of the specified job employment type
   * entry, updating the deleted_at field in the
   * ats_recruitment_job_employment_types table to mark it as logically deleted.
   * Soft-deleted entries no longer appear in new job posting workflows or
   * selection lists but are retained for historical and recovery needs.
   *
   * Only HR recruiters and system admins have permission to erase an employment
   * type. If the employment type is currently referenced by job postings,
   * business logic may restrict deletion or require additional validation.
   * Proper audit records and referential integrity are enforced as part of the
   * underlying platform implementation.
   *
   * Attempting to delete a non-existent or already deleted entry will return a
   * not found or conflict error, as appropriate. Hard deletion is not supported
   * except by database administrators per policy.
   *
   * @param connection
   * @param jobEmploymentTypeId ID of the job employment type to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jobEmploymentTypeId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobEmploymentTypeId")
    jobEmploymentTypeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminJobEmploymentTypesJobEmploymentTypeId(
        {
          systemAdmin,
          jobEmploymentTypeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
