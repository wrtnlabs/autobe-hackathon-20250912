import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminApplications } from "../../../../providers/patchatsRecruitmentSystemAdminApplications";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminApplicationsApplicationId } from "../../../../providers/getatsRecruitmentSystemAdminApplicationsApplicationId";
import { putatsRecruitmentSystemAdminApplicationsApplicationId } from "../../../../providers/putatsRecruitmentSystemAdminApplicationsApplicationId";
import { deleteatsRecruitmentSystemAdminApplicationsApplicationId } from "../../../../providers/deleteatsRecruitmentSystemAdminApplicationsApplicationId";

import { IPageIAtsRecruitmentApplication } from "../../../../api/structures/IPageIAtsRecruitmentApplication";
import { IAtsRecruitmentApplication } from "../../../../api/structures/IAtsRecruitmentApplication";

@Controller("/atsRecruitment/systemAdmin/applications")
export class AtsrecruitmentSystemadminApplicationsController {
  /**
   * Search and retrieve a filtered, paginated list of job applications
   * (ats_recruitment_applications).
   *
   * This endpoint enables authorized users (HR recruiters/system
   * administrators) to conduct advanced queries to list all job applications
   * currently registered in the ATS platform. The underlying Prisma model
   * (ats_recruitment_applications) links applications to applicants, job
   * postings, and resumes and features fields such as current_status,
   * submitted_at, and last_state_change_at for filtering, sorting, and paging.
   *
   * Business logic supports filtering applications by status (e.g., submitted,
   * screening, code_test), applicant info, posting title, submission period,
   * and related job attributes to facilitate workflow orchestration. Requests
   * may include search terms, filters, page size, and sorting options
   * encapsulated in the request body. Security restrictions ensure applicants
   * only see their own records, while hrRecruiter and systemAdmin roles have
   * broader system management permissions.
   *
   * This operation supports business analytics, SLA tracking, and helps
   * administer the recruitment funnel, allowing bulk actions, reporting, and
   * export integration. Errors are handled for non-existent filter values or
   * excessive query ranges, with compliance considerations for personal data
   * access.
   *
   * @param connection
   * @param body Search, filter, pagination, and sorting parameters for job
   *   application listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentApplication.IRequest,
  ): Promise<IPageIAtsRecruitmentApplication> {
    try {
      return await patchatsRecruitmentSystemAdminApplications({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a single application by applicationId from
   * ats_recruitment_applications.
   *
   * This operation returns the complete set of information for a specific job
   * application in the ATS system, including applicant linkage, job posting
   * details, resume reference, current status, and the timeline of submission
   * and state changes. The underlying Prisma schema
   * ats_recruitment_applications provides fields for applicant_id,
   * job_posting_id, resume_id, current_status, submission and last_state_change
   * timestamps, and reference to related tables.
   *
   * Access is granted to HR recruiters and system administrators for managerial
   * review, process evaluation, or formal record-keeping. Applicants may access
   * only their own applications, while HR recruiters and system administrators
   * may view all records. The endpoint integrates with feedback, skill
   * matching, and interview scheduling, supporting comprehensive candidate
   * evaluation and workflow progression.
   *
   * Security and privacy controls ensure proper compliance with applicant data
   * access regulations. Attempts to access non-existent or unauthorized
   * application IDs result in structured error responses. Detailed business and
   * audit context for the application are delivered in the response.
   *
   * @param connection
   * @param applicationId Unique identifier of the application to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":applicationId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentApplication> {
    try {
      return await getatsRecruitmentSystemAdminApplicationsApplicationId({
        systemAdmin,
        applicationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific application record in ats_recruitment_applications.
   *
   * Update details of a specific application record in the recruitment
   * platform. This allows HR recruiters or system administrators to modify
   * fields such as the associated resume, application status, or other editable
   * business/personal details tied to the application. Sensitive changes, such
   * as applicant mapping or significant status progression, may require
   * additional validation or checks for concurrent updates or compliance
   * reasons.
   *
   * Access to this operation is restricted to hrRecruiter and systemAdmin
   * roles, reflecting the need for controlled changes to applicant progress and
   * sensitive information. The change will be logged in the audit trail for
   * traceability. Relationships to other tables—such as job postings, resumes,
   * and applicants—are enforced in the business logic, and the update must
   * comply with valid foreign key references (e.g., resumeId must refer to a
   * resume owned by the correct applicant).
   *
   * Fields not present in the update body retain their current values.
   * Validation ensures that changes to status or related fields remain
   * consistent with allowed business transitions and overall data integrity.
   * Any attempt to change immutable application properties or to bypass state
   * checks will be prevented at the service layer. Errors may arise if the
   * application does not exist, is deleted, or if a conflict/consistency
   * violation is detected.
   *
   * @param connection
   * @param applicationId Unique identifier of the target job application
   * @param body Fields and values to update in the application record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":applicationId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplication.IUpdate,
  ): Promise<IAtsRecruitmentApplication> {
    try {
      return await putatsRecruitmentSystemAdminApplicationsApplicationId({
        systemAdmin,
        applicationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (delete) a specific application record by applicationId (admin only).
   *
   * Permanently erase (delete) an application from the system matching the
   * given applicationId. Only system administrators are permitted to perform
   * this operation due to the sensitivity and compliance implications of
   * deleting applicant-job association records.
   *
   * This operation will either perform hard deletion or set the deleted_at
   * timestamp for soft-delete, depending on business retention policy (as per
   * GDPR requirements). Attempts to remove records still in use by other active
   * entities or referenced by logs, or when not permitted by compliance rules,
   * will result in an error.
   *
   * All erasure attempts (success and failure) are recorded in audit/data
   * deletion logs for traceability. Errors may arise for non-existent records,
   * already deleted applications, or compliance violations. Deleted records
   * cannot be recovered unless an explicit recovery/revert workflow exists at
   * the admin level.
   *
   * @param connection
   * @param applicationId Unique identifier of the target job application
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":applicationId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminApplicationsApplicationId({
        systemAdmin,
        applicationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
