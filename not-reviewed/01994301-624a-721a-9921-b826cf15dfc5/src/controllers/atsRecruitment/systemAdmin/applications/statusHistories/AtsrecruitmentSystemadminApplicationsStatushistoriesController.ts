import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistories } from "../../../../../providers/patchatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistories";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistoriesStatusHistoryId } from "../../../../../providers/getatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistoriesStatusHistoryId";

import { IPageIAtsRecruitmentApplicationStatusHistory } from "../../../../../api/structures/IPageIAtsRecruitmentApplicationStatusHistory";
import { IAtsRecruitmentApplicationStatusHistory } from "../../../../../api/structures/IAtsRecruitmentApplicationStatusHistory";

@Controller(
  "/atsRecruitment/systemAdmin/applications/:applicationId/statusHistories",
)
export class AtsrecruitmentSystemadminApplicationsStatushistoriesController {
  /**
   * List all status change histories for an application (paginated,
   * filterable).
   *
   * Fetch a filtered and paginated list of all status change history events for
   * a given application in the recruitment system. This operation supports
   * scenarios where HR recruiters, technical reviewers, or system
   * administrators review the full progression of candidate status transitions,
   * for audit, compliance, and decision support.
   *
   * The operation requires a valid applicationId as a path parameter and
   * accepts an optional filter/search object as the request body for advanced
   * queries (date range, from_status/to_status filters, actor identity, etc).
   * Results are returned in a paginated structure using
   * IAtsRecruitmentApplicationStatusHistory.ISummary. Caller authorization
   * determines the visibility of certain sensitive fields (e.g., actor
   * identity).
   *
   * This endpoint enforces strict access control, and the underlying data is
   * returned from a query joining applications with the status history table.
   * All queries are subject to audit logging. Errors include: application not
   * found, no history available, or unauthorized access attempts. The operation
   * is central to candidate tracking and recruitment process transparency.
   *
   * @param connection
   * @param applicationId Unique identifier of the target job application
   * @param body Advanced status history search and filter query for an
   *   application
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicationStatusHistory.IRequest,
  ): Promise<IPageIAtsRecruitmentApplicationStatusHistory.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistories(
        {
          systemAdmin,
          applicationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific status change history record for an
   * application.
   *
   * Retrieve the detailed information of a single application status change
   * event, including previous and next status values, the actor who performed
   * the transition, timestamps, and any contextual comments. Used to support
   * thorough audits, compliance reviews, and deep dives into candidate
   * progress.
   *
   * Both applicationId and statusHistoryId must be provided as path parameters
   * for unambiguous context and security validation. Only HR recruiters,
   * technical reviewers, or system administrators are authorized to access this
   * detailed view. The record is looked up and returned as
   * IAtsRecruitmentApplicationStatusHistory type, with sensitive fields
   * protected per-caller's role (e.g., actor identity for compliance users).
   *
   * Business logic ensures only users with a direct business relationship
   * (e.g., assigned recruiter) can access sensitive information. Error
   * responses are triggered for not found, unauthorized, or compliance data
   * blocks. This endpoint is essential for supporting transparency and
   * defensible recruitment practices.
   *
   * @param connection
   * @param applicationId Unique identifier of the target job application
   * @param statusHistoryId Unique identifier of the status history event to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":statusHistoryId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedParam("statusHistoryId")
    statusHistoryId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentApplicationStatusHistory> {
    try {
      return await getatsRecruitmentSystemAdminApplicationsApplicationIdStatusHistoriesStatusHistoryId(
        {
          systemAdmin,
          applicationId,
          statusHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
