import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminAuthenticationFailures } from "../../../../providers/patchatsRecruitmentSystemAdminAuthenticationFailures";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminAuthenticationFailuresAuthenticationFailureId } from "../../../../providers/getatsRecruitmentSystemAdminAuthenticationFailuresAuthenticationFailureId";

import { IPageIAtsRecruitmentAuthenticationFailure } from "../../../../api/structures/IPageIAtsRecruitmentAuthenticationFailure";
import { IAtsRecruitmentAuthenticationFailure } from "../../../../api/structures/IAtsRecruitmentAuthenticationFailure";

@Controller("/atsRecruitment/systemAdmin/authenticationFailures")
export class AtsrecruitmentSystemadminAuthenticationfailuresController {
  /**
   * Retrieve paginated, filterable list of authentication failure logs from
   * ats_recruitment_authentication_failures.
   *
   * Query the ats_recruitment_authentication_failures table for a paginated
   * list of failed authentication attempts, including failure reason, attempted
   * user identifier, IP address, user agent, timestamp, and lockout status.
   * This is critical for security teams to identify account abuse, brute-force
   * patterns, and to comply with audit obligations.
   *
   * Only system administrators (systemAdmin) may access this endpoint to
   * prevent exposure of security-sensitive authentication failure data.
   * Supported search filters include attempted username/email, time range,
   * failure reason, and lockout events. The API validates input queries,
   * restricts outputs to authorized users, and provides clear error messaging
   * in case of invalid access or results.
   *
   * This endpoint is related to authentication success logs, access logs, and
   * masking/data deletion logs for a complete security audit picture.
   *
   * @param connection
   * @param body Filtering and pagination criteria for authentication failure
   *   logs, such as user, IP, failure reason, or time window.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentAuthenticationFailure.IRequest,
  ): Promise<IPageIAtsRecruitmentAuthenticationFailure.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminAuthenticationFailures({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed view of a specific authentication failure log by ID.
   *
   * Given a unique authenticationFailureId, this API returns the complete
   * detail of a specific authentication failure event from the
   * ats_recruitment_authentication_failures table, including timestamp,
   * attempted user identity, failure reason, originating IP and user agent, and
   * lockout trigger status. This information is vital for security incident
   * investigation, brute-force analysis, and regulatory compliance.
   *
   * Access is strictly limited to system administrators (systemAdmin) due to
   * the sensitive nature of authentication failure contexts. The API ensures
   * that the provided identifier is valid, that the record exists, and that
   * response details are only delivered to authorized actors. This endpoint
   * supports deep forensic audit scenarios as well as proactive security
   * review. If the identifier does not correspond to an existing failure
   * record, an appropriate error is returned with no sensitive information
   * leakage.
   *
   * This operation is related to the authentication failure list (PATCH
   * /authenticationFailures) and other security/audit endpoints within the
   * system.
   *
   * @param connection
   * @param authenticationFailureId Unique identifier for the authentication
   *   failure log to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":authenticationFailureId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("authenticationFailureId")
    authenticationFailureId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentAuthenticationFailure> {
    try {
      return await getatsRecruitmentSystemAdminAuthenticationFailuresAuthenticationFailureId(
        {
          systemAdmin,
          authenticationFailureId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
