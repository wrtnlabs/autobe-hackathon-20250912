import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminInterviewsInterviewIdSchedules } from "../../../../../providers/postatsRecruitmentSystemAdminInterviewsInterviewIdSchedules";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminInterviewsInterviewIdSchedules } from "../../../../../providers/patchatsRecruitmentSystemAdminInterviewsInterviewIdSchedules";
import { getatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId } from "../../../../../providers/getatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId";
import { putatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId } from "../../../../../providers/putatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId";
import { deleteatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId } from "../../../../../providers/deleteatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId";

import { IAtsRecruitmentInterviewSchedule } from "../../../../../api/structures/IAtsRecruitmentInterviewSchedule";
import { IPageIAtsRecruitmentInterviewSchedule } from "../../../../../api/structures/IPageIAtsRecruitmentInterviewSchedule";

@Controller("/atsRecruitment/systemAdmin/interviews/:interviewId/schedules")
export class AtsrecruitmentSystemadminInterviewsSchedulesController {
  /**
   * Create a new interview schedule slot for a specific interview
   * (ats_recruitment_interview_schedules).
   *
   * This API operation creates a new schedule entry linked to a specific
   * interview in the ATS recruitment platform. The schedule slot includes
   * fields for start and end times (UTC), timezone, source (manual or
   * automated), and confirmation or proposal status. Operation ensures that the
   * referenced interview exists and is active, and checks for time conflicts to
   * prevent overlapping or duplicate booking. Only users assigned as
   * participant roles (HR, applicant, techReviewer) for this interview may
   * invoke this operation.
   *
   * Upon creation, the slot is checked to confirm it does not conflict with
   * existing slots for the interview, and will fail gracefully with a
   * meaningful error if there are duplications or the referenced interview is
   * not eligible for new scheduling. The record stores the reason for any
   * cancellation or status update (e.g., rescheduled, cancelled, confirmed).
   *
   * Security: Only authorized HR recruiters, related applicants, or tech
   * reviewers can add schedules. All invocations are logged in audit trails for
   * compliance and traceability. Related operations are PUT (update slot),
   * DELETE (cancel slot), and PATCH (list slots for interview).
   *
   * @param connection
   * @param interviewId Unique identifier of the target interview for which to
   *   create a new schedule.
   * @param body Details of the interview schedule slot to create, including
   *   start/end time, timezone, schedule source, participant data, and
   *   confirmation status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewSchedule.ICreate,
  ): Promise<IAtsRecruitmentInterviewSchedule> {
    try {
      return await postatsRecruitmentSystemAdminInterviewsInterviewIdSchedules({
        systemAdmin,
        interviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all schedule slots for a specific interview
   * (ats_recruitment_interview_schedules, advanced query).
   *
   * Search and retrieve a filtered, paginated list of interview schedules
   * (slots) for a given interview. This is mapped to the
   * ats_recruitment_interview_schedules table and enables advanced query
   * parameters (such as slot status, creation date, order, etc.).
   *
   * HR recruiters and system administrators can use this API to audit or manage
   * schedules, verify correct slot assignments, identify conflicts (e.g.,
   * double bookings or cancellations), and review past/future slots.
   *
   * Security: Only users with hrRecruiter or systemAdmin roles can access this
   * endpoint. The query allows for flexible retrieval with pagination and
   * filtering, making it suitable for calendar integration, conflict checks, or
   * UI timeline displays.
   *
   * Typical sequence: called before GET schedule by schedule ID for detail
   * view; supports high-level schedule management and reporting needs.
   *
   * @param connection
   * @param interviewId Unique identifier of the interview whose schedules are
   *   being searched.
   * @param body Parameters for advanced search, filtering, and pagination of
   *   interview schedules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewSchedule.IRequest,
  ): Promise<IPageIAtsRecruitmentInterviewSchedule> {
    try {
      return await patchatsRecruitmentSystemAdminInterviewsInterviewIdSchedules(
        {
          systemAdmin,
          interviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific interview schedule slot
   * (ats_recruitment_interview_schedules record).
   *
   * Retrieve detailed information for a single interview schedule slot. The
   * operation requires both the interviewId and scheduleId (referencing
   * ats_recruitment_interview_schedules). Only accessible to authorized HR or
   * administrator actors for compliance.
   *
   * Returned information includes start/end time, timezone, schedule status,
   * source, audit trail, and related notes or cancellation reason. Validation
   * enforces that the schedule belongs to the provided interview. Access is
   * logged for audit/compliance. Typical related operations are listing all
   * slots via PATCH and updating slots separately.
   *
   * @param connection
   * @param interviewId The unique ID of the interview to which the schedule
   *   belongs.
   * @param scheduleId The unique identifier of the schedule slot within the
   *   interview.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":scheduleId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("scheduleId")
    scheduleId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentInterviewSchedule> {
    try {
      return await getatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId(
        {
          systemAdmin,
          interviewId,
          scheduleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing interview schedule slot for a given interview
   * (ats_recruitment_interview_schedules).
   *
   * This API operation updates details of an existing schedule slot for a
   * particular interview. Updatable fields include start_at, end_at, timezone,
   * schedule source, and schedule status or cancellation reason. It requires
   * checking that the interview and schedule both exist, are not deleted, and
   * are eligible for update according to the current status (e.g., slots that
   * are already confirmed as completed or cancelled cannot be updated).
   *
   * Validation rules enforce that the new slot time does not overlap with any
   * other slot linked to this interview, and that status transitions are
   * allowed per business policy (e.g., pending→confirmed, pending→cancelled).
   *
   * Security enforcement ensures that only participants (HR, related applicant,
   * techReviewer) associated with the interview or system administrators may
   * invoke this update. All updates are recorded in the audit trail for
   * compliance and subsequent event notification. Related operations are POST
   * (create slot), DELETE (cancel slot), and PATCH (list schedules).
   *
   * If the operation fails due to validation, proper error messages are
   * returned to guide the user (e.g., "proposed time conflicts with another
   * confirmed slot“).
   *
   * @param connection
   * @param interviewId Unique identifier of the target interview.
   * @param scheduleId Unique identifier of the schedule slot to update.
   * @param body Fields to update for the interview schedule slot, such as
   *   timing, timezone, source, or status change.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":scheduleId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("scheduleId")
    scheduleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewSchedule.IUpdate,
  ): Promise<IAtsRecruitmentInterviewSchedule> {
    try {
      return await putatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId(
        {
          systemAdmin,
          interviewId,
          scheduleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (cancel) a specific interview schedule slot for a given interview
   * (ats_recruitment_interview_schedules).
   *
   * This API operation removes or cancels a schedule entry for an interview,
   * marking it as deleted or cancelled in the database. The operation first
   * validates that the interview and associated schedule exist and are in a
   * modifiable state (not completed, not already cancelled). The operation
   * retains a soft-deletion pattern by setting the deleted_at field for audit
   * recovery; hard delete is not performed so that all schedule changes remain
   * traceable. A cancellation reason can be recorded as part of the process.
   *
   * This is restricted to HR recruiters, technical reviewers, or system
   * administrators linked to the interview. Any attempt to delete a
   * non-existent or already-completed/cancelled slot results in a business rule
   * error, with details returned to the caller.
   *
   * All cancellations/deletions are logged to audit trails for compliance and
   * event notification to participants. Common related operations are POST
   * (create slot) and PUT (update slot).
   *
   * @param connection
   * @param interviewId Unique identifier of the interview whose schedule should
   *   be deleted.
   * @param scheduleId Unique identifier of the schedule slot to delete
   *   (cancel).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":scheduleId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("scheduleId")
    scheduleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminInterviewsInterviewIdSchedulesScheduleId(
        {
          systemAdmin,
          interviewId,
          scheduleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
