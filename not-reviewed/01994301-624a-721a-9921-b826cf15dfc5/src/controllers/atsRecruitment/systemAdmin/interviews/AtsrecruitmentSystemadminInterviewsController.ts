import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteatsRecruitmentSystemAdminInterviewsInterviewId } from "../../../../providers/deleteatsRecruitmentSystemAdminInterviewsInterviewId";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

@Controller("/atsRecruitment/systemAdmin/interviews/:interviewId")
export class AtsrecruitmentSystemadminInterviewsController {
  /**
   * Permanently remove an interview from the ats_recruitment_interviews table.
   *
   * The purpose of this operation is to enable authorized users—specifically
   * system administrators and HR recruiters—to irreversibly remove an entire
   * interview record from the ATS recruitment system. This includes the
   * interview metadata, scheduling records, participants, and associated
   * interview questions. Once deleted, the information is permanently removed
   * from the database and cannot be restored, supporting GDPR and business data
   * lifecycle policies.
   *
   * Security considerations restrict access to this operation to systemAdmin
   * and hrRecruiter roles. Appropriate authorization checks must be enforced,
   * and all deletion actions must be logged in the audit trail with full
   * context, including actor and timestamp, to ensure compliance and enable
   * post-mortem analysis if necessary.
   *
   * The operation directly manipulates the ats_recruitment_interviews table.
   * Any related records in child tables (such as participants, schedules, and
   * questions) must be removed or cascade-deleted to maintain referential
   * integrity. This does not perform any kind of soft deletion; the record is
   * eliminated entirely from persistent storage. Attempts to access the
   * interview after deletion should result in appropriate errors.
   *
   * Related operations include interview creation, updating, and listing
   * endpoints, as well as recovery and audit queries for administrative review.
   * If deletion fails due to constraints or non-existent interviewId, clear
   * error messages should be provided.
   *
   * @param connection
   * @param interviewId Unique identifier of the interview to be permanently
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminInterviewsInterviewId({
        systemAdmin,
        interviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
