import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncs } from "../../../../../providers/patchatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncs";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncsCalendarSyncId } from "../../../../../providers/getatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncsCalendarSyncId";

import { IPageIAtsRecruitmentInterviewCalendarSync } from "../../../../../api/structures/IPageIAtsRecruitmentInterviewCalendarSync";
import { IAtsRecruitmentInterviewCalendarSync } from "../../../../../api/structures/IAtsRecruitmentInterviewCalendarSync";

@Controller("/atsRecruitment/systemAdmin/interviews/:interviewId/calendarSyncs")
export class AtsrecruitmentSystemadminInterviewsCalendarsyncsController {
  /**
   * List and search all calendar sync attempts for a given interview
   * (ats_recruitment_interview_calendar_syncs).
   *
   * This API operation returns a paginated, filterable collection of all
   * calendar synchronization attempt records for a specific interview. Records
   * include sync type (e.g., google_calendar), status, external event ids, and
   * error messages where applicable. The operation supports advanced filtering
   * by sync_status (success, failed, pending), sync_type, and time range
   * (sync_time_from/to) to enable troubleshooting and compliance review by HR
   * and technical staff.
   *
   * Only authorized interview participants or system administrators may view
   * this information. Results are fully auditable, and read operations are
   * tracked for compliance and privacy. Integration with failure handling
   * allows users to quickly identify failed syncs and examine error details.
   * Related operations are POST (initiate new calendar sync) and GET/PUT for
   * managing interview core data.
   *
   * @param connection
   * @param interviewId Unique identifier of the interview whose calendar sync
   *   events are being listed or searched.
   * @param body Search, filtering, and pagination criteria for retrieving
   *   calendar sync events (optional filters for status, type, time, pagination
   *   info).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewCalendarSync.IRequest,
  ): Promise<IPageIAtsRecruitmentInterviewCalendarSync> {
    try {
      return await patchatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncs(
        {
          systemAdmin,
          interviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific interview calendar sync record by ID.
   *
   * Retrieve a single calendar synchronization record for a specific interview.
   * This operation is typically used by HR recruiters, system admins, or
   * technical reviewers to check the details and result of an attempt to sync
   * an interview schedule with an external calendar provider (such as Google
   * Calendar).
   *
   * The endpoint validates both the interviewId (parent resource) and
   * calendarSyncId (target record), confirming they match and ensuring that
   * only authorized roles can access the data. Returned information includes
   * sync type, time, status (pending, success, failed), error messages for
   * diagnostics, and tokens as permitted by security policy.
   *
   * Role-based security ensures that only interview participants (HR recruiter,
   * tech reviewer, applicant) or system admins may access the sync log. Related
   * endpoints include listing all sync attempts and handling manual sync
   * retries or failure audits.
   *
   * @param connection
   * @param interviewId UUID of the interview whose calendar sync is being
   *   retrieved.
   * @param calendarSyncId UUID of the calendar synchronization record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":calendarSyncId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("calendarSyncId")
    calendarSyncId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentInterviewCalendarSync> {
    try {
      return await getatsRecruitmentSystemAdminInterviewsInterviewIdCalendarSyncsCalendarSyncId(
        {
          systemAdmin,
          interviewId,
          calendarSyncId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
