import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId } from "../../../../../../providers/getatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId";
import { SystemadminAuth } from "../../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../../decorators/payload/SystemadminPayload";
import { putatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId } from "../../../../../../providers/putatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId";
import { deleteatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId } from "../../../../../../providers/deleteatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId";
import { patchatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewComments } from "../../../../../../providers/patchatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewComments";

import { IAtsRecruitmentCodingTestReviewComment } from "../../../../../../api/structures/IAtsRecruitmentCodingTestReviewComment";
import { IPageIAtsRecruitmentCodingTestReviewComment } from "../../../../../../api/structures/IPageIAtsRecruitmentCodingTestReviewComment";

@Controller(
  "/atsRecruitment/systemAdmin/codingTests/:codingTestId/submissions/:submissionId/reviewComments",
)
export class AtsrecruitmentSystemadminCodingtestsSubmissionsReviewcommentsController {
  /**
   * Retrieve the details of a coding test review comment by ID for a given
   * coding test submission.
   *
   * This API retrieves all details of a specified review comment associated
   * with a particular coding test submission. It can be used by technical
   * reviewers, HR staff, or system admins to display the content, review type,
   * timestamps, and reviewer identification of a single comment for
   * moderation/audit purposes.
   *
   * Access to this endpoint should be restricted according to applicant privacy
   * and reviewer authorization rules, as review comments may contain sensitive
   * evaluation notes. Security checks must ensure the requesting actor is
   * permitted to view the review comment (e.g., must be the assigned tech
   * reviewer or HR of the job posting), as per platform policy.
   *
   * Referenced database columns include the immutable review comment text,
   * comment_type (e.g., 'manual', 'auto', or 'system'), timestamps for when the
   * comment was started and finalized, and the reviewer ID. The operation draws
   * from the ats_recruitment_coding_test_review_comments schema and supports
   * compliance by enabling audit of reviewer feedback and the integrity of the
   * review process.
   *
   * This endpoint is intended to be used after listing available review
   * comments for a submission (via listing endpoint), or when directly
   * accessing a comment from a moderation or feedback workflow UI. Error
   * handling must clearly distinguish not found, forbidden, or deleted
   * resources, returning appropriate error codes and audit logging all access
   * for compliance.
   *
   * @param connection
   * @param codingTestId Unique identifier for the coding test to which the
   *   review comment belongs.
   * @param submissionId Unique identifier for the coding test submission
   *   associated with this review comment.
   * @param reviewCommentId Unique identifier for the review comment being
   *   retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reviewCommentId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("codingTestId")
    codingTestId: string & tags.Format<"uuid">,
    @TypedParam("submissionId")
    submissionId: string & tags.Format<"uuid">,
    @TypedParam("reviewCommentId")
    reviewCommentId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentCodingTestReviewComment> {
    try {
      return await getatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId(
        {
          systemAdmin,
          codingTestId,
          submissionId,
          reviewCommentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a review comment for a coding test submission
   * (ats_recruitment_coding_test_review_comments).
   *
   * Update a coding test review comment in the ATS recruitment system. This
   * endpoint is used by technical reviewers or system administrators to modify
   * existing feedback or commentary on a coding test submission.
   *
   * Authorization checks ensure that only technical reviewers associated with
   * the review comment or system administrators can update the comment. The
   * operation references the coding test and its submission for context,
   * enforcing that the specified reviewCommentId actually belongs to the target
   * submission.
   *
   * Business validation ensures the comment text, type, and review timings
   * remain consistent with reviewer workflow policies. Updating soft-deleted or
   * non-existent comments will return an error. Usage of this endpoint is
   * auditable, and updates are tracked for compliance purposes.
   *
   * Related operations include creating new review comments, deleting comments,
   * or retrieving comments for a given submission. This operation supports the
   * technical review loop and code quality feedback in talent evaluation
   * processes.
   *
   * @param connection
   * @param codingTestId ID of the target coding test.
   * @param submissionId ID of the submission under the coding test.
   * @param reviewCommentId ID of the review comment to be updated.
   * @param body Updated information for the review comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reviewCommentId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("codingTestId")
    codingTestId: string & tags.Format<"uuid">,
    @TypedParam("submissionId")
    submissionId: string & tags.Format<"uuid">,
    @TypedParam("reviewCommentId")
    reviewCommentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentCodingTestReviewComment.IUpdate,
  ): Promise<IAtsRecruitmentCodingTestReviewComment> {
    try {
      return await putatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId(
        {
          systemAdmin,
          codingTestId,
          submissionId,
          reviewCommentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a review comment for a coding test submission
   * (ats_recruitment_coding_test_review_comments).
   *
   * Permanently delete a review comment for a coding test submission in the ATS
   * recruitment system. Technical reviewers or system administrators may use
   * this endpoint to remove comments that are erroneous, inappropriate, or no
   * longer relevant to the evaluation process.
   *
   * Access control ensures only the comment owner, or users with the system
   * administrator role, may perform this operation. The operation verifies that
   * the reviewCommentId belongs to the referenced submission and coding test.
   *
   * The absence of a soft-delete column in the schema means deleted records
   * cannot be recovered. Deleted comments are removed from the feedback and
   * visibility loop for the submission and are not returned in future review
   * queries.
   *
   * Error handling covers cases where the comment does not exist or the
   * requester is not authorized. This is a destructive operation intended for
   * exceptional cases, not regular reviewer workflow.
   *
   * @param connection
   * @param codingTestId ID of the coding test.
   * @param submissionId ID of the coding test submission.
   * @param reviewCommentId ID of the review comment to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reviewCommentId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("codingTestId")
    codingTestId: string & tags.Format<"uuid">,
    @TypedParam("submissionId")
    submissionId: string & tags.Format<"uuid">,
    @TypedParam("reviewCommentId")
    reviewCommentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewCommentsReviewCommentId(
        {
          systemAdmin,
          codingTestId,
          submissionId,
          reviewCommentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filtered list of coding test review
   * comments for a specific submission.
   *
   * This API provides a way to retrieve a filtered and paginated list of all
   * review comments associated with a specific coding test submission, enabling
   * team members to audit, moderate, or collaboratively evaluate the
   * applicant's coding test. The request body may include search terms,
   * reviewer filters, date ranges, or comment type, supporting flexible UX
   * scenarios for reviewing or audit.
   *
   * Comments are returned ordered by commented_at descending, but support
   * additional sort options. The response includes pagination, total count, and
   * a list of matching review comments, as per the
   * ats_recruitment_coding_test_review_comments schema. Security rules ensure
   * that only authorized tech reviewers (those assigned), HR for the
   * corresponding job posting, or system admins can access the list, with full
   * audit logging of all data accesses.
   *
   * The endpoint is not intended to return the full coding test or submission
   * content, only the review comment metadata and content fields. Error
   * handling distinguishes between no results, forbidden access, and deleted
   * resources. Related endpoints include creation, single retrieval, and
   * deletion of comments.
   *
   * @param connection
   * @param codingTestId Unique identifier for the coding test to list review
   *   comments for.
   * @param submissionId Unique identifier for the coding test submission under
   *   review.
   * @param body Search, filter, and pagination parameters for reviewer comment
   *   query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("codingTestId")
    codingTestId: string & tags.Format<"uuid">,
    @TypedParam("submissionId")
    submissionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentCodingTestReviewComment.IRequest,
  ): Promise<IPageIAtsRecruitmentCodingTestReviewComment> {
    try {
      return await patchatsRecruitmentSystemAdminCodingTestsCodingTestIdSubmissionsSubmissionIdReviewComments(
        {
          systemAdmin,
          codingTestId,
          submissionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
