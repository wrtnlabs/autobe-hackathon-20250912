import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminExportJobsExportJobIdFailures } from "../../../../../providers/patchatsRecruitmentSystemAdminExportJobsExportJobIdFailures";
import { SystemadminAuth } from "../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminExportJobsExportJobIdFailuresFailureId } from "../../../../../providers/getatsRecruitmentSystemAdminExportJobsExportJobIdFailuresFailureId";

import { IPageIAtsRecruitmentExportFailure } from "../../../../../api/structures/IPageIAtsRecruitmentExportFailure";
import { IAtsRecruitmentExportFailure } from "../../../../../api/structures/IAtsRecruitmentExportFailure";

@Controller("/atsRecruitment/systemAdmin/exportJobs/:exportJobId/failures")
export class AtsrecruitmentSystemadminExportjobsFailuresController {
  /**
   * Search and retrieve paginated export job failure records tied to a specific
   * export job (ats_recruitment_export_failures).
   *
   * Fetch a paginated, filterable list of export job failure records for a
   * specific export job. Each failure record documents a process error or
   * exception that occurred during export generation, delivery, or data
   * assembly. This allows HR recruiters and system administrators to monitor
   * for incidents, perform root-cause analysis, and maintain regulatory audit
   * trails on all failed or exceptional export behaviors.
   *
   * Operation references the ats_recruitment_export_failures table, including
   * fields for stage, failure reason, timestamp, export job reference, and
   * internal messages. Filtering and searching is available by failure stage,
   * timestamp, message, or other process metadata. Security is enforced so only
   * actors associated with the export job or system admins can access this
   * failure history.
   *
   * Empty result sets are expected in the event of fully successful export
   * jobs. Error scenarios include parent export job not found or no matching
   * failures for the filters applied.
   *
   * @param connection
   * @param exportJobId Unique identifier for the parent export job to fetch
   *   failure records for.
   * @param body Search and filter criteria for export job failure records,
   *   including pagination, stage filtering, or keyword search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("exportJobId")
    exportJobId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentExportFailure.IRequest,
  ): Promise<IPageIAtsRecruitmentExportFailure> {
    try {
      return await patchatsRecruitmentSystemAdminExportJobsExportJobIdFailures({
        systemAdmin,
        exportJobId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific export job failure record by exportJobId and failureId
   * (ats_recruitment_export_failures).
   *
   * Get a specific export job failure record for a given export job by
   * providing both the unique export job ID and the failure record's ID. The
   * operation returns detailed fields covering failure stage, processing
   * context, root-cause message, and timestamp, allowing for deep incident
   * analysis and compliance reporting.
   *
   * This function is available to HR recruiters or system administrators who
   * own or manage the export job. Access control verifies both job ownership
   * and administrative privilege. If the export job or failure record does not
   * exist or access is not permitted, a not found or forbidden error will
   * result. Used together with list/search operations for analytics or
   * troubleshooting export pipeline issues.
   *
   * @param connection
   * @param exportJobId Unique identifier for the associated export job.
   * @param failureId Unique identifier of the failure record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":failureId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("exportJobId")
    exportJobId: string & tags.Format<"uuid">,
    @TypedParam("failureId")
    failureId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentExportFailure> {
    try {
      return await getatsRecruitmentSystemAdminExportJobsExportJobIdFailuresFailureId(
        {
          systemAdmin,
          exportJobId,
          failureId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
