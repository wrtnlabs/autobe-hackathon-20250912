import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminEnums } from "../../../../providers/postatsRecruitmentSystemAdminEnums";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { putatsRecruitmentSystemAdminEnumsEnumId } from "../../../../providers/putatsRecruitmentSystemAdminEnumsEnumId";
import { deleteatsRecruitmentSystemAdminEnumsEnumId } from "../../../../providers/deleteatsRecruitmentSystemAdminEnumsEnumId";

import { IAtsRecruitmentEnums } from "../../../../api/structures/IAtsRecruitmentEnums";

@Controller("/atsRecruitment/systemAdmin/enums")
export class AtsrecruitmentSystemadminEnumsController {
  /**
   * Create a new global enumeration for the recruitment system
   * (ats_recruitment_enums table).
   *
   * This endpoint allows an authorized system administrator to add a new
   * enumeration value to the central enum registry used across the ATS
   * platform. The ats_recruitment_enums table is referenced for all
   * business-specific codes and labels (such as job state codes, employment
   * types, and notification channels) and supports critical application logic.
   *
   * The operation enforces that enum_type and enum_code are unique within their
   * grouping. Creation activity is logged for compliance and audit purposes.
   * Only users with the "systemAdmin" role are authorized to invoke this
   * endpoint, as incorrect or duplicate enums can cause system-wide lookup
   * failures or inconsistencies.
   *
   * During processing, the input is validated for format, uniqueness, and
   * required fields according to the schema. Optional attributes and extended
   * metadata can be added to support custom UI or logic extensions. Errors may
   * be thrown if constraint or naming violations occur, which are surfaced with
   * clear messages for maintenance and audit traceability.
   *
   * @param connection
   * @param body Creation data for enumeration value including enum_type,
   *   enum_code, label, and optional metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentEnums.ICreate,
  ): Promise<IAtsRecruitmentEnums> {
    try {
      return await postatsRecruitmentSystemAdminEnums({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing enumeration value by UUID (ats_recruitment_enums table).
   *
   * This endpoint lets a system administrator update details of a specific
   * enumeration in the ats_recruitment_enums registry, identified by its unique
   * UUID. Use cases include renaming labels for localization, adding
   * descriptions for clarity, or modifying extended_data payloads for UI logic
   * or integrations.
   *
   * Reference to the existing enum is by enumId (UUID path parameter). Only the
   * label, description, or extended_data fields may be updatedâ€”enum_type and
   * enum_code should remain unchanged to avoid referential breakage. All
   * modifications are logged in the audit trail for governance.
   *
   * Strict permission checks ensure that only authorized system administrators
   * can perform modifications, as enum changes can have system-wide impact.
   * Input validation will enforce type and length limits according to schema.
   * Error responses are clear for traceability and remediation if the UUID is
   * invalid or if the record is not found.
   *
   * @param connection
   * @param enumId Unique identifier (UUID) of the enum value to update.
   * @param body Updated properties for the enumeration value (label,
   *   description, extended_data).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":enumId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enumId")
    enumId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentEnums.IUpdate,
  ): Promise<IAtsRecruitmentEnums> {
    try {
      return await putatsRecruitmentSystemAdminEnumsEnumId({
        systemAdmin,
        enumId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an enumeration value from the ATS global registry
   * (ats_recruitment_enums table) by UUID.
   *
   * A system administrator can use this endpoint to logically remove (soft
   * delete) an enumeration value from the central ats_recruitment_enums
   * registry by specifying its UUID in the path parameter. Soft deletion sets
   * the deleted_at timestamp, thereby hiding the enum from future use in
   * business processes but keeping its record for audit and reference.
   *
   * This operation is protected and only accessible by the "systemAdmin" role
   * because enums are core to many business flows; improper deletion could
   * break lookups and workflows. Audit logs record the actor, timestamp,
   * reason, and affected record for compliance and future audits.
   *
   * The operation validates the uuid format and existence before marking as
   * deleted. Attempts to delete an already deleted or non-existent record
   * result in a clear error message for remediation or further investigation.
   *
   * @param connection
   * @param enumId Unique identifier (UUID) of the enum value to be soft
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":enumId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("enumId")
    enumId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminEnumsEnumId({
        systemAdmin,
        enumId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
