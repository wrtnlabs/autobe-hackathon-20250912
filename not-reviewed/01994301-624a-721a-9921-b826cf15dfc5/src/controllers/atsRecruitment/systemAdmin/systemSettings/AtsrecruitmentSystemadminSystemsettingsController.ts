import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminSystemSettings } from "../../../../providers/postatsRecruitmentSystemAdminSystemSettings";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminSystemSettings } from "../../../../providers/patchatsRecruitmentSystemAdminSystemSettings";
import { getatsRecruitmentSystemAdminSystemSettingsSystemSettingId } from "../../../../providers/getatsRecruitmentSystemAdminSystemSettingsSystemSettingId";
import { putatsRecruitmentSystemAdminSystemSettingsSystemSettingId } from "../../../../providers/putatsRecruitmentSystemAdminSystemSettingsSystemSettingId";
import { deleteatsRecruitmentSystemAdminSystemSettingsSystemSettingId } from "../../../../providers/deleteatsRecruitmentSystemAdminSystemSettingsSystemSettingId";

import { IAtsRecruitmentSystemSetting } from "../../../../api/structures/IAtsRecruitmentSystemSetting";
import { IPageIAtsRecruitmentSystemSetting } from "../../../../api/structures/IPageIAtsRecruitmentSystemSetting";

@Controller("/atsRecruitment/systemAdmin/systemSettings")
export class AtsrecruitmentSystemadminSystemsettingsController {
  /**
   * Create a new ATS system setting (ats_recruitment_system_settings).
   *
   * This endpoint allows system administrators to add a new global
   * configuration setting to the ATS system. The input must provide a unique
   * setting_name, value, type, and optionally a description. Constraints
   * include setting_name uniqueness, valid value/type pairs, and full audit
   * trace.
   *
   * If a setting with the same name already exists, the operation will fail
   * with a uniqueness violation error. Upon success, the endpoint returns the
   * newly created setting's data including timestamps and all schema-defined
   * metadata.
   *
   * Every setting creation is logged for compliance review. Only systemAdmin
   * role may create or modify global configurations, as these settings can
   * affect the workflow for all users across the platform.
   *
   * @param connection
   * @param body Data required to create a new system setting, including unique
   *   name, value, type, and optional documentation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentSystemSetting.ICreate,
  ): Promise<IAtsRecruitmentSystemSetting> {
    try {
      return await postatsRecruitmentSystemAdminSystemSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of ATS system settings
   * (ats_recruitment_system_settings).
   *
   * This endpoint allows system administrators to search for and retrieve a
   * paginated list of all ATS platform-wide system settings. The operation
   * provides advanced filtering on setting name, value, type, and temporal
   * ranges.
   *
   * It supports searching for specific settings, retrieving only
   * active/non-deleted entries, filtering by created/updated timestamps, and
   * sorting by name/type/created date. This helps administrators keep track of
   * configuration changes, audit compliance, and troubleshoot system behavior
   * based on global parameters.
   *
   * Due to the sensitive nature of system settings, access is restricted to
   * systemAdmin role, and every invocation is audit-logged. Results are fully
   * compliant with the underlying ats_recruitment_system_settings schema,
   * including all key fields and relations. If no settings match the filter, an
   * empty array is returned.
   *
   * @param connection
   * @param body Search and filter criteria for system settings, including
   *   setting name, type, value, date range, pagination, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentSystemSetting.IRequest,
  ): Promise<IPageIAtsRecruitmentSystemSetting> {
    try {
      return await patchatsRecruitmentSystemAdminSystemSettings({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single system setting's detailed information by systemSettingId
   * (ats_recruitment_system_settings).
   *
   * This endpoint allows a system administrator to fetch the complete details
   * of a single ATS system setting by specifying its unique ID. It returns all
   * defined metadata including setting name, value, type, full description,
   * audit timestamps, and deleted_at if present.
   *
   * Use cases include auditing configuration changes, investigating system
   * behavior, or preparing to update or disable a specific setting. If the
   * setting is soft-deleted, a deleted_at value will be present for recovery or
   * compliance monitoring.
   *
   * The response structure matches the ats_recruitment_system_settings Prisma
   * model, exposing every field necessary for platform configuration
   * management. Only systemAdmin roles are authorized to call this endpoint.
   *
   * @param connection
   * @param systemSettingId Unique ID of the target ATS system setting to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":systemSettingId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemSettingId")
    systemSettingId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentSystemSetting> {
    try {
      return await getatsRecruitmentSystemAdminSystemSettingsSystemSettingId({
        systemAdmin,
        systemSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing ATS system setting by ID
   * (ats_recruitment_system_settings).
   *
   * This endpoint enables system administrators to modify an existing ATS
   * system setting by specifying its ID and providing new values for the fields
   * to update. Partial updates require specifying all relevant fields, and all
   * changes are subject to validation against the schema, including uniqueness
   * of setting_name.
   *
   * On success, the endpoint returns the updated system setting record,
   * reflecting changes including value, type, description, and updated_at
   * timestamp. This is used to manage platform behavior, enable/disable
   * features, or adjust thresholds and parameters at runtime.
   *
   * All update actions are audit-logged for traceability and compliance. Only
   * the systemAdmin role is authorized to update global configuration
   * settings.
   *
   * @param connection
   * @param systemSettingId Unique ID of the system setting to update.
   * @param body Data containing the fields to update for the target system
   *   setting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":systemSettingId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemSettingId")
    systemSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentSystemSetting.IUpdate,
  ): Promise<IAtsRecruitmentSystemSetting> {
    try {
      return await putatsRecruitmentSystemAdminSystemSettingsSystemSettingId({
        systemAdmin,
        systemSettingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a system setting (ats_recruitment_system_settings table) by ID.
   *
   * This delete operation is leveraged to mark a system-wide configuration
   * parameter as deleted in the ats_recruitment_system_settings table. The
   * setting is not physically removed, but rather, the deleted_at field is set
   * with the current timestamp, which is a soft delete implementation.
   *
   * The endpoint requires system administrator privileges and is strictly
   * audited by the ats_recruitment_audit_trails model for regulatory compliance
   * and traceability. Any attempt by a non-admin user or request for a
   * non-existent or previously deleted record results in an error.
   *
   * This operation is used in conjunction with settings index, retrieval, and
   * update endpoints. It is essential that business logic ensures only
   * non-critical settings can be deleted, and deleted settings are not loaded
   * into the live system configuration. Recovery, undo, or reactivation may
   * require alternate routes and audit review. Error handling includes
   * validation of permissions, existence, and current status before marking as
   * deleted.
   *
   * @param connection
   * @param systemSettingId Unique identifier (UUID) of the system setting to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":systemSettingId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("systemSettingId")
    systemSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminSystemSettingsSystemSettingId(
        {
          systemAdmin,
          systemSettingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
