import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentSystemAdminJobPostingStates } from "../../../../providers/postatsRecruitmentSystemAdminJobPostingStates";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { patchatsRecruitmentSystemAdminJobPostingStates } from "../../../../providers/patchatsRecruitmentSystemAdminJobPostingStates";
import { getatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId } from "../../../../providers/getatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId";
import { putatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId } from "../../../../providers/putatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId";
import { deleteatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId } from "../../../../providers/deleteatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId";

import { IAtsRecruitmentJobPostingState } from "../../../../api/structures/IAtsRecruitmentJobPostingState";
import { IPageIAtsRecruitmentJobPostingState } from "../../../../api/structures/IPageIAtsRecruitmentJobPostingState";

@Controller("/atsRecruitment/systemAdmin/jobPostingStates")
export class AtsrecruitmentSystemadminJobpostingstatesController {
  /**
   * Create a new job posting state (ats_recruitment_job_posting_states) in the
   * system.
   *
   * Allows a system administrator to define a new job posting workflow state,
   * such as introducing a new official lifecycle step (e.g., open, paused,
   * archived). The endpoint validates that a unique state_code is provided (not
   * present in soft-deleted or active states) and all essential
   * fields—including label, is_active, description, and sort_order—are present.
   * Additional rules for label format and allowed state_code patterns are
   * enforced as per platform requirements.
   *
   * Upon successful creation, the detailed entity record is returned to the
   * caller. If state code conflict, input validation, or insufficient privilege
   * occurs, clear errors are returned. Only users with the systemAdmin role can
   * invoke this endpoint due to the potential global platform impact of
   * creating new workflow states.
   *
   * @param connection
   * @param body Details of the new job posting state to be created, including
   *   workflow code, label, description, active status, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobPostingState.ICreate,
  ): Promise<IAtsRecruitmentJobPostingState> {
    try {
      return await postatsRecruitmentSystemAdminJobPostingStates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of job posting states defined in the
   * system (ats_recruitment_job_posting_states).
   *
   * Retrieve a filtered and paginated list of job posting state records to
   * support admin and HR selection, validation, and update of available status
   * workflow codes. This endpoint performs advanced search, filtering, and
   * pagination over all entries in ats_recruitment_job_posting_states, using
   * fields such as state code, human-readable label, is_active, description,
   * and sort order for filtering and ordering.
   *
   * Implemented authorization ensures that only users with systemAdmin or
   * hrRecruiter roles can search administrative job state definitions,
   * maintaining separation of business logic domains and audit accuracy.
   * Sensitive operations or exports require further privilege. Returned data
   * provides insight into both platform-supported (active=true) and deprecated
   * (active=false, deleted_at not null) workflow statuses.
   *
   * Errors caused by invalid filters, insufficient authorization, or unexpected
   * query overloads are handled with clear user-facing messages based on system
   * policy. This endpoint is often used in conjunction with job posting
   * creation and management flows, and its results may inform dropdown
   * selectors or workflow UI transitions.
   *
   * @param connection
   * @param body Filter and pagination criteria for searching job posting states
   *   (state code, label, status, active, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentJobPostingState.IRequest,
  ): Promise<IPageIAtsRecruitmentJobPostingState.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminJobPostingStates({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific job posting state
   * (ats_recruitment_job_posting_states) by ID.
   *
   * Retrieve the full record details for a single job posting state, identified
   * by jobPostingStateId (UUID). The response includes fields such as
   * state_code, label, description, is_active, sort_order, creation and update
   * timestamps, and soft-deletion marker.
   *
   * Access is restricted to administrative and HR recruiter roles, ensuring
   * only privileged users can perform code/label mapping or workflow
   * adjustment. This endpoint markets itself as a readonly business entity
   * lookup, suitable for supporting validation at runtime or for pre-loading
   * context for update/edit interfaces.
   *
   * If the specified jobPostingStateId does not exist or is soft-deleted, a
   * clear not-found error is returned. Permission violations generate a 403
   * error. Typical use cases include admin UI modules for workflow management
   * or business rule enforcement based on active/deprecated states.
   *
   * @param connection
   * @param jobPostingStateId Unique identifier (UUID) of the target job posting
   *   state.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobPostingStateId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobPostingStateId")
    jobPostingStateId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentJobPostingState> {
    try {
      return await getatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId(
        {
          systemAdmin,
          jobPostingStateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing job posting state (ats_recruitment_job_posting_states)
   * in the system by ID.
   *
   * Update attributes (label, is_active, description, sort_order, etc.) of an
   * existing job posting state identified by jobPostingStateId. This supports
   * administrative workflows for managing the full catalog of job application
   * transitions, supporting both temporary deactivation and full edit of
   * platform states.
   *
   * Input body must include the required jobPostingStateId and at least one
   * field to be updated. The system ensures state_code is not duplicated by
   * another active entry and validates all format/rule constraints before
   * committing changes. Soft deleted/archived entries cannot be edited.
   *
   * Authorization is strictly limited to systemAdmin role. Any attempt by
   * unauthorized users or a request for a non-existent or deleted state
   * triggers an error. This is an essential admin operation for lifecycle and
   * workflow tuning of job postings.
   *
   * @param connection
   * @param jobPostingStateId Unique identifier (UUID) of the job posting state
   *   to update.
   * @param body Fields to update for the target job posting state (must include
   *   at least one updatable field).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jobPostingStateId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobPostingStateId")
    jobPostingStateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentJobPostingState.IUpdate,
  ): Promise<IAtsRecruitmentJobPostingState> {
    try {
      return await putatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId(
        {
          systemAdmin,
          jobPostingStateId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a job posting state from
   * ats_recruitment_job_posting_states by ID.
   *
   * This operation serves to irrevocably remove a given job posting state from
   * the recruitment system. The underlying Prisma model
   * (ats_recruitment_job_posting_states) includes information such as state
   * code, label, description, and support for soft deletion via 'deleted_at'
   * timestamps. Deletion through this endpoint is reserved for administrative
   * actions where a state is no longer permitted for business use, such as
   * deprecating states or correcting erroneous entries.
   *
   * Access to this endpoint is strictly limited to users with system
   * administrator rights, as altering workflow states can impact the business
   * process for all job postings. All such deletions are logged in the system
   * audit trail for compliance and recovery purposes. Attempting to delete a
   * currently-referenced state may be restricted by referential integrity
   * rules, and error responses inform the user if deletion is not possible due
   * to active dependencies.
   *
   * This endpoint directly manipulates the ats_recruitment_job_posting_states
   * table in the Prisma schema, ensuring that only valid state identifiers can
   * be deleted. Related get (at), create, and update operations are present for
   * full lifecycle state configuration management. Hard deletion removes the
   * record, and related postings must reference an alternative or default state
   * to preserve data integrity.
   *
   * @param connection
   * @param jobPostingStateId Unique identifier of the job posting state to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jobPostingStateId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("jobPostingStateId")
    jobPostingStateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminJobPostingStatesJobPostingStateId(
        {
          systemAdmin,
          jobPostingStateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
