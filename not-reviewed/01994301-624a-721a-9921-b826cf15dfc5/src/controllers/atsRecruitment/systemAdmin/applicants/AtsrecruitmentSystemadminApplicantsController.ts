import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentSystemAdminApplicants } from "../../../../providers/patchatsRecruitmentSystemAdminApplicants";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getatsRecruitmentSystemAdminApplicantsApplicantId } from "../../../../providers/getatsRecruitmentSystemAdminApplicantsApplicantId";
import { putatsRecruitmentSystemAdminApplicantsApplicantId } from "../../../../providers/putatsRecruitmentSystemAdminApplicantsApplicantId";
import { deleteatsRecruitmentSystemAdminApplicantsApplicantId } from "../../../../providers/deleteatsRecruitmentSystemAdminApplicantsApplicantId";

import { IPageIAtsRecruitmentApplicant } from "../../../../api/structures/IPageIAtsRecruitmentApplicant";
import { IAtsRecruitmentApplicant } from "../../../../api/structures/IAtsRecruitmentApplicant";

@Controller("/atsRecruitment/systemAdmin/applicants")
export class AtsrecruitmentSystemadminApplicantsController {
  /**
   * Search and retrieve a paginated list of ats_recruitment_applicants records
   * with filtering and sorting.
   *
   * Enables HR recruiters or system administrators to retrieve a paginated,
   * filterable list of applicant accounts from the ats_recruitment_applicants
   * table. Search filters can include name, email, account status, creation
   * date, and activation status.
   *
   * The list supports pagination and sorting to efficiently browse large
   * numbers of applicants, with performance optimized via indexed fields. Each
   * applicant record includes primary identification data, contact details,
   * activation state, and basic timestamps. Access is limited to authorized HR
   * staff and administrators.
   *
   * Role-based restrictions ensure privacy of applicant contact data, and audit
   * logging is performed for search activities. Standard error handling
   * (permission denied, invalid parameters) applies to this operation.
   *
   * @param connection
   * @param body Search criteria, pagination, and sorting parameters for
   *   applicant filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: IAtsRecruitmentApplicant.IRequest,
  ): Promise<IPageIAtsRecruitmentApplicant.ISummary> {
    try {
      return await patchatsRecruitmentSystemAdminApplicants({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed applicant profile by applicantId from
   * ats_recruitment_applicants.
   *
   * Fetches the complete profile for a single applicant user account,
   * identified by applicantId. Returns structured applicant profile data
   * including authentication email, full name, phone, account activity status,
   * registration, and update timestamps, mirroring the database record
   * structure.
   *
   * Only HR recruiters and system administrators are permitted to access this
   * operation due to sensitive personal data. The system audits all access for
   * compliance and privacy reporting. Responds with detailed 404/403 error on
   * not-found or unauthorized access.
   *
   * @param connection
   * @param applicantId Unique identifier of the applicant to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":applicantId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicantId")
    applicantId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentApplicant> {
    try {
      return await getatsRecruitmentSystemAdminApplicantsApplicantId({
        systemAdmin,
        applicantId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing applicant account by applicantId in
   * ats_recruitment_applicants.
   *
   * Modifies the profile of an existing applicant account as identified by
   * applicantId in the path. Permitted updatable fields include name, phone
   * number, and account activation state (is_active). The authenticated backend
   * system always safely processes the new password (if present) as a secure
   * hash, never as plaintext. Attempts to update email or primary identifier
   * fields are rejected.
   *
   * Only accessible to HR recruiters and system administrators for account
   * management. All operations are audited for security, and changes to key
   * fields are logged for compliance. Returns the updated profile record or
   * appropriate error (not found, permission denied, invalid input).
   *
   * @param connection
   * @param applicantId Unique identifier of the applicant account to update.
   * @param body Fields to update on the applicant profile (name, phone,
   *   password, is_active).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":applicantId")
  public async update(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicantId")
    applicantId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicant.IUpdate,
  ): Promise<IAtsRecruitmentApplicant> {
    try {
      return await putatsRecruitmentSystemAdminApplicantsApplicantId({
        systemAdmin,
        applicantId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Deactivate (soft-delete) an applicant account in the
   * ats_recruitment_applicants table.
   *
   * Deactivates an applicant account by setting the deleted_at timestamp in the
   * ats_recruitment_applicants table. This approach follows GDPR and security
   * standards by ensuring the applicant's data is not hard-deleted but is
   * instead marked for deletion and excluded from normal business logic, while
   * audit log and compliance requirements are maintained.
   *
   * Only the applicant themselves can request deletion of their account, or a
   * system administrator may perform this for legal or compliance reasons. The
   * applicant's access to the platform is fully revoked after this operation,
   * and login attempts are blocked. Related data in applications, resumes, and
   * audit logs remain for compliance but with reduced PII visibility as
   * required.
   *
   * All actions are recorded in audit trails. Attempts to delete an applicant
   * who is already marked as deleted result in a no-op or idempotent response.
   * This operation is crucial for maintaining data subject rights under privacy
   * law and enabling secure account lifecycle management.
   *
   * @param connection
   * @param applicantId Unique identifier of the applicant account to be
   *   deactivated (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":applicantId")
  public async erase(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("applicantId")
    applicantId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentSystemAdminApplicantsApplicantId({
        systemAdmin,
        applicantId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
