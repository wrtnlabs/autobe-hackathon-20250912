import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentTechReviewerInterviewsInterviewIdParticipants } from "../../../../../providers/patchatsRecruitmentTechReviewerInterviewsInterviewIdParticipants";
import { TechreviewerAuth } from "../../../../../decorators/TechreviewerAuth";
import { TechreviewerPayload } from "../../../../../decorators/payload/TechreviewerPayload";
import { getatsRecruitmentTechReviewerInterviewsInterviewIdParticipantsParticipantId } from "../../../../../providers/getatsRecruitmentTechReviewerInterviewsInterviewIdParticipantsParticipantId";

import { IPageIAtsRecruitmentInterviewParticipant } from "../../../../../api/structures/IPageIAtsRecruitmentInterviewParticipant";
import { IAtsRecruitmentInterviewParticipant } from "../../../../../api/structures/IAtsRecruitmentInterviewParticipant";

@Controller("/atsRecruitment/techReviewer/interviews/:interviewId/participants")
export class AtsrecruitmentTechreviewerInterviewsParticipantsController {
  /**
   * Retrieve all participants for a specific interview from
   * ats_recruitment_interview_participants.
   *
   * This endpoint enables authorized users—such as system administrators, HR
   * recruiters, and relevant tech reviewers—to access a complete, up-to-date
   * listing of all participants associated with a particular interview record.
   * Each participant entry includes actor role (applicant, recruiter, reviewer,
   * observer), relation to the interview, invitation timestamp, and current
   * confirmation status. Responses may include filtering, sorting, and
   * pagination of records as needed for listings with many participants.
   *
   * Access is role-restricted for privacy and operational security, with
   * systemAdmin, hrRecruiter, and techReviewer roles allowed. The main table
   * involved is ats_recruitment_interview_participants, with relationships to
   * ats_recruitment_interviews (parent) and the relevant actor entity.
   *
   * Business rules should enforce that only users assigned to or responsible
   * for the interview may access this list, and all accesses should be logged
   * in the access log table for compliance. Security policies ensure that
   * applicant details are not exposed beyond authorized users. The endpoint
   * must also validate that the interviewId exists prior to searching, with
   * appropriate errors for missing or deleted records.
   *
   * Related API operations include creating, updating, or deleting interview
   * participants, as well as retrieving interview and schedule details. If the
   * interviewId does not exist, return a clear error indicating the issue.
   *
   * @param connection
   * @param interviewId Unique identifier for the parent interview whose
   *   participants are to be listed.
   * @param body Filtering and pagination options for participant listing
   *   (optional fields).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TechreviewerAuth()
    techReviewer: TechreviewerPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewParticipant.IRequest,
  ): Promise<IPageIAtsRecruitmentInterviewParticipant> {
    try {
      return await patchatsRecruitmentTechReviewerInterviewsInterviewIdParticipants(
        {
          techReviewer,
          interviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific interview participant from
   * ats_recruitment_interview_participants.
   *
   * This operation allows authorized HR recruiters, system administrators, and
   * tech reviewers to obtain detailed information about a single interview
   * participant. Details include the participant’s role (e.g., applicant,
   * recruiter, tech reviewer), the time of invitation, their current
   * confirmation status (pending, accepted, declined), and the relationship to
   * the parent interview. This is useful for pre-interview preparation,
   * operational control, and compliance auditing.
   *
   * Access restrictions are applied to maintain privacy and business
   * compliance, with only relevant users able to view individual participant
   * data. All accesses are to be logged in compliance with ATS audit and access
   * requirements. Input validation must ensure both interviewId and
   * participantId refer to valid, existing records, with clear errors for
   * missing or deleted participants or interviews.
   *
   * The schema source is the ats_recruitment_interview_participants table,
   * joined with related identity and interview data for context. Other related
   * endpoints include participant listing/search as well as update or removal
   * actions. Error cases may involve inexistent participantIds or unauthorized
   * access attempts, for which meaningful error responses must be provided.
   *
   * @param connection
   * @param interviewId Unique identifier for the interview associated with the
   *   participant.
   * @param participantId Unique identifier for the specific participant within
   *   the interview.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":participantId")
  public async at(
    @TechreviewerAuth()
    techReviewer: TechreviewerPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("participantId")
    participantId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentInterviewParticipant> {
    try {
      return await getatsRecruitmentTechReviewerInterviewsInterviewIdParticipantsParticipantId(
        {
          techReviewer,
          interviewId,
          participantId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
