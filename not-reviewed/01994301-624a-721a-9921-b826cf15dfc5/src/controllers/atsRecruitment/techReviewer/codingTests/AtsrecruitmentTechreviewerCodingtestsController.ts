import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentTechReviewerCodingTests } from "../../../../providers/patchatsRecruitmentTechReviewerCodingTests";
import { TechreviewerAuth } from "../../../../decorators/TechreviewerAuth";
import { TechreviewerPayload } from "../../../../decorators/payload/TechreviewerPayload";
import { getatsRecruitmentTechReviewerCodingTestsCodingTestId } from "../../../../providers/getatsRecruitmentTechReviewerCodingTestsCodingTestId";

import { IPageIAtsRecruitmentCodingTest } from "../../../../api/structures/IPageIAtsRecruitmentCodingTest";
import { IAtsRecruitmentCodingTest } from "../../../../api/structures/IAtsRecruitmentCodingTest";

@Controller("/atsRecruitment/techReviewer/codingTests")
export class AtsrecruitmentTechreviewerCodingtestsController {
  /**
   * Search and retrieve a filtered, paginated list of coding test assignments
   * and progress.
   *
   * Retrieves a paginated collection of coding test assigments from
   * ats_recruitment_coding_tests, supporting advanced filter criteria such as
   * applicant, job posting, status (scheduled, in progress, completed, failed),
   * delivery channel (internal or 3rd-party), scheduled/delivery dates, and
   * provider-specific IDs. It is primarily used by HR and technical reviewers
   * to monitor applicant assessment pipeline progress and by system admins for
   * compliance oversight.
   *
   * Integration with related tables (applications, applicants,
   * submission/results/feedback) enables rich operational dashboarding, while
   * indices on status, applicant, and provider allow for efficient processing
   * even with a high volume of tests.
   *
   * Authorization distinguishes that HR recruiters can only see tests related
   * to their postings, tech reviewers are limited to their assignments, and
   * system admins may see all entries. Each record may summarize the test
   * state, links to test or review, and primary metadata needed for next
   * action. Large datasets are returned in a paginated form.
   *
   * @param connection
   * @param body Complex filtering parameters and pagination controls for coding
   *   test search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TechreviewerAuth()
    techReviewer: TechreviewerPayload,
    @TypedBody()
    body: IAtsRecruitmentCodingTest.IRequest,
  ): Promise<IPageIAtsRecruitmentCodingTest> {
    try {
      return await patchatsRecruitmentTechReviewerCodingTests({
        techReviewer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific coding test assignment in
   * ATS.
   *
   * Returns all details for a specific coding test record from
   * ats_recruitment_coding_tests, referenced by codingTestId. This includes
   * scheduling, delivery status, applicant and HR references, external provider
   * linkage, expiration dates, and all current state and tracking fields. Used
   * by HR and tech reviewers to monitor assignment progress and investigate
   * applicant issues.
   *
   * Authorization ensures HR can only see assignments for their postings, tech
   * reviewers see only their assignments, system admins have full access, and
   * applicants can view their own assignments. Sensitive provider integration
   * details may be masked except for system admins.
   *
   * Related operations include indexing (list view), and submission/feedback
   * tracking endpoints. Error handling surfaces not found, access violation, or
   * data corruption cases specifically.
   *
   * @param connection
   * @param codingTestId Unique identifier for the coding test assignment to be
   *   retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":codingTestId")
  public async at(
    @TechreviewerAuth()
    techReviewer: TechreviewerPayload,
    @TypedParam("codingTestId")
    codingTestId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentCodingTest> {
    try {
      return await getatsRecruitmentTechReviewerCodingTestsCodingTestId({
        techReviewer,
        codingTestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
