import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentHrRecruiterJobPostingStates } from "../../../../providers/patchatsRecruitmentHrRecruiterJobPostingStates";
import { HrrecruiterAuth } from "../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../decorators/payload/HrrecruiterPayload";
import { getatsRecruitmentHrRecruiterJobPostingStatesJobPostingStateId } from "../../../../providers/getatsRecruitmentHrRecruiterJobPostingStatesJobPostingStateId";

import { IPageIAtsRecruitmentJobPostingState } from "../../../../api/structures/IPageIAtsRecruitmentJobPostingState";
import { IAtsRecruitmentJobPostingState } from "../../../../api/structures/IAtsRecruitmentJobPostingState";

@Controller("/atsRecruitment/hrRecruiter/jobPostingStates")
export class AtsrecruitmentHrrecruiterJobpostingstatesController {
  /**
   * Search and retrieve a paginated list of job posting states defined in the
   * system (ats_recruitment_job_posting_states).
   *
   * Retrieve a filtered and paginated list of job posting state records to
   * support admin and HR selection, validation, and update of available status
   * workflow codes. This endpoint performs advanced search, filtering, and
   * pagination over all entries in ats_recruitment_job_posting_states, using
   * fields such as state code, human-readable label, is_active, description,
   * and sort order for filtering and ordering.
   *
   * Implemented authorization ensures that only users with systemAdmin or
   * hrRecruiter roles can search administrative job state definitions,
   * maintaining separation of business logic domains and audit accuracy.
   * Sensitive operations or exports require further privilege. Returned data
   * provides insight into both platform-supported (active=true) and deprecated
   * (active=false, deleted_at not null) workflow statuses.
   *
   * Errors caused by invalid filters, insufficient authorization, or unexpected
   * query overloads are handled with clear user-facing messages based on system
   * policy. This endpoint is often used in conjunction with job posting
   * creation and management flows, and its results may inform dropdown
   * selectors or workflow UI transitions.
   *
   * @param connection
   * @param body Filter and pagination criteria for searching job posting states
   *   (state code, label, status, active, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentJobPostingState.IRequest,
  ): Promise<IPageIAtsRecruitmentJobPostingState.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterJobPostingStates({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific job posting state
   * (ats_recruitment_job_posting_states) by ID.
   *
   * Retrieve the full record details for a single job posting state, identified
   * by jobPostingStateId (UUID). The response includes fields such as
   * state_code, label, description, is_active, sort_order, creation and update
   * timestamps, and soft-deletion marker.
   *
   * Access is restricted to administrative and HR recruiter roles, ensuring
   * only privileged users can perform code/label mapping or workflow
   * adjustment. This endpoint markets itself as a readonly business entity
   * lookup, suitable for supporting validation at runtime or for pre-loading
   * context for update/edit interfaces.
   *
   * If the specified jobPostingStateId does not exist or is soft-deleted, a
   * clear not-found error is returned. Permission violations generate a 403
   * error. Typical use cases include admin UI modules for workflow management
   * or business rule enforcement based on active/deprecated states.
   *
   * @param connection
   * @param jobPostingStateId Unique identifier (UUID) of the target job posting
   *   state.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jobPostingStateId")
  public async at(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("jobPostingStateId")
    jobPostingStateId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentJobPostingState> {
    try {
      return await getatsRecruitmentHrRecruiterJobPostingStatesJobPostingStateId(
        {
          hrRecruiter,
          jobPostingStateId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
