import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentHrRecruiterInterviews } from "../../../../providers/postatsRecruitmentHrRecruiterInterviews";
import { HrrecruiterAuth } from "../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../decorators/payload/HrrecruiterPayload";
import { patchatsRecruitmentHrRecruiterInterviews } from "../../../../providers/patchatsRecruitmentHrRecruiterInterviews";
import { getatsRecruitmentHrRecruiterInterviewsInterviewId } from "../../../../providers/getatsRecruitmentHrRecruiterInterviewsInterviewId";
import { putatsRecruitmentHrRecruiterInterviewsInterviewId } from "../../../../providers/putatsRecruitmentHrRecruiterInterviewsInterviewId";
import { deleteatsRecruitmentHrRecruiterInterviewsInterviewId } from "../../../../providers/deleteatsRecruitmentHrRecruiterInterviewsInterviewId";

import { IAtsRecruitmentInterview } from "../../../../api/structures/IAtsRecruitmentInterview";
import { IPageIAtsRecruitmentInterview } from "../../../../api/structures/IPageIAtsRecruitmentInterview";

@Controller("/atsRecruitment/hrRecruiter/interviews")
export class AtsrecruitmentHrrecruiterInterviewsController {
  /**
   * Create a new interview record (ats_recruitment_interviews) for a particular
   * application.
   *
   * This API operation allows an HR recruiter to create and schedule a new
   * interview session against an application. The POST body defines properties
   * including the application UUID, title, interview stage (e.g., tech_round,
   * final), notes, and initial participant list. Upon success, the system
   * returns full details of the newly created interview entity, ready for
   * association with schedules and questions by follow-up operations.
   *
   * Security and business logic require that only HR recruiters (and authorized
   * delegates) can perform interview creation. The provided application must
   * exist and be in an interview-eligible state. Data is validated according to
   * the ats_recruitment_interviews schema, and schedule slots and participants
   * may be managed in associated endpoints. The operation fully participates in
   * audit trails and compliance logging as required by the business
   * requirements.
   *
   * @param connection
   * @param body Interview creation payload, including application ID, title,
   *   stage, and participant list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentInterview.ICreate,
  ): Promise<IAtsRecruitmentInterview> {
    try {
      return await postatsRecruitmentHrRecruiterInterviews({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of interviews
   * (ats_recruitment_interviews).
   *
   * Retrieve a filtered and paginated list of interview records from the
   * system. This operation provides advanced search capabilities, allowing
   * users to find interviews by stage (e.g., first phase, tech round), status
   * (scheduled, completed, cancelled), date ranges, and notes. Filtering can
   * include associated applicant/application/job posting metadata if permitted
   * by requester role.
   *
   * Security considerations are enforced, with role-based filtering ensuring
   * applicants only see their own interviews, reviewers see assigned
   * interviews, and HR/admin have broader access. Results can be sorted by
   * schedule, creation timestamp, or updated timestamp. Access entails
   * compliance with interview participant and schedule join data, as per
   * requirements in the Prisma schema and business documentation.
   *
   * Typical use cases include dashboards for HR to monitor upcoming interviews,
   * technical reviewers to manage assigned rounds, and applicants to view their
   * own interview schedule. Pagination parameters allow scalable monitoring in
   * high-velocity recruitment cycles. Error handling provides informative
   * guidance if search criteria violate permissions or result in empty sets.
   *
   * @param connection
   * @param body Search and filter parameters for interviews, including stage,
   *   status, scheduled date ranges, and participant properties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentInterview.IRequest,
  ): Promise<IPageIAtsRecruitmentInterview.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterInterviews({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single interview's detailed information by interviewId
   * (ats_recruitment_interviews).
   *
   * Fetch detailed information for a specific interview instance identified by
   * its UUID. The returned data includes all primary interview attributes
   * (title, stage, status, notes), and aggregates relevant scheduling,
   * participant, question, and calendar sync data for context as
   * joined/embedded resources are allowed.
   *
   * Role-based security ensures only participants
   * (applicant/recruiter/reviewer) and authorized HR or system admins are
   * permitted to view the interview detail. This endpoint supports
   * comprehensive review of the interview's current state, participant
   * confirmations, all scheduled time slots, attached questions (with
   * type/classification), and status change notes. Querying non-existent or
   * unauthorized interviews returns a descriptive error or permission denial
   * message.
   *
   * Advanced error handling ensures compliance with participant and schedule
   * relationships and maintains privacy controls over linked personal data,
   * following the ats_recruitment_interviews schema and its relations.
   *
   * @param connection
   * @param interviewId The unique UUID of the interview to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":interviewId")
  public async at(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentInterview> {
    try {
      return await getatsRecruitmentHrRecruiterInterviewsInterviewId({
        hrRecruiter,
        interviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update interview details for a given interviewId
   * (ats_recruitment_interviews).
   *
   * Allows HR recruiters to update details of a scheduled interview, including
   * the interview's title, stage label, notes, or current status (rescheduled,
   * cancelled, completed, etc). Input payload must specify which fields to
   * update. The operation prescribes business logic for status transitions
   * (e.g., scheduled → completed), with permission checks to prevent
   * unauthorized changes to ineligible interviews.
   *
   * The request enforces full validation according to schema requirements,
   * maintains audit trails, and ensures data consistency (e.g., rescheduled
   * interviews cannot lose all participant assignments). Only authorized HR and
   * admin roles can update arbitrary interviews, while regular participants may
   * be limited to confirmation status for themselves. Error handling covers
   * invalid UUIDs, attempts on deleted or archived interviews, and rejection of
   * forbidden state transitions.
   *
   * @param connection
   * @param interviewId The target interview's UUID to be updated.
   * @param body Interview update request specifying updated title, notes,
   *   status, participants, or other allowed fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":interviewId")
  public async update(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterview.IUpdate,
  ): Promise<IAtsRecruitmentInterview> {
    try {
      return await putatsRecruitmentHrRecruiterInterviewsInterviewId({
        hrRecruiter,
        interviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove an interview from the ats_recruitment_interviews table.
   *
   * The purpose of this operation is to enable authorized users—specifically
   * system administrators and HR recruiters—to irreversibly remove an entire
   * interview record from the ATS recruitment system. This includes the
   * interview metadata, scheduling records, participants, and associated
   * interview questions. Once deleted, the information is permanently removed
   * from the database and cannot be restored, supporting GDPR and business data
   * lifecycle policies.
   *
   * Security considerations restrict access to this operation to systemAdmin
   * and hrRecruiter roles. Appropriate authorization checks must be enforced,
   * and all deletion actions must be logged in the audit trail with full
   * context, including actor and timestamp, to ensure compliance and enable
   * post-mortem analysis if necessary.
   *
   * The operation directly manipulates the ats_recruitment_interviews table.
   * Any related records in child tables (such as participants, schedules, and
   * questions) must be removed or cascade-deleted to maintain referential
   * integrity. This does not perform any kind of soft deletion; the record is
   * eliminated entirely from persistent storage. Attempts to access the
   * interview after deletion should result in appropriate errors.
   *
   * Related operations include interview creation, updating, and listing
   * endpoints, as well as recovery and audit queries for administrative review.
   * If deletion fails due to constraints or non-existent interviewId, clear
   * error messages should be provided.
   *
   * @param connection
   * @param interviewId Unique identifier of the interview to be permanently
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":interviewId")
  public async erase(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentHrRecruiterInterviewsInterviewId({
        hrRecruiter,
        interviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
