import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants } from "../../../../../providers/postatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants";
import { HrrecruiterAuth } from "../../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../../decorators/payload/HrrecruiterPayload";
import { patchatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants } from "../../../../../providers/patchatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants";
import { getatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId } from "../../../../../providers/getatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId";
import { putatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId } from "../../../../../providers/putatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId";
import { deleteatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId } from "../../../../../providers/deleteatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId";

import { IAtsRecruitmentInterviewParticipant } from "../../../../../api/structures/IAtsRecruitmentInterviewParticipant";
import { IPageIAtsRecruitmentInterviewParticipant } from "../../../../../api/structures/IPageIAtsRecruitmentInterviewParticipant";

@Controller("/atsRecruitment/hrRecruiter/interviews/:interviewId/participants")
export class AtsrecruitmentHrrecruiterInterviewsParticipantsController {
  /**
   * Add a new participant to an interview in
   * ats_recruitment_interview_participants.
   *
   * This operation allows authorized HR recruiters and system administrators to
   * add a new participant to an interview record. The new participant may be an
   * applicant, recruiter, tech reviewer, or other actor needed for the session.
   * Creation includes participant role, actor reference, initial invitation
   * timestamp, and default confirmation status (e.g., pending).
   *
   * Security requires validation that only privileged users may create
   * participants and that the referenced interviewId exists and is active. If
   * attempting to add a duplicate participant (same actor/interview/role), the
   * system must reject with a unique constraint violation. All additions are
   * logged for compliance and future participant management.
   *
   * This operation works directly with the
   * ats_recruitment_interview_participants table, with necessary foreign keys
   * to the interview and actor tables. Related API operations include
   * participant listing, deletion, and interview retrieval. Inputs must be
   * validated for type, completeness, and referential integrity; errors for
   * nonexistent interviews or actors should yield clear business errors.
   *
   * Edge cases include attempts to add participants to deleted or closed
   * interviews, which must fail gracefully. Successful completion returns the
   * full participant record as confirmation.
   *
   * @param connection
   * @param interviewId Unique identifier for the parent interview to which the
   *   participant will be added.
   * @param body Information required to create a new interview participant
   *   (actor, role, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewParticipant.ICreate,
  ): Promise<IAtsRecruitmentInterviewParticipant> {
    try {
      return await postatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants(
        {
          hrRecruiter,
          interviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve all participants for a specific interview from
   * ats_recruitment_interview_participants.
   *
   * This endpoint enables authorized users—such as system administrators, HR
   * recruiters, and relevant tech reviewers—to access a complete, up-to-date
   * listing of all participants associated with a particular interview record.
   * Each participant entry includes actor role (applicant, recruiter, reviewer,
   * observer), relation to the interview, invitation timestamp, and current
   * confirmation status. Responses may include filtering, sorting, and
   * pagination of records as needed for listings with many participants.
   *
   * Access is role-restricted for privacy and operational security, with
   * systemAdmin, hrRecruiter, and techReviewer roles allowed. The main table
   * involved is ats_recruitment_interview_participants, with relationships to
   * ats_recruitment_interviews (parent) and the relevant actor entity.
   *
   * Business rules should enforce that only users assigned to or responsible
   * for the interview may access this list, and all accesses should be logged
   * in the access log table for compliance. Security policies ensure that
   * applicant details are not exposed beyond authorized users. The endpoint
   * must also validate that the interviewId exists prior to searching, with
   * appropriate errors for missing or deleted records.
   *
   * Related API operations include creating, updating, or deleting interview
   * participants, as well as retrieving interview and schedule details. If the
   * interviewId does not exist, return a clear error indicating the issue.
   *
   * @param connection
   * @param interviewId Unique identifier for the parent interview whose
   *   participants are to be listed.
   * @param body Filtering and pagination options for participant listing
   *   (optional fields).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewParticipant.IRequest,
  ): Promise<IPageIAtsRecruitmentInterviewParticipant> {
    try {
      return await patchatsRecruitmentHrRecruiterInterviewsInterviewIdParticipants(
        {
          hrRecruiter,
          interviewId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific interview participant from
   * ats_recruitment_interview_participants.
   *
   * This operation allows authorized HR recruiters, system administrators, and
   * tech reviewers to obtain detailed information about a single interview
   * participant. Details include the participant’s role (e.g., applicant,
   * recruiter, tech reviewer), the time of invitation, their current
   * confirmation status (pending, accepted, declined), and the relationship to
   * the parent interview. This is useful for pre-interview preparation,
   * operational control, and compliance auditing.
   *
   * Access restrictions are applied to maintain privacy and business
   * compliance, with only relevant users able to view individual participant
   * data. All accesses are to be logged in compliance with ATS audit and access
   * requirements. Input validation must ensure both interviewId and
   * participantId refer to valid, existing records, with clear errors for
   * missing or deleted participants or interviews.
   *
   * The schema source is the ats_recruitment_interview_participants table,
   * joined with related identity and interview data for context. Other related
   * endpoints include participant listing/search as well as update or removal
   * actions. Error cases may involve inexistent participantIds or unauthorized
   * access attempts, for which meaningful error responses must be provided.
   *
   * @param connection
   * @param interviewId Unique identifier for the interview associated with the
   *   participant.
   * @param participantId Unique identifier for the specific participant within
   *   the interview.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":participantId")
  public async at(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("participantId")
    participantId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentInterviewParticipant> {
    try {
      return await getatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId(
        {
          hrRecruiter,
          interviewId,
          participantId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update interview participant details by interview and participant ID
   * (ats_recruitment_interview_participants).
   *
   * Update details for a specific interview participant by interview and
   * participant ID. This can change participant role (applicant, recruiter,
   * reviewer) or confirmation status (pending, accepted, declined, tentative).
   *
   * The interview participant entity is part of
   * ats_recruitment_interview_participants, which serves as the link between
   * interviews and their human actors. Only HR recruiters or system
   * administrators can update participant details to ensure privileged and
   * authorized modification.
   *
   * Changes are logged for audit compliance, and improper access is denied with
   * explanatory error messages. Edits must respect the participant's
   * relationship (e.g., an applicant cannot be changed to a reviewer
   * arbitrarily).
   *
   * Validation covers interview existence, participant presence, allowed status
   * transitions, and role constraints. Audit logs will capture who performed
   * the edit and what details were modified for incident forensics.
   *
   * This API should be used in conjunction with GET participants, PATCH for
   * listing schedules, and DELETE for participant removal as part of broader
   * interview and participant management.
   *
   * @param connection
   * @param interviewId Unique identifier for the target interview.
   * @param participantId Unique identifier for the interview participant to be
   *   updated.
   * @param body Information to update for the interview participant (e.g.,
   *   role, confirmation status).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":participantId")
  public async update(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("participantId")
    participantId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentInterviewParticipant.IUpdate,
  ): Promise<IAtsRecruitmentInterviewParticipant> {
    try {
      return await putatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId(
        {
          hrRecruiter,
          interviewId,
          participantId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a participant from an interview
   * (ats_recruitment_interview_participants).
   *
   * Erase (permanently remove) a participant from an interview given both the
   * interview and participant IDs. The operation is mapped to
   * ats_recruitment_interview_participants and supports compliance/audit by
   * logging who performed the deletion.
   *
   * This API endpoint is protected—only accessible to users with hrRecruiter or
   * systemAdmin roles. Deletion is permanent (not soft-delete), removing the
   * participant link and preventing further notifications or participation in
   * the scheduled interview. The participant entity is not deleted from the
   * system, only the association with this specific interview.
   *
   * If the participant does not exist for the given interview, a not found
   * error is returned. Business logic prevents removing mandatory participants
   * (e.g., the last applicant in mandatory configuration) and enforces schedule
   * validity.
   *
   * Typical workflow includes using this API after a change in schedule or
   * participant assignment, or to manage replacements/cancelations.
   *
   * @param connection
   * @param interviewId Unique identifier for the interview containing the
   *   participant.
   * @param participantId Unique identifier of the participant to be removed
   *   from the interview.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":participantId")
  public async erase(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("interviewId")
    interviewId: string & tags.Format<"uuid">,
    @TypedParam("participantId")
    participantId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteatsRecruitmentHrRecruiterInterviewsInterviewIdParticipantsParticipantId(
        {
          hrRecruiter,
          interviewId,
          participantId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
