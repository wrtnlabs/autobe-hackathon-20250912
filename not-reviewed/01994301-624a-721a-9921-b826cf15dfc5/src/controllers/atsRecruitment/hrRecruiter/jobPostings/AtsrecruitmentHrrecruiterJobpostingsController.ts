import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postatsRecruitmentHrRecruiterJobPostings } from "../../../../providers/postatsRecruitmentHrRecruiterJobPostings";
import { HrrecruiterAuth } from "../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../decorators/payload/HrrecruiterPayload";
import { patchatsRecruitmentHrRecruiterJobPostings } from "../../../../providers/patchatsRecruitmentHrRecruiterJobPostings";

import { IAtsRecruitmentJobPosting } from "../../../../api/structures/IAtsRecruitmentJobPosting";
import { IPageIAtsRecruitmentJobPosting } from "../../../../api/structures/IPageIAtsRecruitmentJobPosting";

@Controller("/atsRecruitment/hrRecruiter/jobPostings")
export class AtsrecruitmentHrrecruiterJobpostingsController {
  /**
   * Creates a new job posting in the ATS (ats_recruitment_job_postings);
   * allowed for HR recruiters and system admins.
   *
   * This operation enables HR recruiters or system administrators to register a
   * new job posting into the ATS platform. Input data is received via the
   * request body adhering to the IAtsRecruitmentJobPosting.ICreate DTO, which
   * covers all necessary attributes as required by the schema, including title,
   * description, employment type, job status, recruiter assignment, visibility,
   * and any optional location or salary information.
   *
   * Strict validation is performed to guarantee unique job titles per recruiter
   * (HR uniqueness), valid employment type/state codes, and future application
   * deadlines (where given). The system enforces access control—only
   * authenticated HR or admin users are permitted to create postings. On
   * successful creation, the full job posting entity
   * (IAtsRecruitmentJobPosting) is returned to the client.
   *
   * Post-creation actions such as notification dispatching, audit logging, and
   * index rebuilding are handled by downstream business logic as mandated by
   * compliance and audit requirements.
   *
   * @param connection
   * @param body Job posting creation information (title, description,
   *   employment type, recruiter ID, deadlines, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentJobPosting.ICreate,
  ): Promise<IAtsRecruitmentJobPosting> {
    try {
      return await postatsRecruitmentHrRecruiterJobPostings({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Performs advanced search and paginated retrieval of job postings
   * (ats_recruitment_job_postings) with filters.
   *
   * This operation allows authorized users to perform a comprehensive search
   * and paginated listing of job postings (ats_recruitment_job_postings), with
   * advanced filtering capabilities provided in the request body. Search fields
   * include job title (partial match), HR recruiter assignment, employment
   * type, posting status, visibility, location, salary range, and deadline
   * windows—all corresponding directly to the schema fields defined in the
   * Prisma model.
   *
   * The business logic ensures only active (is_visible or non-deleted) postings
   * are included unless explicitly searching for hidden/archived ones. Query
   * performance is optimized via indexes on title, state, type, and created_at
   * date, supporting large-scale HR system usage. Proper authorization ensures
   * only authorized recruiters, HR staff, or system administrators can access
   * sensitive job data not available to general applicants.
   *
   * Rate limiting, result size limits, and query slow-logs are enforced through
   * policy and audit mechanisms to prevent abuse or system degradation.
   *
   * @param connection
   * @param body Filtering, search, and pagination criteria for job postings
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentJobPosting.IRequest,
  ): Promise<IPageIAtsRecruitmentJobPosting.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterJobPostings({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
