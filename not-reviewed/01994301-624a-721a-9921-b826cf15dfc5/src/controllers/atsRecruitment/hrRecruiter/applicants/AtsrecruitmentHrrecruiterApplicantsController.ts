import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentHrRecruiterApplicants } from "../../../../providers/patchatsRecruitmentHrRecruiterApplicants";
import { HrrecruiterAuth } from "../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../decorators/payload/HrrecruiterPayload";
import { getatsRecruitmentHrRecruiterApplicantsApplicantId } from "../../../../providers/getatsRecruitmentHrRecruiterApplicantsApplicantId";
import { putatsRecruitmentHrRecruiterApplicantsApplicantId } from "../../../../providers/putatsRecruitmentHrRecruiterApplicantsApplicantId";

import { IPageIAtsRecruitmentApplicant } from "../../../../api/structures/IPageIAtsRecruitmentApplicant";
import { IAtsRecruitmentApplicant } from "../../../../api/structures/IAtsRecruitmentApplicant";

@Controller("/atsRecruitment/hrRecruiter/applicants")
export class AtsrecruitmentHrrecruiterApplicantsController {
  /**
   * Search and retrieve a paginated list of ats_recruitment_applicants records
   * with filtering and sorting.
   *
   * Enables HR recruiters or system administrators to retrieve a paginated,
   * filterable list of applicant accounts from the ats_recruitment_applicants
   * table. Search filters can include name, email, account status, creation
   * date, and activation status.
   *
   * The list supports pagination and sorting to efficiently browse large
   * numbers of applicants, with performance optimized via indexed fields. Each
   * applicant record includes primary identification data, contact details,
   * activation state, and basic timestamps. Access is limited to authorized HR
   * staff and administrators.
   *
   * Role-based restrictions ensure privacy of applicant contact data, and audit
   * logging is performed for search activities. Standard error handling
   * (permission denied, invalid parameters) applies to this operation.
   *
   * @param connection
   * @param body Search criteria, pagination, and sorting parameters for
   *   applicant filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentApplicant.IRequest,
  ): Promise<IPageIAtsRecruitmentApplicant.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterApplicants({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed applicant profile by applicantId from
   * ats_recruitment_applicants.
   *
   * Fetches the complete profile for a single applicant user account,
   * identified by applicantId. Returns structured applicant profile data
   * including authentication email, full name, phone, account activity status,
   * registration, and update timestamps, mirroring the database record
   * structure.
   *
   * Only HR recruiters and system administrators are permitted to access this
   * operation due to sensitive personal data. The system audits all access for
   * compliance and privacy reporting. Responds with detailed 404/403 error on
   * not-found or unauthorized access.
   *
   * @param connection
   * @param applicantId Unique identifier of the applicant to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":applicantId")
  public async at(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("applicantId")
    applicantId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentApplicant> {
    try {
      return await getatsRecruitmentHrRecruiterApplicantsApplicantId({
        hrRecruiter,
        applicantId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing applicant account by applicantId in
   * ats_recruitment_applicants.
   *
   * Modifies the profile of an existing applicant account as identified by
   * applicantId in the path. Permitted updatable fields include name, phone
   * number, and account activation state (is_active). The authenticated backend
   * system always safely processes the new password (if present) as a secure
   * hash, never as plaintext. Attempts to update email or primary identifier
   * fields are rejected.
   *
   * Only accessible to HR recruiters and system administrators for account
   * management. All operations are audited for security, and changes to key
   * fields are logged for compliance. Returns the updated profile record or
   * appropriate error (not found, permission denied, invalid input).
   *
   * @param connection
   * @param applicantId Unique identifier of the applicant account to update.
   * @param body Fields to update on the applicant profile (name, phone,
   *   password, is_active).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":applicantId")
  public async update(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("applicantId")
    applicantId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicant.IUpdate,
  ): Promise<IAtsRecruitmentApplicant> {
    try {
      return await putatsRecruitmentHrRecruiterApplicantsApplicantId({
        hrRecruiter,
        applicantId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
