import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postatsRecruitmentHrRecruiterExportJobs } from "../../../../providers/postatsRecruitmentHrRecruiterExportJobs";
import { HrrecruiterAuth } from "../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../decorators/payload/HrrecruiterPayload";
import { patchatsRecruitmentHrRecruiterExportJobs } from "../../../../providers/patchatsRecruitmentHrRecruiterExportJobs";
import { getatsRecruitmentHrRecruiterExportJobsExportJobId } from "../../../../providers/getatsRecruitmentHrRecruiterExportJobsExportJobId";
import { putatsRecruitmentHrRecruiterExportJobsExportJobId } from "../../../../providers/putatsRecruitmentHrRecruiterExportJobsExportJobId";

import { IAtsRecruitmentExportJob } from "../../../../api/structures/IAtsRecruitmentExportJob";
import { IPageIAtsRecruitmentExportJob } from "../../../../api/structures/IPageIAtsRecruitmentExportJob";

@Controller("/atsRecruitment/hrRecruiter/exportJobs")
export class AtsrecruitmentHrrecruiterExportjobsController {
  /**
   * Create an export job to request system data export to CSV/Excel, storing
   * configuration, purpose, and initiator metadata.
   *
   * This API operation enables authorized users (typically HR recruiters or
   * system administrators) to initiate an export job by specifying the target
   * data type (job_type), filter criteria, selected columns, and delivery
   * method. Upon creation, the operation stores configuration and
   * meta-information in the ats_recruitment_export_jobs table, marking job
   * status as pending or generating.
   *
   * The client provides configuration in the request body (such as filters,
   * job_type, delivery method, and optional description), and the backend
   * schedules background processing for the export. The export file itself is
   * produced asynchronously; users can later poll the export job record to
   * check the status and download the resulting file once available.
   *
   * Appropriate permission checks ensure that export operations are only
   * available to authorized users, and sensitive data can only be requested and
   * delivered within business rules. All operation details and context are
   * included for audit and compliance logging.
   *
   * @param connection
   * @param body Export job creation parameters, including job_type, filter
   *   criteria, delivery method, and description as appropriate to
   *   IAtsRecruitmentExportJob.ICreate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentExportJob.ICreate,
  ): Promise<IAtsRecruitmentExportJob> {
    try {
      return await postatsRecruitmentHrRecruiterExportJobs({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate export job records
   * (ats_recruitment_export_jobs).
   *
   * This endpoint allows authorized users such as HR recruiters or system
   * administrators to search, filter, and retrieve a paginated list of export
   * job records. Export jobs track system- or user-initiated requests to
   * extract business data from the ATS platform into downloadable files,
   * including export type (applicants, resumes, applications), request status,
   * initiator IDs, and delivery details.
   *
   * The PATCH method supports advanced querying and filtering for export job
   * metadata: job status, type, filename, actor details, date intervals, and
   * custom query via filter JSON. Results are paginated for efficiency as
   * export jobs may number in the hundreds or thousands.
   *
   * Export jobs include sensitive business and personal data, so access is
   * strictly limited to system admins and HR. All queries are trace-audited.
   * This operation enables review, monitoring, and troubleshooting of all
   * historical data exports for compliance and data governance.
   *
   * @param connection
   * @param body Search, filter, or pagination parameters for export job search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedBody()
    body: IAtsRecruitmentExportJob.IRequest,
  ): Promise<IPageIAtsRecruitmentExportJob.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterExportJobs({
        hrRecruiter,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific export job from the
   * ats_recruitment_export_jobs table.
   *
   * This API operation is designed to return the complete record for a single
   * export job as modeled in the ats_recruitment_export_jobs Prisma schema.
   * Each export job represents a request initiated by an authorized user (HR,
   * admin, or applicant) to extract tabular data to CSV or Excel for
   * compliance, reporting, or data portability.
   *
   * The endpoint requires the export job's unique identifier (exportJobId) as a
   * path parameter. On success, it will deliver current status, export type,
   * filter and delivery configuration, initiator and contextual metadata,
   * and—if available—a URI to download the exported file. Fields such as
   * file_uri or delivered_at may be null if the job is in progress or has
   * failed. Desensitized representation is used for sensitive fields where
   * compliance is necessary.
   *
   * Security and permission controls ensure only authorized actors (usually the
   * export initiator or users with sufficient privileges) may access this
   * endpoint and sensitive data exposure is prevented by business logic. This
   * operation is critical for user self-service data export tracking and
   * administrator oversight.
   *
   * @param connection
   * @param exportJobId Unique identifier of the export job to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":exportJobId")
  public async at(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("exportJobId")
    exportJobId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentExportJob> {
    try {
      return await getatsRecruitmentHrRecruiterExportJobsExportJobId({
        hrRecruiter,
        exportJobId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an export job's configuration or metadata if allowed by business
   * policy and job status.
   *
   * This API updates properties of a specific export job, such as job metadata,
   * filter configuration, purpose description, or status, as allowed by system
   * rules. The operation receives the export job's unique identifier
   * (exportJobId) as a path parameter, and the new configuration attributes are
   * provided in the request body according to the
   * IAtsRecruitmentExportJob.IUpdate schema. Updates may only be permitted
   * before export is finalized or delivered and should be subject to business
   * constraints (e.g., status must permit changes).
   *
   * All modifications are securely tracked and logged in audit records for
   * compliance, and authorization is checked such that only the export
   * initiator or system administrators can make updates. Attempts to modify
   * completed/locked export jobs are handled gracefully with clear error
   * messaging.
   *
   * @param connection
   * @param exportJobId Unique identifier of the export job to update.
   * @param body Update parameters for the export job, matching
   *   IAtsRecruitmentExportJob.IUpdate. Only permitted fields may be included.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":exportJobId")
  public async update(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("exportJobId")
    exportJobId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentExportJob.IUpdate,
  ): Promise<IAtsRecruitmentExportJob> {
    try {
      return await putatsRecruitmentHrRecruiterExportJobsExportJobId({
        hrRecruiter,
        exportJobId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
