import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchatsRecruitmentHrRecruiterApplicationsApplicationIdSkillMatches } from "../../../../../providers/patchatsRecruitmentHrRecruiterApplicationsApplicationIdSkillMatches";
import { HrrecruiterAuth } from "../../../../../decorators/HrrecruiterAuth";
import { HrrecruiterPayload } from "../../../../../decorators/payload/HrrecruiterPayload";

import { IAtsRecruitmentApplicationSkillMatch } from "../../../../../api/structures/IAtsRecruitmentApplicationSkillMatch";
import { IPageIAtsRecruitmentApplicationSkillMatch } from "../../../../../api/structures/IPageIAtsRecruitmentApplicationSkillMatch";

@Controller(
  "/atsRecruitment/hrRecruiter/applications/:applicationId/skillMatches",
)
export class AtsrecruitmentHrrecruiterApplicationsSkillmatchesController {
  /**
   * Create a new skill match entry for a job application in
   * ats_recruitment_application_skill_matches.
   *
   * This API operation enables the creation of a new skill match record for a
   * specific application, linking a skill to the application and recording
   * match type, AI score, and manual verification status. The record is used
   * for analytics, automated matching results, or manual correction by HR. The
   * payload must include a valid skill ID, match type, AI score (if provided),
   * and manual verification status. The response returns the newly created
   * skill match with all attributes for confirmation and downstream
   * processing.
   *
   * Access is restricted to HR recruiters and system administrators due to the
   * sensitive nature of hiring evaluation data. All actions are audited and
   * must conform to the workflow rules of the recruitment platform. Insertion
   * is validated to prevent duplicate skill matches for the same
   * application-skill pair.
   *
   * This operation writes to the ats_recruitment_application_skill_matches
   * Prisma model.
   *
   * @param connection
   * @param applicationId Unique identifier of the job application for which the
   *   new skill match is being created.
   * @param body Data for the new skill match, including skill id, match type,
   *   AI score, and verification flags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicationSkillMatch.ICreate,
  ): Promise<IAtsRecruitmentApplicationSkillMatch> {
    applicationId;
    body;
    return typia.random<IAtsRecruitmentApplicationSkillMatch>();
  }

  /**
   * Retrieve a paginated list of skill match records for a given application
   * from ats_recruitment_application_skill_matches table.
   *
   * This API operation returns a filtered and paginated list of skill match
   * results linked to a specific job application. Each skill match represents
   * the outcome of AI or manual comparison between the applicant's resume and
   * the job requirements, with match type, confidence, and verification
   * status.
   *
   * HR recruiters and system administrators may use this API to review which
   * skills were matched automatically, which need manual verification, and
   * assess candidate fit. Filtering options allow narrowing results by skill,
   * match type (required/preferred/missing etc.), or verification status.
   *
   * Security: Only authenticated HR recruiters and system administrators may
   * use this endpoint to ensure privacy and protect sensitive evaluation
   * information. Proper permission checks are enforced and access is logged for
   * audit trail purposes.
   *
   * This operation integrates the ats_recruitment_application_skill_matches
   * Prisma table and includes all related fields as described in the schema.
   * Business validation ensures the applicationId belongs to the current
   * organization context.
   *
   * @param connection
   * @param applicationId Unique identifier of the job application whose skill
   *   matches are requested.
   * @param body Search and filter parameters for paginated skill match
   *   retrieval within the given application.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @HrrecruiterAuth()
    hrRecruiter: HrrecruiterPayload,
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicationSkillMatch.IRequest,
  ): Promise<IPageIAtsRecruitmentApplicationSkillMatch.ISummary> {
    try {
      return await patchatsRecruitmentHrRecruiterApplicationsApplicationIdSkillMatches(
        {
          hrRecruiter,
          applicationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information on a specific skill match for an application from
   * ats_recruitment_application_skill_matches.
   *
   * This API operation provides complete details for a single skill match
   * record, as identified by skillMatchId, within the context of a given
   * application. The skill match includes AI/NLP-derived similarity scores,
   * manual verification, associated skill, and match type (required, missing,
   * extra, etc). HR recruiters or system administrators can use this detail API
   * to investigate specific skill mismatches, audit AI outcomes, or record
   * basis for fit assessments.
   *
   * Security: Only authenticated HR recruiters and system administrators are
   * authorized to access detailed skill match information, and all access
   * events are recorded for compliance and audit.
   *
   * This operation reads from the ats_recruitment_application_skill_matches
   * table and strictly returns only the record matching both applicationId and
   * skillMatchId. Validation ensures users may only view data in their
   * organizational scope.
   *
   * @param connection
   * @param applicationId Unique identifier of the job application being
   *   queried.
   * @param skillMatchId Unique identifier of the skill match record being
   *   retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":skillMatchId")
  public async at(
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedParam("skillMatchId")
    skillMatchId: string & tags.Format<"uuid">,
  ): Promise<IAtsRecruitmentApplicationSkillMatch> {
    applicationId;
    skillMatchId;
    return typia.random<IAtsRecruitmentApplicationSkillMatch>();
  }

  /**
   * Update a skill match record for a job application in
   * ats_recruitment_application_skill_matches.
   *
   * This API operation allows authorized HR recruiters or system administrators
   * to update the details of a skill match between an application and a skill.
   * Updatable fields include match type, AI score, human/manual verification
   * flags. This is essential in workflows where HR reviewers must confirm or
   * override AI-detected skills, correct mismatches, or update validation
   * status. The system enforces business rules such as unique application-skill
   * mapping and appropriate audit logging.
   *
   * Request validation ensures only the record identified by applicationId and
   * skillMatchId is affected. All updates are logged for audit and compliance.
   * The API only permits HR recruiters and system administrators with valid
   * credentials to execute this operation.
   *
   * @param connection
   * @param applicationId Unique identifier of the job application related to
   *   the skill match update.
   * @param skillMatchId Unique identifier of the skill match entry being
   *   updated.
   * @param body Fields to update for the skill match, such as match type,
   *   score, and verification status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":skillMatchId")
  public async update(
    @TypedParam("applicationId")
    applicationId: string & tags.Format<"uuid">,
    @TypedParam("skillMatchId")
    skillMatchId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAtsRecruitmentApplicationSkillMatch.IUpdate,
  ): Promise<IAtsRecruitmentApplicationSkillMatch> {
    applicationId;
    skillMatchId;
    body;
    return typia.random<IAtsRecruitmentApplicationSkillMatch>();
  }
}
