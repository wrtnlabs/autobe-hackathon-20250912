import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudent } from "../../../structures/IStudyPlannerStudent";

/**
 * Register a new student user account stored in study_planner_students table.
 *
 * User registration (join) operation for student role. Creates a new student
 * account with unique email and hashed password stored in
 * study_planner_students table.
 *
 * The system enforces email uniqueness and password security during
 * registration. Upon successful registration, JWT access and refresh tokens are
 * issued conforming to authentication flows.
 *
 * This operation is public and does not require prior authentication.
 *
 * Related endpoints /auth/student/login and /auth/student/refresh are used for
 * subsequent user login and token refresh operations.
 *
 * This process enables new users to begin using the study planner service by
 * authenticating with their credentials.
 *
 * @param props.connection
 * @param props.body Student registration credentials and profile data.
 * @setHeader token.access Authorization
 *
 * @path /auth/student/join
 * @accessor api.functional.auth.student.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Student registration credentials and profile data. */
    body: IStudyPlannerStudent.IJoin;
  };
  export type Body = IStudyPlannerStudent.IJoin;
  export type Response = IStudyPlannerStudent.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/student/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/student/join";
  export const random = (): IStudyPlannerStudent.IAuthorized =>
    typia.random<IStudyPlannerStudent.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate student user and issue JWT tokens.
 *
 * User login operation for student role. Validates email and password against
 * stored credentials in study_planner_students table.
 *
 * Issues JWT tokens upon successful authentication for secure session
 * management.
 *
 * This operation is public and acts as the gateway to our study planner backend
 * for stored users.
 *
 * Related operations /auth/student/join and /auth/student/refresh complete the
 * authentication lifecycle.
 *
 * User credentials are never stored in plaintext and securely compared using
 * password hashing methods.
 *
 * @param props.connection
 * @param props.body Student login credentials including email and password.
 * @setHeader token.access Authorization
 *
 * @path /auth/student/login
 * @accessor api.functional.auth.student.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Student login credentials including email and password. */
    body: IStudyPlannerStudent.ILogin;
  };
  export type Body = IStudyPlannerStudent.ILogin;
  export type Response = IStudyPlannerStudent.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/student/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/student/login";
  export const random = (): IStudyPlannerStudent.IAuthorized =>
    typia.random<IStudyPlannerStudent.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for authenticated student user.
 *
 * Refresh JWT access and refresh tokens for authenticated student users using a
 * valid refresh token.
 *
 * This operation supports seamless session continuation without re-entering
 * credentials.
 *
 * Requires a valid refresh token in the request body.
 *
 * Relies on the study_planner_students table for user identity verification.
 *
 * Complements join and login endpoints for full token lifecycle management.
 *
 * @param props.connection
 * @param props.body Valid refresh token payload for JWT renewal.
 * @setHeader token.access Authorization
 *
 * @path /auth/student/refresh
 * @accessor api.functional.auth.student.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Valid refresh token payload for JWT renewal. */
    body: IStudyPlannerStudent.IRefresh;
  };
  export type Body = IStudyPlannerStudent.IRefresh;
  export type Response = IStudyPlannerStudent.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/student/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/student/refresh";
  export const random = (): IStudyPlannerStudent.IAuthorized =>
    typia.random<IStudyPlannerStudent.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
