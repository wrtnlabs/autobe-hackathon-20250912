import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudent } from "../../../../structures/IStudyPlannerStudent";
import { IPageIStudyPlannerStudent } from "../../../../structures/IPageIStudyPlannerStudent";

/**
 * Search and retrieve paginated list of student users.
 *
 * Retrieve a filtered and paginated list of student users in the system. This
 * allows administrators or authorized users to search and filter students by
 * various criteria such as email, creation date, and soft deletion status.
 *
 * The operation ensures sensitive information (e.g., password hashes) is
 * excluded from the response. Proper authorization is required to access
 * student data.
 *
 * This operation corresponds to the study_planner_students database table which
 * stores student authentication and profile details.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for student user
 *   filtering
 * @path /studyPlanner/student/students
 * @accessor api.functional.studyPlanner.student.students.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for student user filtering */
    body: IStudyPlannerStudent.IRequest;
  };
  export type Body = IStudyPlannerStudent.IRequest;
  export type Response = IPageIStudyPlannerStudent.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/students",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/students";
  export const random = (): IPageIStudyPlannerStudent.ISummary =>
    typia.random<IPageIStudyPlannerStudent.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed student user information.
 *
 * Retrieve detailed information about a student user by their unique ID. This
 * operation returns all relevant user fields except sensitive password
 * information.
 *
 * Access is restricted to authenticated users to ensure privacy and security.
 *
 * This operation enables viewing and management of individual student user
 * data.
 *
 * @param props.connection
 * @param props.studentId Unique identifier of the student user
 * @path /studyPlanner/student/students/:studentId
 * @accessor api.functional.studyPlanner.student.students.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the student user */
    studentId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudent;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/students/:studentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/students/${encodeURIComponent(props.studentId ?? "null")}`;
  export const random = (): IStudyPlannerStudent =>
    typia.random<IStudyPlannerStudent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studentId")(() => typia.assert(props.studentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update student user information.
 *
 * Update fields such as email or other allowed attributes for a student user
 * identified by studentId. Password changes are excluded and require dedicated
 * processes.
 *
 * This operation maintains audit timestamps and does not allow modification of
 * sensitive authentication hashes.
 *
 * Only the authenticated student user may perform updates on their own account.
 *
 * @param props.connection
 * @param props.studentId Unique identifier of the student user
 * @param props.body Student user update data
 * @path /studyPlanner/student/students/:studentId
 * @accessor api.functional.studyPlanner.student.students.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the student user */
    studentId: string & tags.Format<"uuid">;

    /** Student user update data */
    body: IStudyPlannerStudent.IUpdate;
  };
  export type Body = IStudyPlannerStudent.IUpdate;
  export type Response = IStudyPlannerStudent;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/students/:studentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/students/${encodeURIComponent(props.studentId ?? "null")}`;
  export const random = (): IStudyPlannerStudent =>
    typia.random<IStudyPlannerStudent>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studentId")(() => typia.assert(props.studentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete the student user account by setting the deleted_at field to the
 * current timestamp, effectively marking the account as inactive while
 * preserving data for audit.
 *
 * No response body is returned upon successful deletion. Authorization ensures
 * only the account owner can perform this operation.
 *
 * This soft delete mechanics are in accordance with the Prisma schema soft
 * deletion field guidelines.
 *
 * @param props.connection
 * @param props.studentId Unique identifier of the student user
 * @path /studyPlanner/student/students/:studentId
 * @accessor api.functional.studyPlanner.student.students.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the student user */
    studentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/students/:studentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/students/${encodeURIComponent(props.studentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studentId")(() => typia.assert(props.studentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
