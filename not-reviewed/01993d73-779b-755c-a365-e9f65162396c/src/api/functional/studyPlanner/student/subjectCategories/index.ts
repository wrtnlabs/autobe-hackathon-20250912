import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerSubjectCategories } from "../../../../structures/IStudyPlannerSubjectCategories";
import { IPageIStudyPlannerSubjectCategories } from "../../../../structures/IPageIStudyPlannerSubjectCategories";

/**
 * Create a new study subject category.
 *
 * This endpoint allows a student to create a new study subject category with
 * required fields code and name, and an optional description.
 *
 * The new category is returned on successful creation.
 *
 * Authorization requires the user to have the "student" role.
 *
 * Input must comply with the IStudyPlannerSubjectCategories.ICreate schema.
 *
 * @param props.connection
 * @param props.body Information required for subject category creation
 * @path /studyPlanner/student/subjectCategories
 * @accessor api.functional.studyPlanner.student.subjectCategories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required for subject category creation */
    body: IStudyPlannerSubjectCategories.ICreate;
  };
  export type Body = IStudyPlannerSubjectCategories.ICreate;
  export type Response = IStudyPlannerSubjectCategories;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/subjectCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/subjectCategories";
  export const random = (): IStudyPlannerSubjectCategories =>
    typia.random<IStudyPlannerSubjectCategories>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of study subject categories.
 *
 * Retrieve a paginated and filtered list of subject categories that classify
 * study tasks under various subjects including English grammar, vocabulary, and
 * speaking. The endpoint supports filtering by name or code, sorting, and
 * pagination to efficiently browse categories.
 *
 * Only authenticated users having the "student" role are authorized for
 * querying this data.
 *
 * The response returns summary category information suitable for list display.
 *
 * @param props.connection
 * @param props.body Filtering, pagination, and sorting parameters for subject
 *   category search
 * @path /studyPlanner/student/subjectCategories
 * @accessor api.functional.studyPlanner.student.subjectCategories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, pagination, and sorting parameters for subject category
     * search
     */
    body: IStudyPlannerSubjectCategories.IRequest;
  };
  export type Body = IStudyPlannerSubjectCategories.IRequest;
  export type Response = IPageIStudyPlannerSubjectCategories.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/subjectCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/subjectCategories";
  export const random = (): IPageIStudyPlannerSubjectCategories.ISummary =>
    typia.random<IPageIStudyPlannerSubjectCategories.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific subject category.
 *
 * This endpoint returns full details of a specific subject category identified
 * by path parameter `subjectCategoryId`. The category includes code, name,
 * description, and timestamps.
 *
 * Users with the "student" role can access this endpoint.
 *
 * If the requested category does not exist, a 404 error is returned.
 *
 * Proper authorization is enforced to secure category data.
 *
 * @param props.connection
 * @param props.subjectCategoryId Unique identifier of the target subject
 *   category
 * @path /studyPlanner/student/subjectCategories/:subjectCategoryId
 * @accessor api.functional.studyPlanner.student.subjectCategories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target subject category */
    subjectCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerSubjectCategories;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/subjectCategories/:subjectCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/subjectCategories/${encodeURIComponent(props.subjectCategoryId ?? "null")}`;
  export const random = (): IStudyPlannerSubjectCategories =>
    typia.random<IStudyPlannerSubjectCategories>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subjectCategoryId")(() =>
        typia.assert(props.subjectCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a subject category by ID.
 *
 * Update the information of a specific subject category based on its unique
 * identifier. This includes changing the unique code, the human-readable name,
 * and optionally the description of the subject category.
 *
 * Only authenticated student users can perform this update to maintain data
 * integrity and consistency. This operation works directly with the
 * study_planner_subject_categories table.
 *
 * The system validates uniqueness of the code to avoid conflicts and ensures
 * text fields conform to expected lengths.
 *
 * This operation integrates with other APIs that list and retrieve subject
 * categories to provide a full management experience.
 *
 * If the specified subjectCategoryId does not exist, the system returns an
 * error.
 *
 * No response body is included as the operation focuses on update confirmation.
 *
 * @param props.connection
 * @param props.subjectCategoryId Unique identifier of the subject category to
 *   update
 * @param props.body Subject category update data
 * @path /studyPlanner/student/subjectCategories/:subjectCategoryId
 * @accessor api.functional.studyPlanner.student.subjectCategories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<void> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the subject category to update */
    subjectCategoryId: string & tags.Format<"uuid">;

    /** Subject category update data */
    body: IStudyPlannerSubjectCategories.IUpdate;
  };
  export type Body = IStudyPlannerSubjectCategories.IUpdate;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/subjectCategories/:subjectCategoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/subjectCategories/${encodeURIComponent(props.subjectCategoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subjectCategoryId")(() =>
        typia.assert(props.subjectCategoryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a subject category by ID.
 *
 * Permanently remove a subject category by its unique identifier from the
 * system.
 *
 * This operation deletes the record irreversibly and ensures all dependent data
 * references are managed according to database cascading rules.
 *
 * Only authenticated student users are authorized to execute this deletion due
 * to the impact on categorized study data.
 *
 * Attempting to delete a non-existing category results in an error response.
 *
 * There is no response body as the action confirms with standard HTTP status
 * code.
 *
 * Use this with caution to avoid unintended data loss.
 *
 * @param props.connection
 * @param props.subjectCategoryId Unique identifier of the subject category to
 *   delete
 * @path /studyPlanner/student/subjectCategories/:subjectCategoryId
 * @accessor api.functional.studyPlanner.student.subjectCategories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the subject category to delete */
    subjectCategoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/subjectCategories/:subjectCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/subjectCategories/${encodeURIComponent(props.subjectCategoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subjectCategoryId")(() =>
        typia.assert(props.subjectCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
