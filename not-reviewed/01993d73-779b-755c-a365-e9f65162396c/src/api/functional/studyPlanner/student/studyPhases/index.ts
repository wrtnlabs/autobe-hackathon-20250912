import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudyPhases } from "../../../../structures/IStudyPlannerStudyPhases";
import { IPageIStudyPlannerStudyPhases } from "../../../../structures/IPageIStudyPlannerStudyPhases";

/**
 * Create a new study phase with code, name, and optional description.
 *
 * Study phases categorize study activities into preview, main learning, and
 * review phases.
 *
 * This operation allows authorized administrative users to add new study
 * phases.
 *
 * Input validation ensures unique codes and required names.
 *
 * The system generates creation and update timestamps.
 *
 * Returns the full details of the created phase record.
 *
 * @param props.connection
 * @param props.body Information required to create a new study phase
 * @path /studyPlanner/student/studyPhases
 * @accessor api.functional.studyPlanner.student.studyPhases.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new study phase */
    body: IStudyPlannerStudyPhases.ICreate;
  };
  export type Body = IStudyPlannerStudyPhases.ICreate;
  export type Response = IStudyPlannerStudyPhases;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/studyPhases",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/studyPhases";
  export const random = (): IStudyPlannerStudyPhases =>
    typia.random<IStudyPlannerStudyPhases>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of study phases.
 *
 * Retrieve a filtered and paginated list of study phases from the study planner
 * system. Each phase represents a distinct stage of study, such as preview,
 * main learning, or review.
 *
 * This operation is read-only and accessible publicly or to authenticated users
 * according to authorization roles. It can be used to populate UI dropdowns or
 * filters.
 *
 * The study phases are immutable in terms of their core identity; however, this
 * operation facilitates flexible retrieval for display, reporting, or selection
 * purposes.
 *
 * Search and sorting operations are based on indexed fields such as code and
 * name.
 *
 * No sensitive data is exposed through this endpoint, and it supports
 * pagination to handle potentially large datasets.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   study phases
 * @path /studyPlanner/student/studyPhases
 * @accessor api.functional.studyPlanner.student.studyPhases.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for filtering study phases */
    body: IStudyPlannerStudyPhases.IRequest;
  };
  export type Body = IStudyPlannerStudyPhases.IRequest;
  export type Response = IPageIStudyPlannerStudyPhases.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyPhases",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/studyPhases";
  export const random = (): IPageIStudyPlannerStudyPhases.ISummary =>
    typia.random<IPageIStudyPlannerStudyPhases.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed study phase information by ID.
 *
 * Retrieve detailed information about a specific study phase identified by its
 * ID.
 *
 * Study phases represent the distinct phases of study such as preview, main
 * learning, and review.
 *
 * This operation requires the path parameter studyPhaseId as a UUID identifying
 * the target phase.
 *
 * The retrieved data includes code, name, optional description, and timestamps
 * for creation and updates.
 *
 * Only authenticated users can access this detailed view.
 *
 * Errors such as not found or invalid UUID result in appropriate HTTP error
 * codes.
 *
 * @param props.connection
 * @param props.studyPhaseId Unique identifier of the target study phase
 * @path /studyPlanner/student/studyPhases/:studyPhaseId
 * @accessor api.functional.studyPlanner.student.studyPhases.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target study phase */
    studyPhaseId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyPhases;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyPhases/:studyPhaseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyPhases/${encodeURIComponent(props.studyPhaseId ?? "null")}`;
  export const random = (): IStudyPlannerStudyPhases =>
    typia.random<IStudyPlannerStudyPhases>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyPhaseId")(() => typia.assert(props.studyPhaseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update study phase information by ID.
 *
 * Update an existing study phase identified by its ID.
 *
 * Allows modification of code, name, and description.
 *
 * Ensures code uniqueness and name presence.
 *
 * Authorized admin users only.
 *
 * The updated record's full details are returned.
 *
 * Proper error handling for non-existent phases or validation errors is
 * implemented.
 *
 * @param props.connection
 * @param props.studyPhaseId Unique identifier of the study phase to update
 * @param props.body Information to update study phase details
 * @path /studyPlanner/student/studyPhases/:studyPhaseId
 * @accessor api.functional.studyPlanner.student.studyPhases.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the study phase to update */
    studyPhaseId: string & tags.Format<"uuid">;

    /** Information to update study phase details */
    body: IStudyPlannerStudyPhases.IUpdate;
  };
  export type Body = IStudyPlannerStudyPhases.IUpdate;
  export type Response = IStudyPlannerStudyPhases;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/studyPhases/:studyPhaseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyPhases/${encodeURIComponent(props.studyPhaseId ?? "null")}`;
  export const random = (): IStudyPlannerStudyPhases =>
    typia.random<IStudyPlannerStudyPhases>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyPhaseId")(() => typia.assert(props.studyPhaseId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific study phase permanently.
 *
 * This endpoint allows admins to permanently erase a study phase record
 * identified by the path parameter `studyPhaseId`. Deleting a study phase
 * removes it completely from the system, which impacts categorization of study
 * tasks associated with that phase.
 *
 * Only users with the "student" role are authorized to perform this operation
 * as per system policy.
 *
 * The operation requires the UUID of the target study phase and performs a hard
 * delete.
 *
 * No response body is returned on successful deletion.
 *
 * Returns 404 if study phase not found, and 401 if unauthorized access.
 *
 * @param props.connection
 * @param props.studyPhaseId Unique identifier of the target study phase
 * @path /studyPlanner/student/studyPhases/:studyPhaseId
 * @accessor api.functional.studyPlanner.student.studyPhases.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target study phase */
    studyPhaseId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/studyPhases/:studyPhaseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyPhases/${encodeURIComponent(props.studyPhaseId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyPhaseId")(() => typia.assert(props.studyPhaseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
