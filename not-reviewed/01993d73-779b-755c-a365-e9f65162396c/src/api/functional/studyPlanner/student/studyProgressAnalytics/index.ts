import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudyProgressAnalytics } from "../../../../structures/IStudyPlannerStudyProgressAnalytics";
import { IPageIStudyPlannerStudyProgressAnalytics } from "../../../../structures/IPageIStudyPlannerStudyProgressAnalytics";

/**
 * Search and retrieve a filtered, paginated list of study progress analytics.
 *
 * This operation retrieves a filtered and paginated list of study progress
 * analytics records for the authenticated student in the studyPlanner system.
 * It provides detailed progress metrics for study tasks categorized by study
 * phases like preview, main learning, and review.
 *
 * Only authenticated students can access their own study progress analytics
 * data to ensure user privacy and security.
 *
 * The operation queries the study_planner_study_progress_analytics Prisma table
 * with support for advanced filtering and pagination parameters passed in the
 * request body.
 *
 * The response delivers paginated analytics matching search criteria, enabling
 * clients to present summaries and lists.
 *
 * Errors due to invalid input or unauthorized access are handled with
 * appropriate responses.
 *
 * Typically used alongside detail retrieval operations for comprehensive
 * analytics management.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   study progress analytics
 * @path /studyPlanner/student/studyProgressAnalytics
 * @accessor api.functional.studyPlanner.student.studyProgressAnalytics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering study
     * progress analytics
     */
    body: IStudyPlannerStudyProgressAnalytics.IRequest;
  };
  export type Body = IStudyPlannerStudyProgressAnalytics.IRequest;
  export type Response = IPageIStudyPlannerStudyProgressAnalytics;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyProgressAnalytics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/studyProgressAnalytics";
  export const random = (): IPageIStudyPlannerStudyProgressAnalytics =>
    typia.random<IPageIStudyPlannerStudyProgressAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed study progress analytics by ID.
 *
 * Fetch detailed study progress analytics data for a single record by its
 * unique identifier for the authenticated student. It includes counts of
 * completed tasks, total tasks, and the completion rate for the associated
 * study phase.
 *
 * Access is restricted to ensure data privacy; only the owning student can
 * retrieve the record.
 *
 * This operation accesses the study_planner_study_progress_analytics Prisma
 * table and provides full analytics details.
 *
 * Proper error handling is included for unauthorized access or not found
 * errors.
 *
 * @param props.connection
 * @param props.id Unique identifier of the study progress analytics record
 * @path /studyPlanner/student/studyProgressAnalytics/:id
 * @accessor api.functional.studyPlanner.student.studyProgressAnalytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the study progress analytics record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyProgressAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyProgressAnalytics/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyProgressAnalytics/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IStudyPlannerStudyProgressAnalytics =>
    typia.random<IStudyPlannerStudyProgressAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
