import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerLearningGapCharts } from "../../../../structures/IStudyPlannerLearningGapCharts";
import { IPageIStudyPlannerLearningGapCharts } from "../../../../structures/IPageIStudyPlannerLearningGapCharts";

/**
 * Search and retrieve a list of learning gap charts with filtering and
 * pagination.
 *
 * Retrieve a filtered, paginated list of learning gap chart data highlighting
 * student's study subject learning gaps for the authenticated studyPlanner
 * student. The data is grouped by subject categories providing insights into
 * areas needing improvement.
 *
 * Only authenticated students should access their own analytics data.
 *
 * The operation queries the study_planner_learning_gap_charts Prisma table.
 *
 * Supports filtering and pagination parameters.
 *
 * Handles errors gracefully and provides optimized data for frontend
 * visualization.
 *
 * Typically used in combo with detail retrieval endpoint.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for learning gap
 *   charts
 * @path /studyPlanner/student/learningGapCharts
 * @accessor api.functional.studyPlanner.student.learningGapCharts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination parameters for learning gap charts */
    body: IStudyPlannerLearningGapCharts.IRequest;
  };
  export type Body = IStudyPlannerLearningGapCharts.IRequest;
  export type Response = IPageIStudyPlannerLearningGapCharts;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/learningGapCharts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/learningGapCharts";
  export const random = (): IPageIStudyPlannerLearningGapCharts =>
    typia.random<IPageIStudyPlannerLearningGapCharts>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific learning gap chart details by ID.
 *
 * Fetch detailed learning gap chart information by unique ID for the
 * authenticated user. The returned data provides specific metrics on student's
 * learning gaps associated with subject categories.
 *
 * Only the owning authenticated student can access this data to maintain
 * privacy.
 *
 * This operation accesses the study_planner_learning_gap_charts Prisma table
 * and returns complete information.
 *
 * Error responses handle invalid IDs or access violations suitably.
 *
 * @param props.connection
 * @param props.id Unique identifier of the learning gap chart record
 * @path /studyPlanner/student/learningGapCharts/:id
 * @accessor api.functional.studyPlanner.student.learningGapCharts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the learning gap chart record */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerLearningGapCharts;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/learningGapCharts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/learningGapCharts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IStudyPlannerLearningGapCharts =>
    typia.random<IStudyPlannerLearningGapCharts>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
