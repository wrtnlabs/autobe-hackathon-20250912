import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudyPlannerMemoICreate } from "../../../../../structures/IStudyPlannerStudyPlannerMemoICreate";
import { IStudyPlannerStudyPlannerMemo } from "../../../../../structures/IStudyPlannerStudyPlannerMemo";
import { IStudyPlannerStudyPlannerMemoArray } from "../../../../../structures/IStudyPlannerStudyPlannerMemoArray";
import { IStudyPlannerStudyPlannerMemos } from "../../../../../structures/IStudyPlannerStudyPlannerMemos";

/**
 * Create a memo note linked to a study task.
 *
 * Create a new memo note associated with the specified study task owned by the
 * authenticated student user.
 *
 * This operation adds a record to the 'study_planner_memos' table linking text
 * notes to the study task to support user note-taking.
 *
 * Authentication and authorization ensure only the owner can create memos for
 * their task.
 *
 * The request body must contain the memo text content.
 *
 * The response returns the created memo object with its timestamps.
 *
 * Errors include validation failures if memo text is invalid or missing.
 *
 * This operation helps users enrich their study tasks with additional textual
 * information.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of the target study task
 * @param props.body Memo creation data
 * @path /studyPlanner/student/studyTasks/:studyTaskId/memos
 * @accessor api.functional.studyPlanner.student.studyTasks.memos.createMemo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function createMemo(
  connection: IConnection,
  props: createMemo.Props,
): Promise<createMemo.Response> {
  return true === connection.simulate
    ? createMemo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createMemo.METADATA,
          path: createMemo.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace createMemo {
  export type Props = {
    /** UUID of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Memo creation data */
    body: IStudyPlannerStudyPlannerMemoICreate;
  };
  export type Body = IStudyPlannerStudyPlannerMemoICreate;
  export type Response = IStudyPlannerStudyPlannerMemo;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/memos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/memos`;
  export const random = (): IStudyPlannerStudyPlannerMemo =>
    typia.random<IStudyPlannerStudyPlannerMemo>();
  export const simulate = (
    connection: IConnection,
    props: createMemo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: createMemo.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve memos linked to a study task.
 *
 * Retrieve all memo notes associated with a specific study task owned by the
 * authenticated student. Memos provide textual notes supporting study
 * activities.
 *
 * This operation queries the 'study_planner_memos' table to return all memos
 * linked to the specified study task.
 *
 * Security controls ensure only the owner of the study task can retrieve its
 * memos. No request body is required as the input is solely the study task ID
 * in the URL path.
 *
 * The response includes an array of memo objects with memo text, creation, and
 * update timestamps, enabling clients to display or edit notes.
 *
 * Errors include unauthorized access if the user does not own the task, or not
 * found if the task does not exist.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of the target study task
 * @path /studyPlanner/student/studyTasks/:studyTaskId/memos
 * @accessor api.functional.studyPlanner.student.studyTasks.memos.indexMemos
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexMemos(
  connection: IConnection,
  props: indexMemos.Props,
): Promise<indexMemos.Response> {
  return true === connection.simulate
    ? indexMemos.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexMemos.METADATA,
          path: indexMemos.path(props),
          status: null,
        },
      );
}
export namespace indexMemos {
  export type Props = {
    /** UUID of the target study task */
    studyTaskId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyPlannerMemoArray;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/memos",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/memos`;
  export const random = (): IStudyPlannerStudyPlannerMemoArray =>
    typia.random<IStudyPlannerStudyPlannerMemoArray>();
  export const simulate = (
    connection: IConnection,
    props: indexMemos.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexMemos.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific memo attached to a study task.
 *
 * Retrieve a single memo note identified by 'memoId' that belongs to the
 * specified study task for the authenticated student user.
 *
 * This operation queries the 'study_planner_memos' table to fetch the
 * particular memo entity linked to the study task.
 *
 * Security ensures that only the task owner can access the memo details.
 *
 * The response contains memo text, creation date, and last update date.
 *
 * Errors may be returned if the memo or study task does not exist or the user
 * lacks authorization.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of the target study task
 * @param props.memoId UUID of the memo to retrieve
 * @path /studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId
 * @accessor api.functional.studyPlanner.student.studyTasks.memos.atMemo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atMemo(
  connection: IConnection,
  props: atMemo.Props,
): Promise<atMemo.Response> {
  return true === connection.simulate
    ? atMemo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atMemo.METADATA,
          path: atMemo.path(props),
          status: null,
        },
      );
}
export namespace atMemo {
  export type Props = {
    /** UUID of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** UUID of the memo to retrieve */
    memoId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyPlannerMemo;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/memos/${encodeURIComponent(props.memoId ?? "null")}`;
  export const random = (): IStudyPlannerStudyPlannerMemo =>
    typia.random<IStudyPlannerStudyPlannerMemo>();
  export const simulate = (
    connection: IConnection,
    props: atMemo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atMemo.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("memoId")(() => typia.assert(props.memoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a memo entry of a study task in the StudyPlanner database.
 *
 * This API operation allows an authenticated student user to update the content
 * of an existing memo linked to one of their study tasks.
 *
 * The memo is uniquely identified by both the study task ID and memo ID
 * provided in the request path parameters.
 *
 * Security considerations require that only the owning student can update the
 * memo associated with their study task.
 *
 * The operation updates the 'memo_text' field and the 'updated_at' timestamp in
 * the 'study_planner_memos' database table.
 *
 * Validation includes ensuring the memo_text is a non-empty string that meets
 * length constraints.
 *
 * Errors include 401 Unauthorized if the user is not authenticated or not
 * owner, 404 Not Found if memo or study task do not exist, and 400 Bad Request
 * if validation fails.
 *
 * Successful response returns the updated memo entity as detailed in the
 * response body.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the parent study task
 * @param props.memoId Unique identifier of the memo to update
 * @param props.body Memo update payload containing new memo text
 * @path /studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId
 * @accessor api.functional.studyPlanner.student.studyTasks.memos.updateMemo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateMemo(
  connection: IConnection,
  props: updateMemo.Props,
): Promise<updateMemo.Response> {
  return true === connection.simulate
    ? updateMemo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateMemo.METADATA,
          path: updateMemo.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateMemo {
  export type Props = {
    /** Unique identifier of the parent study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier of the memo to update */
    memoId: string & tags.Format<"uuid">;

    /** Memo update payload containing new memo text */
    body: IStudyPlannerStudyPlannerMemos.IUpdate;
  };
  export type Body = IStudyPlannerStudyPlannerMemos.IUpdate;
  export type Response = IStudyPlannerStudyPlannerMemos;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/memos/${encodeURIComponent(props.memoId ?? "null")}`;
  export const random = (): IStudyPlannerStudyPlannerMemos =>
    typia.random<IStudyPlannerStudyPlannerMemos>();
  export const simulate = (
    connection: IConnection,
    props: updateMemo.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateMemo.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("memoId")(() => typia.assert(props.memoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a memo entry from a study task in the StudyPlanner database.
 *
 * This API endpoint enables authenticated student users to completely remove a
 * memo attached to their study task.
 *
 * The memo to delete is specified via the memo ID and the parent study task ID
 * path parameters ensuring exact identification.
 *
 * Security checks ensure only the owner can delete their memo.
 *
 * Being a hard delete, the memo record is removed fully from the database.
 *
 * If the memo or task does not exist or does not belong to the user,
 * appropriate errors are returned.
 *
 * Successful response is empty with HTTP 204 No Content status.
 *
 * This operation is part of the resource management workflow enabling users to
 * clean up their study task notes.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the parent study task
 * @param props.memoId Unique identifier of the memo to delete
 * @path /studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId
 * @accessor api.functional.studyPlanner.student.studyTasks.memos.eraseMemo
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseMemo(
  connection: IConnection,
  props: eraseMemo.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseMemo.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseMemo.METADATA,
          path: eraseMemo.path(props),
          status: null,
        },
      );
}
export namespace eraseMemo {
  export type Props = {
    /** Unique identifier of the parent study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier of the memo to delete */
    memoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/memos/:memoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/memos/${encodeURIComponent(props.memoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseMemo.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseMemo.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("memoId")(() => typia.assert(props.memoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
