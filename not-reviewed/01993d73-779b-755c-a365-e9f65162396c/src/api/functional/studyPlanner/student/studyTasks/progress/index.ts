import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudyTaskProgress } from "../../../../../structures/IStudyPlannerStudyTaskProgress";

/**
 * Create study task progress record.
 *
 * Create a new progress record for a specific study task and study phase.
 *
 * Authenticated students can record the completion timestamp for a study phase
 * linked to a study task. The request body must provide all required data
 * fields defined by the study_planner_study_task_progress entity except
 * auto-generated IDs and timestamps.
 *
 * The system validates the study phase relevance and ensures duplicate progress
 * entries for the same study phase and task do not occur.
 *
 * Upon successful creation, the newly created progress record is returned.
 *
 * This is part of the study lifecycle management enabling detailed tracking of
 * each study phase progress.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier for the target study task
 * @param props.body Creation info of study task progress
 * @path /studyPlanner/student/studyTasks/:studyTaskId/progress
 * @accessor api.functional.studyPlanner.student.studyTasks.progress.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Creation info of study task progress */
    body: IStudyPlannerStudyTaskProgress.ICreate;
  };
  export type Body = IStudyPlannerStudyTaskProgress.ICreate;
  export type Response = IStudyPlannerStudyTaskProgress;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/progress",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/progress`;
  export const random = (): IStudyPlannerStudyTaskProgress =>
    typia.random<IStudyPlannerStudyTaskProgress>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update progress of a study task.
 *
 * Authenticated students can mark phase completions for their study tasks using
 * this API. It stores or updates completion timestamps per phase for the
 * specified task.
 *
 * This operation interacts with the study_planner_study_task_progress entity
 * representing phase-wise progress. It ensures only the owner can update
 * progress.
 *
 * Errors include unauthorized attempts or invalid data.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of the study task to update progress
 * @param props.body Progress data for study phases
 * @path /studyPlanner/student/studyTasks/:studyTaskId/progress
 * @accessor api.functional.studyPlanner.student.studyTasks.progress.updateProgress
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updateProgress(
  connection: IConnection,
  props: updateProgress.Props,
): Promise<updateProgress.Response> {
  return true === connection.simulate
    ? updateProgress.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateProgress.METADATA,
          path: updateProgress.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace updateProgress {
  export type Props = {
    /** UUID of the study task to update progress */
    studyTaskId: string & tags.Format<"uuid">;

    /** Progress data for study phases */
    body: IStudyPlannerStudyTaskProgress.IUpdate;
  };
  export type Body = IStudyPlannerStudyTaskProgress.IUpdate;
  export type Response = IStudyPlannerStudyTaskProgress;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/progress",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/progress`;
  export const random = (): IStudyPlannerStudyTaskProgress =>
    typia.random<IStudyPlannerStudyTaskProgress>();
  export const simulate = (
    connection: IConnection,
    props: updateProgress.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updateProgress.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve study task progress details by progress ID.
 *
 * Retrieve detailed progress information for a specific study task phase by
 * progress ID.
 *
 * This operation allows an authenticated student to access the completion state
 * and timestamps of a study phase associated with a study task. It references
 * the study_planner_study_task_progress table which stores the completion
 * timestamp (`completed_at`), creation and update times for tracking progress.
 *
 * Security considerations include ensuring the requester is authenticated and
 * authorized to view this progress record.
 *
 * This operation works in conjunction with other study task and progress
 * operations, providing fine-grained progress details.
 *
 * Errors will be returned if the specified progress ID does not exist or access
 * is unauthorized.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier for the target study task
 * @param props.progressId Unique identifier for the target progress record
 * @path /studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId
 * @accessor api.functional.studyPlanner.student.studyTasks.progress.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier for the target progress record */
    progressId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyTaskProgress;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/progress/${encodeURIComponent(props.progressId ?? "null")}`;
  export const random = (): IStudyPlannerStudyTaskProgress =>
    typia.random<IStudyPlannerStudyTaskProgress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("progressId")(() => typia.assert(props.progressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update study task progress record.
 *
 * Update an existing study task progress record.
 *
 * Authenticated student users can modify completion timestamps or other allowed
 * fields of a progress entry associated with a study phase and study task.
 *
 * The system validates the existence of the progress record and permissions.
 *
 * Upon success, the updated record is returned.
 *
 * This endpoint supports accurate study phase progress management within the
 * study lifecycle.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier for the target study task
 * @param props.progressId Unique identifier for the target progress record
 * @param props.body Update information for study task progress
 * @path /studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId
 * @accessor api.functional.studyPlanner.student.studyTasks.progress.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier for the target progress record */
    progressId: string & tags.Format<"uuid">;

    /** Update information for study task progress */
    body: IStudyPlannerStudyTaskProgress.IUpdate;
  };
  export type Body = IStudyPlannerStudyTaskProgress.IUpdate;
  export type Response = IStudyPlannerStudyTaskProgress;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/progress/${encodeURIComponent(props.progressId ?? "null")}`;
  export const random = (): IStudyPlannerStudyTaskProgress =>
    typia.random<IStudyPlannerStudyTaskProgress>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("progressId")(() => typia.assert(props.progressId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete study task progress record.
 *
 * Permanently delete a study task progress record.
 *
 * Authenticated students may remove progress entries for study phases attached
 * to their study tasks. This operation completely removes the record from the
 * database and cannot be undone.
 *
 * Appropriate authorization is enforced to prevent unauthorized deletion.
 *
 * This endpoint is useful for correcting or resetting study phase progress
 * data.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier for the target study task
 * @param props.progressId Unique identifier for the target progress record
 * @path /studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId
 * @accessor api.functional.studyPlanner.student.studyTasks.progress.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier for the target progress record */
    progressId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/progress/:progressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/progress/${encodeURIComponent(props.progressId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("progressId")(() => typia.assert(props.progressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
