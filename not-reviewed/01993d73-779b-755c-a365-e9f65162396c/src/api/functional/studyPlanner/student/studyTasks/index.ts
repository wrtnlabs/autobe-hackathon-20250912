import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerStudyTasks } from "../../../../structures/IStudyPlannerStudyTasks";
import { IPageIStudyPlannerStudyTasks } from "../../../../structures/IPageIStudyPlannerStudyTasks";
import { IStudyPlannerStudyTask } from "../../../../structures/IStudyPlannerStudyTask";
export * as progress from "./progress/index";
export * as attachments from "./attachments/index";
export * as memos from "./memos/index";

/**
 * Search and retrieve study tasks of the authenticated user.
 *
 * Search and retrieve a filtered and paginated list of study tasks for the
 * authenticated student.
 *
 * The operation supports filtering by study phase ID, subject category ID,
 * partial title matching, creation date ranges, sorting by several fields, and
 * pagination.
 *
 * Security enforces that returned tasks belong only to the authenticated
 * student user.
 *
 * This operation integrates with create, update, and delete APIs to manage
 * study tasks comprehensively.
 *
 * Results are returned as task summary information optimized for list
 * rendering.
 *
 * @param props.connection
 * @param props.body Search filters and pagination parameters for study tasks
 * @path /studyPlanner/student/studyTasks
 * @accessor api.functional.studyPlanner.student.studyTasks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination parameters for study tasks */
    body: IStudyPlannerStudyTasks.IRequest;
  };
  export type Body = IStudyPlannerStudyTasks.IRequest;
  export type Response = IPageIStudyPlannerStudyTasks.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyTasks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/studyTasks";
  export const random = (): IPageIStudyPlannerStudyTasks.ISummary =>
    typia.random<IPageIStudyPlannerStudyTasks.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed study task information by ID.
 *
 * Retrieve detailed information about a specific study task identified by its
 * ID.
 *
 * Includes the task's title, description, associated study phase and subject
 * category details, attachments like images or PDFs, related memos, and the
 * status of study progress phases.
 *
 * Security restricts access to the owner student to prevent unauthorized data
 * exposure.
 *
 * This operation is designed to support detailed task review and editing
 * workflows.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the target study task
 * @path /studyPlanner/student/studyTasks/:studyTaskId
 * @accessor api.functional.studyPlanner.student.studyTasks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target study task */
    studyTaskId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyTasks;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyTasks/:studyTaskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}`;
  export const random = (): IStudyPlannerStudyTasks =>
    typia.random<IStudyPlannerStudyTasks>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new study task.
 *
 * Allows an authenticated student user to create a new study task within the
 * study planner system. The task must be linked to a valid study phase and
 * subject category, with a mandatory title and optional description.
 *
 * The system validates inputs rigorously to prevent invalid tasks.
 *
 * This endpoint targets the study_planner_study_tasks table, a principal entity
 * managing study tasks, and returns the created record.
 *
 * Errors include 400 for invalid data and 401 for unauthorized access.
 *
 * No path parameter is necessary as the task is newly created.
 *
 * @param props.connection
 * @param props.body Information needed to create a study task
 * @path /studyPlanner/student/studyTasks/:studyTaskId
 * @accessor api.functional.studyPlanner.student.studyTasks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    studyTaskId: string;

    /** Information needed to create a study task */
    body: IStudyPlannerStudyTask.ICreate;
  };
  export type Body = IStudyPlannerStudyTask.ICreate;
  export type Response = IStudyPlannerStudyTask;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/studyTasks/:studyTaskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}`;
  export const random = (): IStudyPlannerStudyTask =>
    typia.random<IStudyPlannerStudyTask>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing study task by ID.
 *
 * This API endpoint is designed for authenticated student users to update their
 * individual study tasks. Each study task is linked to a student, a specific
 * study phase (preview, main learning, review), and a subject category (e.g.,
 * English grammar). Authorized users can modify attributes including title and
 * description.
 *
 * Security considerations ensure only the owner of the task (identified by
 * student_id) may successfully update the resource. Invalid or incomplete data
 * will result in a validation error.
 *
 * The operation closely interacts with the study_planner_study_tasks table
 * defined in the Prisma schema, which stores the core study task entities
 * including relationships to students, study phases, and subject categories.
 *
 * Validation rules enforce title presence and correct foreign key association
 * with existing phases and categories. Upon success, the updated task record is
 * returned.
 *
 * This operation requires the studyTaskId path parameter that corresponds to
 * the UUID of the target study task to update.
 *
 * Errors include 400 for validation failure, 403 for unauthorized access, and
 * 404 if the task is not found.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of target study task to update
 * @param props.body Data for updating the study task
 * @path /studyPlanner/student/studyTasks/:studyTaskId
 * @accessor api.functional.studyPlanner.student.studyTasks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of target study task to update */
    studyTaskId: string & tags.Format<"uuid">;

    /** Data for updating the study task */
    body: IStudyPlannerStudyTask.IUpdate;
  };
  export type Body = IStudyPlannerStudyTask.IUpdate;
  export type Response = IStudyPlannerStudyTask;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/studyTasks/:studyTaskId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}`;
  export const random = (): IStudyPlannerStudyTask =>
    typia.random<IStudyPlannerStudyTask>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a study task by ID.
 *
 * Permanently remove a study task and all its related data from the system.
 * This hard delete operation is accessible only to authenticated student users
 * owning the task.
 *
 * The operation targets the study_planner_study_tasks table as the main entity
 * in the Prisma schema, ensuring cleanup of all linked attachments, memos,
 * alarms, and progress entries via cascading deletes.
 *
 * A valid UUID is required as the path parameter to identify the task to
 * delete. The operation returns no content upon success.
 *
 * Errors include 403 for unauthorized access and 404 if the task is not found.
 *
 * No request body is required since it's a delete operation.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of study task to delete
 * @path /studyPlanner/student/studyTasks/:studyTaskId
 * @accessor api.functional.studyPlanner.student.studyTasks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of study task to delete */
    studyTaskId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/studyTasks/:studyTaskId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
