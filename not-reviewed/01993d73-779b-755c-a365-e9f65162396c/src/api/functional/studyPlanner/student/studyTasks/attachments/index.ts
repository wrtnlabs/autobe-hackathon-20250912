import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerAttachment } from "../../../../../structures/IStudyPlannerAttachment";
import { IPageIStudyPlannerAttachment } from "../../../../../structures/IPageIStudyPlannerAttachment";

/**
 * Add a new attachment to a study task.
 *
 * Create a new attachment entry linked to a study task. The client provides
 * metadata about the uploaded file including type and storage URL.
 *
 * Authentication and ownership validation are required to ensure only the
 * owning student can add attachments to their study tasks.
 *
 * Validation is performed to ensure file type and size constraints are met.
 *
 * Errors return appropriate status codes for invalid input or unauthorized
 * access.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the target study task
 * @param props.body Attachment creation data including file type and file URL
 * @path /studyPlanner/student/studyTasks/:studyTaskId/attachments
 * @accessor api.functional.studyPlanner.student.studyTasks.attachments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Attachment creation data including file type and file URL */
    body: IStudyPlannerAttachment.ICreate;
  };
  export type Body = IStudyPlannerAttachment.ICreate;
  export type Response = IStudyPlannerAttachment;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/attachments`;
  export const random = (): IStudyPlannerAttachment =>
    typia.random<IStudyPlannerAttachment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all attachments for a study task.
 *
 * Retrieve all attachment files associated with the specified study task. The
 * attachments include images and PDF files linked as study materials.
 *
 * This operation requires authentication as only the owner student can access
 * their study task attachments. It uses the studyTaskId path parameter to
 * identify the target study task and returns the relevant attachment data
 * linked by foreign keys.
 *
 * The response contains attachment metadata such as file type and file URL
 * necessary to display or download the contents. Access control and validation
 * ensure that users cannot retrieve attachments for others' study tasks.
 *
 * Related operations include creating new attachments for a study task or
 * retrieving an individual attachment by ID.
 *
 * Errors may occur if the studyTaskId does not exist or if access is
 * unauthorized, resulting in 404 Not Found or 403 Forbidden responses
 * respectively.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the target study task
 * @path /studyPlanner/student/studyTasks/:studyTaskId/attachments
 * @accessor api.functional.studyPlanner.student.studyTasks.attachments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target study task */
    studyTaskId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIStudyPlannerAttachment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/attachments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/attachments`;
  export const random = (): IPageIStudyPlannerAttachment.ISummary =>
    typia.random<IPageIStudyPlannerAttachment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific attachment by ID.
 *
 * Retrieve detailed information of a specific attachment by its ID for a given
 * study task.
 *
 * This endpoint requires authentication and authorization ensuring the
 * requesting user owns the study task.
 *
 * The response provides metadata about the attachment such as file type and URL
 * needed for rendering or download.
 *
 * Errors include 404 if attachment or study task is not found and 403 if user
 * lacks permission.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the target study task
 * @param props.attachmentId Unique identifier of the target attachment
 * @path /studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId
 * @accessor api.functional.studyPlanner.student.studyTasks.attachments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target attachment */
    attachmentId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerAttachment;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IStudyPlannerAttachment =>
    typia.random<IStudyPlannerAttachment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Modify an attachment of a study task.
 *
 * Update metadata of an existing attachment linked to a study task.
 *
 * The client can modify properties such as file type and file URL.
 *
 * Authorization and ownership verification ensure only the user owning the
 * study task may update attachments.
 *
 * Returns updated attachment information on success. Validation errors or
 * unauthorized access lead to appropriate error responses.
 *
 * @param props.connection
 * @param props.studyTaskId Unique identifier of the target study task
 * @param props.attachmentId Unique identifier of the target attachment
 * @param props.body Attachment update data including file type and file URL
 * @path /studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId
 * @accessor api.functional.studyPlanner.student.studyTasks.attachments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** Unique identifier of the target attachment */
    attachmentId: string & tags.Format<"uuid">;

    /** Attachment update data including file type and file URL */
    body: IStudyPlannerAttachment.IUpdate;
  };
  export type Body = IStudyPlannerAttachment.IUpdate;
  export type Response = IStudyPlannerAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IStudyPlannerAttachment =>
    typia.random<IStudyPlannerAttachment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific attachment file linked to a study task.
 *
 * This operation permanently deletes an attachment file associated with a study
 * task owned by the authenticated student user. The attachment represents
 * images or PDFs linked to the task for study-related content management.
 *
 * The deletion process fully removes the record from the
 * 'study_planner_attachments' table, including all metadata such as file type
 * and URL. Users must be authorized to act only on their own attachments,
 * ensuring privacy and security.
 *
 * The API requires the study task's unique ID and the attachment's unique ID to
 * identify and target the resource precisely. Errors include authorization
 * failure if the user does not own the task, or resource not found if no
 * matching attachment exists. No request body is necessary as all
 * identification comes from path parameters.
 *
 * Upon success, the system responds with no content, indicating the attachment
 * has been deleted completely and cannot be recovered.
 *
 * @param props.connection
 * @param props.studyTaskId UUID of the target study task
 * @param props.attachmentId UUID of the target attachment file to delete
 * @path /studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId
 * @accessor api.functional.studyPlanner.student.studyTasks.attachments.eraseAttachment
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAttachment(
  connection: IConnection,
  props: eraseAttachment.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseAttachment.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAttachment.METADATA,
          path: eraseAttachment.path(props),
          status: null,
        },
      );
}
export namespace eraseAttachment {
  export type Props = {
    /** UUID of the target study task */
    studyTaskId: string & tags.Format<"uuid">;

    /** UUID of the target attachment file to delete */
    attachmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/studyTasks/:studyTaskId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/studyTasks/${encodeURIComponent(props.studyTaskId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseAttachment.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAttachment.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("studyTaskId")(() => typia.assert(props.studyTaskId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
