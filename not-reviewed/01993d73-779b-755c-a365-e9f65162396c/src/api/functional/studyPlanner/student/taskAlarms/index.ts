import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerTaskAlarm } from "../../../../structures/IStudyPlannerTaskAlarm";
import { IStudyPlannerStudyPlannerTaskAlarms } from "../../../../structures/IStudyPlannerStudyPlannerTaskAlarms";
import { IPageIStudyPlannerStudyPlannerTaskAlarms } from "../../../../structures/IPageIStudyPlannerStudyPlannerTaskAlarms";

/**
 * Create a new study task alarm.
 *
 * Create a new alarm for a study task in the study planner system.
 *
 * This operation enables authenticated student users to set alarms for their
 * individual study tasks. The alarm includes a user-friendly title and a
 * scheduled timestamp when the PWA notification should trigger.
 *
 * Security considerations ensure only the owning student can create alarms for
 * their tasks. Validation on the alarm time and uniqueness constraints prevent
 * duplicate alarms.
 *
 * This API interfaces with the study_planner_task_alarms table, which holds
 * individual alarms referencing the study task and student.
 *
 * Expected behavior involves storing the alarm record and returning the created
 * alarm details upon success.
 *
 * If the user is unauthorized or provides invalid data, appropriate errors are
 * returned.
 *
 * @param props.connection
 * @param props.body Information required to create a new study task alarm
 * @path /studyPlanner/student/taskAlarms
 * @accessor api.functional.studyPlanner.student.taskAlarms.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new study task alarm */
    body: IStudyPlannerTaskAlarm.ICreate;
  };
  export type Body = IStudyPlannerTaskAlarm.ICreate;
  export type Response = IStudyPlannerTaskAlarm;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/taskAlarms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/taskAlarms";
  export const random = (): IStudyPlannerTaskAlarm =>
    typia.random<IStudyPlannerTaskAlarm>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of task alarms.
 *
 * Retrieve a paginated list of task alarms associated with study tasks for the
 * authenticated student.
 *
 * This search API supports filtering by various criteria such as alarm title,
 * time range, and associated study task.
 *
 * Security restrictions ensure a user can only view their own alarms.
 *
 * The response contains a paginated list of alarm summaries including alarm ID,
 * title, alarm time, and associated task ID.
 *
 * Errors include 401 Unauthorized for unauthenticated access.
 *
 * This operation supports management of alarms set for study reminders within
 * the StudyPlanner system.
 *
 * @param props.connection
 * @param props.body Filtering and pagination parameters for task alarms
 * @path /studyPlanner/student/taskAlarms
 * @accessor api.functional.studyPlanner.student.taskAlarms.searchTaskAlarms
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function searchTaskAlarms(
  connection: IConnection,
  props: searchTaskAlarms.Props,
): Promise<searchTaskAlarms.Response> {
  return true === connection.simulate
    ? searchTaskAlarms.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...searchTaskAlarms.METADATA,
          path: searchTaskAlarms.path(),
          status: null,
        },
        props.body,
      );
}
export namespace searchTaskAlarms {
  export type Props = {
    /** Filtering and pagination parameters for task alarms */
    body: IStudyPlannerStudyPlannerTaskAlarms.IRequest;
  };
  export type Body = IStudyPlannerStudyPlannerTaskAlarms.IRequest;
  export type Response = IPageIStudyPlannerStudyPlannerTaskAlarms.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/taskAlarms",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/taskAlarms";
  export const random = (): IPageIStudyPlannerStudyPlannerTaskAlarms.ISummary =>
    typia.random<IPageIStudyPlannerStudyPlannerTaskAlarms.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: searchTaskAlarms.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: searchTaskAlarms.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific task alarm.
 *
 * Get detailed information about a single task alarm associated with the
 * authenticated user's study tasks.
 *
 * This operation requires the path parameter to specify the exact alarm ID.
 *
 * Security checks ensure only the owner student can access their task alarm.
 *
 * Successful requests return the complete task alarm record including
 * timestamps, title, alarm time, and associated study task.
 *
 * Errors include 401 Unauthorized if not logged in, 404 Not Found if alarm does
 * not exist or does not belong to the user.
 *
 * This operation supports alarm management features in the StudyPlanner system.
 *
 * @param props.connection
 * @param props.taskAlarmId Unique identifier of the task alarm to retrieve
 * @path /studyPlanner/student/taskAlarms/:taskAlarmId
 * @accessor api.functional.studyPlanner.student.taskAlarms.atTaskAlarm
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atTaskAlarm(
  connection: IConnection,
  props: atTaskAlarm.Props,
): Promise<atTaskAlarm.Response> {
  return true === connection.simulate
    ? atTaskAlarm.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atTaskAlarm.METADATA,
          path: atTaskAlarm.path(props),
          status: null,
        },
      );
}
export namespace atTaskAlarm {
  export type Props = {
    /** Unique identifier of the task alarm to retrieve */
    taskAlarmId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerStudyPlannerTaskAlarms;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/taskAlarms/:taskAlarmId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/taskAlarms/${encodeURIComponent(props.taskAlarmId ?? "null")}`;
  export const random = (): IStudyPlannerStudyPlannerTaskAlarms =>
    typia.random<IStudyPlannerStudyPlannerTaskAlarms>();
  export const simulate = (
    connection: IConnection,
    props: atTaskAlarm.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atTaskAlarm.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskAlarmId")(() => typia.assert(props.taskAlarmId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing study task alarm.
 *
 * Update the properties of an existing study task alarm.
 *
 * This operation allows a student to modify their previously set alarm's title
 * and trigger time. It validates ownership, ensuring the alarm belongs to the
 * requesting student, and checks for valid input including future alarm times.
 *
 * The operation guarantees no duplication with other alarms having the same
 * student, study task, and alarm time.
 *
 * The underlying data resides in the study_planner_task_alarms table with all
 * relevant constraints.
 *
 * Successful updates return the updated alarm details; errors such as
 * unauthorized access or invalid input return appropriate status codes.
 *
 * @param props.connection
 * @param props.taskAlarmId Unique identifier of the target task alarm
 * @param props.body Updated information for the study task alarm
 * @path /studyPlanner/student/taskAlarms/:taskAlarmId
 * @accessor api.functional.studyPlanner.student.taskAlarms.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target task alarm */
    taskAlarmId: string & tags.Format<"uuid">;

    /** Updated information for the study task alarm */
    body: IStudyPlannerTaskAlarm.IUpdate;
  };
  export type Body = IStudyPlannerTaskAlarm.IUpdate;
  export type Response = IStudyPlannerTaskAlarm;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/taskAlarms/:taskAlarmId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/taskAlarms/${encodeURIComponent(props.taskAlarmId ?? "null")}`;
  export const random = (): IStudyPlannerTaskAlarm =>
    typia.random<IStudyPlannerTaskAlarm>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskAlarmId")(() => typia.assert(props.taskAlarmId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a study task alarm.
 *
 * Delete an existing study task alarm.
 *
 * This operation permanently removes a specified alarm associated with a
 * student's study task from the system. Prior authorization checks ensure that
 * only the owner can delete their alarms to maintain data security.
 *
 * The deletion is definitive; data cannot be recovered once erased.
 *
 * Data integrity is maintained by cascading or adjusting any dependent data
 * relating to the deleted alarm.
 *
 * Errors for unauthorized access or missing records are handled with proper
 * error codes.
 *
 * @param props.connection
 * @param props.taskAlarmId Unique identifier of the target task alarm
 * @path /studyPlanner/student/taskAlarms/:taskAlarmId
 * @accessor api.functional.studyPlanner.student.taskAlarms.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target task alarm */
    taskAlarmId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/taskAlarms/:taskAlarmId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/taskAlarms/${encodeURIComponent(props.taskAlarmId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("taskAlarmId")(() => typia.assert(props.taskAlarmId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
