import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IStudyPlannerGeneralReminder } from "../../../../structures/IStudyPlannerGeneralReminder";
import { IPageIStudyPlannerGeneralReminder } from "../../../../structures/IPageIStudyPlannerGeneralReminder";

/**
 * Create a new general reminder for the authenticated user.
 *
 * Create a new general reminder linked to the authenticated student user. The
 * request body must include a title, due time in ISO 8601 format, an optional
 * description, and the active flag status.
 *
 * The system validates that the user is authenticated before creating the
 * reminder.
 *
 * After successful creation, the newly created general reminder entity is
 * returned in the response, containing all fields stored including timestamps.
 *
 * This operation operates on the study_planner_general_reminders table and
 * ensures user ownership and data integrity.
 *
 * @param props.connection
 * @param props.body Information for the new general reminder
 * @path /studyPlanner/student/generalReminders
 * @accessor api.functional.studyPlanner.student.generalReminders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information for the new general reminder */
    body: IStudyPlannerGeneralReminder.ICreate;
  };
  export type Body = IStudyPlannerGeneralReminder.ICreate;
  export type Response = IStudyPlannerGeneralReminder;

  export const METADATA = {
    method: "POST",
    path: "/studyPlanner/student/generalReminders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/generalReminders";
  export const random = (): IStudyPlannerGeneralReminder =>
    typia.random<IStudyPlannerGeneralReminder>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered, paginated list of general reminders.
 *
 * Get a paginated list of general reminders.
 *
 * This operation returns general reminder records created by the authenticated
 * student. These reminders are independent of study tasks and serve as personal
 * notifications or to-do items.
 *
 * Filtering by title, reminder status, and due time range is supported to allow
 * users to narrow down results.
 *
 * Pagination parameters control data volume and sorting by due time or creation
 * date.
 *
 * Security ensures only the authenticated user's reminders are returned.
 *
 * Data is fetched from the study_planner_general_reminders table.
 *
 * Invalid input leads to error responses with validation details.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination parameters for general
 *   reminders
 * @path /studyPlanner/student/generalReminders
 * @accessor api.functional.studyPlanner.student.generalReminders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, search, and pagination parameters for general reminders */
    body: IStudyPlannerGeneralReminder.IRequest;
  };
  export type Body = IStudyPlannerGeneralReminder.IRequest;
  export type Response = IPageIStudyPlannerGeneralReminder.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/studyPlanner/student/generalReminders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/studyPlanner/student/generalReminders";
  export const random = (): IPageIStudyPlannerGeneralReminder.ISummary =>
    typia.random<IPageIStudyPlannerGeneralReminder.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a general reminder by its ID.
 *
 * Retrieve detailed information about a single general reminder based on its
 * UUID identifier. This operation fetches the reminder data from the
 * study_planner_general_reminders table.
 *
 * Only authenticated users can perform this operation to ensure privacy and
 * security of user-specific reminder data.
 *
 * The reminder is uniquely identified by the path parameter generalReminderId,
 * which corresponds to the primary key UUID field in the database. The returned
 * data includes the reminder title, scheduled due time, optional description,
 * active status indicating if the reminder is currently effective, and
 * timestamps for creation and updates.
 *
 * If the specified general reminder does not exist or does not belong to the
 * authenticated user, the operation will result in an appropriate 404 Not Found
 * or authorization error response handled by the service logic.
 *
 * No request body is needed as the identifier is provided in the URL path, and
 * the response body returns the main IStudyPlannerGeneralReminder entity.
 *
 * @param props.connection
 * @param props.generalReminderId Unique UUID identifier of the general reminder
 * @path /studyPlanner/student/generalReminders/:generalReminderId
 * @accessor api.functional.studyPlanner.student.generalReminders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique UUID identifier of the general reminder */
    generalReminderId: string & tags.Format<"uuid">;
  };
  export type Response = IStudyPlannerGeneralReminder;

  export const METADATA = {
    method: "GET",
    path: "/studyPlanner/student/generalReminders/:generalReminderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/generalReminders/${encodeURIComponent(props.generalReminderId ?? "null")}`;
  export const random = (): IStudyPlannerGeneralReminder =>
    typia.random<IStudyPlannerGeneralReminder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("generalReminderId")(() =>
        typia.assert(props.generalReminderId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing general reminder by ID.
 *
 * Update an existing general reminder identified by its UUID in the system. The
 * authenticated user can modify the title, due time, optional description, and
 * active status via the request body.
 *
 * The operation ensures that the general reminder to be updated belongs to the
 * authenticated user.
 *
 * Returns the fully updated general reminder entity after applying all changes.
 *
 * This operation acts on the study_planner_general_reminders table as defined
 * in the Prisma schema.
 *
 * @param props.connection
 * @param props.generalReminderId Unique UUID identifier of the general reminder
 *   to update
 * @param props.body Updated information for the general reminder
 * @path /studyPlanner/student/generalReminders/:generalReminderId
 * @accessor api.functional.studyPlanner.student.generalReminders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique UUID identifier of the general reminder to update */
    generalReminderId: string & tags.Format<"uuid">;

    /** Updated information for the general reminder */
    body: IStudyPlannerGeneralReminder.IUpdate;
  };
  export type Body = IStudyPlannerGeneralReminder.IUpdate;
  export type Response = IStudyPlannerGeneralReminder;

  export const METADATA = {
    method: "PUT",
    path: "/studyPlanner/student/generalReminders/:generalReminderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/studyPlanner/student/generalReminders/${encodeURIComponent(props.generalReminderId ?? "null")}`;
  export const random = (): IStudyPlannerGeneralReminder =>
    typia.random<IStudyPlannerGeneralReminder>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("generalReminderId")(() =>
        typia.assert(props.generalReminderId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a general reminder by ID permanently.
 *
 * Delete a general reminder permanently from the system using its unique UUID
 * identifier. The reminder to be deleted must belong to the authenticated
 * user.
 *
 * Since the database schema does not provide a soft-delete column for the
 * general reminders table, this operation performs a hard delete removing the
 * record permanently.
 *
 * Returns no content upon successful deletion.
 *
 * This operation acts directly on the study_planner_general_reminders table
 * according to the Prisma schema specifications.
 *
 * @param props.connection
 * @param props.generalReminderId Unique UUID identifier of the general reminder
 *   to delete
 * @path /studyPlanner/student/generalReminders/:generalReminderId
 * @accessor api.functional.studyPlanner.student.generalReminders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique UUID identifier of the general reminder to delete */
    generalReminderId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/studyPlanner/student/generalReminders/:generalReminderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/studyPlanner/student/generalReminders/${encodeURIComponent(props.generalReminderId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("generalReminderId")(() =>
        typia.assert(props.generalReminderId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
