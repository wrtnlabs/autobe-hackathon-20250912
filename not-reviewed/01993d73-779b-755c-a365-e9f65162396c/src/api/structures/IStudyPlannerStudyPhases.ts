import { tags } from "typia";

/**
 * Defines a study phase such as preview, main learning, or review. Each phase
 * categorizes study activities and includes timestamps for record creation and
 * updates.
 *
 * The 'code' is a unique string used to identify the phase programmatically.
 *
 * The 'name' is the human-readable name for display purposes.
 *
 * The optional 'description' provides further details about the phase.
 *
 * Timestamps track creation and last update times.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStudyPlannerStudyPhases = {
  /**
   * Primary Key unique identifier of the study phase.
   *
   * A UUID string representing the unique ID.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique code identifier of the study phase, e.g., 'preview',
   * 'main_learning', 'review'.
   *
   * Used as a keyword code for recognizing the study phase.
   */
  code: string;

  /**
   * Human-readable name of the study phase, e.g., 'Preview'.
   *
   * This is the display name shown to users.
   */
  name: string;

  /**
   * Optional detailed description of the study phase.
   *
   * May be null if description is not provided.
   */
  description?: string | null | undefined;

  /**
   * Record creation timestamp with timezone.
   *
   * Format: ISO 8601 date-time string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp with timezone.
   *
   * Format: ISO 8601 date-time string.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IStudyPlannerStudyPhases {
  /**
   * Search and pagination request type for study phases. Includes pagination,
   * filtering and sorting options.
   */
  export type IRequest = {
    /** Pagination page number. Optional positive integer. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page. Optional positive integer. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filtering code string. Optional. */
    code?: string | null | undefined;

    /** Filtering name string. Optional. */
    name?: string | null | undefined;

    /** Sort field. Optional. Examples: 'created_at', 'name', 'code' */
    sortBy?: string | null | undefined;

    /** Sort direction. Optional. Enum: 'asc' or 'desc' */
    sortDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request data to create a new study phase in the system.
   *
   * Requires unique code and a descriptive name.
   *
   * Description is optional and can be null.
   */
  export type ICreate = {
    /**
     * Unique code identifier of the study phase.
     *
     * Required to add a new study phase with a unique code such as
     * 'preview'.
     */
    code: string;

    /**
     * Human-readable name of the study phase.
     *
     * Required name describing the phase for display.
     */
    name: string;

    /**
     * Optional description about the study phase.
     *
     * Can be null or omitted.
     */
    description?: string | null | undefined;
  };

  /**
   * Request data to update an existing study phase.
   *
   * All fields are optional and nullable to allow partial updates.
   */
  export type IUpdate = {
    /**
     * Unique code identifier for the study phase.
     *
     * Optional update field to modify the code.
     */
    code?: string | null | undefined;

    /**
     * Human-readable name.
     *
     * Optional update field to change the phase name.
     */
    name?: string | null | undefined;

    /**
     * Optional detailed description.
     *
     * Can be null to clear or update description.
     */
    description?: string | null | undefined;
  };

  /** Summary information of study phase including id, code, and name. */
  export type ISummary = {
    /** Unique identifier of the study phase */
    id: string & tags.Format<"uuid">;

    /** Unique code identifier of the study phase */
    code: string;

    /** Human-readable name of the study phase */
    name: string;
  };
}
