import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Student entity representing authenticated user information used for login and
 * identification.
 *
 * Stores unique email, password hash (not exposed in response types), and audit
 * timestamps.
 *
 * Supports soft deletion via `deleted_at` field.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IStudyPlannerStudent = {
  /**
   * Primary Key.
   *
   * Unique identifier of the student user.
   *
   * Must be a UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email address used for student login and communication.
   *
   * Must be a valid email address format.
   */
  email: string & tags.Format<"email">;

  /**
   * Timestamp when the student record was created.
   *
   * ISO 8601 date-time formatted string.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the student record was last updated.
   *
   * ISO 8601 date-time formatted string.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating when the student record was soft deleted, if
   * applicable.
   *
   * ISO 8601 date-time formatted string or null if not deleted.
   */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IStudyPlannerStudent {
  /**
   * Request body for user registration (join). Contains email and plaintext
   * password for registration.
   */
  export type IJoin = {
    /** Unique email address for registration. */
    email: string;

    /** The plaintext password provided during registration. */
    password: string;
  };

  /**
   * Request body for user login. Contains email and password for
   * authentication.
   */
  export type ILogin = {
    /** User provided email for login. */
    email: string;

    /** User plaintext password for authentication. */
    password: string;
  };

  /**
   * Request body for refreshing JWT tokens. Contains the refresh token
   * string.
   */
  export type IRefresh = {
    /** Refresh token string used to obtain new access token. */
    refreshToken: string;
  };

  /**
   * Response type for authorized authentication results containing token and
   * user info.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated student (UUID). */
    id: string & tags.Format<"uuid">;

    /**
     * Unique email address used for student login and communication.
     *
     * Must be a valid email address format.
     */
    email: string & tags.Format<"email">;

    /**
     * Timestamp when the student record was created.
     *
     * ISO 8601 date-time formatted string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the student record was last updated.
     *
     * ISO 8601 date-time formatted string.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp indicating when the student record was soft deleted, if
     * applicable.
     *
     * ISO 8601 date-time formatted string or null if not deleted.
     */
    deleted_at: (string & tags.Format<"date-time">) | null;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request parameters type for listing and searching study planner students.
   *
   * Includes pagination, sorting, filtering options.
   */
  export type IRequest = {
    /** Search by email string. Optional. Can be used for partial matching. */
    email?: string | null | undefined;

    /**
     * Pagination page number. Optional. Positive integer.
     *
     * If omitted, default pagination applies.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limit of records per page. Optional. Positive integer.
     *
     * Defaults to 100 if omitted.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Sort key for listed students (e.g., created_at, email). Optional. */
    sortBy?: string | null | undefined;

    /** Sort direction, 'asc' or 'desc'. Optional. */
    sortDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Request body for updating student user information.
   *
   * Email can be updated; password changes use a separate flow. Created_at
   * and ID are read-only, omitted.
   */
  export type IUpdate = {
    /**
     * Email address of the student user.
     *
     * Optional. Must be valid email format if provided.
     */
    email?: (string & tags.Format<"email">) | null | undefined;
  };

  /**
   * Summary information of student user containing essential identification
   * fields only.
   */
  export type ISummary = {
    /** Unique identifier of the student user */
    id: string & tags.Format<"uuid">;

    /** Email address of the student user used for login */
    email: string;
  };
}
